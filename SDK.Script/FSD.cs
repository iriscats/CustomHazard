using UnrealDotNet;
using UnrealDotNet.Types;

using UnrealDotNet.Types;
using Object = UnrealDotNet.Types.UObject;
using Guid = SDK.Script.CoreUObjectSDK.Guid;
using Enum = SDK.Script.CoreUObjectSDK.Enum;
using DateTime = SDK.Script.CoreUObjectSDK.DateTime;
using SDK.Script.EngineSDK;
using SDK.Script.CoreUObjectSDK;
using SDK.Script.GameplayTagsSDK;
using SDK.Script.UMGSDK;
using SDK.Script.SlateCoreSDK;
using SDK.Script.AIModuleSDK;
using SDK.Script.FSDEngineSDK;
using SDK.Script.InputCoreSDK;
using SDK.Script.AnimationSharingSDK;
using SDK.Script.NiagaraSDK;
using SDK.Script.DeveloperSettingsSDK;
using SDK.Script.PhysicsCoreSDK;
using SDK.Script.DSTelemetrySDK;
using SDK.Script.OnlineSubsystemUtilsSDK;
using SDK.Script.DLSSBlueprintSDK;
using SDK.Script.SlateSDK;
using SDK.Script.MediaAssetsSDK;
using SDK.Script.AnimGraphRuntimeSDK;

namespace SDK.Script.FSDSDK
{
    public class AcceptInviteBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public AcceptInviteBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public AcceptInviteBlueprintCallProxy AcceptInvite(Object WorldContextObject, Object ListName, Object UserId) { return Invoke<AcceptInviteBlueprintCallProxy>(nameof(AcceptInvite), WorldContextObject, ListName, UserId); }
    }
    public class Objective : ActorComponent
    {
        public Objective(nint addr) : base(addr) { }
        public Object OnObjectiveUpdated { get { return this[nameof(OnObjectiveUpdated)]; } set { this[nameof(OnObjectiveUpdated)] = value; } }
        public Object ObjectiveWidgetClass { get { return this[nameof(ObjectiveWidgetClass)]; } set { this[nameof(ObjectiveWidgetClass)] = value; } }
        public MissionShouts MissionShouts { get { return this[nameof(MissionShouts)].As<MissionShouts>(); } set { this["MissionShouts"] = value; } }
        public Object MissionDescription { get { return this[nameof(MissionDescription)]; } set { this[nameof(MissionDescription)] = value; } }
        public int CompletionRewardInCredits { get { return this[nameof(CompletionRewardInCredits)].GetValue<int>(); } set { this[nameof(CompletionRewardInCredits)].SetValue<int>(value); } }
        public int CompletionRewardInXP { get { return this[nameof(CompletionRewardInXP)].GetValue<int>(); } set { this[nameof(CompletionRewardInXP)].SetValue<int>(value); } }
        public bool ScaleObjectiveToMission { get { return this[nameof(ScaleObjectiveToMission)].Flag; } set { this[nameof(ScaleObjectiveToMission)].Flag = value; } }
        public bool bHasReturnObjective { get { return this[nameof(bHasReturnObjective)].Flag; } set { this[nameof(bHasReturnObjective)].Flag = value; } }
        public bool RequiredReturnObjectiveCompleted { get { return this[nameof(RequiredReturnObjectiveCompleted)].Flag; } set { this[nameof(RequiredReturnObjectiveCompleted)].Flag = value; } }
        public bool ShowObjectiveInHUD { get { return this[nameof(ShowObjectiveInHUD)].Flag; } set { this[nameof(ShowObjectiveInHUD)].Flag = value; } }
        public MissionStat ObjectiveCompletedStat { get { return this[nameof(ObjectiveCompletedStat)].As<MissionStat>(); } set { this["ObjectiveCompletedStat"] = value; } }
        public Object OptionalObjectiveWidgetClass { get { return this[nameof(OptionalObjectiveWidgetClass)]; } set { this[nameof(OptionalObjectiveWidgetClass)] = value; } }
        public int IsPrimaryObjective { get { return this[nameof(IsPrimaryObjective)].GetValue<int>(); } set { this[nameof(IsPrimaryObjective)].SetValue<int>(value); } }
        public bool bIsNeededForMissionCompletion { get { return this[nameof(bIsNeededForMissionCompletion)].Flag; } set { this[nameof(bIsNeededForMissionCompletion)].Flag = value; } }
        public float MissionScale { get { return this[nameof(MissionScale)].GetValue<float>(); } set { this[nameof(MissionScale)].SetValue<float>(value); } }
        public UArray<Biome> BannedInBiomes { get { return new UArray<Biome>(this[nameof(BannedInBiomes)].Address); } }
        public void SignalObjectiveUpdated() { Invoke(nameof(SignalObjectiveUpdated)); }
        public void Receive_StartTracking() { Invoke(nameof(Receive_StartTracking)); }
        public void OnRep_IsPrimaryObjective() { Invoke(nameof(OnRep_IsPrimaryObjective)); }
        public bool IsTutorialObjective() { return Invoke<bool>(nameof(IsTutorialObjective)); }
        public bool IsPrimary() { return Invoke<bool>(nameof(IsPrimary)); }
        public bool IsObjectiveResource(ResourceData InResource) { return Invoke<bool>(nameof(IsObjectiveResource), InResource); }
        public bool IsNeededForMissionCompletion() { return Invoke<bool>(nameof(IsNeededForMissionCompletion)); }
        public bool IsFinalBattle() { return Invoke<bool>(nameof(IsFinalBattle)); }
        public bool IsCompleted() { return Invoke<bool>(nameof(IsCompleted)); }
        public bool HasReplicated() { return Invoke<bool>(nameof(HasReplicated)); }
        public void HandleMissionEnded(bool MissionSuccess) { Invoke(nameof(HandleMissionEnded), MissionSuccess); }
        public Object GetWidgetClassOrDefault(Object DefaultWidgetClass) { return Invoke<Object>(nameof(GetWidgetClassOrDefault), DefaultWidgetClass); }
        public int GetRewardXP() { return Invoke<int>(nameof(GetRewardXP)); }
        public CreditsReward GetRewardCredits() { return Invoke<CreditsReward>(nameof(GetRewardCredits)); }
        public Object GetOptionalMissionWidget() { return Invoke<Object>(nameof(GetOptionalMissionWidget)); }
        public Object GetObjectiveText() { return Invoke<Object>(nameof(GetObjectiveText)); }
        public Texture2D GetObjectiveIconFromClass(Object objectiveClass) { return Invoke<Texture2D>(nameof(GetObjectiveIconFromClass), objectiveClass); }
        public Texture2D GetObjectiveIcon() { return Invoke<Texture2D>(nameof(GetObjectiveIcon)); }
        public Object GetObjectiveDescriptionFromClass(Object objectiveClass, float missionLength) { return Invoke<Object>(nameof(GetObjectiveDescriptionFromClass), objectiveClass, missionLength); }
        public Object GetObjectiveDescription(float missionLength) { return Invoke<Object>(nameof(GetObjectiveDescription), missionLength); }
        public int GetObjectiveAmountFromClass(Object objectiveClass, float missionLength) { return Invoke<int>(nameof(GetObjectiveAmountFromClass), objectiveClass, missionLength); }
        public int GetObjectiveAmount(float missionLength) { return Invoke<int>(nameof(GetObjectiveAmount), missionLength); }
        public ObjectiveMissionIcon GetMissionIcon() { return Invoke<ObjectiveMissionIcon>(nameof(GetMissionIcon)); }
        public Object GetInMissionText() { return Invoke<Object>(nameof(GetInMissionText)); }
        public Object GetInMissionCounterText() { return Invoke<Object>(nameof(GetInMissionCounterText)); }
        public Texture2D GetInMissionCounterIcon() { return Invoke<Texture2D>(nameof(GetInMissionCounterIcon)); }
    }
    public class ActivationOjective : Objective
    {
        public ActivationOjective(nint addr) : base(addr) { }
        public int ObjectivesFound { get { return this[nameof(ObjectivesFound)].GetValue<int>(); } set { this[nameof(ObjectivesFound)].SetValue<int>(value); } }
        public int ObjectivesToFind { get { return this[nameof(ObjectivesToFind)].GetValue<int>(); } set { this[nameof(ObjectivesToFind)].SetValue<int>(value); } }
        public void OnRep_ObjectivesToFind(int prevAmount) { Invoke(nameof(OnRep_ObjectivesToFind), prevAmount); }
        public void OnRep_ObjectivesFound(int prevAmount) { Invoke(nameof(OnRep_ObjectivesFound), prevAmount); }
    }
    public class ActivationObject : Actor
    {
        public ActivationObject(nint addr) : base(addr) { }
        public SingleUsableComponent Usable { get { return this[nameof(Usable)].As<SingleUsableComponent>(); } set { this["Usable"] = value; } }
        public bool HasBeenUsed { get { return this[nameof(HasBeenUsed)].Flag; } set { this[nameof(HasBeenUsed)].Flag = value; } }
        public void OnUsedBy(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnUsedBy), User, Key); }
    }
    public class Reward : DataAsset
    {
        public Reward(nint addr) : base(addr) { }
    }
    public class ActivityCardReward : Reward
    {
        public ActivityCardReward(nint addr) : base(addr) { }
        public GameActivityType Activity { get { return this[nameof(Activity)].As<GameActivityType>(); } set { this["Activity"] = value; } }
    }
    public class GameActivityType : DataAsset
    {
        public GameActivityType(nint addr) : base(addr) { }
        public Object ActivityId { get { return this[nameof(ActivityId)]; } set { this[nameof(ActivityId)] = value; } }
        public EActivityType ActivityType { get { return (EActivityType)this[nameof(ActivityType)].GetValue<int>(); } set { this[nameof(ActivityType)].SetValue<int>((int)value); } }
        public UArray<GameActivitySubTask> SubTasks { get { return new UArray<GameActivitySubTask>(this[nameof(SubTasks)].Address); } }
    }
    public class GameActivityMissionType : GameActivityType
    {
        public GameActivityMissionType(nint addr) : base(addr) { }
        public Object ActivityMission { get { return this[nameof(ActivityMission)]; } set { this[nameof(ActivityMission)] = value; } }
    }
    public class ActivitySubSystem : GameInstanceSubsystem
    {
        public ActivitySubSystem(nint addr) : base(addr) { }
        public void StartActivity(PlayerState PlayerState, GameActivityType Activity) { Invoke(nameof(StartActivity), PlayerState, Activity); }
        public void ShowPlayerReviewUI(bool ReviewActiveMatch) { Invoke(nameof(ShowPlayerReviewUI), ReviewActiveMatch); }
        public bool PlayerReviewUIAvailable(bool ReviewActiveMatch) { return Invoke<bool>(nameof(PlayerReviewUIAvailable), ReviewActiveMatch); }
        public void EndActivity(PlayerState PlayerState, GameActivityType Activity) { Invoke(nameof(EndActivity), PlayerState, Activity); }
    }
    public class GameActivitySettings : DataAsset
    {
        public GameActivitySettings(nint addr) : base(addr) { }
        public UArray<Object> GameActivites { get { return new UArray<Object>(this[nameof(GameActivites)].Address); } }
    }
    public class GameActivityAssignmentType : GameActivityType
    {
        public GameActivityAssignmentType(nint addr) : base(addr) { }
    }
    public class ActorFunctionLibrary : BlueprintFunctionLibrary
    {
        public ActorFunctionLibrary(nint addr) : base(addr) { }
        public void UnlockSpecificCharacters(UArray<PlayerCharacter> Characters, ECharacterState UnlockIf, ECharacterState UnlockTo) { Invoke(nameof(UnlockSpecificCharacters), Characters, UnlockIf, UnlockTo); }
        public void UnlockCharacters(Object WorldContextObject) { Invoke(nameof(UnlockCharacters), WorldContextObject); }
        public float TimeSince(Object WorldContextObject, float Time) { return Invoke<float>(nameof(TimeSince), WorldContextObject, Time); }
        public void SetScalarParameters(Object ParameterName, float Value, UArray<MaterialInstanceDynamic> Materials) { Invoke(nameof(SetScalarParameters), ParameterName, Value, Materials); }
        public void PlayCueOnClient(PlayerController Target, SoundCue cue) { Invoke(nameof(PlayCueOnClient), Target, cue); }
        public void PlayCueOnAll(Object WorldContextObject, SoundCue cue) { Invoke(nameof(PlayCueOnAll), WorldContextObject, cue); }
        public float PingPong(float Time, float Length, bool normalize) { return Invoke<float>(nameof(PingPong), Time, Length, normalize); }
        public float MoveTowards(float Current, float End, float step) { return Invoke<float>(nameof(MoveTowards), Current, End, step); }
        public void LockSpecificCharactersIfState(UArray<PlayerCharacter> Characters, ECharacterState stateToLock) { Invoke(nameof(LockSpecificCharactersIfState), Characters, stateToLock); }
        public void LockSpecificCharacters(UArray<PlayerCharacter> Characters) { Invoke(nameof(LockSpecificCharacters), Characters); }
        public bool LockSpecificCharacterIfState(PlayerCharacter Character, ECharacterState LockIf, ECharacterState LockTo) { return Invoke<bool>(nameof(LockSpecificCharacterIfState), Character, LockIf, LockTo); }
        public void LockCharacters(Object WorldContextObject) { Invoke(nameof(LockCharacters), WorldContextObject); }
        public Object LoadWindowWidgetClass(Object WidgetClass) { return Invoke<Object>(nameof(LoadWindowWidgetClass), WidgetClass); }
        public Object LoadWidgetClass(Object WidgetClass) { return Invoke<Object>(nameof(LoadWidgetClass), WidgetClass); }
        public Object LoadClass(Object softReference) { return Invoke<Object>(nameof(LoadClass), softReference); }
        public void KillActorWithEffects(Actor Actor, SceneComponent visualsToHide, SoundCue deathSound, FXSystemAsset deathParticles, float particleScale, PathfinderCollisionComponent pathColliderToDisable) { Invoke(nameof(KillActorWithEffects), Actor, visualsToHide, deathSound, deathParticles, particleScale, pathColliderToDisable); }
        public bool IsWeakPoint(FSDPhysicalMaterial Material) { return Invoke<bool>(nameof(IsWeakPoint), Material); }
        public bool IsSingleplayer(Object WorldContextObject) { return Invoke<bool>(nameof(IsSingleplayer), WorldContextObject); }
        public bool IsMovingPlatform(Actor Actor) { return Invoke<bool>(nameof(IsMovingPlatform), Actor); }
        public bool IsInRangeOfLocalPlayer(Actor toActor, float MinDistance, float MaxDistance) { return Invoke<bool>(nameof(IsInRangeOfLocalPlayer), toActor, MinDistance, MaxDistance); }
        public bool IsCloseToLocalPlayer(Actor toActor, float Distance) { return Invoke<bool>(nameof(IsCloseToLocalPlayer), toActor, Distance); }
        public int GetTotalHeroLevels(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<int>(nameof(GetTotalHeroLevels), WorldContextObject, characterID); }
        public Guid GetSaveGameIDFromCharacterID(PlayerCharacterID characterID) { return Invoke<Guid>(nameof(GetSaveGameIDFromCharacterID), characterID); }
        public Guid GetSavegameID(Object objectClass) { return Invoke<Guid>(nameof(GetSavegameID), objectClass); }
        public UArray<PlayerCharacter> GetPlayersInRange(Object WorldContextObject, Vector Origin, float Radius, bool MustBeAlive) { return Invoke<UArray<PlayerCharacter>>(nameof(GetPlayersInRange), WorldContextObject, Origin, Radius, MustBeAlive); }
        public ItemID GetItemID(Object itemClass) { return Invoke<ItemID>(nameof(GetItemID), itemClass); }
        public float GetHeroXP(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<float>(nameof(GetHeroXP), WorldContextObject, characterID); }
        public Object GetHeroSwitchToMessage(Object playerClass) { return Invoke<Object>(nameof(GetHeroSwitchToMessage), playerClass); }
        public Object GetHeroSourceName(Object playerClass) { return Invoke<Object>(nameof(GetHeroSourceName), playerClass); }
        public float GetHeroProgress(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<float>(nameof(GetHeroProgress), WorldContextObject, characterID); }
        public Object GetHeroName(Object playerClass) { return Invoke<Object>(nameof(GetHeroName), playerClass); }
        public int GetHeroLevel(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<int>(nameof(GetHeroLevel), WorldContextObject, characterID); }
        public InventoryList GetHeroInventoryList(PlayerCharacterID characterID) { return Invoke<InventoryList>(nameof(GetHeroInventoryList), characterID); }
        public HeroInfo GetHeroInfo(Object playerClass) { return Invoke<HeroInfo>(nameof(GetHeroInfo), playerClass); }
        public Texture2D GetHeroImageSmall(Object playerClass) { return Invoke<Texture2D>(nameof(GetHeroImageSmall), playerClass); }
        public Texture2D GetHeroImageFullSize(Object playerClass) { return Invoke<Texture2D>(nameof(GetHeroImageFullSize), playerClass); }
        public Texture2D GetHeroImage(Object playerClass) { return Invoke<Texture2D>(nameof(GetHeroImage), playerClass); }
        public LinearColor GetHeroColor(Object playerClass) { return Invoke<LinearColor>(nameof(GetHeroColor), playerClass); }
        public ActorComponent GetComponentFromClass(Object Actor, Object ComponentClass) { return Invoke<ActorComponent>(nameof(GetComponentFromClass), Actor, ComponentClass); }
        public ActorComponent GetComponentByClass(Actor Actor, Object ComponentClass) { return Invoke<ActorComponent>(nameof(GetComponentByClass), Actor, ComponentClass); }
        public PlayerCharacterID GetCharacterIDFromCharacter(PlayerCharacter Character) { return Invoke<PlayerCharacterID>(nameof(GetCharacterIDFromCharacter), Character); }
        public PlayerCharacterID GetCharacterID(Object playerClass) { return Invoke<PlayerCharacterID>(nameof(GetCharacterID), playerClass); }
        public UArray<PlayerCharacter> GetAllPlayerCharacters(Object WorldContext) { return Invoke<UArray<PlayerCharacter>>(nameof(GetAllPlayerCharacters), WorldContext); }
        public Vector GetActorTargetCenter(Actor TargetActor) { return Invoke<Vector>(nameof(GetActorTargetCenter), TargetActor); }
        public void FSDRemoveBlendable(PostProcessComponent PostProcessComponent, Object InBlendableObject) { Invoke(nameof(FSDRemoveBlendable), PostProcessComponent, InBlendableObject); }
        public void FSDRemoveAllWidgets(Object WorldContextObject) { Invoke(nameof(FSDRemoveAllWidgets), WorldContextObject); }
        public void FSDDumpCallStack(Object Msg) { Invoke(nameof(FSDDumpCallStack), Msg); }
        public PlayerCharacter FindNearestPlayerCharacter(Object WorldContextObject, Vector fromLocation, float MaxRadius, bool MustBeAlive, bool MustBeUnparalyzed, bool MustHaveLineOfSight) { return Invoke<PlayerCharacter>(nameof(FindNearestPlayerCharacter), WorldContextObject, fromLocation, MaxRadius, MustBeAlive, MustBeUnparalyzed, MustHaveLineOfSight); }
        public Vector FindLatejoinDroppodLocation(FSDGameMode GameMode) { return Invoke<Vector>(nameof(FindLatejoinDroppodLocation), GameMode); }
        public Actor FindClosestEnemyFromLocation(Vector fromLocation, float range, bool LineOfSightCheck, Object WorldContextObject, UArray<Actor> IgnoredActors, Vector Offset, bool onlyTargetable) { return Invoke<Actor>(nameof(FindClosestEnemyFromLocation), fromLocation, range, LineOfSightCheck, WorldContextObject, IgnoredActors, Offset, onlyTargetable); }
        public Actor FindClosestEnemyFromActorWithSkipChance(Actor FromActor, float range, float SkipChance, bool LineOfSightCheck, GameplayTagQuery tagQuery, Vector Offset) { return Invoke<Actor>(nameof(FindClosestEnemyFromActorWithSkipChance), FromActor, range, SkipChance, LineOfSightCheck, tagQuery, Offset); }
        public Actor FindClosestEnemyFromActor(Actor FromActor, float range, bool LineOfSightCheck, GameplayTagQuery tagQuery, Vector Offset) { return Invoke<Actor>(nameof(FindClosestEnemyFromActor), FromActor, range, LineOfSightCheck, tagQuery, Offset); }
        public Vector FindCharacterTeleportLocation(Object WorldContextObject, Vector closeToLocation, float desiredDistance) { return Invoke<Vector>(nameof(FindCharacterTeleportLocation), WorldContextObject, closeToLocation, desiredDistance); }
        public void FadeMaterials(Object WorldContextObject, MeshComponent Mesh, float Duration) { Invoke(nameof(FadeMaterials), WorldContextObject, Mesh, Duration); }
        public float EvaluateRuntimeCurve(Object WorldContextObject, RuntimeFloatCurve Curve, float Time) { return Invoke<float>(nameof(EvaluateRuntimeCurve), WorldContextObject, Curve, Time); }
        public void DissolveMaterials(Object WorldContextObject, MeshComponent Mesh, float Duration) { Invoke(nameof(DissolveMaterials), WorldContextObject, Mesh, Duration); }
        public UArray<MaterialInstanceDynamic> CreateDynamicMaterialInstances(MeshComponent Mesh) { return Invoke<UArray<MaterialInstanceDynamic>>(nameof(CreateDynamicMaterialInstances), Mesh); }
        public float AddHeroXP(Object WorldContextObject, PlayerCharacterID characterID, float amount) { return Invoke<float>(nameof(AddHeroXP), WorldContextObject, characterID, amount); }
        public void AddEnemyKill(PlayerCharacter Instigator, EnemyComponent EnemyComponent, FSDGameState GameState) { Invoke(nameof(AddEnemyKill), Instigator, EnemyComponent, GameState); }
        public bool ActorMatchesTagQuery(GameplayTagQuery Query, Actor InActor) { return Invoke<bool>(nameof(ActorMatchesTagQuery), Query, InActor); }
    }
    public class ActorStateComponent : ActorComponent
    {
        public ActorStateComponent(nint addr) : base(addr) { }
        public Object OnBeginState { get { return this[nameof(OnBeginState)]; } set { this[nameof(OnBeginState)] = value; } }
        public Object OnTickState { get { return this[nameof(OnTickState)]; } set { this[nameof(OnTickState)] = value; } }
        public Object OnEndState { get { return this[nameof(OnEndState)]; } set { this[nameof(OnEndState)] = value; } }
        public ActorStateComponent CurrentState { get { return this[nameof(CurrentState)].As<ActorStateComponent>(); } set { this["CurrentState"] = value; } }
        public ActorStateComponent NextState { get { return this[nameof(NextState)].As<ActorStateComponent>(); } set { this["NextState"] = value; } }
        public ActorStateComponent MasterState { get { return this[nameof(MasterState)].As<ActorStateComponent>(); } set { this["MasterState"] = value; } }
        public float StateActiveTime { get { return this[nameof(StateActiveTime)].GetValue<float>(); } set { this[nameof(StateActiveTime)].SetValue<float>(value); } }
        public void OnRep_CurrentState(ActorStateComponent previousState) { Invoke(nameof(OnRep_CurrentState), previousState); }
        public bool IsStateActive() { return Invoke<bool>(nameof(IsStateActive)); }
        public void GotoState() { Invoke(nameof(GotoState)); }
    }
    public class ActorTrackingCheatInterface : Interface
    {
        public ActorTrackingCheatInterface(nint addr) : base(addr) { }
    }
    public class ActorTrackingComponent : SceneComponent
    {
        public ActorTrackingComponent(nint addr) : base(addr) { }
        public Object WidgetType { get { return this[nameof(WidgetType)]; } set { this[nameof(WidgetType)] = value; } }
        public bool VisibleOnHoldTAB { get { return this[nameof(VisibleOnHoldTAB)].Flag; } set { this[nameof(VisibleOnHoldTAB)].Flag = value; } }
        public bool VisibleFromStart { get { return this[nameof(VisibleFromStart)].Flag; } set { this[nameof(VisibleFromStart)].Flag = value; } }
        public bool bIconHidden { get { return this[nameof(bIconHidden)].Flag; } set { this[nameof(bIconHidden)].Flag = value; } }
        public Object Widget { get { return this[nameof(Widget)]; } set { this[nameof(Widget)] = value; } }
        public void ToggleIcon(bool Visible) { Invoke(nameof(ToggleIcon), Visible); }
        public void ShowAlwaysOn(bool IsActive) { Invoke(nameof(ShowAlwaysOn), IsActive); }
        public void OnHoldTAB(bool IsDown) { Invoke(nameof(OnHoldTAB), IsDown); }
        public bool IsIconVisible() { return Invoke<bool>(nameof(IsIconVisible)); }
    }
    public class ActorTrackingSubsystem : WorldSubsystem
    {
        public ActorTrackingSubsystem(nint addr) : base(addr) { }
    }
    public class DropSpikeTrackingSubsystem : WorldSubsystem
    {
        public DropSpikeTrackingSubsystem(nint addr) : base(addr) { }
        public void IncrementSpikeCount() { Invoke(nameof(IncrementSpikeCount)); }
        public int GetSpikeCount() { return Invoke<int>(nameof(GetSpikeCount)); }
    }
    public class FSDUserWidget : UserWidget
    {
        public FSDUserWidget(nint addr) : base(addr) { }
        public Object OnVisibilityChangedFSD { get { return this[nameof(OnVisibilityChangedFSD)]; } set { this[nameof(OnVisibilityChangedFSD)] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public void SetOpacity(float alpha) { Invoke(nameof(SetOpacity), alpha); }
        public void ScaleByBaseResolution() { Invoke(nameof(ScaleByBaseResolution)); }
        public void Refresh() { Invoke(nameof(Refresh)); }
        public void ReceiveNewVisibility(ESlateVisibility NewVisibility) { Invoke(nameof(ReceiveNewVisibility), NewVisibility); }
        public void OnCloseMenuReleased(bool Handled) { Invoke(nameof(OnCloseMenuReleased), Handled); }
        public void OnCloseMenuPressed(bool Handled) { Invoke(nameof(OnCloseMenuPressed), Handled); }
        public bool HasCharacter() { return Invoke<bool>(nameof(HasCharacter)); }
        public float GetOpacity() { return Invoke<float>(nameof(GetOpacity)); }
        public FSDPlayerState GetFSDPlayerState() { return Invoke<FSDPlayerState>(nameof(GetFSDPlayerState)); }
        public Item GetEquippedItem() { return Invoke<Item>(nameof(GetEquippedItem)); }
        public float GetBaseResolutionScale() { return Invoke<float>(nameof(GetBaseResolutionScale)); }
        public void BP_OnRefresh() { Invoke(nameof(BP_OnRefresh)); }
    }
    public class ActorTrackingWidget : FSDUserWidget
    {
        public ActorTrackingWidget(nint addr) : base(addr) { }
        public Object TargetComponent { get { return this[nameof(TargetComponent)]; } set { this[nameof(TargetComponent)] = value; } }
        public float WorldHeightOffset { get { return this[nameof(WorldHeightOffset)].GetValue<float>(); } set { this[nameof(WorldHeightOffset)].SetValue<float>(value); } }
        public float ScaleBy { get { return this[nameof(ScaleBy)].GetValue<float>(); } set { this[nameof(ScaleBy)].SetValue<float>(value); } }
        public Margin ScreenMargin { get { return this[nameof(ScreenMargin)].As<Margin>(); } set { this["ScreenMargin"] = value; } }
        public int WidgetZOrder { get { return this[nameof(WidgetZOrder)].GetValue<int>(); } set { this[nameof(WidgetZOrder)].SetValue<int>(value); } }
        public bool bTrackCenterOfMass { get { return this[nameof(bTrackCenterOfMass)].Flag; } set { this[nameof(bTrackCenterOfMass)].Flag = value; } }
        public bool bHideWhenPlayerNearby { get { return this[nameof(bHideWhenPlayerNearby)].Flag; } set { this[nameof(bHideWhenPlayerNearby)].Flag = value; } }
        public bool bHideWhenPlayerFarAway { get { return this[nameof(bHideWhenPlayerFarAway)].Flag; } set { this[nameof(bHideWhenPlayerFarAway)].Flag = value; } }
        public float LastTargetDistanceUpdate { get { return this[nameof(LastTargetDistanceUpdate)].GetValue<float>(); } set { this[nameof(LastTargetDistanceUpdate)].SetValue<float>(value); } }
        public void SetTargetComponent(SceneComponent Component) { Invoke(nameof(SetTargetComponent), Component); }
        public void SetTarget(Actor Actor) { Invoke(nameof(SetTarget), Actor); }
        public void OnTargetSet(Actor NewTarget) { Invoke(nameof(OnTargetSet), NewTarget); }
        public void OnTargetDistanceChanged(float Distance) { Invoke(nameof(OnTargetDistanceChanged), Distance); }
        public void OnShow() { Invoke(nameof(OnShow)); }
        public void OnInViewChanged(bool inView, float Angle) { Invoke(nameof(OnInViewChanged), inView, Angle); }
        public Actor GetTarget() { return Invoke<Actor>(nameof(GetTarget)); }
        public Vector2D GetRenderTranslation() { return Invoke<Vector2D>(nameof(GetRenderTranslation)); }
        public bool FindScreenPosition(PlayerController PlayerController, Vector WorldLocation, Margin Margin, Vector ScreenCord, float Angle) { return Invoke<bool>(nameof(FindScreenPosition), PlayerController, WorldLocation, Margin, ScreenCord, Angle); }
        public ActorTrackingWidget CreateTrackingWidget(PlayerController PlayerController, Object WidgetType, SceneComponent TargetComponent) { return Invoke<ActorTrackingWidget>(nameof(CreateTrackingWidget), PlayerController, WidgetType, TargetComponent); }
    }
    public class AdicPuddle : Actor
    {
        public AdicPuddle(nint addr) : base(addr) { }
        public Object TriggerCollider { get { return this[nameof(TriggerCollider)]; } set { this[nameof(TriggerCollider)] = value; } }
        public SphereComponent SphereTrigger { get { return this[nameof(SphereTrigger)].As<SphereComponent>(); } set { this["SphereTrigger"] = value; } }
        public SoundBase SpawnSound { get { return this[nameof(SpawnSound)].As<SoundBase>(); } set { this["SpawnSound"] = value; } }
        public Object InflictedStatusEffect { get { return this[nameof(InflictedStatusEffect)]; } set { this[nameof(InflictedStatusEffect)] = value; } }
        public float LifeTime { get { return this[nameof(LifeTime)].GetValue<float>(); } set { this[nameof(LifeTime)].SetValue<float>(value); } }
        public void Receive_OnPlayerBeginOverlap(PlayerCharacter Player) { Invoke(nameof(Receive_OnPlayerBeginOverlap), Player); }
        public void OnPuddleEndOverLap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnPuddleEndOverLap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnPuddleBeginOverLap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnPuddleBeginOverLap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
    }
    public class OverlapTrackingSubsystem : WorldSubsystem
    {
        public OverlapTrackingSubsystem(nint addr) : base(addr) { }
        public UArray<OverlapPair> Overlaps { get { return new UArray<OverlapPair>(this[nameof(Overlaps)].Address); } }
    }
    public class AdventureObjective : Objective
    {
        public AdventureObjective(nint addr) : base(addr) { }
    }
    public class AfflictionEffect : Object
    {
        public AfflictionEffect(nint addr) : base(addr) { }
        public bool ShouldInstantiate() { return Invoke<bool>(nameof(ShouldInstantiate)); }
        public void ReceiveEndEffect(PawnAfflictionComponent Target) { Invoke(nameof(ReceiveEndEffect), Target); }
        public void ReceiveBeginEffect(PawnAfflictionComponent Target) { Invoke(nameof(ReceiveBeginEffect), Target); }
    }
    public class AfflictionFunctionLibrary : BlueprintFunctionLibrary
    {
        public AfflictionFunctionLibrary(nint addr) : base(addr) { }
        public void PlayEnemyExplosionEffects(FSDPawn enemy) { Invoke(nameof(PlayEnemyExplosionEffects), enemy); }
    }
    public class PawnFrozenUniqueAfflictionEffect : AfflictionEffect
    {
        public PawnFrozenUniqueAfflictionEffect(nint addr) : base(addr) { }
    }
    public class PawnBurningUniqueAfflictionEffect : AfflictionEffect
    {
        public PawnBurningUniqueAfflictionEffect(nint addr) : base(addr) { }
    }
    public class SpawnAtLocationParticleAfflictionEffect : AfflictionEffect
    {
        public SpawnAtLocationParticleAfflictionEffect(nint addr) : base(addr) { }
        public ScaledEffect ScaledParticleEffect { get { return this[nameof(ScaledParticleEffect)].As<ScaledEffect>(); } set { this["ScaledParticleEffect"] = value; } }
    }
    public class AttachedParticlesAfflictionEffect : AfflictionEffect
    {
        public AttachedParticlesAfflictionEffect(nint addr) : base(addr) { }
        public FXSystemAsset ParticleEffect { get { return this[nameof(ParticleEffect)].As<FXSystemAsset>(); } set { this["ParticleEffect"] = value; } }
        public UArray<FXSystemAsset> ParticleEffects { get { return new UArray<FXSystemAsset>(this[nameof(ParticleEffects)].Address); } }
        public EAfflictionSocket Socket { get { return (EAfflictionSocket)this[nameof(Socket)].GetValue<int>(); } set { this[nameof(Socket)].SetValue<int>((int)value); } }
        public bool ScaleToActor { get { return this[nameof(ScaleToActor)].Flag; } set { this[nameof(ScaleToActor)].Flag = value; } }
        public bool UseVisibilityHack { get { return this[nameof(UseVisibilityHack)].Flag; } set { this[nameof(UseVisibilityHack)].Flag = value; } }
        public bool UseBoneFilter { get { return this[nameof(UseBoneFilter)].Flag; } set { this[nameof(UseBoneFilter)].Flag = value; } }
    }
    public class CharacterShoutAfflictionEffect : AfflictionEffect
    {
        public CharacterShoutAfflictionEffect(nint addr) : base(addr) { }
        public DialogDataAsset Shout { get { return this[nameof(Shout)].As<DialogDataAsset>(); } set { this["Shout"] = value; } }
    }
    public class CameraParticleAfflictionEffect : AfflictionEffect
    {
        public CameraParticleAfflictionEffect(nint addr) : base(addr) { }
        public ParticleSystem ParticleEffect { get { return this[nameof(ParticleEffect)].As<ParticleSystem>(); } set { this["ParticleEffect"] = value; } }
    }
    public class ShieldLinkedAfflictionEffect : AfflictionEffect
    {
        public ShieldLinkedAfflictionEffect(nint addr) : base(addr) { }
    }
    public class SoundAfflictionEffect : AfflictionEffect
    {
        public SoundAfflictionEffect(nint addr) : base(addr) { }
        public SoundCue BeginSound { get { return this[nameof(BeginSound)].As<SoundCue>(); } set { this["BeginSound"] = value; } }
        public SoundCue EndSound { get { return this[nameof(EndSound)].As<SoundCue>(); } set { this["EndSound"] = value; } }
        public bool Attach { get { return this[nameof(Attach)].Flag; } set { this[nameof(Attach)].Flag = value; } }
        public Object AttachBone { get { return this[nameof(AttachBone)]; } set { this[nameof(AttachBone)] = value; } }
        public float FadeOnLoopEndDuration { get { return this[nameof(FadeOnLoopEndDuration)].GetValue<float>(); } set { this[nameof(FadeOnLoopEndDuration)].SetValue<float>(value); } }
    }
    public class AttachMeshesAfflictionEffect : AfflictionEffect
    {
        public AttachMeshesAfflictionEffect(nint addr) : base(addr) { }
        public UArray<AttachMeshesAfflictionItem> AttachItems { get { return new UArray<AttachMeshesAfflictionItem>(this[nameof(AttachItems)].Address); } }
        public ParticleSystem OnRemoveEffect { get { return this[nameof(OnRemoveEffect)].As<ParticleSystem>(); } set { this["OnRemoveEffect"] = value; } }
    }
    public class ScalingMeshAfflictionEffect : AfflictionEffect
    {
        public ScalingMeshAfflictionEffect(nint addr) : base(addr) { }
        public EFrozenAfflictionType AfflictionType { get { return (EFrozenAfflictionType)this[nameof(AfflictionType)].GetValue<int>(); } set { this[nameof(AfflictionType)].SetValue<int>((int)value); } }
        public UArray<ScalingMeshAfflictionItem> IceParts { get { return new UArray<ScalingMeshAfflictionItem>(this[nameof(IceParts)].Address); } }
        public MaterialInterface MaterialOverride { get { return this[nameof(MaterialOverride)].As<MaterialInterface>(); } set { this["MaterialOverride"] = value; } }
        public Object ParticleBone { get { return this[nameof(ParticleBone)]; } set { this[nameof(ParticleBone)] = value; } }
        public UArray<MaterialInterface> IceMaterials { get { return new UArray<MaterialInterface>(this[nameof(IceMaterials)].Address); } }
    }
    public class BurningAfflictionEffect : AfflictionEffect
    {
        public BurningAfflictionEffect(nint addr) : base(addr) { }
        public EFrozenBitsSize FireParticleSize { get { return (EFrozenBitsSize)this[nameof(FireParticleSize)].GetValue<int>(); } set { this[nameof(FireParticleSize)].SetValue<int>((int)value); } }
    }
    public class StaggeredAfflictionEffect : AfflictionEffect
    {
        public StaggeredAfflictionEffect(nint addr) : base(addr) { }
        public float StaggerStrength { get { return this[nameof(StaggerStrength)].GetValue<float>(); } set { this[nameof(StaggerStrength)].SetValue<float>(value); } }
    }
    public class BoneParticlesAfflictionEffect : AfflictionEffect
    {
        public BoneParticlesAfflictionEffect(nint addr) : base(addr) { }
        public UArray<ParticleSystem> Particles { get { return new UArray<ParticleSystem>(this[nameof(Particles)].Address); } }
        public SoundCue Sound { get { return this[nameof(Sound)].As<SoundCue>(); } set { this["Sound"] = value; } }
    }
    public class AnimatedItemParticleAfflictionEffect : AfflictionEffect
    {
        public AnimatedItemParticleAfflictionEffect(nint addr) : base(addr) { }
        public EItemCategory ItemCategory { get { return (EItemCategory)this[nameof(ItemCategory)].GetValue<int>(); } set { this[nameof(ItemCategory)].SetValue<int>((int)value); } }
        public ParticleSystem ParticleEffect { get { return this[nameof(ParticleEffect)].As<ParticleSystem>(); } set { this["ParticleEffect"] = value; } }
        public Object Socket { get { return this[nameof(Socket)]; } set { this[nameof(Socket)] = value; } }
    }
    public class PlayerCharacterMontageAfflictionEffect : AfflictionEffect
    {
        public PlayerCharacterMontageAfflictionEffect(nint addr) : base(addr) { }
        public AnimMontage FP_Montage { get { return this[nameof(FP_Montage)].As<AnimMontage>(); } set { this["FP_Montage"] = value; } }
        public AnimMontage TP_Montage { get { return this[nameof(TP_Montage)].As<AnimMontage>(); } set { this["TP_Montage"] = value; } }
        public float BlendOut { get { return this[nameof(BlendOut)].GetValue<float>(); } set { this[nameof(BlendOut)].SetValue<float>(value); } }
        public UArray<Object> RandomStarts { get { return new UArray<Object>(this[nameof(RandomStarts)].Address); } }
    }
    public class EnemySkinAfflictionEffect : AfflictionEffect
    {
        public EnemySkinAfflictionEffect(nint addr) : base(addr) { }
        public UArray<MaterialInterface> NewMaterials { get { return new UArray<MaterialInterface>(this[nameof(NewMaterials)].Address); } }
    }
    public class EnemyScaleAfflictionEffect : AfflictionEffect
    {
        public EnemyScaleAfflictionEffect(nint addr) : base(addr) { }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public bool RevertOnEndEffect { get { return this[nameof(RevertOnEndEffect)].Flag; } set { this[nameof(RevertOnEndEffect)].Flag = value; } }
    }
    public class HeroEnemyAfflictionEffect : AfflictionEffect
    {
        public HeroEnemyAfflictionEffect(nint addr) : base(addr) { }
        public GameplayTag TagToAdd { get { return this[nameof(TagToAdd)].As<GameplayTag>(); } set { this["TagToAdd"] = value; } }
    }
    public class AfflictionSettings : DataAsset
    {
        public AfflictionSettings(nint addr) : base(addr) { }
        public ScaledMeshAfflictionTypeItem FrozenScaledMeshAffliction { get { return this[nameof(FrozenScaledMeshAffliction)].As<ScaledMeshAfflictionTypeItem>(); } set { this["FrozenScaledMeshAffliction"] = value; } }
        public ScaledMeshAfflictionTypeItem InfectedScaledMeshAffliction { get { return this[nameof(InfectedScaledMeshAffliction)].As<ScaledMeshAfflictionTypeItem>(); } set { this["InfectedScaledMeshAffliction"] = value; } }
        public Object BurningSound { get { return this[nameof(BurningSound)]; } set { this[nameof(BurningSound)] = value; } }
        public float HeavyStaggerMinTime { get { return this[nameof(HeavyStaggerMinTime)].GetValue<float>(); } set { this[nameof(HeavyStaggerMinTime)].SetValue<float>(value); } }
        public float MediumStaggerMinTime { get { return this[nameof(MediumStaggerMinTime)].GetValue<float>(); } set { this[nameof(MediumStaggerMinTime)].SetValue<float>(value); } }
        public PawnAffliction HeavyStaggerAffliction { get { return this[nameof(HeavyStaggerAffliction)].As<PawnAffliction>(); } set { this["HeavyStaggerAffliction"] = value; } }
        public PawnAffliction MediumStaggerAffliction { get { return this[nameof(MediumStaggerAffliction)].As<PawnAffliction>(); } set { this["MediumStaggerAffliction"] = value; } }
        public PawnAffliction ShortStaggerAffliction { get { return this[nameof(ShortStaggerAffliction)].As<PawnAffliction>(); } set { this["ShortStaggerAffliction"] = value; } }
        public PawnAffliction EliteAffliction { get { return this[nameof(EliteAffliction)].As<PawnAffliction>(); } set { this["EliteAffliction"] = value; } }
        public UArray<Object> BurningParticles { get { return new UArray<Object>(this[nameof(BurningParticles)].Address); } }
        public UArray<Object> EletrocutedParticles { get { return new UArray<Object>(this[nameof(EletrocutedParticles)].Address); } }
        public UArray<Object> ExplodingParticles { get { return new UArray<Object>(this[nameof(ExplodingParticles)].Address); } }
        public UArray<Object> ExplodingSounds { get { return new UArray<Object>(this[nameof(ExplodingSounds)].Address); } }
    }
    public class FSDPawn : Pawn
    {
        public FSDPawn(nint addr) : base(addr) { }
        public Object OnFrozenEvent { get { return this[nameof(OnFrozenEvent)]; } set { this[nameof(OnFrozenEvent)] = value; } }
        public StatusEffectsComponent StatusEffects { get { return this[nameof(StatusEffects)].As<StatusEffectsComponent>(); } set { this["StatusEffects"] = value; } }
        public EnemyTemperatureComponent temperature { get { return this[nameof(temperature)].As<EnemyTemperatureComponent>(); } set { this["temperature"] = value; } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public EnemyDescriptor SpawnedFromDescriptor { get { return this[nameof(SpawnedFromDescriptor)].As<EnemyDescriptor>(); } set { this["SpawnedFromDescriptor"] = value; } }
        public bool IsFrozen { get { return this[nameof(IsFrozen)].Flag; } set { this[nameof(IsFrozen)].Flag = value; } }
        public bool CanFlee { get { return this[nameof(CanFlee)].Flag; } set { this[nameof(CanFlee)].Flag = value; } }
        public bool IsInRagdoll { get { return this[nameof(IsInRagdoll)].Flag; } set { this[nameof(IsInRagdoll)].Flag = value; } }
        public bool FleeInsteadOfBackingOff { get { return this[nameof(FleeInsteadOfBackingOff)].Flag; } set { this[nameof(FleeInsteadOfBackingOff)].Flag = value; } }
        public bool IsFleeing { get { return this[nameof(IsFleeing)].Flag; } set { this[nameof(IsFleeing)].Flag = value; } }
        public PawnStatsComponent PawnStatsInstance { get { return this[nameof(PawnStatsInstance)].As<PawnStatsComponent>(); } set { this["PawnStatsInstance"] = value; } }
        public void UnFreeze() { Invoke(nameof(UnFreeze)); }
        public void TriggerFadeRagdoll() { Invoke(nameof(TriggerFadeRagdoll)); }
        public void StopFleeing() { Invoke(nameof(StopFleeing)); }
        public void StartFleeing(Vector fromLocation) { Invoke(nameof(StartFleeing), fromLocation); }
        public void SetAlerted(bool isAlerted) { Invoke(nameof(SetAlerted), isAlerted); }
        public void Receive_Alerted() { Invoke(nameof(Receive_Alerted)); }
        public void OnUnFrozen() { Invoke(nameof(OnUnFrozen)); }
        public void OnTriggerFadeRagdoll() { Invoke(nameof(OnTriggerFadeRagdoll)); }
        public void OnStoppedFleeing() { Invoke(nameof(OnStoppedFleeing)); }
        public void OnStartedFleeing() { Invoke(nameof(OnStartedFleeing)); }
        public void OnRep_IsFrozen() { Invoke(nameof(OnRep_IsFrozen)); }
        public void OnFrozen(Actor Source) { Invoke(nameof(OnFrozen), Source); }
        public void OnFirstHostileDamageTaken() { Invoke(nameof(OnFirstHostileDamageTaken)); }
        public void OnEnemyScaled(float NewScale) { Invoke(nameof(OnEnemyScaled), NewScale); }
        public void OnArmorShattered(Vector Location) { Invoke(nameof(OnArmorShattered), Location); }
        public void OnAlerted() { Invoke(nameof(OnAlerted)); }
        public void MakeRagdollMesh(SkeletalMeshComponent Mesh) { Invoke(nameof(MakeRagdollMesh), Mesh); }
        public void MakeElite() { Invoke(nameof(MakeElite)); }
        public bool IsElite() { return Invoke<bool>(nameof(IsElite)); }
        public bool GetIsAlerted() { return Invoke<bool>(nameof(GetIsAlerted)); }
        public HealthComponentBase GetHealthComponent() { return Invoke<HealthComponentBase>(nameof(GetHealthComponent)); }
        public FSDAIController GetFSDAIController() { return Invoke<FSDAIController>(nameof(GetFSDAIController)); }
        public EPawnAttitude GetAttitude() { return Invoke<EPawnAttitude>(nameof(GetAttitude)); }
        public void Freeze(Actor Source) { Invoke(nameof(Freeze), Source); }
        public void ExplodePawn() { Invoke(nameof(ExplodePawn)); }
        public void BackOffFromLocation(Vector fromLocation) { Invoke(nameof(BackOffFromLocation), fromLocation); }
    }
    public class DeepPathfinderCharacter : FSDPawn
    {
        public DeepPathfinderCharacter(nint addr) : base(addr) { }
        public DeepPathfinderMovement PathfinderMovement { get { return this[nameof(PathfinderMovement)].As<DeepPathfinderMovement>(); } set { this["PathfinderMovement"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public Object CenterMassSocketName { get { return this[nameof(CenterMassSocketName)]; } set { this[nameof(CenterMassSocketName)] = value; } }
        public DeepPatherFinderCharacterAfflictionComponent Affliction { get { return this[nameof(Affliction)].As<DeepPatherFinderCharacterAfflictionComponent>(); } set { this["Affliction"] = value; } }
        public float AnimationOffset { get { return this[nameof(AnimationOffset)].GetValue<float>(); } set { this[nameof(AnimationOffset)].SetValue<float>(value); } }
        public bool CanPlayerStandOn { get { return this[nameof(CanPlayerStandOn)].Flag; } set { this[nameof(CanPlayerStandOn)].Flag = value; } }
        public bool UseDormancy { get { return this[nameof(UseDormancy)].Flag; } set { this[nameof(UseDormancy)].Flag = value; } }
        public float StaggerDurationMultiplier { get { return this[nameof(StaggerDurationMultiplier)].GetValue<float>(); } set { this[nameof(StaggerDurationMultiplier)].SetValue<float>(value); } }
        public float StaggerImunityWindow { get { return this[nameof(StaggerImunityWindow)].GetValue<float>(); } set { this[nameof(StaggerImunityWindow)].SetValue<float>(value); } }
        public bool StaggerPauseLogic { get { return this[nameof(StaggerPauseLogic)].Flag; } set { this[nameof(StaggerPauseLogic)].Flag = value; } }
        public bool IsHidden { get { return this[nameof(IsHidden)].Flag; } set { this[nameof(IsHidden)].Flag = value; } }
        public bool IsStaggered { get { return this[nameof(IsStaggered)].Flag; } set { this[nameof(IsStaggered)].Flag = value; } }
        public bool FrozenPauseLogic { get { return this[nameof(FrozenPauseLogic)].Flag; } set { this[nameof(FrozenPauseLogic)].Flag = value; } }
        public PawnAffliction CurrentStaggerAffliction { get { return this[nameof(CurrentStaggerAffliction)].As<PawnAffliction>(); } set { this["CurrentStaggerAffliction"] = value; } }
        public float AttackerRadius { get { return this[nameof(AttackerRadius)].GetValue<float>(); } set { this[nameof(AttackerRadius)].SetValue<float>(value); } }
        public UArray<MaterialInterface> CachedMaterials { get { return new UArray<MaterialInterface>(this[nameof(CachedMaterials)].Address); } }
        public float AllowedInFormationChance { get { return this[nameof(AllowedInFormationChance)].GetValue<float>(); } set { this[nameof(AllowedInFormationChance)].SetValue<float>(value); } }
        public bool TryJoinFormation() { return Invoke<bool>(nameof(TryJoinFormation)); }
        public void SetHidden(bool shouldHide) { Invoke(nameof(SetHidden), shouldHide); }
        public void OnPausedMovementElapsed() { Invoke(nameof(OnPausedMovementElapsed)); }
        public void OnControlledByPlayer(bool IsControlled, bool IsLocallyControlled) { Invoke(nameof(OnControlledByPlayer), IsControlled, IsLocallyControlled); }
        public void LeaveFormation() { Invoke(nameof(LeaveFormation)); }
    }
    public class EnemyDeepPathfinderCharacter : DeepPathfinderCharacter
    {
        public EnemyDeepPathfinderCharacter(nint addr) : base(addr) { }
        public EnemyHealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<EnemyHealthComponent>(); } set { this["HealthComponent"] = value; } }
        public QueuedMontage QueuedMontage { get { return this[nameof(QueuedMontage)].As<QueuedMontage>(); } set { this["QueuedMontage"] = value; } }
        public void SwitchToDynamicBaseShader(MaterialInterface baseShader, MeshComponent MeshComponent) { Invoke(nameof(SwitchToDynamicBaseShader), baseShader, MeshComponent); }
        public void OnRep_QueuedMontage() { Invoke(nameof(OnRep_QueuedMontage)); }
    }
    public class AFlyingBug : EnemyDeepPathfinderCharacter
    {
        public AFlyingBug(nint addr) : base(addr) { }
        public EnemyComponent EnemyComponent { get { return this[nameof(EnemyComponent)].As<EnemyComponent>(); } set { this["EnemyComponent"] = value; } }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public OutlineComponent outline { get { return this[nameof(outline)].As<OutlineComponent>(); } set { this["outline"] = value; } }
        public PawnSensingComponent Senses { get { return this[nameof(Senses)].As<PawnSensingComponent>(); } set { this["Senses"] = value; } }
        public PawnAlertComponent Alert { get { return this[nameof(Alert)].As<PawnAlertComponent>(); } set { this["Alert"] = value; } }
        public SphereComponent ExplosionSphere { get { return this[nameof(ExplosionSphere)].As<SphereComponent>(); } set { this["ExplosionSphere"] = value; } }
        public AudioComponent WingSoundComponent { get { return this[nameof(WingSoundComponent)].As<AudioComponent>(); } set { this["WingSoundComponent"] = value; } }
        public FrozenPawnImpactComponent FrozenImpact { get { return this[nameof(FrozenImpact)].As<FrozenPawnImpactComponent>(); } set { this["FrozenImpact"] = value; } }
        public HitReactionComponent HitReactions { get { return this[nameof(HitReactions)].As<HitReactionComponent>(); } set { this["HitReactions"] = value; } }
        public Actor RotateTarget { get { return this[nameof(RotateTarget)].As<Actor>(); } set { this["RotateTarget"] = value; } }
        public SoundBase ChatterSound { get { return this[nameof(ChatterSound)].As<SoundBase>(); } set { this["ChatterSound"] = value; } }
        public float DistanceForAttackMode { get { return this[nameof(DistanceForAttackMode)].GetValue<float>(); } set { this[nameof(DistanceForAttackMode)].SetValue<float>(value); } }
        public float MinChatterDelay { get { return this[nameof(MinChatterDelay)].GetValue<float>(); } set { this[nameof(MinChatterDelay)].SetValue<float>(value); } }
        public float MaxChatterDelay { get { return this[nameof(MaxChatterDelay)].GetValue<float>(); } set { this[nameof(MaxChatterDelay)].SetValue<float>(value); } }
        public float AttackModeRotationSpeed { get { return this[nameof(AttackModeRotationSpeed)].GetValue<float>(); } set { this[nameof(AttackModeRotationSpeed)].SetValue<float>(value); } }
        public bool UsesAttackStance { get { return this[nameof(UsesAttackStance)].Flag; } set { this[nameof(UsesAttackStance)].Flag = value; } }
        public bool SetLifeTime { get { return this[nameof(SetLifeTime)].Flag; } set { this[nameof(SetLifeTime)].Flag = value; } }
        public bool AttackStance { get { return this[nameof(AttackStance)].Flag; } set { this[nameof(AttackStance)].Flag = value; } }
        public bool LookStraight { get { return this[nameof(LookStraight)].Flag; } set { this[nameof(LookStraight)].Flag = value; } }
        public bool UseDefaultRagdoll { get { return this[nameof(UseDefaultRagdoll)].Flag; } set { this[nameof(UseDefaultRagdoll)].Flag = value; } }
        public void StartFizzle() { Invoke(nameof(StartFizzle)); }
        public void SetRotateTarget(Actor aTarget) { Invoke(nameof(SetRotateTarget), aTarget); }
        public void SetExternallyControlled(bool isExternallyControlled) { Invoke(nameof(SetExternallyControlled), isExternallyControlled); }
        public void SetAttackStance(bool isAttackStance) { Invoke(nameof(SetAttackStance), isAttackStance); }
        public void PlayVoice() { Invoke(nameof(PlayVoice)); }
        public void OnStartFalling() { Invoke(nameof(OnStartFalling)); }
        public void OnRep_AttackStance() { Invoke(nameof(OnRep_AttackStance)); }
        public void OnRagdoll() { Invoke(nameof(OnRagdoll)); }
        public void OnFreezeImpact() { Invoke(nameof(OnFreezeImpact)); }
        public void OnBugDeath(HealthComponentBase Health) { Invoke(nameof(OnBugDeath), Health); }
        public float GetMidZpointFromCielingAndFloor(float distanceFromCieling, float distanceFromFloor) { return Invoke<float>(nameof(GetMidZpointFromCielingAndFloor), distanceFromCieling, distanceFromFloor); }
        public bool GetIsInAttackStance() { return Invoke<bool>(nameof(GetIsInAttackStance)); }
        public void All_Ragdoll(Vector_NetQuantize Location, Vector_NetQuantize Impulse, byte BoneIndex) { Invoke(nameof(All_Ragdoll), Location, Impulse, BoneIndex); }
        public void AlertNearbyEnemies() { Invoke(nameof(AlertNearbyEnemies)); }
        public void AddImpulseAndRagdoll(HealthComponent Health, float damageAmount, DamageData DamageData, UArray<DamageTag> damageTags) { Invoke(nameof(AddImpulseAndRagdoll), Health, damageAmount, DamageData, damageTags); }
    }
    public class EnemyAnimInstance : AnimInstance
    {
        public EnemyAnimInstance(nint addr) : base(addr) { }
        public Object OnRangedAttackNotify { get { return this[nameof(OnRangedAttackNotify)]; } set { this[nameof(OnRangedAttackNotify)] = value; } }
        public Object OnMeleeAttackNotify { get { return this[nameof(OnMeleeAttackNotify)]; } set { this[nameof(OnMeleeAttackNotify)] = value; } }
        public Object OnStopLeadingNotify { get { return this[nameof(OnStopLeadingNotify)]; } set { this[nameof(OnStopLeadingNotify)] = value; } }
        public Object OnIsAttackingChanged { get { return this[nameof(OnIsAttackingChanged)]; } set { this[nameof(OnIsAttackingChanged)] = value; } }
        public bool IsAttacking { get { return this[nameof(IsAttacking)].Flag; } set { this[nameof(IsAttacking)].Flag = value; } }
        public UArray<EndEffector> EndEffectors { get { return new UArray<EndEffector>(this[nameof(EndEffectors)].Address); } }
        public Vector BodyPoseCorrectionLocation { get { return this[nameof(BodyPoseCorrectionLocation)].As<Vector>(); } set { this["BodyPoseCorrectionLocation"] = value; } }
        public Rotator BodyPoseCorrectionRotation { get { return this[nameof(BodyPoseCorrectionRotation)].As<Rotator>(); } set { this["BodyPoseCorrectionRotation"] = value; } }
        public float IKBlend { get { return this[nameof(IKBlend)].GetValue<float>(); } set { this[nameof(IKBlend)].SetValue<float>(value); } }
        public bool IKEnabled { get { return this[nameof(IKEnabled)].Flag; } set { this[nameof(IKEnabled)].Flag = value; } }
        public bool IsAlive { get { return this[nameof(IsAlive)].Flag; } set { this[nameof(IsAlive)].Flag = value; } }
        public float RandomStartPosition { get { return this[nameof(RandomStartPosition)].GetValue<float>(); } set { this[nameof(RandomStartPosition)].SetValue<float>(value); } }
        public HealthComponentBase HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponentBase>(); } set { this["HealthComponent"] = value; } }
        public IKComponent IKComponent { get { return this[nameof(IKComponent)].As<IKComponent>(); } set { this["IKComponent"] = value; } }
        public PoseCorrectionComponent PoseCorrectionComponent { get { return this[nameof(PoseCorrectionComponent)].As<PoseCorrectionComponent>(); } set { this["PoseCorrectionComponent"] = value; } }
        public bool IsSlotPlayingAnyAnimation(Object SlotNodeName) { return Invoke<bool>(nameof(IsSlotPlayingAnyAnimation), SlotNodeName); }
        public bool IsNotAttacking() { return Invoke<bool>(nameof(IsNotAttacking)); }
        public bool IsDead() { return Invoke<bool>(nameof(IsDead)); }
        public SkeletalMeshComponent GetSkeletalMesh() { return Invoke<SkeletalMeshComponent>(nameof(GetSkeletalMesh)); }
        public EndEffector GetEndEffector1() { return Invoke<EndEffector>(nameof(GetEndEffector1)); }
        public EndEffector GetEndEffector0() { return Invoke<EndEffector>(nameof(GetEndEffector0)); }
    }
    public class SimpleMovingEnemyAnimInstance : EnemyAnimInstance
    {
        public SimpleMovingEnemyAnimInstance(nint addr) : base(addr) { }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float WalkCycleSpeed { get { return this[nameof(WalkCycleSpeed)].GetValue<float>(); } set { this[nameof(WalkCycleSpeed)].SetValue<float>(value); } }
        public float StartMovingSpeed { get { return this[nameof(StartMovingSpeed)].GetValue<float>(); } set { this[nameof(StartMovingSpeed)].SetValue<float>(value); } }
        public float StopMovingSpeed { get { return this[nameof(StopMovingSpeed)].GetValue<float>(); } set { this[nameof(StopMovingSpeed)].SetValue<float>(value); } }
        public float WalkCycleMinRate { get { return this[nameof(WalkCycleMinRate)].GetValue<float>(); } set { this[nameof(WalkCycleMinRate)].SetValue<float>(value); } }
        public float WalkCyclePlayRate { get { return this[nameof(WalkCyclePlayRate)].GetValue<float>(); } set { this[nameof(WalkCyclePlayRate)].SetValue<float>(value); } }
        public float MeshScale { get { return this[nameof(MeshScale)].GetValue<float>(); } set { this[nameof(MeshScale)].SetValue<float>(value); } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public void SetMeshScale(float NewScale) { Invoke(nameof(SetMeshScale), NewScale); }
        public bool IsNotMoving() { return Invoke<bool>(nameof(IsNotMoving)); }
    }
    public class FlyingBugAnimInstance : SimpleMovingEnemyAnimInstance
    {
        public FlyingBugAnimInstance(nint addr) : base(addr) { }
        public bool IsInAttackMode { get { return this[nameof(IsInAttackMode)].Flag; } set { this[nameof(IsInAttackMode)].Flag = value; } }
        public bool IsStaggered { get { return this[nameof(IsStaggered)].Flag; } set { this[nameof(IsStaggered)].Flag = value; } }
        public EFlyingBugDeathAnimationCategory DeathAnimationCategory { get { return (EFlyingBugDeathAnimationCategory)this[nameof(DeathAnimationCategory)].GetValue<int>(); } set { this[nameof(DeathAnimationCategory)].SetValue<int>((int)value); } }
        public void SetDeathAnimation(EFlyingBugDeathAnimationCategory deathAnim) { Invoke(nameof(SetDeathAnimation), deathAnim); }
        public bool IsNotStaggered() { return Invoke<bool>(nameof(IsNotStaggered)); }
        public bool IsNotInAttackMode() { return Invoke<bool>(nameof(IsNotInAttackMode)); }
    }
    public class AIFunctionLibrary : BlueprintFunctionLibrary
    {
        public AIFunctionLibrary(nint addr) : base(addr) { }
        public void SetAICanSense(bool canSense) { Invoke(nameof(SetAICanSense), canSense); }
        public int MakeEnemiesFleeFromArea(Object WorldContextObject, Vector Center, float Radius, int maxEnemiesAffected) { return Invoke<int>(nameof(MakeEnemiesFleeFromArea), WorldContextObject, Center, Radius, maxEnemiesAffected); }
        public void MakeEnemiesBackOutOfArea(Object WorldContextObject, Vector Center, float Radius) { Invoke(nameof(MakeEnemiesBackOutOfArea), WorldContextObject, Center, Radius); }
        public bool IsEnemyAlertet(Pawn enemy) { return Invoke<bool>(nameof(IsEnemyAlertet), enemy); }
        public PlayerCharacter GetPlayerTarget(Actor from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, Actor ignoreTarget, bool IsFlying) { return Invoke<PlayerCharacter>(nameof(GetPlayerTarget), from, MaxDistance, MustBeAlive, MustBeUnparalyzed, accountForAttackers, ignoreTarget, IsFlying); }
        public bool GetAttackableTargetsInRange(Actor from, UArray<AttackerPositioningComponent> outArray, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, Actor ignoreTarget, bool IsFlying) { return Invoke<bool>(nameof(GetAttackableTargetsInRange), from, outArray, MaxDistance, MustBeAlive, MustBeUnparalyzed, accountForAttackers, ignoreTarget, IsFlying); }
        public AttackerPositioningComponent GetAttackableTarget(Actor from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool accountForAttackers, Actor ignoreTarget, bool IsFlying) { return Invoke<AttackerPositioningComponent>(nameof(GetAttackableTarget), from, MaxDistance, MustBeAlive, MustBeUnparalyzed, accountForAttackers, ignoreTarget, IsFlying); }
        public PlayerCharacter ConsiderChangingTarget_WithLineOfSight(PlayerCharacter CurrentTarget, Actor from, float MaxDistance, Object TraceSocketName, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying) { return Invoke<PlayerCharacter>(nameof(ConsiderChangingTarget_WithLineOfSight), CurrentTarget, from, MaxDistance, TraceSocketName, MustBeAlive, MustBeUnparalyzed, CurrentTargetMustBeAlive, IsFlying); }
        public PlayerCharacter ConsiderChangingTarget(PlayerCharacter CurrentTarget, Actor from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool CurrentTargetMustBeAlive, bool IsFlying) { return Invoke<PlayerCharacter>(nameof(ConsiderChangingTarget), CurrentTarget, from, MaxDistance, MustBeAlive, MustBeUnparalyzed, CurrentTargetMustBeAlive, IsFlying); }
        public void AlertEnemy(Pawn enemy) { Invoke(nameof(AlertEnemy), enemy); }
        public void AlertEnemiesInRange(Object WorldContextObject, Vector Origin, float range, Pawn alerter) { Invoke(nameof(AlertEnemiesInRange), WorldContextObject, Origin, range, alerter); }
    }
    public class AIPlayerControlComponent : ActorComponent
    {
        public AIPlayerControlComponent(nint addr) : base(addr) { }
        public Rotator AngularAcceleration { get { return this[nameof(AngularAcceleration)].As<Rotator>(); } set { this["AngularAcceleration"] = value; } }
        public Rotator AngularDampening { get { return this[nameof(AngularDampening)].As<Rotator>(); } set { this["AngularDampening"] = value; } }
        public Rotator MaxAngularVelocity { get { return this[nameof(MaxAngularVelocity)].As<Rotator>(); } set { this["MaxAngularVelocity"] = value; } }
        public Rotator MaxRotation { get { return this[nameof(MaxRotation)].As<Rotator>(); } set { this["MaxRotation"] = value; } }
        public float SpeedTarget { get { return this[nameof(SpeedTarget)].GetValue<float>(); } set { this[nameof(SpeedTarget)].SetValue<float>(value); } }
        public float SpeedMin { get { return this[nameof(SpeedMin)].GetValue<float>(); } set { this[nameof(SpeedMin)].SetValue<float>(value); } }
        public float SpeedMax { get { return this[nameof(SpeedMax)].GetValue<float>(); } set { this[nameof(SpeedMax)].SetValue<float>(value); } }
        public float AccelerationBase { get { return this[nameof(AccelerationBase)].GetValue<float>(); } set { this[nameof(AccelerationBase)].SetValue<float>(value); } }
        public float AccelerationMultiplier { get { return this[nameof(AccelerationMultiplier)].GetValue<float>(); } set { this[nameof(AccelerationMultiplier)].SetValue<float>(value); } }
        public float DecelerationMultiplier { get { return this[nameof(DecelerationMultiplier)].GetValue<float>(); } set { this[nameof(DecelerationMultiplier)].SetValue<float>(value); } }
        public float AccelerationOnSlopeMultiplier { get { return this[nameof(AccelerationOnSlopeMultiplier)].GetValue<float>(); } set { this[nameof(AccelerationOnSlopeMultiplier)].SetValue<float>(value); } }
        public float DecelerationOnSlopeMultiplier { get { return this[nameof(DecelerationOnSlopeMultiplier)].GetValue<float>(); } set { this[nameof(DecelerationOnSlopeMultiplier)].SetValue<float>(value); } }
        public float InitialConnectionBlendTime { get { return this[nameof(InitialConnectionBlendTime)].GetValue<float>(); } set { this[nameof(InitialConnectionBlendTime)].SetValue<float>(value); } }
        public AnimMontage GetOnMontageAI { get { return this[nameof(GetOnMontageAI)].As<AnimMontage>(); } set { this["GetOnMontageAI"] = value; } }
        public AnimMontage GetOnMontagePlayer { get { return this[nameof(GetOnMontagePlayer)].As<AnimMontage>(); } set { this["GetOnMontagePlayer"] = value; } }
        public AnimMontage LetGoMontageAI { get { return this[nameof(LetGoMontageAI)].As<AnimMontage>(); } set { this["LetGoMontageAI"] = value; } }
        public AnimMontage LetGoMontagePlayer { get { return this[nameof(LetGoMontagePlayer)].As<AnimMontage>(); } set { this["LetGoMontagePlayer"] = value; } }
        public DialogDataAsset GetOnShout { get { return this[nameof(GetOnShout)].As<DialogDataAsset>(); } set { this["GetOnShout"] = value; } }
        public DialogDataAsset LetGoShout { get { return this[nameof(LetGoShout)].As<DialogDataAsset>(); } set { this["LetGoShout"] = value; } }
        public ControlEnemyUsable Usable { get { return this[nameof(Usable)].As<ControlEnemyUsable>(); } set { this["Usable"] = value; } }
    }
    public class AlignEnemyComponent : ActorComponent
    {
        public AlignEnemyComponent(nint addr) : base(addr) { }
        public bool RotateWhileStationary { get { return this[nameof(RotateWhileStationary)].Flag; } set { this[nameof(RotateWhileStationary)].Flag = value; } }
        public bool IncludePitch { get { return this[nameof(IncludePitch)].Flag; } set { this[nameof(IncludePitch)].Flag = value; } }
        public void SetRotateWhileStationary(bool Value) { Invoke(nameof(SetRotateWhileStationary), Value); }
        public void OnRep_RotateWhileStationary() { Invoke(nameof(OnRep_RotateWhileStationary)); }
    }
    public class EnemyGroupDescriptor : DataAsset
    {
        public EnemyGroupDescriptor(nint addr) : base(addr) { }
        public UArray<EnemyGroupDescriptorItem> Enemies { get { return new UArray<EnemyGroupDescriptorItem>(this[nameof(Enemies)].Address); } }
        public bool UseCustomDiversity { get { return this[nameof(UseCustomDiversity)].Flag; } set { this[nameof(UseCustomDiversity)].Flag = value; } }
        public RandInterval Diversity { get { return this[nameof(Diversity)].As<RandInterval>(); } set { this["Diversity"] = value; } }
    }
    public class AmberEventEnemyPool : EnemyGroupDescriptor
    {
        public AmberEventEnemyPool(nint addr) : base(addr) { }
        public float MaxTimeBetweenSpawn { get { return this[nameof(MaxTimeBetweenSpawn)].GetValue<float>(); } set { this[nameof(MaxTimeBetweenSpawn)].SetValue<float>(value); } }
        public float MinTimeBetweenSpawn { get { return this[nameof(MinTimeBetweenSpawn)].GetValue<float>(); } set { this[nameof(MinTimeBetweenSpawn)].SetValue<float>(value); } }
        public int MaxEnemyCap { get { return this[nameof(MaxEnemyCap)].GetValue<int>(); } set { this[nameof(MaxEnemyCap)].SetValue<int>(value); } }
        public int AmbersNeededdToComplete { get { return this[nameof(AmbersNeededdToComplete)].GetValue<int>(); } set { this[nameof(AmbersNeededdToComplete)].SetValue<int>(value); } }
        public int AmbersNeededOnePlayer { get { return this[nameof(AmbersNeededOnePlayer)].GetValue<int>(); } set { this[nameof(AmbersNeededOnePlayer)].SetValue<int>(value); } }
    }
    public class GameEvent : Actor
    {
        public GameEvent(nint addr) : base(addr) { }
        public Object EventTriggeredDelegate { get { return this[nameof(EventTriggeredDelegate)]; } set { this[nameof(EventTriggeredDelegate)] = value; } }
        public Object EventFinishedDelegate { get { return this[nameof(EventFinishedDelegate)]; } set { this[nameof(EventFinishedDelegate)] = value; } }
        public Object StageCompleteDelegate { get { return this[nameof(StageCompleteDelegate)]; } set { this[nameof(StageCompleteDelegate)] = value; } }
        public Object ProgressChangedDelegate { get { return this[nameof(ProgressChangedDelegate)]; } set { this[nameof(ProgressChangedDelegate)] = value; } }
        public Object OnProgressBarChanged { get { return this[nameof(OnProgressBarChanged)]; } set { this[nameof(OnProgressBarChanged)] = value; } }
        public Object TimeProgressChanged { get { return this[nameof(TimeProgressChanged)]; } set { this[nameof(TimeProgressChanged)] = value; } }
        public Object ObjectivesPerStageChanged { get { return this[nameof(ObjectivesPerStageChanged)]; } set { this[nameof(ObjectivesPerStageChanged)] = value; } }
        public UArray<EventStarterButton> StarterObjects { get { return new UArray<EventStarterButton>(this[nameof(StarterObjects)].Address); } }
        public bool bGameEventSetup { get { return this[nameof(bGameEventSetup)].Flag; } set { this[nameof(bGameEventSetup)].Flag = value; } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public Object ObjectiveText { get { return this[nameof(ObjectiveText)]; } set { this[nameof(ObjectiveText)] = value; } }
        public Object AnalyticsName { get { return this[nameof(AnalyticsName)]; } set { this[nameof(AnalyticsName)] = value; } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public ChildActorComponent StartEventObject { get { return this[nameof(StartEventObject)].As<ChildActorComponent>(); } set { this["StartEventObject"] = value; } }
        public DialogDataAsset EventTriggeredShout { get { return this[nameof(EventTriggeredShout)].As<DialogDataAsset>(); } set { this["EventTriggeredShout"] = value; } }
        public DialogDataAsset EventFinishedShout { get { return this[nameof(EventFinishedShout)].As<DialogDataAsset>(); } set { this["EventFinishedShout"] = value; } }
        public DialogDataAsset EventFailedShout { get { return this[nameof(EventFailedShout)].As<DialogDataAsset>(); } set { this["EventFailedShout"] = value; } }
        public float EventTriggeredShoutDelay { get { return this[nameof(EventTriggeredShoutDelay)].GetValue<float>(); } set { this[nameof(EventTriggeredShoutDelay)].SetValue<float>(value); } }
        public float EventFinishedShoutDelay { get { return this[nameof(EventFinishedShoutDelay)].GetValue<float>(); } set { this[nameof(EventFinishedShoutDelay)].SetValue<float>(value); } }
        public float StageProgress { get { return this[nameof(StageProgress)].GetValue<float>(); } set { this[nameof(StageProgress)].SetValue<float>(value); } }
        public float TimeLimit { get { return this[nameof(TimeLimit)].GetValue<float>(); } set { this[nameof(TimeLimit)].SetValue<float>(value); } }
        public float DelayUITime { get { return this[nameof(DelayUITime)].GetValue<float>(); } set { this[nameof(DelayUITime)].SetValue<float>(value); } }
        public int objectivesPerStage { get { return this[nameof(objectivesPerStage)].GetValue<int>(); } set { this[nameof(objectivesPerStage)].SetValue<int>(value); } }
        public bool EventStartersActive { get { return this[nameof(EventStartersActive)].Flag; } set { this[nameof(EventStartersActive)].Flag = value; } }
        public bool StopScriptedWavesWhileActive { get { return this[nameof(StopScriptedWavesWhileActive)].Flag; } set { this[nameof(StopScriptedWavesWhileActive)].Flag = value; } }
        public bool StopNormalWavesWhileActive { get { return this[nameof(StopNormalWavesWhileActive)].Flag; } set { this[nameof(StopNormalWavesWhileActive)].Flag = value; } }
        public bool EventStarted { get { return this[nameof(EventStarted)].Flag; } set { this[nameof(EventStarted)].Flag = value; } }
        public bool FailedEvent { get { return this[nameof(FailedEvent)].Flag; } set { this[nameof(FailedEvent)].Flag = value; } }
        public bool ShowRemainingTimeOnHUD { get { return this[nameof(ShowRemainingTimeOnHUD)].Flag; } set { this[nameof(ShowRemainingTimeOnHUD)].Flag = value; } }
        public bool ShowScoreStatusOnHUD { get { return this[nameof(ShowScoreStatusOnHUD)].Flag; } set { this[nameof(ShowScoreStatusOnHUD)].Flag = value; } }
        public bool ShowProgressBar { get { return this[nameof(ShowProgressBar)].Flag; } set { this[nameof(ShowProgressBar)].Flag = value; } }
        public float ProgressBarPct { get { return this[nameof(ProgressBarPct)].GetValue<float>(); } set { this[nameof(ProgressBarPct)].SetValue<float>(value); } }
        public bool SkipEventStarters { get { return this[nameof(SkipEventStarters)].Flag; } set { this[nameof(SkipEventStarters)].Flag = value; } }
        public UArray<Actor> EventParticipants { get { return new UArray<Actor>(this[nameof(EventParticipants)].Address); } }
        public void TrySetupGameEvent() { Invoke(nameof(TrySetupGameEvent)); }
        public void TriggerEvent() { Invoke(nameof(TriggerEvent)); }
        public void StartShout() { Invoke(nameof(StartShout)); }
        public void StageObjectiveCompleted() { Invoke(nameof(StageObjectiveCompleted)); }
        public RessuplyPod SpawnEventPod(Object podClass, Vector aSpawnLocation, int Delay) { return Invoke<RessuplyPod>(nameof(SpawnEventPod), podClass, aSpawnLocation, Delay); }
        public Actor SpawnEventActor(Object eventActorClass, Transform aSpawnLocation) { return Invoke<Actor>(nameof(SpawnEventActor), eventActorClass, aSpawnLocation); }
        public void SetStageProgress(float Progress) { Invoke(nameof(SetStageProgress), Progress); }
        public void SetProgressBarPct(float InPct) { Invoke(nameof(SetProgressBarPct), InPct); }
        public void SetObjectivesPerStage(int objectivesPerStage) { Invoke(nameof(SetObjectivesPerStage), objectivesPerStage); }
        public void RemoveParticipant(Actor participant) { Invoke(nameof(RemoveParticipant), participant); }
        public void OnStarterObjectUsed(EventStarterButton eventStarter) { Invoke(nameof(OnStarterObjectUsed), eventStarter); }
        public void OnStageProgress(float Progress) { Invoke(nameof(OnStageProgress), Progress); }
        public void OnStageComplete(int Stage) { Invoke(nameof(OnStageComplete), Stage); }
        public void OnRep_StageProgress() { Invoke(nameof(OnRep_StageProgress)); }
        public void OnRep_ObjectivesPerStage() { Invoke(nameof(OnRep_ObjectivesPerStage)); }
        public void OnRep_IsEventStartersActive() { Invoke(nameof(OnRep_IsEventStartersActive)); }
        public void OnRep_FailedEvent() { Invoke(nameof(OnRep_FailedEvent)); }
        public void OnRep_EventStarted() { Invoke(nameof(OnRep_EventStarted)); }
        public void OnRep_EventParticipants() { Invoke(nameof(OnRep_EventParticipants)); }
        public void OnEventTriggered() { Invoke(nameof(OnEventTriggered)); }
        public void OnEventFinished(bool eventSuccess) { Invoke(nameof(OnEventFinished), eventSuccess); }
        public void OnEventBooted() { Invoke(nameof(OnEventBooted)); }
        public bool IsEventCompleted() { return Invoke<bool>(nameof(IsEventCompleted)); }
        public bool IsEventActive() { return Invoke<bool>(nameof(IsEventActive)); }
        public float GetStageProgress() { return Invoke<float>(nameof(GetStageProgress)); }
        public bool GetShowTimeOnHUD() { return Invoke<bool>(nameof(GetShowTimeOnHUD)); }
        public bool GetShowScoreOnHUD() { return Invoke<bool>(nameof(GetShowScoreOnHUD)); }
        public bool GetShowProgressBar() { return Invoke<bool>(nameof(GetShowProgressBar)); }
        public Object GetObjectiveText() { return Invoke<Object>(nameof(GetObjectiveText)); }
        public int GetObjectivesPerStage() { return Invoke<int>(nameof(GetObjectivesPerStage)); }
        public Object GetEventName() { return Invoke<Object>(nameof(GetEventName)); }
        public bool GetEventFailed() { return Invoke<bool>(nameof(GetEventFailed)); }
        public float GetDelayUITime() { return Invoke<float>(nameof(GetDelayUITime)); }
        public void EndShout() { Invoke(nameof(EndShout)); }
        public Transform DebreePositionPoint(ProceduralSetup Setup, Vector fromLocation, float MinDistance, float desiredDistance, DebrisPositioning DebrisPositioning, Object terrainPlacement, float maxPathLength) { return Invoke<Transform>(nameof(DebreePositionPoint), Setup, fromLocation, MinDistance, desiredDistance, DebrisPositioning, terrainPlacement, maxPathLength); }
        public void BootUpEvent() { Invoke(nameof(BootUpEvent)); }
        public void AddStageProgress(float progressToAdd) { Invoke(nameof(AddStageProgress), progressToAdd); }
    }
    public class AmberEvent : GameEvent
    {
        public AmberEvent(nint addr) : base(addr) { }
        public DamageComponent EndExplosionDamage { get { return this[nameof(EndExplosionDamage)].As<DamageComponent>(); } set { this["EndExplosionDamage"] = value; } }
        public UArray<AmberEventEnemyPool> EnemyPools { get { return new UArray<AmberEventEnemyPool>(this[nameof(EnemyPools)].Address); } }
        public UArray<FSDPawn> spawnedEnemies { get { return new UArray<FSDPawn>(this[nameof(spawnedEnemies)].Address); } }
        public Object CurrentPool { get { return this[nameof(CurrentPool)]; } set { this[nameof(CurrentPool)] = value; } }
        public float InitialDelayBeforeSpawn { get { return this[nameof(InitialDelayBeforeSpawn)].GetValue<float>(); } set { this[nameof(InitialDelayBeforeSpawn)].SetValue<float>(value); } }
        public float MaxSpawnRange { get { return this[nameof(MaxSpawnRange)].GetValue<float>(); } set { this[nameof(MaxSpawnRange)].SetValue<float>(value); } }
        public void OnSpawnedDeath(HealthComponentBase spawnedHealthComponent) { Invoke(nameof(OnSpawnedDeath), spawnedHealthComponent); }
        public void OnEnemySpawned(Pawn Pawn) { Invoke(nameof(OnEnemySpawned), Pawn); }
    }
    public class AmmoCountWidget : UserWidget
    {
        public AmmoCountWidget(nint addr) : base(addr) { }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public Item Item { get { return this[nameof(Item)].As<Item>(); } set { this["Item"] = value; } }
        public ItemAggregator Aggregator { get { return this[nameof(Aggregator)].As<ItemAggregator>(); } set { this["Aggregator"] = value; } }
        public bool ShowClipAndTotalAsOne { get { return this[nameof(ShowClipAndTotalAsOne)].Flag; } set { this[nameof(ShowClipAndTotalAsOne)].Flag = value; } }
        public int CountThreshold { get { return this[nameof(CountThreshold)].GetValue<int>(); } set { this[nameof(CountThreshold)].SetValue<int>(value); } }
        public void OnVisibleChanged(bool Visible, bool showClipCount) { Invoke(nameof(OnVisibleChanged), Visible, showClipCount); }
        public void OnTotalVisibleChanged(bool Visible) { Invoke(nameof(OnTotalVisibleChanged), Visible); }
        public void OnTotalChanged(int Total) { Invoke(nameof(OnTotalChanged), Total); }
        public void OnItemTotalChanged(int Value) { Invoke(nameof(OnItemTotalChanged), Value); }
        public void OnItemEquipped(Item NewItem) { Invoke(nameof(OnItemEquipped), NewItem); }
        public void OnItemAmountChanged(int Value) { Invoke(nameof(OnItemAmountChanged), Value); }
        public void OnAmountChanged(int Count) { Invoke(nameof(OnAmountChanged), Count); }
        public void DoItemEquipped() { Invoke(nameof(DoItemEquipped)); }
    }
    public class CustomAmmoCountWidget : UserWidget
    {
        public CustomAmmoCountWidget(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public void ReceiveItemSet() { Invoke(nameof(ReceiveItemSet)); }
    }
    public class Item : Actor
    {
        public Item(nint addr) : base(addr) { }
        public Object OnItemAddedToInventory { get { return this[nameof(OnItemAddedToInventory)]; } set { this[nameof(OnItemAddedToInventory)] = value; } }
        public Vector FPCameraOffset { get { return this[nameof(FPCameraOffset)].As<Vector>(); } set { this["FPCameraOffset"] = value; } }
        public AudioWithCooldown AudioFriendlyFire { get { return this[nameof(AudioFriendlyFire)].As<AudioWithCooldown>(); } set { this["AudioFriendlyFire"] = value; } }
        public Object OnEqipped { get { return this[nameof(OnEqipped)]; } set { this[nameof(OnEqipped)] = value; } }
        public Object OnUnEquipped { get { return this[nameof(OnUnEquipped)]; } set { this[nameof(OnUnEquipped)] = value; } }
        public bool EnableDangerousSaveGameIDEditing { get { return this[nameof(EnableDangerousSaveGameIDEditing)].Flag; } set { this[nameof(EnableDangerousSaveGameIDEditing)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public UpgradableItemComponent UpgradableItem { get { return this[nameof(UpgradableItem)].As<UpgradableItemComponent>(); } set { this["UpgradableItem"] = value; } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
        public bool CameraShakeOnStartUsing { get { return this[nameof(CameraShakeOnStartUsing)].Flag; } set { this[nameof(CameraShakeOnStartUsing)].Flag = value; } }
        public bool CameraShakeOnEquip { get { return this[nameof(CameraShakeOnEquip)].Flag; } set { this[nameof(CameraShakeOnEquip)].Flag = value; } }
        public CurveFloat HeatCurve { get { return this[nameof(HeatCurve)].As<CurveFloat>(); } set { this["HeatCurve"] = value; } }
        public float ManualHeatPerUse { get { return this[nameof(ManualHeatPerUse)].GetValue<float>(); } set { this[nameof(ManualHeatPerUse)].SetValue<float>(value); } }
        public float HeatOnStartUse { get { return this[nameof(HeatOnStartUse)].GetValue<float>(); } set { this[nameof(HeatOnStartUse)].SetValue<float>(value); } }
        public float CooldownRate { get { return this[nameof(CooldownRate)].GetValue<float>(); } set { this[nameof(CooldownRate)].SetValue<float>(value); } }
        public float ManualCooldownDelay { get { return this[nameof(ManualCooldownDelay)].GetValue<float>(); } set { this[nameof(ManualCooldownDelay)].SetValue<float>(value); } }
        public float UnjamDuration { get { return this[nameof(UnjamDuration)].GetValue<float>(); } set { this[nameof(UnjamDuration)].SetValue<float>(value); } }
        public float CurrentTemperature { get { return this[nameof(CurrentTemperature)].GetValue<float>(); } set { this[nameof(CurrentTemperature)].SetValue<float>(value); } }
        public SoundBase AudioTemperature { get { return this[nameof(AudioTemperature)].As<SoundBase>(); } set { this["AudioTemperature"] = value; } }
        public float AudioTemperatureFadeout { get { return this[nameof(AudioTemperatureFadeout)].GetValue<float>(); } set { this[nameof(AudioTemperatureFadeout)].SetValue<float>(value); } }
        public Object TemperatureFloatParam { get { return this[nameof(TemperatureFloatParam)]; } set { this[nameof(TemperatureFloatParam)] = value; } }
        public AudioComponent TemperatureAudioComponent { get { return this[nameof(TemperatureAudioComponent)].As<AudioComponent>(); } set { this["TemperatureAudioComponent"] = value; } }
        public bool overheated { get { return this[nameof(overheated)].Flag; } set { this[nameof(overheated)].Flag = value; } }
        public DialogDataAsset ShoutOverheated { get { return this[nameof(ShoutOverheated)].As<DialogDataAsset>(); } set { this["ShoutOverheated"] = value; } }
        public bool bAimAssistEnabled { get { return this[nameof(bAimAssistEnabled)].Flag; } set { this[nameof(bAimAssistEnabled)].Flag = value; } }
        public float MovementRateWhileUsing { get { return this[nameof(MovementRateWhileUsing)].GetValue<float>(); } set { this[nameof(MovementRateWhileUsing)].SetValue<float>(value); } }
        public bool CanPlayLedgeClimbWhileUsing { get { return this[nameof(CanPlayLedgeClimbWhileUsing)].Flag; } set { this[nameof(CanPlayLedgeClimbWhileUsing)].Flag = value; } }
        public bool CanInspectItem { get { return this[nameof(CanInspectItem)].Flag; } set { this[nameof(CanInspectItem)].Flag = value; } }
        public bool CanSprintWithItem { get { return this[nameof(CanSprintWithItem)].Flag; } set { this[nameof(CanSprintWithItem)].Flag = value; } }
        public bool CanBeUsed { get { return this[nameof(CanBeUsed)].Flag; } set { this[nameof(CanBeUsed)].Flag = value; } }
        public Object CustomIconWidget { get { return this[nameof(CustomIconWidget)]; } set { this[nameof(CustomIconWidget)] = value; } }
        public float AdvancedVibrationSendLevel { get { return this[nameof(AdvancedVibrationSendLevel)].GetValue<float>(); } set { this[nameof(AdvancedVibrationSendLevel)].SetValue<float>(value); } }
        public bool IsEquipped { get { return this[nameof(IsEquipped)].Flag; } set { this[nameof(IsEquipped)].Flag = value; } }
        public bool isUsing { get { return this[nameof(isUsing)].Flag; } set { this[nameof(isUsing)].Flag = value; } }
        public void UpdateSkin() { Invoke(nameof(UpdateSkin)); }
        public void StopUsing(bool Cancelled) { Invoke(nameof(StopUsing), Cancelled); }
        public AudioComponent SpawnSoundAttached(SoundBase Sound, SceneComponent AttachToComponent, float PriorityOverride, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, bool bAutoDestroy, bool SendVibration) { return Invoke<AudioComponent>(nameof(SpawnSoundAttached), Sound, AttachToComponent, PriorityOverride, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy, SendVibration); }
        public AudioComponent SpawnSoundAtLocation(SoundBase Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, bool bAutoDestroy, bool SendVibration) { return Invoke<AudioComponent>(nameof(SpawnSoundAtLocation), Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy, SendVibration); }
        public AudioComponent SpawnSound2D(SoundBase Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration) { return Invoke<AudioComponent>(nameof(SpawnSound2D), Sound, PriorityOverride, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy, SendVibration); }
        public void Server_StartUsing(bool isUsing) { Invoke(nameof(Server_StartUsing), isUsing); }
        public void Resupply(float percentage) { Invoke(nameof(Resupply), percentage); }
        public void RemovedFromInventory(Character oldCharacter) { Invoke(nameof(RemovedFromInventory), oldCharacter); }
        public void RecieveUnequipped() { Invoke(nameof(RecieveUnequipped)); }
        public void RecieveStopUsing() { Invoke(nameof(RecieveStopUsing)); }
        public void RecieveStartUsing() { Invoke(nameof(RecieveStartUsing)); }
        public void RecieveEquipped() { Invoke(nameof(RecieveEquipped)); }
        public void RecieveCycledItem() { Invoke(nameof(RecieveCycledItem)); }
        public void Recieve_UpdateMeshses(bool IsFirstPerson) { Invoke(nameof(Recieve_UpdateMeshses), IsFirstPerson); }
        public void ReceiveResupply(float percentage) { Invoke(nameof(ReceiveResupply), percentage); }
        public void Receive_Overheated() { Invoke(nameof(Receive_Overheated)); }
        public StaticMeshComponent Receive_GetTPAnimationEventMesh() { return Invoke<StaticMeshComponent>(nameof(Receive_GetTPAnimationEventMesh)); }
        public FirstPersonStaticMeshComponent Receive_GetFPAnimationEventMesh() { return Invoke<FirstPersonStaticMeshComponent>(nameof(Receive_GetFPAnimationEventMesh)); }
        public void OnTemperatureChanged(float temperature, bool overheated) { Invoke(nameof(OnTemperatureChanged), temperature, overheated); }
        public void OnSkinChanged(SkinEffect Skin) { Invoke(nameof(OnSkinChanged), Skin); }
        public void OnRep_IsUsing(bool OldValue) { Invoke(nameof(OnRep_IsUsing), OldValue); }
        public void OnOwnerDestroyed(Actor owningActor) { Invoke(nameof(OnOwnerDestroyed), owningActor); }
        public void ItemAddedToInventory__DelegateSignature() { Invoke(nameof(ItemAddedToInventory__DelegateSignature)); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool IsFirstPerson() { return Invoke<bool>(nameof(IsFirstPerson)); }
        public Object GetWeaponViewClass() { return Invoke<Object>(nameof(GetWeaponViewClass)); }
        public ItemLoadoutAnimations GetLoadoutAnimations() { return Invoke<ItemLoadoutAnimations>(nameof(GetLoadoutAnimations)); }
        public Object GetItemName() { return Invoke<Object>(nameof(GetItemName)); }
        public Texture2D GetItemIconLine() { return Invoke<Texture2D>(nameof(GetItemIconLine)); }
        public Texture2D GetItemIconBG() { return Invoke<Texture2D>(nameof(GetItemIconBG)); }
        public Item GetItemDefaultObject(Object itemClass) { return Invoke<Item>(nameof(GetItemDefaultObject), itemClass); }
        public Object GetItemCategory() { return Invoke<Object>(nameof(GetItemCategory)); }
        public SceneComponent GetHeatingAudioSceneComponent() { return Invoke<SceneComponent>(nameof(GetHeatingAudioSceneComponent)); }
        public ItemCharacterAnimationSet GetCharacterAnimationSet() { return Invoke<ItemCharacterAnimationSet>(nameof(GetCharacterAnimationSet)); }
        public Object GetAnalyticsItemName() { return Invoke<Object>(nameof(GetAnalyticsItemName)); }
        public Object GetAnalyticsItemCategory() { return Invoke<Object>(nameof(GetAnalyticsItemCategory)); }
        public void AddedToInventory(PlayerCharacter ItemOwner) { Invoke(nameof(AddedToInventory), ItemOwner); }
    }
    public class AnimatedItem : Item
    {
        public AnimatedItem(nint addr) : base(addr) { }
        public SkinnableComponent Skinnable { get { return this[nameof(Skinnable)].As<SkinnableComponent>(); } set { this["Skinnable"] = value; } }
        public PlayerAnimInstance FPAnimInstance { get { return this[nameof(FPAnimInstance)].As<PlayerAnimInstance>(); } set { this["FPAnimInstance"] = value; } }
        public PlayerAnimInstance TPAnimInstance { get { return this[nameof(TPAnimInstance)].As<PlayerAnimInstance>(); } set { this["TPAnimInstance"] = value; } }
        public SkeletalMeshComponent FPMesh { get { return this[nameof(FPMesh)].As<SkeletalMeshComponent>(); } set { this["FPMesh"] = value; } }
        public SkeletalMeshComponent TPMesh { get { return this[nameof(TPMesh)].As<SkeletalMeshComponent>(); } set { this["TPMesh"] = value; } }
        public AnimMontage FP_EquipAnimation { get { return this[nameof(FP_EquipAnimation)].As<AnimMontage>(); } set { this["FP_EquipAnimation"] = value; } }
        public AnimMontage FP_IdleAnimation { get { return this[nameof(FP_IdleAnimation)].As<AnimMontage>(); } set { this["FP_IdleAnimation"] = value; } }
        public AnimMontage TP_EquipAnimation { get { return this[nameof(TP_EquipAnimation)].As<AnimMontage>(); } set { this["TP_EquipAnimation"] = value; } }
        public AnimMontage TP_IdleAnimation { get { return this[nameof(TP_IdleAnimation)].As<AnimMontage>(); } set { this["TP_IdleAnimation"] = value; } }
        public float EquipDuration { get { return this[nameof(EquipDuration)].GetValue<float>(); } set { this[nameof(EquipDuration)].SetValue<float>(value); } }
        public ItemCharacterAnimationSet CharacterAnimationSet { get { return this[nameof(CharacterAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["CharacterAnimationSet"] = value; } }
        public void OnReceiveEquippedFinished() { Invoke(nameof(OnReceiveEquippedFinished)); }
        public Transform GetMuzzle() { return Invoke<Transform>(nameof(GetMuzzle)); }
        public SkeletalMeshComponent GetItemMesh() { return Invoke<SkeletalMeshComponent>(nameof(GetItemMesh)); }
    }
    public class AmmoDrivenWeapon : AnimatedItem
    {
        public AmmoDrivenWeapon(nint addr) : base(addr) { }
        public Object OnClipCountChanged { get { return this[nameof(OnClipCountChanged)]; } set { this[nameof(OnClipCountChanged)] = value; } }
        public Object OnTryReloadEvent { get { return this[nameof(OnTryReloadEvent)]; } set { this[nameof(OnTryReloadEvent)] = value; } }
        public Object OnReloadingEvent { get { return this[nameof(OnReloadingEvent)]; } set { this[nameof(OnReloadingEvent)] = value; } }
        public Object OnShotFiredEvent { get { return this[nameof(OnShotFiredEvent)]; } set { this[nameof(OnShotFiredEvent)] = value; } }
        public Object OnStoppedUsingEvent { get { return this[nameof(OnStoppedUsingEvent)]; } set { this[nameof(OnStoppedUsingEvent)] = value; } }
        public WeaponFireComponent WeaponFire { get { return this[nameof(WeaponFire)].As<WeaponFireComponent>(); } set { this["WeaponFire"] = value; } }
        public AmmoDriveWeaponAggregator Aggregator { get { return this[nameof(Aggregator)].As<AmmoDriveWeaponAggregator>(); } set { this["Aggregator"] = value; } }
        public bool LoopFireAnimation { get { return this[nameof(LoopFireAnimation)].Flag; } set { this[nameof(LoopFireAnimation)].Flag = value; } }
        public float LoopFireAnimationBlendoutTime { get { return this[nameof(LoopFireAnimationBlendoutTime)].GetValue<float>(); } set { this[nameof(LoopFireAnimationBlendoutTime)].SetValue<float>(value); } }
        public AnimMontage FP_FireAnimation { get { return this[nameof(FP_FireAnimation)].As<AnimMontage>(); } set { this["FP_FireAnimation"] = value; } }
        public AnimMontage TP_FireAnimation { get { return this[nameof(TP_FireAnimation)].As<AnimMontage>(); } set { this["TP_FireAnimation"] = value; } }
        public AnimMontage FP_ReloadAnimation { get { return this[nameof(FP_ReloadAnimation)].As<AnimMontage>(); } set { this["FP_ReloadAnimation"] = value; } }
        public ItemAnimationItem OverheatAnimation { get { return this[nameof(OverheatAnimation)].As<ItemAnimationItem>(); } set { this["OverheatAnimation"] = value; } }
        public UArray<ItemAnimationItem> GunslingAnimations { get { return new UArray<ItemAnimationItem>(this[nameof(GunslingAnimations)].Address); } }
        public AnimMontage TP_ReloadAnimation { get { return this[nameof(TP_ReloadAnimation)].As<AnimMontage>(); } set { this["TP_ReloadAnimation"] = value; } }
        public AnimMontage WPN_Fire { get { return this[nameof(WPN_Fire)].As<AnimMontage>(); } set { this["WPN_Fire"] = value; } }
        public AnimMontage WPN_FireLastBullet { get { return this[nameof(WPN_FireLastBullet)].As<AnimMontage>(); } set { this["WPN_FireLastBullet"] = value; } }
        public AnimMontage WPN_Reload { get { return this[nameof(WPN_Reload)].As<AnimMontage>(); } set { this["WPN_Reload"] = value; } }
        public AnimMontage WPN_Reload_TP { get { return this[nameof(WPN_Reload_TP)].As<AnimMontage>(); } set { this["WPN_Reload_TP"] = value; } }
        public FXSystemAsset MuzzleParticles { get { return this[nameof(MuzzleParticles)].As<FXSystemAsset>(); } set { this["MuzzleParticles"] = value; } }
        public FXSystemAsset TPMuzzleParticles { get { return this[nameof(TPMuzzleParticles)].As<FXSystemAsset>(); } set { this["TPMuzzleParticles"] = value; } }
        public bool UseTriggeredMuzzleParticles { get { return this[nameof(UseTriggeredMuzzleParticles)].Flag; } set { this[nameof(UseTriggeredMuzzleParticles)].Flag = value; } }
        public TracerData Tracer { get { return this[nameof(Tracer)].As<TracerData>(); } set { this["Tracer"] = value; } }
        public FXSystemAsset CasingParticles { get { return this[nameof(CasingParticles)].As<FXSystemAsset>(); } set { this["CasingParticles"] = value; } }
        public bool UseTriggeredCasingParticleSystem { get { return this[nameof(UseTriggeredCasingParticleSystem)].Flag; } set { this[nameof(UseTriggeredCasingParticleSystem)].Flag = value; } }
        public LightComponent MuzzleFlashLight { get { return this[nameof(MuzzleFlashLight)].As<LightComponent>(); } set { this["MuzzleFlashLight"] = value; } }
        public RuntimeFloatCurve MuzzleFlashLightCurve { get { return this[nameof(MuzzleFlashLightCurve)].As<RuntimeFloatCurve>(); } set { this["MuzzleFlashLightCurve"] = value; } }
        public SoundCue FireSound { get { return this[nameof(FireSound)].As<SoundCue>(); } set { this["FireSound"] = value; } }
        public SoundCue RicochetSound { get { return this[nameof(RicochetSound)].As<SoundCue>(); } set { this["RicochetSound"] = value; } }
        public FXSystemAsset RicochetParticle { get { return this[nameof(RicochetParticle)].As<FXSystemAsset>(); } set { this["RicochetParticle"] = value; } }
        public float FireSoundDelayToTail { get { return this[nameof(FireSoundDelayToTail)].GetValue<float>(); } set { this[nameof(FireSoundDelayToTail)].SetValue<float>(value); } }
        public SoundCue FireSoundTail { get { return this[nameof(FireSoundTail)].As<SoundCue>(); } set { this["FireSoundTail"] = value; } }
        public bool IsFireSoundTail2D { get { return this[nameof(IsFireSoundTail2D)].Flag; } set { this[nameof(IsFireSoundTail2D)].Flag = value; } }
        public ForceFeedbackEffect FireForceFeedbackEffect { get { return this[nameof(FireForceFeedbackEffect)].As<ForceFeedbackEffect>(); } set { this["FireForceFeedbackEffect"] = value; } }
        public Object FireSoundInstance { get { return this[nameof(FireSoundInstance)]; } set { this[nameof(FireSoundInstance)] = value; } }
        public float FireSoundFadeDuration { get { return this[nameof(FireSoundFadeDuration)].GetValue<float>(); } set { this[nameof(FireSoundFadeDuration)].SetValue<float>(value); } }
        public SoundCue ReloadSound { get { return this[nameof(ReloadSound)].As<SoundCue>(); } set { this["ReloadSound"] = value; } }
        public int BulletsRemainingForNearEmptySound { get { return this[nameof(BulletsRemainingForNearEmptySound)].GetValue<int>(); } set { this[nameof(BulletsRemainingForNearEmptySound)].SetValue<int>(value); } }
        public bool PlayEmptySoundsIn3D { get { return this[nameof(PlayEmptySoundsIn3D)].Flag; } set { this[nameof(PlayEmptySoundsIn3D)].Flag = value; } }
        public SoundCue NearEmptySound { get { return this[nameof(NearEmptySound)].As<SoundCue>(); } set { this["NearEmptySound"] = value; } }
        public SoundCue WeaponEmptySound { get { return this[nameof(WeaponEmptySound)].As<SoundCue>(); } set { this["WeaponEmptySound"] = value; } }
        public DialogDataAsset ShoutShotFired { get { return this[nameof(ShoutShotFired)].As<DialogDataAsset>(); } set { this["ShoutShotFired"] = value; } }
        public DialogDataAsset ShoutOutOfAmmo { get { return this[nameof(ShoutOutOfAmmo)].As<DialogDataAsset>(); } set { this["ShoutOutOfAmmo"] = value; } }
        public DialogDataAsset ShoutReloading { get { return this[nameof(ShoutReloading)].As<DialogDataAsset>(); } set { this["ShoutReloading"] = value; } }
        public int MaxAmmo { get { return this[nameof(MaxAmmo)].GetValue<int>(); } set { this[nameof(MaxAmmo)].SetValue<int>(value); } }
        public int ClipSize { get { return this[nameof(ClipSize)].GetValue<int>(); } set { this[nameof(ClipSize)].SetValue<int>(value); } }
        public int ShotCost { get { return this[nameof(ShotCost)].GetValue<int>(); } set { this[nameof(ShotCost)].SetValue<int>(value); } }
        public float RateOfFire { get { return this[nameof(RateOfFire)].GetValue<float>(); } set { this[nameof(RateOfFire)].SetValue<float>(value); } }
        public int BurstCount { get { return this[nameof(BurstCount)].GetValue<int>(); } set { this[nameof(BurstCount)].SetValue<int>(value); } }
        public float BurstCycleTime { get { return this[nameof(BurstCycleTime)].GetValue<float>(); } set { this[nameof(BurstCycleTime)].SetValue<float>(value); } }
        public float ReloadDuration { get { return this[nameof(ReloadDuration)].GetValue<float>(); } set { this[nameof(ReloadDuration)].SetValue<float>(value); } }
        public int AmmoCount { get { return this[nameof(AmmoCount)].GetValue<int>(); } set { this[nameof(AmmoCount)].SetValue<int>(value); } }
        public int ClipCount { get { return this[nameof(ClipCount)].GetValue<int>(); } set { this[nameof(ClipCount)].SetValue<int>(value); } }
        public int ManualHeatReductionAmmo { get { return this[nameof(ManualHeatReductionAmmo)].GetValue<int>(); } set { this[nameof(ManualHeatReductionAmmo)].SetValue<int>(value); } }
        public Object OnManualHeatReductionAmmoChanged { get { return this[nameof(OnManualHeatReductionAmmoChanged)]; } set { this[nameof(OnManualHeatReductionAmmoChanged)] = value; } }
        public Object OnManualHeatReductionTriggered { get { return this[nameof(OnManualHeatReductionTriggered)]; } set { this[nameof(OnManualHeatReductionTriggered)] = value; } }
        public float FireInputBufferTime { get { return this[nameof(FireInputBufferTime)].GetValue<float>(); } set { this[nameof(FireInputBufferTime)].SetValue<float>(value); } }
        public float AutoReloadDuration { get { return this[nameof(AutoReloadDuration)].GetValue<float>(); } set { this[nameof(AutoReloadDuration)].SetValue<float>(value); } }
        public SoundCue AutoReloadCompleteCue { get { return this[nameof(AutoReloadCompleteCue)].As<SoundCue>(); } set { this["AutoReloadCompleteCue"] = value; } }
        public Object OnItemAutoReloaded { get { return this[nameof(OnItemAutoReloaded)]; } set { this[nameof(OnItemAutoReloaded)] = value; } }
        public float SupplyStatusWeight { get { return this[nameof(SupplyStatusWeight)].GetValue<float>(); } set { this[nameof(SupplyStatusWeight)].SetValue<float>(value); } }
        public float CycleTimeLeft { get { return this[nameof(CycleTimeLeft)].GetValue<float>(); } set { this[nameof(CycleTimeLeft)].SetValue<float>(value); } }
        public bool UseCustomReloadDelay { get { return this[nameof(UseCustomReloadDelay)].Flag; } set { this[nameof(UseCustomReloadDelay)].Flag = value; } }
        public float CustomReloadDelay { get { return this[nameof(CustomReloadDelay)].GetValue<float>(); } set { this[nameof(CustomReloadDelay)].SetValue<float>(value); } }
        public float ReloadTimeLeft { get { return this[nameof(ReloadTimeLeft)].GetValue<float>(); } set { this[nameof(ReloadTimeLeft)].SetValue<float>(value); } }
        public bool AutomaticReload { get { return this[nameof(AutomaticReload)].Flag; } set { this[nameof(AutomaticReload)].Flag = value; } }
        public bool CanReload { get { return this[nameof(CanReload)].Flag; } set { this[nameof(CanReload)].Flag = value; } }
        public float HoldToFirePercentOfFireRatePenalty { get { return this[nameof(HoldToFirePercentOfFireRatePenalty)].GetValue<float>(); } set { this[nameof(HoldToFirePercentOfFireRatePenalty)].SetValue<float>(value); } }
        public RecoilSettings RecoilSettings { get { return this[nameof(RecoilSettings)].As<RecoilSettings>(); } set { this["RecoilSettings"] = value; } }
        public bool ApplyRecoilAtEndOfBurst { get { return this[nameof(ApplyRecoilAtEndOfBurst)].Flag; } set { this[nameof(ApplyRecoilAtEndOfBurst)].Flag = value; } }
        public float EndOfBurstRecoilMultiplier { get { return this[nameof(EndOfBurstRecoilMultiplier)].GetValue<float>(); } set { this[nameof(EndOfBurstRecoilMultiplier)].SetValue<float>(value); } }
        public bool HasAutomaticFire { get { return this[nameof(HasAutomaticFire)].Flag; } set { this[nameof(HasAutomaticFire)].Flag = value; } }
        public bool IsFiring { get { return this[nameof(IsFiring)].Flag; } set { this[nameof(IsFiring)].Flag = value; } }
        public bool EjectCasingOnFire { get { return this[nameof(EjectCasingOnFire)].Flag; } set { this[nameof(EjectCasingOnFire)].Flag = value; } }
        public bool ManualHeatReductionOnReload { get { return this[nameof(ManualHeatReductionOnReload)].Flag; } set { this[nameof(ManualHeatReductionOnReload)].Flag = value; } }
        public int MaxManualHeatReductionCharges { get { return this[nameof(MaxManualHeatReductionCharges)].GetValue<int>(); } set { this[nameof(MaxManualHeatReductionCharges)].SetValue<int>(value); } }
        public float ManualHeatReductionValue { get { return this[nameof(ManualHeatReductionValue)].GetValue<float>(); } set { this[nameof(ManualHeatReductionValue)].SetValue<float>(value); } }
        public EAmmoWeaponState WeaponState { get { return (EAmmoWeaponState)this[nameof(WeaponState)].GetValue<int>(); } set { this[nameof(WeaponState)].SetValue<int>((int)value); } }
        public void Upgraded_Blueprint_Implementation(UArray<ItemUpgrade> Upgrades) { Invoke(nameof(Upgraded_Blueprint_Implementation), Upgrades); }
        public void UpdateHoldToFire() { Invoke(nameof(UpdateHoldToFire)); }
        public void Server_StopReload(float BlendOutTime) { Invoke(nameof(Server_StopReload), BlendOutTime); }
        public void Server_ReloadWeapon(float CurrentReloadDuration) { Invoke(nameof(Server_ReloadWeapon), CurrentReloadDuration); }
        public void Server_PlayBurstFire(byte shotCount) { Invoke(nameof(Server_PlayBurstFire), shotCount); }
        public void Server_Gunsling(byte Index) { Invoke(nameof(Server_Gunsling), Index); }
        public void ResupplyAmmo(int amount) { Invoke(nameof(ResupplyAmmo), amount); }
        public void RecieveFiredWeapon() { Invoke(nameof(RecieveFiredWeapon)); }
        public void Receive_ReloadEnd() { Invoke(nameof(Receive_ReloadEnd)); }
        public void Receive_ReloadBegin() { Invoke(nameof(Receive_ReloadBegin)); }
        public void Receive_IsFiringChanged(bool NewValue) { Invoke(nameof(Receive_IsFiringChanged), NewValue); }
        public void OnWeaponFireEnded() { Invoke(nameof(OnWeaponFireEnded)); }
        public void OnWeaponFired(Vector Location) { Invoke(nameof(OnWeaponFired), Location); }
        public void OnRicochet(Vector Origin, Vector Location, Vector Normal) { Invoke(nameof(OnRicochet), Origin, Location, Normal); }
        public void OnRep_ManualHeatReductionAmmo() { Invoke(nameof(OnRep_ManualHeatReductionAmmo)); }
        public void OnRep_IsFiring() { Invoke(nameof(OnRep_IsFiring)); }
        public void ManualHeatReductionTriggeredDelegate__DelegateSignature() { Invoke(nameof(ManualHeatReductionTriggeredDelegate__DelegateSignature)); }
        public void ManualHeatReductionDelegate__DelegateSignature() { Invoke(nameof(ManualHeatReductionDelegate__DelegateSignature)); }
        public bool IsClipFull() { return Invoke<bool>(nameof(IsClipFull)); }
        public void InstantlyReload() { Invoke(nameof(InstantlyReload)); }
        public void EjectCasing() { Invoke(nameof(EjectCasing)); }
        public void CustomEvent1(ItemUpgrade Event) { Invoke(nameof(CustomEvent1), Event); }
        public void Client_RefillAmmo(float percentage) { Invoke(nameof(Client_RefillAmmo), percentage); }
        public void All_StopReload(float BlendOutTime) { Invoke(nameof(All_StopReload), BlendOutTime); }
        public void All_StartReload(float CurrentReloadDuration) { Invoke(nameof(All_StartReload), CurrentReloadDuration); }
        public void All_PlayBurstFire(byte shotCount) { Invoke(nameof(All_PlayBurstFire), shotCount); }
        public void All_Gunsling(byte Index) { Invoke(nameof(All_Gunsling), Index); }
    }
    public class ItemAggregator : ActorComponent
    {
        public ItemAggregator(nint addr) : base(addr) { }
        public Object CounterText { get { return this[nameof(CounterText)]; } set { this[nameof(CounterText)] = value; } }
        public void UnbindAllEvents() { Invoke(nameof(UnbindAllEvents)); }
    }
    public class ClipBasedItemAggregator : ItemAggregator
    {
        public ClipBasedItemAggregator(nint addr) : base(addr) { }
        public Object OnClipAmountChanged { get { return this[nameof(OnClipAmountChanged)]; } set { this[nameof(OnClipAmountChanged)] = value; } }
        public Object OnTotalAmountChanged { get { return this[nameof(OnTotalAmountChanged)]; } set { this[nameof(OnTotalAmountChanged)] = value; } }
        public Object OnClipAndTotalChanged { get { return this[nameof(OnClipAndTotalChanged)]; } set { this[nameof(OnClipAndTotalChanged)] = value; } }
        public Object OnReloadTimeChanged { get { return this[nameof(OnReloadTimeChanged)]; } set { this[nameof(OnReloadTimeChanged)] = value; } }
        public Object OnReloadComplete { get { return this[nameof(OnReloadComplete)]; } set { this[nameof(OnReloadComplete)] = value; } }
        public Object OnReloadStarted { get { return this[nameof(OnReloadStarted)]; } set { this[nameof(OnReloadStarted)] = value; } }
        public Object OnMaxAmmoCapacityChanged { get { return this[nameof(OnMaxAmmoCapacityChanged)]; } set { this[nameof(OnMaxAmmoCapacityChanged)] = value; } }
        public bool ShowTotalAmount { get { return this[nameof(ShowTotalAmount)].Flag; } set { this[nameof(ShowTotalAmount)].Flag = value; } }
        public bool ShowClipAndTotalAsOne { get { return this[nameof(ShowClipAndTotalAsOne)].Flag; } set { this[nameof(ShowClipAndTotalAsOne)].Flag = value; } }
        public void ReloadStarted() { Invoke(nameof(ReloadStarted)); }
        public void ReloadComplete() { Invoke(nameof(ReloadComplete)); }
        public int GetTotalAmount() { return Invoke<int>(nameof(GetTotalAmount)); }
        public int GetClipAmount() { return Invoke<int>(nameof(GetClipAmount)); }
    }
    public class AmmoDriveWeaponAggregator : ClipBasedItemAggregator
    {
        public AmmoDriveWeaponAggregator(nint addr) : base(addr) { }
        public AmmoDrivenWeapon Weapon { get { return this[nameof(Weapon)].As<AmmoDrivenWeapon>(); } set { this["Weapon"] = value; } }
    }
    public class AmmoDrivenWeaponAnimInstance : AnimInstance
    {
        public AmmoDrivenWeaponAnimInstance(nint addr) : base(addr) { }
        public AmmoDrivenWeapon Weapon { get { return this[nameof(Weapon)].As<AmmoDrivenWeapon>(); } set { this["Weapon"] = value; } }
        public bool IsFiring { get { return this[nameof(IsFiring)].Flag; } set { this[nameof(IsFiring)].Flag = value; } }
        public float ClipFullPercentage { get { return this[nameof(ClipFullPercentage)].GetValue<float>(); } set { this[nameof(ClipFullPercentage)].SetValue<float>(value); } }
        public bool overheated { get { return this[nameof(overheated)].Flag; } set { this[nameof(overheated)].Flag = value; } }
        public float temperature { get { return this[nameof(temperature)].GetValue<float>(); } set { this[nameof(temperature)].SetValue<float>(value); } }
        public bool IsFull() { return Invoke<bool>(nameof(IsFull)); }
        public bool isEmpty() { return Invoke<bool>(nameof(isEmpty)); }
    }
    public class PlatformGunAnimInstance : AmmoDrivenWeaponAnimInstance
    {
        public PlatformGunAnimInstance(nint addr) : base(addr) { }
        public float SpinRate { get { return this[nameof(SpinRate)].GetValue<float>(); } set { this[nameof(SpinRate)].SetValue<float>(value); } }
        public float NormalSpinRate { get { return this[nameof(NormalSpinRate)].GetValue<float>(); } set { this[nameof(NormalSpinRate)].SetValue<float>(value); } }
        public float LerpSpeed { get { return this[nameof(LerpSpeed)].GetValue<float>(); } set { this[nameof(LerpSpeed)].SetValue<float>(value); } }
        public float FiredSpinRate { get { return this[nameof(FiredSpinRate)].GetValue<float>(); } set { this[nameof(FiredSpinRate)].SetValue<float>(value); } }
        public void WeaponFired() { Invoke(nameof(WeaponFired)); }
    }
    public class AnchorTurner : Actor
    {
        public AnchorTurner(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public SphereComponent PushCollider1 { get { return this[nameof(PushCollider1)].As<SphereComponent>(); } set { this["PushCollider1"] = value; } }
        public SphereComponent PushCollider2 { get { return this[nameof(PushCollider2)].As<SphereComponent>(); } set { this["PushCollider2"] = value; } }
        public SphereComponent PushCollider3 { get { return this[nameof(PushCollider3)].As<SphereComponent>(); } set { this["PushCollider3"] = value; } }
        public SphereComponent PushCollider4 { get { return this[nameof(PushCollider4)].As<SphereComponent>(); } set { this["PushCollider4"] = value; } }
        public Object OnSpunUp { get { return this[nameof(OnSpunUp)]; } set { this[nameof(OnSpunUp)] = value; } }
        public Vector AttatchmentOffset { get { return this[nameof(AttatchmentOffset)].As<Vector>(); } set { this["AttatchmentOffset"] = value; } }
        public UArray<Object> AttachmentPoints { get { return new UArray<Object>(this[nameof(AttachmentPoints)].Address); } }
        public float PerPlayerMultiplier { get { return this[nameof(PerPlayerMultiplier)].GetValue<float>(); } set { this[nameof(PerPlayerMultiplier)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
        public float MaxProgress { get { return this[nameof(MaxProgress)].GetValue<float>(); } set { this[nameof(MaxProgress)].SetValue<float>(value); } }
        public bool Finished { get { return this[nameof(Finished)].Flag; } set { this[nameof(Finished)].Flag = value; } }
        public float DecaySpeed { get { return this[nameof(DecaySpeed)].GetValue<float>(); } set { this[nameof(DecaySpeed)].SetValue<float>(value); } }
        public void OnRep_Finished() { Invoke(nameof(OnRep_Finished)); }
        public void OnLeftPushpoint(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnLeftPushpoint), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnEnteredPushpoint(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnEnteredPushpoint), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void GeneratorSpunUp() { Invoke(nameof(GeneratorSpunUp)); }
    }
    public class AnchorTurnerAnimInstance : AnimInstance
    {
        public AnchorTurnerAnimInstance(nint addr) : base(addr) { }
        public float ModuleRotation { get { return this[nameof(ModuleRotation)].GetValue<float>(); } set { this[nameof(ModuleRotation)].SetValue<float>(value); } }
        public float Percent { get { return this[nameof(Percent)].GetValue<float>(); } set { this[nameof(Percent)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public bool IsFinished { get { return this[nameof(IsFinished)].Flag; } set { this[nameof(IsFinished)].Flag = value; } }
    }
    public class ItemAquisitionBase : DataAsset
    {
        public ItemAquisitionBase(nint addr) : base(addr) { }
    }
    public class StoreBoughtAquisition : ItemAquisitionBase
    {
        public StoreBoughtAquisition(nint addr) : base(addr) { }
        public int CreditsCost { get { return this[nameof(CreditsCost)].GetValue<int>(); } set { this[nameof(CreditsCost)].SetValue<int>(value); } }
        public Object ResourceCost { get { return this[nameof(ResourceCost)]; } set { this[nameof(ResourceCost)] = value; } }
        public int RequiredPlayerRank { get { return this[nameof(RequiredPlayerRank)].GetValue<int>(); } set { this[nameof(RequiredPlayerRank)].SetValue<int>(value); } }
    }
    public class DLCAquisition : ItemAquisitionBase
    {
        public DLCAquisition(nint addr) : base(addr) { }
        public DLCBase RequiredDLC { get { return this[nameof(RequiredDLC)].As<DLCBase>(); } set { this["RequiredDLC"] = value; } }
    }
    public class UnlockedAquisition : ItemAquisitionBase
    {
        public UnlockedAquisition(nint addr) : base(addr) { }
    }
    public class SchematicAquisition : ItemAquisitionBase
    {
        public SchematicAquisition(nint addr) : base(addr) { }
        public SchematicPricingTier PricingTier { get { return this[nameof(PricingTier)].As<SchematicPricingTier>(); } set { this["PricingTier"] = value; } }
        public SchematicRarity Rarity { get { return this[nameof(Rarity)].As<SchematicRarity>(); } set { this["Rarity"] = value; } }
        public UArray<Schematic> Schematics { get { return new UArray<Schematic>(this[nameof(Schematics)].Address); } }
    }
    public class TreassureAquisition : ItemAquisitionBase
    {
        public TreassureAquisition(nint addr) : base(addr) { }
        public ItemAquisitionSource Source { get { return this[nameof(Source)].As<ItemAquisitionSource>(); } set { this["Source"] = value; } }
    }
    public class BaseArmorDamageComponent : ActorComponent
    {
        public BaseArmorDamageComponent(nint addr) : base(addr) { }
        public bool ArmorDamageEnabled { get { return this[nameof(ArmorDamageEnabled)].Flag; } set { this[nameof(ArmorDamageEnabled)].Flag = value; } }
        public Object OnArmorShatteredEvent { get { return this[nameof(OnArmorShatteredEvent)]; } set { this[nameof(OnArmorShatteredEvent)] = value; } }
        public ArmorDamageEffects ArmorBreakEffects { get { return this[nameof(ArmorBreakEffects)].As<ArmorDamageEffects>(); } set { this["ArmorBreakEffects"] = value; } }
        public UArray<FSDPhysicalMaterial> ArmorPhysMats { get { return new UArray<FSDPhysicalMaterial>(this[nameof(ArmorPhysMats)].Address); } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
    }
    public class SimpleArmorDamageComponent : BaseArmorDamageComponent
    {
        public SimpleArmorDamageComponent(nint addr) : base(addr) { }
        public Object OnRadialArmorPartsDestroyedEvent { get { return this[nameof(OnRadialArmorPartsDestroyedEvent)]; } set { this[nameof(OnRadialArmorPartsDestroyedEvent)] = value; } }
        public float ArmorStrength { get { return this[nameof(ArmorStrength)].GetValue<float>(); } set { this[nameof(ArmorStrength)].SetValue<float>(value); } }
        public Object PhysBoneToArmor { get { return this[nameof(PhysBoneToArmor)]; } set { this[nameof(PhysBoneToArmor)] = value; } }
        public ArmorDamageInfo ArmorDamageInfo { get { return this[nameof(ArmorDamageInfo)].As<ArmorDamageInfo>(); } set { this["ArmorDamageInfo"] = value; } }
        public void OnRep_ArmorDamageInfo(ArmorDamageInfo OldArmorDamageInfo) { Invoke(nameof(OnRep_ArmorDamageInfo), OldArmorDamageInfo); }
    }
    public class ArmorHealthDamageComponent : BaseArmorDamageComponent
    {
        public ArmorHealthDamageComponent(nint addr) : base(addr) { }
        public Object OnArmorPartDestroyedEvent { get { return this[nameof(OnArmorPartDestroyedEvent)]; } set { this[nameof(OnArmorPartDestroyedEvent)] = value; } }
        public Object OnArmorPartDamagedEvent { get { return this[nameof(OnArmorPartDamagedEvent)]; } set { this[nameof(OnArmorPartDamagedEvent)] = value; } }
        public Object OnSocketPartDestroyedEvent { get { return this[nameof(OnSocketPartDestroyedEvent)]; } set { this[nameof(OnSocketPartDestroyedEvent)] = value; } }
        public Object OnSocketPartDamagedEvent { get { return this[nameof(OnSocketPartDamagedEvent)]; } set { this[nameof(OnSocketPartDamagedEvent)] = value; } }
        public Object PhysBoneToArmor { get { return this[nameof(PhysBoneToArmor)]; } set { this[nameof(PhysBoneToArmor)] = value; } }
        public ArmorDamageInfo ArmorDamageInfo { get { return this[nameof(ArmorDamageInfo)].As<ArmorDamageInfo>(); } set { this["ArmorDamageInfo"] = value; } }
        public float RadialSocketDamageMultiplier { get { return this[nameof(RadialSocketDamageMultiplier)].GetValue<float>(); } set { this[nameof(RadialSocketDamageMultiplier)].SetValue<float>(value); } }
        public bool AffectedByAmorBreak { get { return this[nameof(AffectedByAmorBreak)].Flag; } set { this[nameof(AffectedByAmorBreak)].Flag = value; } }
        public bool SetHealthOnBodypartItem(Object BoneName, float newHealth) { return Invoke<bool>(nameof(SetHealthOnBodypartItem), BoneName, newHealth); }
        public void SetHealthOnAllItems(float newHealth) { Invoke(nameof(SetHealthOnAllItems), newHealth); }
        public bool SetArmorDamageEnabledOnItem(Object BoneName, bool Enabled) { return Invoke<bool>(nameof(SetArmorDamageEnabledOnItem), BoneName, Enabled); }
        public void RegrowAllArmor(float baseHealth) { Invoke(nameof(RegrowAllArmor), baseHealth); }
        public void PopAllWeakPoints() { Invoke(nameof(PopAllWeakPoints)); }
        public void OnRep_ArmorDamageInfo(ArmorDamageInfo OldValue) { Invoke(nameof(OnRep_ArmorDamageInfo), OldValue); }
        public void DealSocketArmorDamage(float Damage, float armorDamageMultiplier, PrimitiveComponent collider, bool shatter, EArmorDamageType DamageType) { Invoke(nameof(DealSocketArmorDamage), Damage, armorDamageMultiplier, collider, shatter, DamageType); }
    }
    public class CompositeArmorComponent : BaseArmorDamageComponent
    {
        public CompositeArmorComponent(nint addr) : base(addr) { }
        public Object OnArmorPartDestroyedEvent { get { return this[nameof(OnArmorPartDestroyedEvent)]; } set { this[nameof(OnArmorPartDestroyedEvent)] = value; } }
        public Object OnArmorPartDamagedEvent { get { return this[nameof(OnArmorPartDamagedEvent)]; } set { this[nameof(OnArmorPartDamagedEvent)] = value; } }
        public FXSystemAsset BreakParticle { get { return this[nameof(BreakParticle)].As<FXSystemAsset>(); } set { this["BreakParticle"] = value; } }
        public bool AffectedByAmorBreak { get { return this[nameof(AffectedByAmorBreak)].Flag; } set { this[nameof(AffectedByAmorBreak)].Flag = value; } }
        public UArray<CompositeArmorItem> ArmorItems { get { return new UArray<CompositeArmorItem>(this[nameof(ArmorItems)].Address); } }
        public ArmorDamageInfo ArmorDamageInfo { get { return this[nameof(ArmorDamageInfo)].As<ArmorDamageInfo>(); } set { this["ArmorDamageInfo"] = value; } }
        public void OnRep_ArmorDamageInfo(ArmorDamageInfo OldValue) { Invoke(nameof(OnRep_ArmorDamageInfo), OldValue); }
        public void AddArmorPart(PrimitiveComponent Primitive, float Health, bool overrideAffectedByArmomrBreak, bool NewAffectedByArmorBreak) { Invoke(nameof(AddArmorPart), Primitive, Health, overrideAffectedByArmomrBreak, NewAffectedByArmorBreak); }
    }
    public class SavablePrimaryDataAsset : PrimaryDataAsset
    {
        public SavablePrimaryDataAsset(nint addr) : base(addr) { }
        public int BuildRestrictions { get { return this[nameof(BuildRestrictions)].GetValue<int>(); } set { this[nameof(BuildRestrictions)].SetValue<int>(value); } }
        public int PlatformRestrictions { get { return this[nameof(PlatformRestrictions)].GetValue<int>(); } set { this[nameof(PlatformRestrictions)].SetValue<int>(value); } }
        public bool EnableDangerousSaveGameIDEditing { get { return this[nameof(EnableDangerousSaveGameIDEditing)].Flag; } set { this[nameof(EnableDangerousSaveGameIDEditing)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public BuildRestriction BuildRestriction { get { return this[nameof(BuildRestriction)].As<BuildRestriction>(); } set { this["BuildRestriction"] = value; } }
    }
    public class VanityItem : SavablePrimaryDataAsset
    {
        public VanityItem(nint addr) : base(addr) { }
        public Object ItemName { get { return this[nameof(ItemName)]; } set { this[nameof(ItemName)] = value; } }
        public Object ItemDescription { get { return this[nameof(ItemDescription)]; } set { this[nameof(ItemDescription)] = value; } }
        public Object NotesInternal { get { return this[nameof(NotesInternal)]; } set { this[nameof(NotesInternal)] = value; } }
        public ItemAquisitionBase Aquisition { get { return this[nameof(Aquisition)].As<ItemAquisitionBase>(); } set { this["Aquisition"] = value; } }
        public VanityEventSourceDataAsset EventSourceAsset { get { return this[nameof(EventSourceAsset)].As<VanityEventSourceDataAsset>(); } set { this["EventSourceAsset"] = value; } }
        public IconGenerationCameraKey IconGenerationCameraKey { get { return this[nameof(IconGenerationCameraKey)].As<IconGenerationCameraKey>(); } set { this["IconGenerationCameraKey"] = value; } }
        public TagVanitySeasonalEvent SeasonalEventTag { get { return this[nameof(SeasonalEventTag)].As<TagVanitySeasonalEvent>(); } set { this["SeasonalEventTag"] = value; } }
        public bool bIsFestiveItem { get { return this[nameof(bIsFestiveItem)].Flag; } set { this[nameof(bIsFestiveItem)].Flag = value; } }
        public bool bIsSeriousItem { get { return this[nameof(bIsSeriousItem)].Flag; } set { this[nameof(bIsSeriousItem)].Flag = value; } }
        public Object RestrictToCharacters { get { return this[nameof(RestrictToCharacters)]; } set { this[nameof(RestrictToCharacters)] = value; } }
        public bool RemoveFromOwned(Object WorldContext) { return Invoke<bool>(nameof(RemoveFromOwned), WorldContext); }
        public void PreviewItem(FSDPlayerState PlayerState, bool Show) { Invoke(nameof(PreviewItem), PlayerState, Show); }
        public bool IsOwned(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsOwned), WorldContextObject, characterID); }
        public bool IsEquipped(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsEquipped), WorldContextObject, characterID); }
        public bool HasEventSource() { return Invoke<bool>(nameof(HasEventSource)); }
        public void GiftItem(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(GiftItem), WorldContextObject, characterID); }
        public DetailedTagSet GetVanityTags() { return Invoke<DetailedTagSet>(nameof(GetVanityTags)); }
        public EVanitySlot GetVanitySlot() { return Invoke<EVanitySlot>(nameof(GetVanitySlot)); }
        public Object GetRestrictedCharacters() { return Invoke<Object>(nameof(GetRestrictedCharacters)); }
        public UArray<CraftingCost> GetResourceCost() { return Invoke<UArray<CraftingCost>>(nameof(GetResourceCost)); }
        public int GetRequiredPlayerRank() { return Invoke<int>(nameof(GetRequiredPlayerRank)); }
        public bool GetIsUnLockedFromStart() { return Invoke<bool>(nameof(GetIsUnLockedFromStart)); }
        public Texture GetIcon() { return Invoke<Texture>(nameof(GetIcon)); }
        public CraftingCost GetFashioniteCost() { return Invoke<CraftingCost>(nameof(GetFashioniteCost)); }
        public VanityEventSource GetEventSource() { return Invoke<VanityEventSource>(nameof(GetEventSource)); }
        public int GetCraftingCreditsCost() { return Invoke<int>(nameof(GetCraftingCreditsCost)); }
        public Object GetCraftableName() { return Invoke<Object>(nameof(GetCraftableName)); }
        public Object GetCraftableDescription() { return Invoke<Object>(nameof(GetCraftableDescription)); }
        public void CraftItemWithFashionite(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(CraftItemWithFashionite), WorldContextObject, characterID); }
        public void CraftItem(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(CraftItem), WorldContextObject, characterID); }
        public void ChangeToItem(CharacterVanityComponent Gear) { Invoke(nameof(ChangeToItem), Gear); }
        public bool CanCraftWithFashionite(Object WorldContextObject) { return Invoke<bool>(nameof(CanCraftWithFashionite), WorldContextObject); }
        public bool CanCraft(Object WorldContextObject) { return Invoke<bool>(nameof(CanCraft), WorldContextObject); }
        public void ApplyItemPermanently(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(ApplyItemPermanently), WorldContextObject, characterID); }
        public void ApplyItem(PlayerCharacter Player, bool isPermanent) { Invoke(nameof(ApplyItem), Player, isPermanent); }
    }
    public class ArmorMaterialVanityItem : VanityItem
    {
        public ArmorMaterialVanityItem(nint addr) : base(addr) { }
        public Object Material { get { return this[nameof(Material)]; } set { this[nameof(Material)] = value; } }
        public DynamicIcon DynamicIcon { get { return this[nameof(DynamicIcon)].As<DynamicIcon>(); } set { this["DynamicIcon"] = value; } }
        public ArmorVanityItem LockedToArmor { get { return this[nameof(LockedToArmor)].As<ArmorVanityItem>(); } set { this["LockedToArmor"] = value; } }
        public UArray<ArmorVanityItem> BannedArmors { get { return new UArray<ArmorVanityItem>(this[nameof(BannedArmors)].Address); } }
        public Object ClothMaterial { get { return this[nameof(ClothMaterial)]; } set { this[nameof(ClothMaterial)] = value; } }
        public MaterialInstanceConstant SetArmorMaterialToTwoSided(MaterialInstance Parent) { return Invoke<MaterialInstanceConstant>(nameof(SetArmorMaterialToTwoSided), Parent); }
        public MaterialInstanceDynamic CreateIcon(Object Owner) { return Invoke<MaterialInstanceDynamic>(nameof(CreateIcon), Owner); }
        public void CreateClothMaterialForAmorVanity(ArmorMaterialVanityItem armorVanity) { Invoke(nameof(CreateClothMaterialForAmorVanity), armorVanity); }
    }
    public class ArmorPiece : Actor
    {
        public ArmorPiece(nint addr) : base(addr) { }
        public UpgradableGearComponent Upgradable { get { return this[nameof(Upgradable)].As<UpgradableGearComponent>(); } set { this["Upgradable"] = value; } }
        public Object StatModifiers { get { return this[nameof(StatModifiers)]; } set { this[nameof(StatModifiers)] = value; } }
        public Object LoadoutProxy { get { return this[nameof(LoadoutProxy)]; } set { this[nameof(LoadoutProxy)] = value; } }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public Object WeaponPreviewClass { get { return this[nameof(WeaponPreviewClass)]; } set { this[nameof(WeaponPreviewClass)] = value; } }
        public Object GetWeaponViewClass() { return Invoke<Object>(nameof(GetWeaponViewClass)); }
        public ArmorPiece GetArmorPieceDefaultObject(Object armorPieceClass) { return Invoke<ArmorPiece>(nameof(GetArmorPieceDefaultObject), armorPieceClass); }
    }
    public class ArmorVanityItem : VanityItem
    {
        public ArmorVanityItem(nint addr) : base(addr) { }
        public Object TPArmorMesh { get { return this[nameof(TPArmorMesh)]; } set { this[nameof(TPArmorMesh)] = value; } }
        public Object FPArmorMesh { get { return this[nameof(FPArmorMesh)]; } set { this[nameof(FPArmorMesh)] = value; } }
        public bool AllowSleevelessUse { get { return this[nameof(AllowSleevelessUse)].Flag; } set { this[nameof(AllowSleevelessUse)].Flag = value; } }
        public Object AnimInstance { get { return this[nameof(AnimInstance)]; } set { this[nameof(AnimInstance)] = value; } }
        public bool CropBeard { get { return this[nameof(CropBeard)].Flag; } set { this[nameof(CropBeard)].Flag = value; } }
        public float ArmorThickness { get { return this[nameof(ArmorThickness)].GetValue<float>(); } set { this[nameof(ArmorThickness)].SetValue<float>(value); } }
        public Object MaterialOverride { get { return this[nameof(MaterialOverride)]; } set { this[nameof(MaterialOverride)] = value; } }
        public bool CanOnlyUseDefaultArmorMaterial { get { return this[nameof(CanOnlyUseDefaultArmorMaterial)].Flag; } set { this[nameof(CanOnlyUseDefaultArmorMaterial)].Flag = value; } }
        public ArmorMaterialVanityItem DefaultArmorMaterial { get { return this[nameof(DefaultArmorMaterial)].As<ArmorMaterialVanityItem>(); } set { this["DefaultArmorMaterial"] = value; } }
        public UArray<TattooArmorItem> Tattoos { get { return new UArray<TattooArmorItem>(this[nameof(Tattoos)].Address); } }
        public void PreviewArmor(FSDPlayerState PlayerState, bool Show, bool useDefaultArmorMaterial) { Invoke(nameof(PreviewArmor), PlayerState, Show, useDefaultArmorMaterial); }
        public bool HasSleevelessArmorType() { return Invoke<bool>(nameof(HasSleevelessArmorType)); }
    }
    public class AssetLoader : GameInstanceSubsystem
    {
        public AssetLoader(nint addr) : base(addr) { }
    }
    public class AsyncLevelPersistanceActor : Actor
    {
        public AsyncLevelPersistanceActor(nint addr) : base(addr) { }
        public UArray<Object> References { get { return new UArray<Object>(this[nameof(References)].Address); } }
    }
    public class AsyncManager : GameInstanceSubsystem
    {
        public AsyncManager(nint addr) : base(addr) { }
        public UArray<Object> PermanentReferences { get { return new UArray<Object>(this[nameof(PermanentReferences)].Address); } }
        public Object SyncLoadClass(Object Asset) { return Invoke<Object>(nameof(SyncLoadClass), Asset); }
        public Object SyncLoadAsset(Object Asset) { return Invoke<Object>(nameof(SyncLoadAsset), Asset); }
        public void ReleaseAllHandles() { Invoke(nameof(ReleaseAllHandles)); }
        public UArray<Object> Receive_SyncLoadClasses(UArray<Object> assets) { return Invoke<UArray<Object>>(nameof(Receive_SyncLoadClasses), assets); }
        public Object Receive_SyncLoadClass(Object Asset) { return Invoke<Object>(nameof(Receive_SyncLoadClass), Asset); }
        public void AsyncLoadSoftObjects(UArray<Object> Items, EAsyncPersistence persistence, Object OnLoadComplete, EAsyncLoadPriority Priority) { Invoke(nameof(AsyncLoadSoftObjects), Items, persistence, OnLoadComplete, Priority); }
        public void AsyncLoadSoftObject(Object Item, EAsyncPersistence persistence, Object OnLoadComplete, EAsyncLoadPriority Priority) { Invoke(nameof(AsyncLoadSoftObject), Item, persistence, OnLoadComplete, Priority); }
        public void AsyncLoadSoftClasses(UArray<Object> Items, EAsyncPersistence persistence, Object OnLoadComplete, EAsyncLoadPriority Priority) { Invoke(nameof(AsyncLoadSoftClasses), Items, persistence, OnLoadComplete, Priority); }
        public void AsyncLoadSoftClass(Object Item, EAsyncPersistence persistence, Object OnLoadComplete, EAsyncLoadPriority Priority) { Invoke(nameof(AsyncLoadSoftClass), Item, persistence, OnLoadComplete, Priority); }
        public void AsyncLoadAssets(UArray<SoftObjectPath> Items, EAsyncPersistence persistence, Object OnLoadComplete, EAsyncLoadPriority Priority) { Invoke(nameof(AsyncLoadAssets), Items, persistence, OnLoadComplete, Priority); }
        public void AsyncLoadAsset(SoftObjectPath Item, EAsyncPersistence persistence, Object OnLoadComplete, EAsyncLoadPriority Priority) { Invoke(nameof(AsyncLoadAsset), Item, persistence, OnLoadComplete, Priority); }
    }
    public class AttackBaseComponent : ActorComponent
    {
        public AttackBaseComponent(nint addr) : base(addr) { }
        public Object AttackName { get { return this[nameof(AttackName)]; } set { this[nameof(AttackName)] = value; } }
        public float MaxSurfaceAngle { get { return this[nameof(MaxSurfaceAngle)].GetValue<float>(); } set { this[nameof(MaxSurfaceAngle)].SetValue<float>(value); } }
        public FloatInterval range { get { return this[nameof(range)].As<FloatInterval>(); } set { this["range"] = value; } }
        public float MinRange { get { return this[nameof(MinRange)].GetValue<float>(); } set { this[nameof(MinRange)].SetValue<float>(value); } }
        public float MaxRange { get { return this[nameof(MaxRange)].GetValue<float>(); } set { this[nameof(MaxRange)].SetValue<float>(value); } }
        public AttackBaseComponent ReplaceAttackComponent(AttackBaseComponent componentToReplace, Object newComponentClass) { return Invoke<AttackBaseComponent>(nameof(ReplaceAttackComponent), componentToReplace, newComponentClass); }
        public void ReceiveCompleteAttack() { Invoke(nameof(ReceiveCompleteAttack)); }
        public void ReceiveAttackTarget(Actor Target) { Invoke(nameof(ReceiveAttackTarget), Target); }
        public void ReceiveAbortAttack() { Invoke(nameof(ReceiveAbortAttack)); }
        public float GetMinRange() { return Invoke<float>(nameof(GetMinRange)); }
        public float GetMaxRange() { return Invoke<float>(nameof(GetMaxRange)); }
        public void CompleteAttack(bool success) { Invoke(nameof(CompleteAttack), success); }
        public void AttackTarget(Actor Target) { Invoke(nameof(AttackTarget), Target); }
        public void AbortAttack() { Invoke(nameof(AbortAttack)); }
    }
    public class AttackEffect : Object
    {
        public AttackEffect(nint addr) : base(addr) { }
    }
    public class AttackCooldownComponent : ActorComponent
    {
        public AttackCooldownComponent(nint addr) : base(addr) { }
        public UArray<AttackCooldown> AttackCooldowns { get { return new UArray<AttackCooldown>(this[nameof(AttackCooldowns)].Address); } }
        public void SetCooldown(Object AttackName, float cooldownSeconds) { Invoke(nameof(SetCooldown), AttackName, cooldownSeconds); }
        public bool IsAttackOffCooldown(Object AttackName) { return Invoke<bool>(nameof(IsAttackOffCooldown), AttackName); }
        public bool IsAnyAttackOffCooldown() { return Invoke<bool>(nameof(IsAnyAttackOffCooldown)); }
        public void AttackUsed(Object Name) { Invoke(nameof(AttackUsed), Name); }
    }
    public class AttackerManagerComponent : ActorComponent
    {
        public AttackerManagerComponent(nint addr) : base(addr) { }
        public UArray<AttackerPositioningComponent> Components { get { return new UArray<AttackerPositioningComponent>(this[nameof(Components)].Address); } }
    }
    public class AttackerPositioningComponent : ActorComponent
    {
        public AttackerPositioningComponent(nint addr) : base(addr) { }
        public bool DebugPositions { get { return this[nameof(DebugPositions)].Flag; } set { this[nameof(DebugPositions)].Flag = value; } }
        public int MaxAttackers { get { return this[nameof(MaxAttackers)].GetValue<int>(); } set { this[nameof(MaxAttackers)].SetValue<int>(value); } }
        public UArray<AttackerInfo> Attackers { get { return new UArray<AttackerInfo>(this[nameof(Attackers)].Address); } }
        public UArray<int> FreePositions { get { return new UArray<int>(this[nameof(FreePositions)].Address); } }
        public UArray<AttackerInfo> FlyingAttackers { get { return new UArray<AttackerInfo>(this[nameof(FlyingAttackers)].Address); } }
        public UArray<int> FlyingFreePositions { get { return new UArray<int>(this[nameof(FlyingFreePositions)].Address); } }
        public float CharacterPersonalSphere { get { return this[nameof(CharacterPersonalSphere)].GetValue<float>(); } set { this[nameof(CharacterPersonalSphere)].SetValue<float>(value); } }
        public float CharacterHalfHeight { get { return this[nameof(CharacterHalfHeight)].GetValue<float>(); } set { this[nameof(CharacterHalfHeight)].SetValue<float>(value); } }
        public float CostModifier { get { return this[nameof(CostModifier)].GetValue<float>(); } set { this[nameof(CostModifier)].SetValue<float>(value); } }
        public void UnregisterAttacker(Actor Attacker, bool IsFlying) { Invoke(nameof(UnregisterAttacker), Attacker, IsFlying); }
        public void RegisterAttacker(Actor Attacker, bool IsFlying) { Invoke(nameof(RegisterAttacker), Attacker, IsFlying); }
        public void OnFlyingAttackerDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnFlyingAttackerDeath), HealthComponent); }
        public void OnAttackerDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnAttackerDeath), HealthComponent); }
        public Vector GetFlyingAttackerPosition(Actor Attacker, float AttackerRadius) { return Invoke<Vector>(nameof(GetFlyingAttackerPosition), Attacker, AttackerRadius); }
        public Vector GetAttackerPosition(Actor Attacker, float AttackerRadius) { return Invoke<Vector>(nameof(GetAttackerPosition), Attacker, AttackerRadius); }
    }
    public class PlayerAttackPositionComponent : AttackerPositioningComponent
    {
        public PlayerAttackPositionComponent(nint addr) : base(addr) { }
        public float OnZiplineFlyingModifier { get { return this[nameof(OnZiplineFlyingModifier)].GetValue<float>(); } set { this[nameof(OnZiplineFlyingModifier)].SetValue<float>(value); } }
        public float OnZiplineWalkingModifier { get { return this[nameof(OnZiplineWalkingModifier)].GetValue<float>(); } set { this[nameof(OnZiplineWalkingModifier)].SetValue<float>(value); } }
        public void SetGameplayModifier(float modifier) { Invoke(nameof(SetGameplayModifier), modifier); }
    }
    public class ObjectAttackerPositioning : AttackerPositioningComponent
    {
        public ObjectAttackerPositioning(nint addr) : base(addr) { }
        public HealthComponentBase Health { get { return this[nameof(Health)].As<HealthComponentBase>(); } set { this["Health"] = value; } }
    }
    public class CustomObjectAttackerPositioning : AttackerPositioningComponent
    {
        public CustomObjectAttackerPositioning(nint addr) : base(addr) { }
        public HealthComponentBase Health { get { return this[nameof(Health)].As<HealthComponentBase>(); } set { this["Health"] = value; } }
        public UArray<Vector> AttackerPositions { get { return new UArray<Vector>(this[nameof(AttackerPositions)].Address); } }
    }
    public class EnemyAttackerPositioningComponent : AttackerPositioningComponent
    {
        public EnemyAttackerPositioningComponent(nint addr) : base(addr) { }
    }
    public class EscortMuleAttackerPositioning : AttackerPositioningComponent
    {
        public EscortMuleAttackerPositioning(nint addr) : base(addr) { }
        public HealthComponentBase Health { get { return this[nameof(Health)].As<HealthComponentBase>(); } set { this["Health"] = value; } }
        public UArray<Vector> AttackerPositions { get { return new UArray<Vector>(this[nameof(AttackerPositions)].Address); } }
        public void SetNewMaxAttackers(int newMaxAttackers) { Invoke(nameof(SetNewMaxAttackers), newMaxAttackers); }
        public void SetCostModifier(float newModifier) { Invoke(nameof(SetCostModifier), newModifier); }
    }
    public class AttackingPointInterface : Interface
    {
        public AttackingPointInterface(nint addr) : base(addr) { }
    }
    public class AudioFunctionLibrary : BlueprintFunctionLibrary
    {
        public AudioFunctionLibrary(nint addr) : base(addr) { }
        public float SetSoundClassVolume(SoundClass SoundClass, float Volume) { return Invoke<float>(nameof(SetSoundClassVolume), SoundClass, Volume); }
        public void PushTimedSoundMix(Object contextObject, SoundMix mix, float Duration) { Invoke(nameof(PushTimedSoundMix), contextObject, mix, Duration); }
        public float GetSoundClassVolume(SoundClass SoundClass) { return Invoke<float>(nameof(GetSoundClassVolume), SoundClass); }
    }
    public class SoundClassWidget : UserWidget
    {
        public SoundClassWidget(nint addr) : base(addr) { }
    }
    public class AutoCannon : AmmoDrivenWeapon
    {
        public AutoCannon(nint addr) : base(addr) { }
        public float StartingFireRate { get { return this[nameof(StartingFireRate)].GetValue<float>(); } set { this[nameof(StartingFireRate)].SetValue<float>(value); } }
        public float MaxFireRate { get { return this[nameof(MaxFireRate)].GetValue<float>(); } set { this[nameof(MaxFireRate)].SetValue<float>(value); } }
        public RuntimeFloatCurve FireRateCurve { get { return this[nameof(FireRateCurve)].As<RuntimeFloatCurve>(); } set { this["FireRateCurve"] = value; } }
        public float FireTimeReductionScale { get { return this[nameof(FireTimeReductionScale)].GetValue<float>(); } set { this[nameof(FireTimeReductionScale)].SetValue<float>(value); } }
        public float FireTimeIncreaseScale { get { return this[nameof(FireTimeIncreaseScale)].GetValue<float>(); } set { this[nameof(FireTimeIncreaseScale)].SetValue<float>(value); } }
        public float MaxFireTimeCap { get { return this[nameof(MaxFireTimeCap)].GetValue<float>(); } set { this[nameof(MaxFireTimeCap)].SetValue<float>(value); } }
        public float DamageBonusAtFullROF { get { return this[nameof(DamageBonusAtFullROF)].GetValue<float>(); } set { this[nameof(DamageBonusAtFullROF)].SetValue<float>(value); } }
        public bool StatusEffectAtFullROF { get { return this[nameof(StatusEffectAtFullROF)].Flag; } set { this[nameof(StatusEffectAtFullROF)].Flag = value; } }
        public float FireTimeOffsetForMaxRateOfFireBonus { get { return this[nameof(FireTimeOffsetForMaxRateOfFireBonus)].GetValue<float>(); } set { this[nameof(FireTimeOffsetForMaxRateOfFireBonus)].SetValue<float>(value); } }
        public float StartLoopingSoundAt { get { return this[nameof(StartLoopingSoundAt)].GetValue<float>(); } set { this[nameof(StartLoopingSoundAt)].SetValue<float>(value); } }
        public Object StatusAtFullROF { get { return this[nameof(StatusAtFullROF)]; } set { this[nameof(StatusAtFullROF)] = value; } }
        public AnimMontage WPN_Fire { get { return this[nameof(WPN_Fire)].As<AnimMontage>(); } set { this["WPN_Fire"] = value; } }
        public float CurrentFireTime { get { return this[nameof(CurrentFireTime)].GetValue<float>(); } set { this[nameof(CurrentFireTime)].SetValue<float>(value); } }
        public void Server_SetStatusActive(bool IsActive) { Invoke(nameof(Server_SetStatusActive), IsActive); }
    }
    public class AutoCannonAnimInstance : AnimInstance
    {
        public AutoCannonAnimInstance(nint addr) : base(addr) { }
    }
    public class AutoCarverComponent : StaticMeshComponent
    {
        public AutoCarverComponent(nint addr) : base(addr) { }
        public TerrainMaterialBase TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterialBase>(); } set { this["TerrainMaterial"] = value; } }
        public float Frequency { get { return this[nameof(Frequency)].GetValue<float>(); } set { this[nameof(Frequency)].SetValue<float>(value); } }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public float MinDistanceMoved { get { return this[nameof(MinDistanceMoved)].GetValue<float>(); } set { this[nameof(MinDistanceMoved)].SetValue<float>(value); } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public Object OnCarveDoneEvent { get { return this[nameof(OnCarveDoneEvent)]; } set { this[nameof(OnCarveDoneEvent)] = value; } }
        public void ForceCarve() { Invoke(nameof(ForceCarve)); }
    }
    public class STLMeshCarverComponent : PrimitiveComponent
    {
        public STLMeshCarverComponent(nint addr) : base(addr) { }
        public TerrainMaterialBase TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterialBase>(); } set { this["TerrainMaterial"] = value; } }
        public STLMeshCarver MeshCarver { get { return this[nameof(MeshCarver)].As<STLMeshCarver>(); } set { this["MeshCarver"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public bool PreviewEnabled { get { return this[nameof(PreviewEnabled)].Flag; } set { this[nameof(PreviewEnabled)].Flag = value; } }
    }
    public class MeshCarverComponent : StaticMeshComponent
    {
        public MeshCarverComponent(nint addr) : base(addr) { }
        public TerrainMaterialBase TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterialBase>(); } set { this["TerrainMaterial"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public CarveOptionsCellSize CarverSize { get { return (CarveOptionsCellSize)this[nameof(CarverSize)].GetValue<int>(); } set { this[nameof(CarverSize)].SetValue<int>((int)value); } }
        public void Carve() { Invoke(nameof(Carve)); }
    }
    public class LevelGenerationCarverComponent : PrimitiveComponent
    {
        public LevelGenerationCarverComponent(nint addr) : base(addr) { }
        public STLMeshCarver MeshCarver { get { return this[nameof(MeshCarver)].As<STLMeshCarver>(); } set { this["MeshCarver"] = value; } }
        public StaticMesh ConvexCarver { get { return this[nameof(ConvexCarver)].As<StaticMesh>(); } set { this["ConvexCarver"] = value; } }
        public StaticMeshCarver StaticMeshCarver { get { return this[nameof(StaticMeshCarver)].As<StaticMeshCarver>(); } set { this["StaticMeshCarver"] = value; } }
        public TerrainMaterialBase TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterialBase>(); } set { this["TerrainMaterial"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public float ConvexExpensiveNoise { get { return this[nameof(ConvexExpensiveNoise)].GetValue<float>(); } set { this[nameof(ConvexExpensiveNoise)].SetValue<float>(value); } }
        public CarveOptionsCellSize CarveCellSize { get { return (CarveOptionsCellSize)this[nameof(CarveCellSize)].GetValue<int>(); } set { this[nameof(CarveCellSize)].SetValue<int>((int)value); } }
        public bool PreviewEnabled { get { return this[nameof(PreviewEnabled)].Flag; } set { this[nameof(PreviewEnabled)].Flag = value; } }
        public bool CarvingDisabled { get { return this[nameof(CarvingDisabled)].Flag; } set { this[nameof(CarvingDisabled)].Flag = value; } }
        public bool DestroyOwnerOnCarve { get { return this[nameof(DestroyOwnerOnCarve)].Flag; } set { this[nameof(DestroyOwnerOnCarve)].Flag = value; } }
        public bool DestroySelfAndChilded { get { return this[nameof(DestroySelfAndChilded)].Flag; } set { this[nameof(DestroySelfAndChilded)].Flag = value; } }
        public bool SelfActivate { get { return this[nameof(SelfActivate)].Flag; } set { this[nameof(SelfActivate)].Flag = value; } }
        public void OnCarvedCallback() { Invoke(nameof(OnCarvedCallback)); }
    }
    public class GenerationCleanupComponent : ActorComponent
    {
        public GenerationCleanupComponent(nint addr) : base(addr) { }
        public void OnCarverCallback() { Invoke(nameof(OnCarverCallback)); }
    }
    public class RandomizedInstantMeshCarver : Actor
    {
        public RandomizedInstantMeshCarver(nint addr) : base(addr) { }
        public UArray<StaticMesh> CarvingMeshes { get { return new UArray<StaticMesh>(this[nameof(CarvingMeshes)].Address); } }
        public UArray<STLMeshCarver> STLCarvingMeshes { get { return new UArray<STLMeshCarver>(this[nameof(STLCarvingMeshes)].Address); } }
        public UArray<StaticMeshCarver> StaticMeshCarvers { get { return new UArray<StaticMeshCarver>(this[nameof(StaticMeshCarvers)].Address); } }
        public RandRange RandomScale { get { return this[nameof(RandomScale)].As<RandRange>(); } set { this["RandomScale"] = value; } }
        public TerrainMaterialBase TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterialBase>(); } set { this["TerrainMaterial"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
    }
    public class LevelGenerationCarverComponent2 : PrimitiveComponent
    {
        public LevelGenerationCarverComponent2(nint addr) : base(addr) { }
        public Object Carver { get { return this[nameof(Carver)]; } set { this[nameof(Carver)] = value; } }
        public bool CarvingDisabled { get { return this[nameof(CarvingDisabled)].Flag; } set { this[nameof(CarvingDisabled)].Flag = value; } }
        public int PreviewSeed { get { return this[nameof(PreviewSeed)].GetValue<int>(); } set { this[nameof(PreviewSeed)].SetValue<int>(value); } }
        public BakeSettings CarverSettings { get { return this[nameof(CarverSettings)].As<BakeSettings>(); } set { this["CarverSettings"] = value; } }
        public bool SelfActivate { get { return this[nameof(SelfActivate)].Flag; } set { this[nameof(SelfActivate)].Flag = value; } }
        public CSGPreviewComponent PreviewComponent { get { return this[nameof(PreviewComponent)].As<CSGPreviewComponent>(); } set { this["PreviewComponent"] = value; } }
    }
    public class AvoidCeilingComponent : ActorComponent
    {
        public AvoidCeilingComponent(nint addr) : base(addr) { }
        public float MaxDuckDistance { get { return this[nameof(MaxDuckDistance)].GetValue<float>(); } set { this[nameof(MaxDuckDistance)].SetValue<float>(value); } }
        public float TraceVerticalStart { get { return this[nameof(TraceVerticalStart)].GetValue<float>(); } set { this[nameof(TraceVerticalStart)].SetValue<float>(value); } }
        public float MinVerticalSpace { get { return this[nameof(MinVerticalSpace)].GetValue<float>(); } set { this[nameof(MinVerticalSpace)].SetValue<float>(value); } }
        public float DuckSpeed { get { return this[nameof(DuckSpeed)].GetValue<float>(); } set { this[nameof(DuckSpeed)].SetValue<float>(value); } }
        public SceneComponent ComponentToMove { get { return this[nameof(ComponentToMove)].As<SceneComponent>(); } set { this["ComponentToMove"] = value; } }
        public bool IsDuckingEnabled { get { return this[nameof(IsDuckingEnabled)].Flag; } set { this[nameof(IsDuckingEnabled)].Flag = value; } }
    }
    public class BallisticMovementComponent : ActorComponent
    {
        public BallisticMovementComponent(nint addr) : base(addr) { }
        public Object OnLaunch { get { return this[nameof(OnLaunch)]; } set { this[nameof(OnLaunch)] = value; } }
        public Object OnLanding { get { return this[nameof(OnLanding)]; } set { this[nameof(OnLanding)] = value; } }
        public float GravityMultiplier { get { return this[nameof(GravityMultiplier)].GetValue<float>(); } set { this[nameof(GravityMultiplier)].SetValue<float>(value); } }
        public float LaunchAngleOffset { get { return this[nameof(LaunchAngleOffset)].GetValue<float>(); } set { this[nameof(LaunchAngleOffset)].SetValue<float>(value); } }
        public float MinMoveDistance { get { return this[nameof(MinMoveDistance)].GetValue<float>(); } set { this[nameof(MinMoveDistance)].SetValue<float>(value); } }
        public float SampleZOffset { get { return this[nameof(SampleZOffset)].GetValue<float>(); } set { this[nameof(SampleZOffset)].SetValue<float>(value); } }
        public float RotateDelay { get { return this[nameof(RotateDelay)].GetValue<float>(); } set { this[nameof(RotateDelay)].SetValue<float>(value); } }
        public float LaunchDelay { get { return this[nameof(LaunchDelay)].GetValue<float>(); } set { this[nameof(LaunchDelay)].SetValue<float>(value); } }
        public float LandingDelay { get { return this[nameof(LandingDelay)].GetValue<float>(); } set { this[nameof(LandingDelay)].SetValue<float>(value); } }
        public bool bIsMoveActive { get { return this[nameof(bIsMoveActive)].Flag; } set { this[nameof(bIsMoveActive)].Flag = value; } }
        public Vector LaunchVelocity { get { return this[nameof(LaunchVelocity)].As<Vector>(); } set { this["LaunchVelocity"] = value; } }
        public Rotator TargetRotation { get { return this[nameof(TargetRotation)].As<Rotator>(); } set { this["TargetRotation"] = value; } }
        public float AnticipatedTotalAirborneTime { get { return this[nameof(AnticipatedTotalAirborneTime)].GetValue<float>(); } set { this[nameof(AnticipatedTotalAirborneTime)].SetValue<float>(value); } }
        public float Pitch { get { return this[nameof(Pitch)].GetValue<float>(); } set { this[nameof(Pitch)].SetValue<float>(value); } }
        public void StartMovement(Vector LaunchVelocity, Rotator targetRotator, float flightTime) { Invoke(nameof(StartMovement), LaunchVelocity, targetRotator, flightTime); }
        public void OnRep_LaunchVelocity() { Invoke(nameof(OnRep_LaunchVelocity)); }
        public bool IsMoveActive() { return Invoke<bool>(nameof(IsMoveActive)); }
        public bool IsAnimating() { return Invoke<bool>(nameof(IsAnimating)); }
    }
    public class WindowWidget : UserWidget
    {
        public WindowWidget(nint addr) : base(addr) { }
        public Object OnWindowClosed { get { return this[nameof(OnWindowClosed)]; } set { this[nameof(OnWindowClosed)] = value; } }
        public bool bHandleCloseCommand { get { return this[nameof(bHandleCloseCommand)].Flag; } set { this[nameof(bHandleCloseCommand)].Flag = value; } }
        public bool bResolutionDownscaleWhenOpen { get { return this[nameof(bResolutionDownscaleWhenOpen)].Flag; } set { this[nameof(bResolutionDownscaleWhenOpen)].Flag = value; } }
        public void WindowDelegate__DelegateSignature(WindowWidget Window) { Invoke(nameof(WindowDelegate__DelegateSignature), Window); }
        public void ReceiveSelectPreviousCommand() { Invoke(nameof(ReceiveSelectPreviousCommand)); }
        public void ReceiveSelectNextCommand() { Invoke(nameof(ReceiveSelectNextCommand)); }
        public void ReceiveSelectCharacterCommand() { Invoke(nameof(ReceiveSelectCharacterCommand)); }
        public void ReceiveOkCommand() { Invoke(nameof(ReceiveOkCommand)); }
        public void ReceiveCloseCommand() { Invoke(nameof(ReceiveCloseCommand)); }
        public bool ReceiveCanCloseWindow(Object InActionName, Key InKey, bool InIsMouseEvent) { return Invoke<bool>(nameof(ReceiveCanCloseWindow), InActionName, InKey, InIsMouseEvent); }
        public void OnShown() { Invoke(nameof(OnShown)); }
        public void OnNewTopWindow() { Invoke(nameof(OnNewTopWindow)); }
        public void OnClosed() { Invoke(nameof(OnClosed)); }
        public void ConsumeCommand() { Invoke(nameof(ConsumeCommand)); }
        public void CloseThisWindow() { Invoke(nameof(CloseThisWindow)); }
    }
    public class BarMenuWidget : WindowWidget
    {
        public BarMenuWidget(nint addr) : base(addr) { }
        public Object SpaceRigBar { get { return this[nameof(SpaceRigBar)]; } set { this[nameof(SpaceRigBar)] = value; } }
    }
    public class BarrierProjectile : Actor
    {
        public BarrierProjectile(nint addr) : base(addr) { }
    }
    public class FSDPhysicsActor : Actor
    {
        public FSDPhysicsActor(nint addr) : base(addr) { }
        public int MovementUpdateFrequency { get { return this[nameof(MovementUpdateFrequency)].GetValue<int>(); } set { this[nameof(MovementUpdateFrequency)].SetValue<int>(value); } }
        public int MovementUpdateEventTriggeredFrequency { get { return this[nameof(MovementUpdateEventTriggeredFrequency)].GetValue<int>(); } set { this[nameof(MovementUpdateEventTriggeredFrequency)].SetValue<int>(value); } }
        public void ForceMovementUpdate() { Invoke(nameof(ForceMovementUpdate)); }
    }
    public class CarriableItem : FSDPhysicsActor
    {
        public CarriableItem(nint addr) : base(addr) { }
        public Object OnAttachedChangeDelegate { get { return this[nameof(OnAttachedChangeDelegate)]; } set { this[nameof(OnAttachedChangeDelegate)] = value; } }
        public Object OnCarriableDeposited { get { return this[nameof(OnCarriableDeposited)]; } set { this[nameof(OnCarriableDeposited)] = value; } }
        public bool StrictDeposit { get { return this[nameof(StrictDeposit)].Flag; } set { this[nameof(StrictDeposit)].Flag = value; } }
        public bool IsDopositable { get { return this[nameof(IsDopositable)].Flag; } set { this[nameof(IsDopositable)].Flag = value; } }
        public void Throw(Vector force) { Invoke(nameof(Throw), force); }
        public void Receive_OnDeposited(PlayerCharacter fromPlayer, Actor toActor) { Invoke(nameof(Receive_OnDeposited), fromPlayer, toActor); }
        public void OnAttachChanged(bool Attached) { Invoke(nameof(OnAttachChanged), Attached); }
    }
    public class BasicThrowableItem : CarriableItem
    {
        public BasicThrowableItem(nint addr) : base(addr) { }
        public BoxComponent BoxComp { get { return this[nameof(BoxComp)].As<BoxComponent>(); } set { this["BoxComp"] = value; } }
        public SphereComponent UseSphere { get { return this[nameof(UseSphere)].As<SphereComponent>(); } set { this["UseSphere"] = value; } }
        public CarriableComponent CarriableComp { get { return this[nameof(CarriableComp)].As<CarriableComponent>(); } set { this["CarriableComp"] = value; } }
        public InstantUsable UsableComp { get { return this[nameof(UsableComp)].As<InstantUsable>(); } set { this["UsableComp"] = value; } }
        public StaticMeshComponent WorldMeshComp { get { return this[nameof(WorldMeshComp)].As<StaticMeshComponent>(); } set { this["WorldMeshComp"] = value; } }
        public FirstPersonStaticMeshComponent ViewMeshComp { get { return this[nameof(ViewMeshComp)].As<FirstPersonStaticMeshComponent>(); } set { this["ViewMeshComp"] = value; } }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
        public float SquaredMinImpactForce { get { return this[nameof(SquaredMinImpactForce)].GetValue<float>(); } set { this[nameof(SquaredMinImpactForce)].SetValue<float>(value); } }
        public float ImpactAudioResetTime { get { return this[nameof(ImpactAudioResetTime)].GetValue<float>(); } set { this[nameof(ImpactAudioResetTime)].SetValue<float>(value); } }
        public float SquaredMinThrowforce { get { return this[nameof(SquaredMinThrowforce)].GetValue<float>(); } set { this[nameof(SquaredMinThrowforce)].SetValue<float>(value); } }
        public void ThrowItem(Vector throwForce) { Invoke(nameof(ThrowItem), throwForce); }
        public void ResetImpactSound() { Invoke(nameof(ResetImpactSound)); }
        public void OnUsed(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnUsed), User, Key); }
        public void OnUsableChanged(bool CanUse) { Invoke(nameof(OnUsableChanged), CanUse); }
        public void OnPickedUp() { Invoke(nameof(OnPickedUp)); }
        public void OnDropped() { Invoke(nameof(OnDropped)); }
        public void OnComponentHit(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnComponentHit), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
    }
    public class BasicDepositableItem : BasicThrowableItem
    {
        public BasicDepositableItem(nint addr) : base(addr) { }
        public ResourceData DepositableResource { get { return this[nameof(DepositableResource)].As<ResourceData>(); } set { this["DepositableResource"] = value; } }
    }
    public class WeaponFireComponent : ActorComponent
    {
        public WeaponFireComponent(nint addr) : base(addr) { }
        public Object OnWeaponFired { get { return this[nameof(OnWeaponFired)]; } set { this[nameof(OnWeaponFired)] = value; } }
        public Object OnWeaponFireEnded { get { return this[nameof(OnWeaponFireEnded)]; } set { this[nameof(OnWeaponFireEnded)] = value; } }
        public Object OnRicochetEvent { get { return this[nameof(OnRicochetEvent)]; } set { this[nameof(OnRicochetEvent)] = value; } }
        public Object Weapon { get { return this[nameof(Weapon)]; } set { this[nameof(Weapon)] = value; } }
        public bool SetAsWeaponFireComponent { get { return this[nameof(SetAsWeaponFireComponent)].Flag; } set { this[nameof(SetAsWeaponFireComponent)].Flag = value; } }
        public void StopFire() { Invoke(nameof(StopFire)); }
        public void Server_SetShotPower(float shotPower) { Invoke(nameof(Server_SetShotPower), shotPower); }
        public void Fire(Vector Origin, Vector_NetQuantizeNormal Direction, bool playFireFX) { Invoke(nameof(Fire), Origin, Direction, playFireFX); }
    }
    public class BasicWeaponFireComponent : WeaponFireComponent
    {
        public BasicWeaponFireComponent(nint addr) : base(addr) { }
        public void Server_FireWeapon() { Invoke(nameof(Server_FireWeapon)); }
        public void Server_EndFire() { Invoke(nameof(Server_EndFire)); }
        public void All_WeaponFired() { Invoke(nameof(All_WeaponFired)); }
    }
    public class BeardColorVanityItem : VanityItem
    {
        public BeardColorVanityItem(nint addr) : base(addr) { }
        public Object HairColor { get { return this[nameof(HairColor)]; } set { this[nameof(HairColor)] = value; } }
        public Object EyebrowColor { get { return this[nameof(EyebrowColor)]; } set { this[nameof(EyebrowColor)] = value; } }
        public Object MoustacheColor { get { return this[nameof(MoustacheColor)]; } set { this[nameof(MoustacheColor)] = value; } }
        public Object SideburnColor { get { return this[nameof(SideburnColor)]; } set { this[nameof(SideburnColor)] = value; } }
        public Object BeardColor { get { return this[nameof(BeardColor)]; } set { this[nameof(BeardColor)] = value; } }
        public Object TransparentColor { get { return this[nameof(TransparentColor)]; } set { this[nameof(TransparentColor)] = value; } }
    }
    public class BeardVanityItem : VanityItem
    {
        public BeardVanityItem(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public float BeardThickness { get { return this[nameof(BeardThickness)].GetValue<float>(); } set { this[nameof(BeardThickness)].SetValue<float>(value); } }
        public bool RequiresSlimArmor { get { return this[nameof(RequiresSlimArmor)].Flag; } set { this[nameof(RequiresSlimArmor)].Flag = value; } }
        public EMaterialChoice MaterialType { get { return (EMaterialChoice)this[nameof(MaterialType)].GetValue<int>(); } set { this[nameof(MaterialType)].SetValue<int>((int)value); } }
        public bool HideEyebrows { get { return this[nameof(HideEyebrows)].Flag; } set { this[nameof(HideEyebrows)].Flag = value; } }
        public bool HideSideburns { get { return this[nameof(HideSideburns)].Flag; } set { this[nameof(HideSideburns)].Flag = value; } }
        public bool HideMoustache { get { return this[nameof(HideMoustache)].Flag; } set { this[nameof(HideMoustache)].Flag = value; } }
        public bool HideAll { get { return this[nameof(HideAll)].Flag; } set { this[nameof(HideAll)].Flag = value; } }
        public Object VanityTags { get { return this[nameof(VanityTags)]; } set { this[nameof(VanityTags)] = value; } }
        public Object AnimInstance { get { return this[nameof(AnimInstance)]; } set { this[nameof(AnimInstance)] = value; } }
        public Object MaterialOverride { get { return this[nameof(MaterialOverride)]; } set { this[nameof(MaterialOverride)] = value; } }
    }
    public class SavableDataAsset : DataAsset
    {
        public SavableDataAsset(nint addr) : base(addr) { }
        public bool EnableDangerousSaveGameIDEditing { get { return this[nameof(EnableDangerousSaveGameIDEditing)].Flag; } set { this[nameof(EnableDangerousSaveGameIDEditing)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public BuildRestriction BuildRestriction { get { return this[nameof(BuildRestriction)].As<BuildRestriction>(); } set { this["BuildRestriction"] = value; } }
        public Guid GetSavegameID() { return Invoke<Guid>(nameof(GetSavegameID)); }
    }
    public class BEEMissionTemplate : SavableDataAsset
    {
        public BEEMissionTemplate(nint addr) : base(addr) { }
        public int MissionCount { get { return this[nameof(MissionCount)].GetValue<int>(); } set { this[nameof(MissionCount)].SetValue<int>(value); } }
        public UArray<DifficultySetting> Difficulties { get { return new UArray<DifficultySetting>(this[nameof(Difficulties)].Address); } }
        public UArray<BEETemplateItem> missions { get { return new UArray<BEETemplateItem>(this[nameof(missions)].Address); } }
        public int CreditsPerPrimaryObjective { get { return this[nameof(CreditsPerPrimaryObjective)].GetValue<int>(); } set { this[nameof(CreditsPerPrimaryObjective)].SetValue<int>(value); } }
        public int CreditsPerSecondaryObjective { get { return this[nameof(CreditsPerSecondaryObjective)].GetValue<int>(); } set { this[nameof(CreditsPerSecondaryObjective)].SetValue<int>(value); } }
        public int XPPerPrimaryObjective { get { return this[nameof(XPPerPrimaryObjective)].GetValue<int>(); } set { this[nameof(XPPerPrimaryObjective)].SetValue<int>(value); } }
        public int XPPerSecondaryObjective { get { return this[nameof(XPPerSecondaryObjective)].GetValue<int>(); } set { this[nameof(XPPerSecondaryObjective)].SetValue<int>(value); } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public RandInterval MutatorCount { get { return this[nameof(MutatorCount)].As<RandInterval>(); } set { this["MutatorCount"] = value; } }
        public RandInterval WarningCount { get { return this[nameof(WarningCount)].As<RandInterval>(); } set { this["WarningCount"] = value; } }
        public bool IsDurationAllowed(MissionTemplate mission, MissionDuration Duration) { return Invoke<bool>(nameof(IsDurationAllowed), mission, Duration); }
        public bool IsComplexityAllowed(MissionTemplate mission, MissionComplexity Complexity) { return Invoke<bool>(nameof(IsComplexityAllowed), mission, Complexity); }
    }
    public class BEESettings : DataAsset
    {
        public BEESettings(nint addr) : base(addr) { }
        public BEEMissionTemplate MissionTemplate { get { return this[nameof(MissionTemplate)].As<BEEMissionTemplate>(); } set { this["MissionTemplate"] = value; } }
        public UArray<Mutator> BaseMutators { get { return new UArray<Mutator>(this[nameof(BaseMutators)].Address); } }
        public UArray<MissionMutator> Mutators { get { return new UArray<MissionMutator>(this[nameof(Mutators)].Address); } }
        public UArray<MissionWarning> Warnings { get { return new UArray<MissionWarning>(this[nameof(Warnings)].Address); } }
        public UArray<DialogDataAsset> BEEMissionCompleteShouts { get { return new UArray<DialogDataAsset>(this[nameof(BEEMissionCompleteShouts)].Address); } }
        public UArray<BEELoaderSequence> LoaderSequnces { get { return new UArray<BEELoaderSequence>(this[nameof(LoaderSequnces)].Address); } }
        public MissionNameBank DeepDiveNameBank { get { return this[nameof(DeepDiveNameBank)].As<MissionNameBank>(); } set { this["DeepDiveNameBank"] = value; } }
        public Object MissionBar { get { return this[nameof(MissionBar)]; } set { this[nameof(MissionBar)] = value; } }
        public Object MissionEndScreen { get { return this[nameof(MissionEndScreen)]; } set { this[nameof(MissionEndScreen)] = value; } }
    }
    public class BeltDrivenWeapon : AmmoDrivenWeapon
    {
        public BeltDrivenWeapon(nint addr) : base(addr) { }
        public AudioComponent BarrelAudio { get { return this[nameof(BarrelAudio)].As<AudioComponent>(); } set { this["BarrelAudio"] = value; } }
        public SoundCue BarrelSound { get { return this[nameof(BarrelSound)].As<SoundCue>(); } set { this["BarrelSound"] = value; } }
        public float BarrelFadeIn { get { return this[nameof(BarrelFadeIn)].GetValue<float>(); } set { this[nameof(BarrelFadeIn)].SetValue<float>(value); } }
        public float BarrelFadeOut { get { return this[nameof(BarrelFadeOut)].GetValue<float>(); } set { this[nameof(BarrelFadeOut)].SetValue<float>(value); } }
        public CurveFloat BarrelPitchCurve { get { return this[nameof(BarrelPitchCurve)].As<CurveFloat>(); } set { this["BarrelPitchCurve"] = value; } }
        public float BarrelSpinUpTime { get { return this[nameof(BarrelSpinUpTime)].GetValue<float>(); } set { this[nameof(BarrelSpinUpTime)].SetValue<float>(value); } }
        public float BarrelSpinDownTime { get { return this[nameof(BarrelSpinDownTime)].GetValue<float>(); } set { this[nameof(BarrelSpinDownTime)].SetValue<float>(value); } }
        public float CurrentSpinRate { get { return this[nameof(CurrentSpinRate)].GetValue<float>(); } set { this[nameof(CurrentSpinRate)].SetValue<float>(value); } }
        public bool Simulate_SpinBarrel { get { return this[nameof(Simulate_SpinBarrel)].Flag; } set { this[nameof(Simulate_SpinBarrel)].Flag = value; } }
        public void Server_StopBarrel() { Invoke(nameof(Server_StopBarrel)); }
        public void Server_StartBarrel() { Invoke(nameof(Server_StartBarrel)); }
    }
    public class GatlingGun : BeltDrivenWeapon
    {
        public GatlingGun(nint addr) : base(addr) { }
        public bool BarrelProximityDamageEnabled { get { return this[nameof(BarrelProximityDamageEnabled)].Flag; } set { this[nameof(BarrelProximityDamageEnabled)].Flag = value; } }
        public float BarrelProximityDamageDistance { get { return this[nameof(BarrelProximityDamageDistance)].GetValue<float>(); } set { this[nameof(BarrelProximityDamageDistance)].SetValue<float>(value); } }
        public float BarrelProximityDamageRadius { get { return this[nameof(BarrelProximityDamageRadius)].GetValue<float>(); } set { this[nameof(BarrelProximityDamageRadius)].SetValue<float>(value); } }
        public float BarrelProximityDamageLength { get { return this[nameof(BarrelProximityDamageLength)].GetValue<float>(); } set { this[nameof(BarrelProximityDamageLength)].SetValue<float>(value); } }
        public float TimeBetweenProximityDamageTicks { get { return this[nameof(TimeBetweenProximityDamageTicks)].GetValue<float>(); } set { this[nameof(TimeBetweenProximityDamageTicks)].SetValue<float>(value); } }
        public float DamageMultiplierAtMaxStabilization { get { return this[nameof(DamageMultiplierAtMaxStabilization)].GetValue<float>(); } set { this[nameof(DamageMultiplierAtMaxStabilization)].SetValue<float>(value); } }
        public FXSystemAsset HotShellsTracerParticles { get { return this[nameof(HotShellsTracerParticles)].As<FXSystemAsset>(); } set { this["HotShellsTracerParticles"] = value; } }
        public float HeatRemovedOnKill { get { return this[nameof(HeatRemovedOnKill)].GetValue<float>(); } set { this[nameof(HeatRemovedOnKill)].SetValue<float>(value); } }
        public bool CriticalOverheatEnabled { get { return this[nameof(CriticalOverheatEnabled)].Flag; } set { this[nameof(CriticalOverheatEnabled)].Flag = value; } }
        public bool HotShellsOn { get { return this[nameof(HotShellsOn)].Flag; } set { this[nameof(HotShellsOn)].Flag = value; } }
        public float HotShellsTemperatureRequired { get { return this[nameof(HotShellsTemperatureRequired)].GetValue<float>(); } set { this[nameof(HotShellsTemperatureRequired)].SetValue<float>(value); } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public DamageComponent BarrelProximityDamageComponent { get { return this[nameof(BarrelProximityDamageComponent)].As<DamageComponent>(); } set { this["BarrelProximityDamageComponent"] = value; } }
        public void Server_SetHotShellsOn(bool hotShellsIsOn) { Invoke(nameof(Server_SetHotShellsOn), hotShellsIsOn); }
        public void OnRep_HotShellsTracerOn() { Invoke(nameof(OnRep_HotShellsTracerOn)); }
        public void OnGatlingTemperatureChanged(float temperature, bool isOverheated) { Invoke(nameof(OnGatlingTemperatureChanged), temperature, isOverheated); }
        public void OnEnemyKilled(Actor Target, FSDPhysicalMaterial PhysMat, bool wasDirectHit) { Invoke(nameof(OnEnemyKilled), Target, PhysMat, wasDirectHit); }
        public void Client_RemoveHeat() { Invoke(nameof(Client_RemoveHeat)); }
    }
    public class BeltDrivenAnimInstance : AmmoDrivenWeaponAnimInstance
    {
        public BeltDrivenAnimInstance(nint addr) : base(addr) { }
        public float BarrelSpinRate { get { return this[nameof(BarrelSpinRate)].GetValue<float>(); } set { this[nameof(BarrelSpinRate)].SetValue<float>(value); } }
        public float CurrentBarrelSpinRate { get { return this[nameof(CurrentBarrelSpinRate)].GetValue<float>(); } set { this[nameof(CurrentBarrelSpinRate)].SetValue<float>(value); } }
        public Vector ExternalForce { get { return this[nameof(ExternalForce)].As<Vector>(); } set { this["ExternalForce"] = value; } }
        public float ExternalForceScale { get { return this[nameof(ExternalForceScale)].GetValue<float>(); } set { this[nameof(ExternalForceScale)].SetValue<float>(value); } }
        public Object ExternalForceBoneName { get { return this[nameof(ExternalForceBoneName)]; } set { this[nameof(ExternalForceBoneName)] = value; } }
    }
    public class TaggedActor : Actor
    {
        public TaggedActor(nint addr) : base(addr) { }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
    }
    public class BhaBarnacle : TaggedActor
    {
        public BhaBarnacle(nint addr) : base(addr) { }
        public bool IsDead { get { return this[nameof(IsDead)].Flag; } set { this[nameof(IsDead)].Flag = value; } }
    }
    public class BhaBarnableAnimationSharingStateProcessor : AnimationSharingStateProcessor
    {
        public BhaBarnableAnimationSharingStateProcessor(nint addr) : base(addr) { }
    }
    public class Biome : DataAsset
    {
        public Biome(nint addr) : base(addr) { }
        public Object BiomeName { get { return this[nameof(BiomeName)]; } set { this[nameof(BiomeName)] = value; } }
        public Object BiomeShortName { get { return this[nameof(BiomeShortName)]; } set { this[nameof(BiomeShortName)] = value; } }
        public Object BiomeDescription { get { return this[nameof(BiomeDescription)]; } set { this[nameof(BiomeDescription)] = value; } }
        public Color BiomeColor { get { return this[nameof(BiomeColor)].As<Color>(); } set { this["BiomeColor"] = value; } }
        public int BiomeIndex { get { return this[nameof(BiomeIndex)].GetValue<int>(); } set { this[nameof(BiomeIndex)].SetValue<int>(value); } }
        public Object BiomeAnalyticsIndex { get { return this[nameof(BiomeAnalyticsIndex)]; } set { this[nameof(BiomeAnalyticsIndex)] = value; } }
        public bool IsTutorialBiome { get { return this[nameof(IsTutorialBiome)].Flag; } set { this[nameof(IsTutorialBiome)].Flag = value; } }
        public Object BiomeMovie { get { return this[nameof(BiomeMovie)]; } set { this[nameof(BiomeMovie)] = value; } }
        public Object BiomePicture { get { return this[nameof(BiomePicture)]; } set { this[nameof(BiomePicture)] = value; } }
        public Object BiomeIcon { get { return this[nameof(BiomeIcon)]; } set { this[nameof(BiomeIcon)] = value; } }
        public Object BiomeLargeImage { get { return this[nameof(BiomeLargeImage)]; } set { this[nameof(BiomeLargeImage)] = value; } }
        public Object BiomeWorldMap { get { return this[nameof(BiomeWorldMap)]; } set { this[nameof(BiomeWorldMap)] = value; } }
        public Object BiomeMissionBar { get { return this[nameof(BiomeMissionBar)]; } set { this[nameof(BiomeMissionBar)] = value; } }
        public Object BiomeMapWidget { get { return this[nameof(BiomeMapWidget)]; } set { this[nameof(BiomeMapWidget)] = value; } }
        public HeatSource BiomeHeatSource { get { return this[nameof(BiomeHeatSource)].As<HeatSource>(); } set { this["BiomeHeatSource"] = value; } }
        public RandRange DepthRange { get { return this[nameof(DepthRange)].As<RandRange>(); } set { this["DepthRange"] = value; } }
        public Object AtmosphericParticles { get { return this[nameof(AtmosphericParticles)]; } set { this[nameof(AtmosphericParticles)] = value; } }
        public UArray<Object> CaveScriptComponents { get { return new UArray<Object>(this[nameof(CaveScriptComponents)].Address); } }
        public float ExtraCaveSize { get { return this[nameof(ExtraCaveSize)].GetValue<float>(); } set { this[nameof(ExtraCaveSize)].SetValue<float>(value); } }
        public UArray<DebrisSet> Debris { get { return new UArray<DebrisSet>(this[nameof(Debris)].Address); } }
        public Object DebrisActor { get { return this[nameof(DebrisActor)]; } set { this[nameof(DebrisActor)] = value; } }
        public Object PostProcessActorClass { get { return this[nameof(PostProcessActorClass)]; } set { this[nameof(PostProcessActorClass)] = value; } }
        public TerrainMaterial RockMaterial { get { return this[nameof(RockMaterial)].As<TerrainMaterial>(); } set { this["RockMaterial"] = value; } }
        public TerrainMaterial DirtMaterial { get { return this[nameof(DirtMaterial)].As<TerrainMaterial>(); } set { this["DirtMaterial"] = value; } }
        public TerrainMaterial BurnedMaterialOverride { get { return this[nameof(BurnedMaterialOverride)].As<TerrainMaterial>(); } set { this["BurnedMaterialOverride"] = value; } }
        public UArray<Object> FlavorMaterials { get { return new UArray<Object>(this[nameof(FlavorMaterials)].Address); } }
        public UArray<BiomeNoiseItem> RoomNoises { get { return new UArray<BiomeNoiseItem>(this[nameof(RoomNoises)].Address); } }
        public MissionStat MissionCompleted { get { return this[nameof(MissionCompleted)].As<MissionStat>(); } set { this["MissionCompleted"] = value; } }
        public FloodFillSettings CeilingNoise { get { return this[nameof(CeilingNoise)].As<FloodFillSettings>(); } set { this["CeilingNoise"] = value; } }
        public DetailNoise CeilingDetailNoise { get { return this[nameof(CeilingDetailNoise)].As<DetailNoise>(); } set { this["CeilingDetailNoise"] = value; } }
        public FloodFillSettings WallNoise { get { return this[nameof(WallNoise)].As<FloodFillSettings>(); } set { this["WallNoise"] = value; } }
        public DetailNoise WallDetailNoise { get { return this[nameof(WallDetailNoise)].As<DetailNoise>(); } set { this["WallDetailNoise"] = value; } }
        public FloodFillSettings FloorNoise { get { return this[nameof(FloorNoise)].As<FloodFillSettings>(); } set { this["FloorNoise"] = value; } }
        public DetailNoise FloorDetailNoise { get { return this[nameof(FloorDetailNoise)].As<DetailNoise>(); } set { this["FloorDetailNoise"] = value; } }
        public FloodFillSettings PillarNoise { get { return this[nameof(PillarNoise)].As<FloodFillSettings>(); } set { this["PillarNoise"] = value; } }
        public DetailNoise PillarDetailNoise { get { return this[nameof(PillarDetailNoise)].As<DetailNoise>(); } set { this["PillarDetailNoise"] = value; } }
        public PillarSettings PillarSettings { get { return this[nameof(PillarSettings)].As<PillarSettings>(); } set { this["PillarSettings"] = value; } }
        public UArray<TunnelSetting> TunnelSettings { get { return new UArray<TunnelSetting>(this[nameof(TunnelSettings)].Address); } }
        public FloodFillSettings TunnelCeilingNoise { get { return this[nameof(TunnelCeilingNoise)].As<FloodFillSettings>(); } set { this["TunnelCeilingNoise"] = value; } }
        public FloodFillSettings TunnelWallNoise { get { return this[nameof(TunnelWallNoise)].As<FloodFillSettings>(); } set { this["TunnelWallNoise"] = value; } }
        public FloodFillSettings TunnelFloorNoise { get { return this[nameof(TunnelFloorNoise)].As<FloodFillSettings>(); } set { this["TunnelFloorNoise"] = value; } }
        public UArray<ResourceSpawner> Resources { get { return new UArray<ResourceSpawner>(this[nameof(Resources)].Address); } }
        public UArray<BiomeEnemyEntry> Enemies { get { return new UArray<BiomeEnemyEntry>(this[nameof(Enemies)].Address); } }
        public UArray<EnemyDescriptor> BannedEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(BannedEnemies)].Address); } }
        public UArray<EnemyDescriptor> StationaryEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(StationaryEnemies)].Address); } }
        public UArray<CritterDescriptor> Critters { get { return new UArray<CritterDescriptor>(this[nameof(Critters)].Address); } }
        public Object AmbientSounds { get { return this[nameof(AmbientSounds)]; } set { this[nameof(AmbientSounds)] = value; } }
        public bool Use3DAmbient { get { return this[nameof(Use3DAmbient)].Flag; } set { this[nameof(Use3DAmbient)].Flag = value; } }
        public ReverbSettings ReverbSettings { get { return this[nameof(ReverbSettings)].As<ReverbSettings>(); } set { this["ReverbSettings"] = value; } }
        public float SmallCaveReverbVolume { get { return this[nameof(SmallCaveReverbVolume)].GetValue<float>(); } set { this[nameof(SmallCaveReverbVolume)].SetValue<float>(value); } }
        public ReverbEffect SmallCaveReverb { get { return this[nameof(SmallCaveReverb)].As<ReverbEffect>(); } set { this["SmallCaveReverb"] = value; } }
        public float MediumCaveReverbVolume { get { return this[nameof(MediumCaveReverbVolume)].GetValue<float>(); } set { this[nameof(MediumCaveReverbVolume)].SetValue<float>(value); } }
        public ReverbEffect MediumCaveReverb { get { return this[nameof(MediumCaveReverb)].As<ReverbEffect>(); } set { this["MediumCaveReverb"] = value; } }
        public float LargeCaveReverbVolume { get { return this[nameof(LargeCaveReverbVolume)].GetValue<float>(); } set { this[nameof(LargeCaveReverbVolume)].SetValue<float>(value); } }
        public ReverbEffect LargeCaveReverb { get { return this[nameof(LargeCaveReverb)].As<ReverbEffect>(); } set { this["LargeCaveReverb"] = value; } }
        public Object TunnelAmbience { get { return this[nameof(TunnelAmbience)]; } set { this[nameof(TunnelAmbience)] = value; } }
        public Object BiomeLoaderLevelSequence { get { return this[nameof(BiomeLoaderLevelSequence)]; } set { this[nameof(BiomeLoaderLevelSequence)] = value; } }
        public Object BiomeLoaderLevelName { get { return this[nameof(BiomeLoaderLevelName)]; } set { this[nameof(BiomeLoaderLevelName)] = value; } }
        public UArray<Object> Quotes { get { return new UArray<Object>(this[nameof(Quotes)].Address); } }
        public float PlanetZoneSelectionWeight { get { return this[nameof(PlanetZoneSelectionWeight)].GetValue<float>(); } set { this[nameof(PlanetZoneSelectionWeight)].SetValue<float>(value); } }
        public void StartPreload(Object WorldContext) { Invoke(nameof(StartPreload), WorldContext); }
        public TerrainMaterial GetRockMaterial() { return Invoke<TerrainMaterial>(nameof(GetRockMaterial)); }
        public Object GetPostProcessActorClass_Soft() { return Invoke<Object>(nameof(GetPostProcessActorClass_Soft)); }
        public MaterialInstance GetFlavorMaterial() { return Invoke<MaterialInstance>(nameof(GetFlavorMaterial)); }
        public TerrainMaterial GetDirtMaterial() { return Invoke<TerrainMaterial>(nameof(GetDirtMaterial)); }
        public Object GetDebrisActorSoftClass() { return Invoke<Object>(nameof(GetDebrisActorSoftClass)); }
        public Texture2D GetBiomeWorldMap() { return Invoke<Texture2D>(nameof(GetBiomeWorldMap)); }
        public Texture2D GetBiomePicture() { return Invoke<Texture2D>(nameof(GetBiomePicture)); }
        public Object GetBiomeName() { return Invoke<Object>(nameof(GetBiomeName)); }
        public Texture2D GetBiomeMissionBar() { return Invoke<Texture2D>(nameof(GetBiomeMissionBar)); }
        public Object GetBiomeMapWidget() { return Invoke<Object>(nameof(GetBiomeMapWidget)); }
        public UArray<SoftObjectPath> GetBiomeMapAssetList() { return Invoke<UArray<SoftObjectPath>>(nameof(GetBiomeMapAssetList)); }
        public Texture2D GetBiomeLargeImage() { return Invoke<Texture2D>(nameof(GetBiomeLargeImage)); }
        public int GetBiomeIndex() { return Invoke<int>(nameof(GetBiomeIndex)); }
        public Texture2D GetBiomeIcon() { return Invoke<Texture2D>(nameof(GetBiomeIcon)); }
        public Object GetBiomeAnalyticsIndex() { return Invoke<Object>(nameof(GetBiomeAnalyticsIndex)); }
        public ParticleSystem GetAtmosphericParticles() { return Invoke<ParticleSystem>(nameof(GetAtmosphericParticles)); }
        public SoundCue GetAmbientSounds() { return Invoke<SoundCue>(nameof(GetAmbientSounds)); }
    }
    public class RunningMissionBP : Object
    {
        public RunningMissionBP(nint addr) : base(addr) { }
        public void StartLogic() { Invoke(nameof(StartLogic)); }
    }
    public class BloodSugarBP : RunningMissionBP
    {
        public BloodSugarBP(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float AwardSize { get { return this[nameof(AwardSize)].GetValue<float>(); } set { this[nameof(AwardSize)].SetValue<float>(value); } }
        public GameplayTagContainer AllowedFilter { get { return this[nameof(AllowedFilter)].As<GameplayTagContainer>(); } set { this["AllowedFilter"] = value; } }
        public float HealthLossInverval { get { return this[nameof(HealthLossInverval)].GetValue<float>(); } set { this[nameof(HealthLossInverval)].SetValue<float>(value); } }
        public float HealthLossPerTick { get { return this[nameof(HealthLossPerTick)].GetValue<float>(); } set { this[nameof(HealthLossPerTick)].SetValue<float>(value); } }
        public float MinHealthAllowed { get { return this[nameof(MinHealthAllowed)].GetValue<float>(); } set { this[nameof(MinHealthAllowed)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public void Timer_Tick() { Invoke(nameof(Timer_Tick)); }
        public void OnEnemyKilled(GameplayTagContainer GameplayTags, Actor killedEnemy) { Invoke(nameof(OnEnemyKilled), GameplayTags, killedEnemy); }
    }
    public class BobbingComponent : SceneComponent
    {
        public BobbingComponent(nint addr) : base(addr) { }
        public Object OnMovedIntoSomethingEvent { get { return this[nameof(OnMovedIntoSomethingEvent)]; } set { this[nameof(OnMovedIntoSomethingEvent)] = value; } }
        public Actor OwnerActor { get { return this[nameof(OwnerActor)].As<Actor>(); } set { this["OwnerActor"] = value; } }
        public bool DoOrientationChecks { get { return this[nameof(DoOrientationChecks)].Flag; } set { this[nameof(DoOrientationChecks)].Flag = value; } }
        public float BobSpeed { get { return this[nameof(BobSpeed)].GetValue<float>(); } set { this[nameof(BobSpeed)].SetValue<float>(value); } }
        public float BobSize { get { return this[nameof(BobSize)].GetValue<float>(); } set { this[nameof(BobSize)].SetValue<float>(value); } }
        public float OrentationChecksPerSecond { get { return this[nameof(OrentationChecksPerSecond)].GetValue<float>(); } set { this[nameof(OrentationChecksPerSecond)].SetValue<float>(value); } }
        public void SetOwner(Actor AActor) { Invoke(nameof(SetOwner), AActor); }
    }
    public class BodyRotationManagerComponent : ActorComponent
    {
        public BodyRotationManagerComponent(nint addr) : base(addr) { }
        public RuntimeFloatCurve KnockBackCurve { get { return this[nameof(KnockBackCurve)].As<RuntimeFloatCurve>(); } set { this["KnockBackCurve"] = value; } }
        public Object RotationComponent { get { return this[nameof(RotationComponent)]; } set { this[nameof(RotationComponent)] = value; } }
        public float LerpSpeed { get { return this[nameof(LerpSpeed)].GetValue<float>(); } set { this[nameof(LerpSpeed)].SetValue<float>(value); } }
        public void ApplyKnockBack(float force, float Duration, Vector Direction) { Invoke(nameof(ApplyKnockBack), force, Duration, Direction); }
    }
    public class PuddleTrackerComponent : ActorComponent
    {
        public PuddleTrackerComponent(nint addr) : base(addr) { }
        public void OnPuddleDestroyed(Actor DestroyedActor) { Invoke(nameof(OnPuddleDestroyed), DestroyedActor); }
        public void GetPuddles(UArray<Actor> Locations) { Invoke(nameof(GetPuddles), Locations); }
        public void GetPuddleLocations(UArray<Vector> Locations) { Invoke(nameof(GetPuddleLocations), Locations); }
        public void AddPuddle(Actor puddle) { Invoke(nameof(AddPuddle), puddle); }
    }
    public class TentacleManagerComponent : ActorComponent
    {
        public TentacleManagerComponent(nint addr) : base(addr) { }
        public Object Tentacles { get { return this[nameof(Tentacles)]; } set { this[nameof(Tentacles)] = value; } }
        public RuntimeFloatCurve SpeedCurve { get { return this[nameof(SpeedCurve)].As<RuntimeFloatCurve>(); } set { this["SpeedCurve"] = value; } }
        public RuntimeFloatCurve ReachCurve { get { return this[nameof(ReachCurve)].As<RuntimeFloatCurve>(); } set { this["ReachCurve"] = value; } }
        public Object Param_Speed { get { return this[nameof(Param_Speed)]; } set { this[nameof(Param_Speed)] = value; } }
        public Object Param_Reach { get { return this[nameof(Param_Reach)]; } set { this[nameof(Param_Reach)] = value; } }
    }
    public class BoltActionWeapon : AmmoDrivenWeapon
    {
        public BoltActionWeapon(nint addr) : base(addr) { }
        public Object FullyFocusedEvent { get { return this[nameof(FullyFocusedEvent)]; } set { this[nameof(FullyFocusedEvent)] = value; } }
        public Object FocusLostEvent { get { return this[nameof(FocusLostEvent)]; } set { this[nameof(FocusLostEvent)] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public HitscanBaseComponent HitscanComponent { get { return this[nameof(HitscanComponent)].As<HitscanBaseComponent>(); } set { this["HitscanComponent"] = value; } }
        public Object FocusedHitSTE { get { return this[nameof(FocusedHitSTE)]; } set { this[nameof(FocusedHitSTE)] = value; } }
        public bool RequireWeakspotForFocusedHitSTE { get { return this[nameof(RequireWeakspotForFocusedHitSTE)].Flag; } set { this[nameof(RequireWeakspotForFocusedHitSTE)].Flag = value; } }
        public bool IsNoGravityOnFocusEnabled { get { return this[nameof(IsNoGravityOnFocusEnabled)].Flag; } set { this[nameof(IsNoGravityOnFocusEnabled)].Flag = value; } }
        public float NoGravityOnFocusDuration { get { return this[nameof(NoGravityOnFocusDuration)].GetValue<float>(); } set { this[nameof(NoGravityOnFocusDuration)].SetValue<float>(value); } }
        public float NoGravityFocusFallFriction { get { return this[nameof(NoGravityFocusFallFriction)].GetValue<float>(); } set { this[nameof(NoGravityFocusFallFriction)].SetValue<float>(value); } }
        public float NoGravityFocusGravityScale { get { return this[nameof(NoGravityFocusGravityScale)].GetValue<float>(); } set { this[nameof(NoGravityFocusGravityScale)].SetValue<float>(value); } }
        public float ZoomSpreadAmount { get { return this[nameof(ZoomSpreadAmount)].GetValue<float>(); } set { this[nameof(ZoomSpreadAmount)].SetValue<float>(value); } }
        public float ZoomMinSpreadWhileMoving { get { return this[nameof(ZoomMinSpreadWhileMoving)].GetValue<float>(); } set { this[nameof(ZoomMinSpreadWhileMoving)].SetValue<float>(value); } }
        public float ChargeSpeed { get { return this[nameof(ChargeSpeed)].GetValue<float>(); } set { this[nameof(ChargeSpeed)].SetValue<float>(value); } }
        public float ChargeAmmoCost { get { return this[nameof(ChargeAmmoCost)].GetValue<float>(); } set { this[nameof(ChargeAmmoCost)].SetValue<float>(value); } }
        public float ChargeRecoilMult { get { return this[nameof(ChargeRecoilMult)].GetValue<float>(); } set { this[nameof(ChargeRecoilMult)].SetValue<float>(value); } }
        public SoundCue ZoomedInAudio { get { return this[nameof(ZoomedInAudio)].As<SoundCue>(); } set { this["ZoomedInAudio"] = value; } }
        public ParticleSystem ChargedShotTrailParticles { get { return this[nameof(ChargedShotTrailParticles)].As<ParticleSystem>(); } set { this["ChargedShotTrailParticles"] = value; } }
        public TracerData ChargedShotTracer { get { return this[nameof(ChargedShotTracer)].As<TracerData>(); } set { this["ChargedShotTracer"] = value; } }
        public SoundCue ButtonDownFireSound { get { return this[nameof(ButtonDownFireSound)].As<SoundCue>(); } set { this["ButtonDownFireSound"] = value; } }
        public SoundCue ChargedShotFireSound { get { return this[nameof(ChargedShotFireSound)].As<SoundCue>(); } set { this["ChargedShotFireSound"] = value; } }
        public float ChargedFoVChange { get { return this[nameof(ChargedFoVChange)].GetValue<float>(); } set { this[nameof(ChargedFoVChange)].SetValue<float>(value); } }
        public float ChargedFoVFadeSpeed { get { return this[nameof(ChargedFoVFadeSpeed)].GetValue<float>(); } set { this[nameof(ChargedFoVFadeSpeed)].SetValue<float>(value); } }
        public float MinCharge { get { return this[nameof(MinCharge)].GetValue<float>(); } set { this[nameof(MinCharge)].SetValue<float>(value); } }
        public float SlowMovementAtCharge { get { return this[nameof(SlowMovementAtCharge)].GetValue<float>(); } set { this[nameof(SlowMovementAtCharge)].SetValue<float>(value); } }
        public float FullChargeDamageBonus { get { return this[nameof(FullChargeDamageBonus)].GetValue<float>(); } set { this[nameof(FullChargeDamageBonus)].SetValue<float>(value); } }
        public float AimedShotStaggerChance { get { return this[nameof(AimedShotStaggerChance)].GetValue<float>(); } set { this[nameof(AimedShotStaggerChance)].SetValue<float>(value); } }
        public float AimedShotWeakpointDamageBonusMultiplier { get { return this[nameof(AimedShotWeakpointDamageBonusMultiplier)].GetValue<float>(); } set { this[nameof(AimedShotWeakpointDamageBonusMultiplier)].SetValue<float>(value); } }
        public float AimedWeakspotKilLRange { get { return this[nameof(AimedWeakspotKilLRange)].GetValue<float>(); } set { this[nameof(AimedWeakspotKilLRange)].SetValue<float>(value); } }
        public float TargetKilledReloadTimeBoost { get { return this[nameof(TargetKilledReloadTimeBoost)].GetValue<float>(); } set { this[nameof(TargetKilledReloadTimeBoost)].SetValue<float>(value); } }
        public float TargetKilledReloadTimeBoostDuration { get { return this[nameof(TargetKilledReloadTimeBoostDuration)].GetValue<float>(); } set { this[nameof(TargetKilledReloadTimeBoostDuration)].SetValue<float>(value); } }
        public bool LastShotWasAimed { get { return this[nameof(LastShotWasAimed)].Flag; } set { this[nameof(LastShotWasAimed)].Flag = value; } }
        public bool IsMovementSlowed { get { return this[nameof(IsMovementSlowed)].Flag; } set { this[nameof(IsMovementSlowed)].Flag = value; } }
        public bool ChargeAffectsDamage { get { return this[nameof(ChargeAffectsDamage)].Flag; } set { this[nameof(ChargeAffectsDamage)].Flag = value; } }
        public bool Charging { get { return this[nameof(Charging)].Flag; } set { this[nameof(Charging)].Flag = value; } }
        public float ChargeProgress { get { return this[nameof(ChargeProgress)].GetValue<float>(); } set { this[nameof(ChargeProgress)].SetValue<float>(value); } }
        public float RateOfFireHipFireModifier { get { return this[nameof(RateOfFireHipFireModifier)].GetValue<float>(); } set { this[nameof(RateOfFireHipFireModifier)].SetValue<float>(value); } }
        public float ChargeSpeedModifier { get { return this[nameof(ChargeSpeedModifier)].GetValue<float>(); } set { this[nameof(ChargeSpeedModifier)].SetValue<float>(value); } }
        public float SuccesfullHipFireStackDuration { get { return this[nameof(SuccesfullHipFireStackDuration)].GetValue<float>(); } set { this[nameof(SuccesfullHipFireStackDuration)].SetValue<float>(value); } }
        public float SuccesfullAimedStackDuration { get { return this[nameof(SuccesfullAimedStackDuration)].GetValue<float>(); } set { this[nameof(SuccesfullAimedStackDuration)].SetValue<float>(value); } }
        public void SetOverheated(bool isOverheated) { Invoke(nameof(SetOverheated), isOverheated); }
        public void Server_SetIsMovementSlowed(bool bisMovementSlowed) { Invoke(nameof(Server_SetIsMovementSlowed), bisMovementSlowed); }
        public void Server_SetIsLatestShotFocused(bool bisShotFocused) { Invoke(nameof(Server_SetIsLatestShotFocused), bisShotFocused); }
        public void Server_SetIsChargingShot(bool bisCharging) { Invoke(nameof(Server_SetIsChargingShot), bisCharging); }
        public void OnTimerElapsed() { Invoke(nameof(OnTimerElapsed)); }
        public void OnTargetKilled(Actor Target, FSDPhysicalMaterial PhysicalMaterial, bool wasDirectHit) { Invoke(nameof(OnTargetKilled), Target, PhysicalMaterial, wasDirectHit); }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void OnShotPowerSet() { Invoke(nameof(OnShotPowerSet)); }
        public void OnMovementSlowed(bool isSlowed) { Invoke(nameof(OnMovementSlowed), isSlowed); }
        public void Client_OnTargetKilled(bool BoostReloadTime) { Invoke(nameof(Client_OnTargetKilled), BoostReloadTime); }
        public void Client_OnTargetDamaged(float amount) { Invoke(nameof(Client_OnTargetDamaged), amount); }
    }
    public class BoltActionWeaponAnimInstance : AnimInstance
    {
        public BoltActionWeaponAnimInstance(nint addr) : base(addr) { }
    }
    public class Bomber : AFlyingBug
    {
        public Bomber(nint addr) : base(addr) { }
        public AudioComponent GooSoundComponent { get { return this[nameof(GooSoundComponent)].As<AudioComponent>(); } set { this["GooSoundComponent"] = value; } }
        public ParticleSystemComponent AcidEmitterLeft { get { return this[nameof(AcidEmitterLeft)].As<ParticleSystemComponent>(); } set { this["AcidEmitterLeft"] = value; } }
        public ParticleSystemComponent AcidEmitterRight { get { return this[nameof(AcidEmitterRight)].As<ParticleSystemComponent>(); } set { this["AcidEmitterRight"] = value; } }
        public Object AcidProjectile { get { return this[nameof(AcidProjectile)]; } set { this[nameof(AcidProjectile)] = value; } }
        public FXSystemAsset deathParticles { get { return this[nameof(deathParticles)].As<FXSystemAsset>(); } set { this["deathParticles"] = value; } }
        public SoundBase deathSound { get { return this[nameof(deathSound)].As<SoundBase>(); } set { this["deathSound"] = value; } }
        public SoundBase DeathPanicSound { get { return this[nameof(DeathPanicSound)].As<SoundBase>(); } set { this["DeathPanicSound"] = value; } }
        public ParticleSystem BleedParticles { get { return this[nameof(BleedParticles)].As<ParticleSystem>(); } set { this["BleedParticles"] = value; } }
        public SoundBase BladderDestroyedNoise { get { return this[nameof(BladderDestroyedNoise)].As<SoundBase>(); } set { this["BladderDestroyedNoise"] = value; } }
        public Object BleedParticlesComponent { get { return this[nameof(BleedParticlesComponent)]; } set { this[nameof(BleedParticlesComponent)] = value; } }
        public Object PanicAudioComponent { get { return this[nameof(PanicAudioComponent)]; } set { this[nameof(PanicAudioComponent)] = value; } }
        public float RagdollForceModifier { get { return this[nameof(RagdollForceModifier)].GetValue<float>(); } set { this[nameof(RagdollForceModifier)].SetValue<float>(value); } }
        public float DeathYRotationSpeed { get { return this[nameof(DeathYRotationSpeed)].GetValue<float>(); } set { this[nameof(DeathYRotationSpeed)].SetValue<float>(value); } }
        public float DeathXRotationSpeed { get { return this[nameof(DeathXRotationSpeed)].GetValue<float>(); } set { this[nameof(DeathXRotationSpeed)].SetValue<float>(value); } }
        public float SearchRange { get { return this[nameof(SearchRange)].GetValue<float>(); } set { this[nameof(SearchRange)].SetValue<float>(value); } }
        public float NewPointMax { get { return this[nameof(NewPointMax)].GetValue<float>(); } set { this[nameof(NewPointMax)].SetValue<float>(value); } }
        public float NewPointMin { get { return this[nameof(NewPointMin)].GetValue<float>(); } set { this[nameof(NewPointMin)].SetValue<float>(value); } }
        public float DeathSpeed { get { return this[nameof(DeathSpeed)].GetValue<float>(); } set { this[nameof(DeathSpeed)].SetValue<float>(value); } }
        public float DeathAcceleration { get { return this[nameof(DeathAcceleration)].GetValue<float>(); } set { this[nameof(DeathAcceleration)].SetValue<float>(value); } }
        public float AcidRate { get { return this[nameof(AcidRate)].GetValue<float>(); } set { this[nameof(AcidRate)].SetValue<float>(value); } }
        public float PostDeathAcidTime { get { return this[nameof(PostDeathAcidTime)].GetValue<float>(); } set { this[nameof(PostDeathAcidTime)].SetValue<float>(value); } }
        public bool HasDied { get { return this[nameof(HasDied)].Flag; } set { this[nameof(HasDied)].Flag = value; } }
        public bool IsRightDestroyed { get { return this[nameof(IsRightDestroyed)].Flag; } set { this[nameof(IsRightDestroyed)].Flag = value; } }
        public bool IsLeftDestroyed { get { return this[nameof(IsLeftDestroyed)].Flag; } set { this[nameof(IsLeftDestroyed)].Flag = value; } }
        public bool dropAcid { get { return this[nameof(dropAcid)].Flag; } set { this[nameof(dropAcid)].Flag = value; } }
        public bool NoDeathSpiral { get { return this[nameof(NoDeathSpiral)].Flag; } set { this[nameof(NoDeathSpiral)].Flag = value; } }
        public void StopSpinAndDie() { Invoke(nameof(StopSpinAndDie)); }
        public void SetDropAcid(bool dropAcid) { Invoke(nameof(SetDropAcid), dropAcid); }
        public void OnStartDeathPanic() { Invoke(nameof(OnStartDeathPanic)); }
        public void OnRep_DropAcid() { Invoke(nameof(OnRep_DropAcid)); }
        public void OnRep_Death() { Invoke(nameof(OnRep_Death)); }
        public void OnRagdollHitGround(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnRagdollHitGround), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
        public void OnBladderDamage(float amount) { Invoke(nameof(OnBladderDamage), amount); }
        public void OnArmorDestroyed(Object Name) { Invoke(nameof(OnArmorDestroyed), Name); }
        public void HideMesh() { Invoke(nameof(HideMesh)); }
        public bool GetDropAcid() { return Invoke<bool>(nameof(GetDropAcid)); }
        public bool AreBladdersDestroyed() { return Invoke<bool>(nameof(AreBladdersDestroyed)); }
    }
    public class BomberAnimInstance : FlyingBugAnimInstance
    {
        public BomberAnimInstance(nint addr) : base(addr) { }
        public bool ShouldBomb { get { return this[nameof(ShouldBomb)].Flag; } set { this[nameof(ShouldBomb)].Flag = value; } }
        public bool ShouldSpiral { get { return this[nameof(ShouldSpiral)].Flag; } set { this[nameof(ShouldSpiral)].Flag = value; } }
        public bool IsBombing { get { return this[nameof(IsBombing)].Flag; } set { this[nameof(IsBombing)].Flag = value; } }
        public bool IsSpiraling { get { return this[nameof(IsSpiraling)].Flag; } set { this[nameof(IsSpiraling)].Flag = value; } }
    }
    public class BoolUserSettingAsset : DataAsset
    {
        public BoolUserSettingAsset(nint addr) : base(addr) { }
        public Object SettingDisplayTitle { get { return this[nameof(SettingDisplayTitle)]; } set { this[nameof(SettingDisplayTitle)] = value; } }
        public Object SettingID { get { return this[nameof(SettingID)]; } set { this[nameof(SettingID)] = value; } }
        public bool SettingDefaultValue { get { return this[nameof(SettingDefaultValue)].Flag; } set { this[nameof(SettingDefaultValue)].Flag = value; } }
        public void SetValue(bool InValue) { Invoke(nameof(SetValue), InValue); }
        public bool GetValue() { return Invoke<bool>(nameof(GetValue)); }
    }
    public class Bosco : DeepPathfinderCharacter
    {
        public Bosco(nint addr) : base(addr) { }
        public HealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponent>(); } set { this["HealthComponent"] = value; } }
        public BoscoAbillityComponent PrimaryAbility { get { return this[nameof(PrimaryAbility)].As<BoscoAbillityComponent>(); } set { this["PrimaryAbility"] = value; } }
        public BoscoAbillityComponent SecondaryAbility { get { return this[nameof(SecondaryAbility)].As<BoscoAbillityComponent>(); } set { this["SecondaryAbility"] = value; } }
        public UArray<BoscoAbillityComponent> Abilities { get { return new UArray<BoscoAbillityComponent>(this[nameof(Abilities)].Address); } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public PawnSensingComponent Senses { get { return this[nameof(Senses)].As<PawnSensingComponent>(); } set { this["Senses"] = value; } }
        public DroneMiningToolBase MiningTool { get { return this[nameof(MiningTool)].As<DroneMiningToolBase>(); } set { this["MiningTool"] = value; } }
        public DroneMeleeTool MeleeTool { get { return this[nameof(MeleeTool)].As<DroneMeleeTool>(); } set { this["MeleeTool"] = value; } }
        public BobbingComponent BobbingComponent { get { return this[nameof(BobbingComponent)].As<BobbingComponent>(); } set { this["BobbingComponent"] = value; } }
        public SkeletalMeshComponent BoscoMesh { get { return this[nameof(BoscoMesh)].As<SkeletalMeshComponent>(); } set { this["BoscoMesh"] = value; } }
        public HitscanComponent DroneHitScan { get { return this[nameof(DroneHitScan)].As<HitscanComponent>(); } set { this["DroneHitScan"] = value; } }
        public SpotLightComponent SpotLightComponent { get { return this[nameof(SpotLightComponent)].As<SpotLightComponent>(); } set { this["SpotLightComponent"] = value; } }
        public PointLightComponent PointLightComponent { get { return this[nameof(PointLightComponent)].As<PointLightComponent>(); } set { this["PointLightComponent"] = value; } }
        public ParticleSystemComponent LTrail { get { return this[nameof(LTrail)].As<ParticleSystemComponent>(); } set { this["LTrail"] = value; } }
        public ParticleSystemComponent RTrail { get { return this[nameof(RTrail)].As<ParticleSystemComponent>(); } set { this["RTrail"] = value; } }
        public AudioComponent MomentumSound { get { return this[nameof(MomentumSound)].As<AudioComponent>(); } set { this["MomentumSound"] = value; } }
        public DialogDataAsset DefendDrilldozerShout { get { return this[nameof(DefendDrilldozerShout)].As<DialogDataAsset>(); } set { this["DefendDrilldozerShout"] = value; } }
        public DialogDataAsset DefendGenericShout { get { return this[nameof(DefendGenericShout)].As<DialogDataAsset>(); } set { this["DefendGenericShout"] = value; } }
        public DialogDataAsset MineOrderShout { get { return this[nameof(MineOrderShout)].As<DialogDataAsset>(); } set { this["MineOrderShout"] = value; } }
        public DialogDataAsset KillOrderShout { get { return this[nameof(KillOrderShout)].As<DialogDataAsset>(); } set { this["KillOrderShout"] = value; } }
        public DialogDataAsset GoToOrderShout { get { return this[nameof(GoToOrderShout)].As<DialogDataAsset>(); } set { this["GoToOrderShout"] = value; } }
        public DialogDataAsset ReviveOrderShout { get { return this[nameof(ReviveOrderShout)].As<DialogDataAsset>(); } set { this["ReviveOrderShout"] = value; } }
        public DialogDataAsset PickupGemShout { get { return this[nameof(PickupGemShout)].As<DialogDataAsset>(); } set { this["PickupGemShout"] = value; } }
        public DialogDataAsset ReviveThankShout { get { return this[nameof(ReviveThankShout)].As<DialogDataAsset>(); } set { this["ReviveThankShout"] = value; } }
        public DialogDataAsset GeneralCallShout { get { return this[nameof(GeneralCallShout)].As<DialogDataAsset>(); } set { this["GeneralCallShout"] = value; } }
        public DialogDataAsset RiftCrystalShout { get { return this[nameof(RiftCrystalShout)].As<DialogDataAsset>(); } set { this["RiftCrystalShout"] = value; } }
        public DialogDataAsset VacuumShout { get { return this[nameof(VacuumShout)].As<DialogDataAsset>(); } set { this["VacuumShout"] = value; } }
        public SoundBase MineResponse { get { return this[nameof(MineResponse)].As<SoundBase>(); } set { this["MineResponse"] = value; } }
        public SoundBase CombatResponse { get { return this[nameof(CombatResponse)].As<SoundBase>(); } set { this["CombatResponse"] = value; } }
        public SoundBase LightResponse { get { return this[nameof(LightResponse)].As<SoundBase>(); } set { this["LightResponse"] = value; } }
        public SoundBase ReviveResponse { get { return this[nameof(ReviveResponse)].As<SoundBase>(); } set { this["ReviveResponse"] = value; } }
        public SoundBase AbillityResponse { get { return this[nameof(AbillityResponse)].As<SoundBase>(); } set { this["AbillityResponse"] = value; } }
        public SoundBase CurrentResponse { get { return this[nameof(CurrentResponse)].As<SoundBase>(); } set { this["CurrentResponse"] = value; } }
        public float ResponseTime { get { return this[nameof(ResponseTime)].GetValue<float>(); } set { this[nameof(ResponseTime)].SetValue<float>(value); } }
        public Object OnReviveused { get { return this[nameof(OnReviveused)]; } set { this[nameof(OnReviveused)] = value; } }
        public bool ShouldSelfDestructOnMultiplePlayers { get { return this[nameof(ShouldSelfDestructOnMultiplePlayers)].Flag; } set { this[nameof(ShouldSelfDestructOnMultiplePlayers)].Flag = value; } }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public GameplayTagContainer LosMatchTags { get { return this[nameof(LosMatchTags)].As<GameplayTagContainer>(); } set { this["LosMatchTags"] = value; } }
        public float SeeTargetTime { get { return this[nameof(SeeTargetTime)].GetValue<float>(); } set { this[nameof(SeeTargetTime)].SetValue<float>(value); } }
        public SoundBase AbillityErrorSound { get { return this[nameof(AbillityErrorSound)].As<SoundBase>(); } set { this["AbillityErrorSound"] = value; } }
        public float INcreasedMiningArea { get { return this[nameof(INcreasedMiningArea)].GetValue<float>(); } set { this[nameof(INcreasedMiningArea)].SetValue<float>(value); } }
        public float TimeToResetMiningBoost { get { return this[nameof(TimeToResetMiningBoost)].GetValue<float>(); } set { this[nameof(TimeToResetMiningBoost)].SetValue<float>(value); } }
        public float MiningBoosMultiplier { get { return this[nameof(MiningBoosMultiplier)].GetValue<float>(); } set { this[nameof(MiningBoosMultiplier)].SetValue<float>(value); } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public BoscoProjectileAbillity RocketAbillity { get { return this[nameof(RocketAbillity)].As<BoscoProjectileAbillity>(); } set { this["RocketAbillity"] = value; } }
        public BoscoProjectileAbillity CryoGrenadeAbillity { get { return this[nameof(CryoGrenadeAbillity)].As<BoscoProjectileAbillity>(); } set { this["CryoGrenadeAbillity"] = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public UpgradableBoscoComponent Upgradable { get { return this[nameof(Upgradable)].As<UpgradableBoscoComponent>(); } set { this["Upgradable"] = value; } }
        public AnimSequenceBase SaluteAnimation { get { return this[nameof(SaluteAnimation)].As<AnimSequenceBase>(); } set { this["SaluteAnimation"] = value; } }
        public AnimSequenceBase PickupGemAnimation { get { return this[nameof(PickupGemAnimation)].As<AnimSequenceBase>(); } set { this["PickupGemAnimation"] = value; } }
        public AnimSequenceBase DropGemAnimation { get { return this[nameof(DropGemAnimation)].As<AnimSequenceBase>(); } set { this["DropGemAnimation"] = value; } }
        public UArray<AnimSequenceBase> HitReaction { get { return new UArray<AnimSequenceBase>(this[nameof(HitReaction)].Address); } }
        public float SaluteDuration { get { return this[nameof(SaluteDuration)].GetValue<float>(); } set { this[nameof(SaluteDuration)].SetValue<float>(value); } }
        public DroneSkinnableComponent Skinnable { get { return this[nameof(Skinnable)].As<DroneSkinnableComponent>(); } set { this["Skinnable"] = value; } }
        public UArray<BoscoLightSetting> LightSettings { get { return new UArray<BoscoLightSetting>(this[nameof(LightSettings)].Address); } }
        public int TargetLightSetting { get { return this[nameof(TargetLightSetting)].GetValue<int>(); } set { this[nameof(TargetLightSetting)].SetValue<int>(value); } }
        public UArray<BoscoAbillity> CombatAbillities { get { return new UArray<BoscoAbillity>(this[nameof(CombatAbillities)].Address); } }
        public Actor RotateTarget { get { return this[nameof(RotateTarget)].As<Actor>(); } set { this["RotateTarget"] = value; } }
        public Vector LookAtLocation { get { return this[nameof(LookAtLocation)].As<Vector>(); } set { this["LookAtLocation"] = value; } }
        public SoundCue ShootSound { get { return this[nameof(ShootSound)].As<SoundCue>(); } set { this["ShootSound"] = value; } }
        public float ShootSoundFadeout { get { return this[nameof(ShootSoundFadeout)].GetValue<float>(); } set { this[nameof(ShootSoundFadeout)].SetValue<float>(value); } }
        public SoundCue ShootSoundTail { get { return this[nameof(ShootSoundTail)].As<SoundCue>(); } set { this["ShootSoundTail"] = value; } }
        public AudioComponent ShootSoundInstance { get { return this[nameof(ShootSoundInstance)].As<AudioComponent>(); } set { this["ShootSoundInstance"] = value; } }
        public ParticleSystem MuzzleEffect { get { return this[nameof(MuzzleEffect)].As<ParticleSystem>(); } set { this["MuzzleEffect"] = value; } }
        public ParticleSystem TracerEffect { get { return this[nameof(TracerEffect)].As<ParticleSystem>(); } set { this["TracerEffect"] = value; } }
        public float FireRate { get { return this[nameof(FireRate)].GetValue<float>(); } set { this[nameof(FireRate)].SetValue<float>(value); } }
        public int MinShotsInBurst { get { return this[nameof(MinShotsInBurst)].GetValue<int>(); } set { this[nameof(MinShotsInBurst)].SetValue<int>(value); } }
        public int MaxShotsInBurst { get { return this[nameof(MaxShotsInBurst)].GetValue<int>(); } set { this[nameof(MaxShotsInBurst)].SetValue<int>(value); } }
        public float MaxRandomBurstCooldown { get { return this[nameof(MaxRandomBurstCooldown)].GetValue<float>(); } set { this[nameof(MaxRandomBurstCooldown)].SetValue<float>(value); } }
        public float MinRandomBurstCooldown { get { return this[nameof(MinRandomBurstCooldown)].GetValue<float>(); } set { this[nameof(MinRandomBurstCooldown)].SetValue<float>(value); } }
        public float MaxFiringAngle { get { return this[nameof(MaxFiringAngle)].GetValue<float>(); } set { this[nameof(MaxFiringAngle)].SetValue<float>(value); } }
        public float MaxEngagementRange { get { return this[nameof(MaxEngagementRange)].GetValue<float>(); } set { this[nameof(MaxEngagementRange)].SetValue<float>(value); } }
        public float MinTracerDistance { get { return this[nameof(MinTracerDistance)].GetValue<float>(); } set { this[nameof(MinTracerDistance)].SetValue<float>(value); } }
        public float TracerSpeed { get { return this[nameof(TracerSpeed)].GetValue<float>(); } set { this[nameof(TracerSpeed)].SetValue<float>(value); } }
        public SoundBase ReviveSirens { get { return this[nameof(ReviveSirens)].As<SoundBase>(); } set { this["ReviveSirens"] = value; } }
        public Object ReviveSirensComponent { get { return this[nameof(ReviveSirensComponent)]; } set { this[nameof(ReviveSirensComponent)] = value; } }
        public float DistanceToFacePlayer { get { return this[nameof(DistanceToFacePlayer)].GetValue<float>(); } set { this[nameof(DistanceToFacePlayer)].SetValue<float>(value); } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public float PrepareToMineRange { get { return this[nameof(PrepareToMineRange)].GetValue<float>(); } set { this[nameof(PrepareToMineRange)].SetValue<float>(value); } }
        public float MiningRange { get { return this[nameof(MiningRange)].GetValue<float>(); } set { this[nameof(MiningRange)].SetValue<float>(value); } }
        public int MaxRevives { get { return this[nameof(MaxRevives)].GetValue<int>(); } set { this[nameof(MaxRevives)].SetValue<int>(value); } }
        public bool IsFiring { get { return this[nameof(IsFiring)].Flag; } set { this[nameof(IsFiring)].Flag = value; } }
        public bool IsInRangeToMine { get { return this[nameof(IsInRangeToMine)].Flag; } set { this[nameof(IsInRangeToMine)].Flag = value; } }
        public bool IsPreparedToMine { get { return this[nameof(IsPreparedToMine)].Flag; } set { this[nameof(IsPreparedToMine)].Flag = value; } }
        public bool IsMining { get { return this[nameof(IsMining)].Flag; } set { this[nameof(IsMining)].Flag = value; } }
        public bool IsMelee { get { return this[nameof(IsMelee)].Flag; } set { this[nameof(IsMelee)].Flag = value; } }
        public bool IsReviving { get { return this[nameof(IsReviving)].Flag; } set { this[nameof(IsReviving)].Flag = value; } }
        public bool IsRotateMode { get { return this[nameof(IsRotateMode)].Flag; } set { this[nameof(IsRotateMode)].Flag = value; } }
        public BoscoController DroneController { get { return this[nameof(DroneController)].As<BoscoController>(); } set { this["DroneController"] = value; } }
        public EDroneAIState CurrentState { get { return (EDroneAIState)this[nameof(CurrentState)].GetValue<int>(); } set { this[nameof(CurrentState)].SetValue<int>((int)value); } }
        public void UsePlayerActivatedAbillity(EAbilityIndex Index, Actor aTarget, Vector aLocation) { Invoke(nameof(UsePlayerActivatedAbillity), Index, aTarget, aLocation); }
        public void UseABillity() { Invoke(nameof(UseABillity)); }
        public void StopShootingSound() { Invoke(nameof(StopShootingSound)); }
        public void StateChanged(EDroneAIState aCurrentState) { Invoke(nameof(StateChanged), aCurrentState); }
        public void StartSelfDestruct() { Invoke(nameof(StartSelfDestruct)); }
        public void SetIsReviving(bool aIsReviving) { Invoke(nameof(SetIsReviving), aIsReviving); }
        public void SetIsRepairing(bool isRepairing) { Invoke(nameof(SetIsRepairing), isRepairing); }
        public void SelfDestruct() { Invoke(nameof(SelfDestruct)); }
        public void ReviveCounterChanged(int remainingCharges) { Invoke(nameof(ReviveCounterChanged), remainingCharges); }
        public void Respond() { Invoke(nameof(Respond)); }
        public void PlaySalute() { Invoke(nameof(PlaySalute)); }
        public void OnWeaponFired(Vector Location) { Invoke(nameof(OnWeaponFired), Location); }
        public void OnTargetBurrowChange(bool burrowed) { Invoke(nameof(OnTargetBurrowChange), burrowed); }
        public void OnRep_State(EDroneAIState prevState) { Invoke(nameof(OnRep_State), prevState); }
        public void OnReadyToShoot() { Invoke(nameof(OnReadyToShoot)); }
        public void OnNotReadyToShoot() { Invoke(nameof(OnNotReadyToShoot)); }
        public void OnHit(float amount, float BaseAmount, DamageData DamageData) { Invoke(nameof(OnHit), amount, BaseAmount, DamageData); }
        public void OnGrabbedGem() { Invoke(nameof(OnGrabbedGem)); }
        public void MineEffects(TerrainMaterial aTerrainMaterial, Vector_NetQuantize aLocation, Rotator aRotation) { Invoke(nameof(MineEffects), aTerrainMaterial, aLocation, aRotation); }
        public UpgradableBoscoComponent GetUpgradeComponent() { return Invoke<UpgradableBoscoComponent>(nameof(GetUpgradeComponent)); }
        public int GetReviveCharges() { return Invoke<int>(nameof(GetReviveCharges)); }
        public BoscoAbillityComponent GetPlayerAbillity() { return Invoke<BoscoAbillityComponent>(nameof(GetPlayerAbillity)); }
        public EDroneAIState GetCurrentState() { return Invoke<EDroneAIState>(nameof(GetCurrentState)); }
        public bool GetCarryInterrupted() { return Invoke<bool>(nameof(GetCarryInterrupted)); }
        public bool DoPickupGemAnimation() { return Invoke<bool>(nameof(DoPickupGemAnimation)); }
        public void All_OnSelfDestruct() { Invoke(nameof(All_OnSelfDestruct)); }
    }
    public class BoscoAnimInstance : AnimInstance
    {
        public BoscoAnimInstance(nint addr) : base(addr) { }
        public Object OnWeaponsReady { get { return this[nameof(OnWeaponsReady)]; } set { this[nameof(OnWeaponsReady)] = value; } }
        public Object OnWeaponsNotReady { get { return this[nameof(OnWeaponsNotReady)]; } set { this[nameof(OnWeaponsNotReady)] = value; } }
        public float DigAnimPlayRate { get { return this[nameof(DigAnimPlayRate)].GetValue<float>(); } set { this[nameof(DigAnimPlayRate)].SetValue<float>(value); } }
        public EDroneAIState CurrentState { get { return (EDroneAIState)this[nameof(CurrentState)].GetValue<int>(); } set { this[nameof(CurrentState)].SetValue<int>((int)value); } }
        public bool IsReadyToMine { get { return this[nameof(IsReadyToMine)].Flag; } set { this[nameof(IsReadyToMine)].Flag = value; } }
        public bool IsMining { get { return this[nameof(IsMining)].Flag; } set { this[nameof(IsMining)].Flag = value; } }
        public bool IsMelee { get { return this[nameof(IsMelee)].Flag; } set { this[nameof(IsMelee)].Flag = value; } }
        public bool IsFiring { get { return this[nameof(IsFiring)].Flag; } set { this[nameof(IsFiring)].Flag = value; } }
        public bool IsReviving { get { return this[nameof(IsReviving)].Flag; } set { this[nameof(IsReviving)].Flag = value; } }
        public bool IsCarryingGem { get { return this[nameof(IsCarryingGem)].Flag; } set { this[nameof(IsCarryingGem)].Flag = value; } }
    }
    public class BoscoWeaponsFoldedOutNotify : AnimNotify
    {
        public BoscoWeaponsFoldedOutNotify(nint addr) : base(addr) { }
    }
    public class BoscoWeaponsFoldedInNotify : AnimNotify
    {
        public BoscoWeaponsFoldedInNotify(nint addr) : base(addr) { }
    }
    public class AbilityExitStrategy : Object
    {
        public AbilityExitStrategy(nint addr) : base(addr) { }
    }
    public class StandardExitStrategy : AbilityExitStrategy
    {
        public StandardExitStrategy(nint addr) : base(addr) { }
    }
    public class ChaseIfTargetSurvived : StandardExitStrategy
    {
        public ChaseIfTargetSurvived(nint addr) : base(addr) { }
    }
    public class KeepCleaningStrategy : StandardExitStrategy
    {
        public KeepCleaningStrategy(nint addr) : base(addr) { }
    }
    public class BoscoAbillity : DataAsset
    {
        public BoscoAbillity(nint addr) : base(addr) { }
        public Object AbillityName { get { return this[nameof(AbillityName)]; } set { this[nameof(AbillityName)] = value; } }
        public AnimSequenceBase AbillityAnimation { get { return this[nameof(AbillityAnimation)].As<AnimSequenceBase>(); } set { this["AbillityAnimation"] = value; } }
        public DialogDataAsset VoiceOnUse { get { return this[nameof(VoiceOnUse)].As<DialogDataAsset>(); } set { this["VoiceOnUse"] = value; } }
        public EBoscoAbillityTargetPreference TargetType { get { return (EBoscoAbillityTargetPreference)this[nameof(TargetType)].GetValue<int>(); } set { this[nameof(TargetType)].SetValue<int>((int)value); } }
        public AbilityExitStrategy ExitStrategy { get { return this[nameof(ExitStrategy)].As<AbilityExitStrategy>(); } set { this["ExitStrategy"] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public float WindUp { get { return this[nameof(WindUp)].GetValue<float>(); } set { this[nameof(WindUp)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public float RechargeTime { get { return this[nameof(RechargeTime)].GetValue<float>(); } set { this[nameof(RechargeTime)].SetValue<float>(value); } }
        public int MaxCharges { get { return this[nameof(MaxCharges)].GetValue<int>(); } set { this[nameof(MaxCharges)].SetValue<int>(value); } }
        public bool TargetActorIfValid { get { return this[nameof(TargetActorIfValid)].Flag; } set { this[nameof(TargetActorIfValid)].Flag = value; } }
        public bool RotateTowardsTarget { get { return this[nameof(RotateTowardsTarget)].Flag; } set { this[nameof(RotateTowardsTarget)].Flag = value; } }
    }
    public class BoscoSpawnActorAbillity : BoscoAbillity
    {
        public BoscoSpawnActorAbillity(nint addr) : base(addr) { }
        public Object SpawnedActorClass { get { return this[nameof(SpawnedActorClass)]; } set { this[nameof(SpawnedActorClass)] = value; } }
    }
    public class BoscoProjectileAbillity : BoscoAbillity
    {
        public BoscoProjectileAbillity(nint addr) : base(addr) { }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
    }
    public class BoscoAbillityComponent : ActorComponent
    {
        public BoscoAbillityComponent(nint addr) : base(addr) { }
        public Object OnAbillityChargeProgress { get { return this[nameof(OnAbillityChargeProgress)]; } set { this[nameof(OnAbillityChargeProgress)] = value; } }
        public Object OnAbillityChargeUsed { get { return this[nameof(OnAbillityChargeUsed)]; } set { this[nameof(OnAbillityChargeUsed)] = value; } }
        public Object OnAbilityDataUpdated { get { return this[nameof(OnAbilityDataUpdated)]; } set { this[nameof(OnAbilityDataUpdated)] = value; } }
        public BoscoAbilityTarget Target { get { return this[nameof(Target)].As<BoscoAbilityTarget>(); } set { this["Target"] = value; } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public Object StreamClass { get { return this[nameof(StreamClass)]; } set { this[nameof(StreamClass)] = value; } }
        public Object AbillityOwner { get { return this[nameof(AbillityOwner)]; } set { this[nameof(AbillityOwner)] = value; } }
        public UArray<ItemUpgrade> ProjectileUpgrades { get { return new UArray<ItemUpgrade>(this[nameof(ProjectileUpgrades)].Address); } }
        public BoscoProjectileAbillity AbilityData { get { return this[nameof(AbilityData)].As<BoscoProjectileAbillity>(); } set { this["AbilityData"] = value; } }
        public bool InitializeAtBeginPlay { get { return this[nameof(InitializeAtBeginPlay)].Flag; } set { this[nameof(InitializeAtBeginPlay)].Flag = value; } }
        public int GetMaxCharges(bool Total) { return Invoke<int>(nameof(GetMaxCharges), Total); }
        public bool GetIsSet() { return Invoke<bool>(nameof(GetIsSet)); }
        public int GetCharges() { return Invoke<int>(nameof(GetCharges)); }
    }
    public class BoscoCarryingDetailComponent : ActorComponent
    {
        public BoscoCarryingDetailComponent(nint addr) : base(addr) { }
        public Rotator CustomRotaion { get { return this[nameof(CustomRotaion)].As<Rotator>(); } set { this["CustomRotaion"] = value; } }
    }
    public class FSDAIController : AIController
    {
        public FSDAIController(nint addr) : base(addr) { }
        public Object OnMessageBehaviorTreeEvent { get { return this[nameof(OnMessageBehaviorTreeEvent)]; } set { this[nameof(OnMessageBehaviorTreeEvent)] = value; } }
        public Object OnAlertedEvent { get { return this[nameof(OnAlertedEvent)]; } set { this[nameof(OnAlertedEvent)] = value; } }
        public byte LOSTraceChannel { get { return this[nameof(LOSTraceChannel)].GetValue<byte>(); } set { this[nameof(LOSTraceChannel)].SetValue<byte>(value); } }
        public Object TargetedPlayer { get { return this[nameof(TargetedPlayer)]; } set { this[nameof(TargetedPlayer)] = value; } }
        public void SetAlerted(bool isAlerted) { Invoke(nameof(SetAlerted), isAlerted); }
        public void ResumeLogic() { Invoke(nameof(ResumeLogic)); }
        public void RegisterBlackboardChanges(Object Key) { Invoke(nameof(RegisterBlackboardChanges), Key); }
        public void Recieve_BlackboardValueChanged(Object KeyName) { Invoke(nameof(Recieve_BlackboardValueChanged), KeyName); }
        public void PauseLogic() { Invoke(nameof(PauseLogic)); }
        public void OnAttackingChanged(bool attacking) { Invoke(nameof(OnAttackingChanged), attacking); }
        public bool GetIsAlerted() { return Invoke<bool>(nameof(GetIsAlerted)); }
    }
    public class BoscoController : FSDAIController
    {
        public BoscoController(nint addr) : base(addr) { }
        public BehaviorTree BehaviourTree { get { return this[nameof(BehaviourTree)].As<BehaviorTree>(); } set { this["BehaviourTree"] = value; } }
        public float CheckOutOfTheWayInterval { get { return this[nameof(CheckOutOfTheWayInterval)].GetValue<float>(); } set { this[nameof(CheckOutOfTheWayInterval)].SetValue<float>(value); } }
        public float DistCountAsSameHit { get { return this[nameof(DistCountAsSameHit)].GetValue<float>(); } set { this[nameof(DistCountAsSameHit)].SetValue<float>(value); } }
        public Object OnFollowTargetChangedDelegate { get { return this[nameof(OnFollowTargetChangedDelegate)]; } set { this[nameof(OnFollowTargetChangedDelegate)] = value; } }
        public TerrainMaterial HearthstoneCrystalMaterial { get { return this[nameof(HearthstoneCrystalMaterial)].As<TerrainMaterial>(); } set { this["HearthstoneCrystalMaterial"] = value; } }
        public UArray<TerrainMaterial> PlagueMaterials { get { return new UArray<TerrainMaterial>(this[nameof(PlagueMaterials)].Address); } }
        public TerrainMaterial RiftCrystalMaterial { get { return this[nameof(RiftCrystalMaterial)].As<TerrainMaterial>(); } set { this["RiftCrystalMaterial"] = value; } }
        public UArray<Object> VacuumableTypes { get { return new UArray<Object>(this[nameof(VacuumableTypes)].Address); } }
        public UArray<Object> VacuumTargets { get { return new UArray<Object>(this[nameof(VacuumTargets)].Address); } }
        public float SearchForEnemiesInterval { get { return this[nameof(SearchForEnemiesInterval)].GetValue<float>(); } set { this[nameof(SearchForEnemiesInterval)].SetValue<float>(value); } }
        public float SaluteDelay { get { return this[nameof(SaluteDelay)].GetValue<float>(); } set { this[nameof(SaluteDelay)].SetValue<float>(value); } }
        public float SaluteCooldown { get { return this[nameof(SaluteCooldown)].GetValue<float>(); } set { this[nameof(SaluteCooldown)].SetValue<float>(value); } }
        public float CheckGraberInterval { get { return this[nameof(CheckGraberInterval)].GetValue<float>(); } set { this[nameof(CheckGraberInterval)].SetValue<float>(value); } }
        public float MaxThrowStrength { get { return this[nameof(MaxThrowStrength)].GetValue<float>(); } set { this[nameof(MaxThrowStrength)].SetValue<float>(value); } }
        public float MaxThrowRange { get { return this[nameof(MaxThrowRange)].GetValue<float>(); } set { this[nameof(MaxThrowRange)].SetValue<float>(value); } }
        public float RepairRange { get { return this[nameof(RepairRange)].GetValue<float>(); } set { this[nameof(RepairRange)].SetValue<float>(value); } }
        public float DistanceCountedAsClose { get { return this[nameof(DistanceCountedAsClose)].GetValue<float>(); } set { this[nameof(DistanceCountedAsClose)].SetValue<float>(value); } }
        public GameplayTagQuery TargetQuery { get { return this[nameof(TargetQuery)].As<GameplayTagQuery>(); } set { this["TargetQuery"] = value; } }
        public GameplayTagQuery AttackOnOrderQuery { get { return this[nameof(AttackOnOrderQuery)].As<GameplayTagQuery>(); } set { this["AttackOnOrderQuery"] = value; } }
        public GameplayTagQuery AttackOnSightQuery { get { return this[nameof(AttackOnSightQuery)].As<GameplayTagQuery>(); } set { this["AttackOnSightQuery"] = value; } }
        public GameplayTagQuery DefendTageQuery { get { return this[nameof(DefendTageQuery)].As<GameplayTagQuery>(); } set { this["DefendTageQuery"] = value; } }
        public GameplayTagQuery VacuumTagQuery { get { return this[nameof(VacuumTagQuery)].As<GameplayTagQuery>(); } set { this["VacuumTagQuery"] = value; } }
        public GameplayTagQuery MeleeTagQuery { get { return this[nameof(MeleeTagQuery)].As<GameplayTagQuery>(); } set { this["MeleeTagQuery"] = value; } }
        public float ReviveHealthPercentage { get { return this[nameof(ReviveHealthPercentage)].GetValue<float>(); } set { this[nameof(ReviveHealthPercentage)].SetValue<float>(value); } }
        public DroneUseComponent CurrentUse { get { return this[nameof(CurrentUse)].As<DroneUseComponent>(); } set { this["CurrentUse"] = value; } }
        public Actor TryingToPickItem { get { return this[nameof(TryingToPickItem)].As<Actor>(); } set { this["TryingToPickItem"] = value; } }
        public void ReviveTarget() { Invoke(nameof(ReviveTarget)); }
        public void ResetToFollowState() { Invoke(nameof(ResetToFollowState)); }
        public void RegisterPlayer(PlayerCharacter APlayerCharacter) { Invoke(nameof(RegisterPlayer), APlayerCharacter); }
        public void PickupItem() { Invoke(nameof(PickupItem)); }
        public void OnUseDone(int TimesUsed) { Invoke(nameof(OnUseDone), TimesUsed); }
        public void OnSecondaryLaserPointer(LaserPointerTarget HitInfo) { Invoke(nameof(OnSecondaryLaserPointer), HitInfo); }
        public void OnPlayerShout(PlayerCharacter APlayerCharacter) { Invoke(nameof(OnPlayerShout), APlayerCharacter); }
        public void OnPlayerSalute(PlayerCharacter aCharacater) { Invoke(nameof(OnPlayerSalute), aCharacater); }
        public void OnPlayerLeave(FSDPlayerState APlayerState) { Invoke(nameof(OnPlayerLeave), APlayerState); }
        public void OnLaserPointer(LaserPointerTarget HitInfo) { Invoke(nameof(OnLaserPointer), HitInfo); }
        public void OnJobFinished() { Invoke(nameof(OnJobFinished)); }
        public void OnEscortTargetDied(HealthComponentBase Health) { Invoke(nameof(OnEscortTargetDied), Health); }
        public void OnCarriedUsed(PlayerCharacter usedBy, EInputKeys Key) { Invoke(nameof(OnCarriedUsed), usedBy, Key); }
        public Vector GetPointNearPlayers() { return Invoke<Vector>(nameof(GetPointNearPlayers)); }
        public Actor GetFollowTarget() { return Invoke<Actor>(nameof(GetFollowTarget)); }
        public void GenerateRelativeLocation(Actor aTarget, float aRange, float aHeightRestriction, float aMinRange, bool aTryToStayOutOfTheWay, bool aStayBehind) { Invoke(nameof(GenerateRelativeLocation), aTarget, aRange, aHeightRestriction, aMinRange, aTryToStayOutOfTheWay, aStayBehind); }
        public void ConfirmPickup() { Invoke(nameof(ConfirmPickup)); }
        public void CarriableDrop() { Invoke(nameof(CarriableDrop)); }
    }
    public class SimpleBossFight : Object
    {
        public SimpleBossFight(nint addr) : base(addr) { }
        public BossFight BossFight { get { return this[nameof(BossFight)].As<BossFight>(); } set { this["BossFight"] = value; } }
    }
    public class BossFightSubSystem : GameInstanceSubsystem
    {
        public BossFightSubSystem(nint addr) : base(addr) { }
        public Object OnNewBossFight { get { return this[nameof(OnNewBossFight)]; } set { this[nameof(OnNewBossFight)] = value; } }
        public Object OnBossFightRemoved { get { return this[nameof(OnBossFightRemoved)]; } set { this[nameof(OnBossFightRemoved)] = value; } }
        public Object OnCustomWidgetAdded { get { return this[nameof(OnCustomWidgetAdded)]; } set { this[nameof(OnCustomWidgetAdded)] = value; } }
        public Object OnCustomWidgetRemoved { get { return this[nameof(OnCustomWidgetRemoved)]; } set { this[nameof(OnCustomWidgetRemoved)] = value; } }
        public UArray<Object> ActiveBossFights { get { return new UArray<Object>(this[nameof(ActiveBossFights)].Address); } }
        public void RemoveCustomBossFightWidget(UserWidget InWidget) { Invoke(nameof(RemoveCustomBossFightWidget), InWidget); }
        public void RegisterBossFight(Object BossFight) { Invoke(nameof(RegisterBossFight), BossFight); }
        public void DeregisterBossFight(Actor boss) { Invoke(nameof(DeregisterBossFight), boss); }
        public void CustomWidgetDelegate__DelegateSignature(UserWidget InWidget) { Invoke(nameof(CustomWidgetDelegate__DelegateSignature), InWidget); }
        public void BossFightDelegate__DelegateSignature(Object BossFight) { Invoke(nameof(BossFightDelegate__DelegateSignature), BossFight); }
        public void AddCustomBossFightWidget(UserWidget InWidget) { Invoke(nameof(AddCustomBossFightWidget), InWidget); }
    }
    public class BossFightInterface : Interface
    {
        public BossFightInterface(nint addr) : base(addr) { }
        public bool IsStillValid() { return Invoke<bool>(nameof(IsStillValid)); }
        public Object GetWidgetClass() { return Invoke<Object>(nameof(GetWidgetClass)); }
        public Actor GetBossActor() { return Invoke<Actor>(nameof(GetBossActor)); }
    }
    public class BossFightWidget : UserWidget
    {
        public BossFightWidget(nint addr) : base(addr) { }
        public Object BossFight { get { return this[nameof(BossFight)]; } set { this[nameof(BossFight)] = value; } }
    }
    public class Grenade : Actor
    {
        public Grenade(nint addr) : base(addr) { }
        public Object CrossHairType { get { return this[nameof(CrossHairType)]; } set { this[nameof(CrossHairType)] = value; } }
        public ProjectileMovementComponent Movement { get { return this[nameof(Movement)].As<ProjectileMovementComponent>(); } set { this["Movement"] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public bool CanCook { get { return this[nameof(CanCook)].Flag; } set { this[nameof(CanCook)].Flag = value; } }
        public float cookTime { get { return this[nameof(cookTime)].GetValue<float>(); } set { this[nameof(cookTime)].SetValue<float>(value); } }
        public UArray<Vector2D> CookTickTimeline { get { return new UArray<Vector2D>(this[nameof(CookTickTimeline)].Address); } }
        public SoundCue CookingSound { get { return this[nameof(CookingSound)].As<SoundCue>(); } set { this["CookingSound"] = value; } }
        public float ExplosionDelay { get { return this[nameof(ExplosionDelay)].GetValue<float>(); } set { this[nameof(ExplosionDelay)].SetValue<float>(value); } }
        public bool ExplodeOnImpact { get { return this[nameof(ExplodeOnImpact)].Flag; } set { this[nameof(ExplodeOnImpact)].Flag = value; } }
        public Rotator ThrowDirectionOffset { get { return this[nameof(ThrowDirectionOffset)].As<Rotator>(); } set { this["ThrowDirectionOffset"] = value; } }
        public int MaxGrenades { get { return this[nameof(MaxGrenades)].GetValue<int>(); } set { this[nameof(MaxGrenades)].SetValue<int>(value); } }
        public bool HasExploded { get { return this[nameof(HasExploded)].Flag; } set { this[nameof(HasExploded)].Flag = value; } }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public Object WeaponPreviewClass { get { return this[nameof(WeaponPreviewClass)]; } set { this[nameof(WeaponPreviewClass)] = value; } }
        public Object LoadoutProxy { get { return this[nameof(LoadoutProxy)]; } set { this[nameof(LoadoutProxy)] = value; } }
        public StaticMesh HandAttachMesh { get { return this[nameof(HandAttachMesh)].As<StaticMesh>(); } set { this["HandAttachMesh"] = value; } }
        public GrenadeProjectionSettings ProjectionSettings { get { return this[nameof(ProjectionSettings)].As<GrenadeProjectionSettings>(); } set { this["ProjectionSettings"] = value; } }
        public SoundCue ImpactGroundSound { get { return this[nameof(ImpactGroundSound)].As<SoundCue>(); } set { this["ImpactGroundSound"] = value; } }
        public ParticleSystem ImpactGroundParticles { get { return this[nameof(ImpactGroundParticles)].As<ParticleSystem>(); } set { this["ImpactGroundParticles"] = value; } }
        public GrenadeAnimationSet GrenadeAnimationSetOverride { get { return this[nameof(GrenadeAnimationSetOverride)].As<GrenadeAnimationSet>(); } set { this["GrenadeAnimationSetOverride"] = value; } }
        public void OnRep_HasExploded() { Invoke(nameof(OnRep_HasExploded)); }
        public void OnExploded() { Invoke(nameof(OnExploded)); }
        public bool IsNonFriendlyPawn(Actor Actor) { return Invoke<bool>(nameof(IsNonFriendlyPawn), Actor); }
        public bool IsNonFriendly(Actor Actor) { return Invoke<bool>(nameof(IsNonFriendly), Actor); }
        public Object GetWeaponViewClass() { return Invoke<Object>(nameof(GetWeaponViewClass)); }
        public Grenade GetGrenadeDefaultObject(Object GrenadeClass) { return Invoke<Grenade>(nameof(GetGrenadeDefaultObject), GrenadeClass); }
        public void ActorWasHit(Actor SelfActor, Actor OtherActor, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(ActorWasHit), SelfActor, OtherActor, NormalImpulse, Hit); }
    }
    public class BouncyBoomerang : Grenade
    {
        public BouncyBoomerang(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public int BouncesLeft { get { return this[nameof(BouncesLeft)].GetValue<int>(); } set { this[nameof(BouncesLeft)].SetValue<int>(value); } }
        public float ConeRange { get { return this[nameof(ConeRange)].GetValue<float>(); } set { this[nameof(ConeRange)].SetValue<float>(value); } }
        public float ConeWidth { get { return this[nameof(ConeWidth)].GetValue<float>(); } set { this[nameof(ConeWidth)].SetValue<float>(value); } }
        public float BounceRange { get { return this[nameof(BounceRange)].GetValue<float>(); } set { this[nameof(BounceRange)].SetValue<float>(value); } }
        public float ToTargetSpeed { get { return this[nameof(ToTargetSpeed)].GetValue<float>(); } set { this[nameof(ToTargetSpeed)].SetValue<float>(value); } }
        public float TurnToTargetSpeed { get { return this[nameof(TurnToTargetSpeed)].GetValue<float>(); } set { this[nameof(TurnToTargetSpeed)].SetValue<float>(value); } }
        public float PathToDistPercent { get { return this[nameof(PathToDistPercent)].GetValue<float>(); } set { this[nameof(PathToDistPercent)].SetValue<float>(value); } }
        public Vector DefaultLocalBounceVector { get { return this[nameof(DefaultLocalBounceVector)].As<Vector>(); } set { this["DefaultLocalBounceVector"] = value; } }
        public Vector BounceVectorRandomness { get { return this[nameof(BounceVectorRandomness)].As<Vector>(); } set { this["BounceVectorRandomness"] = value; } }
        public float InitialBounceVectorCof { get { return this[nameof(InitialBounceVectorCof)].GetValue<float>(); } set { this[nameof(InitialBounceVectorCof)].SetValue<float>(value); } }
        public float ArcTimeScale { get { return this[nameof(ArcTimeScale)].GetValue<float>(); } set { this[nameof(ArcTimeScale)].SetValue<float>(value); } }
        public float GoBackAcceleration { get { return this[nameof(GoBackAcceleration)].GetValue<float>(); } set { this[nameof(GoBackAcceleration)].SetValue<float>(value); } }
        public float GoBackHardness { get { return this[nameof(GoBackHardness)].GetValue<float>(); } set { this[nameof(GoBackHardness)].SetValue<float>(value); } }
        public float TerrainCheckUpdateRate { get { return this[nameof(TerrainCheckUpdateRate)].GetValue<float>(); } set { this[nameof(TerrainCheckUpdateRate)].SetValue<float>(value); } }
        public float HitEnemyRange { get { return this[nameof(HitEnemyRange)].GetValue<float>(); } set { this[nameof(HitEnemyRange)].SetValue<float>(value); } }
        public float HitPlayerRange { get { return this[nameof(HitPlayerRange)].GetValue<float>(); } set { this[nameof(HitPlayerRange)].SetValue<float>(value); } }
        public float CatchSoundRange { get { return this[nameof(CatchSoundRange)].GetValue<float>(); } set { this[nameof(CatchSoundRange)].SetValue<float>(value); } }
        public float HitTerrainRange { get { return this[nameof(HitTerrainRange)].GetValue<float>(); } set { this[nameof(HitTerrainRange)].SetValue<float>(value); } }
        public Vector CatchLocationOffset { get { return this[nameof(CatchLocationOffset)].As<Vector>(); } set { this["CatchLocationOffset"] = value; } }
        public UArray<Object> OnDamageStatusEffects { get { return new UArray<Object>(this[nameof(OnDamageStatusEffects)].Address); } }
        public NiagaraSystem EnemyHitNiagaraSystem { get { return this[nameof(EnemyHitNiagaraSystem)].As<NiagaraSystem>(); } set { this["EnemyHitNiagaraSystem"] = value; } }
        public ParticleSystem EnemyHitParticleSystem { get { return this[nameof(EnemyHitParticleSystem)].As<ParticleSystem>(); } set { this["EnemyHitParticleSystem"] = value; } }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
        public SoundCue ReturnCatchSound { get { return this[nameof(ReturnCatchSound)].As<SoundCue>(); } set { this["ReturnCatchSound"] = value; } }
        public SoundCue ThrowBoomerangSound { get { return this[nameof(ThrowBoomerangSound)].As<SoundCue>(); } set { this["ThrowBoomerangSound"] = value; } }
        public SceneComponent MeshPivot { get { return this[nameof(MeshPivot)].As<SceneComponent>(); } set { this["MeshPivot"] = value; } }
        public SceneComponent YawPivot { get { return this[nameof(YawPivot)].As<SceneComponent>(); } set { this["YawPivot"] = value; } }
        public float MeshRotationRate { get { return this[nameof(MeshRotationRate)].GetValue<float>(); } set { this[nameof(MeshRotationRate)].SetValue<float>(value); } }
        public FSDPawn TargetEnemy { get { return this[nameof(TargetEnemy)].As<FSDPawn>(); } set { this["TargetEnemy"] = value; } }
        public FSDPawn PredictedNextEnemy { get { return this[nameof(PredictedNextEnemy)].As<FSDPawn>(); } set { this["PredictedNextEnemy"] = value; } }
        public uint RandomSeed { get { return this[nameof(RandomSeed)].GetValue<uint>(); } set { this[nameof(RandomSeed)].SetValue<uint>(value); } }
        public EBoomerangState State { get { return (EBoomerangState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public BoomerangSyncer PosVel { get { return this[nameof(PosVel)].As<BoomerangSyncer>(); } set { this["PosVel"] = value; } }
        public BoomerangMover Mover { get { return this[nameof(Mover)].As<BoomerangMover>(); } set { this["Mover"] = value; } }
        public void OnRep_TargetEnemy(FSDPawn lastEnemy) { Invoke(nameof(OnRep_TargetEnemy), lastEnemy); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_RandomSeed() { Invoke(nameof(OnRep_RandomSeed)); }
        public void OnRep_PosVel() { Invoke(nameof(OnRep_PosVel)); }
        public void CheckIfCollidingWithTerrain() { Invoke(nameof(CheckIfCollidingWithTerrain)); }
    }
    public class BoxFunctionLibrary : BlueprintFunctionLibrary
    {
        public BoxFunctionLibrary(nint addr) : base(addr) { }
        public Box CreateBoxAt(Vector Location, Vector Size) { return Invoke<Box>(nameof(CreateBoxAt), Location, Size); }
        public Vector ClosestPointToBox(Vector Pos, Box Box) { return Invoke<Vector>(nameof(ClosestPointToBox), Pos, Box); }
        public float BoxSize(Box Box) { return Invoke<float>(nameof(BoxSize), Box); }
        public Vector BoxExtends(Box Box) { return Invoke<Vector>(nameof(BoxExtends), Box); }
        public Vector BoxCenter(Box Box) { return Invoke<Vector>(nameof(BoxCenter), Box); }
    }
    public class GenerationComponent : PrimitiveComponent
    {
        public GenerationComponent(nint addr) : base(addr) { }
    }
    public class BoxGenerationComponent : GenerationComponent
    {
        public BoxGenerationComponent(nint addr) : base(addr) { }
        public Vector Extends { get { return this[nameof(Extends)].As<Vector>(); } set { this["Extends"] = value; } }
        public bool IsCarver { get { return this[nameof(IsCarver)].Flag; } set { this[nameof(IsCarver)].Flag = value; } }
        public float NoiseRange { get { return this[nameof(NoiseRange)].GetValue<float>(); } set { this[nameof(NoiseRange)].SetValue<float>(value); } }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
        public FloodFillSettings Noise { get { return this[nameof(Noise)].As<FloodFillSettings>(); } set { this["Noise"] = value; } }
    }
    public class GenerationItem : Actor
    {
        public GenerationItem(nint addr) : base(addr) { }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
        public bool AddToLevel { get { return this[nameof(AddToLevel)].Flag; } set { this[nameof(AddToLevel)].Flag = value; } }
    }
    public class BoxGenerationItem : GenerationItem
    {
        public BoxGenerationItem(nint addr) : base(addr) { }
        public BoxGenerationComponent BoxComponent { get { return this[nameof(BoxComponent)].As<BoxGenerationComponent>(); } set { this["BoxComponent"] = value; } }
    }
    public class BTDecorator_AttackInRange : BTDecorator_BlackboardBase
    {
        public BTDecorator_AttackInRange(nint addr) : base(addr) { }
        public Object AttackName { get { return this[nameof(AttackName)]; } set { this[nameof(AttackName)] = value; } }
    }
    public class BTDecorator_CanSeeTarget : BTDecorator
    {
        public BTDecorator_CanSeeTarget(nint addr) : base(addr) { }
        public bool UseAsync { get { return this[nameof(UseAsync)].Flag; } set { this[nameof(UseAsync)].Flag = value; } }
        public bool DebugDraw { get { return this[nameof(DebugDraw)].Flag; } set { this[nameof(DebugDraw)].Flag = value; } }
        public float MaxRange { get { return this[nameof(MaxRange)].GetValue<float>(); } set { this[nameof(MaxRange)].SetValue<float>(value); } }
        public float Interval { get { return this[nameof(Interval)].GetValue<float>(); } set { this[nameof(Interval)].SetValue<float>(value); } }
        public Vector EyeLocationOffset { get { return this[nameof(EyeLocationOffset)].As<Vector>(); } set { this["EyeLocationOffset"] = value; } }
        public Object EyeSocketName { get { return this[nameof(EyeSocketName)]; } set { this[nameof(EyeSocketName)] = value; } }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public bool UseTargetable { get { return this[nameof(UseTargetable)].Flag; } set { this[nameof(UseTargetable)].Flag = value; } }
    }
    public class BTDecorator_IsUnderCeiling : BTDecorator
    {
        public BTDecorator_IsUnderCeiling(nint addr) : base(addr) { }
        public Object ProjectileAttackName { get { return this[nameof(ProjectileAttackName)]; } set { this[nameof(ProjectileAttackName)] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public float Acceptance { get { return this[nameof(Acceptance)].GetValue<float>(); } set { this[nameof(Acceptance)].SetValue<float>(value); } }
        public float TraceWidth { get { return this[nameof(TraceWidth)].GetValue<float>(); } set { this[nameof(TraceWidth)].SetValue<float>(value); } }
        public bool DrawDebug { get { return this[nameof(DrawDebug)].Flag; } set { this[nameof(DrawDebug)].Flag = value; } }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
    }
    public class BTDecorator_CheckObstruction : BTDecorator
    {
        public BTDecorator_CheckObstruction(nint addr) : base(addr) { }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public bool UseOwnerCenterMass { get { return this[nameof(UseOwnerCenterMass)].Flag; } set { this[nameof(UseOwnerCenterMass)].Flag = value; } }
        public Vector EyeLocationOffset { get { return this[nameof(EyeLocationOffset)].As<Vector>(); } set { this["EyeLocationOffset"] = value; } }
        public Object RangedSocket { get { return this[nameof(RangedSocket)]; } set { this[nameof(RangedSocket)] = value; } }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
    }
    public class BTDecorator_CheckPlayerCount : BTDecorator
    {
        public BTDecorator_CheckPlayerCount(nint addr) : base(addr) { }
        public int playerCount { get { return this[nameof(playerCount)].GetValue<int>(); } set { this[nameof(playerCount)].SetValue<int>(value); } }
        public bool AllowLessThanCount { get { return this[nameof(AllowLessThanCount)].Flag; } set { this[nameof(AllowLessThanCount)].Flag = value; } }
    }
    public class BTDecorator_ConditionalGuard : BTDecorator
    {
        public BTDecorator_ConditionalGuard(nint addr) : base(addr) { }
        public BlackboardKeySelector GuardKey { get { return this[nameof(GuardKey)].As<BlackboardKeySelector>(); } set { this["GuardKey"] = value; } }
        public bool InvertLogic { get { return this[nameof(InvertLogic)].Flag; } set { this[nameof(InvertLogic)].Flag = value; } }
    }
    public class BTDecorator_FormationGuard : BTDecorator
    {
        public BTDecorator_FormationGuard(nint addr) : base(addr) { }
    }
    public class BTDecorator_HasValidTrajectory : BTDecorator_BlackboardBase
    {
        public BTDecorator_HasValidTrajectory(nint addr) : base(addr) { }
    }
    public class BTDecorator_InRange : BTDecorator_BlackboardBase
    {
        public BTDecorator_InRange(nint addr) : base(addr) { }
        public float MinRange { get { return this[nameof(MinRange)].GetValue<float>(); } set { this[nameof(MinRange)].SetValue<float>(value); } }
        public float MaxRange { get { return this[nameof(MaxRange)].GetValue<float>(); } set { this[nameof(MaxRange)].SetValue<float>(value); } }
        public FAIDistanceType GeometricDistanceType { get { return (FAIDistanceType)this[nameof(GeometricDistanceType)].GetValue<int>(); } set { this[nameof(GeometricDistanceType)].SetValue<int>((int)value); } }
    }
    public class BTDecorator_InRangeBB : BTDecorator_BlackboardBase
    {
        public BTDecorator_InRangeBB(nint addr) : base(addr) { }
        public BlackboardKeySelector MinRangeKey { get { return this[nameof(MinRangeKey)].As<BlackboardKeySelector>(); } set { this["MinRangeKey"] = value; } }
        public BlackboardKeySelector MaxRangeKey { get { return this[nameof(MaxRangeKey)].As<BlackboardKeySelector>(); } set { this["MaxRangeKey"] = value; } }
        public FAIDistanceType GeometricDistanceType { get { return (FAIDistanceType)this[nameof(GeometricDistanceType)].GetValue<int>(); } set { this[nameof(GeometricDistanceType)].SetValue<int>((int)value); } }
    }
    public class BTDecorator_InRangeEx : BTDecorator_BlackboardBase
    {
        public BTDecorator_InRangeEx(nint addr) : base(addr) { }
        public float MinRange { get { return this[nameof(MinRange)].GetValue<float>(); } set { this[nameof(MinRange)].SetValue<float>(value); } }
        public float MaxRange { get { return this[nameof(MaxRange)].GetValue<float>(); } set { this[nameof(MaxRange)].SetValue<float>(value); } }
        public FAIDistanceType GeometricDistanceType { get { return (FAIDistanceType)this[nameof(GeometricDistanceType)].GetValue<int>(); } set { this[nameof(GeometricDistanceType)].SetValue<int>((int)value); } }
    }
    public class BTDecorator_InRangeOfTarget : BTDecorator_BlackboardBase
    {
        public BTDecorator_InRangeOfTarget(nint addr) : base(addr) { }
        public float MinRange { get { return this[nameof(MinRange)].GetValue<float>(); } set { this[nameof(MinRange)].SetValue<float>(value); } }
        public float MaxRange { get { return this[nameof(MaxRange)].GetValue<float>(); } set { this[nameof(MaxRange)].SetValue<float>(value); } }
    }
    public class BTDecorator_IsFacing : BTDecorator_BlackboardBase
    {
        public BTDecorator_IsFacing(nint addr) : base(addr) { }
        public float MaxAngle { get { return this[nameof(MaxAngle)].GetValue<float>(); } set { this[nameof(MaxAngle)].SetValue<float>(value); } }
    }
    public class BTDecorator_LockRotation : BTDecorator
    {
        public BTDecorator_LockRotation(nint addr) : base(addr) { }
    }
    public class BTDecorator_MessageAI : BTDecorator
    {
        public BTDecorator_MessageAI(nint addr) : base(addr) { }
        public Object ActivationMessage { get { return this[nameof(ActivationMessage)]; } set { this[nameof(ActivationMessage)] = value; } }
        public Object DeactivationMessage { get { return this[nameof(DeactivationMessage)]; } set { this[nameof(DeactivationMessage)] = value; } }
    }
    public class BTDecorator_ModifySpeed : BTDecorator
    {
        public BTDecorator_ModifySpeed(nint addr) : base(addr) { }
        public float SpeedModifier { get { return this[nameof(SpeedModifier)].GetValue<float>(); } set { this[nameof(SpeedModifier)].SetValue<float>(value); } }
    }
    public class BTDecorator_RandomChance : BTDecorator
    {
        public BTDecorator_RandomChance(nint addr) : base(addr) { }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
    }
    public class BTDecorator_RandomCooldown : BTDecorator
    {
        public BTDecorator_RandomCooldown(nint addr) : base(addr) { }
        public RandRange CoolDownTime { get { return this[nameof(CoolDownTime)].As<RandRange>(); } set { this["CoolDownTime"] = value; } }
        public BlackboardKeySelector CooldownTimeModifier { get { return this[nameof(CooldownTimeModifier)].As<BlackboardKeySelector>(); } set { this["CooldownTimeModifier"] = value; } }
    }
    public class BTDecorator_SetTagRandomCooldown : BTDecorator
    {
        public BTDecorator_SetTagRandomCooldown(nint addr) : base(addr) { }
        public GameplayTag CooldownTag { get { return this[nameof(CooldownTag)].As<GameplayTag>(); } set { this["CooldownTag"] = value; } }
        public RandRange CooldownDuration { get { return this[nameof(CooldownDuration)].As<RandRange>(); } set { this["CooldownDuration"] = value; } }
        public bool bAddToExistingDuration { get { return this[nameof(bAddToExistingDuration)].Flag; } set { this[nameof(bAddToExistingDuration)].Flag = value; } }
        public bool TriggerOnActivation { get { return this[nameof(TriggerOnActivation)].Flag; } set { this[nameof(TriggerOnActivation)].Flag = value; } }
    }
    public class BTDecorator_TagRandomCooldown : BTDecorator
    {
        public BTDecorator_TagRandomCooldown(nint addr) : base(addr) { }
        public GameplayTag CooldownTag { get { return this[nameof(CooldownTag)].As<GameplayTag>(); } set { this["CooldownTag"] = value; } }
        public RandRange CooldownDuration { get { return this[nameof(CooldownDuration)].As<RandRange>(); } set { this["CooldownDuration"] = value; } }
        public bool bAddToExistingDuration { get { return this[nameof(bAddToExistingDuration)].Flag; } set { this[nameof(bAddToExistingDuration)].Flag = value; } }
        public bool bActivatesCooldown { get { return this[nameof(bActivatesCooldown)].Flag; } set { this[nameof(bActivatesCooldown)].Flag = value; } }
    }
    public class BTDecorator_RandomLoop : BTDecorator
    {
        public BTDecorator_RandomLoop(nint addr) : base(addr) { }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
    }
    public class BTDecorator_VariableLoop : BTDecorator
    {
        public BTDecorator_VariableLoop(nint addr) : base(addr) { }
        public IRandRange NumLoops { get { return this[nameof(NumLoops)].As<IRandRange>(); } set { this["NumLoops"] = value; } }
    }
    public class BTDecorator_SharedCooldown : BTDecorator
    {
        public BTDecorator_SharedCooldown(nint addr) : base(addr) { }
        public RandRange CoolDownTime { get { return this[nameof(CoolDownTime)].As<RandRange>(); } set { this["CoolDownTime"] = value; } }
        public BlackboardKeySelector CooldownKey { get { return this[nameof(CooldownKey)].As<BlackboardKeySelector>(); } set { this["CooldownKey"] = value; } }
    }
    public class BTDecorator_SharedAttackCooldown : BTDecorator
    {
        public BTDecorator_SharedAttackCooldown(nint addr) : base(addr) { }
        public RandRange CoolDownTime { get { return this[nameof(CoolDownTime)].As<RandRange>(); } set { this["CoolDownTime"] = value; } }
        public BlackboardKeySelector CooldownKey { get { return this[nameof(CooldownKey)].As<BlackboardKeySelector>(); } set { this["CooldownKey"] = value; } }
    }
    public class BTServer_ChaseTarget : BTService
    {
        public BTServer_ChaseTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public bool MustBeAlive { get { return this[nameof(MustBeAlive)].Flag; } set { this[nameof(MustBeAlive)].Flag = value; } }
        public bool MustBeUnparalyzed { get { return this[nameof(MustBeUnparalyzed)].Flag; } set { this[nameof(MustBeUnparalyzed)].Flag = value; } }
        public bool PreferNewTarget { get { return this[nameof(PreferNewTarget)].Flag; } set { this[nameof(PreferNewTarget)].Flag = value; } }
        public GameplayTag SwitchTargetCooldownTag { get { return this[nameof(SwitchTargetCooldownTag)].As<GameplayTag>(); } set { this["SwitchTargetCooldownTag"] = value; } }
        public GameplayTagQuery TargetingQuery { get { return this[nameof(TargetingQuery)].As<GameplayTagQuery>(); } set { this["TargetingQuery"] = value; } }
        public bool IsFlying { get { return this[nameof(IsFlying)].Flag; } set { this[nameof(IsFlying)].Flag = value; } }
        public bool CanShoot { get { return this[nameof(CanShoot)].Flag; } set { this[nameof(CanShoot)].Flag = value; } }
        public float TargetingRange { get { return this[nameof(TargetingRange)].GetValue<float>(); } set { this[nameof(TargetingRange)].SetValue<float>(value); } }
        public float SwitchTargetTime { get { return this[nameof(SwitchTargetTime)].GetValue<float>(); } set { this[nameof(SwitchTargetTime)].SetValue<float>(value); } }
        public float SwitchTargetDeviation { get { return this[nameof(SwitchTargetDeviation)].GetValue<float>(); } set { this[nameof(SwitchTargetDeviation)].SetValue<float>(value); } }
    }
    public class BTService_CheckIsFloating : BTService
    {
        public BTService_CheckIsFloating(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetDestKey { get { return this[nameof(TargetDestKey)].As<BlackboardKeySelector>(); } set { this["TargetDestKey"] = value; } }
        public BlackboardKeySelector IsFloatingKey { get { return this[nameof(IsFloatingKey)].As<BlackboardKeySelector>(); } set { this["IsFloatingKey"] = value; } }
        public float MinDistanceToTerrain { get { return this[nameof(MinDistanceToTerrain)].GetValue<float>(); } set { this[nameof(MinDistanceToTerrain)].SetValue<float>(value); } }
    }
    public class BTService_FindClosest : BTService
    {
        public BTService_FindClosest(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public TargetValidator TargetValidator { get { return this[nameof(TargetValidator)].As<TargetValidator>(); } set { this["TargetValidator"] = value; } }
        public bool MustBeAlive { get { return this[nameof(MustBeAlive)].Flag; } set { this[nameof(MustBeAlive)].Flag = value; } }
        public bool OwnerIsMultiTargeter { get { return this[nameof(OwnerIsMultiTargeter)].Flag; } set { this[nameof(OwnerIsMultiTargeter)].Flag = value; } }
        public bool ClearTargetIfNotValid { get { return this[nameof(ClearTargetIfNotValid)].Flag; } set { this[nameof(ClearTargetIfNotValid)].Flag = value; } }
        public float TargetingRange { get { return this[nameof(TargetingRange)].GetValue<float>(); } set { this[nameof(TargetingRange)].SetValue<float>(value); } }
    }
    public class BTService_FindPlayer : BTService
    {
        public BTService_FindPlayer(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public bool MustBeAlive { get { return this[nameof(MustBeAlive)].Flag; } set { this[nameof(MustBeAlive)].Flag = value; } }
        public bool SwithToBetterTargets { get { return this[nameof(SwithToBetterTargets)].Flag; } set { this[nameof(SwithToBetterTargets)].Flag = value; } }
        public bool RegisterForPositioning { get { return this[nameof(RegisterForPositioning)].Flag; } set { this[nameof(RegisterForPositioning)].Flag = value; } }
        public bool IsFlying { get { return this[nameof(IsFlying)].Flag; } set { this[nameof(IsFlying)].Flag = value; } }
        public bool CanShoot { get { return this[nameof(CanShoot)].Flag; } set { this[nameof(CanShoot)].Flag = value; } }
        public bool OwnerIsMultiTargeter { get { return this[nameof(OwnerIsMultiTargeter)].Flag; } set { this[nameof(OwnerIsMultiTargeter)].Flag = value; } }
        public float TargetingRange { get { return this[nameof(TargetingRange)].GetValue<float>(); } set { this[nameof(TargetingRange)].SetValue<float>(value); } }
    }
    public class BTService_FindPlayerInLineOfSight : BTService_FindPlayer
    {
        public BTService_FindPlayerInLineOfSight(nint addr) : base(addr) { }
        public Object TraceSocketName { get { return this[nameof(TraceSocketName)]; } set { this[nameof(TraceSocketName)] = value; } }
    }
    public class BTService_FindAttackable : BTService
    {
        public BTService_FindAttackable(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public bool MustBeAlive { get { return this[nameof(MustBeAlive)].Flag; } set { this[nameof(MustBeAlive)].Flag = value; } }
        public bool SwithToBetterTargets { get { return this[nameof(SwithToBetterTargets)].Flag; } set { this[nameof(SwithToBetterTargets)].Flag = value; } }
        public bool RegisterForPositioning { get { return this[nameof(RegisterForPositioning)].Flag; } set { this[nameof(RegisterForPositioning)].Flag = value; } }
        public bool IsFlying { get { return this[nameof(IsFlying)].Flag; } set { this[nameof(IsFlying)].Flag = value; } }
        public bool CanShoot { get { return this[nameof(CanShoot)].Flag; } set { this[nameof(CanShoot)].Flag = value; } }
        public float TargetingRange { get { return this[nameof(TargetingRange)].GetValue<float>(); } set { this[nameof(TargetingRange)].SetValue<float>(value); } }
        public GameplayTagQuery TargetQuery { get { return this[nameof(TargetQuery)].As<GameplayTagQuery>(); } set { this["TargetQuery"] = value; } }
    }
    public class BTService_SetStance : BTService
    {
        public BTService_SetStance(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetLocationKey { get { return this[nameof(TargetLocationKey)].As<BlackboardKeySelector>(); } set { this["TargetLocationKey"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
    }
    public class BTService_CheckPathToTarget : BTService
    {
        public BTService_CheckPathToTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public BlackboardKeySelector ResultKey { get { return this[nameof(ResultKey)].As<BlackboardKeySelector>(); } set { this["ResultKey"] = value; } }
    }
    public class BTService_UpdateMoveToTarget : BTService
    {
        public BTService_UpdateMoveToTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public BlackboardKeySelector TargetLocationKey { get { return this[nameof(TargetLocationKey)].As<BlackboardKeySelector>(); } set { this["TargetLocationKey"] = value; } }
        public float LookAheadTime { get { return this[nameof(LookAheadTime)].GetValue<float>(); } set { this[nameof(LookAheadTime)].SetValue<float>(value); } }
        public float VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<float>(); } set { this[nameof(VerticalOffset)].SetValue<float>(value); } }
    }
    public class BTService_UpdateFlyingMoveToTarget : BTService
    {
        public BTService_UpdateFlyingMoveToTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public BlackboardKeySelector TargetLocationKey { get { return this[nameof(TargetLocationKey)].As<BlackboardKeySelector>(); } set { this["TargetLocationKey"] = value; } }
        public float LookAheadTime { get { return this[nameof(LookAheadTime)].GetValue<float>(); } set { this[nameof(LookAheadTime)].SetValue<float>(value); } }
    }
    public class BTService_UpdateMoveInFormation : BTService
    {
        public BTService_UpdateMoveInFormation(nint addr) : base(addr) { }
        public float LookAheadTime { get { return this[nameof(LookAheadTime)].GetValue<float>(); } set { this[nameof(LookAheadTime)].SetValue<float>(value); } }
        public BlackboardKeySelector TargetLocationKey { get { return this[nameof(TargetLocationKey)].As<BlackboardKeySelector>(); } set { this["TargetLocationKey"] = value; } }
        public float AttackerRadius { get { return this[nameof(AttackerRadius)].GetValue<float>(); } set { this[nameof(AttackerRadius)].SetValue<float>(value); } }
    }
    public class BTTask_Attack : BTTaskNode
    {
        public BTTask_Attack(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public Object AttackName { get { return this[nameof(AttackName)]; } set { this[nameof(AttackName)] = value; } }
        public void OnAttackCompleted(BehaviorTreeComponent btComponent, bool wasSuccess) { Invoke(nameof(OnAttackCompleted), btComponent, wasSuccess); }
    }
    public class BTTask_BallisticMove : BTTask_BlackboardBase
    {
        public BTTask_BallisticMove(nint addr) : base(addr) { }
    }
    public class BTTask_FaceTarget : BTTaskNode
    {
        public BTTask_FaceTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public float MinAngle { get { return this[nameof(MinAngle)].GetValue<float>(); } set { this[nameof(MinAngle)].SetValue<float>(value); } }
    }
    public class BTTask_FakePhysicsMove : BTTask_BlackboardBase
    {
        public BTTask_FakePhysicsMove(nint addr) : base(addr) { }
        public float MinTime { get { return this[nameof(MinTime)].GetValue<float>(); } set { this[nameof(MinTime)].SetValue<float>(value); } }
        public float EndMaxSpeed { get { return this[nameof(EndMaxSpeed)].GetValue<float>(); } set { this[nameof(EndMaxSpeed)].SetValue<float>(value); } }
        public Vector InitialLocalVelocity { get { return this[nameof(InitialLocalVelocity)].As<Vector>(); } set { this["InitialLocalVelocity"] = value; } }
        public Vector InitialGlobalVelocity { get { return this[nameof(InitialGlobalVelocity)].As<Vector>(); } set { this["InitialGlobalVelocity"] = value; } }
        public bool EndRequireSolidGround { get { return this[nameof(EndRequireSolidGround)].Flag; } set { this[nameof(EndRequireSolidGround)].Flag = value; } }
        public FakeMoverSettings MoveSettings { get { return this[nameof(MoveSettings)].As<FakeMoverSettings>(); } set { this["MoveSettings"] = value; } }
    }
    public class BTTask_FindPointNearCeiling : BTTask_BlackboardBase
    {
        public BTTask_FindPointNearCeiling(nint addr) : base(addr) { }
        public float CloseToCeilingBias { get { return this[nameof(CloseToCeilingBias)].GetValue<float>(); } set { this[nameof(CloseToCeilingBias)].SetValue<float>(value); } }
        public float LookForCeilingLength { get { return this[nameof(LookForCeilingLength)].GetValue<float>(); } set { this[nameof(LookForCeilingLength)].SetValue<float>(value); } }
        public float SearchRadius { get { return this[nameof(SearchRadius)].GetValue<float>(); } set { this[nameof(SearchRadius)].SetValue<float>(value); } }
    }
    public class BTTask_FindPointNearTarget : BTTaskNode
    {
        public BTTask_FindPointNearTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public BlackboardKeySelector LocationKey { get { return this[nameof(LocationKey)].As<BlackboardKeySelector>(); } set { this["LocationKey"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public Vector ManualOffset { get { return this[nameof(ManualOffset)].As<Vector>(); } set { this["ManualOffset"] = value; } }
        public bool FromCenterOfMass { get { return this[nameof(FromCenterOfMass)].Flag; } set { this[nameof(FromCenterOfMass)].Flag = value; } }
    }
    public class BTTask_MoveToTarget : BTTask_BlackboardBase
    {
        public BTTask_MoveToTarget(nint addr) : base(addr) { }
        public float AcceptableRadius { get { return this[nameof(AcceptableRadius)].GetValue<float>(); } set { this[nameof(AcceptableRadius)].SetValue<float>(value); } }
        public bool ToCenterOfMass { get { return this[nameof(ToCenterOfMass)].Flag; } set { this[nameof(ToCenterOfMass)].Flag = value; } }
    }
    public class BTTask_MoveToSlot : BTTask_BlackboardBase
    {
        public BTTask_MoveToSlot(nint addr) : base(addr) { }
        public float AcceptableRadius { get { return this[nameof(AcceptableRadius)].GetValue<float>(); } set { this[nameof(AcceptableRadius)].SetValue<float>(value); } }
        public float LookAheadTime { get { return this[nameof(LookAheadTime)].GetValue<float>(); } set { this[nameof(LookAheadTime)].SetValue<float>(value); } }
        public float VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<float>(); } set { this[nameof(VerticalOffset)].SetValue<float>(value); } }
        public float UpdateRate { get { return this[nameof(UpdateRate)].GetValue<float>(); } set { this[nameof(UpdateRate)].SetValue<float>(value); } }
    }
    public class BTTask_SetAttacking : BTTaskNode
    {
        public BTTask_SetAttacking(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
    }
    public class BTTask_TriggerAI : BTTaskNode
    {
        public BTTask_TriggerAI(nint addr) : base(addr) { }
        public Object TriggerName { get { return this[nameof(TriggerName)]; } set { this[nameof(TriggerName)] = value; } }
    }
    public class BTTask_MessageAI : BTTaskNode
    {
        public BTTask_MessageAI(nint addr) : base(addr) { }
        public Object MessageName { get { return this[nameof(MessageName)]; } set { this[nameof(MessageName)] = value; } }
    }
    public class BTTask_SetCondition : BTTaskNode
    {
        public BTTask_SetCondition(nint addr) : base(addr) { }
        public BlackboardKeySelector ConditionalKey { get { return this[nameof(ConditionalKey)].As<BlackboardKeySelector>(); } set { this["ConditionalKey"] = value; } }
        public bool Value { get { return this[nameof(Value)].Flag; } set { this[nameof(Value)].Flag = value; } }
    }
    public class BuildRestriction : DataAsset
    {
        public BuildRestriction(nint addr) : base(addr) { }
        public int BuildType { get { return this[nameof(BuildType)].GetValue<int>(); } set { this[nameof(BuildType)].SetValue<int>(value); } }
        public int Platform { get { return this[nameof(Platform)].GetValue<int>(); } set { this[nameof(Platform)].SetValue<int>(value); } }
    }
    public class BurrowComponent : ActorComponent
    {
        public BurrowComponent(nint addr) : base(addr) { }
        public void Unburrow(AnimMontage customMontage) { Invoke(nameof(Unburrow), customMontage); }
        public void CallBurrow(bool isBurrowing, AnimMontage customMontage) { Invoke(nameof(CallBurrow), isBurrowing, customMontage); }
        public void Burrow(AnimMontage customMontage) { Invoke(nameof(Burrow), customMontage); }
    }
    public class BurstWeapon : AmmoDrivenWeapon
    {
        public BurstWeapon(nint addr) : base(addr) { }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public DamageComponent BurstFireBonusDamage { get { return this[nameof(BurstFireBonusDamage)].As<DamageComponent>(); } set { this["BurstFireBonusDamage"] = value; } }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void OnReadyToFire() { Invoke(nameof(OnReadyToFire)); }
    }
    public class ButtonWidget : UserWidget
    {
        public ButtonWidget(nint addr) : base(addr) { }
        public Object OnClicked { get { return this[nameof(OnClicked)]; } set { this[nameof(OnClicked)] = value; } }
        public Object OnHovered { get { return this[nameof(OnHovered)]; } set { this[nameof(OnHovered)] = value; } }
        public Object OnUnhovered { get { return this[nameof(OnUnhovered)]; } set { this[nameof(OnUnhovered)] = value; } }
        public Object OnEnabledChanged { get { return this[nameof(OnEnabledChanged)]; } set { this[nameof(OnEnabledChanged)] = value; } }
        public Object OnSelectedChanged { get { return this[nameof(OnSelectedChanged)]; } set { this[nameof(OnSelectedChanged)] = value; } }
        public Object OnDataChanged { get { return this[nameof(OnDataChanged)]; } set { this[nameof(OnDataChanged)] = value; } }
        public bool bButtonEnabled { get { return this[nameof(bButtonEnabled)].Flag; } set { this[nameof(bButtonEnabled)].Flag = value; } }
        public bool bButtonSelected { get { return this[nameof(bButtonSelected)].Flag; } set { this[nameof(bButtonSelected)].Flag = value; } }
        public ButtonData Data { get { return this[nameof(Data)].As<ButtonData>(); } set { this["Data"] = value; } }
        public bool bButtonHovered { get { return this[nameof(bButtonHovered)].Flag; } set { this[nameof(bButtonHovered)].Flag = value; } }
        public Button InnerButton { get { return this[nameof(InnerButton)].As<Button>(); } set { this["InnerButton"] = value; } }
        public WidgetAnimation AnimButtonHover { get { return this[nameof(AnimButtonHover)].As<WidgetAnimation>(); } set { this["AnimButtonHover"] = value; } }
        public void Unhovered() { Invoke(nameof(Unhovered)); }
        public bool ToggleButtonSelected() { return Invoke<bool>(nameof(ToggleButtonSelected)); }
        public void SetButtonSelected(bool InSelected) { Invoke(nameof(SetButtonSelected), InSelected); }
        public void SetButtonEnabled(bool InEnabled) { Invoke(nameof(SetButtonEnabled), InEnabled); }
        public void SetButtonData(ButtonData InData) { Invoke(nameof(SetButtonData), InData); }
        public void ReceivedUnhovered() { Invoke(nameof(ReceivedUnhovered)); }
        public void ReceivedSelectedChanged() { Invoke(nameof(ReceivedSelectedChanged)); }
        public void ReceivedHovered() { Invoke(nameof(ReceivedHovered)); }
        public void ReceivedEnabledChanged() { Invoke(nameof(ReceivedEnabledChanged)); }
        public void ReceivedDataChanged() { Invoke(nameof(ReceivedDataChanged)); }
        public void ReceivedClicked() { Invoke(nameof(ReceivedClicked)); }
        public void Hovered() { Invoke(nameof(Hovered)); }
        public void Click() { Invoke(nameof(Click)); }
        public void ClearEventBindings() { Invoke(nameof(ClearEventBindings)); }
        public void ButtonWidgetDelegate__DelegateSignature(ButtonWidget InButton) { Invoke(nameof(ButtonWidgetDelegate__DelegateSignature), InButton); }
    }
    public class ButtonUserWidget : UserWidget
    {
        public ButtonUserWidget(nint addr) : base(addr) { }
        public void InnerButtonUnhovered() { Invoke(nameof(InnerButtonUnhovered)); }
        public void InnerButtonHovered() { Invoke(nameof(InnerButtonHovered)); }
        public Widget InnerButtonGetToolTip() { return Invoke<Widget>(nameof(InnerButtonGetToolTip)); }
        public void InnerButtonClicked() { Invoke(nameof(InnerButtonClicked)); }
    }
    public class CalldownItem : AnimatedItem
    {
        public CalldownItem(nint addr) : base(addr) { }
        public Object ItemPlacerClass { get { return this[nameof(ItemPlacerClass)]; } set { this[nameof(ItemPlacerClass)] = value; } }
        public Object SupplyPodClass { get { return this[nameof(SupplyPodClass)]; } set { this[nameof(SupplyPodClass)] = value; } }
        public ResourceData ResouceRequired { get { return this[nameof(ResouceRequired)].As<ResourceData>(); } set { this["ResouceRequired"] = value; } }
        public Object OrderDescription { get { return this[nameof(OrderDescription)]; } set { this[nameof(OrderDescription)] = value; } }
        public Object LogText { get { return this[nameof(LogText)]; } set { this[nameof(LogText)] = value; } }
        public Object ResupplyBeacon { get { return this[nameof(ResupplyBeacon)]; } set { this[nameof(ResupplyBeacon)] = value; } }
        public ItemPlacerAggregator ItemPlacerInstance { get { return this[nameof(ItemPlacerInstance)].As<ItemPlacerAggregator>(); } set { this["ItemPlacerInstance"] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public float CooldownRemaining { get { return this[nameof(CooldownRemaining)].GetValue<float>(); } set { this[nameof(CooldownRemaining)].SetValue<float>(value); } }
        public void Server_Call_Resupply(Vector Location) { Invoke(nameof(Server_Call_Resupply), Location); }
    }
    public class Campaign : Object
    {
        public Campaign(nint addr) : base(addr) { }
        public bool HasMissions { get { return this[nameof(HasMissions)].Flag; } set { this[nameof(HasMissions)].Flag = value; } }
        public UArray<CampaignMission> missions { get { return new UArray<CampaignMission>(this[nameof(missions)].Address); } }
        public UArray<Reward> RewardsOnCampaignStart { get { return new UArray<Reward>(this[nameof(RewardsOnCampaignStart)].Address); } }
        public UArray<Reward> RewardsOnCompletion { get { return new UArray<Reward>(this[nameof(RewardsOnCompletion)].Address); } }
        public DialogDataAsset CampaignCompleteShout { get { return this[nameof(CampaignCompleteShout)].As<DialogDataAsset>(); } set { this["CampaignCompleteShout"] = value; } }
        public UArray<CampaignRequirement> Requirements { get { return new UArray<CampaignRequirement>(this[nameof(Requirements)].Address); } }
        public UArray<CampaignRequirement> VisibilityRequirements { get { return new UArray<CampaignRequirement>(this[nameof(VisibilityRequirements)].Address); } }
        public PlayerCharacterID RequiredCharacterID { get { return this[nameof(RequiredCharacterID)].As<PlayerCharacterID>(); } set { this["RequiredCharacterID"] = value; } }
        public UArray<DifficultySetting> RestrictedToDifficulties { get { return new UArray<DifficultySetting>(this[nameof(RestrictedToDifficulties)].Address); } }
        public int Progress { get { return this[nameof(Progress)].GetValue<int>(); } set { this[nameof(Progress)].SetValue<int>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public bool CanAbort { get { return this[nameof(CanAbort)].Flag; } set { this[nameof(CanAbort)].Flag = value; } }
        public bool CanSkip { get { return this[nameof(CanSkip)].Flag; } set { this[nameof(CanSkip)].Flag = value; } }
        public Object TitlePrefix { get { return this[nameof(TitlePrefix)]; } set { this[nameof(TitlePrefix)] = value; } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object DescriptionHeader { get { return this[nameof(DescriptionHeader)]; } set { this[nameof(DescriptionHeader)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object RewardText { get { return this[nameof(RewardText)]; } set { this[nameof(RewardText)] = value; } }
        public Object RewardFlavorText { get { return this[nameof(RewardFlavorText)]; } set { this[nameof(RewardFlavorText)] = value; } }
        public Object Picture { get { return this[nameof(Picture)]; } set { this[nameof(Picture)] = value; } }
        public ECampaignType campaigntype { get { return (ECampaignType)this[nameof(campaigntype)].GetValue<int>(); } set { this[nameof(campaigntype)].SetValue<int>((int)value); } }
        public MissionStat CampaignCompletedMissionStat { get { return this[nameof(CampaignCompletedMissionStat)].As<MissionStat>(); } set { this["CampaignCompletedMissionStat"] = value; } }
        public GameActivityAssignmentType CampaignActivity { get { return this[nameof(CampaignActivity)].As<GameActivityAssignmentType>(); } set { this["CampaignActivity"] = value; } }
        public Object ReplacesOldCampaignCampaign { get { return this[nameof(ReplacesOldCampaignCampaign)]; } set { this[nameof(ReplacesOldCampaignCampaign)] = value; } }
        public ECampaignMutators Mutators { get { return (ECampaignMutators)this[nameof(Mutators)].GetValue<int>(); } set { this[nameof(Mutators)].SetValue<int>((int)value); } }
        public UArray<MissionWarning> BannedWarnings { get { return new UArray<MissionWarning>(this[nameof(BannedWarnings)].Address); } }
        public bool IsComplete() { return Invoke<bool>(nameof(IsComplete)); }
        public bool IsCampaignComplete(Object WorldContext, Object Campaign) { return Invoke<bool>(nameof(IsCampaignComplete), WorldContext, Campaign); }
        public Campaign GetReference(Object Campaign) { return Invoke<Campaign>(nameof(GetReference), Campaign); }
        public CampaignMission GetPreviousMission() { return Invoke<CampaignMission>(nameof(GetPreviousMission)); }
        public Texture2D GetPicture() { return Invoke<Texture2D>(nameof(GetPicture)); }
        public Object GetCampaignTitle(Object Campaign) { return Invoke<Object>(nameof(GetCampaignTitle), Campaign); }
        public CampaignMission GetActiveMission() { return Invoke<CampaignMission>(nameof(GetActiveMission)); }
        public bool CanStartCampaign(FSDPlayerController Player) { return Invoke<bool>(nameof(CanStartCampaign), Player); }
        public bool CanSeeCampaign(PlayerController PlayerController) { return Invoke<bool>(nameof(CanSeeCampaign), PlayerController); }
        public bool AreRestrictionsMet(FSDPlayerController Player, DifficultySetting optionalDifficulty) { return Invoke<bool>(nameof(AreRestrictionsMet), Player, optionalDifficulty); }
    }
    public class CampaignManager : Object
    {
        public CampaignManager(nint addr) : base(addr) { }
        public Object OnCampaignCompleted { get { return this[nameof(OnCampaignCompleted)]; } set { this[nameof(OnCampaignCompleted)] = value; } }
        public Object OnCampaignChanged { get { return this[nameof(OnCampaignChanged)]; } set { this[nameof(OnCampaignChanged)] = value; } }
        public Object MainCampaign { get { return this[nameof(MainCampaign)]; } set { this[nameof(MainCampaign)] = value; } }
        public UArray<Object> WeeklyCampaigns { get { return new UArray<Object>(this[nameof(WeeklyCampaigns)].Address); } }
        public UArray<Object> MatrixCoreHuntCampaigns { get { return new UArray<Object>(this[nameof(MatrixCoreHuntCampaigns)].Address); } }
        public UArray<Object> SideCampaigns { get { return new UArray<Object>(this[nameof(SideCampaigns)].Address); } }
        public UArray<Object> EventCampaigns { get { return new UArray<Object>(this[nameof(EventCampaigns)].Address); } }
        public Campaign ActiveCampaign { get { return this[nameof(ActiveCampaign)].As<Campaign>(); } set { this["ActiveCampaign"] = value; } }
        public int NumFailedRequests { get { return this[nameof(NumFailedRequests)].GetValue<int>(); } set { this[nameof(NumFailedRequests)].SetValue<int>(value); } }
        public bool WeeklyBackendDataValid { get { return this[nameof(WeeklyBackendDataValid)].Flag; } set { this[nameof(WeeklyBackendDataValid)].Flag = value; } }
        public int WeeklyBackendSeed { get { return this[nameof(WeeklyBackendSeed)].GetValue<int>(); } set { this[nameof(WeeklyBackendSeed)].SetValue<int>(value); } }
        public DateTime WeeklyBackendExpirationTime { get { return this[nameof(WeeklyBackendExpirationTime)].As<DateTime>(); } set { this["WeeklyBackendExpirationTime"] = value; } }
        public DateTime LastRequestTime { get { return this[nameof(LastRequestTime)].As<DateTime>(); } set { this["LastRequestTime"] = value; } }
        public void StartNewCampaign(Object campaignClass, FSDSaveGame SaveGame) { Invoke(nameof(StartNewCampaign), campaignClass, SaveGame); }
        public void SkipMainCampaign(Object WorldContextObject) { Invoke(nameof(SkipMainCampaign), WorldContextObject); }
        public void OnEventsRefreshed() { Invoke(nameof(OnEventsRefreshed)); }
        public bool IsWeeklyCampaignCompleted(Object WorldContext, ECampaignType campaigntype) { return Invoke<bool>(nameof(IsWeeklyCampaignCompleted), WorldContext, campaigntype); }
        public bool IsInCampaignMission(FSDPlayerController Player) { return Invoke<bool>(nameof(IsInCampaignMission), Player); }
        public bool IsCampaignRestrictionsMet(Object WorldContextObject, GeneratedMission mission, DifficultySetting optionalDifficulty) { return Invoke<bool>(nameof(IsCampaignRestrictionsMet), WorldContextObject, mission, optionalDifficulty); }
        public bool IsCampaignMission(Object WorldContextObject, GeneratedMission mission) { return Invoke<bool>(nameof(IsCampaignMission), WorldContextObject, mission); }
        public bool IsActiveCampaign(Campaign Campaign) { return Invoke<bool>(nameof(IsActiveCampaign), Campaign); }
        public UArray<Object> GetUncompletedCampaigns(FSDPlayerController Player) { return Invoke<UArray<Object>>(nameof(GetUncompletedCampaigns), Player); }
        public UArray<Object> GetCompletedSideCampaigns(FSDPlayerController Player) { return Invoke<UArray<Object>>(nameof(GetCompletedSideCampaigns), Player); }
        public GeneratedMission GetCampaingMission(UArray<GeneratedMission> missions, GlobalMissionSeed GlobalSeed) { return Invoke<GeneratedMission>(nameof(GetCampaingMission), missions, GlobalSeed); }
        public void CompleteCampaignWithNoMissions(Object campaignClass, FSDSaveGame SaveGame) { Invoke(nameof(CompleteCampaignWithNoMissions), campaignClass, SaveGame); }
        public void CampaignCompletedDelegate__DelegateSignature() { Invoke(nameof(CampaignCompletedDelegate__DelegateSignature)); }
        public void CampaignChangedDelegate__DelegateSignature() { Invoke(nameof(CampaignChangedDelegate__DelegateSignature)); }
        public void AbortActiveCampaign(FSDSaveGame SaveGame) { Invoke(nameof(AbortActiveCampaign), SaveGame); }
    }
    public class CampaignMission : DataAsset
    {
        public CampaignMission(nint addr) : base(addr) { }
        public PlanetZone PlanetZone { get { return this[nameof(PlanetZone)].As<PlanetZone>(); } set { this["PlanetZone"] = value; } }
        public RequiredMissionItem mission { get { return this[nameof(mission)].As<RequiredMissionItem>(); } set { this["mission"] = value; } }
        public UArray<Reward> Rewards { get { return new UArray<Reward>(this[nameof(Rewards)].Address); } }
        public DialogDataAsset MissionCompleteShout { get { return this[nameof(MissionCompleteShout)].As<DialogDataAsset>(); } set { this["MissionCompleteShout"] = value; } }
        public bool OverrideMutators { get { return this[nameof(OverrideMutators)].Flag; } set { this[nameof(OverrideMutators)].Flag = value; } }
        public ECampaignMutators MutatorOverride { get { return (ECampaignMutators)this[nameof(MutatorOverride)].GetValue<int>(); } set { this[nameof(MutatorOverride)].SetValue<int>((int)value); } }
        public UArray<MissionWarning> AllowedWarnings { get { return new UArray<MissionWarning>(this[nameof(AllowedWarnings)].Address); } }
        public MissionTemplate GetMissionTemplate() { return Invoke<MissionTemplate>(nameof(GetMissionTemplate)); }
    }
    public class CampaignRequirement : Object
    {
        public CampaignRequirement(nint addr) : base(addr) { }
        public bool IsRequirementMet(FSDPlayerController Player, Campaign Campaign) { return Invoke<bool>(nameof(IsRequirementMet), Player, Campaign); }
    }
    public class ValidWeeklySeedCampaignRequirement : CampaignRequirement
    {
        public ValidWeeklySeedCampaignRequirement(nint addr) : base(addr) { }
    }
    public class CaracterLevelCampaignRequirement : CampaignRequirement
    {
        public CaracterLevelCampaignRequirement(nint addr) : base(addr) { }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
        public int LevelRequirement { get { return this[nameof(LevelRequirement)].GetValue<int>(); } set { this[nameof(LevelRequirement)].SetValue<int>(value); } }
    }
    public class PlayerRankCampaignRequirement : CampaignRequirement
    {
        public PlayerRankCampaignRequirement(nint addr) : base(addr) { }
        public int RankRequirement { get { return this[nameof(RankRequirement)].GetValue<int>(); } set { this[nameof(RankRequirement)].SetValue<int>(value); } }
    }
    public class RetirementCampaignRequirement : CampaignRequirement
    {
        public RetirementCampaignRequirement(nint addr) : base(addr) { }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
        public int LevelRequirement { get { return this[nameof(LevelRequirement)].GetValue<int>(); } set { this[nameof(LevelRequirement)].SetValue<int>(value); } }
    }
    public class WeeklyTimerCampaignRequirement : CampaignRequirement
    {
        public WeeklyTimerCampaignRequirement(nint addr) : base(addr) { }
        public Timespan GetWeeklyTimeLeft(FSDPlayerController Player) { return Invoke<Timespan>(nameof(GetWeeklyTimeLeft), Player); }
        public Timespan GetTimeUntillNewCampaign(FSDPlayerController Player) { return Invoke<Timespan>(nameof(GetTimeUntillNewCampaign), Player); }
        public bool GetHasCompleted(Campaign Campaign, FSDPlayerController Player) { return Invoke<bool>(nameof(GetHasCompleted), Campaign, Player); }
    }
    public class AnyRetiredCampaignRequirement : CampaignRequirement
    {
        public AnyRetiredCampaignRequirement(nint addr) : base(addr) { }
    }
    public class CamapaignCompletedRequirement : CampaignRequirement
    {
        public CamapaignCompletedRequirement(nint addr) : base(addr) { }
        public Object Campaign { get { return this[nameof(Campaign)]; } set { this[nameof(Campaign)] = value; } }
        public bool InverseRequirement { get { return this[nameof(InverseRequirement)].Flag; } set { this[nameof(InverseRequirement)].Flag = value; } }
    }
    public class CapacityBasedItemAggregator : ItemAggregator
    {
        public CapacityBasedItemAggregator(nint addr) : base(addr) { }
        public Object OnCurrentAmountChanged { get { return this[nameof(OnCurrentAmountChanged)]; } set { this[nameof(OnCurrentAmountChanged)] = value; } }
        public Object OnMaxAmountChanged { get { return this[nameof(OnMaxAmountChanged)]; } set { this[nameof(OnMaxAmountChanged)] = value; } }
        public Object OnClipAndTotalChanged { get { return this[nameof(OnClipAndTotalChanged)]; } set { this[nameof(OnClipAndTotalChanged)] = value; } }
        public Object OnReloadTimeChanged { get { return this[nameof(OnReloadTimeChanged)]; } set { this[nameof(OnReloadTimeChanged)] = value; } }
        public Object OnReloadComplete { get { return this[nameof(OnReloadComplete)]; } set { this[nameof(OnReloadComplete)] = value; } }
        public Object OnReloadStarted { get { return this[nameof(OnReloadStarted)]; } set { this[nameof(OnReloadStarted)] = value; } }
        public Object OnMaxAmmoCapacityChanged { get { return this[nameof(OnMaxAmmoCapacityChanged)]; } set { this[nameof(OnMaxAmmoCapacityChanged)] = value; } }
        public bool showClipCount { get { return this[nameof(showClipCount)].Flag; } set { this[nameof(showClipCount)].Flag = value; } }
        public void ReloadStarted() { Invoke(nameof(ReloadStarted)); }
        public void ReloadComplete() { Invoke(nameof(ReloadComplete)); }
        public int GetMaxAmount() { return Invoke<int>(nameof(GetMaxAmount)); }
        public int GetCurrentAmount() { return Invoke<int>(nameof(GetCurrentAmount)); }
    }
    public class CapacityHoldingItemAggregator : CapacityBasedItemAggregator
    {
        public CapacityHoldingItemAggregator(nint addr) : base(addr) { }
        public int MaxAmmo { get { return this[nameof(MaxAmmo)].GetValue<int>(); } set { this[nameof(MaxAmmo)].SetValue<int>(value); } }
        public int AmmoCount { get { return this[nameof(AmmoCount)].GetValue<int>(); } set { this[nameof(AmmoCount)].SetValue<int>(value); } }
        public bool UseRejoin { get { return this[nameof(UseRejoin)].Flag; } set { this[nameof(UseRejoin)].Flag = value; } }
        public void UseAmmo(int Count) { Invoke(nameof(UseAmmo), Count); }
        public void SetMaxAmmo(int InMaxAmmo, bool InChangeCurrentAmount) { Invoke(nameof(SetMaxAmmo), InMaxAmmo, InChangeCurrentAmount); }
        public void Resupply(float percentage) { Invoke(nameof(Resupply), percentage); }
        public void OnRep_MaxAmmo() { Invoke(nameof(OnRep_MaxAmmo)); }
        public void OnRep_AmmoCount() { Invoke(nameof(OnRep_AmmoCount)); }
        public void AddAmmo(int amount) { Invoke(nameof(AddAmmo), amount); }
    }
    public class CappedResource : Object
    {
        public CappedResource(nint addr) : base(addr) { }
        public Object OnChanged { get { return this[nameof(OnChanged)]; } set { this[nameof(OnChanged)] = value; } }
        public Object OnIncreased { get { return this[nameof(OnIncreased)]; } set { this[nameof(OnIncreased)] = value; } }
        public Object OnFull { get { return this[nameof(OnFull)]; } set { this[nameof(OnFull)] = value; } }
        public ResourceData Data { get { return this[nameof(Data)].As<ResourceData>(); } set { this["Data"] = value; } }
        public float currentAmount { get { return this[nameof(currentAmount)].GetValue<float>(); } set { this[nameof(currentAmount)].SetValue<float>(value); } }
        public float MaxAmount { get { return this[nameof(MaxAmount)].GetValue<float>(); } set { this[nameof(MaxAmount)].SetValue<float>(value); } }
        public float TotalCollected { get { return this[nameof(TotalCollected)].GetValue<float>(); } set { this[nameof(TotalCollected)].SetValue<float>(value); } }
        public int FullFlag { get { return this[nameof(FullFlag)].GetValue<int>(); } set { this[nameof(FullFlag)].SetValue<int>(value); } }
        public float TransferAll(CappedResource Receiver) { return Invoke<float>(nameof(TransferAll), Receiver); }
        public float Transfer(float amount, CappedResource Receiver) { return Invoke<float>(nameof(Transfer), amount, Receiver); }
        public void OnRep_FullFlag(int OldValue) { Invoke(nameof(OnRep_FullFlag), OldValue); }
        public void OnRep_CurrentAmount(float OldAmount) { Invoke(nameof(OnRep_CurrentAmount), OldAmount); }
        public bool IsObjectiveResource(Object WorldContext, bool IsCompleted) { return Invoke<bool>(nameof(IsObjectiveResource), WorldContext, IsCompleted); }
        public bool IsFull() { return Invoke<bool>(nameof(IsFull)); }
        public bool isEmpty() { return Invoke<bool>(nameof(isEmpty)); }
        public bool IsCraftingResource() { return Invoke<bool>(nameof(IsCraftingResource)); }
        public Object GetTitle() { return Invoke<Object>(nameof(GetTitle)); }
        public Color GetColor() { return Invoke<Color>(nameof(GetColor)); }
        public float GetCapacityPct() { return Invoke<float>(nameof(GetCapacityPct)); }
        public float Deduct(float amount) { return Invoke<float>(nameof(Deduct), amount); }
        public float Add(float amount) { return Invoke<float>(nameof(Add), amount); }
    }
    public class HitscanBaseComponent : WeaponFireComponent
    {
        public HitscanBaseComponent(nint addr) : base(addr) { }
        public Object OnSpreadChanged { get { return this[nameof(OnSpreadChanged)]; } set { this[nameof(OnSpreadChanged)] = value; } }
        public Object OnFireComplete { get { return this[nameof(OnFireComplete)]; } set { this[nameof(OnFireComplete)] = value; } }
        public float SpreadPerShot { get { return this[nameof(SpreadPerShot)].GetValue<float>(); } set { this[nameof(SpreadPerShot)].SetValue<float>(value); } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public bool UseDamageComponent { get { return this[nameof(UseDamageComponent)].Flag; } set { this[nameof(UseDamageComponent)].Flag = value; } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float armorDamageMultiplier { get { return this[nameof(armorDamageMultiplier)].GetValue<float>(); } set { this[nameof(armorDamageMultiplier)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public float WeakpointDamageMultiplier { get { return this[nameof(WeakpointDamageMultiplier)].GetValue<float>(); } set { this[nameof(WeakpointDamageMultiplier)].SetValue<float>(value); } }
        public int MaxPenetrations { get { return this[nameof(MaxPenetrations)].GetValue<int>(); } set { this[nameof(MaxPenetrations)].SetValue<int>(value); } }
        public EImpactDecalSize ImpactDecalSize { get { return (EImpactDecalSize)this[nameof(ImpactDecalSize)].GetValue<int>(); } set { this[nameof(ImpactDecalSize)].SetValue<int>((int)value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public bool UseDynamicSpread { get { return this[nameof(UseDynamicSpread)].Flag; } set { this[nameof(UseDynamicSpread)].Flag = value; } }
        public UArray<Actor> IgnoredActorsInTrace { get { return new UArray<Actor>(this[nameof(IgnoredActorsInTrace)].Address); } }
        public float MinSpread { get { return this[nameof(MinSpread)].GetValue<float>(); } set { this[nameof(MinSpread)].SetValue<float>(value); } }
        public float MinSpreadWhenMoving { get { return this[nameof(MinSpreadWhenMoving)].GetValue<float>(); } set { this[nameof(MinSpreadWhenMoving)].SetValue<float>(value); } }
        public float MinSpreadWhenSprinting { get { return this[nameof(MinSpreadWhenSprinting)].GetValue<float>(); } set { this[nameof(MinSpreadWhenSprinting)].SetValue<float>(value); } }
        public float MaxSpread { get { return this[nameof(MaxSpread)].GetValue<float>(); } set { this[nameof(MaxSpread)].SetValue<float>(value); } }
        public RuntimeFloatCurve SpreadCurve { get { return this[nameof(SpreadCurve)].As<RuntimeFloatCurve>(); } set { this["SpreadCurve"] = value; } }
        public float SpreadRecoveryPerSecond { get { return this[nameof(SpreadRecoveryPerSecond)].GetValue<float>(); } set { this[nameof(SpreadRecoveryPerSecond)].SetValue<float>(value); } }
        public float VerticalSpreadMultiplier { get { return this[nameof(VerticalSpreadMultiplier)].GetValue<float>(); } set { this[nameof(VerticalSpreadMultiplier)].SetValue<float>(value); } }
        public float HorizontalSpredMultiplier { get { return this[nameof(HorizontalSpredMultiplier)].GetValue<float>(); } set { this[nameof(HorizontalSpredMultiplier)].SetValue<float>(value); } }
        public float MaxVerticalSpread { get { return this[nameof(MaxVerticalSpread)].GetValue<float>(); } set { this[nameof(MaxVerticalSpread)].SetValue<float>(value); } }
        public float MaxHorizontalSpread { get { return this[nameof(MaxHorizontalSpread)].GetValue<float>(); } set { this[nameof(MaxHorizontalSpread)].SetValue<float>(value); } }
        public ERicochetBehavior RicochetBehavior { get { return (ERicochetBehavior)this[nameof(RicochetBehavior)].GetValue<int>(); } set { this[nameof(RicochetBehavior)].SetValue<int>((int)value); } }
        public float RicochetChance { get { return this[nameof(RicochetChance)].GetValue<float>(); } set { this[nameof(RicochetChance)].SetValue<float>(value); } }
        public bool RicochetOnWeakspotOnly { get { return this[nameof(RicochetOnWeakspotOnly)].Flag; } set { this[nameof(RicochetOnWeakspotOnly)].Flag = value; } }
        public float RicochetMaxRange { get { return this[nameof(RicochetMaxRange)].GetValue<float>(); } set { this[nameof(RicochetMaxRange)].SetValue<float>(value); } }
        public void Server_StopFire() { Invoke(nameof(Server_StopFire)); }
        public void Server_RemoveDebris(int instance, int Component) { Invoke(nameof(Server_RemoveDebris), instance, Component); }
        public float GetCurrentVerticalSpread() { return Invoke<float>(nameof(GetCurrentVerticalSpread)); }
        public float GetCurrentHorizontalSpread() { return Invoke<float>(nameof(GetCurrentHorizontalSpread)); }
    }
    public class CapsuleHitscanComponent : HitscanBaseComponent
    {
        public CapsuleHitscanComponent(nint addr) : base(addr) { }
        public DamageEnhancer DamageEnhancer { get { return this[nameof(DamageEnhancer)].As<DamageEnhancer>(); } set { this["DamageEnhancer"] = value; } }
        public Object OnHitEffect { get { return this[nameof(OnHitEffect)]; } set { this[nameof(OnHitEffect)] = value; } }
        public Object OnClosestHit_Client { get { return this[nameof(OnClosestHit_Client)]; } set { this[nameof(OnClosestHit_Client)] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public float Width { get { return this[nameof(Width)].GetValue<float>(); } set { this[nameof(Width)].SetValue<float>(value); } }
        public bool ShowPhysMatImpact { get { return this[nameof(ShowPhysMatImpact)].Flag; } set { this[nameof(ShowPhysMatImpact)].Flag = value; } }
        public bool ShowPhysMatDecal { get { return this[nameof(ShowPhysMatDecal)].Flag; } set { this[nameof(ShowPhysMatDecal)].Flag = value; } }
        public bool PlayPhysMatSound { get { return this[nameof(PlayPhysMatSound)].Flag; } set { this[nameof(PlayPhysMatSound)].Flag = value; } }
        public Object ActorsInCapsule { get { return this[nameof(ActorsInCapsule)]; } set { this[nameof(ActorsInCapsule)] = value; } }
        public UArray<Actor> DamagedActorCache { get { return new UArray<Actor>(this[nameof(DamagedActorCache)].Address); } }
        public UArray<Actor> ActorsHit { get { return new UArray<Actor>(this[nameof(ActorsHit)].Address); } }
        public MultiHitScanHits Hits { get { return this[nameof(Hits)].As<MultiHitScanHits>(); } set { this["Hits"] = value; } }
        public void Server_RegisterHit(MultiHitScanHits hitResults) { Invoke(nameof(Server_RegisterHit), hitResults); }
        public void All_ShowHit(MultiHitScanHits hitResults) { Invoke(nameof(All_ShowHit), hitResults); }
    }
    public class Caretaker : FSDPawn
    {
        public Caretaker(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent Body { get { return this[nameof(Body)].As<SkeletalMeshComponent>(); } set { this["Body"] = value; } }
        public UArray<SkeletalMeshComponent> Eyes { get { return new UArray<SkeletalMeshComponent>(this[nameof(Eyes)].Address); } }
        public UArray<PassthroughSubHealthComponent> subHealth { get { return new UArray<PassthroughSubHealthComponent>(this[nameof(subHealth)].Address); } }
        public HealthDamageTracker DamageTracker { get { return this[nameof(DamageTracker)].As<HealthDamageTracker>(); } set { this["DamageTracker"] = value; } }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public UArray<CaretakerActionComponent> Actions { get { return new UArray<CaretakerActionComponent>(this[nameof(Actions)].Address); } }
        public CaretakerActionComponent CurrentAction { get { return this[nameof(CurrentAction)].As<CaretakerActionComponent>(); } set { this["CurrentAction"] = value; } }
        public UArray<AnimSequenceBase> HitReactions { get { return new UArray<AnimSequenceBase>(this[nameof(HitReactions)].Address); } }
        public int CurrentStage { get { return this[nameof(CurrentStage)].GetValue<int>(); } set { this[nameof(CurrentStage)].SetValue<int>(value); } }
        public int TargetRotationRate { get { return this[nameof(TargetRotationRate)].GetValue<int>(); } set { this[nameof(TargetRotationRate)].SetValue<int>(value); } }
        public UArray<float> RotationRates { get { return new UArray<float>(this[nameof(RotationRates)].Address); } }
        public float Server_Rotation { get { return this[nameof(Server_Rotation)].GetValue<float>(); } set { this[nameof(Server_Rotation)].SetValue<float>(value); } }
        public bool IsInStageCooldown { get { return this[nameof(IsInStageCooldown)].Flag; } set { this[nameof(IsInStageCooldown)].Flag = value; } }
        public bool IsWeakpointAVisible { get { return this[nameof(IsWeakpointAVisible)].Flag; } set { this[nameof(IsWeakpointAVisible)].Flag = value; } }
        public bool IsWeakpointBVisible { get { return this[nameof(IsWeakpointBVisible)].Flag; } set { this[nameof(IsWeakpointBVisible)].Flag = value; } }
        public bool IsWeakpointCVisible { get { return this[nameof(IsWeakpointCVisible)].Flag; } set { this[nameof(IsWeakpointCVisible)].Flag = value; } }
        public bool IsWeakpointDVisible { get { return this[nameof(IsWeakpointDVisible)].Flag; } set { this[nameof(IsWeakpointDVisible)].Flag = value; } }
        public ECaretakerSpawnType ActiveSpawnType { get { return (ECaretakerSpawnType)this[nameof(ActiveSpawnType)].GetValue<int>(); } set { this[nameof(ActiveSpawnType)].SetValue<int>((int)value); } }
        public int AoEStage { get { return this[nameof(AoEStage)].GetValue<int>(); } set { this[nameof(AoEStage)].SetValue<int>(value); } }
        public byte OpenEye { get { return this[nameof(OpenEye)].GetValue<byte>(); } set { this[nameof(OpenEye)].SetValue<byte>(value); } }
        public void WakeUp() { Invoke(nameof(WakeUp)); }
        public void SetTargetRotationRate(int rateIndex) { Invoke(nameof(SetTargetRotationRate), rateIndex); }
        public void OpenRandomEye(bool forbidLastEye) { Invoke(nameof(OpenRandomEye), forbidLastEye); }
        public void OnStartHideFromDamage() { Invoke(nameof(OnStartHideFromDamage)); }
        public void OnRep_Server_Rotation() { Invoke(nameof(OnRep_Server_Rotation)); }
        public void OnRep_OpenEye() { Invoke(nameof(OnRep_OpenEye)); }
        public void OnRep_CurrentStage() { Invoke(nameof(OnRep_CurrentStage)); }
        public void OnNewStage(int stageIndex) { Invoke(nameof(OnNewStage), stageIndex); }
        public void OnEyeOpened(SkeletalMeshComponent eye) { Invoke(nameof(OnEyeOpened), eye); }
        public void OnEyeClosed(SkeletalMeshComponent eye) { Invoke(nameof(OnEyeClosed), eye); }
        public void OnDamageTaken(float amount) { Invoke(nameof(OnDamageTaken), amount); }
        public bool IsAwake() { return Invoke<bool>(nameof(IsAwake)); }
        public bool IsAnyEyeOpen() { return Invoke<bool>(nameof(IsAnyEyeOpen)); }
        public void InitiateNextStage() { Invoke(nameof(InitiateNextStage)); }
        public void InitCaretakerActions(UArray<CaretakerActionComponent> carettakeractions) { Invoke(nameof(InitCaretakerActions), carettakeractions); }
        public void CloseAllEyes() { Invoke(nameof(CloseAllEyes)); }
    }
    public class CaretagerBodyAnimInstance : EnemyAnimInstance
    {
        public CaretagerBodyAnimInstance(nint addr) : base(addr) { }
        public bool CoolingOff { get { return this[nameof(CoolingOff)].Flag; } set { this[nameof(CoolingOff)].Flag = value; } }
        public bool IsWeakpointAVisible { get { return this[nameof(IsWeakpointAVisible)].Flag; } set { this[nameof(IsWeakpointAVisible)].Flag = value; } }
        public bool IsWeakpointBVisible { get { return this[nameof(IsWeakpointBVisible)].Flag; } set { this[nameof(IsWeakpointBVisible)].Flag = value; } }
        public bool IsWeakpointCVisible { get { return this[nameof(IsWeakpointCVisible)].Flag; } set { this[nameof(IsWeakpointCVisible)].Flag = value; } }
        public bool IsWeakpointDVisible { get { return this[nameof(IsWeakpointDVisible)].Flag; } set { this[nameof(IsWeakpointDVisible)].Flag = value; } }
        public float RotationAngle { get { return this[nameof(RotationAngle)].GetValue<float>(); } set { this[nameof(RotationAngle)].SetValue<float>(value); } }
        public int AoEStage { get { return this[nameof(AoEStage)].GetValue<int>(); } set { this[nameof(AoEStage)].SetValue<int>(value); } }
        public bool IsSpawningDrones { get { return this[nameof(IsSpawningDrones)].Flag; } set { this[nameof(IsSpawningDrones)].Flag = value; } }
        public bool IsSpawningBombs { get { return this[nameof(IsSpawningBombs)].Flag; } set { this[nameof(IsSpawningBombs)].Flag = value; } }
        public bool IsSpawningShredders { get { return this[nameof(IsSpawningShredders)].Flag; } set { this[nameof(IsSpawningShredders)].Flag = value; } }
        public bool IsSpawningTurrets { get { return this[nameof(IsSpawningTurrets)].Flag; } set { this[nameof(IsSpawningTurrets)].Flag = value; } }
    }
    public class CaretakerEyeAnimInstance : EnemyAnimInstance
    {
        public CaretakerEyeAnimInstance(nint addr) : base(addr) { }
        public bool IsOpen { get { return this[nameof(IsOpen)].Flag; } set { this[nameof(IsOpen)].Flag = value; } }
    }
    public class CaretakerActionComponent : ActorComponent
    {
        public CaretakerActionComponent(nint addr) : base(addr) { }
        public bool StartTickOnUse { get { return this[nameof(StartTickOnUse)].Flag; } set { this[nameof(StartTickOnUse)].Flag = value; } }
        public bool isUsing { get { return this[nameof(isUsing)].Flag; } set { this[nameof(isUsing)].Flag = value; } }
        public void UseAction() { Invoke(nameof(UseAction)); }
        public void TriggerAction() { Invoke(nameof(TriggerAction)); }
        public void StopUsing() { Invoke(nameof(StopUsing)); }
        public void OnTriggered() { Invoke(nameof(OnTriggered)); }
        public void OnStopped() { Invoke(nameof(OnStopped)); }
        public void OnStarted() { Invoke(nameof(OnStarted)); }
        public void OnRep_IsUsing() { Invoke(nameof(OnRep_IsUsing)); }
        public Caretaker GetCaretaker() { return Invoke<Caretaker>(nameof(GetCaretaker)); }
        public bool CanUse() { return Invoke<bool>(nameof(CanUse)); }
    }
    public class UsableComponentBase : ActorComponent
    {
        public UsableComponentBase(nint addr) : base(addr) { }
        public Object OnClientBeginUse { get { return this[nameof(OnClientBeginUse)]; } set { this[nameof(OnClientBeginUse)] = value; } }
        public int CallbackKeys { get { return this[nameof(CallbackKeys)].GetValue<int>(); } set { this[nameof(CallbackKeys)].SetValue<int>(value); } }
        public float UseCooldown { get { return this[nameof(UseCooldown)].GetValue<float>(); } set { this[nameof(UseCooldown)].SetValue<float>(value); } }
        public UseAnimationSetting AnimationSettings { get { return this[nameof(AnimationSettings)].As<UseAnimationSetting>(); } set { this["AnimationSettings"] = value; } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public SceneComponent RestrictToCollider { get { return this[nameof(RestrictToCollider)].As<SceneComponent>(); } set { this["RestrictToCollider"] = value; } }
        public bool UsableHidesPlaceables { get { return this[nameof(UsableHidesPlaceables)].Flag; } set { this[nameof(UsableHidesPlaceables)].Flag = value; } }
        public bool IsRayTraceTriggered { get { return this[nameof(IsRayTraceTriggered)].Flag; } set { this[nameof(IsRayTraceTriggered)].Flag = value; } }
        public bool ResetUsingOnCompletion { get { return this[nameof(ResetUsingOnCompletion)].Flag; } set { this[nameof(ResetUsingOnCompletion)].Flag = value; } }
        public UseConditionSet UseConditions { get { return this[nameof(UseConditions)].As<UseConditionSet>(); } set { this["UseConditions"] = value; } }
        public bool IsClientPredictive { get { return this[nameof(IsClientPredictive)].Flag; } set { this[nameof(IsClientPredictive)].Flag = value; } }
        public bool ThirdPersonWhileUsing { get { return this[nameof(ThirdPersonWhileUsing)].Flag; } set { this[nameof(ThirdPersonWhileUsing)].Flag = value; } }
        public void SetUseRestrictions(UseConditionSet set) { Invoke(nameof(SetUseRestrictions), set); }
        public void SetRayTraceTriggered(bool rayTraceTriggered) { Invoke(nameof(SetRayTraceTriggered), rayTraceTriggered); }
        public void SetAnimationSettings(UseAnimationSetting Settings) { Invoke(nameof(SetAnimationSettings), Settings); }
        public Object GetUseText(PlayerCharacter User) { return Invoke<Object>(nameof(GetUseText), User); }
        public float GetUseProgressInPercent(PlayerCharacter User) { return Invoke<float>(nameof(GetUseProgressInPercent), User); }
        public Texture2D GetUsableIcon() { return Invoke<Texture2D>(nameof(GetUsableIcon)); }
        public bool GetShowUsingUI() { return Invoke<bool>(nameof(GetShowUsingUI)); }
        public bool GetIsRayTraceTriggerd() { return Invoke<bool>(nameof(GetIsRayTraceTriggerd)); }
        public bool GetHideProgressBar(PlayerCharacter User) { return Invoke<bool>(nameof(GetHideProgressBar), User); }
        public bool GetHideActionText(PlayerCharacter User) { return Invoke<bool>(nameof(GetHideActionText), User); }
        public void EndUse(PlayerCharacter User) { Invoke(nameof(EndUse), User); }
        public void BeginUse(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(BeginUse), User, Key); }
    }
    public class UsableComponent : UsableComponentBase
    {
        public UsableComponent(nint addr) : base(addr) { }
        public DialogDataAsset ShoutBegin { get { return this[nameof(ShoutBegin)].As<DialogDataAsset>(); } set { this["ShoutBegin"] = value; } }
        public Object UseText { get { return this[nameof(UseText)]; } set { this[nameof(UseText)] = value; } }
        public bool ResetOnFail { get { return this[nameof(ResetOnFail)].Flag; } set { this[nameof(ResetOnFail)].Flag = value; } }
        public bool SwitchToUsingState { get { return this[nameof(SwitchToUsingState)].Flag; } set { this[nameof(SwitchToUsingState)].Flag = value; } }
        public void SetUseText(Object NewText) { Invoke(nameof(SetUseText), NewText); }
        public bool HasDuration() { return Invoke<bool>(nameof(HasDuration)); }
    }
    public class InstantUsable : UsableComponent
    {
        public InstantUsable(nint addr) : base(addr) { }
        public Object OnUsedBy { get { return this[nameof(OnUsedBy)]; } set { this[nameof(OnUsedBy)] = value; } }
        public Object OnUsableChanged { get { return this[nameof(OnUsableChanged)]; } set { this[nameof(OnUsableChanged)] = value; } }
        public bool bShowUsingUI { get { return this[nameof(bShowUsingUI)].Flag; } set { this[nameof(bShowUsingUI)].Flag = value; } }
        public SoundCue AudioCompletedUse { get { return this[nameof(AudioCompletedUse)].As<SoundCue>(); } set { this["AudioCompletedUse"] = value; } }
        public bool UseDelayedAudio { get { return this[nameof(UseDelayedAudio)].Flag; } set { this[nameof(UseDelayedAudio)].Flag = value; } }
        public float AudioDelay { get { return this[nameof(AudioDelay)].GetValue<float>(); } set { this[nameof(AudioDelay)].SetValue<float>(value); } }
        public bool RefreshDelayOnNewUse { get { return this[nameof(RefreshDelayOnNewUse)].Flag; } set { this[nameof(RefreshDelayOnNewUse)].Flag = value; } }
        public bool Usable { get { return this[nameof(Usable)].Flag; } set { this[nameof(Usable)].Flag = value; } }
        public bool TurnOffAfterUse { get { return this[nameof(TurnOffAfterUse)].Flag; } set { this[nameof(TurnOffAfterUse)].Flag = value; } }
        public void SetCanUse(bool CanUse) { Invoke(nameof(SetCanUse), CanUse); }
        public void OnRep_Usable() { Invoke(nameof(OnRep_Usable)); }
    }
    public class CarriableInstantUsable : InstantUsable
    {
        public CarriableInstantUsable(nint addr) : base(addr) { }
    }
    public class CarriableComponent : ActorComponent
    {
        public CarriableComponent(nint addr) : base(addr) { }
        public Object OnPickedUp { get { return this[nameof(OnPickedUp)]; } set { this[nameof(OnPickedUp)] = value; } }
        public Object OnDropped { get { return this[nameof(OnDropped)]; } set { this[nameof(OnDropped)] = value; } }
        public Object ShoutWhileCarrying { get { return this[nameof(ShoutWhileCarrying)]; } set { this[nameof(ShoutWhileCarrying)] = value; } }
        public ItemCharacterAnimationSet OverrideCarryAnimationSet { get { return this[nameof(OverrideCarryAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["OverrideCarryAnimationSet"] = value; } }
        public UseAnimationSetting OverrideThrowAnimationSet { get { return this[nameof(OverrideThrowAnimationSet)].As<UseAnimationSetting>(); } set { this["OverrideThrowAnimationSet"] = value; } }
        public PlayerCharacter CarriedBy { get { return this[nameof(CarriedBy)].As<PlayerCharacter>(); } set { this["CarriedBy"] = value; } }
        public Vector Offset { get { return this[nameof(Offset)].As<Vector>(); } set { this["Offset"] = value; } }
        public bool PickupItem(PlayerCharacter byCharacter) { return Invoke<bool>(nameof(PickupItem), byCharacter); }
        public void DropItem() { Invoke(nameof(DropItem)); }
        public void AttachChanged(bool Attached, Vector PrevScale) { Invoke(nameof(AttachChanged), Attached, PrevScale); }
    }
    public class ResourceCreator : DataAsset
    {
        public ResourceCreator(nint addr) : base(addr) { }
    }
    public class CarvedResourceCreator : ResourceCreator
    {
        public CarvedResourceCreator(nint addr) : base(addr) { }
        public CarvedResourceData Resource { get { return this[nameof(Resource)].As<CarvedResourceData>(); } set { this["Resource"] = value; } }
        public bool ScaleToResourceDistribution { get { return this[nameof(ScaleToResourceDistribution)].Flag; } set { this[nameof(ScaleToResourceDistribution)].Flag = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public IRandRange NumCarvers { get { return this[nameof(NumCarvers)].As<IRandRange>(); } set { this["NumCarvers"] = value; } }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public float CarveOffsetRadius { get { return this[nameof(CarveOffsetRadius)].GetValue<float>(); } set { this[nameof(CarveOffsetRadius)].SetValue<float>(value); } }
        public Object SpawnAttachClass { get { return this[nameof(SpawnAttachClass)]; } set { this[nameof(SpawnAttachClass)] = value; } }
        public float AttachSpawnOffsetDistance { get { return this[nameof(AttachSpawnOffsetDistance)].GetValue<float>(); } set { this[nameof(AttachSpawnOffsetDistance)].SetValue<float>(value); } }
        public TerrainMaterial TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterial>(); } set { this["TerrainMaterial"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public CarveOptionsCellSize CarveCellSize { get { return (CarveOptionsCellSize)this[nameof(CarveCellSize)].GetValue<int>(); } set { this[nameof(CarveCellSize)].SetValue<int>((int)value); } }
        public UArray<UDebrisCarveMesh> Meshes { get { return new UArray<UDebrisCarveMesh>(this[nameof(Meshes)].Address); } }
        public UArray<ResourceDebris> Debris { get { return new UArray<ResourceDebris>(this[nameof(Debris)].Address); } }
    }
    public class ResourceData : DataAsset
    {
        public ResourceData(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object TitlePlural { get { return this[nameof(TitlePlural)]; } set { this[nameof(TitlePlural)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public int BuyingPrice { get { return this[nameof(BuyingPrice)].GetValue<int>(); } set { this[nameof(BuyingPrice)].SetValue<int>(value); } }
        public int SellingPrice { get { return this[nameof(SellingPrice)].GetValue<int>(); } set { this[nameof(SellingPrice)].SetValue<int>(value); } }
        public MissionStat MinedMissionStat { get { return this[nameof(MinedMissionStat)].As<MissionStat>(); } set { this["MinedMissionStat"] = value; } }
        public bool IsCraftingMaterial { get { return this[nameof(IsCraftingMaterial)].Flag; } set { this[nameof(IsCraftingMaterial)].Flag = value; } }
        public bool IsTradable { get { return this[nameof(IsTradable)].Flag; } set { this[nameof(IsTradable)].Flag = value; } }
        public bool ForceShowOnEndScreen { get { return this[nameof(ForceShowOnEndScreen)].Flag; } set { this[nameof(ForceShowOnEndScreen)].Flag = value; } }
        public bool AffectedByMutators { get { return this[nameof(AffectedByMutators)].Flag; } set { this[nameof(AffectedByMutators)].Flag = value; } }
        public bool ScaleToMissionLength { get { return this[nameof(ScaleToMissionLength)].Flag; } set { this[nameof(ScaleToMissionLength)].Flag = value; } }
        public bool AutoDepositOnDisconnect { get { return this[nameof(AutoDepositOnDisconnect)].Flag; } set { this[nameof(AutoDepositOnDisconnect)].Flag = value; } }
        public bool ScaleToHazardLevel { get { return this[nameof(ScaleToHazardLevel)].Flag; } set { this[nameof(ScaleToHazardLevel)].Flag = value; } }
        public bool ShowSeparatelyInEndScreen { get { return this[nameof(ShowSeparatelyInEndScreen)].Flag; } set { this[nameof(ShowSeparatelyInEndScreen)].Flag = value; } }
        public Object Spawnable { get { return this[nameof(Spawnable)]; } set { this[nameof(Spawnable)] = value; } }
        public bool IsWholeNumberResource { get { return this[nameof(IsWholeNumberResource)].Flag; } set { this[nameof(IsWholeNumberResource)].Flag = value; } }
        public int CreditValue { get { return this[nameof(CreditValue)].GetValue<int>(); } set { this[nameof(CreditValue)].SetValue<int>(value); } }
        public int XPValue { get { return this[nameof(XPValue)].GetValue<int>(); } set { this[nameof(XPValue)].SetValue<int>(value); } }
        public float SeasonXPMultiplier { get { return this[nameof(SeasonXPMultiplier)].GetValue<float>(); } set { this[nameof(SeasonXPMultiplier)].SetValue<float>(value); } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public float GetOwnedAmount(Object WorldContextObject) { return Invoke<float>(nameof(GetOwnedAmount), WorldContextObject); }
        public bool GetIsTradableCraftingMaterial() { return Invoke<bool>(nameof(GetIsTradableCraftingMaterial)); }
    }
    public class CarvedResourceData : ResourceData
    {
        public CarvedResourceData(nint addr) : base(addr) { }
        public Object CarvedResourceCreator { get { return this[nameof(CarvedResourceCreator)]; } set { this[nameof(CarvedResourceCreator)] = value; } }
        public float UnitsPerCarver { get { return this[nameof(UnitsPerCarver)].GetValue<float>(); } set { this[nameof(UnitsPerCarver)].SetValue<float>(value); } }
        public CarvedResourceCreator LoadResourceCreator() { return Invoke<CarvedResourceCreator>(nameof(LoadResourceCreator)); }
        public float GetUnitsPerCarver() { return Invoke<float>(nameof(GetUnitsPerCarver)); }
        public float GetTargetAmount(ProceduralSetup pls) { return Invoke<float>(nameof(GetTargetAmount), pls); }
    }
    public class CaveEntranceComponent : PrimitiveComponent
    {
        public CaveEntranceComponent(nint addr) : base(addr) { }
        public ECaveEntranceType Direction { get { return (ECaveEntranceType)this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>((int)value); } }
        public ECaveEntrancePriority Priority { get { return (ECaveEntrancePriority)this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>((int)value); } }
    }
    public class CaveEntrance : GenerationItem
    {
        public CaveEntrance(nint addr) : base(addr) { }
        public CaveEntranceComponent CaveEntranceComponent { get { return this[nameof(CaveEntranceComponent)].As<CaveEntranceComponent>(); } set { this["CaveEntranceComponent"] = value; } }
        public ECaveEntranceType EntranceType { get { return (ECaveEntranceType)this[nameof(EntranceType)].GetValue<int>(); } set { this[nameof(EntranceType)].SetValue<int>((int)value); } }
        public bool HasBeenConverted { get { return this[nameof(HasBeenConverted)].Flag; } set { this[nameof(HasBeenConverted)].Flag = value; } }
    }
    public class SpawnResourceGenerationItem : GenerationItem
    {
        public SpawnResourceGenerationItem(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float BaseAmount { get { return this[nameof(BaseAmount)].GetValue<float>(); } set { this[nameof(BaseAmount)].SetValue<float>(value); } }
        public SphereComponent Sphere { get { return this[nameof(Sphere)].As<SphereComponent>(); } set { this["Sphere"] = value; } }
    }
    public class SpawnActorGenerationItem : GenerationItem
    {
        public SpawnActorGenerationItem(nint addr) : base(addr) { }
        public Object ActorToSpawn { get { return this[nameof(ActorToSpawn)]; } set { this[nameof(ActorToSpawn)] = value; } }
        public BoxComponent Box { get { return this[nameof(Box)].As<BoxComponent>(); } set { this["Box"] = value; } }
    }
    public class SpawnTriggerItem : GenerationItem
    {
        public SpawnTriggerItem(nint addr) : base(addr) { }
        public Object Trigger { get { return this[nameof(Trigger)]; } set { this[nameof(Trigger)] = value; } }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
    }
    public class SubRoomItem : GenerationItem
    {
        public SubRoomItem(nint addr) : base(addr) { }
        public RoomGenerator RoomGenerator { get { return this[nameof(RoomGenerator)].As<RoomGenerator>(); } set { this["RoomGenerator"] = value; } }
        public int Layer { get { return this[nameof(Layer)].GetValue<int>(); } set { this[nameof(Layer)].SetValue<int>(value); } }
    }
    public class RandomSubRoomItem : GenerationItem
    {
        public RandomSubRoomItem(nint addr) : base(addr) { }
        public RoomGeneratorGroup RoomGroup { get { return this[nameof(RoomGroup)].As<RoomGeneratorGroup>(); } set { this["RoomGroup"] = value; } }
        public GameplayTagQuery tagQuery { get { return this[nameof(tagQuery)].As<GameplayTagQuery>(); } set { this["tagQuery"] = value; } }
        public int Layer { get { return this[nameof(Layer)].GetValue<int>(); } set { this[nameof(Layer)].SetValue<int>(value); } }
    }
    public class DropPodCalldownLocationItem : GenerationItem
    {
        public DropPodCalldownLocationItem(nint addr) : base(addr) { }
        public Object CalldownClass { get { return this[nameof(CalldownClass)]; } set { this[nameof(CalldownClass)] = value; } }
    }
    public class RoomBurner : Actor
    {
        public RoomBurner(nint addr) : base(addr) { }
        public bool LiveUpdateEditor { get { return this[nameof(LiveUpdateEditor)].Flag; } set { this[nameof(LiveUpdateEditor)].Flag = value; } }
        public ERoomMirror MirrorTest { get { return (ERoomMirror)this[nameof(MirrorTest)].GetValue<int>(); } set { this[nameof(MirrorTest)].SetValue<int>((int)value); } }
        public RoomGenerator RoomGenerator { get { return this[nameof(RoomGenerator)].As<RoomGenerator>(); } set { this["RoomGenerator"] = value; } }
        public float RoomRadius { get { return this[nameof(RoomRadius)].GetValue<float>(); } set { this[nameof(RoomRadius)].SetValue<float>(value); } }
        public ERoomMirroringSupport MirrorSupport { get { return (ERoomMirroringSupport)this[nameof(MirrorSupport)].GetValue<int>(); } set { this[nameof(MirrorSupport)].SetValue<int>((int)value); } }
        public bool ShowRoomCollider { get { return this[nameof(ShowRoomCollider)].Flag; } set { this[nameof(ShowRoomCollider)].Flag = value; } }
        public GameplayTagContainer RoomTags { get { return this[nameof(RoomTags)].As<GameplayTagContainer>(); } set { this["RoomTags"] = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public DifficultySetting Difficulty { get { return this[nameof(Difficulty)].As<DifficultySetting>(); } set { this["Difficulty"] = value; } }
        public Object Haz5Mutators { get { return this[nameof(Haz5Mutators)]; } set { this[nameof(Haz5Mutators)] = value; } }
        public int ForcePlayerCount { get { return this[nameof(ForcePlayerCount)].GetValue<int>(); } set { this[nameof(ForcePlayerCount)].SetValue<int>(value); } }
        public bool GenerateDebris { get { return this[nameof(GenerateDebris)].Flag; } set { this[nameof(GenerateDebris)].Flag = value; } }
        public bool GenerateItems { get { return this[nameof(GenerateItems)].Flag; } set { this[nameof(GenerateItems)].Flag = value; } }
        public bool GenerateResources { get { return this[nameof(GenerateResources)].Flag; } set { this[nameof(GenerateResources)].Flag = value; } }
        public bool SpawnEncounters { get { return this[nameof(SpawnEncounters)].Flag; } set { this[nameof(SpawnEncounters)].Flag = value; } }
        public Object TestEnemies { get { return this[nameof(TestEnemies)]; } set { this[nameof(TestEnemies)] = value; } }
        public MissionMutator TestMutator { get { return this[nameof(TestMutator)].As<MissionMutator>(); } set { this["TestMutator"] = value; } }
        public UArray<MissionWarning> TestWarnings { get { return new UArray<MissionWarning>(this[nameof(TestWarnings)].Address); } }
        public MissionChallenge TestChallenge { get { return this[nameof(TestChallenge)].As<MissionChallenge>(); } set { this["TestChallenge"] = value; } }
        public SpecialEvent TestSpecialEvent { get { return this[nameof(TestSpecialEvent)].As<SpecialEvent>(); } set { this["TestSpecialEvent"] = value; } }
        public SpecialEvent TestTreasure { get { return this[nameof(TestTreasure)].As<SpecialEvent>(); } set { this["TestTreasure"] = value; } }
        public MissionTemplate MissionTemplate { get { return this[nameof(MissionTemplate)].As<MissionTemplate>(); } set { this["MissionTemplate"] = value; } }
        public MissionTemplate CustomMissionTemplate { get { return this[nameof(CustomMissionTemplate)].As<MissionTemplate>(); } set { this["CustomMissionTemplate"] = value; } }
        public Object TestObjective { get { return this[nameof(TestObjective)]; } set { this[nameof(TestObjective)] = value; } }
        public DeepCSGWorld CSGWorld { get { return this[nameof(CSGWorld)].As<DeepCSGWorld>(); } set { this["CSGWorld"] = value; } }
        public ProceduralSetup PLSLiveEditor { get { return this[nameof(PLSLiveEditor)].As<ProceduralSetup>(); } set { this["PLSLiveEditor"] = value; } }
        public RoomGenerator LiveEditRoomGenerator { get { return this[nameof(LiveEditRoomGenerator)].As<RoomGenerator>(); } set { this["LiveEditRoomGenerator"] = value; } }
        public void SpawnEncounter(ProceduralSetup Setup) { Invoke(nameof(SpawnEncounter), Setup); }
        public RoomGenerator GetRoomGenerator() { return Invoke<RoomGenerator>(nameof(GetRoomGenerator)); }
    }
    public class InfluenceTester : Actor
    {
        public InfluenceTester(nint addr) : base(addr) { }
        public CaveInfluencer Influencer { get { return this[nameof(Influencer)].As<CaveInfluencer>(); } set { this["Influencer"] = value; } }
        public SphereComponent Sphere { get { return this[nameof(Sphere)].As<SphereComponent>(); } set { this["Sphere"] = value; } }
    }
    public class EnemyPawn : FSDPawn
    {
        public EnemyPawn(nint addr) : base(addr) { }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public PawnStatsComponent Stats { get { return this[nameof(Stats)].As<PawnStatsComponent>(); } set { this["Stats"] = value; } }
        public EnemyPawnAfflictionComponent Affliction { get { return this[nameof(Affliction)].As<EnemyPawnAfflictionComponent>(); } set { this["Affliction"] = value; } }
        public EnemyComponent enemy { get { return this[nameof(enemy)].As<EnemyComponent>(); } set { this["enemy"] = value; } }
        public Object CenterMassSocketName { get { return this[nameof(CenterMassSocketName)]; } set { this[nameof(CenterMassSocketName)] = value; } }
        public QueuedMontage QueuedMontage { get { return this[nameof(QueuedMontage)].As<QueuedMontage>(); } set { this["QueuedMontage"] = value; } }
        public UArray<MaterialInterface> CachedMaterials { get { return new UArray<MaterialInterface>(this[nameof(CachedMaterials)].Address); } }
        public MeshComponent Receive_GetMeshComponent() { return Invoke<MeshComponent>(nameof(Receive_GetMeshComponent)); }
        public void OnRep_QueuedMontage() { Invoke(nameof(OnRep_QueuedMontage)); }
        public SkeletalMeshComponent GetMesh() { return Invoke<SkeletalMeshComponent>(nameof(GetMesh)); }
    }
    public class CaveLeech : EnemyPawn
    {
        public CaveLeech(nint addr) : base(addr) { }
        public SkeletalMeshComponent SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMeshComponent>(); } set { this["SkeletalMesh"] = value; } }
        public GrabberComponent GrabberComponent { get { return this[nameof(GrabberComponent)].As<GrabberComponent>(); } set { this["GrabberComponent"] = value; } }
        public float BiteDamage { get { return this[nameof(BiteDamage)].GetValue<float>(); } set { this[nameof(BiteDamage)].SetValue<float>(value); } }
        public float BitesPerSecond { get { return this[nameof(BitesPerSecond)].GetValue<float>(); } set { this[nameof(BitesPerSecond)].SetValue<float>(value); } }
        public float MaxDistanceXY { get { return this[nameof(MaxDistanceXY)].GetValue<float>(); } set { this[nameof(MaxDistanceXY)].SetValue<float>(value); } }
        public float GrapDistance { get { return this[nameof(GrapDistance)].GetValue<float>(); } set { this[nameof(GrapDistance)].SetValue<float>(value); } }
        public float GrapDelay { get { return this[nameof(GrapDelay)].GetValue<float>(); } set { this[nameof(GrapDelay)].SetValue<float>(value); } }
        public float TentacleSpeed { get { return this[nameof(TentacleSpeed)].GetValue<float>(); } set { this[nameof(TentacleSpeed)].SetValue<float>(value); } }
        public float TentacleRetractSpeed { get { return this[nameof(TentacleRetractSpeed)].GetValue<float>(); } set { this[nameof(TentacleRetractSpeed)].SetValue<float>(value); } }
        public float RetractDuration { get { return this[nameof(RetractDuration)].GetValue<float>(); } set { this[nameof(RetractDuration)].SetValue<float>(value); } }
        public float TentaclePullSpeed { get { return this[nameof(TentaclePullSpeed)].GetValue<float>(); } set { this[nameof(TentaclePullSpeed)].SetValue<float>(value); } }
        public float TentacleDropPlayerSpeed { get { return this[nameof(TentacleDropPlayerSpeed)].GetValue<float>(); } set { this[nameof(TentacleDropPlayerSpeed)].SetValue<float>(value); } }
        public float TentacleDropGroundDistance { get { return this[nameof(TentacleDropGroundDistance)].GetValue<float>(); } set { this[nameof(TentacleDropGroundDistance)].SetValue<float>(value); } }
        public float MaxDropPlayerDuration { get { return this[nameof(MaxDropPlayerDuration)].GetValue<float>(); } set { this[nameof(MaxDropPlayerDuration)].SetValue<float>(value); } }
        public float HeadInterpSpeed { get { return this[nameof(HeadInterpSpeed)].GetValue<float>(); } set { this[nameof(HeadInterpSpeed)].SetValue<float>(value); } }
        public float TentacleAttachOffset { get { return this[nameof(TentacleAttachOffset)].GetValue<float>(); } set { this[nameof(TentacleAttachOffset)].SetValue<float>(value); } }
        public float BiteDistance { get { return this[nameof(BiteDistance)].GetValue<float>(); } set { this[nameof(BiteDistance)].SetValue<float>(value); } }
        public float RevivedGracePeriod { get { return this[nameof(RevivedGracePeriod)].GetValue<float>(); } set { this[nameof(RevivedGracePeriod)].SetValue<float>(value); } }
        public PawnAffliction CaveLeechSenseAffliction { get { return this[nameof(CaveLeechSenseAffliction)].As<PawnAffliction>(); } set { this["CaveLeechSenseAffliction"] = value; } }
        public float StateTime { get { return this[nameof(StateTime)].GetValue<float>(); } set { this[nameof(StateTime)].SetValue<float>(value); } }
        public ECaveLeechState State { get { return (ECaveLeechState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public Vector_NetQuantize TentacleLocation { get { return this[nameof(TentacleLocation)].As<Vector_NetQuantize>(); } set { this["TentacleLocation"] = value; } }
        public Vector_NetQuantize TentacleVelocity { get { return this[nameof(TentacleVelocity)].As<Vector_NetQuantize>(); } set { this["TentacleVelocity"] = value; } }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public HealthComponent HealthTarget { get { return this[nameof(HealthTarget)].As<HealthComponent>(); } set { this["HealthTarget"] = value; } }
        public SceneComponent TentacleHead { get { return this[nameof(TentacleHead)].As<SceneComponent>(); } set { this["TentacleHead"] = value; } }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public Vector GetTentacleTargetLocation() { return Invoke<Vector>(nameof(GetTentacleTargetLocation)); }
        public Vector GetMouthLocation() { return Invoke<Vector>(nameof(GetMouthLocation)); }
        public Actor GetCurrentTarget() { return Invoke<Actor>(nameof(GetCurrentTarget)); }
        public void Died(HealthComponentBase HealthComponent) { Invoke(nameof(Died), HealthComponent); }
        public void Damaged(float amount) { Invoke(nameof(Damaged), amount); }
        public void BP_OnStateChanged(ECaveLeechState NewState) { Invoke(nameof(BP_OnStateChanged), NewState); }
        public void BP_OnBite(HealthComponent TargetHealth) { Invoke(nameof(BP_OnBite), TargetHealth); }
    }
    public class CaveLeechAnimInstance : AnimInstance
    {
        public CaveLeechAnimInstance(nint addr) : base(addr) { }
        public float HeadOffset { get { return this[nameof(HeadOffset)].GetValue<float>(); } set { this[nameof(HeadOffset)].SetValue<float>(value); } }
        public CaveLeech CaveLeech { get { return this[nameof(CaveLeech)].As<CaveLeech>(); } set { this["CaveLeech"] = value; } }
        public SceneComponent CaveLeechHead { get { return this[nameof(CaveLeechHead)].As<SceneComponent>(); } set { this["CaveLeechHead"] = value; } }
        public Rotator BaseRotation { get { return this[nameof(BaseRotation)].As<Rotator>(); } set { this["BaseRotation"] = value; } }
        public Vector BaseLocation { get { return this[nameof(BaseLocation)].As<Vector>(); } set { this["BaseLocation"] = value; } }
        public Vector HeadLocation { get { return this[nameof(HeadLocation)].As<Vector>(); } set { this["HeadLocation"] = value; } }
        public Rotator HeadRotation { get { return this[nameof(HeadRotation)].As<Rotator>(); } set { this["HeadRotation"] = value; } }
        public bool bIdle { get { return this[nameof(bIdle)].Flag; } set { this[nameof(bIdle)].Flag = value; } }
        public bool bTracking { get { return this[nameof(bTracking)].Flag; } set { this[nameof(bTracking)].Flag = value; } }
        public bool bPulling { get { return this[nameof(bPulling)].Flag; } set { this[nameof(bPulling)].Flag = value; } }
        public bool bRetracting { get { return this[nameof(bRetracting)].Flag; } set { this[nameof(bRetracting)].Flag = value; } }
        public bool bDying { get { return this[nameof(bDying)].Flag; } set { this[nameof(bDying)].Flag = value; } }
        public bool bDead { get { return this[nameof(bDead)].Flag; } set { this[nameof(bDead)].Flag = value; } }
        public bool bFrozen { get { return this[nameof(bFrozen)].Flag; } set { this[nameof(bFrozen)].Flag = value; } }
        public bool bBiting { get { return this[nameof(bBiting)].Flag; } set { this[nameof(bBiting)].Flag = value; } }
    }
    public class CaveObject : Actor
    {
        public CaveObject(nint addr) : base(addr) { }
        public bool CanCharacterStandOn { get { return this[nameof(CanCharacterStandOn)].Flag; } set { this[nameof(CanCharacterStandOn)].Flag = value; } }
        public void TriggerNetworkUpdate() { Invoke(nameof(TriggerNetworkUpdate)); }
        public void ResumeNetworkUpdates() { Invoke(nameof(ResumeNetworkUpdates)); }
        public void Recieve_OnGameStarted() { Invoke(nameof(Recieve_OnGameStarted)); }
        public void PauseNetworkUpdates() { Invoke(nameof(PauseNetworkUpdates)); }
    }
    public class CaveScriptComponent : ActorComponent
    {
        public CaveScriptComponent(nint addr) : base(addr) { }
    }
    public class CaveVine : Actor
    {
        public CaveVine(nint addr) : base(addr) { }
        public byte GroundCollisionChannel { get { return this[nameof(GroundCollisionChannel)].GetValue<byte>(); } set { this[nameof(GroundCollisionChannel)].SetValue<byte>(value); } }
        public float IdleSwingSpeed { get { return this[nameof(IdleSwingSpeed)].GetValue<float>(); } set { this[nameof(IdleSwingSpeed)].SetValue<float>(value); } }
        public float ChaseSpeed { get { return this[nameof(ChaseSpeed)].GetValue<float>(); } set { this[nameof(ChaseSpeed)].SetValue<float>(value); } }
        public float MaxReach { get { return this[nameof(MaxReach)].GetValue<float>(); } set { this[nameof(MaxReach)].SetValue<float>(value); } }
        public float GroundOffset { get { return this[nameof(GroundOffset)].GetValue<float>(); } set { this[nameof(GroundOffset)].SetValue<float>(value); } }
        public float NoiseRadius { get { return this[nameof(NoiseRadius)].GetValue<float>(); } set { this[nameof(NoiseRadius)].SetValue<float>(value); } }
        public float NoiseSpeed { get { return this[nameof(NoiseSpeed)].GetValue<float>(); } set { this[nameof(NoiseSpeed)].SetValue<float>(value); } }
        public SplineMeshComponent SplineMeshComponent { get { return this[nameof(SplineMeshComponent)].As<SplineMeshComponent>(); } set { this["SplineMeshComponent"] = value; } }
        public SceneComponent VineHead { get { return this[nameof(VineHead)].As<SceneComponent>(); } set { this["VineHead"] = value; } }
        public Vector VineVelocity { get { return this[nameof(VineVelocity)].As<Vector>(); } set { this["VineVelocity"] = value; } }
        public Vector VineLocation { get { return this[nameof(VineLocation)].As<Vector>(); } set { this["VineLocation"] = value; } }
        public Vector VineStartLocation { get { return this[nameof(VineStartLocation)].As<Vector>(); } set { this["VineStartLocation"] = value; } }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public void BP_OnTargetChanged(HealthComponent NewTarget) { Invoke(nameof(BP_OnTargetChanged), NewTarget); }
        public void BP_OnInitialized() { Invoke(nameof(BP_OnInitialized)); }
    }
    public class CaveWorm : DeepPathfinderCharacter
    {
        public CaveWorm(nint addr) : base(addr) { }
        public SimpleHealthComponent Health { get { return this[nameof(Health)].As<SimpleHealthComponent>(); } set { this["Health"] = value; } }
        public float SearchChunksRadius { get { return this[nameof(SearchChunksRadius)].GetValue<float>(); } set { this[nameof(SearchChunksRadius)].SetValue<float>(value); } }
        public float SearchChunksInterval { get { return this[nameof(SearchChunksInterval)].GetValue<float>(); } set { this[nameof(SearchChunksInterval)].SetValue<float>(value); } }
        public ResourceChunk SpawnResource(Object WorldContext, ResourceData Data, float Size, Transform Transform, Vector Impulse, Vector DropOffset) { return Invoke<ResourceChunk>(nameof(SpawnResource), WorldContext, Data, Size, Transform, Impulse, DropOffset); }
        public void Search() { Invoke(nameof(Search)); }
        public void IncrementKillCount(HealthComponentBase HealthComponent) { Invoke(nameof(IncrementKillCount), HealthComponent); }
        public void DropResource(ResourceData Data, float Size, Vector Impulse, Vector DropOffset) { Invoke(nameof(DropResource), Data, Size, Impulse, DropOffset); }
    }
    public class Maggot : DeepPathfinderCharacter
    {
        public Maggot(nint addr) : base(addr) { }
        public SimpleHealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<SimpleHealthComponent>(); } set { this["HealthComponent"] = value; } }
    }
    public class CellIdFunctionLibrary : BlueprintFunctionLibrary
    {
        public CellIdFunctionLibrary(nint addr) : base(addr) { }
    }
    public class CharacterCameraController : ActorComponent
    {
        public CharacterCameraController(nint addr) : base(addr) { }
        public float StartFOV { get { return this[nameof(StartFOV)].GetValue<float>(); } set { this[nameof(StartFOV)].SetValue<float>(value); } }
        public float targetFov { get { return this[nameof(targetFov)].GetValue<float>(); } set { this[nameof(targetFov)].SetValue<float>(value); } }
        public float TargetFOVSpeed { get { return this[nameof(TargetFOVSpeed)].GetValue<float>(); } set { this[nameof(TargetFOVSpeed)].SetValue<float>(value); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public CameraComponent Camera { get { return this[nameof(Camera)].As<CameraComponent>(); } set { this["Camera"] = value; } }
        public void ResetFOV(float FadeSpeed) { Invoke(nameof(ResetFOV), FadeSpeed); }
        public void FOVChanged(float NewFOV) { Invoke(nameof(FOVChanged), NewFOV); }
        public void FadeToFOVRelative(float targetFov, float FadeSpeed) { Invoke(nameof(FadeToFOVRelative), targetFov, FadeSpeed); }
        public void FadeToFOV(float targetFov, float FadeSpeed) { Invoke(nameof(FadeToFOV), targetFov, FadeSpeed); }
    }
    public class CharacterIntoxicationComponent : ActorComponent
    {
        public CharacterIntoxicationComponent(nint addr) : base(addr) { }
        public Object OnIntoxicationChanged { get { return this[nameof(OnIntoxicationChanged)]; } set { this[nameof(OnIntoxicationChanged)] = value; } }
        public Object OnPassOutDrunk { get { return this[nameof(OnPassOutDrunk)]; } set { this[nameof(OnPassOutDrunk)] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public EIntoxicationState CurrentState { get { return (EIntoxicationState)this[nameof(CurrentState)].GetValue<int>(); } set { this[nameof(CurrentState)].SetValue<int>((int)value); } }
        public LerpingPercent IntoxicationPercent { get { return this[nameof(IntoxicationPercent)].As<LerpingPercent>(); } set { this["IntoxicationPercent"] = value; } }
        public float IntoxicationLerpSpeed { get { return this[nameof(IntoxicationLerpSpeed)].GetValue<float>(); } set { this[nameof(IntoxicationLerpSpeed)].SetValue<float>(value); } }
        public float TimeDrunk { get { return this[nameof(TimeDrunk)].GetValue<float>(); } set { this[nameof(TimeDrunk)].SetValue<float>(value); } }
        public CountDownFloat SoberingUpCoolDown { get { return this[nameof(SoberingUpCoolDown)].As<CountDownFloat>(); } set { this["SoberingUpCoolDown"] = value; } }
        public byte SoberingPercent { get { return this[nameof(SoberingPercent)].GetValue<byte>(); } set { this[nameof(SoberingPercent)].SetValue<byte>(value); } }
        public void ReceiveStateChange(EIntoxicationState NewState) { Invoke(nameof(ReceiveStateChange), NewState); }
        public void ReceivePassOutDrunk() { Invoke(nameof(ReceivePassOutDrunk)); }
        public void ReceiveDrunkTick(float DeltaTime, float DrunkTime) { Invoke(nameof(ReceiveDrunkTick), DeltaTime, DrunkTime); }
        public void ReceiveDrunkEnd() { Invoke(nameof(ReceiveDrunkEnd)); }
        public void ReceiveDrunkBegin() { Invoke(nameof(ReceiveDrunkBegin)); }
        public void PassOutDrunkSignature__DelegateSignature(PlayerCharacter Player) { Invoke(nameof(PassOutDrunkSignature__DelegateSignature), Player); }
        public bool IsPassOutDrunk() { return Invoke<bool>(nameof(IsPassOutDrunk)); }
        public bool IsOnSpaceRig() { return Invoke<bool>(nameof(IsOnSpaceRig)); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool IsDrunk() { return Invoke<bool>(nameof(IsDrunk)); }
        public void IntoxicationProgressSignature__DelegateSignature(PlayerCharacter Player, float Progress) { Invoke(nameof(IntoxicationProgressSignature__DelegateSignature), Player, Progress); }
        public bool HasAuthority() { return Invoke<bool>(nameof(HasAuthority)); }
        public float GetSoberingUpCoolDown() { return Invoke<float>(nameof(GetSoberingUpCoolDown)); }
        public float GetIntoxicationProgressMapped(CurveFloat Curve) { return Invoke<float>(nameof(GetIntoxicationProgressMapped), Curve); }
        public float GetIntoxicationProgress() { return Invoke<float>(nameof(GetIntoxicationProgress)); }
        public int GetAlcoholPct(EDrinkableAlcoholStrength Strength) { return Invoke<int>(nameof(GetAlcoholPct), Strength); }
        public void Consume(DrinkableDataAsset Drinkable) { Invoke(nameof(Consume), Drinkable); }
        public void ClearIntoxication() { Invoke(nameof(ClearIntoxication)); }
    }
    public class CharacterRecoilComponent : ActorComponent
    {
        public CharacterRecoilComponent(nint addr) : base(addr) { }
        public Vector Recoil { get { return this[nameof(Recoil)].As<Vector>(); } set { this["Recoil"] = value; } }
        public Vector RecoilVelocity { get { return this[nameof(RecoilVelocity)].As<Vector>(); } set { this["RecoilVelocity"] = value; } }
        public Vector PrevError { get { return this[nameof(PrevError)].As<Vector>(); } set { this["PrevError"] = value; } }
    }
    public class CharacterSettings : DataAsset
    {
        public CharacterSettings(nint addr) : base(addr) { }
        public UArray<Object> RankedHeroClasses { get { return new UArray<Object>(this[nameof(RankedHeroClasses)].Address); } }
        public UArray<Object> PlayerRankNames { get { return new UArray<Object>(this[nameof(PlayerRankNames)].Address); } }
        public Object InventoryLists { get { return this[nameof(InventoryLists)]; } set { this[nameof(InventoryLists)] = value; } }
        public UArray<int> CharacterXPLevels { get { return new UArray<int>(this[nameof(CharacterXPLevels)].Address); } }
        public Object PlayerCharacterIDMap { get { return this[nameof(PlayerCharacterIDMap)]; } set { this[nameof(PlayerCharacterIDMap)] = value; } }
        public UArray<PlayerCharacterID> PlayerCharacterIDs { get { return new UArray<PlayerCharacterID>(this[nameof(PlayerCharacterIDs)].Address); } }
        public PlayerCharacterID BoscoID { get { return this[nameof(BoscoID)].As<PlayerCharacterID>(); } set { this["BoscoID"] = value; } }
        public PlayerCharacterID DefaultCharacterID { get { return this[nameof(DefaultCharacterID)].As<PlayerCharacterID>(); } set { this["DefaultCharacterID"] = value; } }
        public PlayerCharacterID DefaultEditorCharacterID { get { return this[nameof(DefaultEditorCharacterID)].As<PlayerCharacterID>(); } set { this["DefaultEditorCharacterID"] = value; } }
        public SkeletalMesh NoHead { get { return this[nameof(NoHead)].As<SkeletalMesh>(); } set { this["NoHead"] = value; } }
        public SkeletalMesh DefaultHead { get { return this[nameof(DefaultHead)].As<SkeletalMesh>(); } set { this["DefaultHead"] = value; } }
        public SkeletalMesh HeadForMasks { get { return this[nameof(HeadForMasks)].As<SkeletalMesh>(); } set { this["HeadForMasks"] = value; } }
        public SkeletalMesh ThickNeck { get { return this[nameof(ThickNeck)].As<SkeletalMesh>(); } set { this["ThickNeck"] = value; } }
        public SkeletalMesh ThinNeck { get { return this[nameof(ThinNeck)].As<SkeletalMesh>(); } set { this["ThinNeck"] = value; } }
        public SkeletalMesh FlatEars { get { return this[nameof(FlatEars)].As<SkeletalMesh>(); } set { this["FlatEars"] = value; } }
        public SkeletalMesh FaceOnly { get { return this[nameof(FaceOnly)].As<SkeletalMesh>(); } set { this["FaceOnly"] = value; } }
        public SkeletalMesh EyesOnly { get { return this[nameof(EyesOnly)].As<SkeletalMesh>(); } set { this["EyesOnly"] = value; } }
        public Object CarriableBagClass { get { return this[nameof(CarriableBagClass)]; } set { this[nameof(CarriableBagClass)] = value; } }
        public UseAnimationSetting ThrowItemAnimSettings { get { return this[nameof(ThrowItemAnimSettings)].As<UseAnimationSetting>(); } set { this["ThrowItemAnimSettings"] = value; } }
        public Object CampaignManagerClass { get { return this[nameof(CampaignManagerClass)]; } set { this[nameof(CampaignManagerClass)] = value; } }
        public Object CharacterVanityItems { get { return this[nameof(CharacterVanityItems)]; } set { this[nameof(CharacterVanityItems)] = value; } }
        public DialogDataAsset AutoReloadShout { get { return this[nameof(AutoReloadShout)].As<DialogDataAsset>(); } set { this["AutoReloadShout"] = value; } }
        public DebrisPositioning TeleportPositioning { get { return this[nameof(TeleportPositioning)].As<DebrisPositioning>(); } set { this["TeleportPositioning"] = value; } }
        public Object TeleportPlacement { get { return this[nameof(TeleportPlacement)]; } set { this[nameof(TeleportPlacement)] = value; } }
        public Object CharacterData { get { return this[nameof(CharacterData)]; } set { this[nameof(CharacterData)] = value; } }
        public void PreloadAllInventories(AsyncManager AsyncManager) { Invoke(nameof(PreloadAllInventories), AsyncManager); }
        public PlayerCharacterID GetPlayerCharacterID(Guid ID) { return Invoke<PlayerCharacterID>(nameof(GetPlayerCharacterID), ID); }
        public InventoryList GetInventoryList(PlayerCharacterID characterID) { return Invoke<InventoryList>(nameof(GetInventoryList), characterID); }
    }
    public class CharacterSightComponent : ActorComponent
    {
        public CharacterSightComponent(nint addr) : base(addr) { }
        public Object OnTargetChanged { get { return this[nameof(OnTargetChanged)]; } set { this[nameof(OnTargetChanged)] = value; } }
        public float TargetMaxDistance { get { return this[nameof(TargetMaxDistance)].GetValue<float>(); } set { this[nameof(TargetMaxDistance)].SetValue<float>(value); } }
        public byte TraceChannel { get { return this[nameof(TraceChannel)].GetValue<byte>(); } set { this[nameof(TraceChannel)].SetValue<byte>(value); } }
        public UArray<Object> IgnoredActors { get { return new UArray<Object>(this[nameof(IgnoredActors)].Address); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public Object TargetActor { get { return this[nameof(TargetActor)]; } set { this[nameof(TargetActor)] = value; } }
        public Object TargetPrimitive { get { return this[nameof(TargetPrimitive)]; } set { this[nameof(TargetPrimitive)] = value; } }
        public Object TargetInfo { get { return this[nameof(TargetInfo)]; } set { this[nameof(TargetInfo)] = value; } }
        public Object TargetTemperature { get { return this[nameof(TargetTemperature)]; } set { this[nameof(TargetTemperature)] = value; } }
        public Object TargetAfflictions { get { return this[nameof(TargetAfflictions)]; } set { this[nameof(TargetAfflictions)] = value; } }
        public Object TargetHealth { get { return this[nameof(TargetHealth)]; } set { this[nameof(TargetHealth)] = value; } }
        public Object TargetTargetable { get { return this[nameof(TargetTargetable)]; } set { this[nameof(TargetTargetable)] = value; } }
        public float TargetTime { get { return this[nameof(TargetTime)].GetValue<float>(); } set { this[nameof(TargetTime)].SetValue<float>(value); } }
        public UArray<Object> TargetSensors { get { return new UArray<Object>(this[nameof(TargetSensors)].Address); } }
        public ReplicatedCharacterData ReplicatedData { get { return this[nameof(ReplicatedData)].As<ReplicatedCharacterData>(); } set { this["ReplicatedData"] = value; } }
        public void TargetChangedSignature__DelegateSignature(Actor NewTarget, PrimitiveComponent NewPrimitive) { Invoke(nameof(TargetChangedSignature__DelegateSignature), NewTarget, NewPrimitive); }
        public void Server_UpdateTarget(Actor NewActor, PrimitiveComponent NewPrimitive) { Invoke(nameof(Server_UpdateTarget), NewActor, NewPrimitive); }
        public void RemoveIgnoreActor(Actor InActor) { Invoke(nameof(RemoveIgnoreActor), InActor); }
        public void GetSightStartAndEnd(float InMaxDistance, Vector OutStartLocation, Vector OutEndLocation) { Invoke(nameof(GetSightStartAndEnd), InMaxDistance, OutStartLocation, OutEndLocation); }
        public void AddIgnoreActor(Actor InActor) { Invoke(nameof(AddIgnoreActor), InActor); }
    }
    public class CharacterSightSensorBase : ActorComponent
    {
        public CharacterSightSensorBase(nint addr) : base(addr) { }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
    }
    public class CharacterSightSensor : CharacterSightSensorBase
    {
        public CharacterSightSensor(nint addr) : base(addr) { }
        public Object OnSensorActivated { get { return this[nameof(OnSensorActivated)]; } set { this[nameof(OnSensorActivated)] = value; } }
        public Object OnSensorDeactivated { get { return this[nameof(OnSensorDeactivated)]; } set { this[nameof(OnSensorDeactivated)] = value; } }
        public float SensorActiveForMinDuration { get { return this[nameof(SensorActiveForMinDuration)].GetValue<float>(); } set { this[nameof(SensorActiveForMinDuration)].SetValue<float>(value); } }
        public float MinimumDistance { get { return this[nameof(MinimumDistance)].GetValue<float>(); } set { this[nameof(MinimumDistance)].SetValue<float>(value); } }
        public float MaximumDistance { get { return this[nameof(MaximumDistance)].GetValue<float>(); } set { this[nameof(MaximumDistance)].SetValue<float>(value); } }
        public UArray<PrimitiveComponent> RestrictToColliders { get { return new UArray<PrimitiveComponent>(this[nameof(RestrictToColliders)].Address); } }
        public bool bSensorActivated { get { return this[nameof(bSensorActivated)].Flag; } set { this[nameof(bSensorActivated)].Flag = value; } }
        public float TimeActive { get { return this[nameof(TimeActive)].GetValue<float>(); } set { this[nameof(TimeActive)].SetValue<float>(value); } }
        public float LastSeenTime { get { return this[nameof(LastSeenTime)].GetValue<float>(); } set { this[nameof(LastSeenTime)].SetValue<float>(value); } }
    }
    public class CharacterStateComponent : ActorComponent
    {
        public CharacterStateComponent(nint addr) : base(addr) { }
        public byte StateId { get { return this[nameof(StateId)].GetValue<byte>(); } set { this[nameof(StateId)].SetValue<byte>(value); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public DialogDataAsset EnterStateShout { get { return this[nameof(EnterStateShout)].As<DialogDataAsset>(); } set { this["EnterStateShout"] = value; } }
        public DialogDataAsset ExitStateShout { get { return this[nameof(ExitStateShout)].As<DialogDataAsset>(); } set { this["ExitStateShout"] = value; } }
        public DialogDataAsset AttentionShout { get { return this[nameof(AttentionShout)].As<DialogDataAsset>(); } set { this["AttentionShout"] = value; } }
        public PlayerMovementComponent PlayerMovement { get { return this[nameof(PlayerMovement)].As<PlayerMovementComponent>(); } set { this["PlayerMovement"] = value; } }
        public void ReceiveStateTick(float DeltaTime) { Invoke(nameof(ReceiveStateTick), DeltaTime); }
        public void ReceiveStateExit() { Invoke(nameof(ReceiveStateExit)); }
        public void ReceiveStateEnter() { Invoke(nameof(ReceiveStateEnter)); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool HasAuthority() { return Invoke<bool>(nameof(HasAuthority)); }
        public float GetStateTime() { return Invoke<float>(nameof(GetStateTime)); }
        public byte GetStateID() { return Invoke<byte>(nameof(GetStateID)); }
        public bool GetStateActive() { return Invoke<bool>(nameof(GetStateActive)); }
        public PlayerMovementComponent GetCharacterMovement() { return Invoke<PlayerMovementComponent>(nameof(GetCharacterMovement)); }
    }
    public class CharacterUseComponent : ActorComponent
    {
        public CharacterUseComponent(nint addr) : base(addr) { }
        public Object OnBeginHoveringEvent { get { return this[nameof(OnBeginHoveringEvent)]; } set { this[nameof(OnBeginHoveringEvent)] = value; } }
        public Object OnEndHoveringEvent { get { return this[nameof(OnEndHoveringEvent)]; } set { this[nameof(OnEndHoveringEvent)] = value; } }
        public Object OnBeginUsingEvent { get { return this[nameof(OnBeginUsingEvent)]; } set { this[nameof(OnBeginUsingEvent)] = value; } }
        public Object OnEndUsingEvent { get { return this[nameof(OnEndUsingEvent)]; } set { this[nameof(OnEndUsingEvent)] = value; } }
        public Object OnDepositingBegin { get { return this[nameof(OnDepositingBegin)]; } set { this[nameof(OnDepositingBegin)] = value; } }
        public Object OnDepositingEnd { get { return this[nameof(OnDepositingEnd)]; } set { this[nameof(OnDepositingEnd)] = value; } }
        public float UseDistance { get { return this[nameof(UseDistance)].GetValue<float>(); } set { this[nameof(UseDistance)].SetValue<float>(value); } }
        public CharacterUseState State { get { return this[nameof(State)].As<CharacterUseState>(); } set { this["State"] = value; } }
        public CharacterUseState LocalState { get { return this[nameof(LocalState)].As<CharacterUseState>(); } set { this["LocalState"] = value; } }
        public CharacterUseState LastRequestedState { get { return this[nameof(LastRequestedState)].As<CharacterUseState>(); } set { this["LastRequestedState"] = value; } }
        public UsableComponentBase LastBeginUseUsable { get { return this[nameof(LastBeginUseUsable)].As<UsableComponentBase>(); } set { this["LastBeginUseUsable"] = value; } }
        public UArray<UsableComponentBase> UsableComponentsCache { get { return new UArray<UsableComponentBase>(this[nameof(UsableComponentsCache)].Address); } }
        public UsableComponentBase HoveringUsable { get { return this[nameof(HoveringUsable)].As<UsableComponentBase>(); } set { this["HoveringUsable"] = value; } }
        public void Server_SetState(CharacterUseState NewState) { Invoke(nameof(Server_SetState), NewState); }
        public void RemoveCustomUsableComponent(UsableComponentBase Usable) { Invoke(nameof(RemoveCustomUsableComponent), Usable); }
        public void OnRep_State(CharacterUseState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public bool IsLookingAtUsable() { return Invoke<bool>(nameof(IsLookingAtUsable)); }
        public bool IsLookingAtDepositable() { return Invoke<bool>(nameof(IsLookingAtDepositable)); }
        public float GetUseProgress() { return Invoke<float>(nameof(GetUseProgress)); }
        public Actor GetLookingAtActor() { return Invoke<Actor>(nameof(GetLookingAtActor)); }
        public bool GetIsUsing() { return Invoke<bool>(nameof(GetIsUsing)); }
        public bool GetIsDepositing() { return Invoke<bool>(nameof(GetIsDepositing)); }
        public UsableComponentBase GetHoveringUsable() { return Invoke<UsableComponentBase>(nameof(GetHoveringUsable)); }
        public UsableComponentBase GetActiveUsable() { return Invoke<UsableComponentBase>(nameof(GetActiveUsable)); }
        public void All_UseEnded(CharacterUseState oldState) { Invoke(nameof(All_UseEnded), oldState); }
        public void AddCustomUsableComponent(UsableComponentBase Usable, ECustomUsableType eType) { Invoke(nameof(AddCustomUsableComponent), Usable, eType); }
    }
    public class CharacterVanityComponent : ActorComponent
    {
        public CharacterVanityComponent(nint addr) : base(addr) { }
        public CharacterVanityItems AvailableVanityItems { get { return this[nameof(AvailableVanityItems)].As<CharacterVanityItems>(); } set { this["AvailableVanityItems"] = value; } }
        public BeardColorVanityItem ShownBeardColor { get { return this[nameof(ShownBeardColor)].As<BeardColorVanityItem>(); } set { this["ShownBeardColor"] = value; } }
        public MaterialInterface ArmorMaterial { get { return this[nameof(ArmorMaterial)].As<MaterialInterface>(); } set { this["ArmorMaterial"] = value; } }
        public MaterialInterface ArmorClothMaterial { get { return this[nameof(ArmorClothMaterial)].As<MaterialInterface>(); } set { this["ArmorClothMaterial"] = value; } }
        public MaterialInstanceDynamic DynamicSkinMaterial { get { return this[nameof(DynamicSkinMaterial)].As<MaterialInstanceDynamic>(); } set { this["DynamicSkinMaterial"] = value; } }
        public EHeadVanityType HeadVanityType { get { return (EHeadVanityType)this[nameof(HeadVanityType)].GetValue<int>(); } set { this[nameof(HeadVanityType)].SetValue<int>((int)value); } }
        public EquippedVanity EquippedVanity { get { return this[nameof(EquippedVanity)].As<EquippedVanity>(); } set { this["EquippedVanity"] = value; } }
        public VanityItem PreviewedItem { get { return this[nameof(PreviewedItem)].As<VanityItem>(); } set { this["PreviewedItem"] = value; } }
        public ArmorMaterialVanityItem PreviewedArmorMaterial { get { return this[nameof(PreviewedArmorMaterial)].As<ArmorMaterialVanityItem>(); } set { this["PreviewedArmorMaterial"] = value; } }
        public MaterialInterface SkinMaterial { get { return this[nameof(SkinMaterial)].As<MaterialInterface>(); } set { this["SkinMaterial"] = value; } }
        public UArray<TattooArmorItem> Tattoos { get { return new UArray<TattooArmorItem>(this[nameof(Tattoos)].Address); } }
        public UArray<MaterialInterface> CachedMaterials { get { return new UArray<MaterialInterface>(this[nameof(CachedMaterials)].Address); } }
        public Object VanityMeshes { get { return this[nameof(VanityMeshes)]; } set { this[nameof(VanityMeshes)] = value; } }
        public void UpdateMeshes() { Invoke(nameof(UpdateMeshes)); }
        public void UpdateEquippedVanity(bool applyItems) { Invoke(nameof(UpdateEquippedVanity), applyItems); }
        public void SetEquippedVanityInViewer(EquippedVanity equippedVanityItems) { Invoke(nameof(SetEquippedVanityInViewer), equippedVanityItems); }
        public void SetDesireSleevelessArmor(Object WorldContextObject, PlayerCharacterID Character, bool inDesireSleeveless) { Invoke(nameof(SetDesireSleevelessArmor), WorldContextObject, Character, inDesireSleeveless); }
        public void Server_SetEquippedVanity(EquippedVanity equippedItems) { Invoke(nameof(Server_SetEquippedVanity), equippedItems); }
        public void RemoveMedicalGown() { Invoke(nameof(RemoveMedicalGown)); }
        public VanityItem Receive_GetEquippedVanityItem(Object WorldContextObject, PlayerCharacterID Character, EVanitySlot Slot) { return Invoke<VanityItem>(nameof(Receive_GetEquippedVanityItem), WorldContextObject, Character, Slot); }
        public bool Receive_GetDesireSleevelessArmor(Object WorldContextObject, PlayerCharacterID Character) { return Invoke<bool>(nameof(Receive_GetDesireSleevelessArmor), WorldContextObject, Character); }
        public void OnRep_EquippedVanity() { Invoke(nameof(OnRep_EquippedVanity)); }
        public bool HasSpawnedInMedbay() { return Invoke<bool>(nameof(HasSpawnedInMedbay)); }
        public VanityItem GetEquippedVanityItem(EVanitySlot Slot, bool ignorePreviewItems) { return Invoke<VanityItem>(nameof(GetEquippedVanityItem), Slot, ignorePreviewItems); }
        public bool GetDesireSleevelessArmor() { return Invoke<bool>(nameof(GetDesireSleevelessArmor)); }
        public CharacterVanityItems GetAvailableVanityItems() { return Invoke<CharacterVanityItems>(nameof(GetAvailableVanityItems)); }
        public void EquipMedicalGown() { Invoke(nameof(EquipMedicalGown)); }
        public void EnforceValidPaintjob() { Invoke(nameof(EnforceValidPaintjob)); }
        public void CreateEquippedGear() { Invoke(nameof(CreateEquippedGear)); }
        public void Client_RemoveMedicalGown() { Invoke(nameof(Client_RemoveMedicalGown)); }
        public void Client_EquipMedicalGown() { Invoke(nameof(Client_EquipMedicalGown)); }
    }
    public class CharacterVanityItems : DataAsset
    {
        public CharacterVanityItems(nint addr) : base(addr) { }
        public Object DefaultItems { get { return this[nameof(DefaultItems)]; } set { this[nameof(DefaultItems)] = value; } }
        public PlayerCharacterID OwningCharacter { get { return this[nameof(OwningCharacter)].As<PlayerCharacterID>(); } set { this["OwningCharacter"] = value; } }
        public void SortVanityItems(Object WorldContextObject, PlayerCharacterID characterID, UArray<VanityItem> VanityItems) { Invoke(nameof(SortVanityItems), WorldContextObject, characterID, VanityItems); }
        public UArray<VanityItem> GetVanityItems(Object WorldContextObject, EVanitySlot Slot, bool onlyStoreItems, PlayerCharacterID characterID) { return Invoke<UArray<VanityItem>>(nameof(GetVanityItems), WorldContextObject, Slot, onlyStoreItems, characterID); }
        public VanityItem GetVanityItem(Guid VanityID) { return Invoke<VanityItem>(nameof(GetVanityItem), VanityID); }
        public UArray<VanityItem> GetUnLockedVanityItems(Object WorldContextObject, EVanitySlot Slot, bool onlyStoreItems, PlayerCharacterID characterID) { return Invoke<UArray<VanityItem>>(nameof(GetUnLockedVanityItems), WorldContextObject, Slot, onlyStoreItems, characterID); }
        public UArray<VanityItem> GetLockedVanityItems(Object WorldContextObject, EVanitySlot Slot, PlayerCharacterID characterID) { return Invoke<UArray<VanityItem>>(nameof(GetLockedVanityItems), WorldContextObject, Slot, characterID); }
        public UArray<VanityItem> GetItems(EVanitySlot Slot, bool onlyStoreItems) { return Invoke<UArray<VanityItem>>(nameof(GetItems), Slot, onlyStoreItems); }
        public VanityItem GetDefaultVanityItem(Object WorldContext, EVanitySlot Slot, PlayerCharacterID characterID) { return Invoke<VanityItem>(nameof(GetDefaultVanityItem), WorldContext, Slot, characterID); }
        public bool DoesVanitySlotAllowStyleTags(EVanitySlot Slot) { return Invoke<bool>(nameof(DoesVanitySlotAllowStyleTags), Slot); }
    }
    public class CharacterSelectionSwitcher : Actor
    {
        public CharacterSelectionSwitcher(nint addr) : base(addr) { }
        public void OnVictoryPoseChanged(VictoryPose VictoryPose) { Invoke(nameof(OnVictoryPoseChanged), VictoryPose); }
        public void OnVanityItemEquipped(EVanitySlot Slot) { Invoke(nameof(OnVanityItemEquipped), Slot); }
        public void Hide() { Invoke(nameof(Hide)); }
        public Actor GetViewerActor() { return Invoke<Actor>(nameof(GetViewerActor)); }
        public PlayerCharacter GetActiveCharacter() { return Invoke<PlayerCharacter>(nameof(GetActiveCharacter)); }
    }
    public class ChargedWeapon : AmmoDrivenWeapon
    {
        public ChargedWeapon(nint addr) : base(addr) { }
        public Object OnChargeChanged { get { return this[nameof(OnChargeChanged)]; } set { this[nameof(OnChargeChanged)] = value; } }
        public Object OnHeatChanged { get { return this[nameof(OnHeatChanged)]; } set { this[nameof(OnHeatChanged)] = value; } }
        public AnimMontage FP_OverheatAnim { get { return this[nameof(FP_OverheatAnim)].As<AnimMontage>(); } set { this["FP_OverheatAnim"] = value; } }
        public AnimMontage WeaponOverheatAnim { get { return this[nameof(WeaponOverheatAnim)].As<AnimMontage>(); } set { this["WeaponOverheatAnim"] = value; } }
        public AnimMontage FP_ChargeupMontage { get { return this[nameof(FP_ChargeupMontage)].As<AnimMontage>(); } set { this["FP_ChargeupMontage"] = value; } }
        public AnimMontage TP_ChargeupMontage { get { return this[nameof(TP_ChargeupMontage)].As<AnimMontage>(); } set { this["TP_ChargeupMontage"] = value; } }
        public FXSystemAsset ChargeupParticles { get { return this[nameof(ChargeupParticles)].As<FXSystemAsset>(); } set { this["ChargeupParticles"] = value; } }
        public FXSystemComponent ChargeupParticleInstance { get { return this[nameof(ChargeupParticleInstance)].As<FXSystemComponent>(); } set { this["ChargeupParticleInstance"] = value; } }
        public FXSystemAsset ChargeupFireMuzzleFlash { get { return this[nameof(ChargeupFireMuzzleFlash)].As<FXSystemAsset>(); } set { this["ChargeupFireMuzzleFlash"] = value; } }
        public SoundCue NormalFiresound { get { return this[nameof(NormalFiresound)].As<SoundCue>(); } set { this["NormalFiresound"] = value; } }
        public SoundCue FullyChargedFireSound { get { return this[nameof(FullyChargedFireSound)].As<SoundCue>(); } set { this["FullyChargedFireSound"] = value; } }
        public float ChargeSpeed { get { return this[nameof(ChargeSpeed)].GetValue<float>(); } set { this[nameof(ChargeSpeed)].SetValue<float>(value); } }
        public bool Charging { get { return this[nameof(Charging)].Flag; } set { this[nameof(Charging)].Flag = value; } }
        public float ChargeProgress { get { return this[nameof(ChargeProgress)].GetValue<float>(); } set { this[nameof(ChargeProgress)].SetValue<float>(value); } }
        public int ShotCostAtBelowFullCharge { get { return this[nameof(ShotCostAtBelowFullCharge)].GetValue<int>(); } set { this[nameof(ShotCostAtBelowFullCharge)].SetValue<int>(value); } }
        public int ShotCostAtFullCharge { get { return this[nameof(ShotCostAtFullCharge)].GetValue<int>(); } set { this[nameof(ShotCostAtFullCharge)].SetValue<int>(value); } }
        public bool ChargedShotsOnly { get { return this[nameof(ChargedShotsOnly)].Flag; } set { this[nameof(ChargedShotsOnly)].Flag = value; } }
        public bool AutoFireWhenOverheated { get { return this[nameof(AutoFireWhenOverheated)].Flag; } set { this[nameof(AutoFireWhenOverheated)].Flag = value; } }
        public float TotalHeat { get { return this[nameof(TotalHeat)].GetValue<float>(); } set { this[nameof(TotalHeat)].SetValue<float>(value); } }
        public float CoolingRate { get { return this[nameof(CoolingRate)].GetValue<float>(); } set { this[nameof(CoolingRate)].SetValue<float>(value); } }
        public float HeatPerSecondWhileCharging { get { return this[nameof(HeatPerSecondWhileCharging)].GetValue<float>(); } set { this[nameof(HeatPerSecondWhileCharging)].SetValue<float>(value); } }
        public float HeatPerSecondWhenCharged { get { return this[nameof(HeatPerSecondWhenCharged)].GetValue<float>(); } set { this[nameof(HeatPerSecondWhenCharged)].SetValue<float>(value); } }
        public float HeatPerNormalShot { get { return this[nameof(HeatPerNormalShot)].GetValue<float>(); } set { this[nameof(HeatPerNormalShot)].SetValue<float>(value); } }
        public float HeatPerChargedShot { get { return this[nameof(HeatPerChargedShot)].GetValue<float>(); } set { this[nameof(HeatPerChargedShot)].SetValue<float>(value); } }
        public void SetOverheated(bool isOverheated) { Invoke(nameof(SetOverheated), isOverheated); }
        public void Server_SetIsCharging(bool isCharging) { Invoke(nameof(Server_SetIsCharging), isCharging); }
        public void RecieveStoppedCharging(float ChargeProgress) { Invoke(nameof(RecieveStoppedCharging), ChargeProgress); }
        public void RecieveStartedCharging() { Invoke(nameof(RecieveStartedCharging)); }
        public void RecieveChargeProgressChanged(float NewChargeProgress) { Invoke(nameof(RecieveChargeProgressChanged), NewChargeProgress); }
        public void ReceiveOverheatedChanged(bool isOverheated) { Invoke(nameof(ReceiveOverheatedChanged), isOverheated); }
        public void OnRep_Charging() { Invoke(nameof(OnRep_Charging)); }
        public bool GetIsCharging() { return Invoke<bool>(nameof(GetIsCharging)); }
    }
    public class ChargedWeaponAnimInstance : AnimInstance
    {
        public ChargedWeaponAnimInstance(nint addr) : base(addr) { }
        public bool isCharging { get { return this[nameof(isCharging)].Flag; } set { this[nameof(isCharging)].Flag = value; } }
        public float ChargeupPlayRate { get { return this[nameof(ChargeupPlayRate)].GetValue<float>(); } set { this[nameof(ChargeupPlayRate)].SetValue<float>(value); } }
        public float ChargeupPlayRateSpeedChange { get { return this[nameof(ChargeupPlayRateSpeedChange)].GetValue<float>(); } set { this[nameof(ChargeupPlayRateSpeedChange)].SetValue<float>(value); } }
        public float ChargedownPlayRateSpeedChange { get { return this[nameof(ChargedownPlayRateSpeedChange)].GetValue<float>(); } set { this[nameof(ChargedownPlayRateSpeedChange)].SetValue<float>(value); } }
        public float MaxChargeupPlayRate { get { return this[nameof(MaxChargeupPlayRate)].GetValue<float>(); } set { this[nameof(MaxChargeupPlayRate)].SetValue<float>(value); } }
        public ChargedWeapon Weapon { get { return this[nameof(Weapon)].As<ChargedWeapon>(); } set { this["Weapon"] = value; } }
    }
    public class ProjectileBase : Actor
    {
        public ProjectileBase(nint addr) : base(addr) { }
        public ProjectileImpact ProjectileImpact { get { return this[nameof(ProjectileImpact)].As<ProjectileImpact>(); } set { this["ProjectileImpact"] = value; } }
        public bool ApplyShotPower { get { return this[nameof(ApplyShotPower)].Flag; } set { this[nameof(ApplyShotPower)].Flag = value; } }
        public bool IsSpawnedFromWeapon { get { return this[nameof(IsSpawnedFromWeapon)].Flag; } set { this[nameof(IsSpawnedFromWeapon)].Flag = value; } }
        public bool Exploded { get { return this[nameof(Exploded)].Flag; } set { this[nameof(Exploded)].Flag = value; } }
        public bool DoOnImpact { get { return this[nameof(DoOnImpact)].Flag; } set { this[nameof(DoOnImpact)].Flag = value; } }
        public bool DoOnImpact2 { get { return this[nameof(DoOnImpact2)].Flag; } set { this[nameof(DoOnImpact2)].Flag = value; } }
        public bool DoOnImpact3 { get { return this[nameof(DoOnImpact3)].Flag; } set { this[nameof(DoOnImpact3)].Flag = value; } }
        public bool DoOnSpawnVar { get { return this[nameof(DoOnSpawnVar)].Flag; } set { this[nameof(DoOnSpawnVar)].Flag = value; } }
        public float GravityMultiplier { get { return this[nameof(GravityMultiplier)].GetValue<float>(); } set { this[nameof(GravityMultiplier)].SetValue<float>(value); } }
        public bool IsDorment { get { return this[nameof(IsDorment)].Flag; } set { this[nameof(IsDorment)].Flag = value; } }
        public SphereComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<SphereComponent>(); } set { this["CollisionComponent"] = value; } }
        public float LifeSpan { get { return this[nameof(LifeSpan)].GetValue<float>(); } set { this[nameof(LifeSpan)].SetValue<float>(value); } }
        public float VelocityMultiplier { get { return this[nameof(VelocityMultiplier)].GetValue<float>(); } set { this[nameof(VelocityMultiplier)].SetValue<float>(value); } }
        public bool AffectedByDifficultySpeedModifier { get { return this[nameof(AffectedByDifficultySpeedModifier)].Flag; } set { this[nameof(AffectedByDifficultySpeedModifier)].Flag = value; } }
        public bool SetInitialSpeedToMaxSpeed { get { return this[nameof(SetInitialSpeedToMaxSpeed)].Flag; } set { this[nameof(SetInitialSpeedToMaxSpeed)].Flag = value; } }
        public bool AutoDisableCollisionOnImpact { get { return this[nameof(AutoDisableCollisionOnImpact)].Flag; } set { this[nameof(AutoDisableCollisionOnImpact)].Flag = value; } }
        public SoundCue WhizbySound { get { return this[nameof(WhizbySound)].As<SoundCue>(); } set { this["WhizbySound"] = value; } }
        public float WhizByCooldown { get { return this[nameof(WhizByCooldown)].GetValue<float>(); } set { this[nameof(WhizByCooldown)].SetValue<float>(value); } }
        public float WhizByStartDistance { get { return this[nameof(WhizByStartDistance)].GetValue<float>(); } set { this[nameof(WhizByStartDistance)].SetValue<float>(value); } }
        public EOnProjectileImpactBehaviourEnum EOnImpactBehaviour { get { return (EOnProjectileImpactBehaviourEnum)this[nameof(EOnImpactBehaviour)].GetValue<int>(); } set { this[nameof(EOnImpactBehaviour)].SetValue<int>((int)value); } }
        public TerrainMaterial TryGetTerrainMaterial() { return Invoke<TerrainMaterial>(nameof(TryGetTerrainMaterial)); }
        public void StopMovement() { Invoke(nameof(StopMovement)); }
        public void Server_SetState(Vector_NetQuantize Position, Vector_NetQuantize Velocity) { Invoke(nameof(Server_SetState), Position, Velocity); }
        public void Server_Penetrated(ProjectileImpact Impact) { Invoke(nameof(Server_Penetrated), Impact); }
        public void Server_Impacted(ProjectileImpact Impact) { Invoke(nameof(Server_Impacted), Impact); }
        public void OnUpgradeElementAdded(ProjectileUpgradeElement element) { Invoke(nameof(OnUpgradeElementAdded), element); }
        public void OnRep_ProjectileImpact() { Invoke(nameof(OnRep_ProjectileImpact)); }
        public void OnRep_IsDorment(bool wasDorment) { Invoke(nameof(OnRep_IsDorment), wasDorment); }
        public void OnPenetrated(bool PredictedPenetration, HitResult HitResult) { Invoke(nameof(OnPenetrated), PredictedPenetration, HitResult); }
        public void OnInitialized() { Invoke(nameof(OnInitialized)); }
        public void OnImpacted(bool PredictedImpact, HitResult HitResult) { Invoke(nameof(OnImpacted), PredictedImpact, HitResult); }
        public void MakeBouncy() { Invoke(nameof(MakeBouncy)); }
        public void InitState(Vector ShootDirection, Vector initialBonusVelocity) { Invoke(nameof(InitState), ShootDirection, initialBonusVelocity); }
        public void InitComponents() { Invoke(nameof(InitComponents)); }
        public void IgnoreCollision(PrimitiveComponent otherCollider) { Invoke(nameof(IgnoreCollision), otherCollider); }
        public bool HasImpactAuthority() { return Invoke<bool>(nameof(HasImpactAuthority)); }
        public float GetGameTimeSinceActivation() { return Invoke<float>(nameof(GetGameTimeSinceActivation)); }
        public DamageComponent GetDamageComponent() { return Invoke<DamageComponent>(nameof(GetDamageComponent)); }
        public int GetBoneIndex() { return Invoke<int>(nameof(GetBoneIndex)); }
        public void DoOnSpawn() { Invoke(nameof(DoOnSpawn)); }
        public void DisableProjectileCollision(ProjectileBase projectileA, ProjectileBase projectileB) { Invoke(nameof(DisableProjectileCollision), projectileA, projectileB); }
        public void DisableAndDestroy() { Invoke(nameof(DisableAndDestroy)); }
        public FSDPhysicalMaterial DamageArmor(DamageComponent DamageComponent, HitResult HitResult) { return Invoke<FSDPhysicalMaterial>(nameof(DamageArmor), DamageComponent, HitResult); }
        public void CustomEvent(ItemUpgrade Event) { Invoke(nameof(CustomEvent), Event); }
        public void Client_DrawServersDebugPath(Vector Location) { Invoke(nameof(Client_DrawServersDebugPath), Location); }
        public void Activate(Actor owningActor, Vector Origin, Vector_NetQuantizeNormal Direction, Vector_NetQuantizeNormal initialBonusVelocity) { Invoke(nameof(Activate), owningActor, Origin, Direction, initialBonusVelocity); }
    }
    public class Projectile : ProjectileBase
    {
        public Projectile(nint addr) : base(addr) { }
        public ProjectileState State { get { return this[nameof(State)].As<ProjectileState>(); } set { this["State"] = value; } }
        public bool UseArmorDamageBoneCheck { get { return this[nameof(UseArmorDamageBoneCheck)].Flag; } set { this[nameof(UseArmorDamageBoneCheck)].Flag = value; } }
        public UArray<Object> IgnoreActorClasses { get { return new UArray<Object>(this[nameof(IgnoreActorClasses)].Address); } }
        public FSDProjectileMovementComponent MovementComponent { get { return this[nameof(MovementComponent)].As<FSDProjectileMovementComponent>(); } set { this["MovementComponent"] = value; } }
        public ProjectileBase SpawnProjectileFromSelf(Object WorldContextObject, Object ProjectileClass, Vector Origin, Rotator velocityDirection) { return Invoke<ProjectileBase>(nameof(SpawnProjectileFromSelf), WorldContextObject, ProjectileClass, Origin, velocityDirection); }
        public ProjectileBase SpawnProjectile(Object WorldContextObject, Object ProjectileClass, Pawn projectileOwner, Vector Origin, Rotator velocityDirection) { return Invoke<ProjectileBase>(nameof(SpawnProjectile), WorldContextObject, ProjectileClass, projectileOwner, Origin, velocityDirection); }
        public ProjectileBase SpawnBallisticProjectile(Object WorldContextObject, Object ProjectileClass, Pawn projectileOwner, Vector Origin, Vector Velocity) { return Invoke<ProjectileBase>(nameof(SpawnBallisticProjectile), WorldContextObject, ProjectileClass, projectileOwner, Origin, Velocity); }
        public void SetHomingTargetComponent(SceneComponent HomingTargetComponent, float Delay) { Invoke(nameof(SetHomingTargetComponent), HomingTargetComponent, Delay); }
        public void Server_DisableHoming() { Invoke(nameof(Server_DisableHoming)); }
        public void OnRep_State(ProjectileState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnPenetration(HitResult HitResult) { Invoke(nameof(OnPenetration), HitResult); }
        public void OnImpact(HitResult HitResult) { Invoke(nameof(OnImpact), HitResult); }
        public void OnBounce(HitResult ImpactResult, Vector ImpactVelocity) { Invoke(nameof(OnBounce), ImpactResult, ImpactVelocity); }
        public FSDPhysicalMaterial FindBoneIndexFromArmor(HitResult HitResult, int outBoneIndex) { return Invoke<FSDPhysicalMaterial>(nameof(FindBoneIndexFromArmor), HitResult, outBoneIndex); }
        public void DisableHoming() { Invoke(nameof(DisableHoming)); }
    }
    public class ChargedProjectile : Projectile
    {
        public ChargedProjectile(nint addr) : base(addr) { }
        public bool ExplodesWhenDead { get { return this[nameof(ExplodesWhenDead)].Flag; } set { this[nameof(ExplodesWhenDead)].Flag = value; } }
        public bool PersistentExplosion { get { return this[nameof(PersistentExplosion)].Flag; } set { this[nameof(PersistentExplosion)].Flag = value; } }
        public bool AoEDamageInFlight { get { return this[nameof(AoEDamageInFlight)].Flag; } set { this[nameof(AoEDamageInFlight)].Flag = value; } }
        public float DirectDamageReduction { get { return this[nameof(DirectDamageReduction)].GetValue<float>(); } set { this[nameof(DirectDamageReduction)].SetValue<float>(value); } }
        public void OnAoEDamageEnabled() { Invoke(nameof(OnAoEDamageEnabled)); }
    }
    public class ClaimableRewardEntryWidget : UserWidget
    {
        public ClaimableRewardEntryWidget(nint addr) : base(addr) { }
        public Object OnRewardClaimed { get { return this[nameof(OnRewardClaimed)]; } set { this[nameof(OnRewardClaimed)] = value; } }
        public ClaimableRewardEntry Data { get { return this[nameof(Data)].As<ClaimableRewardEntry>(); } set { this["Data"] = value; } }
        public Object ButtonText { get { return this[nameof(ButtonText)]; } set { this[nameof(ButtonText)] = value; } }
        public void WidgetDelegate__DelegateSignature(ClaimableRewardEntryWidget EntryWidget) { Invoke(nameof(WidgetDelegate__DelegateSignature), EntryWidget); }
        public void SignalRewardClaimed() { Invoke(nameof(SignalRewardClaimed)); }
        public void SetData(ClaimableRewardEntry InData) { Invoke(nameof(SetData), InData); }
        public void ReceiveMoveIn(float InStartDelay) { Invoke(nameof(ReceiveMoveIn), InStartDelay); }
        public void ReceiveDataChanged() { Invoke(nameof(ReceiveDataChanged)); }
        public void MoveIn(float InStartDelay) { Invoke(nameof(MoveIn), InStartDelay); }
    }
    public class ClaimableRewardViewWidget : UserWidget
    {
        public ClaimableRewardViewWidget(nint addr) : base(addr) { }
        public ClaimableRewardView Data { get { return this[nameof(Data)].As<ClaimableRewardView>(); } set { this["Data"] = value; } }
        public void ReceiveEndFlow() { Invoke(nameof(ReceiveEndFlow)); }
        public void ReceiveDataChanged() { Invoke(nameof(ReceiveDataChanged)); }
        public void ReceiveBeginFlow() { Invoke(nameof(ReceiveBeginFlow)); }
        public void EndRewardFlow() { Invoke(nameof(EndRewardFlow)); }
        public void BeginRewardFlow(ClaimableRewardView InViewData) { Invoke(nameof(BeginRewardFlow), InViewData); }
    }
    public class RessuplyPod : Actor
    {
        public RessuplyPod(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public float KillRadius { get { return this[nameof(KillRadius)].GetValue<float>(); } set { this[nameof(KillRadius)].SetValue<float>(value); } }
        public float DropHeight { get { return this[nameof(DropHeight)].GetValue<float>(); } set { this[nameof(DropHeight)].SetValue<float>(value); } }
        public float DropDelay { get { return this[nameof(DropDelay)].GetValue<float>(); } set { this[nameof(DropDelay)].SetValue<float>(value); } }
        public float MissionShoutDelay { get { return this[nameof(MissionShoutDelay)].GetValue<float>(); } set { this[nameof(MissionShoutDelay)].SetValue<float>(value); } }
        public DialogDataAsset ShoutDialogOrderAccepted { get { return this[nameof(ShoutDialogOrderAccepted)].As<DialogDataAsset>(); } set { this["ShoutDialogOrderAccepted"] = value; } }
        public DialogDataAsset DialogOrderAccepted { get { return this[nameof(DialogOrderAccepted)].As<DialogDataAsset>(); } set { this["DialogOrderAccepted"] = value; } }
        public DialogDataAsset DialogPodArrived { get { return this[nameof(DialogPodArrived)].As<DialogDataAsset>(); } set { this["DialogPodArrived"] = value; } }
        public DialogDataAsset CurrentMissionShout { get { return this[nameof(CurrentMissionShout)].As<DialogDataAsset>(); } set { this["CurrentMissionShout"] = value; } }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public ERessuplyPodState State { get { return (ERessuplyPodState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float TargetDropTime { get { return this[nameof(TargetDropTime)].GetValue<float>(); } set { this[nameof(TargetDropTime)].SetValue<float>(value); } }
        public float ServerDropProgress { get { return this[nameof(ServerDropProgress)].GetValue<float>(); } set { this[nameof(ServerDropProgress)].SetValue<float>(value); } }
        public CurveFloat DropCurve { get { return this[nameof(DropCurve)].As<CurveFloat>(); } set { this["DropCurve"] = value; } }
        public Actor PlayerSpawnPoint { get { return this[nameof(PlayerSpawnPoint)].As<Actor>(); } set { this["PlayerSpawnPoint"] = value; } }
        public float CloseToImpactDistance { get { return this[nameof(CloseToImpactDistance)].GetValue<float>(); } set { this[nameof(CloseToImpactDistance)].SetValue<float>(value); } }
        public void SetIdling() { Invoke(nameof(SetIdling)); }
        public void RessuplyPodStateDelegate__DelegateSignature(RessuplyPod InPod, ERessuplyPodState InState) { Invoke(nameof(RessuplyPodStateDelegate__DelegateSignature), InPod, InState); }
        public void OnTunnelBLocked() { Invoke(nameof(OnTunnelBLocked)); }
        public void OnRep_TargetLocation() { Invoke(nameof(OnRep_TargetLocation)); }
        public void OnRep_State(ERessuplyPodState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnDropStarted() { Invoke(nameof(OnDropStarted)); }
        public void OnDroppodImpact() { Invoke(nameof(OnDroppodImpact)); }
        public void OnDroppodCloseToImpact() { Invoke(nameof(OnDroppodCloseToImpact)); }
        public Actor DropToTarget(Object WorldContextObject, Object podClass, Vector Location, Actor requester) { return Invoke<Actor>(nameof(DropToTarget), WorldContextObject, podClass, Location, requester); }
    }
    public class CleanupPod : RessuplyPod
    {
        public CleanupPod(nint addr) : base(addr) { }
        public SphereComponent RemovePlagueCollision { get { return this[nameof(RemovePlagueCollision)].As<SphereComponent>(); } set { this["RemovePlagueCollision"] = value; } }
        public void OnObjectiveChanged(Objective Objective) { Invoke(nameof(OnObjectiveChanged), Objective); }
        public void ChangedState(RessuplyPod InPod, ERessuplyPodState InState) { Invoke(nameof(ChangedState), InPod, InState); }
    }
    public class RessuplyPodItem : AnimatedItem
    {
        public RessuplyPodItem(nint addr) : base(addr) { }
        public Object ResupplyBeacon { get { return this[nameof(ResupplyBeacon)]; } set { this[nameof(ResupplyBeacon)] = value; } }
        public Object ItemPlacerClass { get { return this[nameof(ItemPlacerClass)]; } set { this[nameof(ItemPlacerClass)] = value; } }
        public ItemPlacerAggregator ItemPlacerInstance { get { return this[nameof(ItemPlacerInstance)].As<ItemPlacerAggregator>(); } set { this["ItemPlacerInstance"] = value; } }
        public Object SupplyPodClass { get { return this[nameof(SupplyPodClass)]; } set { this[nameof(SupplyPodClass)] = value; } }
        public int ResourceCost { get { return this[nameof(ResourceCost)].GetValue<int>(); } set { this[nameof(ResourceCost)].SetValue<int>(value); } }
        public Object OrderDescription { get { return this[nameof(OrderDescription)]; } set { this[nameof(OrderDescription)] = value; } }
        public Object LogText { get { return this[nameof(LogText)]; } set { this[nameof(LogText)] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public bool Used { get { return this[nameof(Used)].Flag; } set { this[nameof(Used)].Flag = value; } }
        public void Server_Call_Resupply(Vector Location) { Invoke(nameof(Server_Call_Resupply), Location); }
        public void ReceiveItemPlacerSpawned(ItemPlacerAggregator InItemPlacer) { Invoke(nameof(ReceiveItemPlacerSpawned), InItemPlacer); }
        public void OnRep_Used() { Invoke(nameof(OnRep_Used)); }
        public int GetResourceCost(Object WorldContextObject) { return Invoke<int>(nameof(GetResourceCost), WorldContextObject); }
        public ItemPlacerAggregator GetActiveAggregator() { return Invoke<ItemPlacerAggregator>(nameof(GetActiveAggregator)); }
    }
    public class CleanupPodItem : RessuplyPodItem
    {
        public CleanupPodItem(nint addr) : base(addr) { }
        public Object OnCleaningPodLaunched { get { return this[nameof(OnCleaningPodLaunched)]; } set { this[nameof(OnCleaningPodLaunched)] = value; } }
        public Object PlagueController { get { return this[nameof(PlagueController)]; } set { this[nameof(PlagueController)] = value; } }
        public void UpdateWidget(EPlaceableObstructionType reason, float TimeLeft) { Invoke(nameof(UpdateWidget), reason, TimeLeft); }
        public void Server_Call_CleaningPod(Vector Location, PlagueInfectionNode plagueNode) { Invoke(nameof(Server_Call_CleaningPod), Location, plagueNode); }
        public void CallUpdateWidget() { Invoke(nameof(CallUpdateWidget)); }
    }
    public class ClusterbombSpawner : ActorComponent
    {
        public ClusterbombSpawner(nint addr) : base(addr) { }
        public Object ClusterbombClass { get { return this[nameof(ClusterbombClass)]; } set { this[nameof(ClusterbombClass)] = value; } }
        public int GrenadeFragments { get { return this[nameof(GrenadeFragments)].GetValue<int>(); } set { this[nameof(GrenadeFragments)].SetValue<int>(value); } }
        public float VelocityInheritance { get { return this[nameof(VelocityInheritance)].GetValue<float>(); } set { this[nameof(VelocityInheritance)].SetValue<float>(value); } }
        public void ReleaseCluster() { Invoke(nameof(ReleaseCluster)); }
    }
    public class ExampleActor : Actor
    {
        public ExampleActor(nint addr) : base(addr) { }
        public Object OnExampleUpdatedEvent { get { return this[nameof(OnExampleUpdatedEvent)]; } set { this[nameof(OnExampleUpdatedEvent)] = value; } }
        public float Field { get { return this[nameof(Field)].GetValue<float>(); } set { this[nameof(Field)].SetValue<float>(value); } }
        public void Server_ExampleFunction() { Invoke(nameof(Server_ExampleFunction)); }
        public void Client_ExampleFunction() { Invoke(nameof(Client_ExampleFunction)); }
        public void All_ExampleFunction() { Invoke(nameof(All_ExampleFunction)); }
    }
    public class CoilgunWeaponTrail : Actor
    {
        public CoilgunWeaponTrail(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public CapsuleComponent Collision { get { return this[nameof(Collision)].As<CapsuleComponent>(); } set { this["Collision"] = value; } }
        public NiagaraComponent Trail { get { return this[nameof(Trail)].As<NiagaraComponent>(); } set { this["Trail"] = value; } }
        public float ParticleTrailOffset { get { return this[nameof(ParticleTrailOffset)].GetValue<float>(); } set { this[nameof(ParticleTrailOffset)].SetValue<float>(value); } }
        public float TrailHalgLength { get { return this[nameof(TrailHalgLength)].GetValue<float>(); } set { this[nameof(TrailHalgLength)].SetValue<float>(value); } }
        public bool SpawnFireTrail { get { return this[nameof(SpawnFireTrail)].Flag; } set { this[nameof(SpawnFireTrail)].Flag = value; } }
        public Object FireEffect { get { return this[nameof(FireEffect)]; } set { this[nameof(FireEffect)] = value; } }
        public Object ElectricEffect { get { return this[nameof(ElectricEffect)]; } set { this[nameof(ElectricEffect)] = value; } }
        public UArray<Object> EffectsToApply { get { return new UArray<Object>(this[nameof(EffectsToApply)].Address); } }
        public Object HitActors { get { return this[nameof(HitActors)]; } set { this[nameof(HitActors)] = value; } }
        public void OnRep_TrailHalfLength() { Invoke(nameof(OnRep_TrailHalfLength)); }
        public void OnRep_SpawnFireTrail() { Invoke(nameof(OnRep_SpawnFireTrail)); }
        public void OnInited_Callback() { Invoke(nameof(OnInited_Callback)); }
        public void OnActorLeaveTrigger(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnActorLeaveTrigger), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnActorEnteredTrigger(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnActorEnteredTrigger), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
    }
    public class CoilGun : ChargedWeapon
    {
        public CoilGun(nint addr) : base(addr) { }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public DamageComponent OverchargeDamageComponent { get { return this[nameof(OverchargeDamageComponent)].As<DamageComponent>(); } set { this["OverchargeDamageComponent"] = value; } }
        public DamageComponent WeaponBlastDamage { get { return this[nameof(WeaponBlastDamage)].As<DamageComponent>(); } set { this["WeaponBlastDamage"] = value; } }
        public DamageComponent ShotwaveBonusDamage { get { return this[nameof(ShotwaveBonusDamage)].As<DamageComponent>(); } set { this["ShotwaveBonusDamage"] = value; } }
        public DamageComponent MoleBonusDamage { get { return this[nameof(MoleBonusDamage)].As<DamageComponent>(); } set { this["MoleBonusDamage"] = value; } }
        public NiagaraComponent FullyChargedParticles { get { return this[nameof(FullyChargedParticles)].As<NiagaraComponent>(); } set { this["FullyChargedParticles"] = value; } }
        public NiagaraComponent FP_OverchargeIndicatorParticles { get { return this[nameof(FP_OverchargeIndicatorParticles)].As<NiagaraComponent>(); } set { this["FP_OverchargeIndicatorParticles"] = value; } }
        public NiagaraComponent TP_FullyChargedParticles { get { return this[nameof(TP_FullyChargedParticles)].As<NiagaraComponent>(); } set { this["TP_FullyChargedParticles"] = value; } }
        public CoilgunTrailSpawner TrailSpawner { get { return this[nameof(TrailSpawner)].As<CoilgunTrailSpawner>(); } set { this["TrailSpawner"] = value; } }
        public ContrailSettings TrailSettings { get { return this[nameof(TrailSettings)].As<ContrailSettings>(); } set { this["TrailSettings"] = value; } }
        public StaticMesh ImpactMeshCarver { get { return this[nameof(ImpactMeshCarver)].As<StaticMesh>(); } set { this["ImpactMeshCarver"] = value; } }
        public NiagaraSystem N_ImpactParticles { get { return this[nameof(N_ImpactParticles)].As<NiagaraSystem>(); } set { this["N_ImpactParticles"] = value; } }
        public Object ChargeResistanceStatusEffect { get { return this[nameof(ChargeResistanceStatusEffect)]; } set { this[nameof(ChargeResistanceStatusEffect)] = value; } }
        public Object ChargeWeaknessStatusEffect { get { return this[nameof(ChargeWeaknessStatusEffect)]; } set { this[nameof(ChargeWeaknessStatusEffect)] = value; } }
        public UArray<Object> TrailClasses { get { return new UArray<Object>(this[nameof(TrailClasses)].Address); } }
        public NiagaraSystem CustomMuzzleFlash { get { return this[nameof(CustomMuzzleFlash)].As<NiagaraSystem>(); } set { this["CustomMuzzleFlash"] = value; } }
        public Object HitActorCache { get { return this[nameof(HitActorCache)]; } set { this[nameof(HitActorCache)] = value; } }
        public Object CoilParamName { get { return this[nameof(CoilParamName)]; } set { this[nameof(CoilParamName)] = value; } }
        public UArray<CoilMaterial> DynamicCoilMaterials { get { return new UArray<CoilMaterial>(this[nameof(DynamicCoilMaterials)].Address); } }
        public RuntimeFloatCurve CoilColorCurve { get { return this[nameof(CoilColorCurve)].As<RuntimeFloatCurve>(); } set { this["CoilColorCurve"] = value; } }
        public UArray<StatusEffect> RecordedAilments { get { return new UArray<StatusEffect>(this[nameof(RecordedAilments)].Address); } }
        public float MaxAfflictionTime { get { return this[nameof(MaxAfflictionTime)].GetValue<float>(); } set { this[nameof(MaxAfflictionTime)].SetValue<float>(value); } }
        public float ShotWidth { get { return this[nameof(ShotWidth)].GetValue<float>(); } set { this[nameof(ShotWidth)].SetValue<float>(value); } }
        public float BonusShotWidth { get { return this[nameof(BonusShotWidth)].GetValue<float>(); } set { this[nameof(BonusShotWidth)].SetValue<float>(value); } }
        public float ImpactFearFactor { get { return this[nameof(ImpactFearFactor)].GetValue<float>(); } set { this[nameof(ImpactFearFactor)].SetValue<float>(value); } }
        public float OverChargedShotMaxPower { get { return this[nameof(OverChargedShotMaxPower)].GetValue<float>(); } set { this[nameof(OverChargedShotMaxPower)].SetValue<float>(value); } }
        public float MaxOverchargeTime { get { return this[nameof(MaxOverchargeTime)].GetValue<float>(); } set { this[nameof(MaxOverchargeTime)].SetValue<float>(value); } }
        public float OverchargeTimeStep { get { return this[nameof(OverchargeTimeStep)].GetValue<float>(); } set { this[nameof(OverchargeTimeStep)].SetValue<float>(value); } }
        public float BrokenShieldboostDuration { get { return this[nameof(BrokenShieldboostDuration)].GetValue<float>(); } set { this[nameof(BrokenShieldboostDuration)].SetValue<float>(value); } }
        public float MinUndercharge { get { return this[nameof(MinUndercharge)].GetValue<float>(); } set { this[nameof(MinUndercharge)].SetValue<float>(value); } }
        public float TriBustCancelTime { get { return this[nameof(TriBustCancelTime)].GetValue<float>(); } set { this[nameof(TriBustCancelTime)].SetValue<float>(value); } }
        public float TriBurstShotPowerMultiplier { get { return this[nameof(TriBurstShotPowerMultiplier)].GetValue<float>(); } set { this[nameof(TriBurstShotPowerMultiplier)].SetValue<float>(value); } }
        public float TriBurstAmmoMultiplier { get { return this[nameof(TriBurstAmmoMultiplier)].GetValue<float>(); } set { this[nameof(TriBurstAmmoMultiplier)].SetValue<float>(value); } }
        public float TriBurstShotCarvingMultiplier { get { return this[nameof(TriBurstShotCarvingMultiplier)].GetValue<float>(); } set { this[nameof(TriBurstShotCarvingMultiplier)].SetValue<float>(value); } }
        public int FirstDynamicIndex { get { return this[nameof(FirstDynamicIndex)].GetValue<int>(); } set { this[nameof(FirstDynamicIndex)].SetValue<int>(value); } }
        public int LastDynamicIndex { get { return this[nameof(LastDynamicIndex)].GetValue<int>(); } set { this[nameof(LastDynamicIndex)].SetValue<int>(value); } }
        public void UpdateAfflictions() { Invoke(nameof(UpdateAfflictions)); }
        public void SetDynamicMaterials() { Invoke(nameof(SetDynamicMaterials)); }
        public void Server_ToggleCharingBonuses(bool Enabled) { Invoke(nameof(Server_ToggleCharingBonuses), Enabled); }
        public void Server_SpawnTrail(Vector_NetQuantize Location, Rotator Rotation, float HalfHeight, bool fireTrailEnabled) { Invoke(nameof(Server_SpawnTrail), Location, Rotation, HalfHeight, fireTrailEnabled); }
        public void Server_SpawnGroundTrail(Vector_NetQuantize Location, Vector Direction, float chargeMultiplier) { Invoke(nameof(Server_SpawnGroundTrail), Location, Direction, chargeMultiplier); }
        public void Server_SetShotPower(float Power) { Invoke(nameof(Server_SetShotPower), Power); }
        public void Server_RegisterPrimaryHit(PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial, Vector_NetQuantize Origin, Vector_NetQuantize Location, int BoneIndex, ShotMultiplier Multiplier, int mole) { Invoke(nameof(Server_RegisterPrimaryHit), Target, PhysMaterial, Origin, Location, BoneIndex, Multiplier, mole); }
        public void Server_RegisterBonusHit(Actor Target) { Invoke(nameof(Server_RegisterBonusHit), Target); }
        public void Server_RegisterBlastHit(Actor Target, Vector_NetQuantize Location, PrimitiveComponent comp) { Invoke(nameof(Server_RegisterBlastHit), Target, Location, comp); }
        public void Server_HitTerrain(Vector_NetQuantize Location, Vector_NetQuantize End, float maxCarveDepth) { Invoke(nameof(Server_HitTerrain), Location, End, maxCarveDepth); }
        public void Server_FearTarget(Actor Target) { Invoke(nameof(Server_FearTarget), Target); }
        public void Server_ClearAilments() { Invoke(nameof(Server_ClearAilments)); }
        public void OnTriBurstCancled() { Invoke(nameof(OnTriBurstCancled)); }
        public void OnShieldBrokenBoost() { Invoke(nameof(OnShieldBrokenBoost)); }
        public void OnShieldBrokeBoostStopped() { Invoke(nameof(OnShieldBrokeBoostStopped)); }
        public void OnShieldBoostEnded() { Invoke(nameof(OnShieldBoostEnded)); }
        public void OnFireKill(Actor Target) { Invoke(nameof(OnFireKill), Target); }
        public void OnEnemyKilled(Actor Target, FSDPhysicalMaterial PhysicalMaterial, bool wasDirectHit) { Invoke(nameof(OnEnemyKilled), Target, PhysicalMaterial, wasDirectHit); }
        public void OnDamageTarget(HealthComponentBase Health, float amount, PrimitiveComponent Component, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnDamageTarget), Health, amount, Component, PhysicalMaterial); }
        public void OnCharacterShieldBroke(Actor brokeChar) { Invoke(nameof(OnCharacterShieldBroke), brokeChar); }
        public void OnBulletPathComplete(UArray<BulletPathSegment> Path) { Invoke(nameof(OnBulletPathComplete), Path); }
        public void All_ShowHit(Vector_NetQuantize Location, Vector_NetQuantize Rotation) { Invoke(nameof(All_ShowHit), Location, Rotation); }
        public void All_ShieldBroken() { Invoke(nameof(All_ShieldBroken)); }
        public void All_AdjustTrail(CoilgunWeaponTrail Trail, float Length) { Invoke(nameof(All_AdjustTrail), Trail, Length); }
    }
    public class CoilGunAnimInstance : ChargedWeaponAnimInstance
    {
        public CoilGunAnimInstance(nint addr) : base(addr) { }
        public float WindUpSpeed { get { return this[nameof(WindUpSpeed)].GetValue<float>(); } set { this[nameof(WindUpSpeed)].SetValue<float>(value); } }
        public float WindDownSpeed { get { return this[nameof(WindDownSpeed)].GetValue<float>(); } set { this[nameof(WindDownSpeed)].SetValue<float>(value); } }
        public float MaxExtention { get { return this[nameof(MaxExtention)].GetValue<float>(); } set { this[nameof(MaxExtention)].SetValue<float>(value); } }
        public float HandleExtend { get { return this[nameof(HandleExtend)].GetValue<float>(); } set { this[nameof(HandleExtend)].SetValue<float>(value); } }
        public float MaxCoilSpeed { get { return this[nameof(MaxCoilSpeed)].GetValue<float>(); } set { this[nameof(MaxCoilSpeed)].SetValue<float>(value); } }
        public CoilGun CoilGun { get { return this[nameof(CoilGun)].As<CoilGun>(); } set { this["CoilGun"] = value; } }
        public float GetCoilSpeed(int Index) { return Invoke<float>(nameof(GetCoilSpeed), Index); }
        public float GetCoilAngle(int Index) { return Invoke<float>(nameof(GetCoilAngle), Index); }
    }
    public class CoilGunTrailSegment : Actor
    {
        public CoilGunTrailSegment(nint addr) : base(addr) { }
        public float EffectsLife { get { return this[nameof(EffectsLife)].GetValue<float>(); } set { this[nameof(EffectsLife)].SetValue<float>(value); } }
        public float DeactivationTime { get { return this[nameof(DeactivationTime)].GetValue<float>(); } set { this[nameof(DeactivationTime)].SetValue<float>(value); } }
        public void OnStartEffects() { Invoke(nameof(OnStartEffects)); }
        public void OnRep_EffectsLife() { Invoke(nameof(OnRep_EffectsLife)); }
        public void OnEndEffects() { Invoke(nameof(OnEndEffects)); }
    }
    public class CoilgunTrailSpawner : ActorComponent
    {
        public CoilgunTrailSpawner(nint addr) : base(addr) { }
        public Object TrailSegmentClass { get { return this[nameof(TrailSegmentClass)]; } set { this[nameof(TrailSegmentClass)] = value; } }
        public float SegmentSpawnInterval { get { return this[nameof(SegmentSpawnInterval)].GetValue<float>(); } set { this[nameof(SegmentSpawnInterval)].SetValue<float>(value); } }
        public float TrailDistance { get { return this[nameof(TrailDistance)].GetValue<float>(); } set { this[nameof(TrailDistance)].SetValue<float>(value); } }
        public float TrailSegmentInterval { get { return this[nameof(TrailSegmentInterval)].GetValue<float>(); } set { this[nameof(TrailSegmentInterval)].SetValue<float>(value); } }
        public float TrailSpawnRange { get { return this[nameof(TrailSpawnRange)].GetValue<float>(); } set { this[nameof(TrailSpawnRange)].SetValue<float>(value); } }
        public void SpawnSegment() { Invoke(nameof(SpawnSegment)); }
    }
    public class CollectableResourceCreator : Object
    {
        public CollectableResourceCreator(nint addr) : base(addr) { }
    }
    public class CollectableResourceData : ResourceData
    {
        public CollectableResourceData(nint addr) : base(addr) { }
        public CollectableResourceCreator ResourceCreator { get { return this[nameof(ResourceCreator)].As<CollectableResourceCreator>(); } set { this["ResourceCreator"] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
        public float InfluenceRadius { get { return this[nameof(InfluenceRadius)].GetValue<float>(); } set { this[nameof(InfluenceRadius)].SetValue<float>(value); } }
        public UArray<Object> Debris { get { return new UArray<Object>(this[nameof(Debris)].Address); } }
        public bool UseTerrainPlacement { get { return this[nameof(UseTerrainPlacement)].Flag; } set { this[nameof(UseTerrainPlacement)].Flag = value; } }
        public UArray<Object> CollectableClasses { get { return new UArray<Object>(this[nameof(CollectableClasses)].Address); } }
        public UArray<Object> CollectableClassesLoaded { get { return new UArray<Object>(this[nameof(CollectableClassesLoaded)].Address); } }
    }
    public class CharacterShoutsData : DataAsset
    {
        public CharacterShoutsData(nint addr) : base(addr) { }
        public CharacterShouts Shouts { get { return this[nameof(Shouts)].As<CharacterShouts>(); } set { this["Shouts"] = value; } }
    }
    public class ShoutWidget : UserWidget
    {
        public ShoutWidget(nint addr) : base(addr) { }
        public Object Sender { get { return this[nameof(Sender)]; } set { this[nameof(Sender)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public void OnShout() { Invoke(nameof(OnShout)); }
    }
    public class CommunicationComponent : ActorComponent
    {
        public CommunicationComponent(nint addr) : base(addr) { }
        public Object OnSubtitleShout { get { return this[nameof(OnSubtitleShout)]; } set { this[nameof(OnSubtitleShout)] = value; } }
        public Object OnPlayerShout { get { return this[nameof(OnPlayerShout)]; } set { this[nameof(OnPlayerShout)] = value; } }
        public Object OnMissionShout { get { return this[nameof(OnMissionShout)]; } set { this[nameof(OnMissionShout)] = value; } }
        public Object OnMissionShoutEnd { get { return this[nameof(OnMissionShoutEnd)]; } set { this[nameof(OnMissionShoutEnd)] = value; } }
        public Object OnMissionControlFinished { get { return this[nameof(OnMissionControlFinished)]; } set { this[nameof(OnMissionControlFinished)] = value; } }
        public bool ShoutingEnabled { get { return this[nameof(ShoutingEnabled)].Flag; } set { this[nameof(ShoutingEnabled)].Flag = value; } }
        public Object ShoutWidgetType { get { return this[nameof(ShoutWidgetType)]; } set { this[nameof(ShoutWidgetType)] = value; } }
        public CharacterShoutsData CharacterShouts { get { return this[nameof(CharacterShouts)].As<CharacterShoutsData>(); } set { this["CharacterShouts"] = value; } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
        public float MinShoutDelay { get { return this[nameof(MinShoutDelay)].GetValue<float>(); } set { this[nameof(MinShoutDelay)].SetValue<float>(value); } }
        public float CloseRangeShoutDistance { get { return this[nameof(CloseRangeShoutDistance)].GetValue<float>(); } set { this[nameof(CloseRangeShoutDistance)].SetValue<float>(value); } }
        public Object DelayedShouts { get { return this[nameof(DelayedShouts)]; } set { this[nameof(DelayedShouts)] = value; } }
        public GameplayTagContainer KillShoutAllowedTags { get { return this[nameof(KillShoutAllowedTags)].As<GameplayTagContainer>(); } set { this["KillShoutAllowedTags"] = value; } }
        public bool bMissionControlPaused { get { return this[nameof(bMissionControlPaused)].Flag; } set { this[nameof(bMissionControlPaused)].Flag = value; } }
        public AudioComponent MissionControlAudioComponent { get { return this[nameof(MissionControlAudioComponent)].As<AudioComponent>(); } set { this["MissionControlAudioComponent"] = value; } }
        public UArray<ShoutWidget> ActiveShouts { get { return new UArray<ShoutWidget>(this[nameof(ActiveShouts)].Address); } }
        public UArray<ActiveOutline> ActiveOutlines { get { return new UArray<ActiveOutline>(this[nameof(ActiveOutlines)].Address); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public DialogDataAsset LastShout { get { return this[nameof(LastShout)].As<DialogDataAsset>(); } set { this["LastShout"] = value; } }
        public Object ShoutAudioComponent { get { return this[nameof(ShoutAudioComponent)]; } set { this[nameof(ShoutAudioComponent)] = value; } }
        public Object ShoutHistory { get { return this[nameof(ShoutHistory)]; } set { this[nameof(ShoutHistory)] = value; } }
        public UArray<MissionShoutQueueItem> MissionShoutQueue { get { return new UArray<MissionShoutQueueItem>(this[nameof(MissionShoutQueue)].Address); } }
        public void ShoutDelegate__DelegateSignature(PlayerCharacter InSender, Object InText, float InDuration) { Invoke(nameof(ShoutDelegate__DelegateSignature), InSender, InText, InDuration); }
        public void ShoutCustomOrDefault(DialogDataAsset CustomShout, EShoutType DefaultShout) { Invoke(nameof(ShoutCustomOrDefault), CustomShout, DefaultShout); }
        public void ShoutCustomLocalOnly(DialogDataAsset Shout) { Invoke(nameof(ShoutCustomLocalOnly), Shout); }
        public void ShoutCustomClosestDwarf(Object WorldContext, DialogDataAsset Shout, Vector TargetLocation) { Invoke(nameof(ShoutCustomClosestDwarf), WorldContext, Shout, TargetLocation); }
        public void ShoutCustom(DialogDataAsset Shout) { Invoke(nameof(ShoutCustom), Shout); }
        public void Shout(EShoutType Shout) { Invoke(nameof(Shout), Shout); }
        public void SetMissionControlPaused(bool IsPaused) { Invoke(nameof(SetMissionControlPaused), IsPaused); }
        public void ServerShout(DialogDataAsset Shout) { Invoke(nameof(ServerShout), Shout); }
        public void ServerMissionShout(DialogDataAsset Shout, int Index, bool bPriority) { Invoke(nameof(ServerMissionShout), Shout, Index, bPriority); }
        public AudioComponent PlayPitchedByClass(Object WorldContextObject, Object CharacterClass, SoundBase Sound, DialogDataAsset Shout, EShoutType ShoutType, AudioComponent AudioComponent) { return Invoke<AudioComponent>(nameof(PlayPitchedByClass), WorldContextObject, CharacterClass, Sound, Shout, ShoutType, AudioComponent); }
        public void PlayPitchedAsync(DialogDataAsset Shout, EShoutType ShoutType, bool IgnoreCoolDown, AudioComponent AudioComponent, Object WorldContextObject, float shoutVolumeMultiplier, EAsyncLoadPriority Priority) { Invoke(nameof(PlayPitchedAsync), Shout, ShoutType, IgnoreCoolDown, AudioComponent, WorldContextObject, shoutVolumeMultiplier, Priority); }
        public AudioComponent PlayPitched(SoundBase Sound, DialogDataAsset Shout, EShoutType ShoutType, bool IgnoreCoolDown, AudioComponent AudioComponent, Object WorldContextObject) { return Invoke<AudioComponent>(nameof(PlayPitched), Sound, Shout, ShoutType, IgnoreCoolDown, AudioComponent, WorldContextObject); }
        public int MissionShoutLocally(Object WorldContext, DialogDataAsset Shout) { return Invoke<int>(nameof(MissionShoutLocally), WorldContext, Shout); }
        public void MissionShout(Object WorldContext, DialogDataAsset Shout, bool bPriority) { Invoke(nameof(MissionShout), WorldContext, Shout, bPriority); }
        public bool IsMissionControlSpeaking() { return Invoke<bool>(nameof(IsMissionControlSpeaking)); }
        public void ClientShout(PlayerCharacter Sender, DialogDataAsset Shout, int Index) { Invoke(nameof(ClientShout), Sender, Shout, Index); }
        public void ClientMissionShout(DialogDataAsset Shout, int Index, bool bPriority) { Invoke(nameof(ClientMissionShout), Shout, Index, bPriority); }
    }
    public class CommnuityRewardBundle : DataAsset
    {
        public CommnuityRewardBundle(nint addr) : base(addr) { }
        public UArray<CommunityReward> Rewards { get { return new UArray<CommunityReward>(this[nameof(Rewards)].Address); } }
        public void AwardRewards(Object WorldContext) { Invoke(nameof(AwardRewards), WorldContext); }
    }
    public class CommnuityRewardSetup : DataAsset
    {
        public CommnuityRewardSetup(nint addr) : base(addr) { }
        public UArray<CommnuityRewardBundle> TierRewards { get { return new UArray<CommnuityRewardBundle>(this[nameof(TierRewards)].Address); } }
        public Object GetResourcesTierOnlyReward(int Tier) { return Invoke<Object>(nameof(GetResourcesTierOnlyReward), Tier); }
        public Object GetResourcesReward(int Tier) { return Invoke<Object>(nameof(GetResourcesReward), Tier); }
        public void AwardTierRewards(Object WorldContext, int Tier) { Invoke(nameof(AwardTierRewards), WorldContext, Tier); }
    }
    public class CommunityGoalCategory : DataAsset
    {
        public CommunityGoalCategory(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
    }
    public class CommunityGoalFaction : DataAsset
    {
        public CommunityGoalFaction(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object ShortDescription { get { return this[nameof(ShortDescription)]; } set { this[nameof(ShortDescription)] = value; } }
        public Object JoinHeader { get { return this[nameof(JoinHeader)]; } set { this[nameof(JoinHeader)] = value; } }
        public Object JoinBody { get { return this[nameof(JoinBody)]; } set { this[nameof(JoinBody)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Texture2D Frame { get { return this[nameof(Frame)].As<Texture2D>(); } set { this["Frame"] = value; } }
        public SlateColor Color { get { return this[nameof(Color)].As<SlateColor>(); } set { this["Color"] = value; } }
        public EFSDFaction FactionID { get { return (EFSDFaction)this[nameof(FactionID)].GetValue<int>(); } set { this[nameof(FactionID)].SetValue<int>((int)value); } }
    }
    public class CommunityGoal : DataAsset
    {
        public CommunityGoal(nint addr) : base(addr) { }
        public bool TierValuesAreInitialized { get { return this[nameof(TierValuesAreInitialized)].Flag; } set { this[nameof(TierValuesAreInitialized)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public bool Active { get { return this[nameof(Active)].Flag; } set { this[nameof(Active)].Flag = value; } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object MetaDescription { get { return this[nameof(MetaDescription)]; } set { this[nameof(MetaDescription)] = value; } }
        public CommunityGoalCategory Category { get { return this[nameof(Category)].As<CommunityGoalCategory>(); } set { this["Category"] = value; } }
        public ECommunityGoalType CommunityGoalType { get { return (ECommunityGoalType)this[nameof(CommunityGoalType)].GetValue<int>(); } set { this[nameof(CommunityGoalType)].SetValue<int>((int)value); } }
        public float GoalPerMemberTier1 { get { return this[nameof(GoalPerMemberTier1)].GetValue<float>(); } set { this[nameof(GoalPerMemberTier1)].SetValue<float>(value); } }
        public float GoalPerMemberTier2 { get { return this[nameof(GoalPerMemberTier2)].GetValue<float>(); } set { this[nameof(GoalPerMemberTier2)].SetValue<float>(value); } }
        public float GoalPerMemberTier3 { get { return this[nameof(GoalPerMemberTier3)].GetValue<float>(); } set { this[nameof(GoalPerMemberTier3)].SetValue<float>(value); } }
        public CommnuityRewardSetup RewardSetup { get { return this[nameof(RewardSetup)].As<CommnuityRewardSetup>(); } set { this["RewardSetup"] = value; } }
        public float TotalTierProgress(float Value, int Members) { return Invoke<float>(nameof(TotalTierProgress), Value, Members); }
        public float TierValue(ECommunityGoalTier Tier, float Value, int Members) { return Invoke<float>(nameof(TierValue), Tier, Value, Members); }
        public float TierProgress(ECommunityGoalTier Tier, float Value, int Members) { return Invoke<float>(nameof(TierProgress), Tier, Value, Members); }
        public float TierGoal(ECommunityGoalTier Tier, int Members) { return Invoke<float>(nameof(TierGoal), Tier, Members); }
        public int RewardTier(float Value, int Members) { return Invoke<int>(nameof(RewardTier), Value, Members); }
        public void IncrementGoal(Object WorldContext, float Value) { Invoke(nameof(IncrementGoal), WorldContext, Value); }
        public Object GoalToText(ECommunityGoalType StatType, float Value) { return Invoke<Object>(nameof(GoalToText), StatType, Value); }
        public Object GetCategoryTitle() { return Invoke<Object>(nameof(GetCategoryTitle)); }
        public bool AreTiersInitialized() { return Invoke<bool>(nameof(AreTiersInitialized)); }
    }
    public class CommunityGoalSettings : DataAsset
    {
        public CommunityGoalSettings(nint addr) : base(addr) { }
        public UArray<CommunityGoalFaction> ActiveCommunityFactions { get { return new UArray<CommunityGoalFaction>(this[nameof(ActiveCommunityFactions)].Address); } }
        public UArray<CommunityGoal> ActiveCommunityGoals { get { return new UArray<CommunityGoal>(this[nameof(ActiveCommunityGoals)].Address); } }
        public CommunityGoal DSMUGoal { get { return this[nameof(DSMUGoal)].As<CommunityGoal>(); } set { this["DSMUGoal"] = value; } }
        public CommunityGoal GetGoal(ECommunityGoalIndex Goal) { return Invoke<CommunityGoal>(nameof(GetGoal), Goal); }
        public CommunityGoal FindGoal(Object Goal) { return Invoke<CommunityGoal>(nameof(FindGoal), Goal); }
    }
    public class CommunityGoalWrapper : Object
    {
        public CommunityGoalWrapper(nint addr) : base(addr) { }
        public bool HasCGS { get { return this[nameof(HasCGS)].Flag; } set { this[nameof(HasCGS)].Flag = value; } }
        public CommunityGoalStateData CGSData { get { return this[nameof(CGSData)].As<CommunityGoalStateData>(); } set { this["CGSData"] = value; } }
        public int LastCollectedRewardID { get { return this[nameof(LastCollectedRewardID)].GetValue<int>(); } set { this[nameof(LastCollectedRewardID)].SetValue<int>(value); } }
        public CommunityFactionData FactionData { get { return this[nameof(FactionData)].As<CommunityFactionData>(); } set { this["FactionData"] = value; } }
        public bool FreeBeerRewardActive { get { return this[nameof(FreeBeerRewardActive)].Flag; } set { this[nameof(FreeBeerRewardActive)].Flag = value; } }
        public Object OnFreeBeerRewardChanged { get { return this[nameof(OnFreeBeerRewardChanged)]; } set { this[nameof(OnFreeBeerRewardChanged)] = value; } }
        public Object SteamTicket { get { return this[nameof(SteamTicket)]; } set { this[nameof(SteamTicket)] = value; } }
        public Object SteamBranch { get { return this[nameof(SteamBranch)]; } set { this[nameof(SteamBranch)] = value; } }
        public Object OnFactionsDataReceived { get { return this[nameof(OnFactionsDataReceived)]; } set { this[nameof(OnFactionsDataReceived)] = value; } }
        public Object OnDiscordCGSDataEvent { get { return this[nameof(OnDiscordCGSDataEvent)]; } set { this[nameof(OnDiscordCGSDataEvent)] = value; } }
        public Object UICheck { get { return this[nameof(UICheck)]; } set { this[nameof(UICheck)] = value; } }
        public Object OnGoalsInitializedDelegate { get { return this[nameof(OnGoalsInitializedDelegate)]; } set { this[nameof(OnGoalsInitializedDelegate)] = value; } }
        public bool AreAllGoalsInitialized { get { return this[nameof(AreAllGoalsInitialized)].Flag; } set { this[nameof(AreAllGoalsInitialized)].Flag = value; } }
        public void UpdateAllGoalsInitialized() { Invoke(nameof(UpdateAllGoalsInitialized)); }
        public bool RewardReceived() { return Invoke<bool>(nameof(RewardReceived)); }
        public void RequestGoalStateData() { Invoke(nameof(RequestGoalStateData)); }
        public void RequestFactionsData() { Invoke(nameof(RequestFactionsData)); }
        public void NextPeriod() { Invoke(nameof(NextPeriod)); }
        public void InitializeGoalTierTargetValues(CommunityGoal goalToInitialize) { Invoke(nameof(InitializeGoalTierTargetValues), goalToInitialize); }
        public CommunityGoalFaction GetPlayerCurrentFaction(Object WorldContext) { return Invoke<CommunityGoalFaction>(nameof(GetPlayerCurrentFaction), WorldContext); }
        public void ClaimRewardMessage(Object WorldContext, CommunityRewardNotification rewardNotification) { Invoke(nameof(ClaimRewardMessage), WorldContext, rewardNotification); }
        public void ClaimReward() { Invoke(nameof(ClaimReward)); }
        public void CheckUI() { Invoke(nameof(CheckUI)); }
    }
    public class ControllerIconSettings : DeveloperSettings
    {
        public ControllerIconSettings(nint addr) : base(addr) { }
        public InputTranslationTable InputTranslationTable { get { return this[nameof(InputTranslationTable)].As<InputTranslationTable>(); } set { this["InputTranslationTable"] = value; } }
        public UArray<ActionIconMapping> Xbox_KeyIcons { get { return new UArray<ActionIconMapping>(this[nameof(Xbox_KeyIcons)].Address); } }
        public UArray<ActionIconMapping> Playstation_KeyIcons { get { return new UArray<ActionIconMapping>(this[nameof(Playstation_KeyIcons)].Address); } }
        public UArray<ActionIconMapping> Playstation5_KeyIcons { get { return new UArray<ActionIconMapping>(this[nameof(Playstation5_KeyIcons)].Address); } }
        public UArray<ActionIconMapping> MouseKeyboard_KeyIcons { get { return new UArray<ActionIconMapping>(this[nameof(MouseKeyboard_KeyIcons)].Address); } }
        public bool FindMouseKeyboardKeyIcon(Key Key, ActionIconMapping KeyIcon) { return Invoke<bool>(nameof(FindMouseKeyboardKeyIcon), Key, KeyIcon); }
        public bool FindKeyIcon(Key Key, ActionIconMapping KeyIcon) { return Invoke<bool>(nameof(FindKeyIcon), Key, KeyIcon); }
        public bool FindControllerKeyIcon(Key Key, ActionIconMapping KeyIcon) { return Invoke<bool>(nameof(FindControllerKeyIcon), Key, KeyIcon); }
    }
    public class ConvertedRobot : EnemyDeepPathfinderCharacter
    {
        public ConvertedRobot(nint addr) : base(addr) { }
        public EnemyComponent EnemyComponent { get { return this[nameof(EnemyComponent)].As<EnemyComponent>(); } set { this["EnemyComponent"] = value; } }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public OutlineComponent outline { get { return this[nameof(outline)].As<OutlineComponent>(); } set { this["outline"] = value; } }
        public HitscanComponent HitScan { get { return this[nameof(HitScan)].As<HitscanComponent>(); } set { this["HitScan"] = value; } }
        public SingleUsableComponent Usable { get { return this[nameof(Usable)].As<SingleUsableComponent>(); } set { this["Usable"] = value; } }
        public SceneComponent TurretRoot { get { return this[nameof(TurretRoot)].As<SceneComponent>(); } set { this["TurretRoot"] = value; } }
        public SkeletalMeshComponent TurretMesh { get { return this[nameof(TurretMesh)].As<SkeletalMeshComponent>(); } set { this["TurretMesh"] = value; } }
        public PointLightComponent MuzzleFlash { get { return this[nameof(MuzzleFlash)].As<PointLightComponent>(); } set { this["MuzzleFlash"] = value; } }
        public SpotLightComponent SpotLight { get { return this[nameof(SpotLight)].As<SpotLightComponent>(); } set { this["SpotLight"] = value; } }
        public StaticMeshComponent LightCone { get { return this[nameof(LightCone)].As<StaticMeshComponent>(); } set { this["LightCone"] = value; } }
        public StaticMeshComponent LaserBeam { get { return this[nameof(LaserBeam)].As<StaticMeshComponent>(); } set { this["LaserBeam"] = value; } }
        public SceneComponent ShieldRoot { get { return this[nameof(ShieldRoot)].As<SceneComponent>(); } set { this["ShieldRoot"] = value; } }
        public StaticMeshComponent InnerShield { get { return this[nameof(InnerShield)].As<StaticMeshComponent>(); } set { this["InnerShield"] = value; } }
        public StaticMeshComponent OuterShield { get { return this[nameof(OuterShield)].As<StaticMeshComponent>(); } set { this["OuterShield"] = value; } }
        public AudioComponent PulsatingSoundComp { get { return this[nameof(PulsatingSoundComp)].As<AudioComponent>(); } set { this["PulsatingSoundComp"] = value; } }
        public AudioComponent LaserWarningSound { get { return this[nameof(LaserWarningSound)].As<AudioComponent>(); } set { this["LaserWarningSound"] = value; } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public Object OnShieldChanged { get { return this[nameof(OnShieldChanged)]; } set { this[nameof(OnShieldChanged)] = value; } }
        public Object OnIntroductionStart { get { return this[nameof(OnIntroductionStart)]; } set { this[nameof(OnIntroductionStart)] = value; } }
        public bool ForceSit { get { return this[nameof(ForceSit)].Flag; } set { this[nameof(ForceSit)].Flag = value; } }
        public SoundBase LaserSound { get { return this[nameof(LaserSound)].As<SoundBase>(); } set { this["LaserSound"] = value; } }
        public SoundBase LastPowerDownSound { get { return this[nameof(LastPowerDownSound)].As<SoundBase>(); } set { this["LastPowerDownSound"] = value; } }
        public SoundBase PowerUpSound { get { return this[nameof(PowerUpSound)].As<SoundBase>(); } set { this["PowerUpSound"] = value; } }
        public Object LaserSoundComp { get { return this[nameof(LaserSoundComp)]; } set { this[nameof(LaserSoundComp)] = value; } }
        public float IntroductionTime { get { return this[nameof(IntroductionTime)].GetValue<float>(); } set { this[nameof(IntroductionTime)].SetValue<float>(value); } }
        public bool IsIntroducing { get { return this[nameof(IsIntroducing)].Flag; } set { this[nameof(IsIntroducing)].Flag = value; } }
        public bool IntroductionDone { get { return this[nameof(IntroductionDone)].Flag; } set { this[nameof(IntroductionDone)].Flag = value; } }
        public bool IsGrowingShield { get { return this[nameof(IsGrowingShield)].Flag; } set { this[nameof(IsGrowingShield)].Flag = value; } }
        public float AimDownwardsOffset { get { return this[nameof(AimDownwardsOffset)].GetValue<float>(); } set { this[nameof(AimDownwardsOffset)].SetValue<float>(value); } }
        public float BigShieldScale { get { return this[nameof(BigShieldScale)].GetValue<float>(); } set { this[nameof(BigShieldScale)].SetValue<float>(value); } }
        public float SmallShieldScale { get { return this[nameof(SmallShieldScale)].GetValue<float>(); } set { this[nameof(SmallShieldScale)].SetValue<float>(value); } }
        public float ShieldGrowthRate { get { return this[nameof(ShieldGrowthRate)].GetValue<float>(); } set { this[nameof(ShieldGrowthRate)].SetValue<float>(value); } }
        public float LerpExp { get { return this[nameof(LerpExp)].GetValue<float>(); } set { this[nameof(LerpExp)].SetValue<float>(value); } }
        public float MinimumShieldSize { get { return this[nameof(MinimumShieldSize)].GetValue<float>(); } set { this[nameof(MinimumShieldSize)].SetValue<float>(value); } }
        public float TargetShieldSize { get { return this[nameof(TargetShieldSize)].GetValue<float>(); } set { this[nameof(TargetShieldSize)].SetValue<float>(value); } }
        public float IdleRotationSpeed { get { return this[nameof(IdleRotationSpeed)].GetValue<float>(); } set { this[nameof(IdleRotationSpeed)].SetValue<float>(value); } }
        public float LaserScaleRate { get { return this[nameof(LaserScaleRate)].GetValue<float>(); } set { this[nameof(LaserScaleRate)].SetValue<float>(value); } }
        public float MaxSearchAngle { get { return this[nameof(MaxSearchAngle)].GetValue<float>(); } set { this[nameof(MaxSearchAngle)].SetValue<float>(value); } }
        public bool DoSpecialWhenEnemy { get { return this[nameof(DoSpecialWhenEnemy)].Flag; } set { this[nameof(DoSpecialWhenEnemy)].Flag = value; } }
        public bool DoSpecialWhenFriendly { get { return this[nameof(DoSpecialWhenFriendly)].Flag; } set { this[nameof(DoSpecialWhenFriendly)].Flag = value; } }
        public bool PerfectTrackingWhenEnemy { get { return this[nameof(PerfectTrackingWhenEnemy)].Flag; } set { this[nameof(PerfectTrackingWhenEnemy)].Flag = value; } }
        public bool PerfectTrackingWhenFriendly { get { return this[nameof(PerfectTrackingWhenFriendly)].Flag; } set { this[nameof(PerfectTrackingWhenFriendly)].Flag = value; } }
        public bool ReplaceBurstAttack { get { return this[nameof(ReplaceBurstAttack)].Flag; } set { this[nameof(ReplaceBurstAttack)].Flag = value; } }
        public SoundBase GrenadeFireSound { get { return this[nameof(GrenadeFireSound)].As<SoundBase>(); } set { this["GrenadeFireSound"] = value; } }
        public ParticleSystem GrenadeFireParticle { get { return this[nameof(GrenadeFireParticle)].As<ParticleSystem>(); } set { this["GrenadeFireParticle"] = value; } }
        public bool IsFiring { get { return this[nameof(IsFiring)].Flag; } set { this[nameof(IsFiring)].Flag = value; } }
        public float TurretSpinSpeed { get { return this[nameof(TurretSpinSpeed)].GetValue<float>(); } set { this[nameof(TurretSpinSpeed)].SetValue<float>(value); } }
        public UArray<Actor> Parasites { get { return new UArray<Actor>(this[nameof(Parasites)].Address); } }
        public int SpawnParasiteNumer { get { return this[nameof(SpawnParasiteNumer)].GetValue<int>(); } set { this[nameof(SpawnParasiteNumer)].SetValue<int>(value); } }
        public int MaxParasiteSlots { get { return this[nameof(MaxParasiteSlots)].GetValue<int>(); } set { this[nameof(MaxParasiteSlots)].SetValue<int>(value); } }
        public float ChanceToSpawnParasite { get { return this[nameof(ChanceToSpawnParasite)].GetValue<float>(); } set { this[nameof(ChanceToSpawnParasite)].SetValue<float>(value); } }
        public Object ParasiteClass { get { return this[nameof(ParasiteClass)]; } set { this[nameof(ParasiteClass)] = value; } }
        public bool SpinTurret { get { return this[nameof(SpinTurret)].Flag; } set { this[nameof(SpinTurret)].Flag = value; } }
        public Object SpecialAttackProjectile { get { return this[nameof(SpecialAttackProjectile)]; } set { this[nameof(SpecialAttackProjectile)] = value; } }
        public Object FriendlyProjectile { get { return this[nameof(FriendlyProjectile)]; } set { this[nameof(FriendlyProjectile)] = value; } }
        public bool HasLockedOn { get { return this[nameof(HasLockedOn)].Flag; } set { this[nameof(HasLockedOn)].Flag = value; } }
        public SoundBase TargetingSound { get { return this[nameof(TargetingSound)].As<SoundBase>(); } set { this["TargetingSound"] = value; } }
        public AnimSequenceBase GrenadeShotAnimation { get { return this[nameof(GrenadeShotAnimation)].As<AnimSequenceBase>(); } set { this["GrenadeShotAnimation"] = value; } }
        public float LockOnTime { get { return this[nameof(LockOnTime)].GetValue<float>(); } set { this[nameof(LockOnTime)].SetValue<float>(value); } }
        public SoundCue ShootSound { get { return this[nameof(ShootSound)].As<SoundCue>(); } set { this["ShootSound"] = value; } }
        public float ShootSoundFadeout { get { return this[nameof(ShootSoundFadeout)].GetValue<float>(); } set { this[nameof(ShootSoundFadeout)].SetValue<float>(value); } }
        public AudioComponent ShootSoundInstance { get { return this[nameof(ShootSoundInstance)].As<AudioComponent>(); } set { this["ShootSoundInstance"] = value; } }
        public SoundCue ShootSoundTail { get { return this[nameof(ShootSoundTail)].As<SoundCue>(); } set { this["ShootSoundTail"] = value; } }
        public ParticleSystem MuzzleEffect { get { return this[nameof(MuzzleEffect)].As<ParticleSystem>(); } set { this["MuzzleEffect"] = value; } }
        public ParticleSystem TracerEffect { get { return this[nameof(TracerEffect)].As<ParticleSystem>(); } set { this["TracerEffect"] = value; } }
        public RuntimeFloatCurve MuzzleLightCurve { get { return this[nameof(MuzzleLightCurve)].As<RuntimeFloatCurve>(); } set { this["MuzzleLightCurve"] = value; } }
        public float GunRange { get { return this[nameof(GunRange)].GetValue<float>(); } set { this[nameof(GunRange)].SetValue<float>(value); } }
        public float FireRate { get { return this[nameof(FireRate)].GetValue<float>(); } set { this[nameof(FireRate)].SetValue<float>(value); } }
        public float GrenadeFireRate { get { return this[nameof(GrenadeFireRate)].GetValue<float>(); } set { this[nameof(GrenadeFireRate)].SetValue<float>(value); } }
        public float BurstCooldown { get { return this[nameof(BurstCooldown)].GetValue<float>(); } set { this[nameof(BurstCooldown)].SetValue<float>(value); } }
        public int MinBurst { get { return this[nameof(MinBurst)].GetValue<int>(); } set { this[nameof(MinBurst)].SetValue<int>(value); } }
        public int MaxBurst { get { return this[nameof(MaxBurst)].GetValue<int>(); } set { this[nameof(MaxBurst)].SetValue<int>(value); } }
        public float TurretLerpSpeed { get { return this[nameof(TurretLerpSpeed)].GetValue<float>(); } set { this[nameof(TurretLerpSpeed)].SetValue<float>(value); } }
        public float DamageWhenFriendly { get { return this[nameof(DamageWhenFriendly)].GetValue<float>(); } set { this[nameof(DamageWhenFriendly)].SetValue<float>(value); } }
        public float FriendlyFriendlyFireMultiplier { get { return this[nameof(FriendlyFriendlyFireMultiplier)].GetValue<float>(); } set { this[nameof(FriendlyFriendlyFireMultiplier)].SetValue<float>(value); } }
        public bool StartedSpecialAttack { get { return this[nameof(StartedSpecialAttack)].Flag; } set { this[nameof(StartedSpecialAttack)].Flag = value; } }
        public ERobotState TeamState { get { return (ERobotState)this[nameof(TeamState)].GetValue<int>(); } set { this[nameof(TeamState)].SetValue<int>((int)value); } }
        public bool IsWalking { get { return this[nameof(IsWalking)].Flag; } set { this[nameof(IsWalking)].Flag = value; } }
        public bool IsDoingSpecialAttack { get { return this[nameof(IsDoingSpecialAttack)].Flag; } set { this[nameof(IsDoingSpecialAttack)].Flag = value; } }
        public StaticMeshComponent TurretRotation { get { return this[nameof(TurretRotation)].As<StaticMeshComponent>(); } set { this["TurretRotation"] = value; } }
        public Actor CurrentTarget { get { return this[nameof(CurrentTarget)].As<Actor>(); } set { this["CurrentTarget"] = value; } }
        public void UpdateGunsInsideTerrain() { Invoke(nameof(UpdateGunsInsideTerrain)); }
        public void StartBossFight() { Invoke(nameof(StartBossFight)); }
        public void ParasiteDamaged(float aDamage) { Invoke(nameof(ParasiteDamaged), aDamage); }
        public void OnWeaponsFired(Vector aHitResult) { Invoke(nameof(OnWeaponsFired), aHitResult); }
        public void OnUsed(PlayerCharacter aUser, EInputKeys Key) { Invoke(nameof(OnUsed), aUser, Key); }
        public void OnSeePawn(Pawn APawn) { Invoke(nameof(OnSeePawn), APawn); }
        public void OnRep_TeamState() { Invoke(nameof(OnRep_TeamState)); }
        public void OnRep_Target() { Invoke(nameof(OnRep_Target)); }
        public void OnRep_SpinTurret() { Invoke(nameof(OnRep_SpinTurret)); }
        public void OnRep_IsIntroducting() { Invoke(nameof(OnRep_IsIntroducting)); }
        public void OnRep_IsFiring() { Invoke(nameof(OnRep_IsFiring)); }
        public void OnRep_IsDoingSpecialAttack() { Invoke(nameof(OnRep_IsDoingSpecialAttack)); }
        public void OnParasiteDeath(Actor AParasiteEnemy) { Invoke(nameof(OnParasiteDeath), AParasiteEnemy); }
        public ERobotState GetTeamState() { return Invoke<ERobotState>(nameof(GetTeamState)); }
        public Vector GetPlayerMediumPoint() { return Invoke<Vector>(nameof(GetPlayerMediumPoint)); }
        public UArray<Actor> GetParasites() { return Invoke<UArray<Actor>>(nameof(GetParasites)); }
        public bool GetHasPoweredDown() { return Invoke<bool>(nameof(GetHasPoweredDown)); }
        public void DestroyAttatchPoint(SceneComponent aComponent) { Invoke(nameof(DestroyAttatchPoint), aComponent); }
        public void CannonEffects() { Invoke(nameof(CannonEffects)); }
        public void BP_OnStateChanged(ERobotState TeamState) { Invoke(nameof(BP_OnStateChanged), TeamState); }
        public void BP_OnShieldChanged(bool isGrowing) { Invoke(nameof(BP_OnShieldChanged), isGrowing); }
        public void BP_OnInstroduce() { Invoke(nameof(BP_OnInstroduce)); }
    }
    public class ConvertedRobotAnimInstance : AnimInstance
    {
        public ConvertedRobotAnimInstance(nint addr) : base(addr) { }
        public bool HasIntroduced { get { return this[nameof(HasIntroduced)].Flag; } set { this[nameof(HasIntroduced)].Flag = value; } }
        public bool IsWalking { get { return this[nameof(IsWalking)].Flag; } set { this[nameof(IsWalking)].Flag = value; } }
        public bool IsIntroducing { get { return this[nameof(IsIntroducing)].Flag; } set { this[nameof(IsIntroducing)].Flag = value; } }
        public bool ShouldSit { get { return this[nameof(ShouldSit)].Flag; } set { this[nameof(ShouldSit)].Flag = value; } }
        public bool StopSit { get { return this[nameof(StopSit)].Flag; } set { this[nameof(StopSit)].Flag = value; } }
        public bool ShouldCollapse { get { return this[nameof(ShouldCollapse)].Flag; } set { this[nameof(ShouldCollapse)].Flag = value; } }
        public bool IsPoweredDown { get { return this[nameof(IsPoweredDown)].Flag; } set { this[nameof(IsPoweredDown)].Flag = value; } }
        public float WalkingRate { get { return this[nameof(WalkingRate)].GetValue<float>(); } set { this[nameof(WalkingRate)].SetValue<float>(value); } }
        public float NormalWalkSpeed { get { return this[nameof(NormalWalkSpeed)].GetValue<float>(); } set { this[nameof(NormalWalkSpeed)].SetValue<float>(value); } }
    }
    public class ConvertedRobotTurretAnimInstance : AnimInstance
    {
        public ConvertedRobotTurretAnimInstance(nint addr) : base(addr) { }
        public bool ReplaceBurstAttack { get { return this[nameof(ReplaceBurstAttack)].Flag; } set { this[nameof(ReplaceBurstAttack)].Flag = value; } }
        public bool IsFiringGrenades { get { return this[nameof(IsFiringGrenades)].Flag; } set { this[nameof(IsFiringGrenades)].Flag = value; } }
        public bool IsDoingSpecialAttack { get { return this[nameof(IsDoingSpecialAttack)].Flag; } set { this[nameof(IsDoingSpecialAttack)].Flag = value; } }
        public bool ShouldFireBullets { get { return this[nameof(ShouldFireBullets)].Flag; } set { this[nameof(ShouldFireBullets)].Flag = value; } }
        public bool StopFiringBullets { get { return this[nameof(StopFiringBullets)].Flag; } set { this[nameof(StopFiringBullets)].Flag = value; } }
        public bool ShouldCannonDeploy { get { return this[nameof(ShouldCannonDeploy)].Flag; } set { this[nameof(ShouldCannonDeploy)].Flag = value; } }
    }
    public class EnemyAIController : FSDAIController
    {
        public EnemyAIController(nint addr) : base(addr) { }
    }
    public class ConvertedRobotController : EnemyAIController
    {
        public ConvertedRobotController(nint addr) : base(addr) { }
        public float CheckRangeInterval { get { return this[nameof(CheckRangeInterval)].GetValue<float>(); } set { this[nameof(CheckRangeInterval)].SetValue<float>(value); } }
        public float MaxTimeInRange { get { return this[nameof(MaxTimeInRange)].GetValue<float>(); } set { this[nameof(MaxTimeInRange)].SetValue<float>(value); } }
        public float PersonalSpaceRange { get { return this[nameof(PersonalSpaceRange)].GetValue<float>(); } set { this[nameof(PersonalSpaceRange)].SetValue<float>(value); } }
        public GameplayTagQuery FriendlyTargetingQuery { get { return this[nameof(FriendlyTargetingQuery)].As<GameplayTagQuery>(); } set { this["FriendlyTargetingQuery"] = value; } }
        public float SpecialAttackRange { get { return this[nameof(SpecialAttackRange)].GetValue<float>(); } set { this[nameof(SpecialAttackRange)].SetValue<float>(value); } }
        public float SpecialAttackFireRate { get { return this[nameof(SpecialAttackFireRate)].GetValue<float>(); } set { this[nameof(SpecialAttackFireRate)].SetValue<float>(value); } }
        public float WaitBeforeSpecial { get { return this[nameof(WaitBeforeSpecial)].GetValue<float>(); } set { this[nameof(WaitBeforeSpecial)].SetValue<float>(value); } }
        public float WaitAfterSpecial { get { return this[nameof(WaitAfterSpecial)].GetValue<float>(); } set { this[nameof(WaitAfterSpecial)].SetValue<float>(value); } }
        public float MinSpecialAttackCooldown { get { return this[nameof(MinSpecialAttackCooldown)].GetValue<float>(); } set { this[nameof(MinSpecialAttackCooldown)].SetValue<float>(value); } }
        public float MaxSpecialAttackCooldown { get { return this[nameof(MaxSpecialAttackCooldown)].GetValue<float>(); } set { this[nameof(MaxSpecialAttackCooldown)].SetValue<float>(value); } }
        public BehaviorTree BehaviourTree { get { return this[nameof(BehaviourTree)].As<BehaviorTree>(); } set { this["BehaviourTree"] = value; } }
        public float UpdateTargetInterval { get { return this[nameof(UpdateTargetInterval)].GetValue<float>(); } set { this[nameof(UpdateTargetInterval)].SetValue<float>(value); } }
        public float PowerDownAfterSeconds { get { return this[nameof(PowerDownAfterSeconds)].GetValue<float>(); } set { this[nameof(PowerDownAfterSeconds)].SetValue<float>(value); } }
        public void ResetCloseTimer() { Invoke(nameof(ResetCloseTimer)); }
    }
    public class CoolDownItemAggregator : ItemAggregator
    {
        public CoolDownItemAggregator(nint addr) : base(addr) { }
        public float CooldownDuration { get { return this[nameof(CooldownDuration)].GetValue<float>(); } set { this[nameof(CooldownDuration)].SetValue<float>(value); } }
        public SoundBase AudioCoolDownFinished { get { return this[nameof(AudioCoolDownFinished)].As<SoundBase>(); } set { this["AudioCoolDownFinished"] = value; } }
        public float CooldownRemaining { get { return this[nameof(CooldownRemaining)].GetValue<float>(); } set { this[nameof(CooldownRemaining)].SetValue<float>(value); } }
        public bool CoolDownIsPaused { get { return this[nameof(CoolDownIsPaused)].Flag; } set { this[nameof(CoolDownIsPaused)].Flag = value; } }
        public Item Item { get { return this[nameof(Item)].As<Item>(); } set { this["Item"] = value; } }
        public void SetPaused(bool IsPaused) { Invoke(nameof(SetPaused), IsPaused); }
        public bool IsCoolingDown() { return Invoke<bool>(nameof(IsCoolingDown)); }
        public float GetCoolDownProgress() { return Invoke<float>(nameof(GetCoolDownProgress)); }
        public void ActivateCoolDown(bool startPaused) { Invoke(nameof(ActivateCoolDown), startPaused); }
    }
    public class CoolDownProgressWidget : UserWidget
    {
        public CoolDownProgressWidget(nint addr) : base(addr) { }
        public CoolDownProgressStyle Style { get { return this[nameof(Style)].As<CoolDownProgressStyle>(); } set { this["Style"] = value; } }
        public Object CoolDownObject { get { return this[nameof(CoolDownObject)]; } set { this[nameof(CoolDownObject)] = value; } }
        public bool bIsFinished { get { return this[nameof(bIsFinished)].Flag; } set { this[nameof(bIsFinished)].Flag = value; } }
        public void UpdateProgress(float Progress) { Invoke(nameof(UpdateProgress), Progress); }
        public void ReceiveUpdateProgress(float InProgress) { Invoke(nameof(ReceiveUpdateProgress), InProgress); }
        public void ReceiveInitWidget() { Invoke(nameof(ReceiveInitWidget)); }
        public void Init(Object InCoolDownObject, CoolDownProgressStyle InStyle) { Invoke(nameof(Init), InCoolDownObject, InStyle); }
    }
    public class CopyBoneVisibilityCompleted : Interface
    {
        public CopyBoneVisibilityCompleted(nint addr) : base(addr) { }
        public void CopyBoneVisibilityCompleted_value(int BoneIndex) { Invoke(nameof(CopyBoneVisibilityCompleted_value), BoneIndex); }
    }
    public class CoreRift : Actor
    {
        public CoreRift(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SceneComponent InitialRotationPoint { get { return this[nameof(InitialRotationPoint)].As<SceneComponent>(); } set { this["InitialRotationPoint"] = value; } }
        public SceneComponent InstancedSpikesRoot { get { return this[nameof(InstancedSpikesRoot)].As<SceneComponent>(); } set { this["InstancedSpikesRoot"] = value; } }
        public UArray<InstancedStaticMeshComponent> SpikeMeshes { get { return new UArray<InstancedStaticMeshComponent>(this[nameof(SpikeMeshes)].Address); } }
        public SplineComponent SpikeLocationSpline { get { return this[nameof(SpikeLocationSpline)].As<SplineComponent>(); } set { this["SpikeLocationSpline"] = value; } }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public CurveVector ScaleCurve { get { return this[nameof(ScaleCurve)].As<CurveVector>(); } set { this["ScaleCurve"] = value; } }
        public CurveFloat AlphaCurve { get { return this[nameof(AlphaCurve)].As<CurveFloat>(); } set { this["AlphaCurve"] = value; } }
        public float ScaleUpInitialDelay { get { return this[nameof(ScaleUpInitialDelay)].GetValue<float>(); } set { this[nameof(ScaleUpInitialDelay)].SetValue<float>(value); } }
        public float ScaleUpTime { get { return this[nameof(ScaleUpTime)].GetValue<float>(); } set { this[nameof(ScaleUpTime)].SetValue<float>(value); } }
        public int BonesToSpawn { get { return this[nameof(BonesToSpawn)].GetValue<int>(); } set { this[nameof(BonesToSpawn)].SetValue<int>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public void SpawnSpikes() { Invoke(nameof(SpawnSpikes)); }
        public void ScaleUp() { Invoke(nameof(ScaleUp)); }
        public void OnRep_Seed() { Invoke(nameof(OnRep_Seed)); }
    }
    public class CoreSpawnEnemyBase : EnemyDeepPathfinderCharacter
    {
        public CoreSpawnEnemyBase(nint addr) : base(addr) { }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public HitReactionComponent HitReactions { get { return this[nameof(HitReactions)].As<HitReactionComponent>(); } set { this["HitReactions"] = value; } }
        public PawnSensingComponent PawnSensing { get { return this[nameof(PawnSensing)].As<PawnSensingComponent>(); } set { this["PawnSensing"] = value; } }
        public EnemyComponent enemy { get { return this[nameof(enemy)].As<EnemyComponent>(); } set { this["enemy"] = value; } }
        public OutlineComponent outline { get { return this[nameof(outline)].As<OutlineComponent>(); } set { this["outline"] = value; } }
        public PathfinderReactiveTerrainTrackerComponent PathfinderReactiveTerrainTracker { get { return this[nameof(PathfinderReactiveTerrainTracker)].As<PathfinderReactiveTerrainTrackerComponent>(); } set { this["PathfinderReactiveTerrainTracker"] = value; } }
        public PawnAlertComponent PawnAlert { get { return this[nameof(PawnAlert)].As<PawnAlertComponent>(); } set { this["PawnAlert"] = value; } }
        public DeathComponent Death { get { return this[nameof(Death)].As<DeathComponent>(); } set { this["Death"] = value; } }
    }
    public class CraftingCostLibrary : BlueprintFunctionLibrary
    {
        public CraftingCostLibrary(nint addr) : base(addr) { }
        public CraftingCost ConvertResourcesToFashionite(UArray<CraftingCost> InResources) { return Invoke<CraftingCost>(nameof(ConvertResourcesToFashionite), InResources); }
    }
    public class PricingTier : DataAsset
    {
        public PricingTier(nint addr) : base(addr) { }
        public Object PriceKey { get { return this[nameof(PriceKey)]; } set { this[nameof(PriceKey)] = value; } }
    }
    public class SchematicPricingTier : PricingTier
    {
        public SchematicPricingTier(nint addr) : base(addr) { }
    }
    public class SpiderAnimInstance : EnemyAnimInstance
    {
        public SpiderAnimInstance(nint addr) : base(addr) { }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float WalkCycleSpeed { get { return this[nameof(WalkCycleSpeed)].GetValue<float>(); } set { this[nameof(WalkCycleSpeed)].SetValue<float>(value); } }
        public float StartMovingSpeed { get { return this[nameof(StartMovingSpeed)].GetValue<float>(); } set { this[nameof(StartMovingSpeed)].SetValue<float>(value); } }
        public float StopMovingSpeed { get { return this[nameof(StopMovingSpeed)].GetValue<float>(); } set { this[nameof(StopMovingSpeed)].SetValue<float>(value); } }
        public float WalkCycleMinRate { get { return this[nameof(WalkCycleMinRate)].GetValue<float>(); } set { this[nameof(WalkCycleMinRate)].SetValue<float>(value); } }
        public float WalkCyclePlayRate { get { return this[nameof(WalkCyclePlayRate)].GetValue<float>(); } set { this[nameof(WalkCyclePlayRate)].SetValue<float>(value); } }
        public float MeshScale { get { return this[nameof(MeshScale)].GetValue<float>(); } set { this[nameof(MeshScale)].SetValue<float>(value); } }
        public float Direction { get { return this[nameof(Direction)].GetValue<float>(); } set { this[nameof(Direction)].SetValue<float>(value); } }
        public float PathDirectionLerpSpeedIn { get { return this[nameof(PathDirectionLerpSpeedIn)].GetValue<float>(); } set { this[nameof(PathDirectionLerpSpeedIn)].SetValue<float>(value); } }
        public float PathDirectionLerpSpeedOut { get { return this[nameof(PathDirectionLerpSpeedOut)].GetValue<float>(); } set { this[nameof(PathDirectionLerpSpeedOut)].SetValue<float>(value); } }
        public float PathDirection { get { return this[nameof(PathDirection)].GetValue<float>(); } set { this[nameof(PathDirection)].SetValue<float>(value); } }
        public float HorizontalAngularSpeed { get { return this[nameof(HorizontalAngularSpeed)].GetValue<float>(); } set { this[nameof(HorizontalAngularSpeed)].SetValue<float>(value); } }
        public float HorizontalAngularSpeed_Abs { get { return this[nameof(HorizontalAngularSpeed_Abs)].GetValue<float>(); } set { this[nameof(HorizontalAngularSpeed_Abs)].SetValue<float>(value); } }
        public float VerticalAngularSpeed { get { return this[nameof(VerticalAngularSpeed)].GetValue<float>(); } set { this[nameof(VerticalAngularSpeed)].SetValue<float>(value); } }
        public EMoveDirection MoveDirection { get { return (EMoveDirection)this[nameof(MoveDirection)].GetValue<int>(); } set { this[nameof(MoveDirection)].SetValue<int>((int)value); } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public bool IsStrafing { get { return this[nameof(IsStrafing)].Flag; } set { this[nameof(IsStrafing)].Flag = value; } }
        public bool IsMovingAndStrafing { get { return this[nameof(IsMovingAndStrafing)].Flag; } set { this[nameof(IsMovingAndStrafing)].Flag = value; } }
        public bool IsFrozen { get { return this[nameof(IsFrozen)].Flag; } set { this[nameof(IsFrozen)].Flag = value; } }
        public bool IsStaggered { get { return this[nameof(IsStaggered)].Flag; } set { this[nameof(IsStaggered)].Flag = value; } }
        public float StaggerStrength { get { return this[nameof(StaggerStrength)].GetValue<float>(); } set { this[nameof(StaggerStrength)].SetValue<float>(value); } }
        public bool IsAirborne { get { return this[nameof(IsAirborne)].Flag; } set { this[nameof(IsAirborne)].Flag = value; } }
        public ParticleSystem FootStepParticle { get { return this[nameof(FootStepParticle)].As<ParticleSystem>(); } set { this["FootStepParticle"] = value; } }
        public SoundCue FootStepSound { get { return this[nameof(FootStepSound)].As<SoundCue>(); } set { this["FootStepSound"] = value; } }
        public Object FootStepLeftBoneName { get { return this[nameof(FootStepLeftBoneName)]; } set { this[nameof(FootStepLeftBoneName)] = value; } }
        public Object FootStepRightBoneName { get { return this[nameof(FootStepRightBoneName)]; } set { this[nameof(FootStepRightBoneName)] = value; } }
        public float FootStepParticleCullDistance { get { return this[nameof(FootStepParticleCullDistance)].GetValue<float>(); } set { this[nameof(FootStepParticleCullDistance)].SetValue<float>(value); } }
        public Object PlaySoundByKeyMap { get { return this[nameof(PlaySoundByKeyMap)]; } set { this[nameof(PlaySoundByKeyMap)] = value; } }
        public Object SpawnEffectsByKeyMap { get { return this[nameof(SpawnEffectsByKeyMap)]; } set { this[nameof(SpawnEffectsByKeyMap)] = value; } }
        public int RandomWalkCycleIndex { get { return this[nameof(RandomWalkCycleIndex)].GetValue<int>(); } set { this[nameof(RandomWalkCycleIndex)].SetValue<int>(value); } }
        public UArray<RandomWalkCycleEntry> RandomWalkCycles { get { return new UArray<RandomWalkCycleEntry>(this[nameof(RandomWalkCycles)].Address); } }
        public bool TurnToIdle { get { return this[nameof(TurnToIdle)].Flag; } set { this[nameof(TurnToIdle)].Flag = value; } }
        public bool IdleToTurnLeft { get { return this[nameof(IdleToTurnLeft)].Flag; } set { this[nameof(IdleToTurnLeft)].Flag = value; } }
        public bool IdleToTurnRight { get { return this[nameof(IdleToTurnRight)].Flag; } set { this[nameof(IdleToTurnRight)].Flag = value; } }
        public bool TurnToWalk { get { return this[nameof(TurnToWalk)].Flag; } set { this[nameof(TurnToWalk)].Flag = value; } }
        public bool WalkToTurnRight { get { return this[nameof(WalkToTurnRight)].Flag; } set { this[nameof(WalkToTurnRight)].Flag = value; } }
        public bool WalkToTurnLeft { get { return this[nameof(WalkToTurnLeft)].Flag; } set { this[nameof(WalkToTurnLeft)].Flag = value; } }
        public bool ExclusiveTurnStateMode { get { return this[nameof(ExclusiveTurnStateMode)].Flag; } set { this[nameof(ExclusiveTurnStateMode)].Flag = value; } }
        public bool IsInFakePhysics { get { return this[nameof(IsInFakePhysics)].Flag; } set { this[nameof(IsInFakePhysics)].Flag = value; } }
        public ESpiderDeathAnimationCategory DeathAnimationCategory { get { return (ESpiderDeathAnimationCategory)this[nameof(DeathAnimationCategory)].GetValue<int>(); } set { this[nameof(DeathAnimationCategory)].SetValue<int>((int)value); } }
        public void SetMeshScale(float NewScale) { Invoke(nameof(SetMeshScale), NewScale); }
        public void SetDeathAnimationCategory(ESpiderDeathAnimationCategory Category) { Invoke(nameof(SetDeathAnimationCategory), Category); }
        public void SetDeathAnimation(AnimSequenceBase Animation) { Invoke(nameof(SetDeathAnimation), Animation); }
        public void PlayForcedCycle(float Duration) { Invoke(nameof(PlayForcedCycle), Duration); }
        public bool IsNotStrafing() { return Invoke<bool>(nameof(IsNotStrafing)); }
        public bool IsNotStaggered() { return Invoke<bool>(nameof(IsNotStaggered)); }
        public bool IsNotMoving() { return Invoke<bool>(nameof(IsNotMoving)); }
        public bool IsNotFrozen() { return Invoke<bool>(nameof(IsNotFrozen)); }
        public bool IsNotAirborne() { return Invoke<bool>(nameof(IsNotAirborne)); }
    }
    public class CrawlerAnimInstance : SpiderAnimInstance
    {
        public CrawlerAnimInstance(nint addr) : base(addr) { }
        public float TotalProgressionTime { get { return this[nameof(TotalProgressionTime)].GetValue<float>(); } set { this[nameof(TotalProgressionTime)].SetValue<float>(value); } }
        public bool bIsInBallisticMove { get { return this[nameof(bIsInBallisticMove)].Flag; } set { this[nameof(bIsInBallisticMove)].Flag = value; } }
        public float BallisticPitch { get { return this[nameof(BallisticPitch)].GetValue<float>(); } set { this[nameof(BallisticPitch)].SetValue<float>(value); } }
        public float ProgressionTime { get { return this[nameof(ProgressionTime)].GetValue<float>(); } set { this[nameof(ProgressionTime)].SetValue<float>(value); } }
        public float AttackMoveBlend { get { return this[nameof(AttackMoveBlend)].GetValue<float>(); } set { this[nameof(AttackMoveBlend)].SetValue<float>(value); } }
        public UArray<AnimMontage> HeadIdleBreakMontages { get { return new UArray<AnimMontage>(this[nameof(HeadIdleBreakMontages)].Address); } }
        public Vector2D IdleBreakTimeRange { get { return this[nameof(IdleBreakTimeRange)].As<Vector2D>(); } set { this["IdleBreakTimeRange"] = value; } }
    }
    public class CrawlerEnemy : CoreSpawnEnemyBase
    {
        public CrawlerEnemy(nint addr) : base(addr) { }
        public MeleeAttackComponent MeleeAttack { get { return this[nameof(MeleeAttack)].As<MeleeAttackComponent>(); } set { this["MeleeAttack"] = value; } }
        public BallisticMovementComponent BallisticMovement { get { return this[nameof(BallisticMovement)].As<BallisticMovementComponent>(); } set { this["BallisticMovement"] = value; } }
    }
    public class CreditsResourceData : ResourceData
    {
        public CreditsResourceData(nint addr) : base(addr) { }
    }
    public class BaseCritterDescriptor : DataAsset
    {
        public BaseCritterDescriptor(nint addr) : base(addr) { }
        public Object CritterClass { get { return this[nameof(CritterClass)]; } set { this[nameof(CritterClass)] = value; } }
        public Object BiomeClassOverrides { get { return this[nameof(BiomeClassOverrides)]; } set { this[nameof(BiomeClassOverrides)] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public DeepPathFinderType PathfinderType { get { return (DeepPathFinderType)this[nameof(PathfinderType)].GetValue<int>(); } set { this[nameof(PathfinderType)].SetValue<int>((int)value); } }
    }
    public class CritterDescriptor : BaseCritterDescriptor
    {
        public CritterDescriptor(nint addr) : base(addr) { }
        public IRandRange SpawnAmountPerRoom { get { return this[nameof(SpawnAmountPerRoom)].As<IRandRange>(); } set { this["SpawnAmountPerRoom"] = value; } }
        public float SpawnChancePerRoom { get { return this[nameof(SpawnChancePerRoom)].GetValue<float>(); } set { this[nameof(SpawnChancePerRoom)].SetValue<float>(value); } }
        public IRandRange SpawnAmountPerLevel { get { return this[nameof(SpawnAmountPerLevel)].As<IRandRange>(); } set { this["SpawnAmountPerLevel"] = value; } }
    }
    public class RareCritterDescriptor : BaseCritterDescriptor
    {
        public RareCritterDescriptor(nint addr) : base(addr) { }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
    }
    public class CritterManager : ActorComponent
    {
        public CritterManager(nint addr) : base(addr) { }
        public bool DisableCritters { get { return this[nameof(DisableCritters)].Flag; } set { this[nameof(DisableCritters)].Flag = value; } }
        public float ActivationRange { get { return this[nameof(ActivationRange)].GetValue<float>(); } set { this[nameof(ActivationRange)].SetValue<float>(value); } }
    }
    public class Crossbow : AmmoDrivenWeapon
    {
        public Crossbow(nint addr) : base(addr) { }
        public Object OnDefaultArrowEquippedChanged { get { return this[nameof(OnDefaultArrowEquippedChanged)]; } set { this[nameof(OnDefaultArrowEquippedChanged)] = value; } }
        public float FullDamageSpeed { get { return this[nameof(FullDamageSpeed)].GetValue<float>(); } set { this[nameof(FullDamageSpeed)].SetValue<float>(value); } }
        public Object DefaultArrow { get { return this[nameof(DefaultArrow)]; } set { this[nameof(DefaultArrow)] = value; } }
        public Object SpecialArrow { get { return this[nameof(SpecialArrow)]; } set { this[nameof(SpecialArrow)] = value; } }
        public float SpecialStatusEffectBonusTimeScale { get { return this[nameof(SpecialStatusEffectBonusTimeScale)].GetValue<float>(); } set { this[nameof(SpecialStatusEffectBonusTimeScale)].SetValue<float>(value); } }
        public Object BattleFrenzyStatusEffect { get { return this[nameof(BattleFrenzyStatusEffect)]; } set { this[nameof(BattleFrenzyStatusEffect)] = value; } }
        public Object BasicSpawnableStuckProjectile { get { return this[nameof(BasicSpawnableStuckProjectile)]; } set { this[nameof(BasicSpawnableStuckProjectile)] = value; } }
        public int SpecialAmmoMax { get { return this[nameof(SpecialAmmoMax)].GetValue<int>(); } set { this[nameof(SpecialAmmoMax)].SetValue<int>(value); } }
        public float SwitchTime { get { return this[nameof(SwitchTime)].GetValue<float>(); } set { this[nameof(SwitchTime)].SetValue<float>(value); } }
        public bool CanTrifork { get { return this[nameof(CanTrifork)].Flag; } set { this[nameof(CanTrifork)].Flag = value; } }
        public bool IsDefaultArrowEquipped { get { return this[nameof(IsDefaultArrowEquipped)].Flag; } set { this[nameof(IsDefaultArrowEquipped)].Flag = value; } }
        public float RecallProgress { get { return this[nameof(RecallProgress)].GetValue<float>(); } set { this[nameof(RecallProgress)].SetValue<float>(value); } }
        public StaticMeshComponent AnimatedFPMesh { get { return this[nameof(AnimatedFPMesh)].As<StaticMeshComponent>(); } set { this["AnimatedFPMesh"] = value; } }
        public StaticMeshComponent AnimatedTPMesh { get { return this[nameof(AnimatedTPMesh)].As<StaticMeshComponent>(); } set { this["AnimatedTPMesh"] = value; } }
        public bool SwitchIsQueued { get { return this[nameof(SwitchIsQueued)].Flag; } set { this[nameof(SwitchIsQueued)].Flag = value; } }
        public ECrossbowSwitchState SwitchState { get { return (ECrossbowSwitchState)this[nameof(SwitchState)].GetValue<int>(); } set { this[nameof(SwitchState)].SetValue<int>((int)value); } }
        public float OutOfAmmoSwapDelay { get { return this[nameof(OutOfAmmoSwapDelay)].GetValue<float>(); } set { this[nameof(OutOfAmmoSwapDelay)].SetValue<float>(value); } }
        public Object AnimatedArrowSpawnable { get { return this[nameof(AnimatedArrowSpawnable)]; } set { this[nameof(AnimatedArrowSpawnable)] = value; } }
        public float ExtraShotAngleDifference { get { return this[nameof(ExtraShotAngleDifference)].GetValue<float>(); } set { this[nameof(ExtraShotAngleDifference)].SetValue<float>(value); } }
        public CrossbowProjectileRecallable HoveringRecallable { get { return this[nameof(HoveringRecallable)].As<CrossbowProjectileRecallable>(); } set { this["HoveringRecallable"] = value; } }
        public float SwitchTimeCof { get { return this[nameof(SwitchTimeCof)].GetValue<float>(); } set { this[nameof(SwitchTimeCof)].SetValue<float>(value); } }
        public StaticMesh TriforkArrowMesh { get { return this[nameof(TriforkArrowMesh)].As<StaticMesh>(); } set { this["TriforkArrowMesh"] = value; } }
        public StaticMesh QuintPackArrowMesh { get { return this[nameof(QuintPackArrowMesh)].As<StaticMesh>(); } set { this["QuintPackArrowMesh"] = value; } }
        public UArray<ProjectileSwitch> GearStatArrows { get { return new UArray<ProjectileSwitch>(this[nameof(GearStatArrows)].Address); } }
        public AnimMontage SwitchMontage { get { return this[nameof(SwitchMontage)].As<AnimMontage>(); } set { this["SwitchMontage"] = value; } }
        public AnimMontage SwitchMontage_TP { get { return this[nameof(SwitchMontage_TP)].As<AnimMontage>(); } set { this["SwitchMontage_TP"] = value; } }
        public AnimMontage CharacterSwitchMontage { get { return this[nameof(CharacterSwitchMontage)].As<AnimMontage>(); } set { this["CharacterSwitchMontage"] = value; } }
        public AnimMontage ReloadMontage { get { return this[nameof(ReloadMontage)].As<AnimMontage>(); } set { this["ReloadMontage"] = value; } }
        public AnimMontage ReloadMontage_TP { get { return this[nameof(ReloadMontage_TP)].As<AnimMontage>(); } set { this["ReloadMontage_TP"] = value; } }
        public AnimMontage CharacterReloadMontage { get { return this[nameof(CharacterReloadMontage)].As<AnimMontage>(); } set { this["CharacterReloadMontage"] = value; } }
        public UArray<SoundCue> ReloadSoundCues { get { return new UArray<SoundCue>(this[nameof(ReloadSoundCues)].Address); } }
        public void UpdateRecallProgress() { Invoke(nameof(UpdateRecallProgress)); }
        public void StartAmmoSwitch() { Invoke(nameof(StartAmmoSwitch)); }
        public void SetAnimatedTPMeshComponentFromBP(Actor animatedArrow) { Invoke(nameof(SetAnimatedTPMeshComponentFromBP), animatedArrow); }
        public void SetAnimatedTPMeshComponent(StaticMeshComponent Component) { Invoke(nameof(SetAnimatedTPMeshComponent), Component); }
        public void SetAnimatedFPMeshComponentFromBP(Actor animatedArrow) { Invoke(nameof(SetAnimatedFPMeshComponentFromBP), animatedArrow); }
        public void SetAnimatedFPMeshComponent(StaticMeshComponent Component) { Invoke(nameof(SetAnimatedFPMeshComponent), Component); }
        public void Server_UpdateRetrievableArrows(int defaultAmmo, int specialAmmo) { Invoke(nameof(Server_UpdateRetrievableArrows), defaultAmmo, specialAmmo); }
        public void Server_SwitchAmmoType(ProjectileLauncherBaseComponent projectileLauncher, ECrossbowSwitchState State) { Invoke(nameof(Server_SwitchAmmoType), projectileLauncher, State); }
        public void Server_SetSwitchIsQueued(bool IsQueued) { Invoke(nameof(Server_SetSwitchIsQueued), IsQueued); }
        public void OnRep_SwitchIsQueued() { Invoke(nameof(OnRep_SwitchIsQueued)); }
        public void OnRep_IsDefaultArrowEquipped() { Invoke(nameof(OnRep_IsDefaultArrowEquipped)); }
        public void OnProjectileFired(ProjectileBase Projectile) { Invoke(nameof(OnProjectileFired), Projectile); }
        public int GetTotalArrowCount(bool InDefaultArrowCount) { return Invoke<int>(nameof(GetTotalArrowCount), InDefaultArrowCount); }
        public float GetSpecialArrowEffectDuration(Object Effect) { return Invoke<float>(nameof(GetSpecialArrowEffectDuration), Effect); }
        public bool GetIsDefaultArrowEquipped() { return Invoke<bool>(nameof(GetIsDefaultArrowEquipped)); }
        public void DestroyActor(Actor Actor) { Invoke(nameof(DestroyActor), Actor); }
        public void DefaultArrowEquippedChanged__DelegateSignature(bool InDefaultArrow) { Invoke(nameof(DefaultArrowEquippedChanged__DelegateSignature), InDefaultArrow); }
        public void Client_RefillSpecialAmmo(float percentage) { Invoke(nameof(Client_RefillSpecialAmmo), percentage); }
        public void Client_CallAddSpecialAmmo(int amount) { Invoke(nameof(Client_CallAddSpecialAmmo), amount); }
        public void Client_CallAddDefaultAmmo(int amount) { Invoke(nameof(Client_CallAddDefaultAmmo), amount); }
    }
    public class CrossbowProjectileBase : Projectile
    {
        public CrossbowProjectileBase(nint addr) : base(addr) { }
        public Object OnDamageDealt { get { return this[nameof(OnDamageDealt)]; } set { this[nameof(OnDamageDealt)] = value; } }
        public float StatusEffectTime { get { return this[nameof(StatusEffectTime)].GetValue<float>(); } set { this[nameof(StatusEffectTime)].SetValue<float>(value); } }
        public bool BansheePulseActive { get { return this[nameof(BansheePulseActive)].Flag; } set { this[nameof(BansheePulseActive)].Flag = value; } }
        public CrossbowProjectileMagnetic MagneticComponent { get { return this[nameof(MagneticComponent)].As<CrossbowProjectileMagnetic>(); } set { this["MagneticComponent"] = value; } }
        public CrossbowProjectileRicochet RicochetComponent { get { return this[nameof(RicochetComponent)].As<CrossbowProjectileRicochet>(); } set { this["RicochetComponent"] = value; } }
        public CrossbowStuckProjectileEffectBanshee BansheeComponent { get { return this[nameof(BansheeComponent)].As<CrossbowStuckProjectileEffectBanshee>(); } set { this["BansheeComponent"] = value; } }
        public NiagaraComponent BansheePulseComponent { get { return this[nameof(BansheePulseComponent)].As<NiagaraComponent>(); } set { this["BansheePulseComponent"] = value; } }
        public Object BansheeComponentClass { get { return this[nameof(BansheeComponentClass)]; } set { this[nameof(BansheeComponentClass)] = value; } }
        public Object RecallComponentClass { get { return this[nameof(RecallComponentClass)]; } set { this[nameof(RecallComponentClass)] = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public Object TriforkIcon { get { return this[nameof(TriforkIcon)]; } set { this[nameof(TriforkIcon)] = value; } }
        public Object SpawnableStuckProjectile { get { return this[nameof(SpawnableStuckProjectile)]; } set { this[nameof(SpawnableStuckProjectile)] = value; } }
        public Object OnDamageEffect { get { return this[nameof(OnDamageEffect)]; } set { this[nameof(OnDamageEffect)] = value; } }
        public ECrossbowEffectApplication EffectApplication { get { return (ECrossbowEffectApplication)this[nameof(EffectApplication)].GetValue<int>(); } set { this[nameof(EffectApplication)].SetValue<int>((int)value); } }
        public byte SelectionPriority { get { return this[nameof(SelectionPriority)].GetValue<byte>(); } set { this[nameof(SelectionPriority)].SetValue<byte>(value); } }
        public bool CanEverBePickedUp { get { return this[nameof(CanEverBePickedUp)].Flag; } set { this[nameof(CanEverBePickedUp)].Flag = value; } }
        public bool Penetrates { get { return this[nameof(Penetrates)].Flag; } set { this[nameof(Penetrates)].Flag = value; } }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
        public bool IsASpecialProjectile { get { return this[nameof(IsASpecialProjectile)].Flag; } set { this[nameof(IsASpecialProjectile)].Flag = value; } }
        public DamageComponent MainDamageComponent { get { return this[nameof(MainDamageComponent)].As<DamageComponent>(); } set { this["MainDamageComponent"] = value; } }
        public DamageComponent SimpleDamageComponent { get { return this[nameof(SimpleDamageComponent)].As<DamageComponent>(); } set { this["SimpleDamageComponent"] = value; } }
        public StaticMesh ProjectileMesh { get { return this[nameof(ProjectileMesh)].As<StaticMesh>(); } set { this["ProjectileMesh"] = value; } }
        public float KillTrailAfterTime { get { return this[nameof(KillTrailAfterTime)].GetValue<float>(); } set { this[nameof(KillTrailAfterTime)].SetValue<float>(value); } }
        public bool OnlyTrailShown { get { return this[nameof(OnlyTrailShown)].Flag; } set { this[nameof(OnlyTrailShown)].Flag = value; } }
        public void SetSimpleDamageComponentFromBP() { Invoke(nameof(SetSimpleDamageComponentFromBP)); }
        public void SetSimpleDamageComponent(DamageComponent Component) { Invoke(nameof(SetSimpleDamageComponent), Component); }
        public void SetMainDamageComponentFromBP() { Invoke(nameof(SetMainDamageComponentFromBP)); }
        public void SetMainDamageComponent(DamageComponent Component) { Invoke(nameof(SetMainDamageComponent), Component); }
        public void Server_HandleImpact(HitResult HitResult, Vector RelativeLocation) { Invoke(nameof(Server_HandleImpact), HitResult, RelativeLocation); }
        public void OnRep_OnlyTrailShown() { Invoke(nameof(OnRep_OnlyTrailShown)); }
        public void OnRep_BansheePulseActive() { Invoke(nameof(OnRep_BansheePulseActive)); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool GetSpecialArrowEquipped() { return Invoke<bool>(nameof(GetSpecialArrowEquipped)); }
        public float GetScaledStatusEffectTime() { return Invoke<float>(nameof(GetScaledStatusEffectTime)); }
        public void ApplyDamageEffects(HitResult HitResult, Vector RelativeLocation) { Invoke(nameof(ApplyDamageEffects), HitResult, RelativeLocation); }
    }
    public class CrossbowProjectileControlled : ActorComponent
    {
        public CrossbowProjectileControlled(nint addr) : base(addr) { }
        public SceneComponent HomingTarget { get { return this[nameof(HomingTarget)].As<SceneComponent>(); } set { this["HomingTarget"] = value; } }
        public CrossbowProjectileBase CastedOwner { get { return this[nameof(CastedOwner)].As<CrossbowProjectileBase>(); } set { this["CastedOwner"] = value; } }
        public void UpdateHomingTarget() { Invoke(nameof(UpdateHomingTarget)); }
        public void Server_UpdateHomingTarget(Vector Target) { Invoke(nameof(Server_UpdateHomingTarget), Target); }
        public void CancelControl() { Invoke(nameof(CancelControl)); }
        public void All_UpdateHomingTarget(Vector Target) { Invoke(nameof(All_UpdateHomingTarget), Target); }
    }
    public class CrossbowProjectileMagnetic : ActorComponent
    {
        public CrossbowProjectileMagnetic(nint addr) : base(addr) { }
        public UArray<Object> ElectricEffects { get { return new UArray<Object>(this[nameof(ElectricEffects)].Address); } }
        public Object TargetEnemy { get { return this[nameof(TargetEnemy)]; } set { this[nameof(TargetEnemy)] = value; } }
        public float OverlapCheckSize { get { return this[nameof(OverlapCheckSize)].GetValue<float>(); } set { this[nameof(OverlapCheckSize)].SetValue<float>(value); } }
    }
    public class CrossbowProjectileRecallable : ActorComponent
    {
        public CrossbowProjectileRecallable(nint addr) : base(addr) { }
        public InstantUsable Usable { get { return this[nameof(Usable)].As<InstantUsable>(); } set { this["Usable"] = value; } }
        public PlayerCharacter RecallTarget { get { return this[nameof(RecallTarget)].As<PlayerCharacter>(); } set { this["RecallTarget"] = value; } }
        public float RecallStartTime { get { return this[nameof(RecallStartTime)].GetValue<float>(); } set { this[nameof(RecallStartTime)].SetValue<float>(value); } }
        public float RecallSpeed { get { return this[nameof(RecallSpeed)].GetValue<float>(); } set { this[nameof(RecallSpeed)].SetValue<float>(value); } }
        public Transform StartTransform { get { return this[nameof(StartTransform)].As<Transform>(); } set { this["StartTransform"] = value; } }
        public InterpolatedFirstPersonStaticMeshComponent FPMeshComponent { get { return this[nameof(FPMeshComponent)].As<InterpolatedFirstPersonStaticMeshComponent>(); } set { this["FPMeshComponent"] = value; } }
        public bool IsRecallable { get { return this[nameof(IsRecallable)].Flag; } set { this[nameof(IsRecallable)].Flag = value; } }
        public void Server_SetRecallTarget(PlayerCharacter Player, Transform startTrans) { Invoke(nameof(Server_SetRecallTarget), Player, startTrans); }
    }
    public class CrossbowProjectileRicochet : ActorComponent
    {
        public CrossbowProjectileRicochet(nint addr) : base(addr) { }
        public NiagaraSystem NiagaraTrailParticleSystem { get { return this[nameof(NiagaraTrailParticleSystem)].As<NiagaraSystem>(); } set { this["NiagaraTrailParticleSystem"] = value; } }
        public int RicochetMax { get { return this[nameof(RicochetMax)].GetValue<int>(); } set { this[nameof(RicochetMax)].SetValue<int>(value); } }
        public float RicochetRange { get { return this[nameof(RicochetRange)].GetValue<float>(); } set { this[nameof(RicochetRange)].SetValue<float>(value); } }
        public CrossbowProjectileBase CastedOwner { get { return this[nameof(CastedOwner)].As<CrossbowProjectileBase>(); } set { this["CastedOwner"] = value; } }
        public void Ricochet(HitResult HitResult, Vector RelativeLocation) { Invoke(nameof(Ricochet), HitResult, RelativeLocation); }
    }
    public class CrossbowStuckProjectileEffect : ActorComponent
    {
        public CrossbowStuckProjectileEffect(nint addr) : base(addr) { }
    }
    public class CrossbowStuckProjectileEffectApplication : CrossbowStuckProjectileEffect
    {
        public CrossbowStuckProjectileEffectApplication(nint addr) : base(addr) { }
        public float SearchSphereSize { get { return this[nameof(SearchSphereSize)].GetValue<float>(); } set { this[nameof(SearchSphereSize)].SetValue<float>(value); } }
        public float SearchTime { get { return this[nameof(SearchTime)].GetValue<float>(); } set { this[nameof(SearchTime)].SetValue<float>(value); } }
        public bool CurrentlyActive { get { return this[nameof(CurrentlyActive)].Flag; } set { this[nameof(CurrentlyActive)].Flag = value; } }
    }
    public class CrossbowStuckProjectileEffectExploding : CrossbowStuckProjectileEffect
    {
        public CrossbowStuckProjectileEffectExploding(nint addr) : base(addr) { }
        public SoundCue ChemicalSoundCue { get { return this[nameof(ChemicalSoundCue)].As<SoundCue>(); } set { this["ChemicalSoundCue"] = value; } }
        public AudioComponent ChemicalAudioComponent { get { return this[nameof(ChemicalAudioComponent)].As<AudioComponent>(); } set { this["ChemicalAudioComponent"] = value; } }
        public float ChemicalReactionDelay { get { return this[nameof(ChemicalReactionDelay)].GetValue<float>(); } set { this[nameof(ChemicalReactionDelay)].SetValue<float>(value); } }
        public void StartTimeoutTimer(HealthComponentBase destroyed) { Invoke(nameof(StartTimeoutTimer), destroyed); }
        public void EnableTimeOut() { Invoke(nameof(EnableTimeOut)); }
    }
    public class CrossbowStuckProjectileEffectBanshee : CrossbowStuckProjectileEffect
    {
        public CrossbowStuckProjectileEffectBanshee(nint addr) : base(addr) { }
        public float SearchSphereSize { get { return this[nameof(SearchSphereSize)].GetValue<float>(); } set { this[nameof(SearchSphereSize)].SetValue<float>(value); } }
        public float SearchTime { get { return this[nameof(SearchTime)].GetValue<float>(); } set { this[nameof(SearchTime)].SetValue<float>(value); } }
    }
    public class CrossbowStuckProjectileEffectElectric : CrossbowStuckProjectileEffect
    {
        public CrossbowStuckProjectileEffectElectric(nint addr) : base(addr) { }
        public Object PlasmaBeamClass { get { return this[nameof(PlasmaBeamClass)]; } set { this[nameof(PlasmaBeamClass)] = value; } }
        public Object ElectrocutionActorClass { get { return this[nameof(ElectrocutionActorClass)]; } set { this[nameof(ElectrocutionActorClass)] = value; } }
        public float PlasmaLineMaxRange { get { return this[nameof(PlasmaLineMaxRange)].GetValue<float>(); } set { this[nameof(PlasmaLineMaxRange)].SetValue<float>(value); } }
        public Object ElectrocutionActor { get { return this[nameof(ElectrocutionActor)]; } set { this[nameof(ElectrocutionActor)] = value; } }
        public void OnElectrocutionActorDestroyed(Actor Actor) { Invoke(nameof(OnElectrocutionActorDestroyed), Actor); }
    }
    public class CrossbowProjectileStuck : FSDPhysicsActor
    {
        public CrossbowProjectileStuck(nint addr) : base(addr) { }
        public ECrossbowStuckType StuckProjectileEffect { get { return (ECrossbowStuckType)this[nameof(StuckProjectileEffect)].GetValue<int>(); } set { this[nameof(StuckProjectileEffect)].SetValue<int>((int)value); } }
        public bool BansheePulseEnabled { get { return this[nameof(BansheePulseEnabled)].Flag; } set { this[nameof(BansheePulseEnabled)].Flag = value; } }
        public bool IsPlayingElectricRangeEffect { get { return this[nameof(IsPlayingElectricRangeEffect)].Flag; } set { this[nameof(IsPlayingElectricRangeEffect)].Flag = value; } }
        public Object AppliedEffect { get { return this[nameof(AppliedEffect)]; } set { this[nameof(AppliedEffect)] = value; } }
        public float StatusEffectTime { get { return this[nameof(StatusEffectTime)].GetValue<float>(); } set { this[nameof(StatusEffectTime)].SetValue<float>(value); } }
        public SphereComponent AttachmentRoot { get { return this[nameof(AttachmentRoot)].As<SphereComponent>(); } set { this["AttachmentRoot"] = value; } }
        public CrossbowProjectileRecallable RecallComponent { get { return this[nameof(RecallComponent)].As<CrossbowProjectileRecallable>(); } set { this["RecallComponent"] = value; } }
        public CrossbowStuckProjectileEffectBanshee BansheeComponent { get { return this[nameof(BansheeComponent)].As<CrossbowStuckProjectileEffectBanshee>(); } set { this["BansheeComponent"] = value; } }
        public NiagaraComponent BansheePulseComponent { get { return this[nameof(BansheePulseComponent)].As<NiagaraComponent>(); } set { this["BansheePulseComponent"] = value; } }
        public SphereComponent LaserCollider { get { return this[nameof(LaserCollider)].As<SphereComponent>(); } set { this["LaserCollider"] = value; } }
        public CrossbowProjectileBase BaseProjectile { get { return this[nameof(BaseProjectile)].As<CrossbowProjectileBase>(); } set { this["BaseProjectile"] = value; } }
        public void UsableChanged(bool CanUse) { Invoke(nameof(UsableChanged), CanUse); }
        public void OnUsedBy(PlayerCharacter Player, EInputKeys Key) { Invoke(nameof(OnUsedBy), Player, Key); }
        public void OnRep_BansheePulseEnabled() { Invoke(nameof(OnRep_BansheePulseEnabled)); }
        public void MatchParentDestroy(HealthComponentBase destroyed) { Invoke(nameof(MatchParentDestroy), destroyed); }
        public bool IsLocallyControlled() { return Invoke<bool>(nameof(IsLocallyControlled)); }
        public bool GetSpecialArrowEquipped() { return Invoke<bool>(nameof(GetSpecialArrowEquipped)); }
        public void All_OnCavePointRemoved(SceneComponent Point) { Invoke(nameof(All_OnCavePointRemoved), Point); }
    }
    public class CrosshairWidget : UserWidget
    {
        public CrosshairWidget(nint addr) : base(addr) { }
        public void SetData(Item Item) { Invoke(nameof(SetData), Item); }
        public void OnUpgraded(Item Item) { Invoke(nameof(OnUpgraded), Item); }
    }
    public class CrosshairAggregator : ItemAggregator
    {
        public CrosshairAggregator(nint addr) : base(addr) { }
        public Object OnCrosshairCreated { get { return this[nameof(OnCrosshairCreated)]; } set { this[nameof(OnCrosshairCreated)] = value; } }
        public UserWidget CrosshairWidget { get { return this[nameof(CrosshairWidget)].As<UserWidget>(); } set { this["CrosshairWidget"] = value; } }
        public Object CrossHairType { get { return this[nameof(CrossHairType)]; } set { this[nameof(CrossHairType)] = value; } }
        public CustomAmmoCountWidget CustomAmmoCounterWidget { get { return this[nameof(CustomAmmoCounterWidget)].As<CustomAmmoCountWidget>(); } set { this["CustomAmmoCounterWidget"] = value; } }
        public CustomAmmoCountWidget AdditionalAmmoCounterWidget { get { return this[nameof(AdditionalAmmoCounterWidget)].As<CustomAmmoCountWidget>(); } set { this["AdditionalAmmoCounterWidget"] = value; } }
        public Object CustomAmmoCounterType { get { return this[nameof(CustomAmmoCounterType)]; } set { this[nameof(CustomAmmoCounterType)] = value; } }
        public Object AdditionalAmmoCounterType { get { return this[nameof(AdditionalAmmoCounterType)]; } set { this[nameof(AdditionalAmmoCounterType)] = value; } }
        public void SetCrosshair(UserWidget Widget) { Invoke(nameof(SetCrosshair), Widget); }
        public UserWidget GetOrCreateCrosshair() { return Invoke<UserWidget>(nameof(GetOrCreateCrosshair)); }
        public CustomAmmoCountWidget GetCustomAmmoCounterWidget(Object WorldContext, PlayerController InOwner) { return Invoke<CustomAmmoCountWidget>(nameof(GetCustomAmmoCounterWidget), WorldContext, InOwner); }
        public CustomAmmoCountWidget GetAdditionalAmmoCounterWidget(Object WorldContext, PlayerController InOwner) { return Invoke<CustomAmmoCountWidget>(nameof(GetAdditionalAmmoCounterWidget), WorldContext, InOwner); }
    }
    public class CryosprayItem : AmmoDrivenWeapon
    {
        public CryosprayItem(nint addr) : base(addr) { }
        public ProjectileLauncherComponent projectileLauncher { get { return this[nameof(projectileLauncher)].As<ProjectileLauncherComponent>(); } set { this["projectileLauncher"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public StickyFlameSpawner StickyFlames { get { return this[nameof(StickyFlames)].As<StickyFlameSpawner>(); } set { this["StickyFlames"] = value; } }
        public DamageComponent AoEColdDamageComponent { get { return this[nameof(AoEColdDamageComponent)].As<DamageComponent>(); } set { this["AoEColdDamageComponent"] = value; } }
        public MotionAudioController VelocityAudio { get { return this[nameof(VelocityAudio)].As<MotionAudioController>(); } set { this["VelocityAudio"] = value; } }
        public ParticleSystemComponent FlameParticleComponent { get { return this[nameof(FlameParticleComponent)].As<ParticleSystemComponent>(); } set { this["FlameParticleComponent"] = value; } }
        public bool PressurizedProjectileEnabled { get { return this[nameof(PressurizedProjectileEnabled)].Flag; } set { this[nameof(PressurizedProjectileEnabled)].Flag = value; } }
        public float PressurizedProjectileDelay { get { return this[nameof(PressurizedProjectileDelay)].GetValue<float>(); } set { this[nameof(PressurizedProjectileDelay)].SetValue<float>(value); } }
        public int PressurizeProjectileFullCost { get { return this[nameof(PressurizeProjectileFullCost)].GetValue<int>(); } set { this[nameof(PressurizeProjectileFullCost)].SetValue<int>(value); } }
        public ParticleSystem ChargeupParticles { get { return this[nameof(ChargeupParticles)].As<ParticleSystem>(); } set { this["ChargeupParticles"] = value; } }
        public ParticleSystemComponent ChargeupParticleInstance { get { return this[nameof(ChargeupParticleInstance)].As<ParticleSystemComponent>(); } set { this["ChargeupParticleInstance"] = value; } }
        public DecalData ImpactDecal { get { return this[nameof(ImpactDecal)].As<DecalData>(); } set { this["ImpactDecal"] = value; } }
        public float DecalDelay { get { return this[nameof(DecalDelay)].GetValue<float>(); } set { this[nameof(DecalDelay)].SetValue<float>(value); } }
        public ParticleSystem ImpactParticles { get { return this[nameof(ImpactParticles)].As<ParticleSystem>(); } set { this["ImpactParticles"] = value; } }
        public ParticleSystemComponent ImpactParticleInstance { get { return this[nameof(ImpactParticleInstance)].As<ParticleSystemComponent>(); } set { this["ImpactParticleInstance"] = value; } }
        public UArray<Object> FlameParameterNames { get { return new UArray<Object>(this[nameof(FlameParameterNames)].Address); } }
        public float DamageSphereRadius { get { return this[nameof(DamageSphereRadius)].GetValue<float>(); } set { this[nameof(DamageSphereRadius)].SetValue<float>(value); } }
        public float MaxFlameDistance { get { return this[nameof(MaxFlameDistance)].GetValue<float>(); } set { this[nameof(MaxFlameDistance)].SetValue<float>(value); } }
        public float FlameGrowthPerSecond { get { return this[nameof(FlameGrowthPerSecond)].GetValue<float>(); } set { this[nameof(FlameGrowthPerSecond)].SetValue<float>(value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public float ChargeupTime { get { return this[nameof(ChargeupTime)].GetValue<float>(); } set { this[nameof(ChargeupTime)].SetValue<float>(value); } }
        public float ChargeDownTime { get { return this[nameof(ChargeDownTime)].GetValue<float>(); } set { this[nameof(ChargeDownTime)].SetValue<float>(value); } }
        public bool isCharging { get { return this[nameof(isCharging)].Flag; } set { this[nameof(isCharging)].Flag = value; } }
        public float ChargeProgress { get { return this[nameof(ChargeProgress)].GetValue<float>(); } set { this[nameof(ChargeProgress)].SetValue<float>(value); } }
        public bool bRepressurerising { get { return this[nameof(bRepressurerising)].Flag; } set { this[nameof(bRepressurerising)].Flag = value; } }
        public float RepressurerisingDoneAtPct { get { return this[nameof(RepressurerisingDoneAtPct)].GetValue<float>(); } set { this[nameof(RepressurerisingDoneAtPct)].SetValue<float>(value); } }
        public float ChargeUpFadeOutTime { get { return this[nameof(ChargeUpFadeOutTime)].GetValue<float>(); } set { this[nameof(ChargeUpFadeOutTime)].SetValue<float>(value); } }
        public FSDAudioComponent ChargeUpAudioComponent { get { return this[nameof(ChargeUpAudioComponent)].As<FSDAudioComponent>(); } set { this["ChargeUpAudioComponent"] = value; } }
        public float PressureTime { get { return this[nameof(PressureTime)].GetValue<float>(); } set { this[nameof(PressureTime)].SetValue<float>(value); } }
        public float PressureDropMultiplier { get { return this[nameof(PressureDropMultiplier)].GetValue<float>(); } set { this[nameof(PressureDropMultiplier)].SetValue<float>(value); } }
        public float PressureGainMultiplier { get { return this[nameof(PressureGainMultiplier)].GetValue<float>(); } set { this[nameof(PressureGainMultiplier)].SetValue<float>(value); } }
        public float CurrentPressure { get { return this[nameof(CurrentPressure)].GetValue<float>(); } set { this[nameof(CurrentPressure)].SetValue<float>(value); } }
        public float RePressureDuration { get { return this[nameof(RePressureDuration)].GetValue<float>(); } set { this[nameof(RePressureDuration)].SetValue<float>(value); } }
        public float RePressureProgress { get { return this[nameof(RePressureProgress)].GetValue<float>(); } set { this[nameof(RePressureProgress)].SetValue<float>(value); } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public bool LongReachEnabled { get { return this[nameof(LongReachEnabled)].Flag; } set { this[nameof(LongReachEnabled)].Flag = value; } }
        public bool AoEColdEnabled { get { return this[nameof(AoEColdEnabled)].Flag; } set { this[nameof(AoEColdEnabled)].Flag = value; } }
        public Object HitActorCache { get { return this[nameof(HitActorCache)]; } set { this[nameof(HitActorCache)] = value; } }
        public void ServerDoDamage(Vector_NetQuantize Start, Vector_NetQuantize End, byte Power) { Invoke(nameof(ServerDoDamage), Start, End, Power); }
        public void Server_TriggerAoECold() { Invoke(nameof(Server_TriggerAoECold)); }
        public void Server_PreLaunchProjectile() { Invoke(nameof(Server_PreLaunchProjectile)); }
        public void ReceiveRepressurisingChanged(bool Value) { Invoke(nameof(ReceiveRepressurisingChanged), Value); }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void OnRep_IsCharging(bool OldValue) { Invoke(nameof(OnRep_IsCharging), OldValue); }
        public void OnProjectileSpawned(ProjectileBase Projectile) { Invoke(nameof(OnProjectileSpawned), Projectile); }
        public void OnProjectileLaunched(Vector Location) { Invoke(nameof(OnProjectileLaunched), Location); }
        public void OnPressurizedPartileShoot() { Invoke(nameof(OnPressurizedPartileShoot)); }
        public void OnPreProjectileLaunch() { Invoke(nameof(OnPreProjectileLaunch)); }
        public void All_PreLaunchProjectile() { Invoke(nameof(All_PreLaunchProjectile)); }
    }
    public class CryoSprayAnimInstance : AnimInstance
    {
        public CryoSprayAnimInstance(nint addr) : base(addr) { }
        public CryosprayItem Weapon { get { return this[nameof(Weapon)].As<CryosprayItem>(); } set { this["Weapon"] = value; } }
        public bool IsFiring { get { return this[nameof(IsFiring)].Flag; } set { this[nameof(IsFiring)].Flag = value; } }
        public float ChargeProgress { get { return this[nameof(ChargeProgress)].GetValue<float>(); } set { this[nameof(ChargeProgress)].SetValue<float>(value); } }
        public Rotator ChargeRotation { get { return this[nameof(ChargeRotation)].As<Rotator>(); } set { this["ChargeRotation"] = value; } }
        public float ChargeBlend { get { return this[nameof(ChargeBlend)].GetValue<float>(); } set { this[nameof(ChargeBlend)].SetValue<float>(value); } }
        public float Pressure { get { return this[nameof(Pressure)].GetValue<float>(); } set { this[nameof(Pressure)].SetValue<float>(value); } }
    }
    public class CustomKeyBindingLibrary : BlueprintFunctionLibrary
    {
        public CustomKeyBindingLibrary(nint addr) : base(addr) { }
    }
    public class KeyBindingSettings : DataAsset
    {
        public KeyBindingSettings(nint addr) : base(addr) { }
        public UArray<CustomKeySetting> KeyboardMouseButtons { get { return new UArray<CustomKeySetting>(this[nameof(KeyboardMouseButtons)].Address); } }
        public UArray<CustomKeySetting> ControllerButtons { get { return new UArray<CustomKeySetting>(this[nameof(ControllerButtons)].Address); } }
    }
    public class CustomRichTextDecorator : RichTextBlockDecorator
    {
        public CustomRichTextDecorator(nint addr) : base(addr) { }
        public RichTextBlock RichTextBlock { get { return this[nameof(RichTextBlock)].As<RichTextBlock>(); } set { this["RichTextBlock"] = value; } }
    }
    public class DailyDealSettings : DataAsset
    {
        public DailyDealSettings(nint addr) : base(addr) { }
        public UArray<DailyDealSetup> DailyDeals { get { return new UArray<DailyDealSetup>(this[nameof(DailyDeals)].Address); } }
        public bool IsDailyDealBought(Object WorldContextObject) { return Invoke<bool>(nameof(IsDailyDealBought), WorldContextObject); }
        public int GetDailyDealSeed() { return Invoke<int>(nameof(GetDailyDealSeed)); }
        public void GetDailyDeal(DailyDeal outDeal) { Invoke(nameof(GetDailyDeal), outDeal); }
        public bool CanAffordDailyDeal(Object WorldContextObject) { return Invoke<bool>(nameof(CanAffordDailyDeal), WorldContextObject); }
        public bool BuyDailyDeal(Object WorldContextObject) { return Invoke<bool>(nameof(BuyDailyDeal), WorldContextObject); }
    }
    public class DamageAttackComponent : AttackBaseComponent
    {
        public DamageAttackComponent(nint addr) : base(addr) { }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
    }
    public class DamageBonusBase : DataAsset
    {
        public DamageBonusBase(nint addr) : base(addr) { }
        public bool UseBaseDamage { get { return this[nameof(UseBaseDamage)].Flag; } set { this[nameof(UseBaseDamage)].Flag = value; } }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
        public DamageBonusBase AddDamageBonusToComponent(Object damageBonusClass, DamageComponent DamageComponent) { return Invoke<DamageBonusBase>(nameof(AddDamageBonusToComponent), damageBonusClass, DamageComponent); }
    }
    public class PluckFromZiplineBonus : DamageBonusBase
    {
        public PluckFromZiplineBonus(nint addr) : base(addr) { }
    }
    public class FlatDamageBonus : DamageBonusBase
    {
        public FlatDamageBonus(nint addr) : base(addr) { }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
    }
    public class RangedFlatDamageBonus : DamageBonusBase
    {
        public RangedFlatDamageBonus(nint addr) : base(addr) { }
        public CurveFloat DamageCurve { get { return this[nameof(DamageCurve)].As<CurveFloat>(); } set { this["DamageCurve"] = value; } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
    }
    public class TargetSpecificDamageBonus : DamageBonusBase
    {
        public TargetSpecificDamageBonus(nint addr) : base(addr) { }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public GameplayTagQuery tagQuery { get { return this[nameof(tagQuery)].As<GameplayTagQuery>(); } set { this["tagQuery"] = value; } }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
    }
    public class DamageConversionBonus : DamageBonusBase
    {
        public DamageConversionBonus(nint addr) : base(addr) { }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public float ConversionPercentage { get { return this[nameof(ConversionPercentage)].GetValue<float>(); } set { this[nameof(ConversionPercentage)].SetValue<float>(value); } }
        public bool DamageIsAdded { get { return this[nameof(DamageIsAdded)].Flag; } set { this[nameof(DamageIsAdded)].Flag = value; } }
    }
    public class TargetStateDamageBonus : DamageBonusBase
    {
        public TargetStateDamageBonus(nint addr) : base(addr) { }
        public ETargetStateDamageBonusType TargetState { get { return (ETargetStateDamageBonusType)this[nameof(TargetState)].GetValue<int>(); } set { this[nameof(TargetState)].SetValue<int>((int)value); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
    }
    public class StatusDamageBonus : DamageBonusBase
    {
        public StatusDamageBonus(nint addr) : base(addr) { }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
    }
    public class StatusAndStateDamageBonus : DamageBonusBase
    {
        public StatusAndStateDamageBonus(nint addr) : base(addr) { }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
        public UArray<ETargetStateDamageBonusType> TargetStates { get { return new UArray<ETargetStateDamageBonusType>(this[nameof(TargetStates)].Address); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
    }
    public class PushStatusEffectDamageBonus : DamageBonusBase
    {
        public PushStatusEffectDamageBonus(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
        public bool IgnoreArmorHit { get { return this[nameof(IgnoreArmorHit)].Flag; } set { this[nameof(IgnoreArmorHit)].Flag = value; } }
    }
    public class PushDynamicStatusEffectDamageBonus : DamageBonusBase
    {
        public PushDynamicStatusEffectDamageBonus(nint addr) : base(addr) { }
        public Object BaseSTE { get { return this[nameof(BaseSTE)]; } set { this[nameof(BaseSTE)] = value; } }
        public StatusEffect StatusEffect { get { return this[nameof(StatusEffect)].As<StatusEffect>(); } set { this["StatusEffect"] = value; } }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
    }
    public class FearAoEBonus : DamageBonusBase
    {
        public FearAoEBonus(nint addr) : base(addr) { }
        public float FearFactor { get { return this[nameof(FearFactor)].GetValue<float>(); } set { this[nameof(FearFactor)].SetValue<float>(value); } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
    }
    public class AmmoLeftDamageBonus : FlatDamageBonus
    {
        public AmmoLeftDamageBonus(nint addr) : base(addr) { }
        public CurveFloat AmmoDamageCurve { get { return this[nameof(AmmoDamageCurve)].As<CurveFloat>(); } set { this["AmmoDamageCurve"] = value; } }
    }
    public class AmmoUsedDamageBonus : DamageBonusBase
    {
        public AmmoUsedDamageBonus(nint addr) : base(addr) { }
        public float DamageBonusPerRoundFired { get { return this[nameof(DamageBonusPerRoundFired)].GetValue<float>(); } set { this[nameof(DamageBonusPerRoundFired)].SetValue<float>(value); } }
    }
    public class RandomDamageBonus : DamageBonusBase
    {
        public RandomDamageBonus(nint addr) : base(addr) { }
        public RandRange RandomDamageRange { get { return this[nameof(RandomDamageRange)].As<RandRange>(); } set { this["RandomDamageRange"] = value; } }
    }
    public class PercentDamageBonus : DamageBonusBase
    {
        public PercentDamageBonus(nint addr) : base(addr) { }
        public float DamageMultiplier { get { return this[nameof(DamageMultiplier)].GetValue<float>(); } set { this[nameof(DamageMultiplier)].SetValue<float>(value); } }
    }
    public class GatlingHotShellsBonus : DamageConversionBonus
    {
        public GatlingHotShellsBonus(nint addr) : base(addr) { }
    }
    public class BreakIceBonus : DamageBonusBase
    {
        public BreakIceBonus(nint addr) : base(addr) { }
        public float DeFrostAmount { get { return this[nameof(DeFrostAmount)].GetValue<float>(); } set { this[nameof(DeFrostAmount)].SetValue<float>(value); } }
    }
    public class KnockbackDamageBonus : DamageBonusBase
    {
        public KnockbackDamageBonus(nint addr) : base(addr) { }
        public float KnockBackHorizontalForce { get { return this[nameof(KnockBackHorizontalForce)].GetValue<float>(); } set { this[nameof(KnockBackHorizontalForce)].SetValue<float>(value); } }
        public float KnockBackVerticalForce { get { return this[nameof(KnockBackVerticalForce)].GetValue<float>(); } set { this[nameof(KnockBackVerticalForce)].SetValue<float>(value); } }
        public float VerticalScaleMultiplier { get { return this[nameof(VerticalScaleMultiplier)].GetValue<float>(); } set { this[nameof(VerticalScaleMultiplier)].SetValue<float>(value); } }
        public float HorizontalScaleMultiplier { get { return this[nameof(HorizontalScaleMultiplier)].GetValue<float>(); } set { this[nameof(HorizontalScaleMultiplier)].SetValue<float>(value); } }
        public float MinVerticalPower { get { return this[nameof(MinVerticalPower)].GetValue<float>(); } set { this[nameof(MinVerticalPower)].SetValue<float>(value); } }
        public float MinHorizontalPower { get { return this[nameof(MinHorizontalPower)].GetValue<float>(); } set { this[nameof(MinHorizontalPower)].SetValue<float>(value); } }
        public float OptimalDistance { get { return this[nameof(OptimalDistance)].GetValue<float>(); } set { this[nameof(OptimalDistance)].SetValue<float>(value); } }
        public bool AllowForIncapacitadedPlayes { get { return this[nameof(AllowForIncapacitadedPlayes)].Flag; } set { this[nameof(AllowForIncapacitadedPlayes)].Flag = value; } }
        public bool KnockThowardsInstigator { get { return this[nameof(KnockThowardsInstigator)].Flag; } set { this[nameof(KnockThowardsInstigator)].Flag = value; } }
        public bool ScalePowerToInstigatorDistance { get { return this[nameof(ScalePowerToInstigatorDistance)].Flag; } set { this[nameof(ScalePowerToInstigatorDistance)].Flag = value; } }
        public bool AbsoluteKnockBack { get { return this[nameof(AbsoluteKnockBack)].Flag; } set { this[nameof(AbsoluteKnockBack)].Flag = value; } }
    }
    public class CarryElementalStatus : DamageBonusBase
    {
        public CarryElementalStatus(nint addr) : base(addr) { }
        public float CarryBonusAmount { get { return this[nameof(CarryBonusAmount)].GetValue<float>(); } set { this[nameof(CarryBonusAmount)].SetValue<float>(value); } }
        public DamageClass CarriedClass { get { return this[nameof(CarriedClass)].As<DamageClass>(); } set { this["CarriedClass"] = value; } }
    }
    public class LockCountSTEBonus : DamageBonusBase
    {
        public LockCountSTEBonus(nint addr) : base(addr) { }
        public int MinLockCount { get { return this[nameof(MinLockCount)].GetValue<int>(); } set { this[nameof(MinLockCount)].SetValue<int>(value); } }
        public bool UseTotalLockCount { get { return this[nameof(UseTotalLockCount)].Flag; } set { this[nameof(UseTotalLockCount)].Flag = value; } }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
    }
    public class TagDamageBonus : DamageBonusBase
    {
        public TagDamageBonus(nint addr) : base(addr) { }
        public UArray<DamageTag> Tags { get { return new UArray<DamageTag>(this[nameof(Tags)].Address); } }
    }
    public class SetImpulseDamageBonus : DamageBonusBase
    {
        public SetImpulseDamageBonus(nint addr) : base(addr) { }
        public DamageImpulse DamageImpulse { get { return this[nameof(DamageImpulse)].As<DamageImpulse>(); } set { this["DamageImpulse"] = value; } }
    }
    public class SpawnOnImpactDamageBonus : DamageBonusBase
    {
        public SpawnOnImpactDamageBonus(nint addr) : base(addr) { }
        public Object ActorToSpawn { get { return this[nameof(ActorToSpawn)]; } set { this[nameof(ActorToSpawn)] = value; } }
    }
    public class ExtendSTEDurationBonus : DamageBonusBase
    {
        public ExtendSTEDurationBonus(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public float AddedDuration { get { return this[nameof(AddedDuration)].GetValue<float>(); } set { this[nameof(AddedDuration)].SetValue<float>(value); } }
    }
    public class PlayerArmorDamageBonus : DamageBonusBase
    {
        public PlayerArmorDamageBonus(nint addr) : base(addr) { }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
    }
    public class DamageClass : DataAsset
    {
        public DamageClass(nint addr) : base(addr) { }
        public PawnStat ResistanceStat { get { return this[nameof(ResistanceStat)].As<PawnStat>(); } set { this["ResistanceStat"] = value; } }
        public float RagdollScale { get { return this[nameof(RagdollScale)].GetValue<float>(); } set { this[nameof(RagdollScale)].SetValue<float>(value); } }
        public bool BypassesShield { get { return this[nameof(BypassesShield)].Flag; } set { this[nameof(BypassesShield)].Flag = value; } }
        public bool AffectedByFriendlyFire { get { return this[nameof(AffectedByFriendlyFire)].Flag; } set { this[nameof(AffectedByFriendlyFire)].Flag = value; } }
        public Texture2D IndicatorImage { get { return this[nameof(IndicatorImage)].As<Texture2D>(); } set { this["IndicatorImage"] = value; } }
        public DialogDataAsset DamageShout { get { return this[nameof(DamageShout)].As<DialogDataAsset>(); } set { this["DamageShout"] = value; } }
        public DamageImpulse DefaultDamageImpulse { get { return this[nameof(DefaultDamageImpulse)].As<DamageImpulse>(); } set { this["DefaultDamageImpulse"] = value; } }
    }
    public class DamageComponent : ActorComponent
    {
        public DamageComponent(nint addr) : base(addr) { }
        public Object OnTargetKilledEvent { get { return this[nameof(OnTargetKilledEvent)]; } set { this[nameof(OnTargetKilledEvent)] = value; } }
        public Object OnTargetDamagedEvent { get { return this[nameof(OnTargetDamagedEvent)]; } set { this[nameof(OnTargetDamagedEvent)] = value; } }
        public Object OnNoTargetHitEvent { get { return this[nameof(OnNoTargetHitEvent)]; } set { this[nameof(OnNoTargetHitEvent)] = value; } }
        public Object OnHitDeadTarget { get { return this[nameof(OnHitDeadTarget)]; } set { this[nameof(OnHitDeadTarget)] = value; } }
        public Object OnAsyncAoE_Complete { get { return this[nameof(OnAsyncAoE_Complete)]; } set { this[nameof(OnAsyncAoE_Complete)] = value; } }
        public EDamageComponentType DamageComponentType { get { return (EDamageComponentType)this[nameof(DamageComponentType)].GetValue<int>(); } set { this[nameof(DamageComponentType)].SetValue<int>((int)value); } }
        public DamageImpulse DamageImpulse { get { return this[nameof(DamageImpulse)].As<DamageImpulse>(); } set { this["DamageImpulse"] = value; } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float armorDamageMultiplier { get { return this[nameof(armorDamageMultiplier)].GetValue<float>(); } set { this[nameof(armorDamageMultiplier)].SetValue<float>(value); } }
        public float ArmorPenetration { get { return this[nameof(ArmorPenetration)].GetValue<float>(); } set { this[nameof(ArmorPenetration)].SetValue<float>(value); } }
        public bool ShattersArmor { get { return this[nameof(ShattersArmor)].Flag; } set { this[nameof(ShattersArmor)].Flag = value; } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public EArmorDamageType ArmorDamageType { get { return (EArmorDamageType)this[nameof(ArmorDamageType)].GetValue<int>(); } set { this[nameof(ArmorDamageType)].SetValue<int>((int)value); } }
        public float WeakpointDamageMultiplier { get { return this[nameof(WeakpointDamageMultiplier)].GetValue<float>(); } set { this[nameof(WeakpointDamageMultiplier)].SetValue<float>(value); } }
        public float FrozenDamageBonusScale { get { return this[nameof(FrozenDamageBonusScale)].GetValue<float>(); } set { this[nameof(FrozenDamageBonusScale)].SetValue<float>(value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public float SelfFriendlyFireMultiplier { get { return this[nameof(SelfFriendlyFireMultiplier)].GetValue<float>(); } set { this[nameof(SelfFriendlyFireMultiplier)].SetValue<float>(value); } }
        public GameplayTag FriendlyFireTag { get { return this[nameof(FriendlyFireTag)].As<GameplayTag>(); } set { this["FriendlyFireTag"] = value; } }
        public bool CanHitSameTypeAsOwner { get { return this[nameof(CanHitSameTypeAsOwner)].Flag; } set { this[nameof(CanHitSameTypeAsOwner)].Flag = value; } }
        public bool StaggerOnlyOnWeakpointHit { get { return this[nameof(StaggerOnlyOnWeakpointHit)].Flag; } set { this[nameof(StaggerOnlyOnWeakpointHit)].Flag = value; } }
        public float StaggerChance { get { return this[nameof(StaggerChance)].GetValue<float>(); } set { this[nameof(StaggerChance)].SetValue<float>(value); } }
        public float StaggerDuration { get { return this[nameof(StaggerDuration)].GetValue<float>(); } set { this[nameof(StaggerDuration)].SetValue<float>(value); } }
        public float FearFactor { get { return this[nameof(FearFactor)].GetValue<float>(); } set { this[nameof(FearFactor)].SetValue<float>(value); } }
        public UArray<DamageBonusBase> DamageBonuses { get { return new UArray<DamageBonusBase>(this[nameof(DamageBonuses)].Address); } }
        public UArray<DamageModifier> DamageModifiers { get { return new UArray<DamageModifier>(this[nameof(DamageModifiers)].Address); } }
        public UArray<DamageTag> damageTags { get { return new UArray<DamageTag>(this[nameof(damageTags)].Address); } }
        public bool UseAreaOfEffect { get { return this[nameof(UseAreaOfEffect)].Flag; } set { this[nameof(UseAreaOfEffect)].Flag = value; } }
        public float RadialDamage { get { return this[nameof(RadialDamage)].GetValue<float>(); } set { this[nameof(RadialDamage)].SetValue<float>(value); } }
        public bool NoFriendlyFireFromRadial { get { return this[nameof(NoFriendlyFireFromRadial)].Flag; } set { this[nameof(NoFriendlyFireFromRadial)].Flag = value; } }
        public DamageClass RadialDamageClass { get { return this[nameof(RadialDamageClass)].As<DamageClass>(); } set { this["RadialDamageClass"] = value; } }
        public float MinDamagePct { get { return this[nameof(MinDamagePct)].GetValue<float>(); } set { this[nameof(MinDamagePct)].SetValue<float>(value); } }
        public float DamageRadius { get { return this[nameof(DamageRadius)].GetValue<float>(); } set { this[nameof(DamageRadius)].SetValue<float>(value); } }
        public float MaxDamageRadius { get { return this[nameof(MaxDamageRadius)].GetValue<float>(); } set { this[nameof(MaxDamageRadius)].SetValue<float>(value); } }
        public void PreTestDamageConditions() { Invoke(nameof(PreTestDamageConditions)); }
        public DamageComponent GetDamageComponentCDO(Object DamageComponent) { return Invoke<DamageComponent>(nameof(GetDamageComponentCDO), DamageComponent); }
        public float GetDamage() { return Invoke<float>(nameof(GetDamage)); }
        public void DamageTargetFromHit(HitResult HitResult) { Invoke(nameof(DamageTargetFromHit), HitResult); }
        public void DamageTarget_CDO(Vector Location, Actor Owner, Actor hitActor) { Invoke(nameof(DamageTarget_CDO), Location, Owner, hitActor); }
        public void DamageTarget(Actor Target, Vector Location, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysMat, int BoneIndex) { Invoke(nameof(DamageTarget), Target, Location, HitComponent, PhysMat, BoneIndex); }
        public void DamageArmor_Server(Actor Target, PrimitiveComponent collider, int BoneIndex, Vector impactLocation) { Invoke(nameof(DamageArmor_Server), Target, collider, BoneIndex, impactLocation); }
        public void DamageArmor_All(Actor Target, PrimitiveComponent collider, int BoneIndex) { Invoke(nameof(DamageArmor_All), Target, collider, BoneIndex); }
        public bool ArmorSupportsLocalOnlyCall(Actor Target) { return Invoke<bool>(nameof(ArmorSupportsLocalOnlyCall), Target); }
    }
    public class DamageCondition : Object
    {
        public DamageCondition(nint addr) : base(addr) { }
    }
    public class FalseDamageCondition : DamageCondition
    {
        public FalseDamageCondition(nint addr) : base(addr) { }
    }
    public class MultiDamageCondition : DamageCondition
    {
        public MultiDamageCondition(nint addr) : base(addr) { }
        public UArray<DamageCondition> Conditions { get { return new UArray<DamageCondition>(this[nameof(Conditions)].Address); } }
        public bool RequireAllTrue { get { return this[nameof(RequireAllTrue)].Flag; } set { this[nameof(RequireAllTrue)].Flag = value; } }
    }
    public class RandomDamageCondition : DamageCondition
    {
        public RandomDamageCondition(nint addr) : base(addr) { }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
    }
    public class LockCountDamageCondition : DamageCondition
    {
        public LockCountDamageCondition(nint addr) : base(addr) { }
        public int MinLockCount { get { return this[nameof(MinLockCount)].GetValue<int>(); } set { this[nameof(MinLockCount)].SetValue<int>(value); } }
        public bool UseTotalLockCount { get { return this[nameof(UseTotalLockCount)].Flag; } set { this[nameof(UseTotalLockCount)].Flag = value; } }
    }
    public class LocksRemainingDamageCondition : DamageCondition
    {
        public LocksRemainingDamageCondition(nint addr) : base(addr) { }
        public int MaxLocksRemaining { get { return this[nameof(MaxLocksRemaining)].GetValue<int>(); } set { this[nameof(MaxLocksRemaining)].SetValue<int>(value); } }
    }
    public class TargetStateDamageCondition : DamageCondition
    {
        public TargetStateDamageCondition(nint addr) : base(addr) { }
        public ETargetStateDamageBonusType TargetState { get { return (ETargetStateDamageBonusType)this[nameof(TargetState)].GetValue<int>(); } set { this[nameof(TargetState)].SetValue<int>((int)value); } }
    }
    public class TargetSTEDamageCondition : DamageCondition
    {
        public TargetSTEDamageCondition(nint addr) : base(addr) { }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
    }
    public class TargetTagsDamageCondition : DamageCondition
    {
        public TargetTagsDamageCondition(nint addr) : base(addr) { }
        public GameplayTagQuery tagQuery { get { return this[nameof(tagQuery)].As<GameplayTagQuery>(); } set { this["tagQuery"] = value; } }
    }
    public class WeakpointDamageCondition : DamageCondition
    {
        public WeakpointDamageCondition(nint addr) : base(addr) { }
    }
    public class DirectDamageCondition : DamageCondition
    {
        public DirectDamageCondition(nint addr) : base(addr) { }
        public EDirectDamageConditionEnum Type { get { return (EDirectDamageConditionEnum)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
    }
    public class ClipStatusDamageCondition : DamageCondition
    {
        public ClipStatusDamageCondition(nint addr) : base(addr) { }
        public int BulletAmount { get { return this[nameof(BulletAmount)].GetValue<int>(); } set { this[nameof(BulletAmount)].SetValue<int>(value); } }
        public bool CountBulletsLeft { get { return this[nameof(CountBulletsLeft)].Flag; } set { this[nameof(CountBulletsLeft)].Flag = value; } }
    }
    public class ItemTemperatureDamageCondition : DamageCondition
    {
        public ItemTemperatureDamageCondition(nint addr) : base(addr) { }
        public int HeatThreshold { get { return this[nameof(HeatThreshold)].GetValue<int>(); } set { this[nameof(HeatThreshold)].SetValue<int>(value); } }
        public bool MustBeUnderThreshold { get { return this[nameof(MustBeUnderThreshold)].Flag; } set { this[nameof(MustBeUnderThreshold)].Flag = value; } }
    }
    public class PlayerShieldsDamageCondition : DamageCondition
    {
        public PlayerShieldsDamageCondition(nint addr) : base(addr) { }
        public FloatInterval ShieldPercentageRequired { get { return this[nameof(ShieldPercentageRequired)].As<FloatInterval>(); } set { this["ShieldPercentageRequired"] = value; } }
    }
    public class PlayerHealthDamageCondition : DamageCondition
    {
        public PlayerHealthDamageCondition(nint addr) : base(addr) { }
        public FloatInterval HealthPercentageRequired { get { return this[nameof(HealthPercentageRequired)].As<FloatInterval>(); } set { this["HealthPercentageRequired"] = value; } }
    }
    public class CooldownDamageCondition : DamageCondition
    {
        public CooldownDamageCondition(nint addr) : base(addr) { }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
    }
    public class BoltActionWeaponDamageCondition : DamageCondition
    {
        public BoltActionWeaponDamageCondition(nint addr) : base(addr) { }
        public EBoltActionWeaponConditions WeaponCondition { get { return (EBoltActionWeaponConditions)this[nameof(WeaponCondition)].GetValue<int>(); } set { this[nameof(WeaponCondition)].SetValue<int>((int)value); } }
    }
    public class PlasmaCarbineDamageCondition : DamageCondition
    {
        public PlasmaCarbineDamageCondition(nint addr) : base(addr) { }
        public EPlasmaCarbineConditions WeaponCondition { get { return (EPlasmaCarbineConditions)this[nameof(WeaponCondition)].GetValue<int>(); } set { this[nameof(WeaponCondition)].SetValue<int>((int)value); } }
        public int Condition { get { return this[nameof(Condition)].GetValue<int>(); } set { this[nameof(Condition)].SetValue<int>(value); } }
    }
    public class MaterialDamageMultiplierCondition : DamageCondition
    {
        public MaterialDamageMultiplierCondition(nint addr) : base(addr) { }
        public FloatInterval MultiplierRangeRequired { get { return this[nameof(MultiplierRangeRequired)].As<FloatInterval>(); } set { this["MultiplierRangeRequired"] = value; } }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class MultiHitscanHitCountDamageCondition : DamageCondition
    {
        public MultiHitscanHitCountDamageCondition(nint addr) : base(addr) { }
        public int RequiredHitCount { get { return this[nameof(RequiredHitCount)].GetValue<int>(); } set { this[nameof(RequiredHitCount)].SetValue<int>(value); } }
    }
    public class DistanceToTargetDamageCondition : DamageCondition
    {
        public DistanceToTargetDamageCondition(nint addr) : base(addr) { }
        public bool TestMaxDistance { get { return this[nameof(TestMaxDistance)].Flag; } set { this[nameof(TestMaxDistance)].Flag = value; } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public float MinimumDistance { get { return this[nameof(MinimumDistance)].GetValue<float>(); } set { this[nameof(MinimumDistance)].SetValue<float>(value); } }
    }
    public class DamageEnhancer : Grenade
    {
        public DamageEnhancer(nint addr) : base(addr) { }
        public BoxComponent RootCollision { get { return this[nameof(RootCollision)].As<BoxComponent>(); } set { this["RootCollision"] = value; } }
        public HealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponent>(); } set { this["HealthComponent"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public StaticMeshComponent Mesh { get { return this[nameof(Mesh)].As<StaticMeshComponent>(); } set { this["Mesh"] = value; } }
        public SphereComponent Sphere { get { return this[nameof(Sphere)].As<SphereComponent>(); } set { this["Sphere"] = value; } }
        public BoxComponent Box { get { return this[nameof(Box)].As<BoxComponent>(); } set { this["Box"] = value; } }
        public HitscanComponent HitscanComponent { get { return this[nameof(HitscanComponent)].As<HitscanComponent>(); } set { this["HitscanComponent"] = value; } }
        public ReflectionHitscanComponent ReflectionHitscanComponent { get { return this[nameof(ReflectionHitscanComponent)].As<ReflectionHitscanComponent>(); } set { this["ReflectionHitscanComponent"] = value; } }
        public CapsuleHitscanComponent CapsuleHitscanComponent { get { return this[nameof(CapsuleHitscanComponent)].As<CapsuleHitscanComponent>(); } set { this["CapsuleHitscanComponent"] = value; } }
        public float EnhanceDamageBy { get { return this[nameof(EnhanceDamageBy)].GetValue<float>(); } set { this[nameof(EnhanceDamageBy)].SetValue<float>(value); } }
        public float LifetimeMaxDamage { get { return this[nameof(LifetimeMaxDamage)].GetValue<float>(); } set { this[nameof(LifetimeMaxDamage)].SetValue<float>(value); } }
        public float EnabledDuration { get { return this[nameof(EnabledDuration)].GetValue<float>(); } set { this[nameof(EnabledDuration)].SetValue<float>(value); } }
        public float TraceStepTime { get { return this[nameof(TraceStepTime)].GetValue<float>(); } set { this[nameof(TraceStepTime)].SetValue<float>(value); } }
        public void HitByHitScan(HitscanBaseComponent Component, Vector HitPoint, Vector Origin) { Invoke(nameof(HitByHitScan), Component, HitPoint, Origin); }
        public void Client_CompleteTrace(EnhancedTrace trace) { Invoke(nameof(Client_CompleteTrace), trace); }
        public void BeginOverlapVsProjectile(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(BeginOverlapVsProjectile), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void All_PasteHitScanComponent(HitscanBaseComponent HitScan) { Invoke(nameof(All_PasteHitScanComponent), HitScan); }
        public void All_PasteDamageComponent(DamageComponent Damage) { Invoke(nameof(All_PasteDamageComponent), Damage); }
    }
    public class DamageFunctionLibrary : BlueprintFunctionLibrary
    {
        public DamageFunctionLibrary(nint addr) : base(addr) { }
        public void SetPhysicalMaterialOnHit(FSDPhysicalMaterial PhysMat, HitResult Hit) { Invoke(nameof(SetPhysicalMaterialOnHit), PhysMat, Hit); }
        public bool IsGibbedDeath(UArray<DamageTag> Tags) { return Invoke<bool>(nameof(IsGibbedDeath), Tags); }
        public bool IsExplosiveDeath(Object WorldContext, PawnStatsComponent PawnStats, UArray<DamageTag> Tags) { return Invoke<bool>(nameof(IsExplosiveDeath), WorldContext, PawnStats, Tags); }
        public bool IsCorrosiveDeath(DamageClass DamageClass, UArray<DamageTag> Tags) { return Invoke<bool>(nameof(IsCorrosiveDeath), DamageClass, Tags); }
        public bool IsCookedDeath(UArray<DamageTag> Tags) { return Invoke<bool>(nameof(IsCookedDeath), Tags); }
        public bool IsBurnDeath(DamageClass DamageClass, UArray<DamageTag> Tags) { return Invoke<bool>(nameof(IsBurnDeath), DamageClass, Tags); }
        public Vector GetForceFromDamageImpulse(Actor Target, DamageData DamageData) { return Invoke<Vector>(nameof(GetForceFromDamageImpulse), Target, DamageData); }
        public DamageImpulse GetDamageImpulse(DamageData DamageData) { return Invoke<DamageImpulse>(nameof(GetDamageImpulse), DamageData); }
        public int FindClosestBoneIndex(SkeletalMeshComponent Mesh, Vector Location, LimbDismembermentList dismembermentList, float MaxDistance) { return Invoke<int>(nameof(FindClosestBoneIndex), Mesh, Location, dismembermentList, MaxDistance); }
        public Object FindClosestBone(SkeletalMeshComponent Mesh, Vector Location, LimbDismembermentList dismembermentList, float MaxDistance) { return Invoke<Object>(nameof(FindClosestBone), Mesh, Location, dismembermentList, MaxDistance); }
    }
    public class DamageImpulse : DataAsset
    {
        public DamageImpulse(nint addr) : base(addr) { }
        public float ImpactForce { get { return this[nameof(ImpactForce)].GetValue<float>(); } set { this[nameof(ImpactForce)].SetValue<float>(value); } }
        public float UpwardForceScale { get { return this[nameof(UpwardForceScale)].GetValue<float>(); } set { this[nameof(UpwardForceScale)].SetValue<float>(value); } }
        public EImpulseDirectionSource ImpulseSource { get { return (EImpulseDirectionSource)this[nameof(ImpulseSource)].GetValue<int>(); } set { this[nameof(ImpulseSource)].SetValue<int>((int)value); } }
        public bool ApplyImpulseToWholeBody { get { return this[nameof(ApplyImpulseToWholeBody)].Flag; } set { this[nameof(ApplyImpulseToWholeBody)].Flag = value; } }
    }
    public class DamageModifier : DataAsset
    {
        public DamageModifier(nint addr) : base(addr) { }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
        public UArray<DamageModifierItem> Modifiers { get { return new UArray<DamageModifierItem>(this[nameof(Modifiers)].Address); } }
    }
    public class DamageSettings : DataAsset
    {
        public DamageSettings(nint addr) : base(addr) { }
        public float TemperatureChangePerColdDamagePoint { get { return this[nameof(TemperatureChangePerColdDamagePoint)].GetValue<float>(); } set { this[nameof(TemperatureChangePerColdDamagePoint)].SetValue<float>(value); } }
        public float TemperatureChangePerIceDamagePoint { get { return this[nameof(TemperatureChangePerIceDamagePoint)].GetValue<float>(); } set { this[nameof(TemperatureChangePerIceDamagePoint)].SetValue<float>(value); } }
        public float TemperatureChangePerHeatDamagePoint { get { return this[nameof(TemperatureChangePerHeatDamagePoint)].GetValue<float>(); } set { this[nameof(TemperatureChangePerHeatDamagePoint)].SetValue<float>(value); } }
        public float TemperatureChangePerFireDamagePoint { get { return this[nameof(TemperatureChangePerFireDamagePoint)].GetValue<float>(); } set { this[nameof(TemperatureChangePerFireDamagePoint)].SetValue<float>(value); } }
        public float TemperatureShockActivationWindow { get { return this[nameof(TemperatureShockActivationWindow)].GetValue<float>(); } set { this[nameof(TemperatureShockActivationWindow)].SetValue<float>(value); } }
        public float FrozenDamageBonus { get { return this[nameof(FrozenDamageBonus)].GetValue<float>(); } set { this[nameof(FrozenDamageBonus)].SetValue<float>(value); } }
        public Object EnemyOnFireStatusEffect { get { return this[nameof(EnemyOnFireStatusEffect)]; } set { this[nameof(EnemyOnFireStatusEffect)] = value; } }
        public Object PlayerOnFireStatusEffect { get { return this[nameof(PlayerOnFireStatusEffect)]; } set { this[nameof(PlayerOnFireStatusEffect)] = value; } }
        public Object TemperatureShockFromFrozenStatusEffect { get { return this[nameof(TemperatureShockFromFrozenStatusEffect)]; } set { this[nameof(TemperatureShockFromFrozenStatusEffect)] = value; } }
        public Object TemperatureShockFromBurningStatusEffect { get { return this[nameof(TemperatureShockFromBurningStatusEffect)]; } set { this[nameof(TemperatureShockFromBurningStatusEffect)] = value; } }
        public float InfectionPerDamagePoint { get { return this[nameof(InfectionPerDamagePoint)].GetValue<float>(); } set { this[nameof(InfectionPerDamagePoint)].SetValue<float>(value); } }
        public DamageComponent ArmorShatterDamage { get { return this[nameof(ArmorShatterDamage)].As<DamageComponent>(); } set { this["ArmorShatterDamage"] = value; } }
        public DamageComponent ChemicalExplosionDamage { get { return this[nameof(ChemicalExplosionDamage)].As<DamageComponent>(); } set { this["ChemicalExplosionDamage"] = value; } }
        public NiagaraSystem ArmorShatterEmitter { get { return this[nameof(ArmorShatterEmitter)].As<NiagaraSystem>(); } set { this["ArmorShatterEmitter"] = value; } }
        public SoundCue ArmorShatterSound { get { return this[nameof(ArmorShatterSound)].As<SoundCue>(); } set { this["ArmorShatterSound"] = value; } }
        public UArray<DecalData> ImpactDecals { get { return new UArray<DecalData>(this[nameof(ImpactDecals)].Address); } }
        public RuntimeFloatCurve ArmorToArmorDamageBreakingCurve { get { return this[nameof(ArmorToArmorDamageBreakingCurve)].As<RuntimeFloatCurve>(); } set { this["ArmorToArmorDamageBreakingCurve"] = value; } }
        public float RadialHealthArmorDamageFalloff { get { return this[nameof(RadialHealthArmorDamageFalloff)].GetValue<float>(); } set { this[nameof(RadialHealthArmorDamageFalloff)].SetValue<float>(value); } }
        public int HealthArmorBonesAffectedByRadialDamage { get { return this[nameof(HealthArmorBonesAffectedByRadialDamage)].GetValue<int>(); } set { this[nameof(HealthArmorBonesAffectedByRadialDamage)].SetValue<int>(value); } }
        public DamageTag DetonateFrozen { get { return this[nameof(DetonateFrozen)].As<DamageTag>(); } set { this["DetonateFrozen"] = value; } }
        public DamageTag DetonateOnFire { get { return this[nameof(DetonateOnFire)].As<DamageTag>(); } set { this["DetonateOnFire"] = value; } }
        public DamageTag DirectHit { get { return this[nameof(DirectHit)].As<DamageTag>(); } set { this["DirectHit"] = value; } }
        public DamageTag MeltTarget { get { return this[nameof(MeltTarget)].As<DamageTag>(); } set { this["MeltTarget"] = value; } }
        public DamageTag CookTarget { get { return this[nameof(CookTarget)].As<DamageTag>(); } set { this["CookTarget"] = value; } }
        public DamageTag GibTarget { get { return this[nameof(GibTarget)].As<DamageTag>(); } set { this["GibTarget"] = value; } }
        public DamageTag ExplodeOnDeath { get { return this[nameof(ExplodeOnDeath)].As<DamageTag>(); } set { this["ExplodeOnDeath"] = value; } }
        public DamageTag IgnoreBodypartDamageReduction { get { return this[nameof(IgnoreBodypartDamageReduction)].As<DamageTag>(); } set { this["IgnoreBodypartDamageReduction"] = value; } }
        public DamageImpulse DefaultDamageImpulse { get { return this[nameof(DefaultDamageImpulse)].As<DamageImpulse>(); } set { this["DefaultDamageImpulse"] = value; } }
        public DamageImpulse DoTDamageImpulse { get { return this[nameof(DoTDamageImpulse)].As<DamageImpulse>(); } set { this["DoTDamageImpulse"] = value; } }
        public float RagdollGlobalForceMultiplier { get { return this[nameof(RagdollGlobalForceMultiplier)].GetValue<float>(); } set { this[nameof(RagdollGlobalForceMultiplier)].SetValue<float>(value); } }
    }
    public class DamageSubsystem : GameInstanceSubsystem
    {
        public DamageSubsystem(nint addr) : base(addr) { }
        public UArray<DamageSubsystemItem> Items { get { return new UArray<DamageSubsystemItem>(this[nameof(Items)].Address); } }
    }
    public class DamageTag : DataAsset
    {
        public DamageTag(nint addr) : base(addr) { }
    }
    public class DanceSettings : DataAsset
    {
        public DanceSettings(nint addr) : base(addr) { }
        public UArray<DanceItem> DanceMoves { get { return new UArray<DanceItem>(this[nameof(DanceMoves)].Address); } }
    }
    public class DashPoints : ActorComponent
    {
        public DashPoints(nint addr) : base(addr) { }
        public Object OnStartDashEvent { get { return this[nameof(OnStartDashEvent)]; } set { this[nameof(OnStartDashEvent)] = value; } }
        public Object OnStopDashEvent { get { return this[nameof(OnStopDashEvent)]; } set { this[nameof(OnStopDashEvent)] = value; } }
        public Vector_NetQuantize DashLocation { get { return this[nameof(DashLocation)].As<Vector_NetQuantize>(); } set { this["DashLocation"] = value; } }
        public RuntimeFloatCurve DashSpeedCurve { get { return this[nameof(DashSpeedCurve)].As<RuntimeFloatCurve>(); } set { this["DashSpeedCurve"] = value; } }
        public float PointOffset { get { return this[nameof(PointOffset)].GetValue<float>(); } set { this[nameof(PointOffset)].SetValue<float>(value); } }
        public float MaxRangeFromPlayer { get { return this[nameof(MaxRangeFromPlayer)].GetValue<float>(); } set { this[nameof(MaxRangeFromPlayer)].SetValue<float>(value); } }
        public float MinRangeFromPlayer { get { return this[nameof(MinRangeFromPlayer)].GetValue<float>(); } set { this[nameof(MinRangeFromPlayer)].SetValue<float>(value); } }
        public float MinHeightAboveTarget { get { return this[nameof(MinHeightAboveTarget)].GetValue<float>(); } set { this[nameof(MinHeightAboveTarget)].SetValue<float>(value); } }
        public float MaxHeightAboveTarget { get { return this[nameof(MaxHeightAboveTarget)].GetValue<float>(); } set { this[nameof(MaxHeightAboveTarget)].SetValue<float>(value); } }
        public float safeReduction { get { return this[nameof(safeReduction)].GetValue<float>(); } set { this[nameof(safeReduction)].SetValue<float>(value); } }
        public float AcceptedDashradius { get { return this[nameof(AcceptedDashradius)].GetValue<float>(); } set { this[nameof(AcceptedDashradius)].SetValue<float>(value); } }
        public float DashSpeed { get { return this[nameof(DashSpeed)].GetValue<float>(); } set { this[nameof(DashSpeed)].SetValue<float>(value); } }
        public float SlowdownRadius { get { return this[nameof(SlowdownRadius)].GetValue<float>(); } set { this[nameof(SlowdownRadius)].SetValue<float>(value); } }
        public int IgnoreTheClosestPoints { get { return this[nameof(IgnoreTheClosestPoints)].GetValue<int>(); } set { this[nameof(IgnoreTheClosestPoints)].SetValue<int>(value); } }
        public EDashPointsGenerationMode GenerationMode { get { return (EDashPointsGenerationMode)this[nameof(GenerationMode)].GetValue<int>(); } set { this[nameof(GenerationMode)].SetValue<int>((int)value); } }
        public bool IsDashing { get { return this[nameof(IsDashing)].Flag; } set { this[nameof(IsDashing)].Flag = value; } }
        public bool IgnoreRules { get { return this[nameof(IgnoreRules)].Flag; } set { this[nameof(IgnoreRules)].Flag = value; } }
        public void UpdateDashPointData() { Invoke(nameof(UpdateDashPointData)); }
        public void StopDashing() { Invoke(nameof(StopDashing)); }
        public void StartDashing() { Invoke(nameof(StartDashing)); }
        public void OnRep_Dashing() { Invoke(nameof(OnRep_Dashing)); }
        public void OnParentDeath(HealthComponentBase Health) { Invoke(nameof(OnParentDeath), Health); }
        public Vector GetDashPoint(Actor fromTarget, bool success) { return Invoke<Vector>(nameof(GetDashPoint), fromTarget, success); }
    }
    public class DataDepositObjective : Objective
    {
        public DataDepositObjective(nint addr) : base(addr) { }
        public Object TowerClass { get { return this[nameof(TowerClass)]; } set { this[nameof(TowerClass)] = value; } }
        public DebrisPositioning DebrisPositioning { get { return this[nameof(DebrisPositioning)].As<DebrisPositioning>(); } set { this["DebrisPositioning"] = value; } }
        public bool Complete { get { return this[nameof(Complete)].Flag; } set { this[nameof(Complete)].Flag = value; } }
        public void OnRep_Complete() { Invoke(nameof(OnRep_Complete)); }
        public void OnHackingProgressChange(float Progress) { Invoke(nameof(OnHackingProgressChange), Progress); }
    }
    public class DeadStateComponent : CharacterStateComponent
    {
        public DeadStateComponent(nint addr) : base(addr) { }
        public float respawnDelay { get { return this[nameof(respawnDelay)].GetValue<float>(); } set { this[nameof(respawnDelay)].SetValue<float>(value); } }
        public void SetDeathParameters(float respawnDelay, float effectDelay, AnimMontage deathMontage, ParticleSystem deathEffect, bool useAnimationTimeAsRespawnTime) { Invoke(nameof(SetDeathParameters), respawnDelay, effectDelay, deathMontage, deathEffect, useAnimationTimeAsRespawnTime); }
    }
    public class DealWidget : UserWidget
    {
        public DealWidget(nint addr) : base(addr) { }
        public void UpdateDealText() { Invoke(nameof(UpdateDealText)); }
    }
    public class DeathComponent : ActorComponent
    {
        public DeathComponent(nint addr) : base(addr) { }
        public Object CrossbowChemicalExplosionStatusEffect { get { return this[nameof(CrossbowChemicalExplosionStatusEffect)]; } set { this[nameof(CrossbowChemicalExplosionStatusEffect)] = value; } }
        public Object PlasmaExplosionStatusEffect { get { return this[nameof(PlasmaExplosionStatusEffect)]; } set { this[nameof(PlasmaExplosionStatusEffect)] = value; } }
        public Object PlasmaExplosionDOTStatusEffect { get { return this[nameof(PlasmaExplosionDOTStatusEffect)]; } set { this[nameof(PlasmaExplosionDOTStatusEffect)] = value; } }
        public NiagaraSystem GibParticles { get { return this[nameof(GibParticles)].As<NiagaraSystem>(); } set { this["GibParticles"] = value; } }
        public StaticMesh GoreMesh { get { return this[nameof(GoreMesh)].As<StaticMesh>(); } set { this["GoreMesh"] = value; } }
        public UArray<Object> HeadGoreBoneNames { get { return new UArray<Object>(this[nameof(HeadGoreBoneNames)].Address); } }
        public FXSystemAsset deathParticles { get { return this[nameof(deathParticles)].As<FXSystemAsset>(); } set { this["deathParticles"] = value; } }
        public FXSystemAsset BloodSquirtParticles { get { return this[nameof(BloodSquirtParticles)].As<FXSystemAsset>(); } set { this["BloodSquirtParticles"] = value; } }
        public FXSystemAsset HeadshotParticles { get { return this[nameof(HeadshotParticles)].As<FXSystemAsset>(); } set { this["HeadshotParticles"] = value; } }
        public FXSystemAsset FrozenDeathParticles { get { return this[nameof(FrozenDeathParticles)].As<FXSystemAsset>(); } set { this["FrozenDeathParticles"] = value; } }
        public NiagaraSystem CorrosiveDeathParticles { get { return this[nameof(CorrosiveDeathParticles)].As<NiagaraSystem>(); } set { this["CorrosiveDeathParticles"] = value; } }
        public NiagaraSystem CookedDeathParticles { get { return this[nameof(CookedDeathParticles)].As<NiagaraSystem>(); } set { this["CookedDeathParticles"] = value; } }
        public NiagaraSystem ChemicalExplosionDeathParticles { get { return this[nameof(ChemicalExplosionDeathParticles)].As<NiagaraSystem>(); } set { this["ChemicalExplosionDeathParticles"] = value; } }
        public MaterialInstance DeathSplatDecal { get { return this[nameof(DeathSplatDecal)].As<MaterialInstance>(); } set { this["DeathSplatDecal"] = value; } }
        public float DeathSplatDecalSize { get { return this[nameof(DeathSplatDecalSize)].GetValue<float>(); } set { this[nameof(DeathSplatDecalSize)].SetValue<float>(value); } }
        public SoundCue deathSound { get { return this[nameof(deathSound)].As<SoundCue>(); } set { this["deathSound"] = value; } }
        public SoundCue HeadshotGibsSound { get { return this[nameof(HeadshotGibsSound)].As<SoundCue>(); } set { this["HeadshotGibsSound"] = value; } }
        public SoundCue BurnDeathSound { get { return this[nameof(BurnDeathSound)].As<SoundCue>(); } set { this["BurnDeathSound"] = value; } }
        public SoundCue CorrosiveDeathSound { get { return this[nameof(CorrosiveDeathSound)].As<SoundCue>(); } set { this["CorrosiveDeathSound"] = value; } }
        public SoundCue CookedDeathSound { get { return this[nameof(CookedDeathSound)].As<SoundCue>(); } set { this["CookedDeathSound"] = value; } }
        public SoundCue ChemicalExplosionPreDeathSound { get { return this[nameof(ChemicalExplosionPreDeathSound)].As<SoundCue>(); } set { this["ChemicalExplosionPreDeathSound"] = value; } }
        public SoundCue ChemicalExplosionDeathSound { get { return this[nameof(ChemicalExplosionDeathSound)].As<SoundCue>(); } set { this["ChemicalExplosionDeathSound"] = value; } }
        public SoundCue DeathSplatSound { get { return this[nameof(DeathSplatSound)].As<SoundCue>(); } set { this["DeathSplatSound"] = value; } }
        public float DissolveDelay { get { return this[nameof(DissolveDelay)].GetValue<float>(); } set { this[nameof(DissolveDelay)].SetValue<float>(value); } }
        public MaterialInstance DissolveBaseShader { get { return this[nameof(DissolveBaseShader)].As<MaterialInstance>(); } set { this["DissolveBaseShader"] = value; } }
        public MaterialInstance DissolveBaseShaderElite { get { return this[nameof(DissolveBaseShaderElite)].As<MaterialInstance>(); } set { this["DissolveBaseShaderElite"] = value; } }
        public MaterialInstance BurnBaseShader { get { return this[nameof(BurnBaseShader)].As<MaterialInstance>(); } set { this["BurnBaseShader"] = value; } }
        public MaterialInstance BurnBaseShaderElite { get { return this[nameof(BurnBaseShaderElite)].As<MaterialInstance>(); } set { this["BurnBaseShaderElite"] = value; } }
        public MaterialInstance CorrosiveBaseShader { get { return this[nameof(CorrosiveBaseShader)].As<MaterialInstance>(); } set { this["CorrosiveBaseShader"] = value; } }
        public MaterialInstance CorrosiveBaseShaderElite { get { return this[nameof(CorrosiveBaseShaderElite)].As<MaterialInstance>(); } set { this["CorrosiveBaseShaderElite"] = value; } }
        public LinearColor BurnColor { get { return this[nameof(BurnColor)].As<LinearColor>(); } set { this["BurnColor"] = value; } }
        public bool RagdollEnabled { get { return this[nameof(RagdollEnabled)].Flag; } set { this[nameof(RagdollEnabled)].Flag = value; } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
        public float DeathDuration { get { return this[nameof(DeathDuration)].GetValue<float>(); } set { this[nameof(DeathDuration)].SetValue<float>(value); } }
        public EDeathType DeathType { get { return (EDeathType)this[nameof(DeathType)].GetValue<int>(); } set { this[nameof(DeathType)].SetValue<int>((int)value); } }
        public StaticMeshComponent HeadGoreMesh { get { return this[nameof(HeadGoreMesh)].As<StaticMeshComponent>(); } set { this["HeadGoreMesh"] = value; } }
        public SkeletalMeshComponent SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMeshComponent>(); } set { this["SkeletalMesh"] = value; } }
        public EnemyDeepPathfinderCharacter PFCharacter { get { return this[nameof(PFCharacter)].As<EnemyDeepPathfinderCharacter>(); } set { this["PFCharacter"] = value; } }
        public SpiderAnimInstance AnimInstance { get { return this[nameof(AnimInstance)].As<SpiderAnimInstance>(); } set { this["AnimInstance"] = value; } }
        public void OnRep_DeathType() { Invoke(nameof(OnRep_DeathType)); }
        public void OnDeathDetailed(HealthComponent HealthComponent, float damageAmount, DamageData DamageData, UArray<DamageTag> Tags) { Invoke(nameof(OnDeathDetailed), HealthComponent, damageAmount, DamageData, Tags); }
        public StaticMeshComponent CreateHeadGore() { return Invoke<StaticMeshComponent>(nameof(CreateHeadGore)); }
        public void AllRagdoll(Vector Impulse, Vector Location, int BoneIndex) { Invoke(nameof(AllRagdoll), Impulse, Location, BoneIndex); }
    }
    public class FSDDebrisSettings : DeveloperSettings
    {
        public FSDDebrisSettings(nint addr) : base(addr) { }
        public SoftObjectPath DefaultInfluencerDensityCurve { get { return this[nameof(DefaultInfluencerDensityCurve)].As<SoftObjectPath>(); } set { this["DefaultInfluencerDensityCurve"] = value; } }
        public SoftObjectPath DefaultInfluencerSizeCurve { get { return this[nameof(DefaultInfluencerSizeCurve)].As<SoftObjectPath>(); } set { this["DefaultInfluencerSizeCurve"] = value; } }
    }
    public class CSGTriangleMapper : DataAsset
    {
        public CSGTriangleMapper(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public TerrainMaterial AttachToMaterial { get { return this[nameof(AttachToMaterial)].As<TerrainMaterial>(); } set { this["AttachToMaterial"] = value; } }
        public UArray<TerrainType> AttachToTypes { get { return new UArray<TerrainType>(this[nameof(AttachToTypes)].Address); } }
        public int CellCategories { get { return this[nameof(CellCategories)].GetValue<int>(); } set { this[nameof(CellCategories)].SetValue<int>(value); } }
        public float DensityInM2 { get { return this[nameof(DensityInM2)].GetValue<float>(); } set { this[nameof(DensityInM2)].SetValue<float>(value); } }
        public float MinVerticalAngle { get { return this[nameof(MinVerticalAngle)].GetValue<float>(); } set { this[nameof(MinVerticalAngle)].SetValue<float>(value); } }
        public float MaxVerticalAngle { get { return this[nameof(MaxVerticalAngle)].GetValue<float>(); } set { this[nameof(MaxVerticalAngle)].SetValue<float>(value); } }
        public Vector ScaleMin { get { return this[nameof(ScaleMin)].As<Vector>(); } set { this["ScaleMin"] = value; } }
        public Vector ScaleMax { get { return this[nameof(ScaleMax)].As<Vector>(); } set { this["ScaleMax"] = value; } }
        public float ScaleBias { get { return this[nameof(ScaleBias)].GetValue<float>(); } set { this[nameof(ScaleBias)].SetValue<float>(value); } }
        public bool IndependentScaleAxes { get { return this[nameof(IndependentScaleAxes)].Flag; } set { this[nameof(IndependentScaleAxes)].Flag = value; } }
        public Vector BaseNormal { get { return this[nameof(BaseNormal)].As<Vector>(); } set { this["BaseNormal"] = value; } }
        public float SurfaceNormalFactor { get { return this[nameof(SurfaceNormalFactor)].GetValue<float>(); } set { this[nameof(SurfaceNormalFactor)].SetValue<float>(value); } }
        public Vector SurfaceNormalLimiter { get { return this[nameof(SurfaceNormalLimiter)].As<Vector>(); } set { this["SurfaceNormalLimiter"] = value; } }
        public float RandomNormalFactor { get { return this[nameof(RandomNormalFactor)].GetValue<float>(); } set { this[nameof(RandomNormalFactor)].SetValue<float>(value); } }
        public float RotationMinAngle { get { return this[nameof(RotationMinAngle)].GetValue<float>(); } set { this[nameof(RotationMinAngle)].SetValue<float>(value); } }
        public float RotationMaxAngle { get { return this[nameof(RotationMaxAngle)].GetValue<float>(); } set { this[nameof(RotationMaxAngle)].SetValue<float>(value); } }
        public float PosOffset { get { return this[nameof(PosOffset)].GetValue<float>(); } set { this[nameof(PosOffset)].SetValue<float>(value); } }
        public float PosOffsetSurface { get { return this[nameof(PosOffsetSurface)].GetValue<float>(); } set { this[nameof(PosOffsetSurface)].SetValue<float>(value); } }
        public UArray<CellNoise> NoiseLayers { get { return new UArray<CellNoise>(this[nameof(NoiseLayers)].Address); } }
        public DebrisCellNoiseParameters CellNoiseParameters { get { return this[nameof(CellNoiseParameters)].As<DebrisCellNoiseParameters>(); } set { this["CellNoiseParameters"] = value; } }
    }
    public class DebrisBase : CSGTriangleMapper
    {
        public DebrisBase(nint addr) : base(addr) { }
        public Object CaveInfluencer { get { return this[nameof(CaveInfluencer)].As<Object>(); } set { this["CaveInfluencer"] = value; } }
        public RuntimeFloatCurve InfluencerDensityCurve { get { return this[nameof(InfluencerDensityCurve)].As<RuntimeFloatCurve>(); } set { this["InfluencerDensityCurve"] = value; } }
        public RuntimeFloatCurve InfluencerSizeCurve { get { return this[nameof(InfluencerSizeCurve)].As<RuntimeFloatCurve>(); } set { this["InfluencerSizeCurve"] = value; } }
        public CurveFloat CaveInfluenceCurve { get { return this[nameof(CaveInfluenceCurve)].As<CurveFloat>(); } set { this["CaveInfluenceCurve"] = value; } }
        public CurveFloat CaveInflunceSizeCurve { get { return this[nameof(CaveInflunceSizeCurve)].As<CurveFloat>(); } set { this["CaveInflunceSizeCurve"] = value; } }
    }
    public class DebrisCarved : DebrisBase
    {
        public DebrisCarved(nint addr) : base(addr) { }
        public EDebrisCarvedType CarverType { get { return (EDebrisCarvedType)this[nameof(CarverType)].GetValue<int>(); } set { this[nameof(CarverType)].SetValue<int>((int)value); } }
        public UArray<UDebrisCarveMesh> Meshes { get { return new UArray<UDebrisCarveMesh>(this[nameof(Meshes)].Address); } }
        public TerrainMaterial TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterial>(); } set { this["TerrainMaterial"] = value; } }
        public DebrisInfluence CaveInfluenceToAdd { get { return this[nameof(CaveInfluenceToAdd)].As<DebrisInfluence>(); } set { this["CaveInfluenceToAdd"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public CarveOptionsCellSize CarveCellSize { get { return (CarveOptionsCellSize)this[nameof(CarveCellSize)].GetValue<int>(); } set { this[nameof(CarveCellSize)].SetValue<int>((int)value); } }
        public int MinNumCarves { get { return this[nameof(MinNumCarves)].GetValue<int>(); } set { this[nameof(MinNumCarves)].SetValue<int>(value); } }
        public int MaxNumCarves { get { return this[nameof(MaxNumCarves)].GetValue<int>(); } set { this[nameof(MaxNumCarves)].SetValue<int>(value); } }
        public float CarveOffsetRadius { get { return this[nameof(CarveOffsetRadius)].GetValue<float>(); } set { this[nameof(CarveOffsetRadius)].SetValue<float>(value); } }
        public Object SpawnAttachClass { get { return this[nameof(SpawnAttachClass)]; } set { this[nameof(SpawnAttachClass)] = value; } }
        public float AttachSpawnOffsetDistance { get { return this[nameof(AttachSpawnOffsetDistance)].GetValue<float>(); } set { this[nameof(AttachSpawnOffsetDistance)].SetValue<float>(value); } }
    }
    public class DebrisActorComponent : SceneComponent
    {
        public DebrisActorComponent(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
    }
    public class DebrisItemComponent : DebrisActorComponent
    {
        public DebrisItemComponent(nint addr) : base(addr) { }
        public DebrisPositioning Debris { get { return this[nameof(Debris)].As<DebrisPositioning>(); } set { this["Debris"] = value; } }
        public UArray<DebrisItemActorItem> Actors { get { return new UArray<DebrisItemActorItem>(this[nameof(Actors)].Address); } }
        public EDebrisItemPass ItemPass { get { return (EDebrisItemPass)this[nameof(ItemPass)].GetValue<int>(); } set { this[nameof(ItemPass)].SetValue<int>((int)value); } }
        public float InfluenceRange { get { return this[nameof(InfluenceRange)].GetValue<float>(); } set { this[nameof(InfluenceRange)].SetValue<float>(value); } }
        public float MinDistanceToImportantLocations { get { return this[nameof(MinDistanceToImportantLocations)].GetValue<float>(); } set { this[nameof(MinDistanceToImportantLocations)].SetValue<float>(value); } }
        public bool UseAmount { get { return this[nameof(UseAmount)].Flag; } set { this[nameof(UseAmount)].Flag = value; } }
        public IRandRange amount { get { return this[nameof(amount)].As<IRandRange>(); } set { this["amount"] = value; } }
        public int AmountSearchMultiplier { get { return this[nameof(AmountSearchMultiplier)].GetValue<int>(); } set { this[nameof(AmountSearchMultiplier)].SetValue<int>(value); } }
    }
    public class DebrisDataComponent : DebrisActorComponent
    {
        public DebrisDataComponent(nint addr) : base(addr) { }
        public DebrisBase Debris { get { return this[nameof(Debris)].As<DebrisBase>(); } set { this["Debris"] = value; } }
    }
    public class DebrisVeinComponent : DebrisActorComponent
    {
        public DebrisVeinComponent(nint addr) : base(addr) { }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public EDebrisCarvedType CarverType { get { return (EDebrisCarvedType)this[nameof(CarverType)].GetValue<int>(); } set { this[nameof(CarverType)].SetValue<int>((int)value); } }
        public VeinResourceCreator VeinCreator { get { return this[nameof(VeinCreator)].As<VeinResourceCreator>(); } set { this["VeinCreator"] = value; } }
    }
    public class InfluencerComponent : DebrisActorComponent
    {
        public InfluencerComponent(nint addr) : base(addr) { }
        public RuntimeFloatCurve ProbabilityCurve { get { return this[nameof(ProbabilityCurve)].As<RuntimeFloatCurve>(); } set { this["ProbabilityCurve"] = value; } }
        public RuntimeFloatCurve ScaleCurve { get { return this[nameof(ScaleCurve)].As<RuntimeFloatCurve>(); } set { this["ScaleCurve"] = value; } }
    }
    public class DebrisProbabilityComponent : DebrisActorComponent
    {
        public DebrisProbabilityComponent(nint addr) : base(addr) { }
        public RandRange ProbabilityRange { get { return this[nameof(ProbabilityRange)].As<RandRange>(); } set { this["ProbabilityRange"] = value; } }
        public bool IsProbabilityShared { get { return this[nameof(IsProbabilityShared)].Flag; } set { this[nameof(IsProbabilityShared)].Flag = value; } }
    }
    public class DebrisDataActor : Actor
    {
        public DebrisDataActor(nint addr) : base(addr) { }
    }
    public class DebrisInstances : HierarchicalInstancedStaticMeshComponent
    {
        public DebrisInstances(nint addr) : base(addr) { }
        public DebrisBase DebrisBase { get { return this[nameof(DebrisBase)].As<DebrisBase>(); } set { this["DebrisBase"] = value; } }
        public int DebrisIndex { get { return this[nameof(DebrisIndex)].GetValue<int>(); } set { this[nameof(DebrisIndex)].SetValue<int>(value); } }
    }
    public class DebrisLocationFinder : Actor
    {
        public DebrisLocationFinder(nint addr) : base(addr) { }
        public Object OnFailedDelegate { get { return this[nameof(OnFailedDelegate)]; } set { this[nameof(OnFailedDelegate)] = value; } }
        public Object OnSuceesDelegate { get { return this[nameof(OnSuceesDelegate)]; } set { this[nameof(OnSuceesDelegate)] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public float MinRadius { get { return this[nameof(MinRadius)].GetValue<float>(); } set { this[nameof(MinRadius)].SetValue<float>(value); } }
        public float MaxRadius { get { return this[nameof(MaxRadius)].GetValue<float>(); } set { this[nameof(MaxRadius)].SetValue<float>(value); } }
        public float MaxExtraRadius { get { return this[nameof(MaxExtraRadius)].GetValue<float>(); } set { this[nameof(MaxExtraRadius)].SetValue<float>(value); } }
        public float MinDistanceToImportantRadius { get { return this[nameof(MinDistanceToImportantRadius)].GetValue<float>(); } set { this[nameof(MinDistanceToImportantRadius)].SetValue<float>(value); } }
        public int MaxIteration { get { return this[nameof(MaxIteration)].GetValue<int>(); } set { this[nameof(MaxIteration)].SetValue<int>(value); } }
        public int MaxChunksPerFrame { get { return this[nameof(MaxChunksPerFrame)].GetValue<int>(); } set { this[nameof(MaxChunksPerFrame)].SetValue<int>(value); } }
        public bool DestroyOnFinish { get { return this[nameof(DestroyOnFinish)].Flag; } set { this[nameof(DestroyOnFinish)].Flag = value; } }
        public bool StopAtEnoughMatches { get { return this[nameof(StopAtEnoughMatches)].Flag; } set { this[nameof(StopAtEnoughMatches)].Flag = value; } }
    }
    public class DebrisMesh : DebrisBase
    {
        public DebrisMesh(nint addr) : base(addr) { }
        public UArray<DebrisStaticMesh> Meshes { get { return new UArray<DebrisStaticMesh>(this[nameof(Meshes)].Address); } }
        public MaterialInterface CommonMaterial { get { return this[nameof(CommonMaterial)].As<MaterialInterface>(); } set { this["CommonMaterial"] = value; } }
        public Object InGameName { get { return this[nameof(InGameName)]; } set { this[nameof(InGameName)] = value; } }
        public Object GemTrackerName { get { return this[nameof(GemTrackerName)]; } set { this[nameof(GemTrackerName)] = value; } }
        public Object InGameDescription { get { return this[nameof(InGameDescription)]; } set { this[nameof(InGameDescription)] = value; } }
        public float StartCullDistance { get { return this[nameof(StartCullDistance)].GetValue<float>(); } set { this[nameof(StartCullDistance)].SetValue<float>(value); } }
        public float EndCullDistance { get { return this[nameof(EndCullDistance)].GetValue<float>(); } set { this[nameof(EndCullDistance)].SetValue<float>(value); } }
    }
    public class DebrisCellNoise : DataAsset
    {
        public DebrisCellNoise(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public Vector CellSize { get { return this[nameof(CellSize)].As<Vector>(); } set { this["CellSize"] = value; } }
        public int NumValues { get { return this[nameof(NumValues)].GetValue<int>(); } set { this[nameof(NumValues)].SetValue<int>(value); } }
        public Vector InvCellSize { get { return this[nameof(InvCellSize)].As<Vector>(); } set { this["InvCellSize"] = value; } }
        public bool Initialized { get { return this[nameof(Initialized)].Flag; } set { this[nameof(Initialized)].Flag = value; } }
    }
    public class DebrisPositioning : DebrisBase
    {
        public DebrisPositioning(nint addr) : base(addr) { }
    }
    public class DebrisSet : DataAsset
    {
        public DebrisSet(nint addr) : base(addr) { }
        public UArray<Object> Debris { get { return new UArray<Object>(this[nameof(Debris)].Address); } }
    }
    public class DebrisStaticCarved : DebrisBase
    {
        public DebrisStaticCarved(nint addr) : base(addr) { }
        public EDebrisCarvedType CarverType { get { return (EDebrisCarvedType)this[nameof(CarverType)].GetValue<int>(); } set { this[nameof(CarverType)].SetValue<int>((int)value); } }
        public UArray<UDebrisStaticCarveMesh> Meshes { get { return new UArray<UDebrisStaticCarveMesh>(this[nameof(Meshes)].Address); } }
        public TerrainMaterial TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterial>(); } set { this["TerrainMaterial"] = value; } }
        public DebrisInfluence CaveInfluenceToAdd { get { return this[nameof(CaveInfluenceToAdd)].As<DebrisInfluence>(); } set { this["CaveInfluenceToAdd"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public float CarveOffsetRadius { get { return this[nameof(CarveOffsetRadius)].GetValue<float>(); } set { this[nameof(CarveOffsetRadius)].SetValue<float>(value); } }
        public Object SpawnAttachClass { get { return this[nameof(SpawnAttachClass)]; } set { this[nameof(SpawnAttachClass)] = value; } }
        public float AttachSpawnOffsetDistance { get { return this[nameof(AttachSpawnOffsetDistance)].GetValue<float>(); } set { this[nameof(AttachSpawnOffsetDistance)].SetValue<float>(value); } }
    }
    public class CustomItemPlacementHandling : Interface
    {
        public CustomItemPlacementHandling(nint addr) : base(addr) { }
    }
    public class InfluencerSpawnComponent : SceneComponent
    {
        public InfluencerSpawnComponent(nint addr) : base(addr) { }
        public CaveInfluencer Influencer { get { return this[nameof(Influencer)].As<CaveInfluencer>(); } set { this["Influencer"] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
    }
    public class DecalManager : ActorComponent
    {
        public DecalManager(nint addr) : base(addr) { }
        public void SpawnDecal(Vector Location, Vector Normal, FSDPhysicalMaterial PhysMat) { Invoke(nameof(SpawnDecal), Location, Normal, PhysMat); }
    }
    public class DeepCSGWorld : Actor
    {
        public DeepCSGWorld(nint addr) : base(addr) { }
        public TerrainMaterial DebugCarveInsideTerrainMaterial { get { return this[nameof(DebugCarveInsideTerrainMaterial)].As<TerrainMaterial>(); } set { this["DebugCarveInsideTerrainMaterial"] = value; } }
        public TerrainMaterial DebugCarveOutsizeTerrainMaterial { get { return this[nameof(DebugCarveOutsizeTerrainMaterial)].As<TerrainMaterial>(); } set { this["DebugCarveOutsizeTerrainMaterial"] = value; } }
        public TerrainMaterial DebugCarveEdgeTerrainMaterial { get { return this[nameof(DebugCarveEdgeTerrainMaterial)].As<TerrainMaterial>(); } set { this["DebugCarveEdgeTerrainMaterial"] = value; } }
        public TerrainMaterial GoldTerrainMaterial { get { return this[nameof(GoldTerrainMaterial)].As<TerrainMaterial>(); } set { this["GoldTerrainMaterial"] = value; } }
        public TerrainMaterial MOMTerrrainMaterial { get { return this[nameof(MOMTerrrainMaterial)].As<TerrainMaterial>(); } set { this["MOMTerrrainMaterial"] = value; } }
        public TerrainMaterial NitraTerrrainMaterial { get { return this[nameof(NitraTerrrainMaterial)].As<TerrainMaterial>(); } set { this["NitraTerrrainMaterial"] = value; } }
        public TerrainMaterial EmptyTerrainMaterial { get { return this[nameof(EmptyTerrainMaterial)].As<TerrainMaterial>(); } set { this["EmptyTerrainMaterial"] = value; } }
        public TerrainMaterial DefaultBurntTerrainMaterial { get { return this[nameof(DefaultBurntTerrainMaterial)].As<TerrainMaterial>(); } set { this["DefaultBurntTerrainMaterial"] = value; } }
        public TerrainMaterial DefaultHardRockMaterial { get { return this[nameof(DefaultHardRockMaterial)].As<TerrainMaterial>(); } set { this["DefaultHardRockMaterial"] = value; } }
        public TerrainMaterial DefaultBedRockMaterial { get { return this[nameof(DefaultBedRockMaterial)].As<TerrainMaterial>(); } set { this["DefaultBedRockMaterial"] = value; } }
        public TerrainType GoldTerrainType { get { return this[nameof(GoldTerrainType)].As<TerrainType>(); } set { this["GoldTerrainType"] = value; } }
        public TerrainType MOMTerrainType { get { return this[nameof(MOMTerrainType)].As<TerrainType>(); } set { this["MOMTerrainType"] = value; } }
        public TerrainType RockTerrainType { get { return this[nameof(RockTerrainType)].As<TerrainType>(); } set { this["RockTerrainType"] = value; } }
        public TerrainType CrystalTerrainType { get { return this[nameof(CrystalTerrainType)].As<TerrainType>(); } set { this["CrystalTerrainType"] = value; } }
        public TerrainType EmptyTerrainType { get { return this[nameof(EmptyTerrainType)].As<TerrainType>(); } set { this["EmptyTerrainType"] = value; } }
        public TerrainType DirtTerrainType { get { return this[nameof(DirtTerrainType)].As<TerrainType>(); } set { this["DirtTerrainType"] = value; } }
        public TerrainType DefaultBurntTerrainType { get { return this[nameof(DefaultBurntTerrainType)].As<TerrainType>(); } set { this["DefaultBurntTerrainType"] = value; } }
        public TerrainMaterialsCollection TerrainMaterials { get { return this[nameof(TerrainMaterials)].As<TerrainMaterialsCollection>(); } set { this["TerrainMaterials"] = value; } }
        public UArray<DebrisSet> StandardDebrisSets { get { return new UArray<DebrisSet>(this[nameof(StandardDebrisSets)].Address); } }
        public UArray<DebrisBase> DebrisLevelGenerationCarved { get { return new UArray<DebrisBase>(this[nameof(DebrisLevelGenerationCarved)].Address); } }
        public UArray<DebrisBase> DebrisLargeCarved { get { return new UArray<DebrisBase>(this[nameof(DebrisLargeCarved)].Address); } }
        public UArray<DebrisBase> DebrisSmallCarved { get { return new UArray<DebrisBase>(this[nameof(DebrisSmallCarved)].Address); } }
        public UArray<DebrisBase> DebrisMeshes { get { return new UArray<DebrisBase>(this[nameof(DebrisMeshes)].Address); } }
        public MaterialInterface DefaultScannerMaterial { get { return this[nameof(DefaultScannerMaterial)].As<MaterialInterface>(); } set { this["DefaultScannerMaterial"] = value; } }
        public Object TestLevelCarver { get { return this[nameof(TestLevelCarver)]; } set { this[nameof(TestLevelCarver)] = value; } }
        public Box TestLevelCarverBoundingBox { get { return this[nameof(TestLevelCarverBoundingBox)].As<Box>(); } set { this["TestLevelCarverBoundingBox"] = value; } }
        public DebrisDataActor DebrisActorInstance { get { return this[nameof(DebrisActorInstance)].As<DebrisDataActor>(); } set { this["DebrisActorInstance"] = value; } }
        public int DebrisActorIndex { get { return this[nameof(DebrisActorIndex)].GetValue<int>(); } set { this[nameof(DebrisActorIndex)].SetValue<int>(value); } }
        public ProceduralSetup ProceduralSetup { get { return this[nameof(ProceduralSetup)].As<ProceduralSetup>(); } set { this["ProceduralSetup"] = value; } }
        public UArray<Object> TerrainMaterialAssets { get { return new UArray<Object>(this[nameof(TerrainMaterialAssets)].Address); } }
        public AsyncPathRequests AsyncPathRequests { get { return this[nameof(AsyncPathRequests)].As<AsyncPathRequests>(); } set { this["AsyncPathRequests"] = value; } }
        public Object OnBaseLayerCommitDone { get { return this[nameof(OnBaseLayerCommitDone)]; } set { this[nameof(OnBaseLayerCommitDone)] = value; } }
        public Object OnBaseLayerFinalCommitDone { get { return this[nameof(OnBaseLayerFinalCommitDone)]; } set { this[nameof(OnBaseLayerFinalCommitDone)] = value; } }
        public UArray<Actor> TerrainAttachedActors { get { return new UArray<Actor>(this[nameof(TerrainAttachedActors)].Address); } }
        public UArray<Object> TerrainListeners { get { return new UArray<Object>(this[nameof(TerrainListeners)].Address); } }
        public UArray<DebrisBase> RegisteredDebrisList { get { return new UArray<DebrisBase>(this[nameof(RegisteredDebrisList)].Address); } }
        public UArray<DebrisWhenCarving> DebrisWhenCarvingList { get { return new UArray<DebrisWhenCarving>(this[nameof(DebrisWhenCarvingList)].Address); } }
        public UArray<DebrisInstances> DebrisInstanceList { get { return new UArray<DebrisInstances>(this[nameof(DebrisInstanceList)].Address); } }
        public UArray<RuntimeSpawnedDebris> RuntimeSpawnedDebris { get { return new UArray<RuntimeSpawnedDebris>(this[nameof(RuntimeSpawnedDebris)].Address); } }
        public UArray<Object> ShowAlwaysScannerComponents { get { return new UArray<Object>(this[nameof(ShowAlwaysScannerComponents)].Address); } }
        public UArray<Object> FogOfWarScannerComponents { get { return new UArray<Object>(this[nameof(FogOfWarScannerComponents)].Address); } }
        public UArray<DebrisBase> DebrisHandles { get { return new UArray<DebrisBase>(this[nameof(DebrisHandles)].Address); } }
        public UArray<Vector> PointsToIncludeInBoudingSphere { get { return new UArray<Vector>(this[nameof(PointsToIncludeInBoudingSphere)].Address); } }
        public TerrainLateJoinData LateJoinData { get { return this[nameof(LateJoinData)].As<TerrainLateJoinData>(); } set { this["LateJoinData"] = value; } }
        public UArray<EncodedChunkId> VisibleChunks { get { return new UArray<EncodedChunkId>(this[nameof(VisibleChunks)].Address); } }
        public void UnRegisterScannerComponent(PrimitiveComponent Component) { Invoke(nameof(UnRegisterScannerComponent), Component); }
        public void TerrainOp_SpawnDebris(TerrainSpawnDebrisOperationData Data) { Invoke(nameof(TerrainOp_SpawnDebris), Data); }
        public void TerrainOp_RemoveFloating(RemoveFloatingIslandOperationData Data) { Invoke(nameof(TerrainOp_RemoveFloating), Data); }
        public void TerrainOp_PickAxe(PickaxeDigOperationData Data) { Invoke(nameof(TerrainOp_PickAxe), Data); }
        public void TerrainOp_Melt(MeltOperationData Data) { Invoke(nameof(TerrainOp_Melt), Data); }
        public void TerrainOp_Explode(GrenadeExplodeOperationData Data) { Invoke(nameof(TerrainOp_Explode), Data); }
        public void TerrainOp_Drill(DrillOperationData Data) { Invoke(nameof(TerrainOp_Drill), Data); }
        public void TerrainOp_CarveSTLMesh(CarveWithSTLMeshOperationData Data) { Invoke(nameof(TerrainOp_CarveSTLMesh), Data); }
        public void TerrainOp_CarveSplineSegment(SplineSegmentCarveOperationData Data) { Invoke(nameof(TerrainOp_CarveSplineSegment), Data); }
        public void TerrainOp_CarveCSG(CSGBuildOperationData Data) { Invoke(nameof(TerrainOp_CarveCSG), Data); }
        public void TerrainOp_CarveCollider(CarveWithColliderOperationData Data) { Invoke(nameof(TerrainOp_CarveCollider), Data); }
        public void TerrainMaterialDataLoaded() { Invoke(nameof(TerrainMaterialDataLoaded)); }
        public void SpawnDebris(DebrisMesh Debris, Vector Pos, float Radius) { Invoke(nameof(SpawnDebris), Debris, Pos, Radius); }
        public void SetVisibleToScanner(Vector Center, Vector range) { Invoke(nameof(SetVisibleToScanner), Center, range); }
        public void SetRockMaterialForTest(TerrainMaterial Material) { Invoke(nameof(SetRockMaterialForTest), Material); }
        public void SelectDebrisSettings() { Invoke(nameof(SelectDebrisSettings)); }
        public void ResetEntireWorld() { Invoke(nameof(ResetEntireWorld)); }
        public void RemoveDebrisInstance_TerrainOp2(int instance, int Component) { Invoke(nameof(RemoveDebrisInstance_TerrainOp2), instance, Component); }
        public void RemoveDebrisInSphere(Vector Position, float Radius, bool onlyFragile, bool alsoDurable, ESpecialDebrisType onlyType) { Invoke(nameof(RemoveDebrisInSphere), Position, Radius, onlyFragile, alsoDurable, onlyType); }
        public void RegisterScannerComponent(PrimitiveComponent Component, bool useFogOfWar) { Invoke(nameof(RegisterScannerComponent), Component, useFogOfWar); }
        public bool Raycast(Vector Start, Vector Direction, float MaxDistance, CSGRaycastHitInfo HitInfo, ELandscapeCellFilter Filter) { return Invoke<bool>(nameof(Raycast), Start, Direction, MaxDistance, HitInfo, Filter); }
        public bool Linecast(Vector Start, Vector End, CSGRaycastHitInfo HitInfo, ELandscapeCellFilter Filter) { return Invoke<bool>(nameof(Linecast), Start, End, HitInfo, Filter); }
        public bool IsPositionVisibleToScanner(Vector Pos) { return Invoke<bool>(nameof(IsPositionVisibleToScanner), Pos); }
        public bool IsPointInsideTerrain(Vector Pos) { return Invoke<bool>(nameof(IsPointInsideTerrain), Pos); }
        public bool IsComponentRegisteredWithScanner(PrimitiveComponent Component) { return Invoke<bool>(nameof(IsComponentRegisteredWithScanner), Component); }
        public bool InitialGenerationDone() { return Invoke<bool>(nameof(InitialGenerationDone)); }
        public int GetTerrainHash() { return Invoke<int>(nameof(GetTerrainHash)); }
        public int GetShadowQuality() { return Invoke<int>(nameof(GetShadowQuality)); }
        public DebrisDataActor GetDebrisDataActor() { return Invoke<DebrisDataActor>(nameof(GetDebrisDataActor)); }
        public void GetAllTerrainActorsAroundPoint(Vector Center, Vector range, UArray<Actor> TerrainActors) { Invoke(nameof(GetAllTerrainActorsAroundPoint), Center, range, TerrainActors); }
        public void GenerateAllMeshes() { Invoke(nameof(GenerateAllMeshes)); }
        public void FinishGeneration_Blocking() { Invoke(nameof(FinishGeneration_Blocking)); }
        public float FindTotalVolumeOfMaterialInWorld(TerrainMaterial Material) { return Invoke<float>(nameof(FindTotalVolumeOfMaterialInWorld), Material); }
        public void CarveWithSTLMeshUsingTransform_Wait(DeepCSGWorld CSGWorld, STLMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Transform Transform, EPreciousMaterialOptions Precious, LatentActionInfo LatentInfo) { Invoke(nameof(CarveWithSTLMeshUsingTransform_Wait), CSGWorld, MeshCarver, Material, CarveFilter, Transform, Precious, LatentInfo); }
        public void CarveWithSTLMeshUsingTransform(STLMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Transform Transform, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithSTLMeshUsingTransform), MeshCarver, Material, CarveFilter, Transform, Precious); }
        public void CarveWithSTLMesh_Wait(DeepCSGWorld CSGWorld, STLMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Vector Pos, Quat Orientation, Vector Scale, EPreciousMaterialOptions Precious, LatentActionInfo LatentInfo) { Invoke(nameof(CarveWithSTLMesh_Wait), CSGWorld, MeshCarver, Material, CarveFilter, Pos, Orientation, Scale, Precious, LatentInfo); }
        public void CarveWithSTLMesh(STLMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Vector Pos, Quat Orientation, Vector Scale, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithSTLMesh), MeshCarver, Material, CarveFilter, Pos, Orientation, Scale, Precious); }
        public void CarveWithStaticMeshUsingTransform_Wait(DeepCSGWorld CSGWorld, StaticMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Transform Transform, EPreciousMaterialOptions Precious, LatentActionInfo LatentInfo) { Invoke(nameof(CarveWithStaticMeshUsingTransform_Wait), CSGWorld, MeshCarver, Material, CarveFilter, Transform, Precious, LatentInfo); }
        public void CarveWithStaticMeshUsingTransform(StaticMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Transform Transform, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithStaticMeshUsingTransform), MeshCarver, Material, CarveFilter, Transform, Precious); }
        public void CarveWithStaticMesh(StaticMeshCarver MeshCarver, TerrainMaterial Material, ECarveFilterType CarveFilter, Vector Pos, Quat Orientation, Vector Scale, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithStaticMesh), MeshCarver, Material, CarveFilter, Pos, Orientation, Scale, Precious); }
        public void CarveWithSplineSegments(UArray<CarveSplineSegment> Segments, TerrainMaterial Material, ECarveFilterType CarveFilter, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithSplineSegments), Segments, Material, CarveFilter, Precious); }
        public void CarveWithSplineSegment(Vector SplineStart, Vector SplineStartTangent, Vector SplineEnd, Vector SplineEndTangent, float Radius, TerrainMaterial Material, ECarveFilterType CarveFilter, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithSplineSegment), SplineStart, SplineStartTangent, SplineEnd, SplineEndTangent, Radius, Material, CarveFilter, Precious); }
        public void CarveWithMeshUsingTransform_Wait(DeepCSGWorld CSGWorld, StaticMesh StaticMesh, TerrainMaterial Material, ECarveFilterType CarveFilter, Transform Transform, float ExpensiveNoise, EPreciousMaterialOptions Precious, LatentActionInfo LatentInfo) { Invoke(nameof(CarveWithMeshUsingTransform_Wait), CSGWorld, StaticMesh, Material, CarveFilter, Transform, ExpensiveNoise, Precious, LatentInfo); }
        public void CarveWithMeshUsingTransform(StaticMesh StaticMesh, TerrainMaterial Material, ECarveFilterType CarveFilter, Transform Transform, float ExpensiveNoise, EPreciousMaterialOptions Precious, CarveOptionsCellSize CarverSize) { Invoke(nameof(CarveWithMeshUsingTransform), StaticMesh, Material, CarveFilter, Transform, ExpensiveNoise, Precious, CarverSize); }
        public void CarveWithMesh_Wait(DeepCSGWorld CSGWorld, StaticMesh StaticMesh, TerrainMaterial Material, ECarveFilterType CarveFilter, Vector Pos, Quat Orientation, Vector Scale, LatentActionInfo LatentInfo) { Invoke(nameof(CarveWithMesh_Wait), CSGWorld, StaticMesh, Material, CarveFilter, Pos, Orientation, Scale, LatentInfo); }
        public void CarveWithMesh(StaticMesh StaticMesh, TerrainMaterial Material, ECarveFilterType CarveFilter, Vector Pos, Quat Orientation, Vector Scale, EPreciousMaterialOptions Precious) { Invoke(nameof(CarveWithMesh), StaticMesh, Material, CarveFilter, Pos, Orientation, Scale, Precious); }
        public void CarveWithCSGBuild(Object CSGModel, Transform Transform) { Invoke(nameof(CarveWithCSGBuild), CSGModel, Transform); }
        public float CalcApproximateTerrainDensity(Vector Pos, float Radius) { return Invoke<float>(nameof(CalcApproximateTerrainDensity), Pos, Radius); }
        public TerrainMaterial BPGetTerrainMaterial(int Handle) { return Invoke<TerrainMaterial>(nameof(BPGetTerrainMaterial), Handle); }
        public void BaseLayerCommitFinal(bool blocking) { Invoke(nameof(BaseLayerCommitFinal), blocking); }
        public void BaseLayerCommit(bool blocking, bool scheduleTesselation) { Invoke(nameof(BaseLayerCommit), blocking, scheduleTesselation); }
        public void AttachActorToTerrain(Actor Actor, Vector Pos) { Invoke(nameof(AttachActorToTerrain), Actor, Pos); }
        public void ApplyBaseDebrisCarvers(UArray<DebrisBase> Carvers) { Invoke(nameof(ApplyBaseDebrisCarvers), Carvers); }
    }
    public class DeepDive : Object
    {
        public DeepDive(nint addr) : base(addr) { }
        public UArray<GeneratedMission> missions { get { return new UArray<GeneratedMission>(this[nameof(missions)].Address); } }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public UArray<DeepDiveRewardItem> GivenRewards { get { return new UArray<DeepDiveRewardItem>(this[nameof(GivenRewards)].Address); } }
        public int MissionsCompleted { get { return this[nameof(MissionsCompleted)].GetValue<int>(); } set { this[nameof(MissionsCompleted)].SetValue<int>(value); } }
        public UArray<int> StagesCompleted { get { return new UArray<int>(this[nameof(StagesCompleted)].Address); } }
        public int CurrentMissionIndex { get { return this[nameof(CurrentMissionIndex)].GetValue<int>(); } set { this[nameof(CurrentMissionIndex)].SetValue<int>(value); } }
        public DeepDiveTemplate Template { get { return this[nameof(Template)].As<DeepDiveTemplate>(); } set { this["Template"] = value; } }
        public Object DeepDiveName { get { return this[nameof(DeepDiveName)]; } set { this[nameof(DeepDiveName)] = value; } }
        public int BestTime { get { return this[nameof(BestTime)].GetValue<int>(); } set { this[nameof(BestTime)].SetValue<int>(value); } }
        public bool IsCompleted() { return Invoke<bool>(nameof(IsCompleted)); }
        public bool HasCompletedStage(int stageIndex) { return Invoke<bool>(nameof(HasCompletedStage), stageIndex); }
        public DeepDiveRewardItem GetGivenRewardAtStage(int stageIndex) { return Invoke<DeepDiveRewardItem>(nameof(GetGivenRewardAtStage), stageIndex); }
    }
    public class DeepDiveFunctionLibrary : BlueprintFunctionLibrary
    {
        public DeepDiveFunctionLibrary(nint addr) : base(addr) { }
        public bool IsEliteDeepDiveMission(Object WorldContextObject, GeneratedMission mission) { return Invoke<bool>(nameof(IsEliteDeepDiveMission), WorldContextObject, mission); }
        public bool IsEliteDeepDive(Object WorldContextObject, DeepDive DeepDive) { return Invoke<bool>(nameof(IsEliteDeepDive), WorldContextObject, DeepDive); }
        public bool GetHasEverCompletedDeepDive(Object WorldContextObject, DeepDiveTemplate DeepDive) { return Invoke<bool>(nameof(GetHasEverCompletedDeepDive), WorldContextObject, DeepDive); }
        public DeepDive GetDeepDiveFromMission(Object WorldContextObject, GeneratedMission mission) { return Invoke<DeepDive>(nameof(GetDeepDiveFromMission), WorldContextObject, mission); }
    }
    public class DeepDiveManager : Object
    {
        public DeepDiveManager(nint addr) : base(addr) { }
        public Object OnDeepDivesRefresh { get { return this[nameof(OnDeepDivesRefresh)]; } set { this[nameof(OnDeepDivesRefresh)] = value; } }
        public bool LockSeed { get { return this[nameof(LockSeed)].Flag; } set { this[nameof(LockSeed)].Flag = value; } }
        public FSDEventsHandler EventsHandler { get { return this[nameof(EventsHandler)].As<FSDEventsHandler>(); } set { this["EventsHandler"] = value; } }
        public DeepDive ActiveNormalDeepDive { get { return this[nameof(ActiveNormalDeepDive)].As<DeepDive>(); } set { this["ActiveNormalDeepDive"] = value; } }
        public DeepDive ActiveHardDeepDive { get { return this[nameof(ActiveHardDeepDive)].As<DeepDive>(); } set { this["ActiveHardDeepDive"] = value; } }
        public DeepDive ActiveDeepDive { get { return this[nameof(ActiveDeepDive)].As<DeepDive>(); } set { this["ActiveDeepDive"] = value; } }
        public DeepDive DebugDeepDive { get { return this[nameof(DebugDeepDive)].As<DeepDive>(); } set { this["DebugDeepDive"] = value; } }
        public GeneratedMission CurrentMission { get { return this[nameof(CurrentMission)].As<GeneratedMission>(); } set { this["CurrentMission"] = value; } }
        public float currentDepth { get { return this[nameof(currentDepth)].GetValue<float>(); } set { this[nameof(currentDepth)].SetValue<float>(value); } }
        public Object DeepDiveBank { get { return this[nameof(DeepDiveBank)]; } set { this[nameof(DeepDiveBank)] = value; } }
        public int BackendDataValid { get { return this[nameof(BackendDataValid)].GetValue<int>(); } set { this[nameof(BackendDataValid)].SetValue<int>(value); } }
        public DateTime BackendExpirationTime { get { return this[nameof(BackendExpirationTime)].As<DateTime>(); } set { this["BackendExpirationTime"] = value; } }
        public int BackendSeed { get { return this[nameof(BackendSeed)].GetValue<int>(); } set { this[nameof(BackendSeed)].SetValue<int>(value); } }
        public void SetDeepDive(DeepDive DeepDive) { Invoke(nameof(SetDeepDive), DeepDive); }
        public void ReInitialize() { Invoke(nameof(ReInitialize)); }
        public void MarkGivenRewards() { Invoke(nameof(MarkGivenRewards)); }
        public GeneratedMission GetCurrentSingleMission() { return Invoke<GeneratedMission>(nameof(GetCurrentSingleMission)); }
        public int GetCurrentDeepDiveStage() { return Invoke<int>(nameof(GetCurrentDeepDiveStage)); }
        public DeepDive GetActiveNormalDeepDive() { return Invoke<DeepDive>(nameof(GetActiveNormalDeepDive)); }
        public DeepDive GetActiveHardDeepDive() { return Invoke<DeepDive>(nameof(GetActiveHardDeepDive)); }
        public DeepDive GetActiveDeepDive() { return Invoke<DeepDive>(nameof(GetActiveDeepDive)); }
        public DeepDive GenerateDebugDeepDive(UArray<DeepDiveTesterItem> stages, Biome Biome, bool IsElite) { return Invoke<DeepDive>(nameof(GenerateDebugDeepDive), stages, Biome, IsElite); }
        public int FindDeepDiveSeed(DeepDive DeepDive) { return Invoke<int>(nameof(FindDeepDiveSeed), DeepDive); }
        public void DeepDiveRefreshDelegate__DelegateSignature() { Invoke(nameof(DeepDiveRefreshDelegate__DelegateSignature)); }
        public bool CompleteCurrentSingleMission() { return Invoke<bool>(nameof(CompleteCurrentSingleMission)); }
    }
    public class DeepDiveSettings : DataAsset
    {
        public DeepDiveSettings(nint addr) : base(addr) { }
        public DeepDiveTemplate NormalTemplate { get { return this[nameof(NormalTemplate)].As<DeepDiveTemplate>(); } set { this["NormalTemplate"] = value; } }
        public DeepDiveTemplate HardTemplate { get { return this[nameof(HardTemplate)].As<DeepDiveTemplate>(); } set { this["HardTemplate"] = value; } }
        public UArray<Mutator> BaseMutators { get { return new UArray<Mutator>(this[nameof(BaseMutators)].Address); } }
        public UArray<MissionMutator> Mutators { get { return new UArray<MissionMutator>(this[nameof(Mutators)].Address); } }
        public UArray<MissionWarning> Warnings { get { return new UArray<MissionWarning>(this[nameof(Warnings)].Address); } }
        public UArray<DialogDataAsset> DeepDiveMissionCompleteShouts { get { return new UArray<DialogDataAsset>(this[nameof(DeepDiveMissionCompleteShouts)].Address); } }
        public UArray<DeepDiveLoaderSequence> LoaderSequnces { get { return new UArray<DeepDiveLoaderSequence>(this[nameof(LoaderSequnces)].Address); } }
        public MissionNameBank DeepDiveNameBank { get { return this[nameof(DeepDiveNameBank)].As<MissionNameBank>(); } set { this["DeepDiveNameBank"] = value; } }
        public Object MissionBar { get { return this[nameof(MissionBar)]; } set { this[nameof(MissionBar)] = value; } }
        public Object MissionEndScreen_Success { get { return this[nameof(MissionEndScreen_Success)]; } set { this[nameof(MissionEndScreen_Success)] = value; } }
        public Object MissionEndScreen_Failure { get { return this[nameof(MissionEndScreen_Failure)]; } set { this[nameof(MissionEndScreen_Failure)] = value; } }
    }
    public class DeepDiveTemplate : SavableDataAsset
    {
        public DeepDiveTemplate(nint addr) : base(addr) { }
        public UArray<DifficultySetting> Difficulties { get { return new UArray<DifficultySetting>(this[nameof(Difficulties)].Address); } }
        public UArray<DeepDiveTemplateItem> missions { get { return new UArray<DeepDiveTemplateItem>(this[nameof(missions)].Address); } }
        public UArray<ESchematicType> Rewards { get { return new UArray<ESchematicType>(this[nameof(Rewards)].Address); } }
        public int CreditsPerPrimaryObjective { get { return this[nameof(CreditsPerPrimaryObjective)].GetValue<int>(); } set { this[nameof(CreditsPerPrimaryObjective)].SetValue<int>(value); } }
        public int CreditsPerSecondaryObjective { get { return this[nameof(CreditsPerSecondaryObjective)].GetValue<int>(); } set { this[nameof(CreditsPerSecondaryObjective)].SetValue<int>(value); } }
        public int XPPerPrimaryObjective { get { return this[nameof(XPPerPrimaryObjective)].GetValue<int>(); } set { this[nameof(XPPerPrimaryObjective)].SetValue<int>(value); } }
        public int XPPerSecondaryObjective { get { return this[nameof(XPPerSecondaryObjective)].GetValue<int>(); } set { this[nameof(XPPerSecondaryObjective)].SetValue<int>(value); } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public RandInterval MutatorCount { get { return this[nameof(MutatorCount)].As<RandInterval>(); } set { this["MutatorCount"] = value; } }
        public RandInterval WarningCount { get { return this[nameof(WarningCount)].As<RandInterval>(); } set { this["WarningCount"] = value; } }
        public bool IsDurationAllowed(MissionTemplate mission, MissionDuration Duration) { return Invoke<bool>(nameof(IsDurationAllowed), mission, Duration); }
        public bool IsComplexityAllowed(MissionTemplate mission, MissionComplexity Complexity) { return Invoke<bool>(nameof(IsComplexityAllowed), mission, Complexity); }
        public ESchematicType GetStageRewardType(int stageIndex) { return Invoke<ESchematicType>(nameof(GetStageRewardType), stageIndex); }
    }
    public class AsyncPathRequestsInterface : Interface
    {
        public AsyncPathRequestsInterface(nint addr) : base(addr) { }
    }
    public class AsyncPathRequests : ActorComponent
    {
        public AsyncPathRequests(nint addr) : base(addr) { }
        public UArray<Object> RequestListeners { get { return new UArray<Object>(this[nameof(RequestListeners)].Address); } }
    }
    public class DeepPathfinderSceneComponent : SceneComponent
    {
        public DeepPathfinderSceneComponent(nint addr) : base(addr) { }
    }
    public class FlyingEnemyDeepPathfinderCharacter : EnemyDeepPathfinderCharacter
    {
        public FlyingEnemyDeepPathfinderCharacter(nint addr) : base(addr) { }
        public PhysicalMaterial FrozenMaterial { get { return this[nameof(FrozenMaterial)].As<PhysicalMaterial>(); } set { this["FrozenMaterial"] = value; } }
        public PhysicsAsset FrozenAsset { get { return this[nameof(FrozenAsset)].As<PhysicsAsset>(); } set { this["FrozenAsset"] = value; } }
        public SoundCue FrozenDeathSound { get { return this[nameof(FrozenDeathSound)].As<SoundCue>(); } set { this["FrozenDeathSound"] = value; } }
        public ParticleSystem FrozenDeathParticles { get { return this[nameof(FrozenDeathParticles)].As<ParticleSystem>(); } set { this["FrozenDeathParticles"] = value; } }
        public void TriggerFrozenRagdoll() { Invoke(nameof(TriggerFrozenRagdoll)); }
        public void OnFreezeImpact(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnFreezeImpact), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
        public void BP_FreezeImpact() { Invoke(nameof(BP_FreezeImpact)); }
    }
    public class FrozenPawnImpactComponent : ActorComponent
    {
        public FrozenPawnImpactComponent(nint addr) : base(addr) { }
        public Object OnStartFallingEvent { get { return this[nameof(OnStartFallingEvent)]; } set { this[nameof(OnStartFallingEvent)] = value; } }
        public Object OnFreezeImpactEvent { get { return this[nameof(OnFreezeImpactEvent)]; } set { this[nameof(OnFreezeImpactEvent)] = value; } }
        public PhysicalMaterial FrozenMaterial { get { return this[nameof(FrozenMaterial)].As<PhysicalMaterial>(); } set { this["FrozenMaterial"] = value; } }
        public PhysicsAsset FrozenAsset { get { return this[nameof(FrozenAsset)].As<PhysicsAsset>(); } set { this["FrozenAsset"] = value; } }
        public SoundCue FrozenDeathSound { get { return this[nameof(FrozenDeathSound)].As<SoundCue>(); } set { this["FrozenDeathSound"] = value; } }
        public ParticleSystem FrozenDeathParticles { get { return this[nameof(FrozenDeathParticles)].As<ParticleSystem>(); } set { this["FrozenDeathParticles"] = value; } }
        public void TriggerFrozenRagdoll() { Invoke(nameof(TriggerFrozenRagdoll)); }
        public void OnFrozen(bool frozen) { Invoke(nameof(OnFrozen), frozen); }
        public void OnFreezeImpact(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnFreezeImpact), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
    }
    public class DeepPathfinderMovement : PawnMovementComponent
    {
        public DeepPathfinderMovement(nint addr) : base(addr) { }
        public bool UseDormancy { get { return this[nameof(UseDormancy)].Flag; } set { this[nameof(UseDormancy)].Flag = value; } }
        public float MaxPawnSpeed { get { return this[nameof(MaxPawnSpeed)].GetValue<float>(); } set { this[nameof(MaxPawnSpeed)].SetValue<float>(value); } }
        public float StrafeSpeed { get { return this[nameof(StrafeSpeed)].GetValue<float>(); } set { this[nameof(StrafeSpeed)].SetValue<float>(value); } }
        public float MinSlowdownAngle { get { return this[nameof(MinSlowdownAngle)].GetValue<float>(); } set { this[nameof(MinSlowdownAngle)].SetValue<float>(value); } }
        public float MaxSlowdownAngle { get { return this[nameof(MaxSlowdownAngle)].GetValue<float>(); } set { this[nameof(MaxSlowdownAngle)].SetValue<float>(value); } }
        public float MaxStrafeDistance { get { return this[nameof(MaxStrafeDistance)].GetValue<float>(); } set { this[nameof(MaxStrafeDistance)].SetValue<float>(value); } }
        public float AlignDirectionSpeed { get { return this[nameof(AlignDirectionSpeed)].GetValue<float>(); } set { this[nameof(AlignDirectionSpeed)].SetValue<float>(value); } }
        public float FleeSpeedBoostMultiplier { get { return this[nameof(FleeSpeedBoostMultiplier)].GetValue<float>(); } set { this[nameof(FleeSpeedBoostMultiplier)].SetValue<float>(value); } }
        public float MaxAcceleration { get { return this[nameof(MaxAcceleration)].GetValue<float>(); } set { this[nameof(MaxAcceleration)].SetValue<float>(value); } }
        public float MaxBrakingDeceleration { get { return this[nameof(MaxBrakingDeceleration)].GetValue<float>(); } set { this[nameof(MaxBrakingDeceleration)].SetValue<float>(value); } }
        public float AngleSpeedFilterFactor { get { return this[nameof(AngleSpeedFilterFactor)].GetValue<float>(); } set { this[nameof(AngleSpeedFilterFactor)].SetValue<float>(value); } }
        public uint AIAvoidanceWeight { get { return this[nameof(AIAvoidanceWeight)].GetValue<uint>(); } set { this[nameof(AIAvoidanceWeight)].SetValue<uint>(value); } }
        public DeepPathFinderType PathfinderType { get { return (DeepPathFinderType)this[nameof(PathfinderType)].GetValue<int>(); } set { this[nameof(PathfinderType)].SetValue<int>((int)value); } }
        public DeepPathFinderSize PathfinderSize { get { return (DeepPathFinderSize)this[nameof(PathfinderSize)].GetValue<int>(); } set { this[nameof(PathfinderSize)].SetValue<int>((int)value); } }
        public ETeleportType MovementPhysicsType { get { return (ETeleportType)this[nameof(MovementPhysicsType)].GetValue<int>(); } set { this[nameof(MovementPhysicsType)].SetValue<int>((int)value); } }
        public DeepPathFinderPreference PathfinderPreference { get { return (DeepPathFinderPreference)this[nameof(PathfinderPreference)].GetValue<int>(); } set { this[nameof(PathfinderPreference)].SetValue<int>((int)value); } }
        public bool AlignTowardsTargetIfStationary { get { return this[nameof(AlignTowardsTargetIfStationary)].Flag; } set { this[nameof(AlignTowardsTargetIfStationary)].Flag = value; } }
        public float AlignToTargetMinRequiredAngle { get { return this[nameof(AlignToTargetMinRequiredAngle)].GetValue<float>(); } set { this[nameof(AlignToTargetMinRequiredAngle)].SetValue<float>(value); } }
        public Vector AlignTowardsLocation { get { return this[nameof(AlignTowardsLocation)].As<Vector>(); } set { this["AlignTowardsLocation"] = value; } }
        public bool AllowSlowTickRateWhenNotVisible { get { return this[nameof(AllowSlowTickRateWhenNotVisible)].Flag; } set { this[nameof(AllowSlowTickRateWhenNotVisible)].Flag = value; } }
        public bool ForceAPathIfNoneFound { get { return this[nameof(ForceAPathIfNoneFound)].Flag; } set { this[nameof(ForceAPathIfNoneFound)].Flag = value; } }
        public bool DrawServerPath { get { return this[nameof(DrawServerPath)].Flag; } set { this[nameof(DrawServerPath)].Flag = value; } }
        public Object OnPathBegin { get { return this[nameof(OnPathBegin)]; } set { this[nameof(OnPathBegin)] = value; } }
        public Object OnPauseMovementElapsed { get { return this[nameof(OnPauseMovementElapsed)]; } set { this[nameof(OnPauseMovementElapsed)] = value; } }
        public Object OnPathFinished { get { return this[nameof(OnPathFinished)]; } set { this[nameof(OnPathFinished)] = value; } }
        public Object OnRefreshDestination { get { return this[nameof(OnRefreshDestination)]; } set { this[nameof(OnRefreshDestination)] = value; } }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public bool IsStrafingOverride { get { return this[nameof(IsStrafingOverride)].Flag; } set { this[nameof(IsStrafingOverride)].Flag = value; } }
        public DeepCSGWorld CSGWorld { get { return this[nameof(CSGWorld)].As<DeepCSGWorld>(); } set { this["CSGWorld"] = value; } }
        public uint PathMovedDist { get { return this[nameof(PathMovedDist)].GetValue<uint>(); } set { this[nameof(PathMovedDist)].SetValue<uint>(value); } }
        public uint LocalPathMovedDist { get { return this[nameof(LocalPathMovedDist)].GetValue<uint>(); } set { this[nameof(LocalPathMovedDist)].SetValue<uint>(value); } }
        public DeepRepPath Path { get { return this[nameof(Path)].As<DeepRepPath>(); } set { this["Path"] = value; } }
        public FakeMoverSettings MoveSettings { get { return this[nameof(MoveSettings)].As<FakeMoverSettings>(); } set { this["MoveSettings"] = value; } }
        public Actor TargetActor { get { return this[nameof(TargetActor)].As<Actor>(); } set { this["TargetActor"] = value; } }
        public int CurrentPathIndex { get { return this[nameof(CurrentPathIndex)].GetValue<int>(); } set { this[nameof(CurrentPathIndex)].SetValue<int>(value); } }
        public float CurrentPathFraction { get { return this[nameof(CurrentPathFraction)].GetValue<float>(); } set { this[nameof(CurrentPathFraction)].SetValue<float>(value); } }
        public Vector Destination { get { return this[nameof(Destination)].As<Vector>(); } set { this["Destination"] = value; } }
        public Actor DestinationActor { get { return this[nameof(DestinationActor)].As<Actor>(); } set { this["DestinationActor"] = value; } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public bool OnlyPartPath { get { return this[nameof(OnlyPartPath)].Flag; } set { this[nameof(OnlyPartPath)].Flag = value; } }
        public float PauseMovementTime { get { return this[nameof(PauseMovementTime)].GetValue<float>(); } set { this[nameof(PauseMovementTime)].SetValue<float>(value); } }
        public EDeepMovementMode MoveMode { get { return (EDeepMovementMode)this[nameof(MoveMode)].GetValue<int>(); } set { this[nameof(MoveMode)].SetValue<int>((int)value); } }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public Vector LastForwardDir { get { return this[nameof(LastForwardDir)].As<Vector>(); } set { this["LastForwardDir"] = value; } }
        public float VerticalAngleSpeed { get { return this[nameof(VerticalAngleSpeed)].GetValue<float>(); } set { this[nameof(VerticalAngleSpeed)].SetValue<float>(value); } }
        public float HorizontalAngleSpeed { get { return this[nameof(HorizontalAngleSpeed)].GetValue<float>(); } set { this[nameof(HorizontalAngleSpeed)].SetValue<float>(value); } }
        public bool IsStrafing { get { return this[nameof(IsStrafing)].Flag; } set { this[nameof(IsStrafing)].Flag = value; } }
        public bool HasOustandingPathRequest { get { return this[nameof(HasOustandingPathRequest)].Flag; } set { this[nameof(HasOustandingPathRequest)].Flag = value; } }
        public bool LastPathReachedPreciseDestination { get { return this[nameof(LastPathReachedPreciseDestination)].Flag; } set { this[nameof(LastPathReachedPreciseDestination)].Flag = value; } }
        public float PostponedTickTime { get { return this[nameof(PostponedTickTime)].GetValue<float>(); } set { this[nameof(PostponedTickTime)].SetValue<float>(value); } }
        public bool LastMoveSuccessful { get { return this[nameof(LastMoveSuccessful)].Flag; } set { this[nameof(LastMoveSuccessful)].Flag = value; } }
        public bool HandleRotation { get { return this[nameof(HandleRotation)].Flag; } set { this[nameof(HandleRotation)].Flag = value; } }
        public bool TickAfterOwnerDeath { get { return this[nameof(TickAfterOwnerDeath)].Flag; } set { this[nameof(TickAfterOwnerDeath)].Flag = value; } }
        public HandleRotationOptions HandleRotationOptions { get { return this[nameof(HandleRotationOptions)].As<HandleRotationOptions>(); } set { this["HandleRotationOptions"] = value; } }
        public Vector UnfilteredPosition { get { return this[nameof(UnfilteredPosition)].As<Vector>(); } set { this["UnfilteredPosition"] = value; } }
        public Vector LastDestPosUsed { get { return this[nameof(LastDestPosUsed)].As<Vector>(); } set { this["LastDestPosUsed"] = value; } }
        public float DampOmega { get { return this[nameof(DampOmega)].GetValue<float>(); } set { this[nameof(DampOmega)].SetValue<float>(value); } }
        public bool UseMovementSpring { get { return this[nameof(UseMovementSpring)].Flag; } set { this[nameof(UseMovementSpring)].Flag = value; } }
        public bool SnapToPathfinderOnFirstMove { get { return this[nameof(SnapToPathfinderOnFirstMove)].Flag; } set { this[nameof(SnapToPathfinderOnFirstMove)].Flag = value; } }
        public bool DisablePathfinderErrors { get { return this[nameof(DisablePathfinderErrors)].Flag; } set { this[nameof(DisablePathfinderErrors)].Flag = value; } }
        public FakeMoverState FakePhysicsMove { get { return this[nameof(FakePhysicsMove)].As<FakeMoverState>(); } set { this["FakePhysicsMove"] = value; } }
        public float FakeSyncTime { get { return this[nameof(FakeSyncTime)].GetValue<float>(); } set { this[nameof(FakeSyncTime)].SetValue<float>(value); } }
        public void UpdateTargetActor(Actor NewTarget) { Invoke(nameof(UpdateTargetActor), NewTarget); }
        public void UpdateDestination(Vector Dest) { Invoke(nameof(UpdateDestination), Dest); }
        public void UnPauseMovement() { Invoke(nameof(UnPauseMovement)); }
        public void TeleportTo(Vector destLoc, Rotator destRot) { Invoke(nameof(TeleportTo), destLoc, destRot); }
        public void StopMove() { Invoke(nameof(StopMove)); }
        public void StopAttackStance() { Invoke(nameof(StopAttackStance)); }
        public bool StartMoveToActor(Actor Dest, float AcceptanceRadius, bool ToCenterOfMass) { return Invoke<bool>(nameof(StartMoveToActor), Dest, AcceptanceRadius, ToCenterOfMass); }
        public bool StartMoveTo(Vector Dest, float AcceptanceRadius) { return Invoke<bool>(nameof(StartMoveTo), Dest, AcceptanceRadius); }
        public bool StartFleeFrom(Vector dangerPos, float Distance) { return Invoke<bool>(nameof(StartFleeFrom), dangerPos, Distance); }
        public void StartFakePhysicsMoveSet(FakeMoverSettings MoveSettings) { Invoke(nameof(StartFakePhysicsMoveSet), MoveSettings); }
        public void StartFakePhysics(Vector Vel) { Invoke(nameof(StartFakePhysics), Vel); }
        public void StartAttackStance(Vector stancePos) { Invoke(nameof(StartAttackStance), stancePos); }
        public void SnapToPathfinder() { Invoke(nameof(SnapToPathfinder)); }
        public void SetSlowDownAngles(float Min, float Max) { Invoke(nameof(SetSlowDownAngles), Min, Max); }
        public void SetMaxSpeed(float Speed) { Invoke(nameof(SetMaxSpeed), Speed); }
        public void SetMaxAcceleration(float Value) { Invoke(nameof(SetMaxAcceleration), Value); }
        public void SetHandleRotation(bool flag) { Invoke(nameof(SetHandleRotation), flag); }
        public void SetFreezeAlignment(bool Freeze) { Invoke(nameof(SetFreezeAlignment), Freeze); }
        public void SetControlledExternally(bool controlled) { Invoke(nameof(SetControlledExternally), controlled); }
        public void PauseMovement(float Time) { Invoke(nameof(PauseMovement), Time); }
        public bool PathExistTo(Vector Dest) { return Invoke<bool>(nameof(PathExistTo), Dest); }
        public bool PathExistsBetween(Vector from, Vector to) { return Invoke<bool>(nameof(PathExistsBetween), from, to); }
        public void OnRep_Path(DeepRepPath oldPath) { Invoke(nameof(OnRep_Path), oldPath); }
        public void OnRep_MoveSettings(FakeMoverSettings MoveSettings) { Invoke(nameof(OnRep_MoveSettings), MoveSettings); }
        public bool IsFreezeAlignmentSet() { return Invoke<bool>(nameof(IsFreezeAlignmentSet)); }
        public float GetVerticalAngleSpeed() { return Invoke<float>(nameof(GetVerticalAngleSpeed)); }
        public void GetRandomSpawnPointAtApproximateDistance_Async(Vector Origin, float Distance, bool success, Vector outPos, LatentActionInfo LatentInfo) { Invoke(nameof(GetRandomSpawnPointAtApproximateDistance_Async), Origin, Distance, success, outPos, LatentInfo); }
        public void GetRandomReachablePointAtApproximateDistance_Async(Vector Origin, float Distance, bool success, Vector outPos, LatentActionInfo LatentInfo) { Invoke(nameof(GetRandomReachablePointAtApproximateDistance_Async), Origin, Distance, success, outPos, LatentInfo); }
        public bool GetRandomReachablePointAtApproximateDistance(Vector Origin, float Distance, Vector outPos) { return Invoke<bool>(nameof(GetRandomReachablePointAtApproximateDistance), Origin, Distance, outPos); }
        public Vector GetPathForwardDirection() { return Invoke<Vector>(nameof(GetPathForwardDirection)); }
        public DeepPathFinderType GetPathfinderType() { return Invoke<DeepPathFinderType>(nameof(GetPathfinderType)); }
        public DeepPathFinderSize GetPathfinderSize() { return Invoke<DeepPathFinderSize>(nameof(GetPathfinderSize)); }
        public EDeepMovementState GetMovementState() { return Invoke<EDeepMovementState>(nameof(GetMovementState)); }
        public float GetMaxAcceleration() { return Invoke<float>(nameof(GetMaxAcceleration)); }
        public bool GetIsStrafing() { return Invoke<bool>(nameof(GetIsStrafing)); }
        public float GetHorizontalAngleSpeed() { return Invoke<float>(nameof(GetHorizontalAngleSpeed)); }
        public Vector GetCurrentMovePos() { return Invoke<Vector>(nameof(GetCurrentMovePos)); }
        public FakeMoverSettings GetCurrentFakePhysicsMoveSet() { return Invoke<FakeMoverSettings>(nameof(GetCurrentFakePhysicsMoveSet)); }
        public float GetApproximatePathLength(Vector Start, Vector End) { return Invoke<float>(nameof(GetApproximatePathLength), Start, End); }
        public bool FlyToConnectedPosition(Vector destPos) { return Invoke<bool>(nameof(FlyToConnectedPosition), destPos); }
        public bool FindPointKeepingDistance(Vector Origin, float MinDistance, float MaxDistance, Vector Target, float idealTargetDistance, Vector outPos) { return Invoke<bool>(nameof(FindPointKeepingDistance), Origin, MinDistance, MaxDistance, Target, idealTargetDistance, outPos); }
        public bool FindPointDiagonalTowardsTarget(Vector Origin, Vector Target, float dodgeAngle, float maxSampleDistance, float moveDistance, float RandomDeviation, Vector outPos) { return Invoke<bool>(nameof(FindPointDiagonalTowardsTarget), Origin, Target, dodgeAngle, maxSampleDistance, moveDistance, RandomDeviation, outPos); }
        public Vector FindPathfinderPointBelow(Vector Pos, float HeightOffset) { return Invoke<Vector>(nameof(FindPathfinderPointBelow), Pos, HeightOffset); }
        public Vector FindPathfinderPointAbove(Vector Pos, float HeightOffset) { return Invoke<Vector>(nameof(FindPathfinderPointAbove), Pos, HeightOffset); }
        public Vector FindPathfinderOffsetPoint(Vector Pos, EOffsetFrom offsetFrom, float HeightOffset) { return Invoke<Vector>(nameof(FindPathfinderOffsetPoint), Pos, offsetFrom, HeightOffset); }
        public Vector FindNearestPathfinderPointOverrideType(Vector Pos, DeepPathFinderType overrideType, float MaxDistance) { return Invoke<Vector>(nameof(FindNearestPathfinderPointOverrideType), Pos, overrideType, MaxDistance); }
        public void FindNearestPathfinderPoint_Async(Vector Pos, float MaxDistance, bool success, Vector outPos, LatentActionInfo LatentInfo) { Invoke(nameof(FindNearestPathfinderPoint_Async), Pos, MaxDistance, success, outPos, LatentInfo); }
        public Vector FindNearestPathfinderPoint(Vector Pos, float MaxDistance) { return Invoke<Vector>(nameof(FindNearestPathfinderPoint), Pos, MaxDistance); }
        public Vector FindNearestConnectedPathfinderPoint(Vector Pos, float MaxDistance) { return Invoke<Vector>(nameof(FindNearestConnectedPathfinderPoint), Pos, MaxDistance); }
        public Quat CalcPathfinderOrientation(Vector Pos, Vector forwardDir) { return Invoke<Quat>(nameof(CalcPathfinderOrientation), Pos, forwardDir); }
        public bool BackOffFrom(Vector dangerPos, float Distance) { return Invoke<bool>(nameof(BackOffFrom), dangerPos, Distance); }
        public void AddFakeMoverImpulse(Vector Impulse) { Invoke(nameof(AddFakeMoverImpulse), Impulse); }
    }
    public class DeepScanHiddenCrystal : Actor
    {
        public DeepScanHiddenCrystal(nint addr) : base(addr) { }
        public int CrystalIndex { get { return this[nameof(CrystalIndex)].GetValue<int>(); } set { this[nameof(CrystalIndex)].SetValue<int>(value); } }
        public bool HasEquipmentBeenCalled { get { return this[nameof(HasEquipmentBeenCalled)].Flag; } set { this[nameof(HasEquipmentBeenCalled)].Flag = value; } }
        public void SetEquipmentCalled() { Invoke(nameof(SetEquipmentCalled)); }
    }
    public class DeepScanObjectiveBase : Objective
    {
        public DeepScanObjectiveBase(nint addr) : base(addr) { }
        public GemResourceData HiddenItemResource { get { return this[nameof(HiddenItemResource)].As<GemResourceData>(); } set { this["HiddenItemResource"] = value; } }
        public UArray<DeepScanHiddenCrystal> HiddenItemInstances { get { return new UArray<DeepScanHiddenCrystal>(this[nameof(HiddenItemInstances)].Address); } }
        public DeepScanPlayerComponent UIComponent { get { return this[nameof(UIComponent)].As<DeepScanPlayerComponent>(); } set { this["UIComponent"] = value; } }
        public Object PlayerComponentClass { get { return this[nameof(PlayerComponentClass)]; } set { this[nameof(PlayerComponentClass)] = value; } }
        public void OnPlayerRegistered(PlayerCharacter Player) { Invoke(nameof(OnPlayerRegistered), Player); }
    }
    public class DeepScanObjective : DeepScanObjectiveBase
    {
        public DeepScanObjective(nint addr) : base(addr) { }
        public Object OnObjectiveStateChanged { get { return this[nameof(OnObjectiveStateChanged)]; } set { this[nameof(OnObjectiveStateChanged)] = value; } }
        public DialogDataAsset FirstScanDoneShout { get { return this[nameof(FirstScanDoneShout)].As<DialogDataAsset>(); } set { this["FirstScanDoneShout"] = value; } }
        public DialogDataAsset SecondToLastScanDoneShout { get { return this[nameof(SecondToLastScanDoneShout)].As<DialogDataAsset>(); } set { this["SecondToLastScanDoneShout"] = value; } }
        public DialogDataAsset GenericScanDoneShout { get { return this[nameof(GenericScanDoneShout)].As<DialogDataAsset>(); } set { this["GenericScanDoneShout"] = value; } }
        public DialogDataAsset AllScansDoneShout { get { return this[nameof(AllScansDoneShout)].As<DialogDataAsset>(); } set { this["AllScansDoneShout"] = value; } }
        public DialogDataAsset AllScansDoneShoutMissingSecondaries { get { return this[nameof(AllScansDoneShoutMissingSecondaries)].As<DialogDataAsset>(); } set { this["AllScansDoneShoutMissingSecondaries"] = value; } }
        public int HiddenItems { get { return this[nameof(HiddenItems)].GetValue<int>(); } set { this[nameof(HiddenItems)].SetValue<int>(value); } }
        public int ExtraHiddenItems { get { return this[nameof(ExtraHiddenItems)].GetValue<int>(); } set { this[nameof(ExtraHiddenItems)].SetValue<int>(value); } }
        public int HiddenItemsFound { get { return this[nameof(HiddenItemsFound)].GetValue<int>(); } set { this[nameof(HiddenItemsFound)].SetValue<int>(value); } }
        public int ResourceRoomIndex { get { return this[nameof(ResourceRoomIndex)].GetValue<int>(); } set { this[nameof(ResourceRoomIndex)].SetValue<int>(value); } }
        public RandInterval ResourceVeinAmount { get { return this[nameof(ResourceVeinAmount)].As<RandInterval>(); } set { this["ResourceVeinAmount"] = value; } }
        public int CollecResourcsVeinCount { get { return this[nameof(CollecResourcsVeinCount)].GetValue<int>(); } set { this[nameof(CollecResourcsVeinCount)].SetValue<int>(value); } }
        public DebrisPositioning CollectResourcePositioning { get { return this[nameof(CollectResourcePositioning)].As<DebrisPositioning>(); } set { this["CollectResourcePositioning"] = value; } }
        public ResourceData CollectedResource { get { return this[nameof(CollectedResource)].As<ResourceData>(); } set { this["CollectedResource"] = value; } }
        public int CollectResourceTarget { get { return this[nameof(CollectResourceTarget)].GetValue<int>(); } set { this[nameof(CollectResourceTarget)].SetValue<int>(value); } }
        public int CollectResourceCurrent { get { return this[nameof(CollectResourceCurrent)].GetValue<int>(); } set { this[nameof(CollectResourceCurrent)].SetValue<int>(value); } }
        public EDeepScanState State { get { return (EDeepScanState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public Object GemRoomDBA { get { return this[nameof(GemRoomDBA)]; } set { this[nameof(GemRoomDBA)] = value; } }
        public Vector GeodeLocation { get { return this[nameof(GeodeLocation)].As<Vector>(); } set { this["GeodeLocation"] = value; } }
        public void OnResourceChanged(CappedResource CappedResource, float amount) { Invoke(nameof(OnResourceChanged), CappedResource, amount); }
        public void OnRep_State(EDeepScanState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnRep_ItemsCollected(int prevAmount) { Invoke(nameof(OnRep_ItemsCollected), prevAmount); }
        public void OnRep_CollectResourceCurrent(int prevAmount) { Invoke(nameof(OnRep_CollectResourceCurrent), prevAmount); }
        public void OnCrystalScanned() { Invoke(nameof(OnCrystalScanned)); }
        public void CreateUndergroundCave() { Invoke(nameof(CreateUndergroundCave)); }
        public void ChangeState(EDeepScanState NewState) { Invoke(nameof(ChangeState), NewState); }
    }
    public class DeepScanSecondaryObjective : DeepScanObjectiveBase
    {
        public DeepScanSecondaryObjective(nint addr) : base(addr) { }
        public int HiddenItems { get { return this[nameof(HiddenItems)].GetValue<int>(); } set { this[nameof(HiddenItems)].SetValue<int>(value); } }
        public int ExtraHiddenItems { get { return this[nameof(ExtraHiddenItems)].GetValue<int>(); } set { this[nameof(ExtraHiddenItems)].SetValue<int>(value); } }
        public int HiddenItemsFound { get { return this[nameof(HiddenItemsFound)].GetValue<int>(); } set { this[nameof(HiddenItemsFound)].SetValue<int>(value); } }
        public void OnRep_ItemsCollected(int prevAmount) { Invoke(nameof(OnRep_ItemsCollected), prevAmount); }
        public void OnCrystalScanned() { Invoke(nameof(OnCrystalScanned)); }
    }
    public class DeepScanPlayerComponent : ActorComponent
    {
        public DeepScanPlayerComponent(nint addr) : base(addr) { }
        public void HideUI() { Invoke(nameof(HideUI)); }
    }
    public class DefenseEvent : GameEvent
    {
        public DefenseEvent(nint addr) : base(addr) { }
        public float DefendDuration { get { return this[nameof(DefendDuration)].GetValue<float>(); } set { this[nameof(DefendDuration)].SetValue<float>(value); } }
        public Object DefendWidget { get { return this[nameof(DefendWidget)]; } set { this[nameof(DefendWidget)] = value; } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
        public void OnRep_Progress(float OldValue) { Invoke(nameof(OnRep_Progress), OldValue); }
    }
    public class DefensePointActor : Actor
    {
        public DefensePointActor(nint addr) : base(addr) { }
        public Object DefenseEvent { get { return this[nameof(DefenseEvent)]; } set { this[nameof(DefenseEvent)] = value; } }
        public GameEvent ActiveDefenceEvent { get { return this[nameof(ActiveDefenceEvent)].As<GameEvent>(); } set { this["ActiveDefenceEvent"] = value; } }
        public EDefendPointState DefendState { get { return (EDefendPointState)this[nameof(DefendState)].GetValue<int>(); } set { this[nameof(DefendState)].SetValue<int>((int)value); } }
        public SingleUsableComponent DefendPointUsable { get { return this[nameof(DefendPointUsable)].As<SingleUsableComponent>(); } set { this["DefendPointUsable"] = value; } }
        public void SetState(EDefendPointState State) { Invoke(nameof(SetState), State); }
        public void OnRep_DefendState() { Invoke(nameof(OnRep_DefendState)); }
        public void OnDefensePointActivated(PlayerCharacter Player, EInputKeys Key) { Invoke(nameof(OnDefensePointActivated), Player, Key); }
        public void DefenseStart() { Invoke(nameof(DefenseStart)); }
        public void DefenseFail() { Invoke(nameof(DefenseFail)); }
        public void DefenseComplete() { Invoke(nameof(DefenseComplete)); }
    }
    public class DefenseObjective : Objective
    {
        public DefenseObjective(nint addr) : base(addr) { }
        public int DefensePoints { get { return this[nameof(DefensePoints)].GetValue<int>(); } set { this[nameof(DefensePoints)].SetValue<int>(value); } }
        public int PointsDefended { get { return this[nameof(PointsDefended)].GetValue<int>(); } set { this[nameof(PointsDefended)].SetValue<int>(value); } }
        public UArray<Object> ObjectiveDefenseClasses { get { return new UArray<Object>(this[nameof(ObjectiveDefenseClasses)].Address); } }
        public UArray<DefensePointActor> ActiveObjectiveDefenseActors { get { return new UArray<DefensePointActor>(this[nameof(ActiveObjectiveDefenseActors)].Address); } }
        public DebrisPositioning DebrisPositioning { get { return this[nameof(DebrisPositioning)].As<DebrisPositioning>(); } set { this["DebrisPositioning"] = value; } }
        public void PointDefended() { Invoke(nameof(PointDefended)); }
        public void OnRep_PointsRepaired() { Invoke(nameof(OnRep_PointsRepaired)); }
        public void OnDefensePointsSpawned() { Invoke(nameof(OnDefensePointsSpawned)); }
    }
    public class DestinationActorComponent : ActorComponent
    {
        public DestinationActorComponent(nint addr) : base(addr) { }
        public Object DestinationActor { get { return this[nameof(DestinationActor)]; } set { this[nameof(DestinationActor)] = value; } }
        public float GetDistToDestinationActor() { return Invoke<float>(nameof(GetDistToDestinationActor)); }
    }
    public class DetailedTag : SavableDataAsset
    {
        public DetailedTag(nint addr) : base(addr) { }
        public Object TagName { get { return this[nameof(TagName)]; } set { this[nameof(TagName)] = value; } }
        public Texture2D TagIcon { get { return this[nameof(TagIcon)].As<Texture2D>(); } set { this["TagIcon"] = value; } }
        public LinearColor TagColor { get { return this[nameof(TagColor)].As<LinearColor>(); } set { this["TagColor"] = value; } }
        public int SortingPriority { get { return this[nameof(SortingPriority)].GetValue<int>(); } set { this[nameof(SortingPriority)].SetValue<int>(value); } }
        public Object GetTagName() { return Invoke<Object>(nameof(GetTagName)); }
        public Texture2D GetTagIcon() { return Invoke<Texture2D>(nameof(GetTagIcon)); }
        public LinearColor GetTagColor() { return Invoke<LinearColor>(nameof(GetTagColor)); }
        public DetailedTagCategory GetTagCategory() { return Invoke<DetailedTagCategory>(nameof(GetTagCategory)); }
    }
    public class DetailedTagCategory : SavableDataAsset
    {
        public DetailedTagCategory(nint addr) : base(addr) { }
        public Object CategoryName { get { return this[nameof(CategoryName)]; } set { this[nameof(CategoryName)] = value; } }
        public Texture2D CategoryIcon { get { return this[nameof(CategoryIcon)].As<Texture2D>(); } set { this["CategoryIcon"] = value; } }
        public LinearColor CategoryColor { get { return this[nameof(CategoryColor)].As<LinearColor>(); } set { this["CategoryColor"] = value; } }
        public Object GetCategoryName() { return Invoke<Object>(nameof(GetCategoryName)); }
        public Texture2D GetCategoryIcon() { return Invoke<Texture2D>(nameof(GetCategoryIcon)); }
        public LinearColor GetCategoryColor() { return Invoke<LinearColor>(nameof(GetCategoryColor)); }
    }
    public class DetailedTagLibrary : BlueprintFunctionLibrary
    {
        public DetailedTagLibrary(nint addr) : base(addr) { }
        public bool TagsMatch(Object SearchExpr, DetailedTagSet Tags) { return Invoke<bool>(nameof(TagsMatch), SearchExpr, Tags); }
        public Object TagSetToText(DetailedTagSet InSet) { return Invoke<Object>(nameof(TagSetToText), InSet); }
        public bool TagQueryMatches(DetailedTagQuery InQuery, DetailedTagSet InTags) { return Invoke<bool>(nameof(TagQueryMatches), InQuery, InTags); }
        public DetailedTagQuery MakeTagQueryFromArray(UArray<DetailedTag> InTags) { return Invoke<DetailedTagQuery>(nameof(MakeTagQueryFromArray), InTags); }
        public DetailedTagQuery MakeTagQuery(DetailedTagSet InTags) { return Invoke<DetailedTagQuery>(nameof(MakeTagQuery), InTags); }
        public DetailedTagSet MakeDetailedTagSet(UArray<DetailedTag> InTags) { return Invoke<DetailedTagSet>(nameof(MakeDetailedTagSet), InTags); }
        public bool IsSetEmpty(DetailedTagSet InSet) { return Invoke<bool>(nameof(IsSetEmpty), InSet); }
        public Object GetCategoryMap(DetailedTagSet InSet) { return Invoke<Object>(nameof(GetCategoryMap), InSet); }
        public UArray<DetailedTag> GetArraySorted(DetailedTagSet InSet, bool InSortByCategory) { return Invoke<UArray<DetailedTag>>(nameof(GetArraySorted), InSet, InSortByCategory); }
        public UArray<DetailedTag> GetArray(DetailedTagSet InSet) { return Invoke<UArray<DetailedTag>>(nameof(GetArray), InSet); }
        public bool Contains(DetailedTagSet InSet, DetailedTag InTag) { return Invoke<bool>(nameof(Contains), InSet, InTag); }
        public void AppendSet(DetailedTagSet InSet1, DetailedTagSet InSet2) { Invoke(nameof(AppendSet), InSet1, InSet2); }
        public void AppendArray(DetailedTagSet InSet, UArray<DetailedTag> inArray) { Invoke(nameof(AppendArray), InSet, inArray); }
    }
    public class DetPack : Actor
    {
        public DetPack(nint addr) : base(addr) { }
        public float UpgradedStaggerChance { get { return this[nameof(UpgradedStaggerChance)].GetValue<float>(); } set { this[nameof(UpgradedStaggerChance)].SetValue<float>(value); } }
        public float UpgradedStaggerDuration { get { return this[nameof(UpgradedStaggerDuration)].GetValue<float>(); } set { this[nameof(UpgradedStaggerDuration)].SetValue<float>(value); } }
        public float UpgradedFearFactor { get { return this[nameof(UpgradedFearFactor)].GetValue<float>(); } set { this[nameof(UpgradedFearFactor)].SetValue<float>(value); } }
        public float VisualDamageRadius { get { return this[nameof(VisualDamageRadius)].GetValue<float>(); } set { this[nameof(VisualDamageRadius)].SetValue<float>(value); } }
        public float IncreasedFearRadius { get { return this[nameof(IncreasedFearRadius)].GetValue<float>(); } set { this[nameof(IncreasedFearRadius)].SetValue<float>(value); } }
        public float IncreasedStaggerRadius { get { return this[nameof(IncreasedStaggerRadius)].GetValue<float>(); } set { this[nameof(IncreasedStaggerRadius)].SetValue<float>(value); } }
        public ProjectileMovementComponent Movement { get { return this[nameof(Movement)].As<ProjectileMovementComponent>(); } set { this["Movement"] = value; } }
        public ExplosionComponent Explosion { get { return this[nameof(Explosion)].As<ExplosionComponent>(); } set { this["Explosion"] = value; } }
        public SingleUsableComponent UseComp { get { return this[nameof(UseComp)].As<SingleUsableComponent>(); } set { this["UseComp"] = value; } }
        public SimpleHealthComponent SimpleHealth { get { return this[nameof(SimpleHealth)].As<SimpleHealthComponent>(); } set { this["SimpleHealth"] = value; } }
        public DetPackItem Detonator { get { return this[nameof(Detonator)].As<DetPackItem>(); } set { this["Detonator"] = value; } }
        public bool HasExploded { get { return this[nameof(HasExploded)].Flag; } set { this[nameof(HasExploded)].Flag = value; } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public bool ExplodesOnDeath { get { return this[nameof(ExplodesOnDeath)].Flag; } set { this[nameof(ExplodesOnDeath)].Flag = value; } }
        public bool HasExtraStaggerRadius { get { return this[nameof(HasExtraStaggerRadius)].Flag; } set { this[nameof(HasExtraStaggerRadius)].Flag = value; } }
        public bool HasExtraFearRadius { get { return this[nameof(HasExtraFearRadius)].Flag; } set { this[nameof(HasExtraFearRadius)].Flag = value; } }
        public void UseFearStaggerUpgrades() { Invoke(nameof(UseFearStaggerUpgrades)); }
        public void RecieveHitObject() { Invoke(nameof(RecieveHitObject)); }
        public void OnRep_IsMoving() { Invoke(nameof(OnRep_IsMoving)); }
        public void OnRep_HasExploded() { Invoke(nameof(OnRep_HasExploded)); }
        public void OnExploded() { Invoke(nameof(OnExploded)); }
        public void OnDetPackPickedUp(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnDetPackPickedUp), User, Key); }
        public void OnDetPackDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnDetPackDeath), HealthComponent); }
    }
    public class DetPackItem : AnimatedItem
    {
        public DetPackItem(nint addr) : base(addr) { }
        public Object DetPackClass { get { return this[nameof(DetPackClass)]; } set { this[nameof(DetPackClass)] = value; } }
        public Object LoadoutProxy { get { return this[nameof(LoadoutProxy)]; } set { this[nameof(LoadoutProxy)] = value; } }
        public AnimMontage FPThrowMontage { get { return this[nameof(FPThrowMontage)].As<AnimMontage>(); } set { this["FPThrowMontage"] = value; } }
        public AnimMontage TPThrowMontage { get { return this[nameof(TPThrowMontage)].As<AnimMontage>(); } set { this["TPThrowMontage"] = value; } }
        public AnimMontage FP_DetonateAnim { get { return this[nameof(FP_DetonateAnim)].As<AnimMontage>(); } set { this["FP_DetonateAnim"] = value; } }
        public AnimMontage WPN_DetonateAnim { get { return this[nameof(WPN_DetonateAnim)].As<AnimMontage>(); } set { this["WPN_DetonateAnim"] = value; } }
        public AnimMontage FP_EquipDetonatorAnimation { get { return this[nameof(FP_EquipDetonatorAnimation)].As<AnimMontage>(); } set { this["FP_EquipDetonatorAnimation"] = value; } }
        public AnimMontage WPN_EquipDetonatorAnimation { get { return this[nameof(WPN_EquipDetonatorAnimation)].As<AnimMontage>(); } set { this["WPN_EquipDetonatorAnimation"] = value; } }
        public SkeletalMeshComponent DetonatorFPMesh { get { return this[nameof(DetonatorFPMesh)].As<SkeletalMeshComponent>(); } set { this["DetonatorFPMesh"] = value; } }
        public SkeletalMeshComponent DetonatorTPMesh { get { return this[nameof(DetonatorTPMesh)].As<SkeletalMeshComponent>(); } set { this["DetonatorTPMesh"] = value; } }
        public ForceFeedbackEffect DetonatorTriggerForceFeedback { get { return this[nameof(DetonatorTriggerForceFeedback)].As<ForceFeedbackEffect>(); } set { this["DetonatorTriggerForceFeedback"] = value; } }
        public CapacityHoldingItemAggregator Capacity { get { return this[nameof(Capacity)].As<CapacityHoldingItemAggregator>(); } set { this["Capacity"] = value; } }
        public float SupplyStatusWeight { get { return this[nameof(SupplyStatusWeight)].GetValue<float>(); } set { this[nameof(SupplyStatusWeight)].SetValue<float>(value); } }
        public float ThrowVelocity { get { return this[nameof(ThrowVelocity)].GetValue<float>(); } set { this[nameof(ThrowVelocity)].SetValue<float>(value); } }
        public float EnheiritOwnerVelocityScale { get { return this[nameof(EnheiritOwnerVelocityScale)].GetValue<float>(); } set { this[nameof(EnheiritOwnerVelocityScale)].SetValue<float>(value); } }
        public float ThrowAngle { get { return this[nameof(ThrowAngle)].GetValue<float>(); } set { this[nameof(ThrowAngle)].SetValue<float>(value); } }
        public float CooldownAfterThrow { get { return this[nameof(CooldownAfterThrow)].GetValue<float>(); } set { this[nameof(CooldownAfterThrow)].SetValue<float>(value); } }
        public float CooldownAfterDetonation { get { return this[nameof(CooldownAfterDetonation)].GetValue<float>(); } set { this[nameof(CooldownAfterDetonation)].SetValue<float>(value); } }
        public float ThrowDelay { get { return this[nameof(ThrowDelay)].GetValue<float>(); } set { this[nameof(ThrowDelay)].SetValue<float>(value); } }
        public float ThrowZOffset { get { return this[nameof(ThrowZOffset)].GetValue<float>(); } set { this[nameof(ThrowZOffset)].SetValue<float>(value); } }
        public DialogDataAsset ShoutDetPackPlaced { get { return this[nameof(ShoutDetPackPlaced)].As<DialogDataAsset>(); } set { this["ShoutDetPackPlaced"] = value; } }
        public DialogDataAsset ShoutOutOfAmmo { get { return this[nameof(ShoutOutOfAmmo)].As<DialogDataAsset>(); } set { this["ShoutOutOfAmmo"] = value; } }
        public float CooldownLeft { get { return this[nameof(CooldownLeft)].GetValue<float>(); } set { this[nameof(CooldownLeft)].SetValue<float>(value); } }
        public UArray<DetPack> ThrownPacks { get { return new UArray<DetPack>(this[nameof(ThrownPacks)].Address); } }
        public UArray<ItemUpgrade> DetPackUpgrades { get { return new UArray<ItemUpgrade>(this[nameof(DetPackUpgrades)].Address); } }
        public bool IsDetonatorOut { get { return this[nameof(IsDetonatorOut)].Flag; } set { this[nameof(IsDetonatorOut)].Flag = value; } }
        public bool HasThrownPack { get { return this[nameof(HasThrownPack)].Flag; } set { this[nameof(HasThrownPack)].Flag = value; } }
        public void Simulate_ThrowGrenade() { Invoke(nameof(Simulate_ThrowGrenade)); }
        public void Server_ThrowGrenade() { Invoke(nameof(Server_ThrowGrenade)); }
        public void Server_Detonate() { Invoke(nameof(Server_Detonate)); }
        public void Server_CycleItem() { Invoke(nameof(Server_CycleItem)); }
        public void Receive_OnRep_IsDetonatorOut() { Invoke(nameof(Receive_OnRep_IsDetonatorOut)); }
        public void OnRep_IsDetonatorOut() { Invoke(nameof(OnRep_IsDetonatorOut)); }
        public void OnDetonatingFinished() { Invoke(nameof(OnDetonatingFinished)); }
        public int GetCurrentGrenades() { return Invoke<int>(nameof(GetCurrentGrenades)); }
    }
    public class DialogDataAsset : DataAsset
    {
        public DialogDataAsset(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public bool AudioOnly { get { return this[nameof(AudioOnly)].Flag; } set { this[nameof(AudioOnly)].Flag = value; } }
        public bool SelectUsingWeight { get { return this[nameof(SelectUsingWeight)].Flag; } set { this[nameof(SelectUsingWeight)].Flag = value; } }
        public float ShoutDelay { get { return this[nameof(ShoutDelay)].GetValue<float>(); } set { this[nameof(ShoutDelay)].SetValue<float>(value); } }
        public float ShoutCoolDown { get { return this[nameof(ShoutCoolDown)].GetValue<float>(); } set { this[nameof(ShoutCoolDown)].SetValue<float>(value); } }
        public float ShoutChance { get { return this[nameof(ShoutChance)].GetValue<float>(); } set { this[nameof(ShoutChance)].SetValue<float>(value); } }
        public UArray<DialogStruct> Entries { get { return new UArray<DialogStruct>(this[nameof(Entries)].Address); } }
        public UArray<SoundSubmixBase> SubmixSends { get { return new UArray<SoundSubmixBase>(this[nameof(SubmixSends)].Address); } }
        public UArray<int> Playlist { get { return new UArray<int>(this[nameof(Playlist)].Address); } }
        public int SelectIndex(Object WorldContext) { return Invoke<int>(nameof(SelectIndex), WorldContext); }
        public bool SelectEntry(Object WorldContext, DialogStruct Dialog) { return Invoke<bool>(nameof(SelectEntry), WorldContext, Dialog); }
        public DialogStruct GetShout(int Index) { return Invoke<DialogStruct>(nameof(GetShout), Index); }
    }
    public class DifficultyManager : ActorComponent
    {
        public DifficultyManager(nint addr) : base(addr) { }
        public DifficultySetting CurrentVeteranCompositionSource { get { return this[nameof(CurrentVeteranCompositionSource)].As<DifficultySetting>(); } set { this["CurrentVeteranCompositionSource"] = value; } }
        public float MinModifierEnemyCount { get { return this[nameof(MinModifierEnemyCount)].GetValue<float>(); } set { this[nameof(MinModifierEnemyCount)].SetValue<float>(value); } }
        public float MinModifierAttackCooldown { get { return this[nameof(MinModifierAttackCooldown)].GetValue<float>(); } set { this[nameof(MinModifierAttackCooldown)].SetValue<float>(value); } }
        public float MinModifierSpeed { get { return this[nameof(MinModifierSpeed)].GetValue<float>(); } set { this[nameof(MinModifierSpeed)].SetValue<float>(value); } }
        public int ForcedPlayerCount { get { return this[nameof(ForcedPlayerCount)].GetValue<int>(); } set { this[nameof(ForcedPlayerCount)].SetValue<int>(value); } }
        public FSDGameMode GameMode { get { return this[nameof(GameMode)].As<FSDGameMode>(); } set { this["GameMode"] = value; } }
        public FSDGameState GameState { get { return this[nameof(GameState)].As<FSDGameState>(); } set { this["GameState"] = value; } }
        public GameDifficulty SelectGameDifficulty(int Index, UArray<DifficultyMutatorItem> Mutators) { return Invoke<GameDifficulty>(nameof(SelectGameDifficulty), Index, Mutators); }
        public DifficultySetting SelectDifficulty(int Index) { return Invoke<DifficultySetting>(nameof(SelectDifficulty), Index); }
        public float GetSpeedModifier() { return Invoke<float>(nameof(GetSpeedModifier)); }
        public float GetSmallEnemyDamageResistance() { return Invoke<float>(nameof(GetSmallEnemyDamageResistance)); }
        public float GetPointExtractionScaler() { return Invoke<float>(nameof(GetPointExtractionScaler)); }
        public float GetExtraLargeEnemyDamageResistanceD() { return Invoke<float>(nameof(GetExtraLargeEnemyDamageResistanceD)); }
        public float GetExtraLargeEnemyDamageResistanceC() { return Invoke<float>(nameof(GetExtraLargeEnemyDamageResistanceC)); }
        public float GetExtraLargeEnemyDamageResistanceB() { return Invoke<float>(nameof(GetExtraLargeEnemyDamageResistanceB)); }
        public float GetExtraLargeEnemyDamageResistance() { return Invoke<float>(nameof(GetExtraLargeEnemyDamageResistance)); }
        public float GetEnemyDamageResistance() { return Invoke<float>(nameof(GetEnemyDamageResistance)); }
        public float GetEnemyDamageModifier() { return Invoke<float>(nameof(GetEnemyDamageModifier)); }
        public float GetEnemyCountModifier() { return Invoke<float>(nameof(GetEnemyCountModifier)); }
        public GameDifficulty GetCurrentGameDifficulty() { return Invoke<GameDifficulty>(nameof(GetCurrentGameDifficulty)); }
        public DifficultySetting GetCurrentDifficulty() { return Invoke<DifficultySetting>(nameof(GetCurrentDifficulty)); }
        public float GetBossDifficultyScaler() { return Invoke<float>(nameof(GetBossDifficultyScaler)); }
    }
    public class DifficultySetting : SavableDataAsset
    {
        public DifficultySetting(nint addr) : base(addr) { }
        public Object DifficultyName { get { return this[nameof(DifficultyName)]; } set { this[nameof(DifficultyName)] = value; } }
        public Object ShortDifficultyName { get { return this[nameof(ShortDifficultyName)]; } set { this[nameof(ShortDifficultyName)] = value; } }
        public Object UnlockRequirementDescription { get { return this[nameof(UnlockRequirementDescription)]; } set { this[nameof(UnlockRequirementDescription)] = value; } }
        public Object CampaignRequirement { get { return this[nameof(CampaignRequirement)]; } set { this[nameof(CampaignRequirement)] = value; } }
        public Object SelectedByDefaultCampaignRequirement { get { return this[nameof(SelectedByDefaultCampaignRequirement)]; } set { this[nameof(SelectedByDefaultCampaignRequirement)] = value; } }
        public float EnvironmentalDamageModifier { get { return this[nameof(EnvironmentalDamageModifier)].GetValue<float>(); } set { this[nameof(EnvironmentalDamageModifier)].SetValue<float>(value); } }
        public UArray<float> ExtraLargeEnemyDamageResistance { get { return new UArray<float>(this[nameof(ExtraLargeEnemyDamageResistance)].Address); } }
        public UArray<float> ExtraLargeEnemyDamageResistanceB { get { return new UArray<float>(this[nameof(ExtraLargeEnemyDamageResistanceB)].Address); } }
        public UArray<float> ExtraLargeEnemyDamageResistanceC { get { return new UArray<float>(this[nameof(ExtraLargeEnemyDamageResistanceC)].Address); } }
        public UArray<float> ExtraLargeEnemyDamageResistanceD { get { return new UArray<float>(this[nameof(ExtraLargeEnemyDamageResistanceD)].Address); } }
        public UArray<float> EnemyDamageResistance { get { return new UArray<float>(this[nameof(EnemyDamageResistance)].Address); } }
        public UArray<float> SmallEnemyDamageResistance { get { return new UArray<float>(this[nameof(SmallEnemyDamageResistance)].Address); } }
        public UArray<float> EnemyDamageModifier { get { return new UArray<float>(this[nameof(EnemyDamageModifier)].Address); } }
        public float EnemyToEnemyDamageModifier { get { return this[nameof(EnemyToEnemyDamageModifier)].GetValue<float>(); } set { this[nameof(EnemyToEnemyDamageModifier)].SetValue<float>(value); } }
        public bool SupportsHazardPlus { get { return this[nameof(SupportsHazardPlus)].Flag; } set { this[nameof(SupportsHazardPlus)].Flag = value; } }
        public UArray<float> EnemyCountModifier { get { return new UArray<float>(this[nameof(EnemyCountModifier)].Address); } }
        public float BossDifficultyScaler { get { return this[nameof(BossDifficultyScaler)].GetValue<float>(); } set { this[nameof(BossDifficultyScaler)].SetValue<float>(value); } }
        public float PointExtractionScaler { get { return this[nameof(PointExtractionScaler)].GetValue<float>(); } set { this[nameof(PointExtractionScaler)].SetValue<float>(value); } }
        public RandInterval EncounterDifficulty { get { return this[nameof(EncounterDifficulty)].As<RandInterval>(); } set { this["EncounterDifficulty"] = value; } }
        public RandInterval StationaryDifficulty { get { return this[nameof(StationaryDifficulty)].As<RandInterval>(); } set { this["StationaryDifficulty"] = value; } }
        public float SpecialEncounterModifier { get { return this[nameof(SpecialEncounterModifier)].GetValue<float>(); } set { this[nameof(SpecialEncounterModifier)].SetValue<float>(value); } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public RandInterval EnemyWaveInterval { get { return this[nameof(EnemyWaveInterval)].As<RandInterval>(); } set { this["EnemyWaveInterval"] = value; } }
        public RandInterval EnemyNormalWaveInterval { get { return this[nameof(EnemyNormalWaveInterval)].As<RandInterval>(); } set { this["EnemyNormalWaveInterval"] = value; } }
        public RandInterval EnemyNormalWaveDifficulty { get { return this[nameof(EnemyNormalWaveDifficulty)].As<RandInterval>(); } set { this["EnemyNormalWaveDifficulty"] = value; } }
        public float WaveStartDelayScale { get { return this[nameof(WaveStartDelayScale)].GetValue<float>(); } set { this[nameof(WaveStartDelayScale)].SetValue<float>(value); } }
        public RandInterval EnemyDiversity { get { return this[nameof(EnemyDiversity)].As<RandInterval>(); } set { this["EnemyDiversity"] = value; } }
        public RandInterval StationaryEnemyDiversity { get { return this[nameof(StationaryEnemyDiversity)].As<RandInterval>(); } set { this["StationaryEnemyDiversity"] = value; } }
        public IRandRange DisruptiveEnemyPoolCount { get { return this[nameof(DisruptiveEnemyPoolCount)].As<IRandRange>(); } set { this["DisruptiveEnemyPoolCount"] = value; } }
        public int MinPoolSize { get { return this[nameof(MinPoolSize)].GetValue<int>(); } set { this[nameof(MinPoolSize)].SetValue<int>(value); } }
        public VeteranComposition Veterans { get { return this[nameof(Veterans)].As<VeteranComposition>(); } set { this["Veterans"] = value; } }
        public float SpeedModifier { get { return this[nameof(SpeedModifier)].GetValue<float>(); } set { this[nameof(SpeedModifier)].SetValue<float>(value); } }
        public float AttackCooldownModifier { get { return this[nameof(AttackCooldownModifier)].GetValue<float>(); } set { this[nameof(AttackCooldownModifier)].SetValue<float>(value); } }
        public float ProjectileSpeedModifier { get { return this[nameof(ProjectileSpeedModifier)].GetValue<float>(); } set { this[nameof(ProjectileSpeedModifier)].SetValue<float>(value); } }
        public int DifficultyGroup { get { return this[nameof(DifficultyGroup)].GetValue<int>(); } set { this[nameof(DifficultyGroup)].SetValue<int>(value); } }
        public int DifficultyGroupIndex { get { return this[nameof(DifficultyGroupIndex)].GetValue<int>(); } set { this[nameof(DifficultyGroupIndex)].SetValue<int>(value); } }
        public UArray<MissionStat> MissionCompletedStats { get { return new UArray<MissionStat>(this[nameof(MissionCompletedStats)].Address); } }
        public float HeathRegenerationMax { get { return this[nameof(HeathRegenerationMax)].GetValue<float>(); } set { this[nameof(HeathRegenerationMax)].SetValue<float>(value); } }
        public float ReviveHealthRatio { get { return this[nameof(ReviveHealthRatio)].GetValue<float>(); } set { this[nameof(ReviveHealthRatio)].SetValue<float>(value); } }
        public float EliteChanceModifier { get { return this[nameof(EliteChanceModifier)].GetValue<float>(); } set { this[nameof(EliteChanceModifier)].SetValue<float>(value); } }
        public float EliteCooldown { get { return this[nameof(EliteCooldown)].GetValue<float>(); } set { this[nameof(EliteCooldown)].SetValue<float>(value); } }
        public int MaxActiveElites { get { return this[nameof(MaxActiveElites)].GetValue<int>(); } set { this[nameof(MaxActiveElites)].SetValue<int>(value); } }
        public bool IsUnlocked(Object WorldContext) { return Invoke<bool>(nameof(IsUnlocked), WorldContext); }
        public int GetDifficultyIndex() { return Invoke<int>(nameof(GetDifficultyIndex)); }
        public float AddHazardBonus(float BaseValue) { return Invoke<float>(nameof(AddHazardBonus), BaseValue); }
    }
    public class DifficultyMutatorSetupItem : SavableDataAsset
    {
        public DifficultyMutatorSetupItem(nint addr) : base(addr) { }
        public DifficultyMutatorInfo Info { get { return this[nameof(Info)].As<DifficultyMutatorInfo>(); } set { this["Info"] = value; } }
        public UArray<DifficultyMutator> Mutators { get { return new UArray<DifficultyMutator>(this[nameof(Mutators)].Address); } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public int GetNumberOfLevels() { return Invoke<int>(nameof(GetNumberOfLevels)); }
    }
    public class DiscordWrapper : Object
    {
        public DiscordWrapper(nint addr) : base(addr) { }
        public DiscordServerInviteData ServerInfo { get { return this[nameof(ServerInfo)].As<DiscordServerInviteData>(); } set { this["ServerInfo"] = value; } }
        public Object OnResponseSuccessChanged { get { return this[nameof(OnResponseSuccessChanged)]; } set { this[nameof(OnResponseSuccessChanged)] = value; } }
        public bool LastResponseSuccessful { get { return this[nameof(LastResponseSuccessful)].Flag; } set { this[nameof(LastResponseSuccessful)].Flag = value; } }
        public Object OnDiscordEoMDataEvent { get { return this[nameof(OnDiscordEoMDataEvent)]; } set { this[nameof(OnDiscordEoMDataEvent)] = value; } }
        public bool UserIn { get { return this[nameof(UserIn)].Flag; } set { this[nameof(UserIn)].Flag = value; } }
        public DiscordRewardNotification rewardNotification { get { return this[nameof(rewardNotification)].As<DiscordRewardNotification>(); } set { this["rewardNotification"] = value; } }
        public int UserInStatus { get { return this[nameof(UserInStatus)].GetValue<int>(); } set { this[nameof(UserInStatus)].SetValue<int>(value); } }
        public bool HasEoM { get { return this[nameof(HasEoM)].Flag; } set { this[nameof(HasEoM)].Flag = value; } }
        public DiscordEoMData EoMData { get { return this[nameof(EoMData)].As<DiscordEoMData>(); } set { this["EoMData"] = value; } }
        public bool IsConnected { get { return this[nameof(IsConnected)].Flag; } set { this[nameof(IsConnected)].Flag = value; } }
        public bool ServerInfoLoaded { get { return this[nameof(ServerInfoLoaded)].Flag; } set { this[nameof(ServerInfoLoaded)].Flag = value; } }
        public Object OnDiscordServerInfoLoaded { get { return this[nameof(OnDiscordServerInfoLoaded)]; } set { this[nameof(OnDiscordServerInfoLoaded)] = value; } }
        public Object OnDiscordServerCountLoaded { get { return this[nameof(OnDiscordServerCountLoaded)]; } set { this[nameof(OnDiscordServerCountLoaded)] = value; } }
        public Object OnDiscordUserInServer { get { return this[nameof(OnDiscordUserInServer)]; } set { this[nameof(OnDiscordUserInServer)] = value; } }
        public void RequestUserInServer() { Invoke(nameof(RequestUserInServer)); }
        public void RequestFactionAdjustment(int Faction, bool force) { Invoke(nameof(RequestFactionAdjustment), Faction, force); }
        public void RequestEoMData() { Invoke(nameof(RequestEoMData)); }
        public void RequestDiscordServerInfo() { Invoke(nameof(RequestDiscordServerInfo)); }
        public void RejectInviteSignature() { Invoke(nameof(RejectInviteSignature)); }
        public void IgnoreInviteSignature() { Invoke(nameof(IgnoreInviteSignature)); }
        public Object GetAvatarURL() { return Invoke<Object>(nameof(GetAvatarURL)); }
        public void AdjustFaction() { Invoke(nameof(AdjustFaction)); }
        public void AcceptInviteSignature() { Invoke(nameof(AcceptInviteSignature)); }
    }
    public class DisplayCaseAnimInstance : AnimInstance
    {
        public DisplayCaseAnimInstance(nint addr) : base(addr) { }
        public Object SoftReactMontage { get { return this[nameof(SoftReactMontage)]; } set { this[nameof(SoftReactMontage)] = value; } }
        public AnimMontage ReactMontage { get { return this[nameof(ReactMontage)].As<AnimMontage>(); } set { this["ReactMontage"] = value; } }
    }
    public class DisplayCase : Actor
    {
        public DisplayCase(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SceneComponent ContentAttachPoint { get { return this[nameof(ContentAttachPoint)].As<SceneComponent>(); } set { this["ContentAttachPoint"] = value; } }
        public SkeletalMeshComponent ContentMesh { get { return this[nameof(ContentMesh)].As<SkeletalMeshComponent>(); } set { this["ContentMesh"] = value; } }
        public Object OnContentUpdated { get { return this[nameof(OnContentUpdated)]; } set { this[nameof(OnContentUpdated)] = value; } }
        public RuntimeFloatCurve RelativeZOffset { get { return this[nameof(RelativeZOffset)].As<RuntimeFloatCurve>(); } set { this["RelativeZOffset"] = value; } }
        public RuntimeFloatCurve ReactZOffsetCof { get { return this[nameof(ReactZOffsetCof)].As<RuntimeFloatCurve>(); } set { this["ReactZOffsetCof"] = value; } }
        public RuntimeFloatCurve ReactTimeDilationCof { get { return this[nameof(ReactTimeDilationCof)].As<RuntimeFloatCurve>(); } set { this["ReactTimeDilationCof"] = value; } }
        public UArray<DisplayContent> Contents { get { return new UArray<DisplayContent>(this[nameof(Contents)].Address); } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public float BeerMugSpawnChancePercent { get { return this[nameof(BeerMugSpawnChancePercent)].GetValue<float>(); } set { this[nameof(BeerMugSpawnChancePercent)].SetValue<float>(value); } }
        public float BarrelSpawnChancePercent { get { return this[nameof(BarrelSpawnChancePercent)].GetValue<float>(); } set { this[nameof(BarrelSpawnChancePercent)].SetValue<float>(value); } }
        public float TimeMultiplier { get { return this[nameof(TimeMultiplier)].GetValue<float>(); } set { this[nameof(TimeMultiplier)].SetValue<float>(value); } }
        public float SizeMultiplier { get { return this[nameof(SizeMultiplier)].GetValue<float>(); } set { this[nameof(SizeMultiplier)].SetValue<float>(value); } }
        public int ContentIndex { get { return this[nameof(ContentIndex)].GetValue<int>(); } set { this[nameof(ContentIndex)].SetValue<int>(value); } }
        public DialogDataAsset BeerMugShout { get { return this[nameof(BeerMugShout)].As<DialogDataAsset>(); } set { this["BeerMugShout"] = value; } }
        public void RefreshContent() { Invoke(nameof(RefreshContent)); }
        public void PlayReactionAnimation() { Invoke(nameof(PlayReactionAnimation)); }
        public void OnRep_ContentIndex() { Invoke(nameof(OnRep_ContentIndex)); }
        public bool IsSpecialContent() { return Invoke<bool>(nameof(IsSpecialContent)); }
        public void InitializeCase() { Invoke(nameof(InitializeCase)); }
        public bool GetCurrentContent(DisplayContent currentContent) { return Invoke<bool>(nameof(GetCurrentContent), currentContent); }
        public void ChangeContent() { Invoke(nameof(ChangeContent)); }
    }
    public class DorrettaHead : CarriableItem
    {
        public DorrettaHead(nint addr) : base(addr) { }
        public CarriableInstantUsable Usable { get { return this[nameof(Usable)].As<CarriableInstantUsable>(); } set { this["Usable"] = value; } }
        public CarriableComponent CarriableComponent { get { return this[nameof(CarriableComponent)].As<CarriableComponent>(); } set { this["CarriableComponent"] = value; } }
    }
    public class DoubleDrillAggregator : CapacityBasedItemAggregator
    {
        public DoubleDrillAggregator(nint addr) : base(addr) { }
    }
    public class DualAnimatedItem : Item
    {
        public DualAnimatedItem(nint addr) : base(addr) { }
        public AnimInstance FPAnimInstance { get { return this[nameof(FPAnimInstance)].As<AnimInstance>(); } set { this["FPAnimInstance"] = value; } }
        public PlayerAnimInstance TPAnimInstance { get { return this[nameof(TPAnimInstance)].As<PlayerAnimInstance>(); } set { this["TPAnimInstance"] = value; } }
        public SkeletalMeshComponent FPRMesh { get { return this[nameof(FPRMesh)].As<SkeletalMeshComponent>(); } set { this["FPRMesh"] = value; } }
        public SkeletalMeshComponent FPLMesh { get { return this[nameof(FPLMesh)].As<SkeletalMeshComponent>(); } set { this["FPLMesh"] = value; } }
        public SkeletalMeshComponent TPRMesh { get { return this[nameof(TPRMesh)].As<SkeletalMeshComponent>(); } set { this["TPRMesh"] = value; } }
        public SkeletalMeshComponent TPLMesh { get { return this[nameof(TPLMesh)].As<SkeletalMeshComponent>(); } set { this["TPLMesh"] = value; } }
        public AnimMontage FP_EquipAnimation { get { return this[nameof(FP_EquipAnimation)].As<AnimMontage>(); } set { this["FP_EquipAnimation"] = value; } }
        public AnimMontage TP_EquipAnimation { get { return this[nameof(TP_EquipAnimation)].As<AnimMontage>(); } set { this["TP_EquipAnimation"] = value; } }
        public float EquipDuration { get { return this[nameof(EquipDuration)].GetValue<float>(); } set { this[nameof(EquipDuration)].SetValue<float>(value); } }
        public ItemCharacterAnimationSet CharacterAnimationSet { get { return this[nameof(CharacterAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["CharacterAnimationSet"] = value; } }
        public SkeletalMeshComponent GetRItemMesh() { return Invoke<SkeletalMeshComponent>(nameof(GetRItemMesh)); }
        public SkeletalMeshComponent GetLItemMesh() { return Invoke<SkeletalMeshComponent>(nameof(GetLItemMesh)); }
    }
    public class DoubleDrillItem : DualAnimatedItem
    {
        public DoubleDrillItem(nint addr) : base(addr) { }
        public FirstPersonParticleSystemComponent FP_Left_DrillParticles { get { return this[nameof(FP_Left_DrillParticles)].As<FirstPersonParticleSystemComponent>(); } set { this["FP_Left_DrillParticles"] = value; } }
        public FirstPersonParticleSystemComponent FP_Right_DrillParticles { get { return this[nameof(FP_Right_DrillParticles)].As<FirstPersonParticleSystemComponent>(); } set { this["FP_Right_DrillParticles"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public FSDAudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<FSDAudioComponent>(); } set { this["AudioComponent"] = value; } }
        public DoubleDrillAggregator Aggregator { get { return this[nameof(Aggregator)].As<DoubleDrillAggregator>(); } set { this["Aggregator"] = value; } }
        public AnimMontage FPMineMontage { get { return this[nameof(FPMineMontage)].As<AnimMontage>(); } set { this["FPMineMontage"] = value; } }
        public AnimMontage TPMineMontage { get { return this[nameof(TPMineMontage)].As<AnimMontage>(); } set { this["TPMineMontage"] = value; } }
        public AnimMontage FPOverheat { get { return this[nameof(FPOverheat)].As<AnimMontage>(); } set { this["FPOverheat"] = value; } }
        public AnimMontage TPOverheat { get { return this[nameof(TPOverheat)].As<AnimMontage>(); } set { this["TPOverheat"] = value; } }
        public AnimMontage FPGunsling { get { return this[nameof(FPGunsling)].As<AnimMontage>(); } set { this["FPGunsling"] = value; } }
        public AnimMontage TPGunsling { get { return this[nameof(TPGunsling)].As<AnimMontage>(); } set { this["TPGunsling"] = value; } }
        public Object MiningSpeedAudioParamterName { get { return this[nameof(MiningSpeedAudioParamterName)]; } set { this[nameof(MiningSpeedAudioParamterName)] = value; } }
        public ParticleSystem DrillParticles { get { return this[nameof(DrillParticles)].As<ParticleSystem>(); } set { this["DrillParticles"] = value; } }
        public ForceFeedbackEffect DrillRumble { get { return this[nameof(DrillRumble)].As<ForceFeedbackEffect>(); } set { this["DrillRumble"] = value; } }
        public float BlockParticlesScaleFP { get { return this[nameof(BlockParticlesScaleFP)].GetValue<float>(); } set { this[nameof(BlockParticlesScaleFP)].SetValue<float>(value); } }
        public float BlockParticlesScaleTP { get { return this[nameof(BlockParticlesScaleTP)].GetValue<float>(); } set { this[nameof(BlockParticlesScaleTP)].SetValue<float>(value); } }
        public EDoubleDrillState State { get { return (EDoubleDrillState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float MovementPenalty { get { return this[nameof(MovementPenalty)].GetValue<float>(); } set { this[nameof(MovementPenalty)].SetValue<float>(value); } }
        public float MiningRate { get { return this[nameof(MiningRate)].GetValue<float>(); } set { this[nameof(MiningRate)].SetValue<float>(value); } }
        public float HeatReductionPerKill { get { return this[nameof(HeatReductionPerKill)].GetValue<float>(); } set { this[nameof(HeatReductionPerKill)].SetValue<float>(value); } }
        public Vector CarveSize { get { return this[nameof(CarveSize)].As<Vector>(); } set { this["CarveSize"] = value; } }
        public float CarveNoise { get { return this[nameof(CarveNoise)].GetValue<float>(); } set { this[nameof(CarveNoise)].SetValue<float>(value); } }
        public float CarverRayCastLength { get { return this[nameof(CarverRayCastLength)].GetValue<float>(); } set { this[nameof(CarverRayCastLength)].SetValue<float>(value); } }
        public float CarveTerrainDistanceCheck { get { return this[nameof(CarveTerrainDistanceCheck)].GetValue<float>(); } set { this[nameof(CarveTerrainDistanceCheck)].SetValue<float>(value); } }
        public float TimeToNextMine { get { return this[nameof(TimeToNextMine)].GetValue<float>(); } set { this[nameof(TimeToNextMine)].SetValue<float>(value); } }
        public float CurrentDrillSpeed { get { return this[nameof(CurrentDrillSpeed)].GetValue<float>(); } set { this[nameof(CurrentDrillSpeed)].SetValue<float>(value); } }
        public float DamageDistance { get { return this[nameof(DamageDistance)].GetValue<float>(); } set { this[nameof(DamageDistance)].SetValue<float>(value); } }
        public float DamageRadius { get { return this[nameof(DamageRadius)].GetValue<float>(); } set { this[nameof(DamageRadius)].SetValue<float>(value); } }
        public float FriendlyDamageRadius { get { return this[nameof(FriendlyDamageRadius)].GetValue<float>(); } set { this[nameof(FriendlyDamageRadius)].SetValue<float>(value); } }
        public float DamageRate { get { return this[nameof(DamageRate)].GetValue<float>(); } set { this[nameof(DamageRate)].SetValue<float>(value); } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float armorDamageMultiplier { get { return this[nameof(armorDamageMultiplier)].GetValue<float>(); } set { this[nameof(armorDamageMultiplier)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public float MaxFuel { get { return this[nameof(MaxFuel)].GetValue<float>(); } set { this[nameof(MaxFuel)].SetValue<float>(value); } }
        public float Fuel { get { return this[nameof(Fuel)].GetValue<float>(); } set { this[nameof(Fuel)].SetValue<float>(value); } }
        public float FuelUsePerDig { get { return this[nameof(FuelUsePerDig)].GetValue<float>(); } set { this[nameof(FuelUsePerDig)].SetValue<float>(value); } }
        public float FuelUsePerMelee { get { return this[nameof(FuelUsePerMelee)].GetValue<float>(); } set { this[nameof(FuelUsePerMelee)].SetValue<float>(value); } }
        public float SupplyStatusWeight { get { return this[nameof(SupplyStatusWeight)].GetValue<float>(); } set { this[nameof(SupplyStatusWeight)].SetValue<float>(value); } }
        public DialogDataAsset ShoutOutOfFuel { get { return this[nameof(ShoutOutOfFuel)].As<DialogDataAsset>(); } set { this["ShoutOutOfFuel"] = value; } }
        public UArray<HitResult> HitCache { get { return new UArray<HitResult>(this[nameof(HitCache)].Address); } }
        public UArray<DoubleDrillDamageItem> DamageCache { get { return new UArray<DoubleDrillDamageItem>(this[nameof(DamageCache)].Address); } }
        public float DrillParticlesDuration { get { return this[nameof(DrillParticlesDuration)].GetValue<float>(); } set { this[nameof(DrillParticlesDuration)].SetValue<float>(value); } }
        public bool IsMining { get { return this[nameof(IsMining)].Flag; } set { this[nameof(IsMining)].Flag = value; } }
        public bool IsGunslinging { get { return this[nameof(IsGunslinging)].Flag; } set { this[nameof(IsGunslinging)].Flag = value; } }
        public void Server_StopMining() { Invoke(nameof(Server_StopMining)); }
        public void Server_StartMining() { Invoke(nameof(Server_StartMining)); }
        public void Server_DoDamage(UArray<DoubleDrillDamageItem> Targets) { Invoke(nameof(Server_DoDamage), Targets); }
        public void Server_DigBlock(Vector_NetQuantize Start, Vector_NetQuantize End) { Invoke(nameof(Server_DigBlock), Start, End); }
        public void OnTargetKilled(Actor Target, FSDPhysicalMaterial PhysMat, bool wasDirectHit) { Invoke(nameof(OnTargetKilled), Target, PhysMat, wasDirectHit); }
        public void OnStopDrilling() { Invoke(nameof(OnStopDrilling)); }
        public void OnStartDrilling() { Invoke(nameof(OnStartDrilling)); }
        public void OnRep_SimulatingMining() { Invoke(nameof(OnRep_SimulatingMining)); }
        public void OnRep_IsGunslinging() { Invoke(nameof(OnRep_IsGunslinging)); }
        public void OnDrillParticlesTimerElapsed() { Invoke(nameof(OnDrillParticlesTimerElapsed)); }
        public void Client_Resupply(float percentage) { Invoke(nameof(Client_Resupply), percentage); }
        public void BP_OnDrillDamage() { Invoke(nameof(BP_OnDrillDamage)); }
        public void All_SimulateDigDebris(Vector_NetQuantize Position, int DebrisIndex) { Invoke(nameof(All_SimulateDigDebris), Position, DebrisIndex); }
        public void All_SimulateDigBlock(Vector_NetQuantize Position, bool SpawnParticles, int Material) { Invoke(nameof(All_SimulateDigBlock), Position, SpawnParticles, Material); }
        public void All_SimulateDamage(UArray<DoubleDrillDamageItem> Targets) { Invoke(nameof(All_SimulateDamage), Targets); }
    }
    public class DoubleDrillAnimInstance : AnimInstance
    {
        public DoubleDrillAnimInstance(nint addr) : base(addr) { }
        public float DrillSpeed { get { return this[nameof(DrillSpeed)].GetValue<float>(); } set { this[nameof(DrillSpeed)].SetValue<float>(value); } }
        public bool IsMining { get { return this[nameof(IsMining)].Flag; } set { this[nameof(IsMining)].Flag = value; } }
        public bool IsGunslinging { get { return this[nameof(IsGunslinging)].Flag; } set { this[nameof(IsGunslinging)].Flag = value; } }
        public DoubleDrillItem Item { get { return this[nameof(Item)].As<DoubleDrillItem>(); } set { this["Item"] = value; } }
    }
    public class DownedStateComponent : CharacterStateComponent
    {
        public DownedStateComponent(nint addr) : base(addr) { }
        public DeathIntroSettings Intro { get { return this[nameof(Intro)].As<DeathIntroSettings>(); } set { this["Intro"] = value; } }
        public float DownedHealthLossPerSecond { get { return this[nameof(DownedHealthLossPerSecond)].GetValue<float>(); } set { this[nameof(DownedHealthLossPerSecond)].SetValue<float>(value); } }
        public float TerrainRemovedFallThreshold { get { return this[nameof(TerrainRemovedFallThreshold)].GetValue<float>(); } set { this[nameof(TerrainRemovedFallThreshold)].SetValue<float>(value); } }
        public bool DownedBombActive { get { return this[nameof(DownedBombActive)].Flag; } set { this[nameof(DownedBombActive)].Flag = value; } }
        public DamageComponent DownedBombDamage { get { return this[nameof(DownedBombDamage)].As<DamageComponent>(); } set { this["DownedBombDamage"] = value; } }
        public Object OnEnableDownedBombUIEvent { get { return this[nameof(OnEnableDownedBombUIEvent)]; } set { this[nameof(OnEnableDownedBombUIEvent)] = value; } }
        public void TriggerDownedBombDamage() { Invoke(nameof(TriggerDownedBombDamage)); }
        public void Server_TriggerDownedBomb() { Invoke(nameof(Server_TriggerDownedBomb)); }
        public void Receive_TriggerDownedBomb() { Invoke(nameof(Receive_TriggerDownedBomb)); }
        public DamageComponent CreateDownedBombDamage(Object DamageClass) { return Invoke<DamageComponent>(nameof(CreateDownedBombDamage), DamageClass); }
    }
    public class MoveDownedPlayerCapsule : CapsuleComponent
    {
        public MoveDownedPlayerCapsule(nint addr) : base(addr) { }
        public UArray<SceneComponent> TargetLocations { get { return new UArray<SceneComponent>(this[nameof(TargetLocations)].Address); } }
    }
    public class Drillevator : TaggedActor
    {
        public Drillevator(nint addr) : base(addr) { }
        public EDrillevatorState State { get { return (EDrillevatorState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public bool MovementEnabled { get { return this[nameof(MovementEnabled)].Flag; } set { this[nameof(MovementEnabled)].Flag = value; } }
        public float TargetDepth { get { return this[nameof(TargetDepth)].GetValue<float>(); } set { this[nameof(TargetDepth)].SetValue<float>(value); } }
        public float NotifyDistFromTargetDepth { get { return this[nameof(NotifyDistFromTargetDepth)].GetValue<float>(); } set { this[nameof(NotifyDistFromTargetDepth)].SetValue<float>(value); } }
        public float MovementSpeed { get { return this[nameof(MovementSpeed)].GetValue<float>(); } set { this[nameof(MovementSpeed)].SetValue<float>(value); } }
        public float ServerDepth { get { return this[nameof(ServerDepth)].GetValue<float>(); } set { this[nameof(ServerDepth)].SetValue<float>(value); } }
        public Object HeatMaterialSlot { get { return this[nameof(HeatMaterialSlot)]; } set { this[nameof(HeatMaterialSlot)] = value; } }
        public Object HeatParamName { get { return this[nameof(HeatParamName)]; } set { this[nameof(HeatParamName)] = value; } }
        public float CenterEngineHeatWeight { get { return this[nameof(CenterEngineHeatWeight)].GetValue<float>(); } set { this[nameof(CenterEngineHeatWeight)].SetValue<float>(value); } }
        public float CenterEngineMaxHeat { get { return this[nameof(CenterEngineMaxHeat)].GetValue<float>(); } set { this[nameof(CenterEngineMaxHeat)].SetValue<float>(value); } }
        public MaterialInstanceDynamic DynMatCenterEngineHeat { get { return this[nameof(DynMatCenterEngineHeat)].As<MaterialInstanceDynamic>(); } set { this["DynMatCenterEngineHeat"] = value; } }
        public void SetTargetDepth(float Depth) { Invoke(nameof(SetTargetDepth), Depth); }
        public void SetState(EDrillevatorState NewState) { Invoke(nameof(SetState), NewState); }
        public void SetMovementSpeed(float NewSpeed) { Invoke(nameof(SetMovementSpeed), NewSpeed); }
        public void SetMovementEnabled(bool Enabled) { Invoke(nameof(SetMovementEnabled), Enabled); }
        public void OnRep_State(EDrillevatorState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnRep_ServerDepth() { Invoke(nameof(OnRep_ServerDepth)); }
        public void OnRep_MovementEnabled(bool OldMovementEnabled) { Invoke(nameof(OnRep_MovementEnabled), OldMovementEnabled); }
        public void OnMovingChanged(bool IsMoving) { Invoke(nameof(OnMovingChanged), IsMoving); }
        public void OnExitState(EDrillevatorState oldState) { Invoke(nameof(OnExitState), oldState); }
        public void OnEnterState(EDrillevatorState NewState) { Invoke(nameof(OnEnterState), NewState); }
        public void OnCloseToTargetDepth() { Invoke(nameof(OnCloseToTargetDepth)); }
        public bool IsAtTargetDepth() { return Invoke<bool>(nameof(IsAtTargetDepth)); }
        public SkeletalMeshComponent GetCenterEngineComponent() { return Invoke<SkeletalMeshComponent>(nameof(GetCenterEngineComponent)); }
    }
    public class DrillevatorEngine : Actor
    {
        public DrillevatorEngine(nint addr) : base(addr) { }
        public EDrillevatorEngineState State { get { return (EDrillevatorEngineState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float Health { get { return this[nameof(Health)].GetValue<float>(); } set { this[nameof(Health)].SetValue<float>(value); } }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public float DrainRate { get { return this[nameof(DrainRate)].GetValue<float>(); } set { this[nameof(DrainRate)].SetValue<float>(value); } }
        public float HealthPercent_Green { get { return this[nameof(HealthPercent_Green)].GetValue<float>(); } set { this[nameof(HealthPercent_Green)].SetValue<float>(value); } }
        public float HealthPercent_Yellow { get { return this[nameof(HealthPercent_Yellow)].GetValue<float>(); } set { this[nameof(HealthPercent_Yellow)].SetValue<float>(value); } }
        public int DamageLevel { get { return this[nameof(DamageLevel)].GetValue<int>(); } set { this[nameof(DamageLevel)].SetValue<int>(value); } }
        public float LastRepairProgress { get { return this[nameof(LastRepairProgress)].GetValue<float>(); } set { this[nameof(LastRepairProgress)].SetValue<float>(value); } }
        public SingleUsableComponent MaintainerUsableComponent { get { return this[nameof(MaintainerUsableComponent)].As<SingleUsableComponent>(); } set { this["MaintainerUsableComponent"] = value; } }
        public SkeletalMeshComponent EngineMeshComponent { get { return this[nameof(EngineMeshComponent)].As<SkeletalMeshComponent>(); } set { this["EngineMeshComponent"] = value; } }
        public MaterialInstanceDynamic EngineMaterial { get { return this[nameof(EngineMaterial)].As<MaterialInstanceDynamic>(); } set { this["EngineMaterial"] = value; } }
        public void SetState(EDrillevatorEngineState NewState) { Invoke(nameof(SetState), NewState); }
        public void SetLastRepairProgress(float InProgress) { Invoke(nameof(SetLastRepairProgress), InProgress); }
        public void SetHealth(float InHealth) { Invoke(nameof(SetHealth), InHealth); }
        public void OnRep_State(EDrillevatorEngineState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnRep_LastRepairProgress() { Invoke(nameof(OnRep_LastRepairProgress)); }
        public void OnRep_Health() { Invoke(nameof(OnRep_Health)); }
        public void OnRep_DamageLevel() { Invoke(nameof(OnRep_DamageLevel)); }
        public void EvaluateDamageLevel() { Invoke(nameof(EvaluateDamageLevel)); }
    }
    public class DrinkableActor : Actor
    {
        public DrinkableActor(nint addr) : base(addr) { }
        public int BarSlotIndex { get { return this[nameof(BarSlotIndex)].GetValue<int>(); } set { this[nameof(BarSlotIndex)].SetValue<int>(value); } }
        public DrinkableDataAsset DrinkableData { get { return this[nameof(DrinkableData)].As<DrinkableDataAsset>(); } set { this["DrinkableData"] = value; } }
        public void Pickup(PlayerCharacter byCharacter) { Invoke(nameof(Pickup), byCharacter); }
        public void OnRep_DrinkableData() { Invoke(nameof(OnRep_DrinkableData)); }
        public void OnRep_BarSlotIndex() { Invoke(nameof(OnRep_BarSlotIndex)); }
        public void Fill() { Invoke(nameof(Fill)); }
    }
    public class DrinkableDataAsset : SavableDataAsset
    {
        public DrinkableDataAsset(nint addr) : base(addr) { }
        public Object DrinkableName { get { return this[nameof(DrinkableName)]; } set { this[nameof(DrinkableName)] = value; } }
        public Object DrinkableDescription { get { return this[nameof(DrinkableDescription)]; } set { this[nameof(DrinkableDescription)] = value; } }
        public int DrinkablePrice { get { return this[nameof(DrinkablePrice)].GetValue<int>(); } set { this[nameof(DrinkablePrice)].SetValue<int>(value); } }
        public bool IsSpecialBeer { get { return this[nameof(IsSpecialBeer)].Flag; } set { this[nameof(IsSpecialBeer)].Flag = value; } }
        public Object DrinkableIcon { get { return this[nameof(DrinkableIcon)]; } set { this[nameof(DrinkableIcon)] = value; } }
        public int RequiredPlayerRank { get { return this[nameof(RequiredPlayerRank)].GetValue<int>(); } set { this[nameof(RequiredPlayerRank)].SetValue<int>(value); } }
        public bool ParticipatesInFreeBeerEvent { get { return this[nameof(ParticipatesInFreeBeerEvent)].Flag; } set { this[nameof(ParticipatesInFreeBeerEvent)].Flag = value; } }
        public EDrinkableAlcoholStrength AlcoholStrength { get { return (EDrinkableAlcoholStrength)this[nameof(AlcoholStrength)].GetValue<int>(); } set { this[nameof(AlcoholStrength)].SetValue<int>((int)value); } }
        public DrinkableDataAsset SpecialEdition { get { return this[nameof(SpecialEdition)].As<DrinkableDataAsset>(); } set { this["SpecialEdition"] = value; } }
        public DLCBase RequiredDLC { get { return this[nameof(RequiredDLC)].As<DLCBase>(); } set { this["RequiredDLC"] = value; } }
        public bool bPlayFireworks { get { return this[nameof(bPlayFireworks)].Flag; } set { this[nameof(bPlayFireworks)].Flag = value; } }
        public MissionStat StatConsumed { get { return this[nameof(StatConsumed)].As<MissionStat>(); } set { this["StatConsumed"] = value; } }
        public MissionStat StatRoundOrdered { get { return this[nameof(StatRoundOrdered)].As<MissionStat>(); } set { this["StatRoundOrdered"] = value; } }
        public Object DrinkableActorClass { get { return this[nameof(DrinkableActorClass)]; } set { this[nameof(DrinkableActorClass)] = value; } }
        public Object DrinkableItemClass { get { return this[nameof(DrinkableItemClass)]; } set { this[nameof(DrinkableItemClass)] = value; } }
        public DialogDataAsset OrderShout { get { return this[nameof(OrderShout)].As<DialogDataAsset>(); } set { this["OrderShout"] = value; } }
        public DialogDataAsset OrderCheeringShout { get { return this[nameof(OrderCheeringShout)].As<DialogDataAsset>(); } set { this["OrderCheeringShout"] = value; } }
        public DialogDataAsset DrinkSaluteShout { get { return this[nameof(DrinkSaluteShout)].As<DialogDataAsset>(); } set { this["DrinkSaluteShout"] = value; } }
        public TemporaryBuff buff { get { return this[nameof(buff)].As<TemporaryBuff>(); } set { this["buff"] = value; } }
        public Object DrinkEffect { get { return this[nameof(DrinkEffect)]; } set { this[nameof(DrinkEffect)] = value; } }
        public bool OneEffectComponentPerCharacter { get { return this[nameof(OneEffectComponentPerCharacter)].Flag; } set { this[nameof(OneEffectComponentPerCharacter)].Flag = value; } }
        public Object UnlockCost { get { return this[nameof(UnlockCost)]; } set { this[nameof(UnlockCost)] = value; } }
        public Object PurchaseCost { get { return this[nameof(PurchaseCost)]; } set { this[nameof(PurchaseCost)] = value; } }
        public bool TryUnlockSpecialDrinks(Object WorldContext) { return Invoke<bool>(nameof(TryUnlockSpecialDrinks), WorldContext); }
        public bool TryUnlockDrink(Object WorldContext) { return Invoke<bool>(nameof(TryUnlockDrink), WorldContext); }
        public bool TryPurchaseDrink(Object WorldContext) { return Invoke<bool>(nameof(TryPurchaseDrink), WorldContext); }
        public void OnRoundOrdered(PlayerCharacter Character) { Invoke(nameof(OnRoundOrdered), Character); }
        public bool MustBeUnlocked() { return Invoke<bool>(nameof(MustBeUnlocked)); }
        public bool IsUnlocked(Object WorldContext) { return Invoke<bool>(nameof(IsUnlocked), WorldContext); }
        public bool IsDrinkFree(Object WorldContext) { return Invoke<bool>(nameof(IsDrinkFree), WorldContext); }
        public bool HasSpecialEdition() { return Invoke<bool>(nameof(HasSpecialEdition)); }
        public DrinkableDataAsset GetSpecialEdition(Object WorldContext) { return Invoke<DrinkableDataAsset>(nameof(GetSpecialEdition), WorldContext); }
        public Texture2D GetDrinkableIcon() { return Invoke<Texture2D>(nameof(GetDrinkableIcon)); }
        public bool AreSpecialDrinksUnlocked(Object WorldContext) { return Invoke<bool>(nameof(AreSpecialDrinksUnlocked), WorldContext); }
    }
    public class DrinkEffectComponent : ActorComponent
    {
        public DrinkEffectComponent(nint addr) : base(addr) { }
        public float BeerEffectDurationSeconds { get { return this[nameof(BeerEffectDurationSeconds)].GetValue<float>(); } set { this[nameof(BeerEffectDurationSeconds)].SetValue<float>(value); } }
        public bool AutoDestroy { get { return this[nameof(AutoDestroy)].Flag; } set { this[nameof(AutoDestroy)].Flag = value; } }
        public bool EffectIsActive { get { return this[nameof(EffectIsActive)].Flag; } set { this[nameof(EffectIsActive)].Flag = value; } }
        public bool ActivatesOnlyOnceWhenDrinking { get { return this[nameof(ActivatesOnlyOnceWhenDrinking)].Flag; } set { this[nameof(ActivatesOnlyOnceWhenDrinking)].Flag = value; } }
        public void StopEffect() { Invoke(nameof(StopEffect)); }
        public void OnStopEffect() { Invoke(nameof(OnStopEffect)); }
        public void OnStartEffect(PlayerCharacter Character) { Invoke(nameof(OnStartEffect), Character); }
        public void OnChangedCharacter(PlayerCharacter changedToCharacter, Object DrinkEffectClass) { Invoke(nameof(OnChangedCharacter), changedToCharacter, DrinkEffectClass); }
        public bool GetActivateOnlyWhenDrinking() { return Invoke<bool>(nameof(GetActivateOnlyWhenDrinking)); }
    }
    public class DrinkableItem : AnimatedItem
    {
        public DrinkableItem(nint addr) : base(addr) { }
        public DrinkableDataAsset DrinkableData { get { return this[nameof(DrinkableData)].As<DrinkableDataAsset>(); } set { this["DrinkableData"] = value; } }
        public int BarSlotIndex { get { return this[nameof(BarSlotIndex)].GetValue<int>(); } set { this[nameof(BarSlotIndex)].SetValue<int>(value); } }
        public void ThrowDrink() { Invoke(nameof(ThrowDrink)); }
        public void ReceiveConsumed() { Invoke(nameof(ReceiveConsumed)); }
        public void OnRep_DrinkableData() { Invoke(nameof(OnRep_DrinkableData)); }
        public void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode) { Invoke(nameof(OnCameraModeChanged), NewCameraMode, OldCameraMode); }
        public void Consume() { Invoke(nameof(Consume)); }
        public void ClientConsumed() { Invoke(nameof(ClientConsumed)); }
        public bool CheckCanSalute() { return Invoke<bool>(nameof(CheckCanSalute)); }
    }
    public class DrinkSettings : DataAsset
    {
        public DrinkSettings(nint addr) : base(addr) { }
        public UArray<BarleySpawnItem> BarleySpawns { get { return new UArray<BarleySpawnItem>(this[nameof(BarleySpawns)].Address); } }
        public RandInterval BarleyAmount { get { return this[nameof(BarleyAmount)].As<RandInterval>(); } set { this["BarleyAmount"] = value; } }
        public Object SpecialBeerUnlockCost { get { return this[nameof(SpecialBeerUnlockCost)]; } set { this[nameof(SpecialBeerUnlockCost)] = value; } }
        public UArray<DrinkableDataAsset> Drinkables { get { return new UArray<DrinkableDataAsset>(this[nameof(Drinkables)].Address); } }
        public UArray<DrinkableDataAsset> GetBarDrinkables(Object WorldContext, bool IncludeDailySpecial, bool includeNotUnlocked, bool includePlayerRankTooLow) { return Invoke<UArray<DrinkableDataAsset>>(nameof(GetBarDrinkables), WorldContext, IncludeDailySpecial, includeNotUnlocked, includePlayerRankTooLow); }
        public DrinkableDataAsset GetBarDailySpecial(Object WorldContext, DrinkableDataAsset currentDailySpecial) { return Invoke<DrinkableDataAsset>(nameof(GetBarDailySpecial), WorldContext, currentDailySpecial); }
    }
    public class DroneBase : DeepPathfinderCharacter
    {
        public DroneBase(nint addr) : base(addr) { }
        public PointLightComponent StateLight { get { return this[nameof(StateLight)].As<PointLightComponent>(); } set { this["StateLight"] = value; } }
        public EDroneState DefaultState { get { return (EDroneState)this[nameof(DefaultState)].GetValue<int>(); } set { this[nameof(DefaultState)].SetValue<int>((int)value); } }
        public UArray<DroneStateComponentBase> DroneStates { get { return new UArray<DroneStateComponentBase>(this[nameof(DroneStates)].Address); } }
        public EDroneState CurrentState { get { return (EDroneState)this[nameof(CurrentState)].GetValue<int>(); } set { this[nameof(CurrentState)].SetValue<int>((int)value); } }
        public void OnRep_CurrentState(EDroneState Previous) { Invoke(nameof(OnRep_CurrentState), Previous); }
    }
    public class DroneTargetSensingComponent : ActorComponent
    {
        public DroneTargetSensingComponent(nint addr) : base(addr) { }
        public GameplayTagQuery TargetQuery { get { return this[nameof(TargetQuery)].As<GameplayTagQuery>(); } set { this["TargetQuery"] = value; } }
        public Actor PulseFrom { get { return this[nameof(PulseFrom)].As<Actor>(); } set { this["PulseFrom"] = value; } }
        public float SensingRange { get { return this[nameof(SensingRange)].GetValue<float>(); } set { this[nameof(SensingRange)].SetValue<float>(value); } }
        public float SensingIntervals { get { return this[nameof(SensingIntervals)].GetValue<float>(); } set { this[nameof(SensingIntervals)].SetValue<float>(value); } }
        public bool NeedsLineOfSight { get { return this[nameof(NeedsLineOfSight)].Flag; } set { this[nameof(NeedsLineOfSight)].Flag = value; } }
    }
    public class DroneAbillityStatsComponent : ActorComponent
    {
        public DroneAbillityStatsComponent(nint addr) : base(addr) { }
        public bool UseOwnArmorDamageMultiplier { get { return this[nameof(UseOwnArmorDamageMultiplier)].Flag; } set { this[nameof(UseOwnArmorDamageMultiplier)].Flag = value; } }
    }
    public class DroneCharacter : DeepPathfinderCharacter
    {
        public DroneCharacter(nint addr) : base(addr) { }
        public HealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponent>(); } set { this["HealthComponent"] = value; } }
        public OutlineComponent OutlineComponent { get { return this[nameof(OutlineComponent)].As<OutlineComponent>(); } set { this["OutlineComponent"] = value; } }
        public SimpleObjectInfoComponent ObjectInfo { get { return this[nameof(ObjectInfo)].As<SimpleObjectInfoComponent>(); } set { this["ObjectInfo"] = value; } }
    }
    public class DroneStateComponentBase : ActorComponent
    {
        public DroneStateComponentBase(nint addr) : base(addr) { }
        public EDroneState SubsequentState { get { return (EDroneState)this[nameof(SubsequentState)].GetValue<int>(); } set { this[nameof(SubsequentState)].SetValue<int>((int)value); } }
    }
    public class DroneCombatState : DroneStateComponentBase
    {
        public DroneCombatState(nint addr) : base(addr) { }
        public GameplayTagQuery AttackOnOrderQuery { get { return this[nameof(AttackOnOrderQuery)].As<GameplayTagQuery>(); } set { this["AttackOnOrderQuery"] = value; } }
        public GameplayTagQuery AttackOnSightQuery { get { return this[nameof(AttackOnSightQuery)].As<GameplayTagQuery>(); } set { this["AttackOnSightQuery"] = value; } }
    }
    public class DroneControllerBase : AIController
    {
        public DroneControllerBase(nint addr) : base(addr) { }
        public UArray<Object> ControllingPlayers { get { return new UArray<Object>(this[nameof(ControllingPlayers)].Address); } }
        public void OnShout(PlayerCharacter Player) { Invoke(nameof(OnShout), Player); }
        public void OnSecondaryLaserPointer(LaserPointerTarget HitInfo) { Invoke(nameof(OnSecondaryLaserPointer), HitInfo); }
        public void OnSalute(PlayerCharacter Player) { Invoke(nameof(OnSalute), Player); }
        public void OnPrimaryLaserpointer(LaserPointerTarget HitInfo) { Invoke(nameof(OnPrimaryLaserpointer), HitInfo); }
        public void OnPlayerLeave(FSDPlayerState State) { Invoke(nameof(OnPlayerLeave), State); }
        public void OnPlayerJoin(PlayerCharacter Player) { Invoke(nameof(OnPlayerJoin), Player); }
    }
    public class StateDrivenDroneController : DroneControllerBase
    {
        public StateDrivenDroneController(nint addr) : base(addr) { }
    }
    public class DroneDisplayActionComponent : SceneComponent
    {
        public DroneDisplayActionComponent(nint addr) : base(addr) { }
        public TextRenderComponent DisplayText { get { return this[nameof(DisplayText)].As<TextRenderComponent>(); } set { this["DisplayText"] = value; } }
        public void SetMode(EDroneActions droneAction) { Invoke(nameof(SetMode), droneAction); }
    }
    public class DroneMeleeTool : ActorComponent
    {
        public DroneMeleeTool(nint addr) : base(addr) { }
        public float MeleeDamageAmount { get { return this[nameof(MeleeDamageAmount)].GetValue<float>(); } set { this[nameof(MeleeDamageAmount)].SetValue<float>(value); } }
    }
    public class DroneMiningToolBase : ActorComponent
    {
        public DroneMiningToolBase(nint addr) : base(addr) { }
        public Object HitSomething { get { return this[nameof(HitSomething)]; } set { this[nameof(HitSomething)] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public float SameHitDistance { get { return this[nameof(SameHitDistance)].GetValue<float>(); } set { this[nameof(SameHitDistance)].SetValue<float>(value); } }
        public float MineRadius { get { return this[nameof(MineRadius)].GetValue<float>(); } set { this[nameof(MineRadius)].SetValue<float>(value); } }
        public int MineStrength { get { return this[nameof(MineStrength)].GetValue<int>(); } set { this[nameof(MineStrength)].SetValue<int>(value); } }
        public void StopMining() { Invoke(nameof(StopMining)); }
        public void StartMining() { Invoke(nameof(StartMining)); }
        public void SpawnEffects(TerrainMaterial aTerrainMaterial, bool aParialHit, Vector_NetQuantize aLocation, Vector_NetQuantize aImpactNormal) { Invoke(nameof(SpawnEffects), aTerrainMaterial, aParialHit, aLocation, aImpactNormal); }
    }
    public class DroneFollowState : DroneStateComponentBase
    {
        public DroneFollowState(nint addr) : base(addr) { }
        public Actor FollowTarget { get { return this[nameof(FollowTarget)].As<Actor>(); } set { this["FollowTarget"] = value; } }
        public float MaxFollowRadius { get { return this[nameof(MaxFollowRadius)].GetValue<float>(); } set { this[nameof(MaxFollowRadius)].SetValue<float>(value); } }
        public float MinFollowRadius { get { return this[nameof(MinFollowRadius)].GetValue<float>(); } set { this[nameof(MinFollowRadius)].SetValue<float>(value); } }
        public float UpdateLocationInterval { get { return this[nameof(UpdateLocationInterval)].GetValue<float>(); } set { this[nameof(UpdateLocationInterval)].SetValue<float>(value); } }
        public float UpdateLocationVariance { get { return this[nameof(UpdateLocationVariance)].GetValue<float>(); } set { this[nameof(UpdateLocationVariance)].SetValue<float>(value); } }
    }
    public class DroneStream : Actor
    {
        public DroneStream(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public CapsuleComponent Collision { get { return this[nameof(Collision)].As<CapsuleComponent>(); } set { this["Collision"] = value; } }
        public bool CheckStartOverlaps { get { return this[nameof(CheckStartOverlaps)].Flag; } set { this[nameof(CheckStartOverlaps)].Flag = value; } }
        public bool CheckEndOverlaps { get { return this[nameof(CheckEndOverlaps)].Flag; } set { this[nameof(CheckEndOverlaps)].Flag = value; } }
        public void Receive_OnAbilityDataSet() { Invoke(nameof(Receive_OnAbilityDataSet)); }
        public void OnEndOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnEndOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnBeginOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnBeginOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public Bosco GetBosco() { return Invoke<Bosco>(nameof(GetBosco)); }
    }
    public class DroneVacuumStream : DroneStream
    {
        public DroneVacuumStream(nint addr) : base(addr) { }
        public SceneComponent VacuumPoint { get { return this[nameof(VacuumPoint)].As<SceneComponent>(); } set { this["VacuumPoint"] = value; } }
        public UArray<FoamPuddle> PuddlesInside { get { return new UArray<FoamPuddle>(this[nameof(PuddlesInside)].Address); } }
        public void Server_StartVacuumingPuddle(FoamPuddle puddle) { Invoke(nameof(Server_StartVacuumingPuddle), puddle); }
    }
    public class DroneUseComponent : ActorComponent
    {
        public DroneUseComponent(nint addr) : base(addr) { }
        public Object OnUsed { get { return this[nameof(OnUsed)]; } set { this[nameof(OnUsed)] = value; } }
        public Object OnBeginUse { get { return this[nameof(OnBeginUse)]; } set { this[nameof(OnBeginUse)] = value; } }
        public Object OnStopUse { get { return this[nameof(OnStopUse)]; } set { this[nameof(OnStopUse)] = value; } }
        public Object OnProgress { get { return this[nameof(OnProgress)]; } set { this[nameof(OnProgress)] = value; } }
        public DialogDataAsset BoscoLaserpointerShout { get { return this[nameof(BoscoLaserpointerShout)].As<DialogDataAsset>(); } set { this["BoscoLaserpointerShout"] = value; } }
        public Object SyncToUsable { get { return this[nameof(SyncToUsable)]; } set { this[nameof(SyncToUsable)] = value; } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
        public float useDuration { get { return this[nameof(useDuration)].GetValue<float>(); } set { this[nameof(useDuration)].SetValue<float>(value); } }
        public bool ResetOnFail { get { return this[nameof(ResetOnFail)].Flag; } set { this[nameof(ResetOnFail)].Flag = value; } }
        public bool CanUse { get { return this[nameof(CanUse)].Flag; } set { this[nameof(CanUse)].Flag = value; } }
        public void SyncedUsableUserCountChangedResponse(int userCount) { Invoke(nameof(SyncedUsableUserCountChangedResponse), userCount); }
        public void SyncedUsableUsedResponse(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(SyncedUsableUsedResponse), User, Key); }
        public void SyncedUsableBeginUseResponse(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(SyncedUsableBeginUseResponse), User, Key); }
        public void SetUseDuration(float useDuration) { Invoke(nameof(SetUseDuration), useDuration); }
        public void SetCanUse(bool CanUse) { Invoke(nameof(SetCanUse), CanUse); }
        public float GetProgress() { return Invoke<float>(nameof(GetProgress)); }
        public void EndUse() { Invoke(nameof(EndUse)); }
        public void BeginUse() { Invoke(nameof(BeginUse)); }
    }
    public class DroppableOutpost : TaggedActor
    {
        public DroppableOutpost(nint addr) : base(addr) { }
        public float DropHeight { get { return this[nameof(DropHeight)].GetValue<float>(); } set { this[nameof(DropHeight)].SetValue<float>(value); } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public AutoCarverComponent AutoCarver { get { return this[nameof(AutoCarver)].As<AutoCarverComponent>(); } set { this["AutoCarver"] = value; } }
        public CurveFloat DepartCurve { get { return this[nameof(DepartCurve)].As<CurveFloat>(); } set { this["DepartCurve"] = value; } }
        public float CarverRotationSpeed { get { return this[nameof(CarverRotationSpeed)].GetValue<float>(); } set { this[nameof(CarverRotationSpeed)].SetValue<float>(value); } }
        public Vector CarverScale { get { return this[nameof(CarverScale)].As<Vector>(); } set { this["CarverScale"] = value; } }
        public float DepartureTime { get { return this[nameof(DepartureTime)].GetValue<float>(); } set { this[nameof(DepartureTime)].SetValue<float>(value); } }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public EDroppableOutpostState State { get { return (EDroppableOutpostState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float DrillSpeed { get { return this[nameof(DrillSpeed)].GetValue<float>(); } set { this[nameof(DrillSpeed)].SetValue<float>(value); } }
        public float FreeFallAcceleration { get { return this[nameof(FreeFallAcceleration)].GetValue<float>(); } set { this[nameof(FreeFallAcceleration)].SetValue<float>(value); } }
        public float FreeFallSpeed { get { return this[nameof(FreeFallSpeed)].GetValue<float>(); } set { this[nameof(FreeFallSpeed)].SetValue<float>(value); } }
        public void StartDrilling() { Invoke(nameof(StartDrilling)); }
        public void PrepForTakeOff() { Invoke(nameof(PrepForTakeOff)); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnPrepForTakeOff() { Invoke(nameof(OnPrepForTakeOff)); }
        public void OnDroppodImpact() { Invoke(nameof(OnDroppodImpact)); }
        public void OnDrillingStarted() { Invoke(nameof(OnDrillingStarted)); }
        public void OnDeparting() { Invoke(nameof(OnDeparting)); }
        public DroppableOutpost DropOutpostToMission(Object WorldContextObject, Object podClass, Vector Location) { return Invoke<DroppableOutpost>(nameof(DropOutpostToMission), WorldContextObject, podClass, Location); }
        public void Depart() { Invoke(nameof(Depart)); }
    }
    public class FSDMiningHead : DroppableOutpost
    {
        public FSDMiningHead(nint addr) : base(addr) { }
        public ResourceBank ResourceBank { get { return this[nameof(ResourceBank)].As<ResourceBank>(); } set { this["ResourceBank"] = value; } }
    }
    public class TeamTransport : Actor
    {
        public TeamTransport(nint addr) : base(addr) { }
        public float DropHeight { get { return this[nameof(DropHeight)].GetValue<float>(); } set { this[nameof(DropHeight)].SetValue<float>(value); } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public AutoCarverComponent AutoCarver { get { return this[nameof(AutoCarver)].As<AutoCarverComponent>(); } set { this["AutoCarver"] = value; } }
        public CurveFloat DropCurve { get { return this[nameof(DropCurve)].As<CurveFloat>(); } set { this["DropCurve"] = value; } }
        public CurveFloat DepartCurve { get { return this[nameof(DepartCurve)].As<CurveFloat>(); } set { this["DepartCurve"] = value; } }
        public CurveFloat CarverDropCurve { get { return this[nameof(CarverDropCurve)].As<CurveFloat>(); } set { this["CarverDropCurve"] = value; } }
        public float CarverRotationSpeed { get { return this[nameof(CarverRotationSpeed)].GetValue<float>(); } set { this[nameof(CarverRotationSpeed)].SetValue<float>(value); } }
        public Vector CarverScale { get { return this[nameof(CarverScale)].As<Vector>(); } set { this["CarverScale"] = value; } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public BoxComponent DwarfCheckerBox { get { return this[nameof(DwarfCheckerBox)].As<BoxComponent>(); } set { this["DwarfCheckerBox"] = value; } }
        public float DepartureTime { get { return this[nameof(DepartureTime)].GetValue<float>(); } set { this[nameof(DepartureTime)].SetValue<float>(value); } }
        public Object DepartueCountdownName { get { return this[nameof(DepartueCountdownName)]; } set { this[nameof(DepartueCountdownName)] = value; } }
        public EMiningPodMission MissionType { get { return (EMiningPodMission)this[nameof(MissionType)].GetValue<int>(); } set { this[nameof(MissionType)].SetValue<int>((int)value); } }
        public bool WaitForPlayerSpawns { get { return this[nameof(WaitForPlayerSpawns)].Flag; } set { this[nameof(WaitForPlayerSpawns)].Flag = value; } }
        public bool HasLanded { get { return this[nameof(HasLanded)].Flag; } set { this[nameof(HasLanded)].Flag = value; } }
        public OutlineComponent PodOutline { get { return this[nameof(PodOutline)].As<OutlineComponent>(); } set { this["PodOutline"] = value; } }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public EMiningPodState TransportState { get { return (EMiningPodState)this[nameof(TransportState)].GetValue<int>(); } set { this[nameof(TransportState)].SetValue<int>((int)value); } }
        public EMiningPodRampState rampState { get { return (EMiningPodRampState)this[nameof(rampState)].GetValue<int>(); } set { this[nameof(rampState)].SetValue<int>((int)value); } }
        public float TargetDropTime { get { return this[nameof(TargetDropTime)].GetValue<float>(); } set { this[nameof(TargetDropTime)].SetValue<float>(value); } }
        public float TargetDepartureTime { get { return this[nameof(TargetDepartureTime)].GetValue<float>(); } set { this[nameof(TargetDepartureTime)].SetValue<float>(value); } }
        public float TimeToDrop { get { return this[nameof(TimeToDrop)].GetValue<float>(); } set { this[nameof(TimeToDrop)].SetValue<float>(value); } }
        public ObjectivesManager ObjectivesManager { get { return this[nameof(ObjectivesManager)].As<ObjectivesManager>(); } set { this["ObjectivesManager"] = value; } }
        public bool ShouldAttachPlayers { get { return this[nameof(ShouldAttachPlayers)].Flag; } set { this[nameof(ShouldAttachPlayers)].Flag = value; } }
        public TeamTransport SpawnPodAtLocation(Object WorldContextObject, Object podClass, Transform Transform) { return Invoke<TeamTransport>(nameof(SpawnPodAtLocation), WorldContextObject, podClass, Transform); }
        public void SetRampState(EMiningPodRampState rampState) { Invoke(nameof(SetRampState), rampState); }
        public void SetMuleInstance(Molly Donkey) { Invoke(nameof(SetMuleInstance), Donkey); }
        public void RecieveReturnTimerFifteenSecondWarning() { Invoke(nameof(RecieveReturnTimerFifteenSecondWarning)); }
        public void RecieveReturnTimerExpired() { Invoke(nameof(RecieveReturnTimerExpired)); }
        public void PrepForTakeOff() { Invoke(nameof(PrepForTakeOff)); }
        public void PowerUp() { Invoke(nameof(PowerUp)); }
        public void PoweredUp() { Invoke(nameof(PoweredUp)); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_RampState() { Invoke(nameof(OnRep_RampState)); }
        public void OnPrepForTakeOff() { Invoke(nameof(OnPrepForTakeOff)); }
        public void OnPoweringUp() { Invoke(nameof(OnPoweringUp)); }
        public void OnPoweredUp() { Invoke(nameof(OnPoweredUp)); }
        public void OnHostInsidePod(bool isInside) { Invoke(nameof(OnHostInsidePod), isInside); }
        public void OnDropStarted() { Invoke(nameof(OnDropStarted)); }
        public void OnDroppodImpact() { Invoke(nameof(OnDroppodImpact)); }
        public void OnDrillingStarted() { Invoke(nameof(OnDrillingStarted)); }
        public void OnDeparting() { Invoke(nameof(OnDeparting)); }
        public void OnCountdownFinished() { Invoke(nameof(OnCountdownFinished)); }
        public void OnCountdownChanged(int newTime) { Invoke(nameof(OnCountdownChanged), newTime); }
        public void OnAllDwavesInsidePod(bool AllInside) { Invoke(nameof(OnAllDwavesInsidePod), AllInside); }
        public int GetTimeToDeparture() { return Invoke<int>(nameof(GetTimeToDeparture)); }
        public bool GetHasLanded() { return Invoke<bool>(nameof(GetHasLanded)); }
        public void ForceTakeoff() { Invoke(nameof(ForceTakeoff)); }
        public void ExitSpacerig() { Invoke(nameof(ExitSpacerig)); }
        public TeamTransport DropToTarget(Object WorldContextObject, Object podClass, Transform dropLocation, int DropDelay) { return Invoke<TeamTransport>(nameof(DropToTarget), WorldContextObject, podClass, dropLocation, DropDelay); }
        public TeamTransport DropToMission(Object WorldContextObject, Object podClass, Vector Location) { return Invoke<TeamTransport>(nameof(DropToMission), WorldContextObject, podClass, Location); }
        public void DepositAllPlayersMaterials() { Invoke(nameof(DepositAllPlayersMaterials)); }
        public void Depart() { Invoke(nameof(Depart)); }
        public void CorrectLocationsForSpawnedOnLocation() { Invoke(nameof(CorrectLocationsForSpawnedOnLocation)); }
        public Vector AdjustLandingLocationToGround(Object WorldContextObjet, Vector initialLocation, float maxDownAdjustment) { return Invoke<Vector>(nameof(AdjustLandingLocationToGround), WorldContextObjet, initialLocation, maxDownAdjustment); }
    }
    public class DropPod : TeamTransport
    {
        public DropPod(nint addr) : base(addr) { }
        public MiningPodDialogs Dialogs { get { return this[nameof(Dialogs)].As<MiningPodDialogs>(); } set { this["Dialogs"] = value; } }
        public Vector GetDonkeyReturnPickupLocation() { return Invoke<Vector>(nameof(GetDonkeyReturnPickupLocation)); }
    }
    public class DropToTerrainComponent : ActorComponent
    {
        public DropToTerrainComponent(nint addr) : base(addr) { }
        public Object OnFallToTerrainStateChanged { get { return this[nameof(OnFallToTerrainStateChanged)]; } set { this[nameof(OnFallToTerrainStateChanged)] = value; } }
        public bool StartActive { get { return this[nameof(StartActive)].Flag; } set { this[nameof(StartActive)].Flag = value; } }
        public Vector CurrentLocation { get { return this[nameof(CurrentLocation)].As<Vector>(); } set { this["CurrentLocation"] = value; } }
        public Vector DropTarget { get { return this[nameof(DropTarget)].As<Vector>(); } set { this["DropTarget"] = value; } }
        public UArray<TerrainDetectComponent> TerrainPoints { get { return new UArray<TerrainDetectComponent>(this[nameof(TerrainPoints)].Address); } }
        public float FallVelocity { get { return this[nameof(FallVelocity)].GetValue<float>(); } set { this[nameof(FallVelocity)].SetValue<float>(value); } }
        public float TerrainTraceMaxDistance { get { return this[nameof(TerrainTraceMaxDistance)].GetValue<float>(); } set { this[nameof(TerrainTraceMaxDistance)].SetValue<float>(value); } }
        public bool IsDetecting { get { return this[nameof(IsDetecting)].Flag; } set { this[nameof(IsDetecting)].Flag = value; } }
        public void StopDropDetection(bool stopFalling) { Invoke(nameof(StopDropDetection), stopFalling); }
        public void OnTerrainRemoved(SceneComponent Point) { Invoke(nameof(OnTerrainRemoved), Point); }
        public void OnRep_DropTarget() { Invoke(nameof(OnRep_DropTarget)); }
        public void BeginDropDetection() { Invoke(nameof(BeginDropDetection)); }
    }
    public class DSTelemetryWrapper : GameInstanceSubsystem
    {
        public DSTelemetryWrapper(nint addr) : base(addr) { }
        public DSTelemetry Telemetry { get { return this[nameof(Telemetry)].As<DSTelemetry>(); } set { this["Telemetry"] = value; } }
        public void RecordTreeOfVanityClaim(int NodeID) { Invoke(nameof(RecordTreeOfVanityClaim), NodeID); }
        public void RecordSpecialEventHappening(Object EventName, bool SuccessfullySpawned) { Invoke(nameof(RecordSpecialEventHappening), EventName, SuccessfullySpawned); }
        public void RecordSeasonXpGained(int Gained, int LastLevel, bool Positive) { Invoke(nameof(RecordSeasonXpGained), Gained, LastLevel, Positive); }
        public void RecordSeasonLevelUp() { Invoke(nameof(RecordSeasonLevelUp)); }
        public void RecordSeasonChallengeReroll(int ChallengeIndex, SeasonChallenge Challenge) { Invoke(nameof(RecordSeasonChallengeReroll), ChallengeIndex, Challenge); }
        public void RecordOpenScreen(Object ScreenName, bool RecordRank) { Invoke(nameof(RecordOpenScreen), ScreenName, RecordRank); }
        public void RecordMissionStart() { Invoke(nameof(RecordMissionStart)); }
        public void RecordMissionEnd(int XPReward, int CreditReward) { Invoke(nameof(RecordMissionEnd), XPReward, CreditReward); }
        public void RecordMachineEventEnd(Object EventName, bool WasCompleted, int completionTime) { Invoke(nameof(RecordMachineEventEnd), EventName, WasCompleted, completionTime); }
        public void RecordKickPlayer(Object reason, PlayerController KickedPlayer) { Invoke(nameof(RecordKickPlayer), reason, KickedPlayer); }
        public void RecordDeepDiveStageEnd(Object MissionName, int StageTime, int TimeSinceStartOfDive, int TotalTime, int NitraLeft) { Invoke(nameof(RecordDeepDiveStageEnd), MissionName, StageTime, TimeSinceStartOfDive, TotalTime, NitraLeft); }
        public void RecordContinuousDamage(Actor DamageCauser) { Invoke(nameof(RecordContinuousDamage), DamageCauser); }
        public void RecordCommunityEvents(Object EventCategory, Object EventAction, Object EventLabel, int EventValue) { Invoke(nameof(RecordCommunityEvents), EventCategory, EventAction, EventLabel, EventValue); }
        public void RecordBossFightEnd(Object BossName, bool WasBossKilled, int NumBossKills) { Invoke(nameof(RecordBossFightEnd), BossName, WasBossKilled, NumBossKills); }
        public void OnNewProceduralSetup() { Invoke(nameof(OnNewProceduralSetup)); }
        public void OnNewPlayer(FSDPlayerController Controller) { Invoke(nameof(OnNewPlayer), Controller); }
        public void OnNewMission(GeneratedMission mission) { Invoke(nameof(OnNewMission), mission); }
        public void OnNewCharacter() { Invoke(nameof(OnNewCharacter)); }
        public void OnCharacterSaveChanged(Object CharacterClass, int Level, float Progress) { Invoke(nameof(OnCharacterSaveChanged), CharacterClass, Level, Progress); }
        public void OnCharacterPromoted(Object CharacterClass, int RetirementCount) { Invoke(nameof(OnCharacterPromoted), CharacterClass, RetirementCount); }
    }
    public class DualWieldWeapon : AmmoDrivenWeapon
    {
        public DualWieldWeapon(nint addr) : base(addr) { }
        public FirstPersonSkeletalMeshComponent FPMeshLeft { get { return this[nameof(FPMeshLeft)].As<FirstPersonSkeletalMeshComponent>(); } set { this["FPMeshLeft"] = value; } }
        public SkeletalMeshComponent TPMeshLeft { get { return this[nameof(TPMeshLeft)].As<SkeletalMeshComponent>(); } set { this["TPMeshLeft"] = value; } }
        public AnimMontage WPN_Left_Reload { get { return this[nameof(WPN_Left_Reload)].As<AnimMontage>(); } set { this["WPN_Left_Reload"] = value; } }
        public AnimMontage WPN_Left_TP_Reload { get { return this[nameof(WPN_Left_TP_Reload)].As<AnimMontage>(); } set { this["WPN_Left_TP_Reload"] = value; } }
        public FXSystemAsset CasingParticlesLeft { get { return this[nameof(CasingParticlesLeft)].As<FXSystemAsset>(); } set { this["CasingParticlesLeft"] = value; } }
        public Object MuzzleLeft { get { return this[nameof(MuzzleLeft)]; } set { this[nameof(MuzzleLeft)] = value; } }
    }
    public class DualWieldAnimInstance : AnimInstance
    {
        public DualWieldAnimInstance(nint addr) : base(addr) { }
    }
    public class DualMachinePistols : DualWieldWeapon
    {
        public DualMachinePistols(nint addr) : base(addr) { }
        public Object EmptyClipStatusEffect { get { return this[nameof(EmptyClipStatusEffect)]; } set { this[nameof(EmptyClipStatusEffect)] = value; } }
        public void Server_TriggerStatusEffect() { Invoke(nameof(Server_TriggerStatusEffect)); }
    }
    public class DynamicIcon : Object
    {
        public DynamicIcon(nint addr) : base(addr) { }
        public MaterialInterface GetIconMaterial() { return Invoke<MaterialInterface>(nameof(GetIconMaterial)); }
        public MaterialInstanceDynamic GenerateIconMaterial(Object materialOwner) { return Invoke<MaterialInstanceDynamic>(nameof(GenerateIconMaterial), materialOwner); }
    }
    public class TwoFacetDynamicIcon : DynamicIcon
    {
        public TwoFacetDynamicIcon(nint addr) : base(addr) { }
        public LinearColor Primary1Tint1 { get { return this[nameof(Primary1Tint1)].As<LinearColor>(); } set { this["Primary1Tint1"] = value; } }
        public LinearColor Primary1Tint2 { get { return this[nameof(Primary1Tint2)].As<LinearColor>(); } set { this["Primary1Tint2"] = value; } }
        public Object Primary1Texture { get { return this[nameof(Primary1Texture)]; } set { this[nameof(Primary1Texture)] = value; } }
        public float Primary1Texture_BasePoint { get { return this[nameof(Primary1Texture_BasePoint)].GetValue<float>(); } set { this[nameof(Primary1Texture_BasePoint)].SetValue<float>(value); } }
        public float Primary1Texture_Contrast { get { return this[nameof(Primary1Texture_Contrast)].GetValue<float>(); } set { this[nameof(Primary1Texture_Contrast)].SetValue<float>(value); } }
        public LinearColor Primary2Tint1 { get { return this[nameof(Primary2Tint1)].As<LinearColor>(); } set { this["Primary2Tint1"] = value; } }
        public LinearColor Primary2Tint2 { get { return this[nameof(Primary2Tint2)].As<LinearColor>(); } set { this["Primary2Tint2"] = value; } }
        public Object Primary2Texture { get { return this[nameof(Primary2Texture)]; } set { this[nameof(Primary2Texture)] = value; } }
        public float Primary2Texture_BasePoint { get { return this[nameof(Primary2Texture_BasePoint)].GetValue<float>(); } set { this[nameof(Primary2Texture_BasePoint)].SetValue<float>(value); } }
        public float Primary2Texture_Contrast { get { return this[nameof(Primary2Texture_Contrast)].GetValue<float>(); } set { this[nameof(Primary2Texture_Contrast)].SetValue<float>(value); } }
        public MaterialInstanceDynamic PreviewInstance { get { return this[nameof(PreviewInstance)].As<MaterialInstanceDynamic>(); } set { this["PreviewInstance"] = value; } }
        public void UpdatePreview() { Invoke(nameof(UpdatePreview)); }
    }
    public class TriFacetDynamicIcon : TwoFacetDynamicIcon
    {
        public TriFacetDynamicIcon(nint addr) : base(addr) { }
        public LinearColor Primary3Tint1 { get { return this[nameof(Primary3Tint1)].As<LinearColor>(); } set { this["Primary3Tint1"] = value; } }
        public LinearColor Primary3Tint2 { get { return this[nameof(Primary3Tint2)].As<LinearColor>(); } set { this["Primary3Tint2"] = value; } }
        public Object Primary3Texture { get { return this[nameof(Primary3Texture)]; } set { this[nameof(Primary3Texture)] = value; } }
        public float Primary3Texture_BasePoint { get { return this[nameof(Primary3Texture_BasePoint)].GetValue<float>(); } set { this[nameof(Primary3Texture_BasePoint)].SetValue<float>(value); } }
        public float Primary3Texture_Contrast { get { return this[nameof(Primary3Texture_Contrast)].GetValue<float>(); } set { this[nameof(Primary3Texture_Contrast)].SetValue<float>(value); } }
    }
    public class TextureDynamicIcon : DynamicIcon
    {
        public TextureDynamicIcon(nint addr) : base(addr) { }
        public Object Texture { get { return this[nameof(Texture)]; } set { this[nameof(Texture)] = value; } }
        public MaterialInstanceDynamic PreviewInstance { get { return this[nameof(PreviewInstance)].As<MaterialInstanceDynamic>(); } set { this["PreviewInstance"] = value; } }
        public void UpdatePreview() { Invoke(nameof(UpdatePreview)); }
    }
    public class DynamicIconSettings : DataAsset
    {
        public DynamicIconSettings(nint addr) : base(addr) { }
        public MaterialInstance TextureDynamicIcon { get { return this[nameof(TextureDynamicIcon)].As<MaterialInstance>(); } set { this["TextureDynamicIcon"] = value; } }
        public MaterialInstance TwoFacetDynamicIcon { get { return this[nameof(TwoFacetDynamicIcon)].As<MaterialInstance>(); } set { this["TwoFacetDynamicIcon"] = value; } }
        public MaterialInstance TwoFacetDynamicIconTex1 { get { return this[nameof(TwoFacetDynamicIconTex1)].As<MaterialInstance>(); } set { this["TwoFacetDynamicIconTex1"] = value; } }
        public MaterialInstance TwoFacetDynamicIconTex2 { get { return this[nameof(TwoFacetDynamicIconTex2)].As<MaterialInstance>(); } set { this["TwoFacetDynamicIconTex2"] = value; } }
        public MaterialInstance TwoFacetDynamicIconTex1Tex2 { get { return this[nameof(TwoFacetDynamicIconTex1Tex2)].As<MaterialInstance>(); } set { this["TwoFacetDynamicIconTex1Tex2"] = value; } }
        public MaterialInstance TriFacetDynamicIcon { get { return this[nameof(TriFacetDynamicIcon)].As<MaterialInstance>(); } set { this["TriFacetDynamicIcon"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex1 { get { return this[nameof(TriFacetDynamicIconTex1)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex1"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex1Tex2 { get { return this[nameof(TriFacetDynamicIconTex1Tex2)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex1Tex2"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex1Tex3 { get { return this[nameof(TriFacetDynamicIconTex1Tex3)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex1Tex3"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex1Tex2Tex3 { get { return this[nameof(TriFacetDynamicIconTex1Tex2Tex3)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex1Tex2Tex3"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex2 { get { return this[nameof(TriFacetDynamicIconTex2)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex2"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex2Tex3 { get { return this[nameof(TriFacetDynamicIconTex2Tex3)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex2Tex3"] = value; } }
        public MaterialInstance TriFacetDynamicIconTex3 { get { return this[nameof(TriFacetDynamicIconTex3)].As<MaterialInstance>(); } set { this["TriFacetDynamicIconTex3"] = value; } }
    }
    public class DynamicReverbComponent : ActorComponent
    {
        public DynamicReverbComponent(nint addr) : base(addr) { }
        public float LargeCaveValue { get { return this[nameof(LargeCaveValue)].GetValue<float>(); } set { this[nameof(LargeCaveValue)].SetValue<float>(value); } }
        public float MediumCaveValue { get { return this[nameof(MediumCaveValue)].GetValue<float>(); } set { this[nameof(MediumCaveValue)].SetValue<float>(value); } }
        public float SmallCaveValue { get { return this[nameof(SmallCaveValue)].GetValue<float>(); } set { this[nameof(SmallCaveValue)].SetValue<float>(value); } }
        public float FadeTime { get { return this[nameof(FadeTime)].GetValue<float>(); } set { this[nameof(FadeTime)].SetValue<float>(value); } }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
        public float TunnelAmbienceFadeIn { get { return this[nameof(TunnelAmbienceFadeIn)].GetValue<float>(); } set { this[nameof(TunnelAmbienceFadeIn)].SetValue<float>(value); } }
        public float TunnelAmbienceFadeOut { get { return this[nameof(TunnelAmbienceFadeOut)].GetValue<float>(); } set { this[nameof(TunnelAmbienceFadeOut)].SetValue<float>(value); } }
        public AudioComponent TunnelSoundInstance { get { return this[nameof(TunnelSoundInstance)].As<AudioComponent>(); } set { this["TunnelSoundInstance"] = value; } }
        public void TunnelTimerTriggered() { Invoke(nameof(TunnelTimerTriggered)); }
        public void TimerTriggered() { Invoke(nameof(TimerTriggered)); }
    }
    public class NisseAnimInstance : SimpleMovingEnemyAnimInstance
    {
        public NisseAnimInstance(nint addr) : base(addr) { }
        public ENisseState State { get { return (ENisseState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public bool IsWalking() { return Invoke<bool>(nameof(IsWalking)); }
        public bool IsRunning() { return Invoke<bool>(nameof(IsRunning)); }
        public bool IsNotWalking() { return Invoke<bool>(nameof(IsNotWalking)); }
        public bool IsNotRunning() { return Invoke<bool>(nameof(IsNotRunning)); }
        public bool IsNotIdle() { return Invoke<bool>(nameof(IsNotIdle)); }
        public bool IsNotFrozen() { return Invoke<bool>(nameof(IsNotFrozen)); }
        public bool IsIdle() { return Invoke<bool>(nameof(IsIdle)); }
        public bool IsFrozen() { return Invoke<bool>(nameof(IsFrozen)); }
    }
    public class EasterBunnyAnimInstance : NisseAnimInstance
    {
        public EasterBunnyAnimInstance(nint addr) : base(addr) { }
        public float WindUpTurnSpeed { get { return this[nameof(WindUpTurnSpeed)].GetValue<float>(); } set { this[nameof(WindUpTurnSpeed)].SetValue<float>(value); } }
        public float WindUpTimer { get { return this[nameof(WindUpTimer)].GetValue<float>(); } set { this[nameof(WindUpTimer)].SetValue<float>(value); } }
    }
    public class EffectSettings : DataAsset
    {
        public EffectSettings(nint addr) : base(addr) { }
        public NiagaraParameterCollection NiagaraParameterCollection { get { return this[nameof(NiagaraParameterCollection)].As<NiagaraParameterCollection>(); } set { this["NiagaraParameterCollection"] = value; } }
        public RuntimeFloatCurve LinearFadeInLight { get { return this[nameof(LinearFadeInLight)].As<RuntimeFloatCurve>(); } set { this["LinearFadeInLight"] = value; } }
        public RuntimeFloatCurve LinearFadeOutLight { get { return this[nameof(LinearFadeOutLight)].As<RuntimeFloatCurve>(); } set { this["LinearFadeOutLight"] = value; } }
    }
    public class ElectroBeam : Actor
    {
        public ElectroBeam(nint addr) : base(addr) { }
        public CapsuleComponent collider { get { return this[nameof(collider)].As<CapsuleComponent>(); } set { this["collider"] = value; } }
        public UArray<Actor> ParentPlants { get { return new UArray<Actor>(this[nameof(ParentPlants)].Address); } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Vector SourceLocation { get { return this[nameof(SourceLocation)].As<Vector>(); } set { this["SourceLocation"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public SceneComponent SourceComponent { get { return this[nameof(SourceComponent)].As<SceneComponent>(); } set { this["SourceComponent"] = value; } }
        public SceneComponent TargetComponent { get { return this[nameof(TargetComponent)].As<SceneComponent>(); } set { this["TargetComponent"] = value; } }
        public SceneComponent DelaySource { get { return this[nameof(DelaySource)].As<SceneComponent>(); } set { this["DelaySource"] = value; } }
        public SceneComponent DelayTarget { get { return this[nameof(DelayTarget)].As<SceneComponent>(); } set { this["DelayTarget"] = value; } }
        public ParticleSystemComponent BeamEffect { get { return this[nameof(BeamEffect)].As<ParticleSystemComponent>(); } set { this["BeamEffect"] = value; } }
        public AudioComponent ZappSound { get { return this[nameof(ZappSound)].As<AudioComponent>(); } set { this["ZappSound"] = value; } }
        public UArray<Object> StatusEffectsToApply { get { return new UArray<Object>(this[nameof(StatusEffectsToApply)].Address); } }
        public float MaxLitTime { get { return this[nameof(MaxLitTime)].GetValue<float>(); } set { this[nameof(MaxLitTime)].SetValue<float>(value); } }
        public float MinLitTime { get { return this[nameof(MinLitTime)].GetValue<float>(); } set { this[nameof(MinLitTime)].SetValue<float>(value); } }
        public float MaxUnlitTime { get { return this[nameof(MaxUnlitTime)].GetValue<float>(); } set { this[nameof(MaxUnlitTime)].SetValue<float>(value); } }
        public float MinUnlitTime { get { return this[nameof(MinUnlitTime)].GetValue<float>(); } set { this[nameof(MinUnlitTime)].SetValue<float>(value); } }
        public bool ShouldFlicker { get { return this[nameof(ShouldFlicker)].Flag; } set { this[nameof(ShouldFlicker)].Flag = value; } }
        public bool IsLit { get { return this[nameof(IsLit)].Flag; } set { this[nameof(IsLit)].Flag = value; } }
        public void SetTargetComponent(SceneComponent TargetPoint) { Invoke(nameof(SetTargetComponent), TargetPoint); }
        public void SetSourceComponent(SceneComponent SourcePoint) { Invoke(nameof(SetSourceComponent), SourcePoint); }
        public void SetParents(Actor firstParent, Actor secondParent) { Invoke(nameof(SetParents), firstParent, secondParent); }
        public void RecalculateBeam() { Invoke(nameof(RecalculateBeam)); }
        public void OnRep_TargetComponent() { Invoke(nameof(OnRep_TargetComponent)); }
        public void OnRep_SourceComponent() { Invoke(nameof(OnRep_SourceComponent)); }
        public void OnRep_Flag() { Invoke(nameof(OnRep_Flag)); }
        public void OnParentDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnParentDeath), HealthComponent); }
        public ParticleSystemComponent GetParticleEffect() { return Invoke<ParticleSystemComponent>(nameof(GetParticleEffect)); }
        public CapsuleComponent GetCollider() { return Invoke<CapsuleComponent>(nameof(GetCollider)); }
        public AudioComponent GetAudio() { return Invoke<AudioComponent>(nameof(GetAudio)); }
        public void DeactivateCollisionAndEffect() { Invoke(nameof(DeactivateCollisionAndEffect)); }
    }
    public class RecalculatedElectroBeam : ElectroBeam
    {
        public RecalculatedElectroBeam(nint addr) : base(addr) { }
        public float MaxBeamRange { get { return this[nameof(MaxBeamRange)].GetValue<float>(); } set { this[nameof(MaxBeamRange)].SetValue<float>(value); } }
        public float UpdateRateSeconds { get { return this[nameof(UpdateRateSeconds)].GetValue<float>(); } set { this[nameof(UpdateRateSeconds)].SetValue<float>(value); } }
        public EElectroBeamState BeamState { get { return (EElectroBeamState)this[nameof(BeamState)].GetValue<int>(); } set { this[nameof(BeamState)].SetValue<int>((int)value); } }
        public void StartRecalculatingBeam() { Invoke(nameof(StartRecalculatingBeam)); }
        public void SetMaxRange(float InMaxRange) { Invoke(nameof(SetMaxRange), InMaxRange); }
        public void OnRep_BeamState() { Invoke(nameof(OnRep_BeamState)); }
    }
    public class SentryElectroBeam : RecalculatedElectroBeam
    {
        public SentryElectroBeam(nint addr) : base(addr) { }
        public UArray<RedeployableSentryGun> Sentries { get { return new UArray<RedeployableSentryGun>(this[nameof(Sentries)].Address); } }
    }
    public class CrossbowElectroBeam : RecalculatedElectroBeam
    {
        public CrossbowElectroBeam(nint addr) : base(addr) { }
    }
    public class ElevatorPlant : Actor
    {
        public ElevatorPlant(nint addr) : base(addr) { }
        public Object OnStartTimelineEvent { get { return this[nameof(OnStartTimelineEvent)]; } set { this[nameof(OnStartTimelineEvent)] = value; } }
        public Object COnStateChangedEvent { get { return this[nameof(COnStateChangedEvent)]; } set { this[nameof(COnStateChangedEvent)] = value; } }
        public AudioComponent MovingSoundComponent { get { return this[nameof(MovingSoundComponent)].As<AudioComponent>(); } set { this["MovingSoundComponent"] = value; } }
        public SoundCue GrabSound { get { return this[nameof(GrabSound)].As<SoundCue>(); } set { this["GrabSound"] = value; } }
        public Vector RestPositionOffset { get { return this[nameof(RestPositionOffset)].As<Vector>(); } set { this["RestPositionOffset"] = value; } }
        public Vector RelativeRestLocation { get { return this[nameof(RelativeRestLocation)].As<Vector>(); } set { this["RelativeRestLocation"] = value; } }
        public Vector RelativeDestinationLocation { get { return this[nameof(RelativeDestinationLocation)].As<Vector>(); } set { this["RelativeDestinationLocation"] = value; } }
        public Vector BaseTangentDirectionOffset { get { return this[nameof(BaseTangentDirectionOffset)].As<Vector>(); } set { this["BaseTangentDirectionOffset"] = value; } }
        public Vector LeafTangentDirectionOffset { get { return this[nameof(LeafTangentDirectionOffset)].As<Vector>(); } set { this["LeafTangentDirectionOffset"] = value; } }
        public Vector LeafLocationNoise { get { return this[nameof(LeafLocationNoise)].As<Vector>(); } set { this["LeafLocationNoise"] = value; } }
        public Rotator LeafNoiseRotator { get { return this[nameof(LeafNoiseRotator)].As<Rotator>(); } set { this["LeafNoiseRotator"] = value; } }
        public float BaseTangentLength { get { return this[nameof(BaseTangentLength)].GetValue<float>(); } set { this[nameof(BaseTangentLength)].SetValue<float>(value); } }
        public SplineMeshComponent CSplineMesh { get { return this[nameof(CSplineMesh)].As<SplineMeshComponent>(); } set { this["CSplineMesh"] = value; } }
        public SceneComponent CVineBase { get { return this[nameof(CVineBase)].As<SceneComponent>(); } set { this["CVineBase"] = value; } }
        public SceneComponent CVineLeaf { get { return this[nameof(CVineLeaf)].As<SceneComponent>(); } set { this["CVineLeaf"] = value; } }
        public float InitialBaseTangentLength { get { return this[nameof(InitialBaseTangentLength)].GetValue<float>(); } set { this[nameof(InitialBaseTangentLength)].SetValue<float>(value); } }
        public float LeafLocationNoiseSize { get { return this[nameof(LeafLocationNoiseSize)].GetValue<float>(); } set { this[nameof(LeafLocationNoiseSize)].SetValue<float>(value); } }
        public float VineMovementAlpha { get { return this[nameof(VineMovementAlpha)].GetValue<float>(); } set { this[nameof(VineMovementAlpha)].SetValue<float>(value); } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public bool IsOpen { get { return this[nameof(IsOpen)].Flag; } set { this[nameof(IsOpen)].Flag = value; } }
        public bool Extend { get { return this[nameof(Extend)].Flag; } set { this[nameof(Extend)].Flag = value; } }
        public CurveFloat DipOffsetCurve { get { return this[nameof(DipOffsetCurve)].As<CurveFloat>(); } set { this["DipOffsetCurve"] = value; } }
        public CurveFloat LocationLerpCurve { get { return this[nameof(LocationLerpCurve)].As<CurveFloat>(); } set { this["LocationLerpCurve"] = value; } }
        public void SetLeafNoiseRotator(Rotator aRotator) { Invoke(nameof(SetLeafNoiseRotator), aRotator); }
        public void SetLeafLocationNoise(Vector aVector) { Invoke(nameof(SetLeafLocationNoise), aVector); }
        public void SetIsOpen(bool aValue) { Invoke(nameof(SetIsOpen), aValue); }
        public void SetIsExtended(bool aValue) { Invoke(nameof(SetIsExtended), aValue); }
        public void SetBaseTangentLength(float Value) { Invoke(nameof(SetBaseTangentLength), Value); }
        public void SetBaseTangentDirectionOffset(Vector aVector) { Invoke(nameof(SetBaseTangentDirectionOffset), aVector); }
        public void OnRep_RelavtiveDestinationLocation() { Invoke(nameof(OnRep_RelavtiveDestinationLocation)); }
        public void OnRep_Open() { Invoke(nameof(OnRep_Open)); }
        public void OnMatchStarted() { Invoke(nameof(OnMatchStarted)); }
        public void MoreTick(Vector DipOffset, float aValue) { Invoke(nameof(MoreTick), DipOffset, aValue); }
        public float GetVineMovementAlpha() { return Invoke<float>(nameof(GetVineMovementAlpha)); }
        public Vector GetRelativeRestLocation() { return Invoke<Vector>(nameof(GetRelativeRestLocation)); }
        public Vector GetRelativeDestinationLocation() { return Invoke<Vector>(nameof(GetRelativeDestinationLocation)); }
        public float GetLeafLocationNoiseSize() { return Invoke<float>(nameof(GetLeafLocationNoiseSize)); }
        public bool GetIsMoving() { return Invoke<bool>(nameof(GetIsMoving)); }
        public bool GetIsExtended() { return Invoke<bool>(nameof(GetIsExtended)); }
        public float GetInitialTangentLenth() { return Invoke<float>(nameof(GetInitialTangentLenth)); }
    }
    public class EliminationObjective : Objective
    {
        public EliminationObjective(nint addr) : base(addr) { }
        public int ObjectCount { get { return this[nameof(ObjectCount)].GetValue<int>(); } set { this[nameof(ObjectCount)].SetValue<int>(value); } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public UArray<int> ExcludeRoomIDs { get { return new UArray<int>(this[nameof(ExcludeRoomIDs)].Address); } }
        public Object ObjectToSpawn { get { return this[nameof(ObjectToSpawn)]; } set { this[nameof(ObjectToSpawn)] = value; } }
        public CaveInfluencer CaveInfluencer { get { return this[nameof(CaveInfluencer)].As<CaveInfluencer>(); } set { this["CaveInfluencer"] = value; } }
        public float DebrisRadius { get { return this[nameof(DebrisRadius)].GetValue<float>(); } set { this[nameof(DebrisRadius)].SetValue<float>(value); } }
        public UArray<Object> ObjectDebris { get { return new UArray<Object>(this[nameof(ObjectDebris)].Address); } }
        public int EnemiesKilled { get { return this[nameof(EnemiesKilled)].GetValue<int>(); } set { this[nameof(EnemiesKilled)].SetValue<int>(value); } }
        public int EnemiesToKill { get { return this[nameof(EnemiesToKill)].GetValue<int>(); } set { this[nameof(EnemiesToKill)].SetValue<int>(value); } }
        public UArray<EliminationDescriptors> TargetDescriptors { get { return new UArray<EliminationDescriptors>(this[nameof(TargetDescriptors)].Address); } }
        public UArray<EliminationDescriptors> TargetQueue { get { return new UArray<EliminationDescriptors>(this[nameof(TargetQueue)].Address); } }
        public UArray<EliminationTarget> ActiveEliminationTargets { get { return new UArray<EliminationTarget>(this[nameof(ActiveEliminationTargets)].Address); } }
        public void RegisterEliminationTargets(UArray<FSDPawn> Targets) { Invoke(nameof(RegisterEliminationTargets), Targets); }
        public void ReceiveTargetSpawned() { Invoke(nameof(ReceiveTargetSpawned)); }
        public void ReceiveTargetKilled() { Invoke(nameof(ReceiveTargetKilled)); }
        public void OnTargetKilled(HealthComponentBase Health) { Invoke(nameof(OnTargetKilled), Health); }
        public void OnRep_EnemiesToKill(int prevAmount) { Invoke(nameof(OnRep_EnemiesToKill), prevAmount); }
        public void OnRep_EnemiesKilled(int prevAmount) { Invoke(nameof(OnRep_EnemiesKilled), prevAmount); }
        public UArray<EnemyDescriptor> GetNextTargetInQueue() { return Invoke<UArray<EnemyDescriptor>>(nameof(GetNextTargetInQueue)); }
    }
    public class EncounterActor : Actor
    {
        public EncounterActor(nint addr) : base(addr) { }
        public void Receive_EncounterHasSpawned(Pawn spawnedPawn) { Invoke(nameof(Receive_EncounterHasSpawned), spawnedPawn); }
    }
    public class EncounterManager : ActorComponent
    {
        public EncounterManager(nint addr) : base(addr) { }
        public float SpawnDistanceFromRoomBounds { get { return this[nameof(SpawnDistanceFromRoomBounds)].GetValue<float>(); } set { this[nameof(SpawnDistanceFromRoomBounds)].SetValue<float>(value); } }
        public UArray<EncounterManagerItem> Encounters { get { return new UArray<EncounterManagerItem>(this[nameof(Encounters)].Address); } }
        public ProceduralSetup ProceduralSetup { get { return this[nameof(ProceduralSetup)].As<ProceduralSetup>(); } set { this["ProceduralSetup"] = value; } }
        public EnemySpawnManager SpawnManager { get { return this[nameof(SpawnManager)].As<EnemySpawnManager>(); } set { this["SpawnManager"] = value; } }
        public UArray<EnemyDescriptor> EnemyPool { get { return new UArray<EnemyDescriptor>(this[nameof(EnemyPool)].Address); } }
        public UArray<EnemyDescriptor> EncounterPool { get { return new UArray<EnemyDescriptor>(this[nameof(EncounterPool)].Address); } }
        public UArray<CritterDescriptor> CritterPool { get { return new UArray<CritterDescriptor>(this[nameof(CritterPool)].Address); } }
        public void ShowSpawnLocations() { Invoke(nameof(ShowSpawnLocations)); }
        public UArray<EnemyDescriptor> GetEnemyPool() { return Invoke<UArray<EnemyDescriptor>>(nameof(GetEnemyPool)); }
        public UArray<EnemyDescriptor> GetEncounterPool() { return Invoke<UArray<EnemyDescriptor>>(nameof(GetEncounterPool)); }
        public UArray<CritterDescriptor> GetCritterPool() { return Invoke<UArray<CritterDescriptor>>(nameof(GetCritterPool)); }
        public void AddEncounterFromGroup(EnemyGroupDescriptor Group, float Difficulty, Vector Location, float Radius) { Invoke(nameof(AddEncounterFromGroup), Group, Difficulty, Location, Radius); }
    }
    public class EncounterSettings : DataAsset
    {
        public EncounterSettings(nint addr) : base(addr) { }
        public IRandRange StationaryEnemyCount { get { return this[nameof(StationaryEnemyCount)].As<IRandRange>(); } set { this["StationaryEnemyCount"] = value; } }
        public UArray<EnemyDescriptor> CommonEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(CommonEnemies)].Address); } }
        public UArray<EnemyDescriptor> SpecialEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(SpecialEnemies)].Address); } }
        public UArray<EnemyDescriptor> DisruptiveEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(DisruptiveEnemies)].Address); } }
        public UArray<EnemyDescriptor> StationaryEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(StationaryEnemies)].Address); } }
        public UArray<CritterDescriptor> CommonCritters { get { return new UArray<CritterDescriptor>(this[nameof(CommonCritters)].Address); } }
        public UArray<EncounterRareCritterItem> RareCritters { get { return new UArray<EncounterRareCritterItem>(this[nameof(RareCritters)].Address); } }
        public UArray<EncounterSpecialItem> SpecialEncounters { get { return new UArray<EncounterSpecialItem>(this[nameof(SpecialEncounters)].Address); } }
        public float RequiredDifficultyPerDiversity { get { return this[nameof(RequiredDifficultyPerDiversity)].GetValue<float>(); } set { this[nameof(RequiredDifficultyPerDiversity)].SetValue<float>(value); } }
        public float GlobalDifficultyScale { get { return this[nameof(GlobalDifficultyScale)].GetValue<float>(); } set { this[nameof(GlobalDifficultyScale)].SetValue<float>(value); } }
        public RandInterval EncounterDifficulty { get { return this[nameof(EncounterDifficulty)].As<RandInterval>(); } set { this["EncounterDifficulty"] = value; } }
        public RandInterval StationaryDifficulty { get { return this[nameof(StationaryDifficulty)].As<RandInterval>(); } set { this["StationaryDifficulty"] = value; } }
        public RandRange CritterSpawnDifficulty { get { return this[nameof(CritterSpawnDifficulty)].As<RandRange>(); } set { this["CritterSpawnDifficulty"] = value; } }
        public GameplayTag SmallRoomTag { get { return this[nameof(SmallRoomTag)].As<GameplayTag>(); } set { this["SmallRoomTag"] = value; } }
        public GameplayTag MediumRoomTag { get { return this[nameof(MediumRoomTag)].As<GameplayTag>(); } set { this["MediumRoomTag"] = value; } }
        public GameplayTag LargeRoomTag { get { return this[nameof(LargeRoomTag)].As<GameplayTag>(); } set { this["LargeRoomTag"] = value; } }
        public float SmallRoomDifficultyModifier { get { return this[nameof(SmallRoomDifficultyModifier)].GetValue<float>(); } set { this[nameof(SmallRoomDifficultyModifier)].SetValue<float>(value); } }
        public float MediumRoomDifficultyModifier { get { return this[nameof(MediumRoomDifficultyModifier)].GetValue<float>(); } set { this[nameof(MediumRoomDifficultyModifier)].SetValue<float>(value); } }
        public float LargeRoomDifficultyModifier { get { return this[nameof(LargeRoomDifficultyModifier)].GetValue<float>(); } set { this[nameof(LargeRoomDifficultyModifier)].SetValue<float>(value); } }
        public Object HeroEnemies { get { return this[nameof(HeroEnemies)]; } set { this[nameof(HeroEnemies)] = value; } }
        public RandInterval HeroEnemySpawn { get { return this[nameof(HeroEnemySpawn)].As<RandInterval>(); } set { this["HeroEnemySpawn"] = value; } }
        public Mutator TestMutator { get { return this[nameof(TestMutator)].As<Mutator>(); } set { this["TestMutator"] = value; } }
    }
    public class EndStatusEffectOnLanding : ActorComponent
    {
        public EndStatusEffectOnLanding(nint addr) : base(addr) { }
        public Object EffectToCancel { get { return this[nameof(EffectToCancel)]; } set { this[nameof(EffectToCancel)] = value; } }
        public void OnOwnerStateChanged(ECharacterState State) { Invoke(nameof(OnOwnerStateChanged), State); }
    }
    public class EnemyFamily : DataAsset
    {
        public EnemyFamily(nint addr) : base(addr) { }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
    }
    public class ObjectInfoComponent : ActorComponent
    {
        public ObjectInfoComponent(nint addr) : base(addr) { }
        public bool HasMissionControlLookAtShout(PrimitiveComponent TargetComponent) { return Invoke<bool>(nameof(HasMissionControlLookAtShout), TargetComponent); }
        public DialogDataAsset GetMissionControlLookAtShout(PrimitiveComponent TargetComponent) { return Invoke<DialogDataAsset>(nameof(GetMissionControlLookAtShout), TargetComponent); }
        public DialogDataAsset GetLookAtShout(PrimitiveComponent TargetComponent) { return Invoke<DialogDataAsset>(nameof(GetLookAtShout), TargetComponent); }
        public bool GetIsPingableByLaserpointer(PrimitiveComponent TargetComponent) { return Invoke<bool>(nameof(GetIsPingableByLaserpointer), TargetComponent); }
        public Object GetInGameName(PrimitiveComponent TargetComponent) { return Invoke<Object>(nameof(GetInGameName), TargetComponent); }
        public LinearColor GetInGameIconTint(PrimitiveComponent TargetComponent) { return Invoke<LinearColor>(nameof(GetInGameIconTint), TargetComponent); }
        public Texture2D GetInGameIcon(PrimitiveComponent TargetComponent) { return Invoke<Texture2D>(nameof(GetInGameIcon), TargetComponent); }
        public Object GetInGameDescription(PrimitiveComponent TargetComponent) { return Invoke<Object>(nameof(GetInGameDescription), TargetComponent); }
        public ActorContextWidget GetContextWidget(PlayerController InPlayerController) { return Invoke<ActorContextWidget>(nameof(GetContextWidget), InPlayerController); }
    }
    public class SimpleObjectInfoComponent : ObjectInfoComponent
    {
        public SimpleObjectInfoComponent(nint addr) : base(addr) { }
        public Object InGameName { get { return this[nameof(InGameName)]; } set { this[nameof(InGameName)] = value; } }
        public Object InGameDescription { get { return this[nameof(InGameDescription)]; } set { this[nameof(InGameDescription)] = value; } }
        public DialogDataAsset LookAtShout { get { return this[nameof(LookAtShout)].As<DialogDataAsset>(); } set { this["LookAtShout"] = value; } }
        public bool bHasMissionControlLookAtShout { get { return this[nameof(bHasMissionControlLookAtShout)].Flag; } set { this[nameof(bHasMissionControlLookAtShout)].Flag = value; } }
        public DialogDataAsset MissionControlLookAtShout { get { return this[nameof(MissionControlLookAtShout)].As<DialogDataAsset>(); } set { this["MissionControlLookAtShout"] = value; } }
        public DialogDataAsset LookAtShoutOverride { get { return this[nameof(LookAtShoutOverride)].As<DialogDataAsset>(); } set { this["LookAtShoutOverride"] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Texture2D IconOverride { get { return this[nameof(IconOverride)].As<Texture2D>(); } set { this["IconOverride"] = value; } }
        public bool bIsPingableByLaserpointer { get { return this[nameof(bIsPingableByLaserpointer)].Flag; } set { this[nameof(bIsPingableByLaserpointer)].Flag = value; } }
        public Object ContextWidgetClass { get { return this[nameof(ContextWidgetClass)]; } set { this[nameof(ContextWidgetClass)] = value; } }
        public Object ComponentMap { get { return this[nameof(ComponentMap)]; } set { this[nameof(ComponentMap)] = value; } }
        public ActorContextWidget ContextWidget { get { return this[nameof(ContextWidget)].As<ActorContextWidget>(); } set { this["ContextWidget"] = value; } }
        public void SetInGameName(Object GameName) { Invoke(nameof(SetInGameName), GameName); }
        public void SetInGameDescription(Object GameDescription) { Invoke(nameof(SetInGameDescription), GameDescription); }
        public void SetContextWidget(ActorContextWidget InContextWidget) { Invoke(nameof(SetContextWidget), InContextWidget); }
        public void OverrideLookAtShoutOrUseDefault(DialogDataAsset InShout) { Invoke(nameof(OverrideLookAtShoutOrUseDefault), InShout); }
        public void OverrideLookAtShout(DialogDataAsset InShout) { Invoke(nameof(OverrideLookAtShout), InShout); }
        public void OverrideIcon(Texture2D InTexture) { Invoke(nameof(OverrideIcon), InTexture); }
        public DialogDataAsset GetDefaultLookAtShout() { return Invoke<DialogDataAsset>(nameof(GetDefaultLookAtShout)); }
        public void ClearLookAtShoutOverride() { Invoke(nameof(ClearLookAtShoutOverride)); }
        public void AddComponentObjectInfo(SceneComponent TargetComponent, SimpleObjectInfoData Data) { Invoke(nameof(AddComponentObjectInfo), TargetComponent, Data); }
    }
    public class EnemyComponent : SimpleObjectInfoComponent
    {
        public EnemyComponent(nint addr) : base(addr) { }
        public EnemyFamily Family { get { return this[nameof(Family)].As<EnemyFamily>(); } set { this["Family"] = value; } }
        public DialogDataAsset KillShout { get { return this[nameof(KillShout)].As<DialogDataAsset>(); } set { this["KillShout"] = value; } }
        public EnemyID EnemyID { get { return this[nameof(EnemyID)].As<EnemyID>(); } set { this["EnemyID"] = value; } }
        public Object mixerName { get { return this[nameof(mixerName)]; } set { this[nameof(mixerName)] = value; } }
        public Object OnMixerNameChange { get { return this[nameof(OnMixerNameChange)]; } set { this[nameof(OnMixerNameChange)] = value; } }
        public EnemyID GetID() { return Invoke<EnemyID>(nameof(GetID)); }
        public Object GetFamilyName() { return Invoke<Object>(nameof(GetFamilyName)); }
        public Texture2D GetFamilyIcon() { return Invoke<Texture2D>(nameof(GetFamilyIcon)); }
    }
    public class TestAnimInstance : AnimInstance
    {
        public TestAnimInstance(nint addr) : base(addr) { }
        public TestAnimInstanceProxy AnimInstanceProxy { get { return this[nameof(AnimInstanceProxy)].As<TestAnimInstanceProxy>(); } set { this["AnimInstanceProxy"] = value; } }
        public float WalkCycleSpeed { get { return this[nameof(WalkCycleSpeed)].GetValue<float>(); } set { this[nameof(WalkCycleSpeed)].SetValue<float>(value); } }
        public float StartMovingSpeed { get { return this[nameof(StartMovingSpeed)].GetValue<float>(); } set { this[nameof(StartMovingSpeed)].SetValue<float>(value); } }
        public float StopMovingSpeed { get { return this[nameof(StopMovingSpeed)].GetValue<float>(); } set { this[nameof(StopMovingSpeed)].SetValue<float>(value); } }
        public float WalkCycleMinRate { get { return this[nameof(WalkCycleMinRate)].GetValue<float>(); } set { this[nameof(WalkCycleMinRate)].SetValue<float>(value); } }
        public float MeshScale { get { return this[nameof(MeshScale)].GetValue<float>(); } set { this[nameof(MeshScale)].SetValue<float>(value); } }
    }
    public class JellyFishAnimInstance : EnemyAnimInstance
    {
        public JellyFishAnimInstance(nint addr) : base(addr) { }
        public float HorizontalAngle { get { return this[nameof(HorizontalAngle)].GetValue<float>(); } set { this[nameof(HorizontalAngle)].SetValue<float>(value); } }
        public float VerticalSpeed { get { return this[nameof(VerticalSpeed)].GetValue<float>(); } set { this[nameof(VerticalSpeed)].SetValue<float>(value); } }
    }
    public class GliderBeastAnimInstance : EnemyAnimInstance
    {
        public GliderBeastAnimInstance(nint addr) : base(addr) { }
        public float SyncAnimLength { get { return this[nameof(SyncAnimLength)].GetValue<float>(); } set { this[nameof(SyncAnimLength)].SetValue<float>(value); } }
        public GliderAnimSync AnimSync { get { return this[nameof(AnimSync)].As<GliderAnimSync>(); } set { this["AnimSync"] = value; } }
        public bool IsFrozen { get { return this[nameof(IsFrozen)].Flag; } set { this[nameof(IsFrozen)].Flag = value; } }
    }
    public class EnemyAttacker : Interface
    {
        public EnemyAttacker(nint addr) : base(addr) { }
        public float GetAttackDamageModifier() { return Invoke<float>(nameof(GetAttackDamageModifier)); }
    }
    public class EnemyBufferComponent : ActorComponent
    {
        public EnemyBufferComponent(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public Object BufferParticleSocket { get { return this[nameof(BufferParticleSocket)]; } set { this[nameof(BufferParticleSocket)] = value; } }
        public ParticleSystem Particles { get { return this[nameof(Particles)].As<ParticleSystem>(); } set { this["Particles"] = value; } }
        public float ParticleTangentSize { get { return this[nameof(ParticleTangentSize)].GetValue<float>(); } set { this[nameof(ParticleTangentSize)].SetValue<float>(value); } }
        public Object OnBuffingChangedEvent { get { return this[nameof(OnBuffingChangedEvent)]; } set { this[nameof(OnBuffingChangedEvent)] = value; } }
        public float BuffRadius { get { return this[nameof(BuffRadius)].GetValue<float>(); } set { this[nameof(BuffRadius)].SetValue<float>(value); } }
        public int MaxBuffedTargets { get { return this[nameof(MaxBuffedTargets)].GetValue<int>(); } set { this[nameof(MaxBuffedTargets)].SetValue<int>(value); } }
        public GameplayTagQuery BuffQuery { get { return this[nameof(BuffQuery)].As<GameplayTagQuery>(); } set { this["BuffQuery"] = value; } }
        public Object SubclassBuffQuery { get { return this[nameof(SubclassBuffQuery)]; } set { this[nameof(SubclassBuffQuery)] = value; } }
        public UArray<FSDPawn> BuffTargets { get { return new UArray<FSDPawn>(this[nameof(BuffTargets)].Address); } }
        public UArray<ParticleSystemComponent> ParticleInstances { get { return new UArray<ParticleSystemComponent>(this[nameof(ParticleInstances)].Address); } }
        public void SetBuffingEnabled(bool Enabled) { Invoke(nameof(SetBuffingEnabled), Enabled); }
        public void OnPawnDied(HealthComponentBase Health) { Invoke(nameof(OnPawnDied), Health); }
        public void OnOwnerDied(HealthComponentBase Health) { Invoke(nameof(OnOwnerDied), Health); }
    }
    public class EnemyControlStateComponent : CharacterStateComponent
    {
        public EnemyControlStateComponent(nint addr) : base(addr) { }
        public bool UseThirdPersonCam { get { return this[nameof(UseThirdPersonCam)].Flag; } set { this[nameof(UseThirdPersonCam)].Flag = value; } }
        public ControlEnemyState StateData { get { return this[nameof(StateData)].As<ControlEnemyState>(); } set { this["StateData"] = value; } }
        public EEnemyControlState ControlState { get { return (EEnemyControlState)this[nameof(ControlState)].GetValue<int>(); } set { this[nameof(ControlState)].SetValue<int>((int)value); } }
        public Quat AngularVelocity { get { return this[nameof(AngularVelocity)].As<Quat>(); } set { this["AngularVelocity"] = value; } }
        public Quat ControlRotation { get { return this[nameof(ControlRotation)].As<Quat>(); } set { this["ControlRotation"] = value; } }
        public void ServerExit() { Invoke(nameof(ServerExit)); }
        public void OnRep_StateData(ControlEnemyState oldState) { Invoke(nameof(OnRep_StateData), oldState); }
        public void OnRep_ControlState(EEnemyControlState oldState) { Invoke(nameof(OnRep_ControlState), oldState); }
        public void OnEnemyCrashMontageEnded(AnimMontage Montage, bool interrupted) { Invoke(nameof(OnEnemyCrashMontageEnded), Montage, interrupted); }
        public void OnControllingEnemyAttached() { Invoke(nameof(OnControllingEnemyAttached)); }
        public void OnControllingEnemy(bool IsControlling) { Invoke(nameof(OnControllingEnemy), IsControlling); }
        public void JumpPressed() { Invoke(nameof(JumpPressed)); }
        public AIPlayerControlComponent GetAiPlayerControlComponent() { return Invoke<AIPlayerControlComponent>(nameof(GetAiPlayerControlComponent)); }
    }
    public class EnemyDescriptor : DataAsset
    {
        public EnemyDescriptor(nint addr) : base(addr) { }
        public EnemyID EnemyID { get { return this[nameof(EnemyID)].As<EnemyID>(); } set { this["EnemyID"] = value; } }
        public Object EnemyClass { get { return this[nameof(EnemyClass)]; } set { this[nameof(EnemyClass)] = value; } }
        public EVeteranScaling VeteranScaling { get { return (EVeteranScaling)this[nameof(VeteranScaling)].GetValue<int>(); } set { this[nameof(VeteranScaling)].SetValue<int>((int)value); } }
        public UArray<EnemyDescriptor> VeteranClasses { get { return new UArray<EnemyDescriptor>(this[nameof(VeteranClasses)].Address); } }
        public Object BiomeEnemyClassOverrides { get { return this[nameof(BiomeEnemyClassOverrides)]; } set { this[nameof(BiomeEnemyClassOverrides)] = value; } }
        public Object EliteEnemyClass { get { return this[nameof(EliteEnemyClass)]; } set { this[nameof(EliteEnemyClass)] = value; } }
        public Object BannedMissionTypes { get { return this[nameof(BannedMissionTypes)]; } set { this[nameof(BannedMissionTypes)] = value; } }
        public EEnemySignificance EnemySignificance { get { return (EEnemySignificance)this[nameof(EnemySignificance)].GetValue<int>(); } set { this[nameof(EnemySignificance)].SetValue<int>((int)value); } }
        public Vector SpawnOffset { get { return this[nameof(SpawnOffset)].As<Vector>(); } set { this["SpawnOffset"] = value; } }
        public bool UsesSpawnEffects { get { return this[nameof(UsesSpawnEffects)].Flag; } set { this[nameof(UsesSpawnEffects)].Flag = value; } }
        public ECreatureSize CreatureSize { get { return (ECreatureSize)this[nameof(CreatureSize)].GetValue<int>(); } set { this[nameof(CreatureSize)].SetValue<int>((int)value); } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public CaveInfluencer CaveInfluencer { get { return this[nameof(CaveInfluencer)].As<CaveInfluencer>(); } set { this["CaveInfluencer"] = value; } }
        public UArray<EnemyDebris> Debris { get { return new UArray<EnemyDebris>(this[nameof(Debris)].Address); } }
        public float InfluencerRange { get { return this[nameof(InfluencerRange)].GetValue<float>(); } set { this[nameof(InfluencerRange)].SetValue<float>(value); } }
        public Object PlacementCarver { get { return this[nameof(PlacementCarver)]; } set { this[nameof(PlacementCarver)] = value; } }
        public DeepPathFinderType PathfinderType { get { return (DeepPathFinderType)this[nameof(PathfinderType)].GetValue<int>(); } set { this[nameof(PathfinderType)].SetValue<int>((int)value); } }
        public GameplayTagQuery PlacementRoomQuery { get { return this[nameof(PlacementRoomQuery)].As<GameplayTagQuery>(); } set { this["PlacementRoomQuery"] = value; } }
        public float SpawnSpread { get { return this[nameof(SpawnSpread)].GetValue<float>(); } set { this[nameof(SpawnSpread)].SetValue<float>(value); } }
        public int IdealSpawnSize { get { return this[nameof(IdealSpawnSize)].GetValue<int>(); } set { this[nameof(IdealSpawnSize)].SetValue<int>(value); } }
        public bool CanBeUsedForConstantPressure { get { return this[nameof(CanBeUsedForConstantPressure)].Flag; } set { this[nameof(CanBeUsedForConstantPressure)].Flag = value; } }
        public bool CanBeUsedInEncounters { get { return this[nameof(CanBeUsedInEncounters)].Flag; } set { this[nameof(CanBeUsedInEncounters)].Flag = value; } }
        public float DifficultyRating { get { return this[nameof(DifficultyRating)].GetValue<float>(); } set { this[nameof(DifficultyRating)].SetValue<float>(value); } }
        public int MinSpawnCount { get { return this[nameof(MinSpawnCount)].GetValue<int>(); } set { this[nameof(MinSpawnCount)].SetValue<int>(value); } }
        public int MaxSpawnCount { get { return this[nameof(MaxSpawnCount)].GetValue<int>(); } set { this[nameof(MaxSpawnCount)].SetValue<int>(value); } }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
        public float SpawnAmountModifier { get { return this[nameof(SpawnAmountModifier)].GetValue<float>(); } set { this[nameof(SpawnAmountModifier)].SetValue<float>(value); } }
        public int RequiredMainCampaignProgress { get { return this[nameof(RequiredMainCampaignProgress)].GetValue<int>(); } set { this[nameof(RequiredMainCampaignProgress)].SetValue<int>(value); } }
        public bool UsesSpawnRarityModifiers { get { return this[nameof(UsesSpawnRarityModifiers)].Flag; } set { this[nameof(UsesSpawnRarityModifiers)].Flag = value; } }
        public UArray<SpawnRarityItem> SpawnRarityModifiers { get { return new UArray<SpawnRarityItem>(this[nameof(SpawnRarityModifiers)].Address); } }
        public EEnemyDescriptorCheatClass CheatClass { get { return (EEnemyDescriptorCheatClass)this[nameof(CheatClass)].GetValue<int>(); } set { this[nameof(CheatClass)].SetValue<int>((int)value); } }
        public Object GetEnemyClass(Biome Biome, bool IsElite) { return Invoke<Object>(nameof(GetEnemyClass), Biome, IsElite); }
        public UArray<EnemyDescriptor> FindDescriptorsForCheatMenu(EEnemyDescriptorCheatClass CheatClass) { return Invoke<UArray<EnemyDescriptor>>(nameof(FindDescriptorsForCheatMenu), CheatClass); }
        public UArray<EnemyDescriptor> FindAllDescriptorsForCheatMenu() { return Invoke<UArray<EnemyDescriptor>>(nameof(FindAllDescriptorsForCheatMenu)); }
    }
    public class HealthComponentBase : ActorComponent
    {
        public HealthComponentBase(nint addr) : base(addr) { }
        public Object OnHealthChanged { get { return this[nameof(OnHealthChanged)]; } set { this[nameof(OnHealthChanged)] = value; } }
        public Object OnDamageHealed { get { return this[nameof(OnDamageHealed)]; } set { this[nameof(OnDamageHealed)] = value; } }
        public Object OnDamageTaken { get { return this[nameof(OnDamageTaken)]; } set { this[nameof(OnDamageTaken)] = value; } }
        public Object OnHit { get { return this[nameof(OnHit)]; } set { this[nameof(OnHit)] = value; } }
        public Object OnBodypartHit { get { return this[nameof(OnBodypartHit)]; } set { this[nameof(OnBodypartHit)] = value; } }
        public Object OnDeath { get { return this[nameof(OnDeath)]; } set { this[nameof(OnDeath)] = value; } }
        public Object OnRadialDamage { get { return this[nameof(OnRadialDamage)]; } set { this[nameof(OnRadialDamage)] = value; } }
        public Object OnHitByHitScan { get { return this[nameof(OnHitByHitScan)]; } set { this[nameof(OnHitByHitScan)] = value; } }
        public Object OnCanTakeDamageChanged { get { return this[nameof(OnCanTakeDamageChanged)]; } set { this[nameof(OnCanTakeDamageChanged)] = value; } }
        public bool ShowLaserPointMarkerWhenDead { get { return this[nameof(ShowLaserPointMarkerWhenDead)].Flag; } set { this[nameof(ShowLaserPointMarkerWhenDead)].Flag = value; } }
        public bool canTakeDamage { get { return this[nameof(canTakeDamage)].Flag; } set { this[nameof(canTakeDamage)].Flag = value; } }
        public bool PassthroughTemperatureDamage { get { return this[nameof(PassthroughTemperatureDamage)].Flag; } set { this[nameof(PassthroughTemperatureDamage)].Flag = value; } }
        public float TakeRadialDamage(float damageAmount, Vector BlastCenter, float BlastRadius, float MaxDamageRadius, float MinDamagePct, DamageData DamageData) { return Invoke<float>(nameof(TakeRadialDamage), damageAmount, BlastCenter, BlastRadius, MaxDamageRadius, MinDamagePct, DamageData); }
        public void TakeDamageSimple(float damageAmount, Actor DamageCauser, DamageClass DamageClass) { Invoke(nameof(TakeDamageSimple), damageAmount, DamageCauser, DamageClass); }
        public void SetHealthDirectly(float newHealthValue) { Invoke(nameof(SetHealthDirectly), newHealthValue); }
        public void SetCanTakeDamage(bool canTakeDamage) { Invoke(nameof(SetCanTakeDamage), canTakeDamage); }
        public void Kill(Actor DamageCauser) { Invoke(nameof(Kill), DamageCauser); }
        public bool IsDead() { return Invoke<bool>(nameof(IsDead)); }
        public bool IsAlive() { return Invoke<bool>(nameof(IsAlive)); }
        public float Heal(float amount) { return Invoke<float>(nameof(Heal), amount); }
        public bool GetShowHealthBar() { return Invoke<bool>(nameof(GetShowHealthBar)); }
        public float GetHealthPct() { return Invoke<float>(nameof(GetHealthPct)); }
        public Object GetHealthComponentForCollider(PrimitiveComponent Primitive) { return Invoke<Object>(nameof(GetHealthComponentForCollider), Primitive); }
        public Vector GetHealthBarWorldOffset() { return Invoke<Vector>(nameof(GetHealthBarWorldOffset)); }
        public float GetHealth() { return Invoke<float>(nameof(GetHealth)); }
        public ParticleSystem GetGenericImpactParticles() { return Invoke<ParticleSystem>(nameof(GetGenericImpactParticles)); }
        public bool GetCanTakeDamage() { return Invoke<bool>(nameof(GetCanTakeDamage)); }
        public bool CanTakeDamageFrom(DamageClass DamageClass) { return Invoke<bool>(nameof(CanTakeDamageFrom), DamageClass); }
        public void CanTakeDamageDelegate__DelegateSignature(bool OutCanTakeDamage) { Invoke(nameof(CanTakeDamageDelegate__DelegateSignature), OutCanTakeDamage); }
    }
    public class HealthComponent : HealthComponentBase
    {
        public HealthComponent(nint addr) : base(addr) { }
        public Object OnArmorChanged { get { return this[nameof(OnArmorChanged)]; } set { this[nameof(OnArmorChanged)] = value; } }
        public Object OnArmorDamaged { get { return this[nameof(OnArmorDamaged)]; } set { this[nameof(OnArmorDamaged)] = value; } }
        public Object OnArmorHealed { get { return this[nameof(OnArmorHealed)]; } set { this[nameof(OnArmorHealed)] = value; } }
        public Object OnDeathDetailed { get { return this[nameof(OnDeathDetailed)]; } set { this[nameof(OnDeathDetailed)] = value; } }
        public Object OnNewHealthSegment { get { return this[nameof(OnNewHealthSegment)]; } set { this[nameof(OnNewHealthSegment)] = value; } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public UArray<float> HealthSegmentSizes { get { return new UArray<float>(this[nameof(HealthSegmentSizes)].Address); } }
        public bool CanDamageThroughSegments { get { return this[nameof(CanDamageThroughSegments)].Flag; } set { this[nameof(CanDamageThroughSegments)].Flag = value; } }
        public Actor LastDamageCauser { get { return this[nameof(LastDamageCauser)].As<Actor>(); } set { this["LastDamageCauser"] = value; } }
        public UArray<SubHealthComponent> SubHealthComponents { get { return new UArray<SubHealthComponent>(this[nameof(SubHealthComponents)].Address); } }
        public bool ShouldUseLargestSubhealthDamageTaken { get { return this[nameof(ShouldUseLargestSubhealthDamageTaken)].Flag; } set { this[nameof(ShouldUseLargestSubhealthDamageTaken)].Flag = value; } }
        public bool InvulnerableToNonDefinedResistances { get { return this[nameof(InvulnerableToNonDefinedResistances)].Flag; } set { this[nameof(InvulnerableToNonDefinedResistances)].Flag = value; } }
        public Object Resistances { get { return this[nameof(Resistances)]; } set { this[nameof(Resistances)] = value; } }
        public float EnvironmentalDamageResistance { get { return this[nameof(EnvironmentalDamageResistance)].GetValue<float>(); } set { this[nameof(EnvironmentalDamageResistance)].SetValue<float>(value); } }
        public bool AffectedByGlobalWeakpointDamageMultiplier { get { return this[nameof(AffectedByGlobalWeakpointDamageMultiplier)].Flag; } set { this[nameof(AffectedByGlobalWeakpointDamageMultiplier)].Flag = value; } }
        public bool UseDormancy { get { return this[nameof(UseDormancy)].Flag; } set { this[nameof(UseDormancy)].Flag = value; } }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public void ToggleCanTakeDamage() { Invoke(nameof(ToggleCanTakeDamage)); }
        public float TakePercentDamage(float PercentOfMax, DamageData DamageData) { return Invoke<float>(nameof(TakePercentDamage), PercentOfMax, DamageData); }
        public void Resupply(float percentage) { Invoke(nameof(Resupply), percentage); }
        public void OnRep_Damage(float oldDamage) { Invoke(nameof(OnRep_Damage), oldDamage); }
        public void HealArmor(float amount) { Invoke(nameof(HealArmor), amount); }
        public bool HasArmor() { return Invoke<bool>(nameof(HasArmor)); }
        public float GetMaxArmor() { return Invoke<float>(nameof(GetMaxArmor)); }
        public EHealthbarType GetHealthbarType() { return Invoke<EHealthbarType>(nameof(GetHealthbarType)); }
        public void GetCurrentHealthSegment(int Segment, float segmentHealth, float segmentHealthPercent) { Invoke(nameof(GetCurrentHealthSegment), Segment, segmentHealth, segmentHealthPercent); }
        public float GetArmorPct() { return Invoke<float>(nameof(GetArmorPct)); }
        public float GetArmor() { return Invoke<float>(nameof(GetArmor)); }
        public void Client_ReceivedHit(float amount, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(Client_ReceivedHit), amount, DamageData, anyHealthLost); }
    }
    public class EnemyHealthComponent : HealthComponent
    {
        public EnemyHealthComponent(nint addr) : base(addr) { }
        public EEnemyHealthScaling EnemyHealthScaling { get { return (EEnemyHealthScaling)this[nameof(EnemyHealthScaling)].GetValue<int>(); } set { this[nameof(EnemyHealthScaling)].SetValue<int>((int)value); } }
        public float Courage { get { return this[nameof(Courage)].GetValue<float>(); } set { this[nameof(Courage)].SetValue<float>(value); } }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public bool bShowHealthBar { get { return this[nameof(bShowHealthBar)].Flag; } set { this[nameof(bShowHealthBar)].Flag = value; } }
        public Vector HealthBarOffsetWorld { get { return this[nameof(HealthBarOffsetWorld)].As<Vector>(); } set { this["HealthBarOffsetWorld"] = value; } }
        public bool bIsBossFight { get { return this[nameof(bIsBossFight)].Flag; } set { this[nameof(bIsBossFight)].Flag = value; } }
        public int BossFightHealthBarSegments { get { return this[nameof(BossFightHealthBarSegments)].GetValue<int>(); } set { this[nameof(BossFightHealthBarSegments)].SetValue<int>(value); } }
        public bool bRegisterEnemy { get { return this[nameof(bRegisterEnemy)].Flag; } set { this[nameof(bRegisterEnemy)].Flag = value; } }
        public float GetMaxHealth() { return Invoke<float>(nameof(GetMaxHealth)); }
    }
    public class EnemyLineOfSightComponent : ActorComponent
    {
        public EnemyLineOfSightComponent(nint addr) : base(addr) { }
        public Object OnGaindedLineOfSight { get { return this[nameof(OnGaindedLineOfSight)]; } set { this[nameof(OnGaindedLineOfSight)] = value; } }
        public Object OnLostLineOfSight { get { return this[nameof(OnLostLineOfSight)]; } set { this[nameof(OnLostLineOfSight)] = value; } }
        public MeshComponent OwnerMesh { get { return this[nameof(OwnerMesh)].As<MeshComponent>(); } set { this["OwnerMesh"] = value; } }
        public Object LoSFromSocketName { get { return this[nameof(LoSFromSocketName)]; } set { this[nameof(LoSFromSocketName)] = value; } }
        public float LoSInterval { get { return this[nameof(LoSInterval)].GetValue<float>(); } set { this[nameof(LoSInterval)].SetValue<float>(value); } }
        public float LoSIntervalVariance { get { return this[nameof(LoSIntervalVariance)].GetValue<float>(); } set { this[nameof(LoSIntervalVariance)].SetValue<float>(value); } }
        public bool AutoSetupOwnerMesh { get { return this[nameof(AutoSetupOwnerMesh)].Flag; } set { this[nameof(AutoSetupOwnerMesh)].Flag = value; } }
        public bool HasLineOfSight() { return Invoke<bool>(nameof(HasLineOfSight)); }
        public bool GetIsDetecting() { return Invoke<bool>(nameof(GetIsDetecting)); }
        public void AsyncTrace() { Invoke(nameof(AsyncTrace)); }
    }
    public class EnemyMeleeAttackAnimNotify : AnimNotify
    {
        public EnemyMeleeAttackAnimNotify(nint addr) : base(addr) { }
        public Object AttackTag { get { return this[nameof(AttackTag)]; } set { this[nameof(AttackTag)] = value; } }
    }
    public class EnemyMinersManualData : DataAsset
    {
        public EnemyMinersManualData(nint addr) : base(addr) { }
        public EnemyID EnemyID { get { return this[nameof(EnemyID)].As<EnemyID>(); } set { this["EnemyID"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public UArray<Object> GameplayTips { get { return new UArray<Object>(this[nameof(GameplayTips)].Address); } }
        public EEnemyFamily Family { get { return (EEnemyFamily)this[nameof(Family)].GetValue<int>(); } set { this[nameof(Family)].SetValue<int>((int)value); } }
        public EEnemyType EnemyType { get { return (EEnemyType)this[nameof(EnemyType)].GetValue<int>(); } set { this[nameof(EnemyType)].SetValue<int>((int)value); } }
        public UArray<EnemyAttackDescription> AttackType { get { return new UArray<EnemyAttackDescription>(this[nameof(AttackType)].Address); } }
        public UArray<EnemyAttackDescription> SpecialAttacks { get { return new UArray<EnemyAttackDescription>(this[nameof(SpecialAttacks)].Address); } }
        public UArray<AnimSequenceBase> AttackAnimations { get { return new UArray<AnimSequenceBase>(this[nameof(AttackAnimations)].Address); } }
        public EArmorType ArmorType { get { return (EArmorType)this[nameof(ArmorType)].GetValue<int>(); } set { this[nameof(ArmorType)].SetValue<int>((int)value); } }
        public Object Armor { get { return this[nameof(Armor)]; } set { this[nameof(Armor)] = value; } }
        public Object Weakpoint { get { return this[nameof(Weakpoint)]; } set { this[nameof(Weakpoint)] = value; } }
        public EnemyMinersManualStats EnemyStats { get { return this[nameof(EnemyStats)].As<EnemyMinersManualStats>(); } set { this["EnemyStats"] = value; } }
        public UArray<EDamageType> Resistances { get { return new UArray<EDamageType>(this[nameof(Resistances)].Address); } }
        public UArray<EDamageType> Weaknesses { get { return new UArray<EDamageType>(this[nameof(Weaknesses)].Address); } }
        public UArray<Object> LoreInfo { get { return new UArray<Object>(this[nameof(LoreInfo)].Address); } }
        public bool AlwaysUnlocked { get { return this[nameof(AlwaysUnlocked)].Flag; } set { this[nameof(AlwaysUnlocked)].Flag = value; } }
        public int InfoUnlockSpeed { get { return this[nameof(InfoUnlockSpeed)].GetValue<int>(); } set { this[nameof(InfoUnlockSpeed)].SetValue<int>(value); } }
        public Object EnemyIcon { get { return this[nameof(EnemyIcon)]; } set { this[nameof(EnemyIcon)] = value; } }
        public Object PreviewActor { get { return this[nameof(PreviewActor)]; } set { this[nameof(PreviewActor)] = value; } }
        public Texture2D GetEnemyIcon() { return Invoke<Texture2D>(nameof(GetEnemyIcon)); }
    }
    public class EnemyRangedAttackAnimNotify : AnimNotify
    {
        public EnemyRangedAttackAnimNotify(nint addr) : base(addr) { }
    }
    public class StopLeadingNotify : AnimNotify
    {
        public StopLeadingNotify(nint addr) : base(addr) { }
    }
    public class EnemySettings : DataAsset
    {
        public EnemySettings(nint addr) : base(addr) { }
        public RandRange EnemyWaveRange { get { return this[nameof(EnemyWaveRange)].As<RandRange>(); } set { this["EnemyWaveRange"] = value; } }
        public Object EnemyDescriptor { get { return this[nameof(EnemyDescriptor)]; } set { this[nameof(EnemyDescriptor)] = value; } }
        public GameplayTagQuery EliteAllowQuery { get { return this[nameof(EliteAllowQuery)].As<GameplayTagQuery>(); } set { this["EliteAllowQuery"] = value; } }
        public Object HeroEnemies { get { return this[nameof(HeroEnemies)]; } set { this[nameof(HeroEnemies)] = value; } }
        public RandFloatInterval HeroEnemySpawn { get { return this[nameof(HeroEnemySpawn)].As<RandFloatInterval>(); } set { this["HeroEnemySpawn"] = value; } }
        public int EliteRequiredCampaignProgress { get { return this[nameof(EliteRequiredCampaignProgress)].GetValue<int>(); } set { this[nameof(EliteRequiredCampaignProgress)].SetValue<int>(value); } }
        public UArray<Object> ExplodingEnemiesDamageComponents { get { return new UArray<Object>(this[nameof(ExplodingEnemiesDamageComponents)].Address); } }
    }
    public class EnemySpawnManager : ActorComponent
    {
        public EnemySpawnManager(nint addr) : base(addr) { }
        public Object OnEnemyDestroyed { get { return this[nameof(OnEnemyDestroyed)]; } set { this[nameof(OnEnemyDestroyed)] = value; } }
        public Object OnEnemyDied { get { return this[nameof(OnEnemyDied)]; } set { this[nameof(OnEnemyDied)] = value; } }
        public Object OnEnemySpawned { get { return this[nameof(OnEnemySpawned)]; } set { this[nameof(OnEnemySpawned)] = value; } }
        public SpawnEffectsComponent SpawnEffects { get { return this[nameof(SpawnEffects)].As<SpawnEffectsComponent>(); } set { this["SpawnEffects"] = value; } }
        public UArray<Pawn> ActiveEnemies { get { return new UArray<Pawn>(this[nameof(ActiveEnemies)].Address); } }
        public UArray<Pawn> ActiveSwarmerEnemies { get { return new UArray<Pawn>(this[nameof(ActiveSwarmerEnemies)].Address); } }
        public UArray<Object> ActiveGlobalStatusEffects { get { return new UArray<Object>(this[nameof(ActiveGlobalStatusEffects)].Address); } }
        public Object SpawnRarityModifiers { get { return this[nameof(SpawnRarityModifiers)]; } set { this[nameof(SpawnRarityModifiers)] = value; } }
        public UArray<Pawn> ActiveCritters { get { return new UArray<Pawn>(this[nameof(ActiveCritters)].Address); } }
        public UArray<Pawn> CritcalEnemies { get { return new UArray<Pawn>(this[nameof(CritcalEnemies)].Address); } }
        public int MaxActiveEnemies { get { return this[nameof(MaxActiveEnemies)].GetValue<int>(); } set { this[nameof(MaxActiveEnemies)].SetValue<int>(value); } }
        public int MaxActiveSwarmers { get { return this[nameof(MaxActiveSwarmers)].GetValue<int>(); } set { this[nameof(MaxActiveSwarmers)].SetValue<int>(value); } }
        public int MaxActiveCritters { get { return this[nameof(MaxActiveCritters)].GetValue<int>(); } set { this[nameof(MaxActiveCritters)].SetValue<int>(value); } }
        public float MaxDistanceBeforeCleanup { get { return this[nameof(MaxDistanceBeforeCleanup)].GetValue<float>(); } set { this[nameof(MaxDistanceBeforeCleanup)].SetValue<float>(value); } }
        public GameplayTag SwarmerTag { get { return this[nameof(SwarmerTag)].As<GameplayTag>(); } set { this["SwarmerTag"] = value; } }
        public GameplayTag RegularTag { get { return this[nameof(RegularTag)].As<GameplayTag>(); } set { this["RegularTag"] = value; } }
        public GameplayTag CritterTag { get { return this[nameof(CritterTag)].As<GameplayTag>(); } set { this["CritterTag"] = value; } }
        public ProceduralSetup ProceduralSetup { get { return this[nameof(ProceduralSetup)].As<ProceduralSetup>(); } set { this["ProceduralSetup"] = value; } }
        public UArray<SpawnQueueItem> SpawnQueue { get { return new UArray<SpawnQueueItem>(this[nameof(SpawnQueue)].Address); } }
        public bool bDestroyingAllEnemies { get { return this[nameof(bDestroyingAllEnemies)].Flag; } set { this[nameof(bDestroyingAllEnemies)].Flag = value; } }
        public EliteEnemiesMutator EliteMutator { get { return this[nameof(EliteMutator)].As<EliteEnemiesMutator>(); } set { this["EliteMutator"] = value; } }
        public DifficultyManager DifficultyManager { get { return this[nameof(DifficultyManager)].As<DifficultyManager>(); } set { this["DifficultyManager"] = value; } }
        public void SpawnerDestroyed(Pawn Actor) { Invoke(nameof(SpawnerDestroyed), Actor); }
        public bool SpawnEnemy(EnemyDescriptor descriptor, Transform Transform, Object Callback, bool useSpawnFX, bool Alert) { return Invoke<bool>(nameof(SpawnEnemy), descriptor, Transform, Callback, useSpawnFX, Alert); }
        public void SetSpawningEnabled(bool newSpawningEnabled) { Invoke(nameof(SetSpawningEnabled), newSpawningEnabled); }
        public void RemoveGlobalStatusEffect(Object StatusEffect) { Invoke(nameof(RemoveGlobalStatusEffect), StatusEffect); }
        public void RegisterSpawner(Pawn Actor) { Invoke(nameof(RegisterSpawner), Actor); }
        public void RegisterSpawnedEnemy(Actor enemy) { Invoke(nameof(RegisterSpawnedEnemy), enemy); }
        public void PromoteToCritical(Pawn Pawn) { Invoke(nameof(PromoteToCritical), Pawn); }
        public void OnMatchStarted() { Invoke(nameof(OnMatchStarted)); }
        public void OnMatchEnded() { Invoke(nameof(OnMatchEnded)); }
        public bool GetSpawningEnabled() { return Invoke<bool>(nameof(GetSpawningEnabled)); }
        public Pawn FindEnemyByClass(Object PawnClass, bool isSwarmerEnemy) { return Invoke<Pawn>(nameof(FindEnemyByClass), PawnClass, isSwarmerEnemy); }
        public UArray<Pawn> FindEnemiesByClass(Object PawnClass, bool isSwarmerEnemy) { return Invoke<UArray<Pawn>>(nameof(FindEnemiesByClass), PawnClass, isSwarmerEnemy); }
        public void EnemyDestroyed(Actor Actor) { Invoke(nameof(EnemyDestroyed), Actor); }
        public void EnemyDeath(HealthComponentBase HealthComponent) { Invoke(nameof(EnemyDeath), HealthComponent); }
        public void DestroyAllEnemies() { Invoke(nameof(DestroyAllEnemies)); }
        public bool CanSpawn(EnemyDescriptor EnemyDescriptor) { return Invoke<bool>(nameof(CanSpawn), EnemyDescriptor); }
        public void AddGlobalStatusEffect(Object StatusEffect) { Invoke(nameof(AddGlobalStatusEffect), StatusEffect); }
    }
    public class SpawnEffectsComponent : ActorComponent
    {
        public SpawnEffectsComponent(nint addr) : base(addr) { }
        public SpawnEffectsArray ActiveEffects { get { return this[nameof(ActiveEffects)].As<SpawnEffectsArray>(); } set { this["ActiveEffects"] = value; } }
        public MaterialInstance BiomeMaterialOverride { get { return this[nameof(BiomeMaterialOverride)].As<MaterialInstance>(); } set { this["BiomeMaterialOverride"] = value; } }
    }
    public class PheromoneSpawnerComponent : ActorComponent
    {
        public PheromoneSpawnerComponent(nint addr) : base(addr) { }
        public RandRange SpawnInterval { get { return this[nameof(SpawnInterval)].As<RandRange>(); } set { this["SpawnInterval"] = value; } }
        public float AttackPositioningCostModifier { get { return this[nameof(AttackPositioningCostModifier)].GetValue<float>(); } set { this[nameof(AttackPositioningCostModifier)].SetValue<float>(value); } }
        public EnemyDescriptor enemy { get { return this[nameof(enemy)].As<EnemyDescriptor>(); } set { this["enemy"] = value; } }
        public Object InfectedActors { get { return this[nameof(InfectedActors)]; } set { this[nameof(InfectedActors)] = value; } }
    }
    public class EnemyDetonationSetting : DataAsset
    {
        public EnemyDetonationSetting(nint addr) : base(addr) { }
        public DamageComponent FireDamage { get { return this[nameof(FireDamage)].As<DamageComponent>(); } set { this["FireDamage"] = value; } }
        public NiagaraSystem FireParticles { get { return this[nameof(FireParticles)].As<NiagaraSystem>(); } set { this["FireParticles"] = value; } }
        public SoundCue FireSound { get { return this[nameof(FireSound)].As<SoundCue>(); } set { this["FireSound"] = value; } }
        public DamageComponent IceDamage { get { return this[nameof(IceDamage)].As<DamageComponent>(); } set { this["IceDamage"] = value; } }
        public NiagaraSystem IceParticles { get { return this[nameof(IceParticles)].As<NiagaraSystem>(); } set { this["IceParticles"] = value; } }
        public SoundCue IceSound { get { return this[nameof(IceSound)].As<SoundCue>(); } set { this["IceSound"] = value; } }
    }
    public class TemperatureComponent : ActorComponent
    {
        public TemperatureComponent(nint addr) : base(addr) { }
        public Object OnTemperatureStatusChanged { get { return this[nameof(OnTemperatureStatusChanged)]; } set { this[nameof(OnTemperatureStatusChanged)] = value; } }
        public float FrozenDamageBonusScale { get { return this[nameof(FrozenDamageBonusScale)].GetValue<float>(); } set { this[nameof(FrozenDamageBonusScale)].SetValue<float>(value); } }
        public bool TryPushHeatSource(Actor Target, float temperature, ETemperatureIntensity Intensity) { return Invoke<bool>(nameof(TryPushHeatSource), Target, temperature, Intensity); }
        public bool TryPopHeatSource(Actor Target, float temperature, ETemperatureIntensity Intensity) { return Invoke<bool>(nameof(TryPopHeatSource), Target, temperature, Intensity); }
        public void ResetTemperature() { Invoke(nameof(ResetTemperature)); }
        public bool IsOnFire() { return Invoke<bool>(nameof(IsOnFire)); }
        public bool IsFrozen() { return Invoke<bool>(nameof(IsFrozen)); }
        public float GetCurrentTemperature() { return Invoke<float>(nameof(GetCurrentTemperature)); }
        public void ChangeTemperature(float Degrees, Actor Source) { Invoke(nameof(ChangeTemperature), Degrees, Source); }
    }
    public class EnemyTemperatureComponent : TemperatureComponent
    {
        public EnemyTemperatureComponent(nint addr) : base(addr) { }
        public float UpdateTime { get { return this[nameof(UpdateTime)].GetValue<float>(); } set { this[nameof(UpdateTime)].SetValue<float>(value); } }
        public bool DieIfFrozen { get { return this[nameof(DieIfFrozen)].Flag; } set { this[nameof(DieIfFrozen)].Flag = value; } }
        public bool DieIfBurning { get { return this[nameof(DieIfBurning)].Flag; } set { this[nameof(DieIfBurning)].Flag = value; } }
        public float TemperatureChangeScale { get { return this[nameof(TemperatureChangeScale)].GetValue<float>(); } set { this[nameof(TemperatureChangeScale)].SetValue<float>(value); } }
        public float BurnTemperature { get { return this[nameof(BurnTemperature)].GetValue<float>(); } set { this[nameof(BurnTemperature)].SetValue<float>(value); } }
        public float DouseFireTemperature { get { return this[nameof(DouseFireTemperature)].GetValue<float>(); } set { this[nameof(DouseFireTemperature)].SetValue<float>(value); } }
        public float FreezeTemperature { get { return this[nameof(FreezeTemperature)].GetValue<float>(); } set { this[nameof(FreezeTemperature)].SetValue<float>(value); } }
        public float UnFreezeTemperature { get { return this[nameof(UnFreezeTemperature)].GetValue<float>(); } set { this[nameof(UnFreezeTemperature)].SetValue<float>(value); } }
        public int WarmingRate { get { return this[nameof(WarmingRate)].GetValue<int>(); } set { this[nameof(WarmingRate)].SetValue<int>(value); } }
        public int CoolingRate { get { return this[nameof(CoolingRate)].GetValue<int>(); } set { this[nameof(CoolingRate)].SetValue<int>(value); } }
        public bool IsHeatsourceWhenOnFire { get { return this[nameof(IsHeatsourceWhenOnFire)].Flag; } set { this[nameof(IsHeatsourceWhenOnFire)].Flag = value; } }
        public float OnFireHeatRange { get { return this[nameof(OnFireHeatRange)].GetValue<float>(); } set { this[nameof(OnFireHeatRange)].SetValue<float>(value); } }
        public float MaxColdSlowdown { get { return this[nameof(MaxColdSlowdown)].GetValue<float>(); } set { this[nameof(MaxColdSlowdown)].SetValue<float>(value); } }
        public EnemyDetonationSetting DetonationSetting { get { return this[nameof(DetonationSetting)].As<EnemyDetonationSetting>(); } set { this["DetonationSetting"] = value; } }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public int WarmingCooldown { get { return this[nameof(WarmingCooldown)].GetValue<int>(); } set { this[nameof(WarmingCooldown)].SetValue<int>(value); } }
        public byte FireDetonationStack { get { return this[nameof(FireDetonationStack)].GetValue<byte>(); } set { this[nameof(FireDetonationStack)].SetValue<byte>(value); } }
        public byte IceDetonationStack { get { return this[nameof(IceDetonationStack)].GetValue<byte>(); } set { this[nameof(IceDetonationStack)].SetValue<byte>(value); } }
        public void TimerCallback() { Invoke(nameof(TimerCallback)); }
        public void OnDeath(HealthComponent HealthComponent, float damageAmount, DamageData DamageData, UArray<DamageTag> Tags) { Invoke(nameof(OnDeath), HealthComponent, damageAmount, DamageData, Tags); }
        public void DoTemperatureShock(StatusEffectsComponent Status, Actor Source) { Invoke(nameof(DoTemperatureShock), Status, Source); }
        public void All_IceDetonation() { Invoke(nameof(All_IceDetonation)); }
        public void All_FireDetonation() { Invoke(nameof(All_FireDetonation)); }
    }
    public class EnemyTemperatureReplicatorComponent : ActorComponent
    {
        public EnemyTemperatureReplicatorComponent(nint addr) : base(addr) { }
        public Object OnTemperatureEffectChanged { get { return this[nameof(OnTemperatureEffectChanged)]; } set { this[nameof(OnTemperatureEffectChanged)] = value; } }
        public Object OnIsFrozenChanged { get { return this[nameof(OnIsFrozenChanged)]; } set { this[nameof(OnIsFrozenChanged)] = value; } }
        public Object OnIsOnFireChanged { get { return this[nameof(OnIsOnFireChanged)]; } set { this[nameof(OnIsOnFireChanged)] = value; } }
        public Object EnemyTemperatureComponent { get { return this[nameof(EnemyTemperatureComponent)]; } set { this[nameof(EnemyTemperatureComponent)] = value; } }
        public int TemperatureEffect { get { return this[nameof(TemperatureEffect)].GetValue<int>(); } set { this[nameof(TemperatureEffect)].SetValue<int>(value); } }
        public bool bIsFrozen { get { return this[nameof(bIsFrozen)].Flag; } set { this[nameof(bIsFrozen)].Flag = value; } }
        public bool bIsOnFire { get { return this[nameof(bIsOnFire)].Flag; } set { this[nameof(bIsOnFire)].Flag = value; } }
        public void OnRep_TemperatureEffect() { Invoke(nameof(OnRep_TemperatureEffect)); }
        public void OnRep_IsOnFire() { Invoke(nameof(OnRep_IsOnFire)); }
        public void OnRep_IsFrozen() { Invoke(nameof(OnRep_IsFrozen)); }
        public bool IsOnFire() { return Invoke<bool>(nameof(IsOnFire)); }
        public bool IsFrozen() { return Invoke<bool>(nameof(IsFrozen)); }
        public float GetTemperatureEffect() { return Invoke<float>(nameof(GetTemperatureEffect)); }
    }
    public class EnemyWaveController : Object
    {
        public EnemyWaveController(nint addr) : base(addr) { }
        public bool IsComplete { get { return this[nameof(IsComplete)].Flag; } set { this[nameof(IsComplete)].Flag = value; } }
        public bool IsSuitableForSolo { get { return this[nameof(IsSuitableForSolo)].Flag; } set { this[nameof(IsSuitableForSolo)].Flag = value; } }
        public void StartWave() { Invoke(nameof(StartWave)); }
        public void ResumeWave() { Invoke(nameof(ResumeWave)); }
        public void PauseWave() { Invoke(nameof(PauseWave)); }
        public void OnWaveCompleted() { Invoke(nameof(OnWaveCompleted)); }
    }
    public class EnemyWaveManager : ActorComponent
    {
        public EnemyWaveManager(nint addr) : base(addr) { }
        public Object AlwaysRunningWave { get { return this[nameof(AlwaysRunningWave)]; } set { this[nameof(AlwaysRunningWave)] = value; } }
        public UArray<WaveEntry> ScriptedWaves { get { return new UArray<WaveEntry>(this[nameof(ScriptedWaves)].Address); } }
        public UArray<WaveEntry> EndMissionWaves { get { return new UArray<WaveEntry>(this[nameof(EndMissionWaves)].Address); } }
        public UArray<EnemyWaveController> ActiveScriptedWaves { get { return new UArray<EnemyWaveController>(this[nameof(ActiveScriptedWaves)].Address); } }
        public float StartDelay { get { return this[nameof(StartDelay)].GetValue<float>(); } set { this[nameof(StartDelay)].SetValue<float>(value); } }
        public float spawnRadiusFromSpawnPoint { get { return this[nameof(spawnRadiusFromSpawnPoint)].GetValue<float>(); } set { this[nameof(spawnRadiusFromSpawnPoint)].SetValue<float>(value); } }
        public bool ScriptedWavesEnabled { get { return this[nameof(ScriptedWavesEnabled)].Flag; } set { this[nameof(ScriptedWavesEnabled)].Flag = value; } }
        public bool NormalWavesEnabled { get { return this[nameof(NormalWavesEnabled)].Flag; } set { this[nameof(NormalWavesEnabled)].Flag = value; } }
        public bool OverrideDifficultyScriptedWaveInternal { get { return this[nameof(OverrideDifficultyScriptedWaveInternal)].Flag; } set { this[nameof(OverrideDifficultyScriptedWaveInternal)].Flag = value; } }
        public RandRange OverrideScriptedWaveInterval { get { return this[nameof(OverrideScriptedWaveInterval)].As<RandRange>(); } set { this["OverrideScriptedWaveInterval"] = value; } }
        public FSDGameMode GameMode { get { return this[nameof(GameMode)].As<FSDGameMode>(); } set { this["GameMode"] = value; } }
        public EnemySpawnManager SpawnManager { get { return this[nameof(SpawnManager)].As<EnemySpawnManager>(); } set { this["SpawnManager"] = value; } }
        public UArray<Object> NormalWavesBlockStack { get { return new UArray<Object>(this[nameof(NormalWavesBlockStack)].Address); } }
        public UArray<Object> ScriptedWavesBlockStack { get { return new UArray<Object>(this[nameof(ScriptedWavesBlockStack)].Address); } }
        public EnemyWaveController TriggerWave(Object waveClass) { return Invoke<EnemyWaveController>(nameof(TriggerWave), waveClass); }
        public void TriggerEndWave(bool cancelAllWaves) { Invoke(nameof(TriggerEndWave), cancelAllWaves); }
        public void SpawnScriptedWave() { Invoke(nameof(SpawnScriptedWave)); }
        public void PushDisableScriptedWaves(Object Owner) { Invoke(nameof(PushDisableScriptedWaves), Owner); }
        public void PushDisableNormalWaves(Object Owner) { Invoke(nameof(PushDisableNormalWaves), Owner); }
        public void PopDisableScriptedWaves(Object Owner) { Invoke(nameof(PopDisableScriptedWaves), Owner); }
        public void PopDisableNormalWaves(Object Owner) { Invoke(nameof(PopDisableNormalWaves), Owner); }
        public void OnMatchEnded() { Invoke(nameof(OnMatchEnded)); }
        public void OnEnemySpawned(Pawn enemy) { Invoke(nameof(OnEnemySpawned), enemy); }
        public bool AreScriptedWavesBlocked() { return Invoke<bool>(nameof(AreScriptedWavesBlocked)); }
        public bool AreNormalWavesBlocked() { return Invoke<bool>(nameof(AreNormalWavesBlocked)); }
    }
    public class EscapeMenuWindow : WindowWidget
    {
        public EscapeMenuWindow(nint addr) : base(addr) { }
        public void OpenMinersManualFromID(EMinersManualSection Section, Guid ID) { Invoke(nameof(OpenMinersManualFromID), Section, ID); }
    }
    public class FuelCannisterAttachedAnimInstance : AnimInstance
    {
        public FuelCannisterAttachedAnimInstance(nint addr) : base(addr) { }
        public bool CanBeTaken { get { return this[nameof(CanBeTaken)].Flag; } set { this[nameof(CanBeTaken)].Flag = value; } }
        public void SetCanBeTaken(bool canBeTakenValue) { Invoke(nameof(SetCanBeTaken), canBeTakenValue); }
    }
    public class FuelCannisterItemAnimInstance : AnimInstance
    {
        public FuelCannisterItemAnimInstance(nint addr) : base(addr) { }
        public bool IsOnGround { get { return this[nameof(IsOnGround)].Flag; } set { this[nameof(IsOnGround)].Flag = value; } }
        public bool IsFull { get { return this[nameof(IsFull)].Flag; } set { this[nameof(IsFull)].Flag = value; } }
        public bool IsShooting { get { return this[nameof(IsShooting)].Flag; } set { this[nameof(IsShooting)].Flag = value; } }
    }
    public class EscortMuleAnimInstance : AnimInstance
    {
        public EscortMuleAnimInstance(nint addr) : base(addr) { }
        public bool LeftCannistersVisible { get { return this[nameof(LeftCannistersVisible)].Flag; } set { this[nameof(LeftCannistersVisible)].Flag = value; } }
        public bool RightCannistersVisible { get { return this[nameof(RightCannistersVisible)].Flag; } set { this[nameof(RightCannistersVisible)].Flag = value; } }
        public bool IsEngineRunning { get { return this[nameof(IsEngineRunning)].Flag; } set { this[nameof(IsEngineRunning)].Flag = value; } }
        public bool IsBeingRefueled { get { return this[nameof(IsBeingRefueled)].Flag; } set { this[nameof(IsBeingRefueled)].Flag = value; } }
        public bool PlatformOut { get { return this[nameof(PlatformOut)].Flag; } set { this[nameof(PlatformOut)].Flag = value; } }
        public void OnTookDamage(HealthComponent Health) { Invoke(nameof(OnTookDamage), Health); }
    }
    public class EscortDestination : Actor
    {
        public EscortDestination(nint addr) : base(addr) { }
        public Object OnShellCracked { get { return this[nameof(OnShellCracked)]; } set { this[nameof(OnShellCracked)] = value; } }
        public DamageComponent EndExplosionDamage { get { return this[nameof(EndExplosionDamage)].As<DamageComponent>(); } set { this["EndExplosionDamage"] = value; } }
        public float NextBreakpoint { get { return this[nameof(NextBreakpoint)].GetValue<float>(); } set { this[nameof(NextBreakpoint)].SetValue<float>(value); } }
        public int StageForAnalytics { get { return this[nameof(StageForAnalytics)].GetValue<int>(); } set { this[nameof(StageForAnalytics)].SetValue<int>(value); } }
        public int SecondsToDestroyHeartstone { get { return this[nameof(SecondsToDestroyHeartstone)].GetValue<int>(); } set { this[nameof(SecondsToDestroyHeartstone)].SetValue<int>(value); } }
        public UArray<float> BreakpointsPercent { get { return new UArray<float>(this[nameof(BreakpointsPercent)].Address); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float ShellThickness { get { return this[nameof(ShellThickness)].GetValue<float>(); } set { this[nameof(ShellThickness)].SetValue<float>(value); } }
        public UArray<EOmmoranStage> OmmoranStages { get { return new UArray<EOmmoranStage>(this[nameof(OmmoranStages)].Address); } }
        public void MeltPlatforms(DeepCSGWorld CSGWorld, UArray<Vector> meltPoints, float meltRadius) { Invoke(nameof(MeltPlatforms), CSGWorld, meltPoints, meltRadius); }
        public TerrainMaterial GetTerrainMaterialByHandle(DeepCSGWorld CSGWorld, int materialHandle) { return Invoke<TerrainMaterial>(nameof(GetTerrainMaterialByHandle), CSGWorld, materialHandle); }
        public int GetSecondsToDestroyObjective() { return Invoke<int>(nameof(GetSecondsToDestroyObjective)); }
        public Vector GetClosestPointOnRadius(Vector CurrentLocation, int numberOfShellsCracked, Vector dirFromCenter) { return Invoke<Vector>(nameof(GetClosestPointOnRadius), CurrentLocation, numberOfShellsCracked, dirFromCenter); }
        public void Cheat_OverrideStages(UArray<EOmmoranStage> newStages) { Invoke(nameof(Cheat_OverrideStages), newStages); }
    }
    public class MissionDNA : Object
    {
        public MissionDNA(nint addr) : base(addr) { }
        public float MissionScale { get { return this[nameof(MissionScale)].GetValue<float>(); } set { this[nameof(MissionScale)].SetValue<float>(value); } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public MissionComplexity Complexity { get { return this[nameof(Complexity)].As<MissionComplexity>(); } set { this["Complexity"] = value; } }
        public MissionDuration Duration { get { return this[nameof(Duration)].As<MissionDuration>(); } set { this["Duration"] = value; } }
        public UArray<GameplayTagQuery> RoomQueries { get { return new UArray<GameplayTagQuery>(this[nameof(RoomQueries)].Address); } }
        public float GetDurationHazardBonus() { return Invoke<float>(nameof(GetDurationHazardBonus)); }
        public float GetComplexityHazardBonus() { return Invoke<float>(nameof(GetComplexityHazardBonus)); }
    }
    public class EscortMissionDNA : MissionDNA
    {
        public EscortMissionDNA(nint addr) : base(addr) { }
        public int RefuelLocations { get { return this[nameof(RefuelLocations)].GetValue<int>(); } set { this[nameof(RefuelLocations)].SetValue<int>(value); } }
    }
    public class EscortMule : FSDPawn
    {
        public EscortMule(nint addr) : base(addr) { }
        public Object OnMuleActivated { get { return this[nameof(OnMuleActivated)]; } set { this[nameof(OnMuleActivated)] = value; } }
        public Object OnSpeedChanged { get { return this[nameof(OnSpeedChanged)]; } set { this[nameof(OnSpeedChanged)] = value; } }
        public Object OnFullCanistersChanged { get { return this[nameof(OnFullCanistersChanged)]; } set { this[nameof(OnFullCanistersChanged)] = value; } }
        public Object OnExitGaragePathSet { get { return this[nameof(OnExitGaragePathSet)]; } set { this[nameof(OnExitGaragePathSet)] = value; } }
        public Object Cheat_SetMuleSpeed { get { return this[nameof(Cheat_SetMuleSpeed)]; } set { this[nameof(Cheat_SetMuleSpeed)] = value; } }
        public Object Cheat_JumpToNextPhase { get { return this[nameof(Cheat_JumpToNextPhase)]; } set { this[nameof(Cheat_JumpToNextPhase)] = value; } }
        public FriendlyHealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<FriendlyHealthComponent>(); } set { this["HealthComponent"] = value; } }
        public SimpleObjectInfoComponent ObjectInfo { get { return this[nameof(ObjectInfo)].As<SimpleObjectInfoComponent>(); } set { this["ObjectInfo"] = value; } }
        public RestrictedResourceBank ResourceBank { get { return this[nameof(ResourceBank)].As<RestrictedResourceBank>(); } set { this["ResourceBank"] = value; } }
        public Transform TargetTransform { get { return this[nameof(TargetTransform)].As<Transform>(); } set { this["TargetTransform"] = value; } }
        public Transform PreviousTransform { get { return this[nameof(PreviousTransform)].As<Transform>(); } set { this["PreviousTransform"] = value; } }
        public bool IsPathReady { get { return this[nameof(IsPathReady)].Flag; } set { this[nameof(IsPathReady)].Flag = value; } }
        public EEscortMissionState State { get { return (EEscortMissionState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public EscortObjective EscortObjective { get { return this[nameof(EscortObjective)].As<EscortObjective>(); } set { this["EscortObjective"] = value; } }
        public EscortMuleMovementState MovementState { get { return this[nameof(MovementState)].As<EscortMuleMovementState>(); } set { this["MovementState"] = value; } }
        public float SpeedModifier { get { return this[nameof(SpeedModifier)].GetValue<float>(); } set { this[nameof(SpeedModifier)].SetValue<float>(value); } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public OutlineComponent OutlineComponent { get { return this[nameof(OutlineComponent)].As<OutlineComponent>(); } set { this["OutlineComponent"] = value; } }
        public float HealPerTickNormal { get { return this[nameof(HealPerTickNormal)].GetValue<float>(); } set { this[nameof(HealPerTickNormal)].SetValue<float>(value); } }
        public float HealPerTickUnderAttack { get { return this[nameof(HealPerTickUnderAttack)].GetValue<float>(); } set { this[nameof(HealPerTickUnderAttack)].SetValue<float>(value); } }
        public bool CannisterVisible_Left { get { return this[nameof(CannisterVisible_Left)].Flag; } set { this[nameof(CannisterVisible_Left)].Flag = value; } }
        public bool CannisterVisible_Right { get { return this[nameof(CannisterVisible_Right)].Flag; } set { this[nameof(CannisterVisible_Right)].Flag = value; } }
        public Vector NextStop { get { return this[nameof(NextStop)].As<Vector>(); } set { this["NextStop"] = value; } }
        public bool IsCarvingTunnel { get { return this[nameof(IsCarvingTunnel)].Flag; } set { this[nameof(IsCarvingTunnel)].Flag = value; } }
        public int FullCanisters { get { return this[nameof(FullCanisters)].GetValue<int>(); } set { this[nameof(FullCanisters)].SetValue<int>(value); } }
        public UArray<EscortMuleExtractorSlot> ExtractorSlots { get { return new UArray<EscortMuleExtractorSlot>(this[nameof(ExtractorSlots)].Address); } }
        public bool TryHeal(PlayerCharacter User, float amount) { return Invoke<bool>(nameof(TryHeal), User, amount); }
        public void SetTargetTransform(Transform InTransform) { Invoke(nameof(SetTargetTransform), InTransform); }
        public void SetSpeedModifier(float inSpeedModifier) { Invoke(nameof(SetSpeedModifier), inSpeedModifier); }
        public void SetFullExtracterAttached(InstantUsable Usable) { Invoke(nameof(SetFullExtracterAttached), Usable); }
        public void SetExtractorDetached(InstantUsable Usable) { Invoke(nameof(SetExtractorDetached), Usable); }
        public void SetExitGaragePath(UArray<Vector> Path) { Invoke(nameof(SetExitGaragePath), Path); }
        public void ResetExtractors() { Invoke(nameof(ResetExtractors)); }
        public void PathIsReady() { Invoke(nameof(PathIsReady)); }
        public void OnRep_SpeedModifier() { Invoke(nameof(OnRep_SpeedModifier)); }
        public void OnRep_MovementState() { Invoke(nameof(OnRep_MovementState)); }
        public void OnRep_IsCarvingTunnel() { Invoke(nameof(OnRep_IsCarvingTunnel)); }
        public void OnRep_ExtractorSlots() { Invoke(nameof(OnRep_ExtractorSlots)); }
        public void OnObjectiveStateChanged(EEscortMissionState oldState) { Invoke(nameof(OnObjectiveStateChanged), oldState); }
        public void OnExtractorSlotChanged(EscortMuleExtractorSlot Slot, int Index) { Invoke(nameof(OnExtractorSlotChanged), Slot, Index); }
        public void OnExtractorDetached(ExtractorItem Item) { Invoke(nameof(OnExtractorDetached), Item); }
        public void ObjectiveStateChange(EEscortMissionState NewState) { Invoke(nameof(ObjectiveStateChange), NewState); }
        public bool GetIsPathReady() { return Invoke<bool>(nameof(GetIsPathReady)); }
        public EEscortExtractorState GetExtractorState(InstantUsable Usable) { return Invoke<EEscortExtractorState>(nameof(GetExtractorState), Usable); }
        public float GetDistanceToDoretta(Vector Location) { return Invoke<float>(nameof(GetDistanceToDoretta), Location); }
        public void ActivateMule() { Invoke(nameof(ActivateMule)); }
    }
    public class EscortMuleTrack : Actor
    {
        public EscortMuleTrack(nint addr) : base(addr) { }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
    }
    public class EscortMuleAIController : FSDAIController
    {
        public EscortMuleAIController(nint addr) : base(addr) { }
        public UArray<Vector> CurrentPath { get { return new UArray<Vector>(this[nameof(CurrentPath)].Address); } }
        public UArray<Vector> GaragePath { get { return new UArray<Vector>(this[nameof(GaragePath)].Address); } }
        public int PathIndex { get { return this[nameof(PathIndex)].GetValue<int>(); } set { this[nameof(PathIndex)].SetValue<int>(value); } }
        public int CurrentRoom { get { return this[nameof(CurrentRoom)].GetValue<int>(); } set { this[nameof(CurrentRoom)].SetValue<int>(value); } }
        public EscortObjective EscortObj { get { return this[nameof(EscortObj)].As<EscortObjective>(); } set { this["EscortObj"] = value; } }
        public int TunnelStartIndex { get { return this[nameof(TunnelStartIndex)].GetValue<int>(); } set { this[nameof(TunnelStartIndex)].SetValue<int>(value); } }
        public int TunnelEndIndex { get { return this[nameof(TunnelEndIndex)].GetValue<int>(); } set { this[nameof(TunnelEndIndex)].SetValue<int>(value); } }
        public RandomStream RandomStream { get { return this[nameof(RandomStream)].As<RandomStream>(); } set { this["RandomStream"] = value; } }
        public void SetDozerNextPathSegment() { Invoke(nameof(SetDozerNextPathSegment)); }
        public void OnPathComplete() { Invoke(nameof(OnPathComplete)); }
        public Vector GetPointBehindEscortMule(float Distance) { return Invoke<Vector>(nameof(GetPointBehindEscortMule), Distance); }
        public UArray<Vector> GetPathForDebug(int Segment) { return Invoke<UArray<Vector>>(nameof(GetPathForDebug), Segment); }
        public Vector GetPathEndTagent() { return Invoke<Vector>(nameof(GetPathEndTagent)); }
        public void GetFullPath(UArray<Vector> outPath) { Invoke(nameof(GetFullPath), outPath); }
        public void FindDozerPath(Vector StartPosition) { Invoke(nameof(FindDozerPath), StartPosition); }
        public void CHEAT_SetDozerLastPathSegment() { Invoke(nameof(CHEAT_SetDozerLastPathSegment)); }
    }
    public class EscortObjective : Objective
    {
        public EscortObjective(nint addr) : base(addr) { }
        public Object OnProgressUpdated { get { return this[nameof(OnProgressUpdated)]; } set { this[nameof(OnProgressUpdated)] = value; } }
        public Object OnShellBreakPauseChange { get { return this[nameof(OnShellBreakPauseChange)]; } set { this[nameof(OnShellBreakPauseChange)] = value; } }
        public Object OnMuleRefueled { get { return this[nameof(OnMuleRefueled)]; } set { this[nameof(OnMuleRefueled)] = value; } }
        public bool DidRescueDorettaHead { get { return this[nameof(DidRescueDorettaHead)].Flag; } set { this[nameof(DidRescueDorettaHead)].Flag = value; } }
        public int AreasToScan { get { return this[nameof(AreasToScan)].GetValue<int>(); } set { this[nameof(AreasToScan)].SetValue<int>(value); } }
        public int ScanCount { get { return this[nameof(ScanCount)].GetValue<int>(); } set { this[nameof(ScanCount)].SetValue<int>(value); } }
        public UArray<Vector> ScanLocations { get { return new UArray<Vector>(this[nameof(ScanLocations)].Address); } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public DebrisPositioning EscortMulePositioning { get { return this[nameof(EscortMulePositioning)].As<DebrisPositioning>(); } set { this["EscortMulePositioning"] = value; } }
        public CurveFloat CostDistanceCurve { get { return this[nameof(CostDistanceCurve)].As<CurveFloat>(); } set { this["CostDistanceCurve"] = value; } }
        public float DebrisRadius { get { return this[nameof(DebrisRadius)].GetValue<float>(); } set { this[nameof(DebrisRadius)].SetValue<float>(value); } }
        public UArray<DebrisBase> ObjectDebris { get { return new UArray<DebrisBase>(this[nameof(ObjectDebris)].Address); } }
        public Object RefuelObjectClass { get { return this[nameof(RefuelObjectClass)]; } set { this[nameof(RefuelObjectClass)] = value; } }
        public Object DestinationClass { get { return this[nameof(DestinationClass)]; } set { this[nameof(DestinationClass)] = value; } }
        public int AreasScanned { get { return this[nameof(AreasScanned)].GetValue<int>(); } set { this[nameof(AreasScanned)].SetValue<int>(value); } }
        public EEscortMissionState State { get { return (EEscortMissionState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public bool FinalBattle { get { return this[nameof(FinalBattle)].Flag; } set { this[nameof(FinalBattle)].Flag = value; } }
        public CarvedResourceData FuelResource { get { return this[nameof(FuelResource)].As<CarvedResourceData>(); } set { this["FuelResource"] = value; } }
        public ResourceData GemResource { get { return this[nameof(GemResource)].As<ResourceData>(); } set { this["GemResource"] = value; } }
        public Object OnCannisterRegistered { get { return this[nameof(OnCannisterRegistered)]; } set { this[nameof(OnCannisterRegistered)] = value; } }
        public float ServerShellProgress { get { return this[nameof(ServerShellProgress)].GetValue<float>(); } set { this[nameof(ServerShellProgress)].SetValue<float>(value); } }
        public int SecondsToDestroyHeartstone { get { return this[nameof(SecondsToDestroyHeartstone)].GetValue<int>(); } set { this[nameof(SecondsToDestroyHeartstone)].SetValue<int>(value); } }
        public int FullCanistersRequired { get { return this[nameof(FullCanistersRequired)].GetValue<int>(); } set { this[nameof(FullCanistersRequired)].SetValue<int>(value); } }
        public int FullCanisters { get { return this[nameof(FullCanisters)].GetValue<int>(); } set { this[nameof(FullCanisters)].SetValue<int>(value); } }
        public int FuelResourceAmount { get { return this[nameof(FuelResourceAmount)].GetValue<int>(); } set { this[nameof(FuelResourceAmount)].SetValue<int>(value); } }
        public Object GarageDropCarver { get { return this[nameof(GarageDropCarver)]; } set { this[nameof(GarageDropCarver)] = value; } }
        public Object EscortMuleDropBeaconClass { get { return this[nameof(EscortMuleDropBeaconClass)]; } set { this[nameof(EscortMuleDropBeaconClass)] = value; } }
        public Object GarageClass { get { return this[nameof(GarageClass)]; } set { this[nameof(GarageClass)] = value; } }
        public Vector EscortMuleDropLocation { get { return this[nameof(EscortMuleDropLocation)].As<Vector>(); } set { this["EscortMuleDropLocation"] = value; } }
        public EscortMule EscortMule { get { return this[nameof(EscortMule)].As<EscortMule>(); } set { this["EscortMule"] = value; } }
        public EscortDestination EscortDestination { get { return this[nameof(EscortDestination)].As<EscortDestination>(); } set { this["EscortDestination"] = value; } }
        public void SyncProgressTimer() { Invoke(nameof(SyncProgressTimer)); }
        public void StartShellBreak() { Invoke(nameof(StartShellBreak)); }
        public void SpawnGarage() { Invoke(nameof(SpawnGarage)); }
        public void SetState(EEscortMissionState State) { Invoke(nameof(SetState), State); }
        public void SetShellBreakPaused(bool newPaused) { Invoke(nameof(SetShellBreakPaused), newPaused); }
        public void SetEscortMule(EscortMule MULE) { Invoke(nameof(SetEscortMule), MULE); }
        public void RegisterFuelCannister(ExtractorItem extractor) { Invoke(nameof(RegisterFuelCannister), extractor); }
        public void RecordFailStage(bool muleDied, bool missionAborted) { Invoke(nameof(RecordFailStage), muleDied, missionAborted); }
        public void OnResourceChanged(CappedResource CappedResource, float amount) { Invoke(nameof(OnResourceChanged), CappedResource, amount); }
        public void OnRep_FullCanisters() { Invoke(nameof(OnRep_FullCanisters)); }
        public void OnRep_EscortState() { Invoke(nameof(OnRep_EscortState)); }
        public void OnRep_EscortMule() { Invoke(nameof(OnRep_EscortMule)); }
        public void OnRep_AreasToScan(int prevAmount) { Invoke(nameof(OnRep_AreasToScan), prevAmount); }
        public void OnRep_AreasScanned(int prevAmount) { Invoke(nameof(OnRep_AreasScanned), prevAmount); }
        public void OnMuleDied(HealthComponentBase HealthComponent) { Invoke(nameof(OnMuleDied), HealthComponent); }
        public void OnHealthChanged(float Health) { Invoke(nameof(OnHealthChanged), Health); }
        public void OnFullCanistersChanged(int amount) { Invoke(nameof(OnFullCanistersChanged), amount); }
        public void OnEscortMuleSpawnedEvent() { Invoke(nameof(OnEscortMuleSpawnedEvent)); }
        public float GetShellBreakProgress() { return Invoke<float>(nameof(GetShellBreakProgress)); }
        public bool DoesPathExist(Vector Start, Vector End) { return Invoke<bool>(nameof(DoesPathExist), Start, End); }
    }
    public class ExpeniteSamplePod : RessuplyPod
    {
        public ExpeniteSamplePod(nint addr) : base(addr) { }
        public float ServerReturnProgress { get { return this[nameof(ServerReturnProgress)].GetValue<float>(); } set { this[nameof(ServerReturnProgress)].SetValue<float>(value); } }
        public float ReturnDelay { get { return this[nameof(ReturnDelay)].GetValue<float>(); } set { this[nameof(ReturnDelay)].SetValue<float>(value); } }
        public CurveFloat ReturnCurve { get { return this[nameof(ReturnCurve)].As<CurveFloat>(); } set { this["ReturnCurve"] = value; } }
        public float TargetReturnTime { get { return this[nameof(TargetReturnTime)].GetValue<float>(); } set { this[nameof(TargetReturnTime)].SetValue<float>(value); } }
        public void LaunchBackToSpace() { Invoke(nameof(LaunchBackToSpace)); }
    }
    public class ExplosiveBarrelEvent : GameEvent
    {
        public ExplosiveBarrelEvent(nint addr) : base(addr) { }
        public DamageComponent EndDamage { get { return this[nameof(EndDamage)].As<DamageComponent>(); } set { this["EndDamage"] = value; } }
    }
    public class ExterminationReward : RunningMissionBP
    {
        public ExterminationReward(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float AwardSize { get { return this[nameof(AwardSize)].GetValue<float>(); } set { this[nameof(AwardSize)].SetValue<float>(value); } }
        public void OnEnemyKilled(GameplayTagContainer GameplayTags, Actor killedEnemy) { Invoke(nameof(OnEnemyKilled), GameplayTags, killedEnemy); }
    }
    public class ExtractorItem : AnimatedItem
    {
        public ExtractorItem(nint addr) : base(addr) { }
        public Object OnCurrentLoadChangedEvent { get { return this[nameof(OnCurrentLoadChangedEvent)]; } set { this[nameof(OnCurrentLoadChangedEvent)] = value; } }
        public Object OnCharacterEquipChange { get { return this[nameof(OnCharacterEquipChange)]; } set { this[nameof(OnCharacterEquipChange)] = value; } }
        public BoxComponent DroppedCollider { get { return this[nameof(DroppedCollider)].As<BoxComponent>(); } set { this["DroppedCollider"] = value; } }
        public SkeletalMeshComponent DroppedMesh { get { return this[nameof(DroppedMesh)].As<SkeletalMeshComponent>(); } set { this["DroppedMesh"] = value; } }
        public FirstPersonParticleSystemComponent FP_DrillParticles { get { return this[nameof(FP_DrillParticles)].As<FirstPersonParticleSystemComponent>(); } set { this["FP_DrillParticles"] = value; } }
        public FSDAudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<FSDAudioComponent>(); } set { this["AudioComponent"] = value; } }
        public PointLightComponent SurfaceLight { get { return this[nameof(SurfaceLight)].As<PointLightComponent>(); } set { this["SurfaceLight"] = value; } }
        public ParticleSystemComponent MeltingParticles { get { return this[nameof(MeltingParticles)].As<ParticleSystemComponent>(); } set { this["MeltingParticles"] = value; } }
        public ParticleSystemComponent InvalidSurfaceParticles { get { return this[nameof(InvalidSurfaceParticles)].As<ParticleSystemComponent>(); } set { this["InvalidSurfaceParticles"] = value; } }
        public ParticleSystemComponent FPMuzzleParticles { get { return this[nameof(FPMuzzleParticles)].As<ParticleSystemComponent>(); } set { this["FPMuzzleParticles"] = value; } }
        public ParticleSystemComponent FPMuzzleInvalidParticles { get { return this[nameof(FPMuzzleInvalidParticles)].As<ParticleSystemComponent>(); } set { this["FPMuzzleInvalidParticles"] = value; } }
        public ParticleSystemComponent TPMuzzleParticles { get { return this[nameof(TPMuzzleParticles)].As<ParticleSystemComponent>(); } set { this["TPMuzzleParticles"] = value; } }
        public ParticleSystemComponent TPMuzzleInvalidParticles { get { return this[nameof(TPMuzzleInvalidParticles)].As<ParticleSystemComponent>(); } set { this["TPMuzzleInvalidParticles"] = value; } }
        public AnimMontage FPMineMontage { get { return this[nameof(FPMineMontage)].As<AnimMontage>(); } set { this["FPMineMontage"] = value; } }
        public AnimMontage TPMineMontage { get { return this[nameof(TPMineMontage)].As<AnimMontage>(); } set { this["TPMineMontage"] = value; } }
        public AnimMontage FPGunsling { get { return this[nameof(FPGunsling)].As<AnimMontage>(); } set { this["FPGunsling"] = value; } }
        public AnimMontage TPGunsling { get { return this[nameof(TPGunsling)].As<AnimMontage>(); } set { this["TPGunsling"] = value; } }
        public Object MiningSpeedAudioParamterName { get { return this[nameof(MiningSpeedAudioParamterName)]; } set { this[nameof(MiningSpeedAudioParamterName)] = value; } }
        public ParticleSystem DrillParticles { get { return this[nameof(DrillParticles)].As<ParticleSystem>(); } set { this["DrillParticles"] = value; } }
        public ForceFeedbackEffect DrillRumble { get { return this[nameof(DrillRumble)].As<ForceFeedbackEffect>(); } set { this["DrillRumble"] = value; } }
        public float BlockParticlesScaleFP { get { return this[nameof(BlockParticlesScaleFP)].GetValue<float>(); } set { this[nameof(BlockParticlesScaleFP)].SetValue<float>(value); } }
        public float BlockParticlesScaleTP { get { return this[nameof(BlockParticlesScaleTP)].GetValue<float>(); } set { this[nameof(BlockParticlesScaleTP)].SetValue<float>(value); } }
        public EExtractorState State { get { return (EExtractorState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float MovementPenalty { get { return this[nameof(MovementPenalty)].GetValue<float>(); } set { this[nameof(MovementPenalty)].SetValue<float>(value); } }
        public float CarverRayCastLength { get { return this[nameof(CarverRayCastLength)].GetValue<float>(); } set { this[nameof(CarverRayCastLength)].SetValue<float>(value); } }
        public float CarveTerrainDistanceCheck { get { return this[nameof(CarveTerrainDistanceCheck)].GetValue<float>(); } set { this[nameof(CarveTerrainDistanceCheck)].SetValue<float>(value); } }
        public float CurrentDrillSpeed { get { return this[nameof(CurrentDrillSpeed)].GetValue<float>(); } set { this[nameof(CurrentDrillSpeed)].SetValue<float>(value); } }
        public float DrillParticlesDuration { get { return this[nameof(DrillParticlesDuration)].GetValue<float>(); } set { this[nameof(DrillParticlesDuration)].SetValue<float>(value); } }
        public ResourceData ExtractetMaterial { get { return this[nameof(ExtractetMaterial)].As<ResourceData>(); } set { this["ExtractetMaterial"] = value; } }
        public float TimeBeforeInvalidShout { get { return this[nameof(TimeBeforeInvalidShout)].GetValue<float>(); } set { this[nameof(TimeBeforeInvalidShout)].SetValue<float>(value); } }
        public DialogDataAsset InvalidSurfaceShout { get { return this[nameof(InvalidSurfaceShout)].As<DialogDataAsset>(); } set { this["InvalidSurfaceShout"] = value; } }
        public DialogDataAsset ShoutFull { get { return this[nameof(ShoutFull)].As<DialogDataAsset>(); } set { this["ShoutFull"] = value; } }
        public SoundCue DigSound { get { return this[nameof(DigSound)].As<SoundCue>(); } set { this["DigSound"] = value; } }
        public bool IsMining { get { return this[nameof(IsMining)].Flag; } set { this[nameof(IsMining)].Flag = value; } }
        public bool IsGunslinging { get { return this[nameof(IsGunslinging)].Flag; } set { this[nameof(IsGunslinging)].Flag = value; } }
        public bool ReadyToExtract { get { return this[nameof(ReadyToExtract)].Flag; } set { this[nameof(ReadyToExtract)].Flag = value; } }
        public ParticleSystem VacuumEffect { get { return this[nameof(VacuumEffect)].As<ParticleSystem>(); } set { this["VacuumEffect"] = value; } }
        public ParticleSystem ChunkSplatEffect { get { return this[nameof(ChunkSplatEffect)].As<ParticleSystem>(); } set { this["ChunkSplatEffect"] = value; } }
        public SoundCue ChunkSplatSound { get { return this[nameof(ChunkSplatSound)].As<SoundCue>(); } set { this["ChunkSplatSound"] = value; } }
        public float MaxDifference { get { return this[nameof(MaxDifference)].GetValue<float>(); } set { this[nameof(MaxDifference)].SetValue<float>(value); } }
        public float MeltingTime { get { return this[nameof(MeltingTime)].GetValue<float>(); } set { this[nameof(MeltingTime)].SetValue<float>(value); } }
        public float ChunkMultiplier { get { return this[nameof(ChunkMultiplier)].GetValue<float>(); } set { this[nameof(ChunkMultiplier)].SetValue<float>(value); } }
        public float CollectChunkCooldown { get { return this[nameof(CollectChunkCooldown)].GetValue<float>(); } set { this[nameof(CollectChunkCooldown)].SetValue<float>(value); } }
        public float CrossfadeSpeed { get { return this[nameof(CrossfadeSpeed)].GetValue<float>(); } set { this[nameof(CrossfadeSpeed)].SetValue<float>(value); } }
        public float VacuumEffectOffset { get { return this[nameof(VacuumEffectOffset)].GetValue<float>(); } set { this[nameof(VacuumEffectOffset)].SetValue<float>(value); } }
        public float MaxCapacity { get { return this[nameof(MaxCapacity)].GetValue<float>(); } set { this[nameof(MaxCapacity)].SetValue<float>(value); } }
        public float PlayerCountBonus { get { return this[nameof(PlayerCountBonus)].GetValue<float>(); } set { this[nameof(PlayerCountBonus)].SetValue<float>(value); } }
        public Color SurfaceLightInitialColor { get { return this[nameof(SurfaceLightInitialColor)].As<Color>(); } set { this["SurfaceLightInitialColor"] = value; } }
        public Color SurfaceLightEndColor { get { return this[nameof(SurfaceLightEndColor)].As<Color>(); } set { this["SurfaceLightEndColor"] = value; } }
        public float SurfaceLightMinIntensity { get { return this[nameof(SurfaceLightMinIntensity)].GetValue<float>(); } set { this[nameof(SurfaceLightMinIntensity)].SetValue<float>(value); } }
        public float SurfaceLightMaxIntensity { get { return this[nameof(SurfaceLightMaxIntensity)].GetValue<float>(); } set { this[nameof(SurfaceLightMaxIntensity)].SetValue<float>(value); } }
        public float CurrentLoad { get { return this[nameof(CurrentLoad)].GetValue<float>(); } set { this[nameof(CurrentLoad)].SetValue<float>(value); } }
        public void SetCanPickup(bool canPickup) { Invoke(nameof(SetCanPickup), canPickup); }
        public void Server_StopMining() { Invoke(nameof(Server_StopMining)); }
        public void Server_StartMining() { Invoke(nameof(Server_StartMining)); }
        public void Server_SetReadyToExtract(bool IsReady) { Invoke(nameof(Server_SetReadyToExtract), IsReady); }
        public void Server_DigBlock(Vector_NetQuantize Start, Vector_NetQuantize End) { Invoke(nameof(Server_DigBlock), Start, End); }
        public void Server_CollectChunk(ResourceChunk chunk) { Invoke(nameof(Server_CollectChunk), chunk); }
        public void ResetCurrentLoad() { Invoke(nameof(ResetCurrentLoad)); }
        public void OnValidSurfaceChanged(bool IsValid) { Invoke(nameof(OnValidSurfaceChanged), IsValid); }
        public void OnThrown(Vector Direction) { Invoke(nameof(OnThrown), Direction); }
        public void OnStopDrilling() { Invoke(nameof(OnStopDrilling)); }
        public void OnStartDrilling() { Invoke(nameof(OnStartDrilling)); }
        public void OnRep_SimulatingMining() { Invoke(nameof(OnRep_SimulatingMining)); }
        public void OnRep_IsGunslinging() { Invoke(nameof(OnRep_IsGunslinging)); }
        public void OnRep_CurrentLoad() { Invoke(nameof(OnRep_CurrentLoad)); }
        public void OnCurrentLoadChanged(float load) { Invoke(nameof(OnCurrentLoadChanged), load); }
        public void OnChunkCooldownOver() { Invoke(nameof(OnChunkCooldownOver)); }
        public bool IsFull() { return Invoke<bool>(nameof(IsFull)); }
        public BoxComponent GetRootCollider() { return Invoke<BoxComponent>(nameof(GetRootCollider)); }
        public void All_SimulateDigBlock(Vector_NetQuantize Position, bool SpawnParticles, int Material) { Invoke(nameof(All_SimulateDigBlock), Position, SpawnParticles, Material); }
        public void All_ChunkSplat(ResourceChunk chunk) { Invoke(nameof(All_ChunkSplat), chunk); }
        public void AddResource(float amount) { Invoke(nameof(AddResource), amount); }
    }
    public class ExtruderPlant : Actor
    {
        public ExtruderPlant(nint addr) : base(addr) { }
        public SkeletalMeshComponent SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMeshComponent>(); } set { this["SkeletalMesh"] = value; } }
        public AnimationAsset ExtrudeAnimation { get { return this[nameof(ExtrudeAnimation)].As<AnimationAsset>(); } set { this["ExtrudeAnimation"] = value; } }
        public AnimationAsset RetractAnimation { get { return this[nameof(RetractAnimation)].As<AnimationAsset>(); } set { this["RetractAnimation"] = value; } }
        public AudioComponent Audio { get { return this[nameof(Audio)].As<AudioComponent>(); } set { this["Audio"] = value; } }
    }
    public class EyeBrowsVanityItem : VanityItem
    {
        public EyeBrowsVanityItem(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object AnimInstance { get { return this[nameof(AnimInstance)]; } set { this[nameof(AnimInstance)] = value; } }
        public Object VanityTags { get { return this[nameof(VanityTags)]; } set { this[nameof(VanityTags)] = value; } }
    }
    public class FacilityGeneratorLine : Actor
    {
        public FacilityGeneratorLine(nint addr) : base(addr) { }
        public Transform StartTransform { get { return this[nameof(StartTransform)].As<Transform>(); } set { this["StartTransform"] = value; } }
        public UArray<Transform> EndTransforms { get { return new UArray<Transform>(this[nameof(EndTransforms)].Address); } }
        public float HeightOffsetMin { get { return this[nameof(HeightOffsetMin)].GetValue<float>(); } set { this[nameof(HeightOffsetMin)].SetValue<float>(value); } }
        public float HeightOffsetMax { get { return this[nameof(HeightOffsetMax)].GetValue<float>(); } set { this[nameof(HeightOffsetMax)].SetValue<float>(value); } }
        public float MaxSegmentLength { get { return this[nameof(MaxSegmentLength)].GetValue<float>(); } set { this[nameof(MaxSegmentLength)].SetValue<float>(value); } }
        public float CarveRadius { get { return this[nameof(CarveRadius)].GetValue<float>(); } set { this[nameof(CarveRadius)].SetValue<float>(value); } }
        public SplineComponent SplineComponent { get { return this[nameof(SplineComponent)].As<SplineComponent>(); } set { this["SplineComponent"] = value; } }
        public SplineDecoratorComponent SplineDecorator { get { return this[nameof(SplineDecorator)].As<SplineDecoratorComponent>(); } set { this["SplineDecorator"] = value; } }
        public Object LineMeshPtr { get { return this[nameof(LineMeshPtr)]; } set { this[nameof(LineMeshPtr)] = value; } }
        public Object MaterialConnected { get { return this[nameof(MaterialConnected)]; } set { this[nameof(MaterialConnected)] = value; } }
        public Object MaterialUnconnected { get { return this[nameof(MaterialUnconnected)]; } set { this[nameof(MaterialUnconnected)] = value; } }
        public TetherStation Station { get { return this[nameof(Station)].As<TetherStation>(); } set { this["Station"] = value; } }
        public StaticMesh MeshInstance { get { return this[nameof(MeshInstance)].As<StaticMesh>(); } set { this["MeshInstance"] = value; } }
        public UArray<Vector> ReplicatedPath { get { return new UArray<Vector>(this[nameof(ReplicatedPath)].Address); } }
        public bool Connected { get { return this[nameof(Connected)].Flag; } set { this[nameof(Connected)].Flag = value; } }
        public void SetConnected(bool InConnected) { Invoke(nameof(SetConnected), InConnected); }
        public void ReceiveBeginPathFinding() { Invoke(nameof(ReceiveBeginPathFinding)); }
        public void OnRep_Path() { Invoke(nameof(OnRep_Path)); }
        public void OnRep_Connected() { Invoke(nameof(OnRep_Connected)); }
    }
    public class FacilityHackingPod : RessuplyPod
    {
        public FacilityHackingPod(nint addr) : base(addr) { }
        public Object OnHackingPodStateChanged { get { return this[nameof(OnHackingPodStateChanged)]; } set { this[nameof(OnHackingPodStateChanged)] = value; } }
        public EHackingPodState PodState { get { return (EHackingPodState)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
        public void SetState(EHackingPodState aState) { Invoke(nameof(SetState), aState); }
        public void OnRep_PodState(EHackingPodState oldState) { Invoke(nameof(OnRep_PodState), oldState); }
        public void OnExitState(EHackingPodState oldState) { Invoke(nameof(OnExitState), oldState); }
        public void OnEnterState(EHackingPodState NextState) { Invoke(nameof(OnEnterState), NextState); }
        public EHackingPodState GetState() { return Invoke<EHackingPodState>(nameof(GetState)); }
    }
    public class RGBLightManagerComponent : ActorComponent
    {
        public RGBLightManagerComponent(nint addr) : base(addr) { }
        public UArray<PointLightComponent> Lights { get { return new UArray<PointLightComponent>(this[nameof(Lights)].Address); } }
        public UArray<LinearColor> ColorList { get { return new UArray<LinearColor>(this[nameof(ColorList)].Address); } }
        public float NewColorsInterval { get { return this[nameof(NewColorsInterval)].GetValue<float>(); } set { this[nameof(NewColorsInterval)].SetValue<float>(value); } }
        public float NewColorsVariance { get { return this[nameof(NewColorsVariance)].GetValue<float>(); } set { this[nameof(NewColorsVariance)].SetValue<float>(value); } }
        public void StopRgb() { Invoke(nameof(StopRgb)); }
        public void StartRgb() { Invoke(nameof(StartRgb)); }
    }
    public class FacilityHackingPodAnimInstance : AnimInstance
    {
        public FacilityHackingPodAnimInstance(nint addr) : base(addr) { }
        public Actor SaluteTarget { get { return this[nameof(SaluteTarget)].As<Actor>(); } set { this["SaluteTarget"] = value; } }
        public Rotator LookingDirection { get { return this[nameof(LookingDirection)].As<Rotator>(); } set { this["LookingDirection"] = value; } }
        public Rotator TargetRotation { get { return this[nameof(TargetRotation)].As<Rotator>(); } set { this["TargetRotation"] = value; } }
        public bool IsHacking { get { return this[nameof(IsHacking)].Flag; } set { this[nameof(IsHacking)].Flag = value; } }
        public EHackingPodState PodState { get { return (EHackingPodState)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
        public float RadarDishAngle { get { return this[nameof(RadarDishAngle)].GetValue<float>(); } set { this[nameof(RadarDishAngle)].SetValue<float>(value); } }
        public void SetSaluter(Actor salutingTarget) { Invoke(nameof(SetSaluter), salutingTarget); }
        public void ResetSaluteTarget() { Invoke(nameof(ResetSaluteTarget)); }
    }
    public class ItemDispenserAnimInstance : AnimInstance
    {
        public ItemDispenserAnimInstance(nint addr) : base(addr) { }
        public bool IsOpen { get { return this[nameof(IsOpen)].Flag; } set { this[nameof(IsOpen)].Flag = value; } }
        public bool HasItem { get { return this[nameof(HasItem)].Flag; } set { this[nameof(HasItem)].Flag = value; } }
    }
    public class FacilityTetherDispenserAnimInstnace : ItemDispenserAnimInstance
    {
        public FacilityTetherDispenserAnimInstnace(nint addr) : base(addr) { }
        public EHackingPodState PodState { get { return (EHackingPodState)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
        public bool ShouldShowDispenser { get { return this[nameof(ShouldShowDispenser)].Flag; } set { this[nameof(ShouldShowDispenser)].Flag = value; } }
        public bool ShouldCloseFromDispenser { get { return this[nameof(ShouldCloseFromDispenser)].Flag; } set { this[nameof(ShouldCloseFromDispenser)].Flag = value; } }
        public bool ShouldShowButton { get { return this[nameof(ShouldShowButton)].Flag; } set { this[nameof(ShouldShowButton)].Flag = value; } }
        public bool ShouldHideButton { get { return this[nameof(ShouldHideButton)].Flag; } set { this[nameof(ShouldHideButton)].Flag = value; } }
    }
    public class FacilityObjective : Objective
    {
        public FacilityObjective(nint addr) : base(addr) { }
        public Object generatorClass { get { return this[nameof(generatorClass)]; } set { this[nameof(generatorClass)] = value; } }
        public Object GeneratorBeaconClass { get { return this[nameof(GeneratorBeaconClass)]; } set { this[nameof(GeneratorBeaconClass)] = value; } }
        public int GeneratorCount { get { return this[nameof(GeneratorCount)].GetValue<int>(); } set { this[nameof(GeneratorCount)].SetValue<int>(value); } }
        public int ObjectivesStage { get { return this[nameof(ObjectivesStage)].GetValue<int>(); } set { this[nameof(ObjectivesStage)].SetValue<int>(value); } }
        public UArray<SubObjective> SubObjectives { get { return new UArray<SubObjective>(this[nameof(SubObjectives)].Address); } }
        public Object OnFirstEncounterDroneSpawned_Delegate { get { return this[nameof(OnFirstEncounterDroneSpawned_Delegate)]; } set { this[nameof(OnFirstEncounterDroneSpawned_Delegate)] = value; } }
        public Object OnSecondEncounterDroneSpawned_Delegate { get { return this[nameof(OnSecondEncounterDroneSpawned_Delegate)]; } set { this[nameof(OnSecondEncounterDroneSpawned_Delegate)] = value; } }
        public UArray<Pawn> spawnedEnemies { get { return new UArray<Pawn>(this[nameof(spawnedEnemies)].Address); } }
        public UArray<EnemyDescriptor> TurretDescriptors { get { return new UArray<EnemyDescriptor>(this[nameof(TurretDescriptors)].Address); } }
        public UArray<EnemyDescriptor> GeneratorRoomTurretDescriptors { get { return new UArray<EnemyDescriptor>(this[nameof(GeneratorRoomTurretDescriptors)].Address); } }
        public UArray<EnemyDescriptor> EncounterEnemies { get { return new UArray<EnemyDescriptor>(this[nameof(EncounterEnemies)].Address); } }
        public float EncounterDifficulty { get { return this[nameof(EncounterDifficulty)].GetValue<float>(); } set { this[nameof(EncounterDifficulty)].SetValue<float>(value); } }
        public RandInterval Diversity { get { return this[nameof(Diversity)].As<RandInterval>(); } set { this["Diversity"] = value; } }
        public IRandRange TurretEncountersRange { get { return this[nameof(TurretEncountersRange)].As<IRandRange>(); } set { this["TurretEncountersRange"] = value; } }
        public int MinimumTurretEncounters { get { return this[nameof(MinimumTurretEncounters)].GetValue<int>(); } set { this[nameof(MinimumTurretEncounters)].SetValue<int>(value); } }
        public IRandRange TunnelTurretsRange { get { return this[nameof(TunnelTurretsRange)].As<IRandRange>(); } set { this["TunnelTurretsRange"] = value; } }
        public UArray<Actor> SmallGenerators { get { return new UArray<Actor>(this[nameof(SmallGenerators)].Address); } }
        public TetherStation mainFacility { get { return this[nameof(mainFacility)].As<TetherStation>(); } set { this["mainFacility"] = value; } }
        public UArray<int> ShieldGeneratorRooms { get { return new UArray<int>(this[nameof(ShieldGeneratorRooms)].Address); } }
        public int MainFacilityRoom { get { return this[nameof(MainFacilityRoom)].GetValue<int>(); } set { this[nameof(MainFacilityRoom)].SetValue<int>(value); } }
        public bool HasRemovedMainShield { get { return this[nameof(HasRemovedMainShield)].Flag; } set { this[nameof(HasRemovedMainShield)].Flag = value; } }
        public UArray<Actor> ShieldGenerators { get { return new UArray<Actor>(this[nameof(ShieldGenerators)].Address); } }
        public ResourceData GoalResource { get { return this[nameof(GoalResource)].As<ResourceData>(); } set { this["GoalResource"] = value; } }
        public float AmountRequired { get { return this[nameof(AmountRequired)].GetValue<float>(); } set { this[nameof(AmountRequired)].SetValue<float>(value); } }
        public float AmountCollected { get { return this[nameof(AmountCollected)].GetValue<float>(); } set { this[nameof(AmountCollected)].SetValue<float>(value); } }
        public int GeneratorsActivated { get { return this[nameof(GeneratorsActivated)].GetValue<int>(); } set { this[nameof(GeneratorsActivated)].SetValue<int>(value); } }
        public void SpawnFacilityEncounters(ProceduralSetup Setup, EncounterManager Encounters, DebrisPositioning Positioning) { Invoke(nameof(SpawnFacilityEncounters), Setup, Encounters, Positioning); }
        public UArray<Transform> SpawnEndBattleTurrets(int amountOfTurrets, ProceduralSetup Setup, DebrisPositioning DebrisPositioning, Object terrainPlacement, UArray<Actor> existingTurrets, bool success) { return Invoke<UArray<Transform>>(nameof(SpawnEndBattleTurrets), amountOfTurrets, Setup, DebrisPositioning, terrainPlacement, existingTurrets, success); }
        public void SetMainFacility(TetherStation mainFacility) { Invoke(nameof(SetMainFacility), mainFacility); }
        public void SetGeneratorRooms(UArray<int> generatorRoomsIndicies) { Invoke(nameof(SetGeneratorRooms), generatorRoomsIndicies); }
        public void SecondGeneratorEncounterSpawn(Pawn spawned) { Invoke(nameof(SecondGeneratorEncounterSpawn), spawned); }
        public void Receive_AddEnemies(ProceduralSetup Setup) { Invoke(nameof(Receive_AddEnemies), Setup); }
        public void ProgressCurrentObjective() { Invoke(nameof(ProgressCurrentObjective)); }
        public Actor PlaceObjectInRoom(ProceduralSetup Setup, RoomNode RoomNode, DebrisPositioning Positioning, Object placementActor, RandomStream RandomStream, bool checkImportantLocations) { return Invoke<Actor>(nameof(PlaceObjectInRoom), Setup, RoomNode, Positioning, placementActor, RandomStream, checkImportantLocations); }
        public void OnResourceChanged(CappedResource Resource, float amount) { Invoke(nameof(OnResourceChanged), Resource, amount); }
        public void OnRep_ObjectivesStage() { Invoke(nameof(OnRep_ObjectivesStage)); }
        public void OnRep_GeneratorsActivated() { Invoke(nameof(OnRep_GeneratorsActivated)); }
        public void OnRep_AmountCollected() { Invoke(nameof(OnRep_AmountCollected)); }
        public void OnCoreDeposited() { Invoke(nameof(OnCoreDeposited)); }
        public bool IsSubObjectiveComplete(int objectiveIndex) { return Invoke<bool>(nameof(IsSubObjectiveComplete), objectiveIndex); }
        public void InitGeneratorCount(int generators) { Invoke(nameof(InitGeneratorCount), generators); }
        public Transform GetTurretGoal(ProceduralSetup Setup, Vector Origin, float idealRange, DebrisPositioning DebrisPositioning, Object terrainPlacement, bool success) { return Invoke<Transform>(nameof(GetTurretGoal), Setup, Origin, idealRange, DebrisPositioning, terrainPlacement, success); }
        public UArray<Actor> GetShieldGenerators() { return Invoke<UArray<Actor>>(nameof(GetShieldGenerators)); }
        public int GetShieldGeneratorCount() { return Invoke<int>(nameof(GetShieldGeneratorCount)); }
        public void GetObjectTransformInRoom(Transform Transform, ProceduralSetup Setup, RoomNode RoomNode, DebrisPositioning Positioning, Object placementActor, RandomStream RandomStream, bool checkImportantLocations) { Invoke(nameof(GetObjectTransformInRoom), Transform, Setup, RoomNode, Positioning, placementActor, RandomStream, checkImportantLocations); }
        public int GetFacilityRoomIndex() { return Invoke<int>(nameof(GetFacilityRoomIndex)); }
        public Vector GetFacilityLocation() { return Invoke<Vector>(nameof(GetFacilityLocation)); }
        public SubObjective GetCurrentObjective() { return Invoke<SubObjective>(nameof(GetCurrentObjective)); }
        public void GeneratorActivated() { Invoke(nameof(GeneratorActivated)); }
        public void FirstGeneratorEncounterSpawn(Pawn spawned) { Invoke(nameof(FirstGeneratorEncounterSpawn), spawned); }
        public void DropOverCharger(ProceduralSetup Setup, int roomIndex, Vector facilityLocation, float idealRange, float idealZDistance, DebrisPositioning DebrisPositioning, Object generatorClass, bool AddImportantLocation) { Invoke(nameof(DropOverCharger), Setup, roomIndex, facilityLocation, idealRange, idealZDistance, DebrisPositioning, generatorClass, AddImportantLocation); }
        public void ChangeObjective() { Invoke(nameof(ChangeObjective)); }
        public void AddShieldGenerator(Actor charger, int roomIndex) { Invoke(nameof(AddShieldGenerator), charger, roomIndex); }
    }
    public class HackableBuildingObjective : Objective
    {
        public HackableBuildingObjective(nint addr) : base(addr) { }
        public void DropOverCharger(ProceduralSetup Setup, Vector buildingLocation, float idealRange, float idealZDistance, DebrisPositioning DebrisPositioning, Object generatorClass, bool AddImportantLocation) { Invoke(nameof(DropOverCharger), Setup, buildingLocation, idealRange, idealZDistance, DebrisPositioning, generatorClass, AddImportantLocation); }
    }
    public class FacilityPowerStation : Actor
    {
        public FacilityPowerStation(nint addr) : base(addr) { }
        public Object OnHackingProgressDelegate { get { return this[nameof(OnHackingProgressDelegate)]; } set { this[nameof(OnHackingProgressDelegate)] = value; } }
        public Object OnProgresspointDelegate { get { return this[nameof(OnProgresspointDelegate)]; } set { this[nameof(OnProgresspointDelegate)] = value; } }
        public float ProgressPoint { get { return this[nameof(ProgressPoint)].GetValue<float>(); } set { this[nameof(ProgressPoint)].SetValue<float>(value); } }
        public int ProgresPointCount { get { return this[nameof(ProgresPointCount)].GetValue<int>(); } set { this[nameof(ProgresPointCount)].SetValue<int>(value); } }
        public float TimeToDefend { get { return this[nameof(TimeToDefend)].GetValue<float>(); } set { this[nameof(TimeToDefend)].SetValue<float>(value); } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
        public bool IsHacking { get { return this[nameof(IsHacking)].Flag; } set { this[nameof(IsHacking)].Flag = value; } }
        public void StopHacking() { Invoke(nameof(StopHacking)); }
        public void StartHacking() { Invoke(nameof(StartHacking)); }
        public void OnRep_Progress() { Invoke(nameof(OnRep_Progress)); }
        public void OnRep_IsHacking() { Invoke(nameof(OnRep_IsHacking)); }
        public void OnHackingComplete() { Invoke(nameof(OnHackingComplete)); }
        public void OnHackingChanged(bool IsHacking) { Invoke(nameof(OnHackingChanged), IsHacking); }
        public bool IsHacked() { return Invoke<bool>(nameof(IsHacked)); }
    }
    public class FacilityShieldGenerator : Actor
    {
        public FacilityShieldGenerator(nint addr) : base(addr) { }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
    }
    public class TentacleBase : EnemyPawn
    {
        public TentacleBase(nint addr) : base(addr) { }
        public SplineComponent SplineComponent { get { return this[nameof(SplineComponent)].As<SplineComponent>(); } set { this["SplineComponent"] = value; } }
        public Transform RestTransform { get { return this[nameof(RestTransform)].As<Transform>(); } set { this["RestTransform"] = value; } }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
        public float HeadMovementDuration { get { return this[nameof(HeadMovementDuration)].GetValue<float>(); } set { this[nameof(HeadMovementDuration)].SetValue<float>(value); } }
        public float CanSwayCooldown { get { return this[nameof(CanSwayCooldown)].GetValue<float>(); } set { this[nameof(CanSwayCooldown)].SetValue<float>(value); } }
        public Vector2D SwayRange { get { return this[nameof(SwayRange)].As<Vector2D>(); } set { this["SwayRange"] = value; } }
        public float NeckBaseTangentLength { get { return this[nameof(NeckBaseTangentLength)].GetValue<float>(); } set { this[nameof(NeckBaseTangentLength)].SetValue<float>(value); } }
        public Vector NeckBasePositionOffset { get { return this[nameof(NeckBasePositionOffset)].As<Vector>(); } set { this["NeckBasePositionOffset"] = value; } }
        public Vector NeckBaseTangentOffset { get { return this[nameof(NeckBaseTangentOffset)].As<Vector>(); } set { this["NeckBaseTangentOffset"] = value; } }
        public float NeckTopTangentLength { get { return this[nameof(NeckTopTangentLength)].GetValue<float>(); } set { this[nameof(NeckTopTangentLength)].SetValue<float>(value); } }
        public float DurationTentacleRetract { get { return this[nameof(DurationTentacleRetract)].GetValue<float>(); } set { this[nameof(DurationTentacleRetract)].SetValue<float>(value); } }
        public float DurationTentacleFoldout { get { return this[nameof(DurationTentacleFoldout)].GetValue<float>(); } set { this[nameof(DurationTentacleFoldout)].SetValue<float>(value); } }
        public SceneComponent HeadRoot { get { return this[nameof(HeadRoot)].As<SceneComponent>(); } set { this["HeadRoot"] = value; } }
        public SceneComponent HeadRotator { get { return this[nameof(HeadRotator)].As<SceneComponent>(); } set { this["HeadRotator"] = value; } }
        public void SetRestingTransform(Transform restingTransform, bool startAtRest) { Invoke(nameof(SetRestingTransform), restingTransform, startAtRest); }
        public void Recieve_OnRep_Owner() { Invoke(nameof(Recieve_OnRep_Owner)); }
        public void MoveHydraHead(Transform newDesiredTransform, float newCanSwayCooldown, float newHeadMovementDuration, bool UseSpring) { Invoke(nameof(MoveHydraHead), newDesiredTransform, newCanSwayCooldown, newHeadMovementDuration, UseSpring); }
        public StabberVineRoot GetStabberVineRoot() { return Invoke<StabberVineRoot>(nameof(GetStabberVineRoot)); }
        public SceneComponent GetHeadRotator() { return Invoke<SceneComponent>(nameof(GetHeadRotator)); }
        public SceneComponent GetHeadRoot() { return Invoke<SceneComponent>(nameof(GetHeadRoot)); }
    }
    public class FacilityTentacle : TentacleBase
    {
        public FacilityTentacle(nint addr) : base(addr) { }
        public float SwaySpeed { get { return this[nameof(SwaySpeed)].GetValue<float>(); } set { this[nameof(SwaySpeed)].SetValue<float>(value); } }
        public bool Extended { get { return this[nameof(Extended)].Flag; } set { this[nameof(Extended)].Flag = value; } }
        public UArray<AnimMontage> HitReactions { get { return new UArray<AnimMontage>(this[nameof(HitReactions)].Address); } }
        public EFacilityTentacleState TentacleState { get { return (EFacilityTentacleState)this[nameof(TentacleState)].GetValue<int>(); } set { this[nameof(TentacleState)].SetValue<int>((int)value); } }
        public SkeletalMeshComponent HeadMesh { get { return this[nameof(HeadMesh)].As<SkeletalMeshComponent>(); } set { this["HeadMesh"] = value; } }
        public TentacleTarget DesiredTarget { get { return this[nameof(DesiredTarget)].As<TentacleTarget>(); } set { this["DesiredTarget"] = value; } }
        public void PlayHitReaction(float amount) { Invoke(nameof(PlayHitReaction), amount); }
        public void OnStateChanged(EFacilityTentacleState NewState) { Invoke(nameof(OnStateChanged), NewState); }
        public void OnRep_TentacleState() { Invoke(nameof(OnRep_TentacleState)); }
        public void OnRep_DesiredTarget() { Invoke(nameof(OnRep_DesiredTarget)); }
        public bool FindBurrowLocation(DebrisPositioning Debris, Vector Origin, float Radius, Vector OutLocation) { return Invoke<bool>(nameof(FindBurrowLocation), Debris, Origin, Radius, OutLocation); }
    }
    public class FacilityTentacleHeadAnimInstance : EnemyAnimInstance
    {
        public FacilityTentacleHeadAnimInstance(nint addr) : base(addr) { }
        public bool Searching { get { return this[nameof(Searching)].Flag; } set { this[nameof(Searching)].Flag = value; } }
        public bool Melee { get { return this[nameof(Melee)].Flag; } set { this[nameof(Melee)].Flag = value; } }
        public bool RangedAttack { get { return this[nameof(RangedAttack)].Flag; } set { this[nameof(RangedAttack)].Flag = value; } }
    }
    public class FacilityTurretController : FSDAIController
    {
        public FacilityTurretController(nint addr) : base(addr) { }
        public AIPerceptionComponent Perception { get { return this[nameof(Perception)].As<AIPerceptionComponent>(); } set { this["Perception"] = value; } }
        public float RememberTargetTime { get { return this[nameof(RememberTargetTime)].GetValue<float>(); } set { this[nameof(RememberTargetTime)].SetValue<float>(value); } }
        public float RetargetOnAttackChance { get { return this[nameof(RetargetOnAttackChance)].GetValue<float>(); } set { this[nameof(RetargetOnAttackChance)].SetValue<float>(value); } }
        public bool RespectAttack { get { return this[nameof(RespectAttack)].Flag; } set { this[nameof(RespectAttack)].Flag = value; } }
        public void OnTurretsAttackingChanged(bool IsAttacking) { Invoke(nameof(OnTurretsAttackingChanged), IsAttacking); }
        public void OnTargetRevived() { Invoke(nameof(OnTargetRevived)); }
        public void OnTargetDied(HealthComponentBase Health) { Invoke(nameof(OnTargetDied), Health); }
        public void OnPerceptionUpdated(Actor sensedActor, AIStimulus Stimulus) { Invoke(nameof(OnPerceptionUpdated), sensedActor, Stimulus); }
    }
    public class FacilityTurret : EnemyPawn
    {
        public FacilityTurret(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public float IndicatorActivationDelay { get { return this[nameof(IndicatorActivationDelay)].GetValue<float>(); } set { this[nameof(IndicatorActivationDelay)].SetValue<float>(value); } }
        public bool FinishAttackIgnoreLoS { get { return this[nameof(FinishAttackIgnoreLoS)].Flag; } set { this[nameof(FinishAttackIgnoreLoS)].Flag = value; } }
        public bool InvulnerableOnInactive { get { return this[nameof(InvulnerableOnInactive)].Flag; } set { this[nameof(InvulnerableOnInactive)].Flag = value; } }
        public float FoldOutTime { get { return this[nameof(FoldOutTime)].GetValue<float>(); } set { this[nameof(FoldOutTime)].SetValue<float>(value); } }
        public SoundCue EngagedAudio { get { return this[nameof(EngagedAudio)].As<SoundCue>(); } set { this["EngagedAudio"] = value; } }
        public float Offset { get { return this[nameof(Offset)].GetValue<float>(); } set { this[nameof(Offset)].SetValue<float>(value); } }
        public float AimAcceleration { get { return this[nameof(AimAcceleration)].GetValue<float>(); } set { this[nameof(AimAcceleration)].SetValue<float>(value); } }
        public RuntimeFloatCurve AimSpeedCurve { get { return this[nameof(AimSpeedCurve)].As<RuntimeFloatCurve>(); } set { this["AimSpeedCurve"] = value; } }
        public Actor CurrentTarget { get { return this[nameof(CurrentTarget)].As<Actor>(); } set { this["CurrentTarget"] = value; } }
        public bool TurretEngaged { get { return this[nameof(TurretEngaged)].Flag; } set { this[nameof(TurretEngaged)].Flag = value; } }
        public bool AlwaysActive { get { return this[nameof(AlwaysActive)].Flag; } set { this[nameof(AlwaysActive)].Flag = value; } }
        public void TurnOffMesh() { Invoke(nameof(TurnOffMesh)); }
        public void SetIsAttacking(bool IsAttacking) { Invoke(nameof(SetIsAttacking), IsAttacking); }
        public void OnRep_TurretEngaged() { Invoke(nameof(OnRep_TurretEngaged)); }
        public void OnProjectileSpawned() { Invoke(nameof(OnProjectileSpawned)); }
        public void OnEngagedChanged(bool engaged) { Invoke(nameof(OnEngagedChanged), engaged); }
        public void OnAttack() { Invoke(nameof(OnAttack)); }
        public Rotator GetLookingDirection() { return Invoke<Rotator>(nameof(GetLookingDirection)); }
    }
    public class SpinningFacilityturret : FacilityTurret
    {
        public SpinningFacilityturret(nint addr) : base(addr) { }
        public Rotator TargetRotation { get { return this[nameof(TargetRotation)].As<Rotator>(); } set { this["TargetRotation"] = value; } }
        public RandRange AimAtTargetEveryTurn { get { return this[nameof(AimAtTargetEveryTurn)].As<RandRange>(); } set { this["AimAtTargetEveryTurn"] = value; } }
        public float TurnCooldown { get { return this[nameof(TurnCooldown)].GetValue<float>(); } set { this[nameof(TurnCooldown)].SetValue<float>(value); } }
        public float TurnTimer { get { return this[nameof(TurnTimer)].GetValue<float>(); } set { this[nameof(TurnTimer)].SetValue<float>(value); } }
        public float Acceptance { get { return this[nameof(Acceptance)].GetValue<float>(); } set { this[nameof(Acceptance)].SetValue<float>(value); } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
    }
    public class AimingFacilityTurret : FacilityTurret
    {
        public AimingFacilityTurret(nint addr) : base(addr) { }
        public bool IsLockedOn { get { return this[nameof(IsLockedOn)].Flag; } set { this[nameof(IsLockedOn)].Flag = value; } }
        public ParticleSystemComponent aimIndicator { get { return this[nameof(aimIndicator)].As<ParticleSystemComponent>(); } set { this["aimIndicator"] = value; } }
        public ParticleSystemComponent aimIndicatorLock { get { return this[nameof(aimIndicatorLock)].As<ParticleSystemComponent>(); } set { this["aimIndicatorLock"] = value; } }
        public float LockOnTime { get { return this[nameof(LockOnTime)].GetValue<float>(); } set { this[nameof(LockOnTime)].SetValue<float>(value); } }
        public float BurstInterval { get { return this[nameof(BurstInterval)].GetValue<float>(); } set { this[nameof(BurstInterval)].SetValue<float>(value); } }
        public float FireInterval { get { return this[nameof(FireInterval)].GetValue<float>(); } set { this[nameof(FireInterval)].SetValue<float>(value); } }
        public float TurretRotationSpeed { get { return this[nameof(TurretRotationSpeed)].GetValue<float>(); } set { this[nameof(TurretRotationSpeed)].SetValue<float>(value); } }
        public float InitialLockonDelay { get { return this[nameof(InitialLockonDelay)].GetValue<float>(); } set { this[nameof(InitialLockonDelay)].SetValue<float>(value); } }
        public float RegainLosLockonModifier { get { return this[nameof(RegainLosLockonModifier)].GetValue<float>(); } set { this[nameof(RegainLosLockonModifier)].SetValue<float>(value); } }
        public float AimZOffset { get { return this[nameof(AimZOffset)].GetValue<float>(); } set { this[nameof(AimZOffset)].SetValue<float>(value); } }
        public float TargetLeadingStrength { get { return this[nameof(TargetLeadingStrength)].GetValue<float>(); } set { this[nameof(TargetLeadingStrength)].SetValue<float>(value); } }
        public float TargetLeadingResponsiveness { get { return this[nameof(TargetLeadingResponsiveness)].GetValue<float>(); } set { this[nameof(TargetLeadingResponsiveness)].SetValue<float>(value); } }
        public float RaimainAfterShotTime { get { return this[nameof(RaimainAfterShotTime)].GetValue<float>(); } set { this[nameof(RaimainAfterShotTime)].SetValue<float>(value); } }
        public float TargetLeadingAfterLockonMultiplier { get { return this[nameof(TargetLeadingAfterLockonMultiplier)].GetValue<float>(); } set { this[nameof(TargetLeadingAfterLockonMultiplier)].SetValue<float>(value); } }
        public float TurningSpeedAfterLockOnMultipier { get { return this[nameof(TurningSpeedAfterLockOnMultipier)].GetValue<float>(); } set { this[nameof(TurningSpeedAfterLockOnMultipier)].SetValue<float>(value); } }
        public float PreLockonTargetChangeChance { get { return this[nameof(PreLockonTargetChangeChance)].GetValue<float>(); } set { this[nameof(PreLockonTargetChangeChance)].SetValue<float>(value); } }
        public float PreLockongTargetChangeRate { get { return this[nameof(PreLockongTargetChangeRate)].GetValue<float>(); } set { this[nameof(PreLockongTargetChangeRate)].SetValue<float>(value); } }
        public float IndicatorFlashTime { get { return this[nameof(IndicatorFlashTime)].GetValue<float>(); } set { this[nameof(IndicatorFlashTime)].SetValue<float>(value); } }
        public bool TrackTargetAfterLockon { get { return this[nameof(TrackTargetAfterLockon)].Flag; } set { this[nameof(TrackTargetAfterLockon)].Flag = value; } }
        public bool ConstantAimAfterLock { get { return this[nameof(ConstantAimAfterLock)].Flag; } set { this[nameof(ConstantAimAfterLock)].Flag = value; } }
        public bool UseTraceForLockOn { get { return this[nameof(UseTraceForLockOn)].Flag; } set { this[nameof(UseTraceForLockOn)].Flag = value; } }
        public EIndicatorMode IndicatorMode { get { return (EIndicatorMode)this[nameof(IndicatorMode)].GetValue<int>(); } set { this[nameof(IndicatorMode)].SetValue<int>((int)value); } }
        public Int32Interval BurstCount { get { return this[nameof(BurstCount)].As<Int32Interval>(); } set { this["BurstCount"] = value; } }
        public void SetupAimindicator(ParticleSystemComponent aimIndicator, ParticleSystemComponent aimIndicatorLock) { Invoke(nameof(SetupAimindicator), aimIndicator, aimIndicatorLock); }
        public void OnRep_IsLockedOn() { Invoke(nameof(OnRep_IsLockedOn)); }
        public void OnRep_IndicatorMode() { Invoke(nameof(OnRep_IndicatorMode)); }
        public void OnLockedOn(bool lockedOn) { Invoke(nameof(OnLockedOn), lockedOn); }
    }
    public class FacilityTurretAnimInstance : EnemyAnimInstance
    {
        public FacilityTurretAnimInstance(nint addr) : base(addr) { }
        public Rotator AimRotation { get { return this[nameof(AimRotation)].As<Rotator>(); } set { this["AimRotation"] = value; } }
        public bool IsEngaged { get { return this[nameof(IsEngaged)].Flag; } set { this[nameof(IsEngaged)].Flag = value; } }
    }
    public class FadeScreenSubSystem : GameInstanceSubsystem
    {
        public FadeScreenSubSystem(nint addr) : base(addr) { }
        public Object OnFadeInComplete { get { return this[nameof(OnFadeInComplete)]; } set { this[nameof(OnFadeInComplete)] = value; } }
        public FadeData Fading { get { return this[nameof(Fading)].As<FadeData>(); } set { this["Fading"] = value; } }
        public bool IsScreenFadingToBlack(Object WorldContext) { return Invoke<bool>(nameof(IsScreenFadingToBlack), WorldContext); }
        public bool IsScreenFadingFromBlack(Object WorldContext) { return Invoke<bool>(nameof(IsScreenFadingFromBlack), WorldContext); }
        public bool IsScreenFading(Object WorldContext) { return Invoke<bool>(nameof(IsScreenFading), WorldContext); }
        public float GetCurrentFadeAmount() { return Invoke<float>(nameof(GetCurrentFadeAmount)); }
        public void FadeScreenToBlack(Object WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig, Texture LoadingImage) { Invoke(nameof(FadeScreenToBlack), WorldContext, FadeTime, Delay, ResetExistingFades, CapFramerate, FadeWorldOnly, ToSpaceRig, LoadingImage); }
        public void FadeScreenFromBlack(Object WorldContext, float FadeTime, float Delay, bool ResetExistingFades, bool CapFramerate, bool FadeWorldOnly, bool ToSpaceRig) { Invoke(nameof(FadeScreenFromBlack), WorldContext, FadeTime, Delay, ResetExistingFades, CapFramerate, FadeWorldOnly, ToSpaceRig); }
        public void BlackoutScreen(Object WorldContext, bool FadeWorldOnly) { Invoke(nameof(BlackoutScreen), WorldContext, FadeWorldOnly); }
    }
    public class FadeVisibilitySubSystem : WorldSubsystem
    {
        public FadeVisibilitySubSystem(nint addr) : base(addr) { }
        public void ScalePrimitive(PrimitiveComponent Component, Vector StartScale, Vector EndScale, float Duration) { Invoke(nameof(ScalePrimitive), Component, StartScale, EndScale, Duration); }
        public void ScaleOutPrimitive(PrimitiveComponent Component, float Duration) { Invoke(nameof(ScaleOutPrimitive), Component, Duration); }
        public void ScaleInPrimitive(PrimitiveComponent Component, float Duration) { Invoke(nameof(ScaleInPrimitive), Component, Duration); }
        public void FadeOutMaterialByName(MeshComponent Component, Object Name, Object ParameterName, float Duration) { Invoke(nameof(FadeOutMaterialByName), Component, Name, ParameterName, Duration); }
        public void FadeOutMaterialByIndex(MeshComponent Component, int MaterialIndex, Object ParameterName, float Duration) { Invoke(nameof(FadeOutMaterialByIndex), Component, MaterialIndex, ParameterName, Duration); }
        public void FadeOutLight(LightComponent Light, float Duration) { Invoke(nameof(FadeOutLight), Light, Duration); }
        public void FadeLightByCurve(LightComponent Light, RuntimeFloatCurve Curve) { Invoke(nameof(FadeLightByCurve), Light, Curve); }
        public void FadeInMaterialByName(MeshComponent Component, Object Name, Object ParameterName, float Duration) { Invoke(nameof(FadeInMaterialByName), Component, Name, ParameterName, Duration); }
        public void FadeInMaterialByIndex(MeshComponent Component, int MaterialIndex, Object ParameterName, float Duration) { Invoke(nameof(FadeInMaterialByIndex), Component, MaterialIndex, ParameterName, Duration); }
        public void FadeInLight(LightComponent Light, float Duration, float startIntensityAtPercent) { Invoke(nameof(FadeInLight), Light, Duration, startIntensityAtPercent); }
    }
    public class FakeFallComponent : ActorComponent
    {
        public FakeFallComponent(nint addr) : base(addr) { }
        public Object OnFallingChanged { get { return this[nameof(OnFallingChanged)]; } set { this[nameof(OnFallingChanged)] = value; } }
        public void StartFakeFall() { Invoke(nameof(StartFakeFall)); }
    }
    public class FakeMoverSettings : DataAsset
    {
        public FakeMoverSettings(nint addr) : base(addr) { }
        public DeepPathFinderSize PathfinderColiSize { get { return (DeepPathFinderSize)this[nameof(PathfinderColiSize)].GetValue<int>(); } set { this[nameof(PathfinderColiSize)].SetValue<int>((int)value); } }
        public bool StickToSurface { get { return this[nameof(StickToSurface)].Flag; } set { this[nameof(StickToSurface)].Flag = value; } }
        public bool AlignRotationToSurface { get { return this[nameof(AlignRotationToSurface)].Flag; } set { this[nameof(AlignRotationToSurface)].Flag = value; } }
        public float AirFriction { get { return this[nameof(AirFriction)].GetValue<float>(); } set { this[nameof(AirFriction)].SetValue<float>(value); } }
        public float SurfaceFriction { get { return this[nameof(SurfaceFriction)].GetValue<float>(); } set { this[nameof(SurfaceFriction)].SetValue<float>(value); } }
        public float Gravity { get { return this[nameof(Gravity)].GetValue<float>(); } set { this[nameof(Gravity)].SetValue<float>(value); } }
        public float AirGravity { get { return this[nameof(AirGravity)].GetValue<float>(); } set { this[nameof(AirGravity)].SetValue<float>(value); } }
        public FakeMoverPropulsion Propulsion { get { return this[nameof(Propulsion)].As<FakeMoverPropulsion>(); } set { this["Propulsion"] = value; } }
        public FakeMoverTarget NearestPlayerInfluence { get { return this[nameof(NearestPlayerInfluence)].As<FakeMoverTarget>(); } set { this["NearestPlayerInfluence"] = value; } }
        public FakeMoverTarget TargetInfluence { get { return this[nameof(TargetInfluence)].As<FakeMoverTarget>(); } set { this["TargetInfluence"] = value; } }
    }
    public class FakePhysicsMover : Actor
    {
        public FakePhysicsMover(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public FakeMoverState MoverState { get { return this[nameof(MoverState)].As<FakeMoverState>(); } set { this["MoverState"] = value; } }
        public FakeMoveState PosVel { get { return this[nameof(PosVel)].As<FakeMoveState>(); } set { this["PosVel"] = value; } }
        public FakeMoverSettings MoveSettings { get { return this[nameof(MoveSettings)].As<FakeMoverSettings>(); } set { this["MoveSettings"] = value; } }
        public float SyncTime { get { return this[nameof(SyncTime)].GetValue<float>(); } set { this[nameof(SyncTime)].SetValue<float>(value); } }
        public void Teleport(Vector Pos, Vector Vel) { Invoke(nameof(Teleport), Pos, Vel); }
        public void OnRep_PosVel(FakeMoveState PosVel) { Invoke(nameof(OnRep_PosVel), PosVel); }
        public void OnRep_MoveSettings(FakeMoverSettings MoveSettings) { Invoke(nameof(OnRep_MoveSettings), MoveSettings); }
        public void ApplyImpulse(Vector Impulse) { Invoke(nameof(ApplyImpulse), Impulse); }
    }
    public class FallingStateComponent : CharacterStateComponent
    {
        public FallingStateComponent(nint addr) : base(addr) { }
        public float FallDamageStartVelocity { get { return this[nameof(FallDamageStartVelocity)].GetValue<float>(); } set { this[nameof(FallDamageStartVelocity)].SetValue<float>(value); } }
        public float FallDamageModifier { get { return this[nameof(FallDamageModifier)].GetValue<float>(); } set { this[nameof(FallDamageModifier)].SetValue<float>(value); } }
        public float AutoClimbMinDelay { get { return this[nameof(AutoClimbMinDelay)].GetValue<float>(); } set { this[nameof(AutoClimbMinDelay)].SetValue<float>(value); } }
        public float AutoClimbLookForwardDistance { get { return this[nameof(AutoClimbLookForwardDistance)].GetValue<float>(); } set { this[nameof(AutoClimbLookForwardDistance)].SetValue<float>(value); } }
        public float MaxClimbHeight { get { return this[nameof(MaxClimbHeight)].GetValue<float>(); } set { this[nameof(MaxClimbHeight)].SetValue<float>(value); } }
        public float MinClimbHeight { get { return this[nameof(MinClimbHeight)].GetValue<float>(); } set { this[nameof(MinClimbHeight)].SetValue<float>(value); } }
        public float CapsuleCheckZOffset { get { return this[nameof(CapsuleCheckZOffset)].GetValue<float>(); } set { this[nameof(CapsuleCheckZOffset)].SetValue<float>(value); } }
        public float MinInputDotProduct { get { return this[nameof(MinInputDotProduct)].GetValue<float>(); } set { this[nameof(MinInputDotProduct)].SetValue<float>(value); } }
        public float JumpZVelocity { get { return this[nameof(JumpZVelocity)].GetValue<float>(); } set { this[nameof(JumpZVelocity)].SetValue<float>(value); } }
        public bool DebugAutoClimb { get { return this[nameof(DebugAutoClimb)].Flag; } set { this[nameof(DebugAutoClimb)].Flag = value; } }
        public DialogDataAsset FallingShout { get { return this[nameof(FallingShout)].As<DialogDataAsset>(); } set { this["FallingShout"] = value; } }
        public float ShoutAfterDistance { get { return this[nameof(ShoutAfterDistance)].GetValue<float>(); } set { this[nameof(ShoutAfterDistance)].SetValue<float>(value); } }
        public UseAnimationSetting ClimbUseSettings { get { return this[nameof(ClimbUseSettings)].As<UseAnimationSetting>(); } set { this["ClimbUseSettings"] = value; } }
        public float HoverBootAirFriction { get { return this[nameof(HoverBootAirFriction)].GetValue<float>(); } set { this[nameof(HoverBootAirFriction)].SetValue<float>(value); } }
        public float HoverBootAirControl { get { return this[nameof(HoverBootAirControl)].GetValue<float>(); } set { this[nameof(HoverBootAirControl)].SetValue<float>(value); } }
        public float HoverBootGravityScale { get { return this[nameof(HoverBootGravityScale)].GetValue<float>(); } set { this[nameof(HoverBootGravityScale)].SetValue<float>(value); } }
        public DialogDataAsset ShoutHoverBootsBegin { get { return this[nameof(ShoutHoverBootsBegin)].As<DialogDataAsset>(); } set { this["ShoutHoverBootsBegin"] = value; } }
        public float HoverBootActivateDuration { get { return this[nameof(HoverBootActivateDuration)].GetValue<float>(); } set { this[nameof(HoverBootActivateDuration)].SetValue<float>(value); } }
        public bool bHoverBootsActive { get { return this[nameof(bHoverBootsActive)].Flag; } set { this[nameof(bHoverBootsActive)].Flag = value; } }
        public float HoverBootMaxDuration { get { return this[nameof(HoverBootMaxDuration)].GetValue<float>(); } set { this[nameof(HoverBootMaxDuration)].SetValue<float>(value); } }
        public Vector2D JumpBootsVelocityWindow { get { return this[nameof(JumpBootsVelocityWindow)].As<Vector2D>(); } set { this["JumpBootsVelocityWindow"] = value; } }
        public float JumpBootsZVelocity { get { return this[nameof(JumpBootsZVelocity)].GetValue<float>(); } set { this[nameof(JumpBootsZVelocity)].SetValue<float>(value); } }
        public bool JumpBootsActive { get { return this[nameof(JumpBootsActive)].Flag; } set { this[nameof(JumpBootsActive)].Flag = value; } }
        public void ShowJumpBootsActivation() { Invoke(nameof(ShowJumpBootsActivation)); }
        public void Server_TakeFallDamage(float amount) { Invoke(nameof(Server_TakeFallDamage), amount); }
        public void Server_SetJumpPressed(bool Pressed) { Invoke(nameof(Server_SetJumpPressed), Pressed); }
        public void Server_SetHoverBootsPressed(bool IsPressed) { Invoke(nameof(Server_SetHoverBootsPressed), IsPressed); }
        public void Server_SetFallVelocity(float Velocity) { Invoke(nameof(Server_SetFallVelocity), Velocity); }
        public void Server_ClimbLedge(bool shouldPlayAnimation) { Invoke(nameof(Server_ClimbLedge), shouldPlayAnimation); }
        public void Server_ActivateJumpBoots() { Invoke(nameof(Server_ActivateJumpBoots)); }
        public void ReceiveHoverBootsTick(float DeltaSeconds) { Invoke(nameof(ReceiveHoverBootsTick), DeltaSeconds); }
        public void ReceiveHoverBootsActiveChanged(bool IsActive) { Invoke(nameof(ReceiveHoverBootsActiveChanged), IsActive); }
        public void OnRep_HoverBootsActive() { Invoke(nameof(OnRep_HoverBootsActive)); }
        public void JumpReleased() { Invoke(nameof(JumpReleased)); }
        public void JumpPressed() { Invoke(nameof(JumpPressed)); }
        public void HoverBootsReleased() { Invoke(nameof(HoverBootsReleased)); }
        public void HoverBootsPressed() { Invoke(nameof(HoverBootsPressed)); }
        public void All_ShowJumpBootsActivation() { Invoke(nameof(All_ShowJumpBootsActivation)); }
        public void All_ShowFallImpact(FSDPhysicalMaterial PhysMat, Vector_NetQuantize Location) { Invoke(nameof(All_ShowFallImpact), PhysMat, Location); }
        public void All_ShowClimbLedge() { Invoke(nameof(All_ShowClimbLedge)); }
    }
    public class FindFriendSessionsBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public FindFriendSessionsBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public FindFriendSessionsBlueprintCallProxy FindFriendSessions(Object WorldContextObject, Object FriendId) { return Invoke<FindFriendSessionsBlueprintCallProxy>(nameof(FindFriendSessions), WorldContextObject, FriendId); }
    }
    public class FirstPersonSkeletalMeshComponent : SkeletalMeshComponent
    {
        public FirstPersonSkeletalMeshComponent(nint addr) : base(addr) { }
        public void SetFirstPersonFOVEnabled(bool bEnabled) { Invoke(nameof(SetFirstPersonFOVEnabled), bEnabled); }
        public bool GetSetFirstPersonFOVEnabled() { return Invoke<bool>(nameof(GetSetFirstPersonFOVEnabled)); }
        public Vector CalcFirstPersonFOVPositionCorrection(PlayerController PlayerController, Vector origPos) { return Invoke<Vector>(nameof(CalcFirstPersonFOVPositionCorrection), PlayerController, origPos); }
    }
    public class FirstPersonStaticMeshComponent : StaticMeshComponent
    {
        public FirstPersonStaticMeshComponent(nint addr) : base(addr) { }
        public bool EnabledFPFOV { get { return this[nameof(EnabledFPFOV)].Flag; } set { this[nameof(EnabledFPFOV)].Flag = value; } }
    }
    public class InterpolatedFirstPersonStaticMeshComponent : FirstPersonStaticMeshComponent
    {
        public InterpolatedFirstPersonStaticMeshComponent(nint addr) : base(addr) { }
    }
    public class FirstPersonWidgetComponent : WidgetComponent
    {
        public FirstPersonWidgetComponent(nint addr) : base(addr) { }
    }
    public class FirstPersonParticleSystemComponent : ParticleSystemComponent
    {
        public FirstPersonParticleSystemComponent(nint addr) : base(addr) { }
        public ParticleSystemComponent SpawnFirstPersonEmitterAttached(ParticleSystem EmitterTemplate, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool bAutoDestroy) { return Invoke<ParticleSystemComponent>(nameof(SpawnFirstPersonEmitterAttached), EmitterTemplate, AttachToComponent, AttachPointName, Location, Rotation, Scale, LocationType, bAutoDestroy); }
    }
    public class FirstPersonNiagaraComponent : NiagaraComponent
    {
        public FirstPersonNiagaraComponent(nint addr) : base(addr) { }
        public NiagaraComponent SpawnFirstPersonEmitterAttached(NiagaraSystem inNiagaraSystem, SceneComponent AttachToComponent, Object AttachPointName, Vector Location, Rotator Rotation, Vector Scale, byte LocationType, bool inAutoDestroy) { return Invoke<NiagaraComponent>(nameof(SpawnFirstPersonEmitterAttached), inNiagaraSystem, AttachToComponent, AttachPointName, Location, Rotation, Scale, LocationType, inAutoDestroy); }
    }
    public class FirstPersonPointLightComponent : PointLightComponent
    {
        public FirstPersonPointLightComponent(nint addr) : base(addr) { }
    }
    public class FlameThrowerItem : AmmoDrivenWeapon
    {
        public FlameThrowerItem(nint addr) : base(addr) { }
        public ParticleSystemComponent FlameParticleComponent { get { return this[nameof(FlameParticleComponent)].As<ParticleSystemComponent>(); } set { this["FlameParticleComponent"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public StickyFlameSpawner StickyFlames { get { return this[nameof(StickyFlames)].As<StickyFlameSpawner>(); } set { this["StickyFlames"] = value; } }
        public DamageComponent AoEHeatDamageComponent { get { return this[nameof(AoEHeatDamageComponent)].As<DamageComponent>(); } set { this["AoEHeatDamageComponent"] = value; } }
        public DamageComponent ExplodingTargetsDamageComponent { get { return this[nameof(ExplodingTargetsDamageComponent)].As<DamageComponent>(); } set { this["ExplodingTargetsDamageComponent"] = value; } }
        public MotionAudioController MotionAudio { get { return this[nameof(MotionAudio)].As<MotionAudioController>(); } set { this["MotionAudio"] = value; } }
        public int ShotCostProjectile { get { return this[nameof(ShotCostProjectile)].GetValue<int>(); } set { this[nameof(ShotCostProjectile)].SetValue<int>(value); } }
        public DecalData ImpactDecal { get { return this[nameof(ImpactDecal)].As<DecalData>(); } set { this["ImpactDecal"] = value; } }
        public float DecalDelay { get { return this[nameof(DecalDelay)].GetValue<float>(); } set { this[nameof(DecalDelay)].SetValue<float>(value); } }
        public float CurrentDecalDelay { get { return this[nameof(CurrentDecalDelay)].GetValue<float>(); } set { this[nameof(CurrentDecalDelay)].SetValue<float>(value); } }
        public ParticleSystem ImpactParticles { get { return this[nameof(ImpactParticles)].As<ParticleSystem>(); } set { this["ImpactParticles"] = value; } }
        public ParticleSystemComponent ImpactParticleInstance { get { return this[nameof(ImpactParticleInstance)].As<ParticleSystemComponent>(); } set { this["ImpactParticleInstance"] = value; } }
        public ParticleSystem FP_LongReachParticles { get { return this[nameof(FP_LongReachParticles)].As<ParticleSystem>(); } set { this["FP_LongReachParticles"] = value; } }
        public ParticleSystem TP_LongReachParticles { get { return this[nameof(TP_LongReachParticles)].As<ParticleSystem>(); } set { this["TP_LongReachParticles"] = value; } }
        public float VeryLongReachThreshold { get { return this[nameof(VeryLongReachThreshold)].GetValue<float>(); } set { this[nameof(VeryLongReachThreshold)].SetValue<float>(value); } }
        public ParticleSystem FP_VeryLongReachParticles { get { return this[nameof(FP_VeryLongReachParticles)].As<ParticleSystem>(); } set { this["FP_VeryLongReachParticles"] = value; } }
        public ParticleSystem TP_VeryLongReachParticles { get { return this[nameof(TP_VeryLongReachParticles)].As<ParticleSystem>(); } set { this["TP_VeryLongReachParticles"] = value; } }
        public UArray<Object> FlameParameterNames { get { return new UArray<Object>(this[nameof(FlameParameterNames)].Address); } }
        public float DamageSphereRadius { get { return this[nameof(DamageSphereRadius)].GetValue<float>(); } set { this[nameof(DamageSphereRadius)].SetValue<float>(value); } }
        public float MaxFlameDistance { get { return this[nameof(MaxFlameDistance)].GetValue<float>(); } set { this[nameof(MaxFlameDistance)].SetValue<float>(value); } }
        public float FlameGrowthPerSecond { get { return this[nameof(FlameGrowthPerSecond)].GetValue<float>(); } set { this[nameof(FlameGrowthPerSecond)].SetValue<float>(value); } }
        public float FlameEndPointResponsiveness { get { return this[nameof(FlameEndPointResponsiveness)].GetValue<float>(); } set { this[nameof(FlameEndPointResponsiveness)].SetValue<float>(value); } }
        public float FlameIntensityPerSecond { get { return this[nameof(FlameIntensityPerSecond)].GetValue<float>(); } set { this[nameof(FlameIntensityPerSecond)].SetValue<float>(value); } }
        public float DirectDamageTimeLimit { get { return this[nameof(DirectDamageTimeLimit)].GetValue<float>(); } set { this[nameof(DirectDamageTimeLimit)].SetValue<float>(value); } }
        public Object OnFireStatusEffect { get { return this[nameof(OnFireStatusEffect)]; } set { this[nameof(OnFireStatusEffect)] = value; } }
        public float ChanceToFleeOnDamage { get { return this[nameof(ChanceToFleeOnDamage)].GetValue<float>(); } set { this[nameof(ChanceToFleeOnDamage)].SetValue<float>(value); } }
        public float MeltPointRadius { get { return this[nameof(MeltPointRadius)].GetValue<float>(); } set { this[nameof(MeltPointRadius)].SetValue<float>(value); } }
        public float MeltPointBuildTime { get { return this[nameof(MeltPointBuildTime)].GetValue<float>(); } set { this[nameof(MeltPointBuildTime)].SetValue<float>(value); } }
        public float MeltCarveTime { get { return this[nameof(MeltCarveTime)].GetValue<float>(); } set { this[nameof(MeltCarveTime)].SetValue<float>(value); } }
        public ParticleSystem MeltSteamParticle { get { return this[nameof(MeltSteamParticle)].As<ParticleSystem>(); } set { this["MeltSteamParticle"] = value; } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public bool LongReachEnabled { get { return this[nameof(LongReachEnabled)].Flag; } set { this[nameof(LongReachEnabled)].Flag = value; } }
        public bool AoEHeatEnabled { get { return this[nameof(AoEHeatEnabled)].Flag; } set { this[nameof(AoEHeatEnabled)].Flag = value; } }
        public float KilledTargetsExplosionChance { get { return this[nameof(KilledTargetsExplosionChance)].GetValue<float>(); } set { this[nameof(KilledTargetsExplosionChance)].SetValue<float>(value); } }
        public float ShowDamageParticle { get { return this[nameof(ShowDamageParticle)].GetValue<float>(); } set { this[nameof(ShowDamageParticle)].SetValue<float>(value); } }
        public ParticleSystem DamangeTargetsParticles { get { return this[nameof(DamangeTargetsParticles)].As<ParticleSystem>(); } set { this["DamangeTargetsParticles"] = value; } }
        public ParticleSystem KilledTargetsExplodingParticles { get { return this[nameof(KilledTargetsExplodingParticles)].As<ParticleSystem>(); } set { this["KilledTargetsExplodingParticles"] = value; } }
        public SoundCue KilledTargetsExplodingSound { get { return this[nameof(KilledTargetsExplodingSound)].As<SoundCue>(); } set { this["KilledTargetsExplodingSound"] = value; } }
        public ProjectileLauncherBaseComponent ProjectileLancher { get { return this[nameof(ProjectileLancher)].As<ProjectileLauncherBaseComponent>(); } set { this["ProjectileLancher"] = value; } }
        public Object FireProjectileHoldDescription { get { return this[nameof(FireProjectileHoldDescription)]; } set { this[nameof(FireProjectileHoldDescription)] = value; } }
        public float FireProjectileHoldDuration { get { return this[nameof(FireProjectileHoldDuration)].GetValue<float>(); } set { this[nameof(FireProjectileHoldDuration)].SetValue<float>(value); } }
        public Object OnFireProjectileChargeBegin { get { return this[nameof(OnFireProjectileChargeBegin)]; } set { this[nameof(OnFireProjectileChargeBegin)] = value; } }
        public Object OnFireProjectileChargeEnd { get { return this[nameof(OnFireProjectileChargeEnd)]; } set { this[nameof(OnFireProjectileChargeEnd)] = value; } }
        public Object ExplosionCandidates { get { return this[nameof(ExplosionCandidates)]; } set { this[nameof(ExplosionCandidates)] = value; } }
        public void TriggerAoEHeat() { Invoke(nameof(TriggerAoEHeat)); }
        public void SetIsChargingForProjectile(bool isCharging) { Invoke(nameof(SetIsChargingForProjectile), isCharging); }
        public void ServerMeltIce(UArray<Vector> meltPoints) { Invoke(nameof(ServerMeltIce), meltPoints); }
        public void ServerDoDamage(Vector_NetQuantize Start, Vector_NetQuantize End) { Invoke(nameof(ServerDoDamage), Start, End); }
        public void OnTargetKilled(HealthComponentBase Health) { Invoke(nameof(OnTargetKilled), Health); }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void All_ShowTargetBurstIntoFire(Vector_NetQuantize Location, Rotator Rotation) { Invoke(nameof(All_ShowTargetBurstIntoFire), Location, Rotation); }
        public void All_FlameFeedback(Vector_NetQuantize Location, Rotator Rotation) { Invoke(nameof(All_FlameFeedback), Location, Rotation); }
    }
    public class FlameWallProjectile : Projectile
    {
        public FlameWallProjectile(nint addr) : base(addr) { }
        public Vector initialLocation { get { return this[nameof(initialLocation)].As<Vector>(); } set { this["initialLocation"] = value; } }
        public Object SegmentParticleClass { get { return this[nameof(SegmentParticleClass)]; } set { this[nameof(SegmentParticleClass)] = value; } }
        public Object SegmentDropClass { get { return this[nameof(SegmentDropClass)]; } set { this[nameof(SegmentDropClass)] = value; } }
        public int SegmentCount { get { return this[nameof(SegmentCount)].GetValue<int>(); } set { this[nameof(SegmentCount)].SetValue<int>(value); } }
        public float WallWidth { get { return this[nameof(WallWidth)].GetValue<float>(); } set { this[nameof(WallWidth)].SetValue<float>(value); } }
        public float WallDepth { get { return this[nameof(WallDepth)].GetValue<float>(); } set { this[nameof(WallDepth)].SetValue<float>(value); } }
        public float SegmentDropSpacingMultiplier { get { return this[nameof(SegmentDropSpacingMultiplier)].GetValue<float>(); } set { this[nameof(SegmentDropSpacingMultiplier)].SetValue<float>(value); } }
        public Object ImpactClass { get { return this[nameof(ImpactClass)]; } set { this[nameof(ImpactClass)] = value; } }
        public bool OnlyImpactActorOnce { get { return this[nameof(OnlyImpactActorOnce)].Flag; } set { this[nameof(OnlyImpactActorOnce)].Flag = value; } }
        public StickyFlameSpawner StickyFlameSpawner { get { return this[nameof(StickyFlameSpawner)].As<StickyFlameSpawner>(); } set { this["StickyFlameSpawner"] = value; } }
        public Object ImpactedActors { get { return this[nameof(ImpactedActors)]; } set { this[nameof(ImpactedActors)] = value; } }
    }
    public class FlameWallSegment : Actor
    {
        public FlameWallSegment(nint addr) : base(addr) { }
        public SphereComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<SphereComponent>(); } set { this["CollisionComponent"] = value; } }
        public StickyFlameSpawner StickyFlameSpawner { get { return this[nameof(StickyFlameSpawner)].As<StickyFlameSpawner>(); } set { this["StickyFlameSpawner"] = value; } }
        public Object NonStoppingClasses { get { return this[nameof(NonStoppingClasses)]; } set { this[nameof(NonStoppingClasses)] = value; } }
        public void OnDeactivate() { Invoke(nameof(OnDeactivate)); }
        public void OnComponentHit(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnComponentHit), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
    }
    public class Flare : FSDPhysicsActor
    {
        public Flare(nint addr) : base(addr) { }
        public float InitialSpeed { get { return this[nameof(InitialSpeed)].GetValue<float>(); } set { this[nameof(InitialSpeed)].SetValue<float>(value); } }
        public float InitialAngularImpulse { get { return this[nameof(InitialAngularImpulse)].GetValue<float>(); } set { this[nameof(InitialAngularImpulse)].SetValue<float>(value); } }
        public float InitialAngularImpulseRandomScale { get { return this[nameof(InitialAngularImpulseRandomScale)].GetValue<float>(); } set { this[nameof(InitialAngularImpulseRandomScale)].SetValue<float>(value); } }
        public int MaxFlares { get { return this[nameof(MaxFlares)].GetValue<int>(); } set { this[nameof(MaxFlares)].SetValue<int>(value); } }
        public float ProductionTime { get { return this[nameof(ProductionTime)].GetValue<float>(); } set { this[nameof(ProductionTime)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public LinearColor ChromaColor { get { return this[nameof(ChromaColor)].As<LinearColor>(); } set { this["ChromaColor"] = value; } }
        public bool IsFlareOn { get { return this[nameof(IsFlareOn)].Flag; } set { this[nameof(IsFlareOn)].Flag = value; } }
        public Actor DamageCauser { get { return this[nameof(DamageCauser)].As<Actor>(); } set { this["DamageCauser"] = value; } }
        public Object WeaponPreviewClass { get { return this[nameof(WeaponPreviewClass)]; } set { this[nameof(WeaponPreviewClass)] = value; } }
        public Object LoadoutItem { get { return this[nameof(LoadoutItem)]; } set { this[nameof(LoadoutItem)] = value; } }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public SoundCue ImpactGroundSound { get { return this[nameof(ImpactGroundSound)].As<SoundCue>(); } set { this["ImpactGroundSound"] = value; } }
        public void StartLightFunction(LightComponent mainLight, UArray<LightComponent> spotLights, CurveFloat flutterCurve, CurveFloat fadeInCurve) { Invoke(nameof(StartLightFunction), mainLight, spotLights, flutterCurve, fadeInCurve); }
        public void OnUpdateShadowRadius() { Invoke(nameof(OnUpdateShadowRadius)); }
        public void OnRep_IsFlareOn() { Invoke(nameof(OnRep_IsFlareOn)); }
        public void OnFlareSpawnCompleted() { Invoke(nameof(OnFlareSpawnCompleted)); }
        public void OnFlareIgnite() { Invoke(nameof(OnFlareIgnite)); }
        public void OnFlareExtinguish() { Invoke(nameof(OnFlareExtinguish)); }
        public void Inhibit() { Invoke(nameof(Inhibit)); }
        public float ImmidiateFadeLight() { return Invoke<float>(nameof(ImmidiateFadeLight)); }
        public Object GetWeaponViewClass() { return Invoke<Object>(nameof(GetWeaponViewClass)); }
        public Flare GetFlareDefaultObject(Object flareClass) { return Invoke<Flare>(nameof(GetFlareDefaultObject), flareClass); }
        public void ActorWasHit(Actor SelfActor, Actor OtherActor, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(ActorWasHit), SelfActor, OtherActor, NormalImpulse, Hit); }
        public void ActivateFlare() { Invoke(nameof(ActivateFlare)); }
    }
    public class NegPointLightComponent : PointLightComponent
    {
        public NegPointLightComponent(nint addr) : base(addr) { }
    }
    public class FlareController : WorldSubsystem
    {
        public FlareController(nint addr) : base(addr) { }
        public Object OnShadowQualityChanged { get { return this[nameof(OnShadowQualityChanged)]; } set { this[nameof(OnShadowQualityChanged)] = value; } }
        public UArray<FlareMeta> FlaresMeta { get { return new UArray<FlareMeta>(this[nameof(FlaresMeta)].Address); } }
        public void UnregisterFlareGunProjectile(FlareGunProjectile flareprj) { Invoke(nameof(UnregisterFlareGunProjectile), flareprj); }
        public void UnregisterFlare(Flare Flare) { Invoke(nameof(UnregisterFlare), Flare); }
        public void RegisterFlareGunProjectile(FlareGunProjectile flareprj) { Invoke(nameof(RegisterFlareGunProjectile), flareprj); }
        public void RegisterFlare(Flare Flare) { Invoke(nameof(RegisterFlare), Flare); }
        public Actor FindFlareNear(Object WorldContextObject, Vector Pos, bool allowMoving, float maxLightRadiusFraction) { return Invoke<Actor>(nameof(FindFlareNear), WorldContextObject, Pos, allowMoving, maxLightRadiusFraction); }
    }
    public class FlareGunProjectile : Projectile
    {
        public FlareGunProjectile(nint addr) : base(addr) { }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public bool IsFlareOn { get { return this[nameof(IsFlareOn)].Flag; } set { this[nameof(IsFlareOn)].Flag = value; } }
        public void UpdateLightDuration(float lightDuration) { Invoke(nameof(UpdateLightDuration), lightDuration); }
        public void OnUpdateShadowRadius() { Invoke(nameof(OnUpdateShadowRadius)); }
        public void OnRep_IsFlareOn() { Invoke(nameof(OnRep_IsFlareOn)); }
        public void OnFlareIgnite() { Invoke(nameof(OnFlareIgnite)); }
        public void OnFlareExtinguish() { Invoke(nameof(OnFlareExtinguish)); }
        public void OnDroppodImpact(TeamTransport DropPod) { Invoke(nameof(OnDroppodImpact), DropPod); }
        public void Inhibit() { Invoke(nameof(Inhibit)); }
        public void ActivateFlare() { Invoke(nameof(ActivateFlare)); }
    }
    public class PerkAsset : DataAsset
    {
        public PerkAsset(nint addr) : base(addr) { }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public bool bIsEquippable { get { return this[nameof(bIsEquippable)].Flag; } set { this[nameof(bIsEquippable)].Flag = value; } }
        public DialogDataAsset ShoutOnUseCharge { get { return this[nameof(ShoutOnUseCharge)].As<DialogDataAsset>(); } set { this["ShoutOnUseCharge"] = value; } }
        public UArray<Object> PerkLogicClasses { get { return new UArray<Object>(this[nameof(PerkLogicClasses)].Address); } }
        public Object HudIconWidgetClass { get { return this[nameof(HudIconWidgetClass)]; } set { this[nameof(HudIconWidgetClass)] = value; } }
        public UArray<Object> HudActivationWidgets { get { return new UArray<Object>(this[nameof(HudActivationWidgets)].Address); } }
        public int MaxUseCharges { get { return this[nameof(MaxUseCharges)].GetValue<int>(); } set { this[nameof(MaxUseCharges)].SetValue<int>(value); } }
        public float CoolDownBetweenUse { get { return this[nameof(CoolDownBetweenUse)].GetValue<float>(); } set { this[nameof(CoolDownBetweenUse)].SetValue<float>(value); } }
        public bool bIsHighlighted { get { return this[nameof(bIsHighlighted)].Flag; } set { this[nameof(bIsHighlighted)].Flag = value; } }
        public bool UseCharge(PlayerController PlayerController) { return Invoke<bool>(nameof(UseCharge), PlayerController); }
        public bool Unequip(Object WorldContext, PlayerCharacterID characterID) { return Invoke<bool>(nameof(Unequip), WorldContext, characterID); }
        public void SetHighlighted(Object WorldContext, bool IsHighlighted) { Invoke(nameof(SetHighlighted), WorldContext, IsHighlighted); }
        public void SetCharacterPerks(Object WorldContext, PlayerCharacterID characterID, UArray<PerkAsset> perks) { Invoke(nameof(SetCharacterPerks), WorldContext, characterID, perks); }
        public bool IsUsageType(EPerkUsageType InType) { return Invoke<bool>(nameof(IsUsageType), InType); }
        public bool IsPerkAvailableInTier(int Tier) { return Invoke<bool>(nameof(IsPerkAvailableInTier), Tier); }
        public bool IsEquippedBy(Object WorldContext, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsEquippedBy), WorldContext, characterID); }
        public float GetUseCoolDownTimeLeft(PlayerController PlayerController) { return Invoke<float>(nameof(GetUseCoolDownTimeLeft), PlayerController); }
        public float GetUseCoolDownProgress(PlayerController PlayerController) { return Invoke<float>(nameof(GetUseCoolDownProgress), PlayerController); }
        public float GetUseCoolDownDuration(PlayerController PlayerController) { return Invoke<float>(nameof(GetUseCoolDownDuration), PlayerController); }
        public EPerkUsageType GetUsageType() { return Invoke<EPerkUsageType>(nameof(GetUsageType)); }
        public EPerkTierState GetStateAtTier(Object WorldContext, int Tier) { return Invoke<EPerkTierState>(nameof(GetStateAtTier), WorldContext, Tier); }
        public int GetRemainingUseCharges(PlayerController PlayerController) { return Invoke<int>(nameof(GetRemainingUseCharges), PlayerController); }
        public int GetRankTier(int Rank) { return Invoke<int>(nameof(GetRankTier), Rank); }
        public Object GetRankDescription(int Rank) { return Invoke<Object>(nameof(GetRankDescription), Rank); }
        public int GetRankCost(int Rank) { return Invoke<int>(nameof(GetRankCost), Rank); }
        public bool GetRankAtTier(int Tier, int Rank) { return Invoke<bool>(nameof(GetRankAtTier), Tier, Rank); }
        public int GetMaxUseCharges(PlayerController PlayerController) { return Invoke<int>(nameof(GetMaxUseCharges), PlayerController); }
        public int GetMaxRank() { return Invoke<int>(nameof(GetMaxRank)); }
        public Object GetHudIconWidgetClass() { return Invoke<Object>(nameof(GetHudIconWidgetClass)); }
        public UArray<Object> GetHudActivationWidgets(EPerkHUDActivationLocation Location) { return Invoke<UArray<Object>>(nameof(GetHudActivationWidgets), Location); }
        public PerkDelegateItem GetDelegates(Object WorldContext) { return Invoke<PerkDelegateItem>(nameof(GetDelegates), WorldContext); }
        public int GetCurrentRank(Object WorldContext) { return Invoke<int>(nameof(GetCurrentRank), WorldContext); }
        public int GetChargesUsed(PlayerController PlayerController) { return Invoke<int>(nameof(GetChargesUsed), PlayerController); }
        public Object GetAdditionalRankDescription(int Rank) { return Invoke<Object>(nameof(GetAdditionalRankDescription), Rank); }
        public bool Equip(Object WorldContext, PlayerCharacterID characterID) { return Invoke<bool>(nameof(Equip), WorldContext, characterID); }
        public void CheatSetCurrentRank(Object WorldContext, int InRank) { Invoke(nameof(CheatSetCurrentRank), WorldContext, InRank); }
        public bool CanUseCharge(PlayerController PlayerController) { return Invoke<bool>(nameof(CanUseCharge), PlayerController); }
        public bool BuyPerkAtTier(Object WorldContext, int Tier) { return Invoke<bool>(nameof(BuyPerkAtTier), WorldContext, Tier); }
    }
    public class FloatPerkAsset : PerkAsset
    {
        public FloatPerkAsset(nint addr) : base(addr) { }
        public UArray<FloatPerkRank> Ranks { get { return new UArray<FloatPerkRank>(this[nameof(Ranks)].Address); } }
        public UArray<FloatPerkEffect> Effects { get { return new UArray<FloatPerkEffect>(this[nameof(Effects)].Address); } }
        public float GetPerkValue(Object WorldContext) { return Invoke<float>(nameof(GetPerkValue), WorldContext); }
        public float GetLastTierValue() { return Invoke<float>(nameof(GetLastTierValue)); }
        public float GetFloatPerkValue(Object WorldContext, FloatPerkAsset Perk, float UnclaimedValue) { return Invoke<float>(nameof(GetFloatPerkValue), WorldContext, Perk, UnclaimedValue); }
    }
    public class FloatPerkActivation : DataAsset
    {
        public FloatPerkActivation(nint addr) : base(addr) { }
        public void Receive_ActivatePerk(PlayerCharacter Character, float Value) { Invoke(nameof(Receive_ActivatePerk), Character, Value); }
    }
    public class StatPerkActivation : FloatPerkActivation
    {
        public StatPerkActivation(nint addr) : base(addr) { }
        public PawnStat PawnStat { get { return this[nameof(PawnStat)].As<PawnStat>(); } set { this["PawnStat"] = value; } }
        public EPawnStatType StatType { get { return (EPawnStatType)this[nameof(StatType)].GetValue<int>(); } set { this[nameof(StatType)].SetValue<int>((int)value); } }
    }
    public class FloatPerkComponent : ActorComponent
    {
        public FloatPerkComponent(nint addr) : base(addr) { }
        public float FloatValue { get { return this[nameof(FloatValue)].GetValue<float>(); } set { this[nameof(FloatValue)].SetValue<float>(value); } }
        public PlayerCharacter PlayerCharacter { get { return this[nameof(PlayerCharacter)].As<PlayerCharacter>(); } set { this["PlayerCharacter"] = value; } }
        public void Receive_OnInitialized() { Invoke(nameof(Receive_OnInitialized)); }
    }
    public class CreateComponentPerkActivation : FloatPerkActivation
    {
        public CreateComponentPerkActivation(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
    }
    public class EscapableGrabberEnemyActivation : FloatPerkActivation
    {
        public EscapableGrabberEnemyActivation(nint addr) : base(addr) { }
        public Object EnemyGrabberClass { get { return this[nameof(EnemyGrabberClass)]; } set { this[nameof(EnemyGrabberClass)] = value; } }
    }
    public class SetCooldownPerkActivation : FloatPerkActivation
    {
        public SetCooldownPerkActivation(nint addr) : base(addr) { }
    }
    public class SetMaxUsesPerkActivation : FloatPerkActivation
    {
        public SetMaxUsesPerkActivation(nint addr) : base(addr) { }
    }
    public class KillNearbyCreaturePerkComponent : FloatPerkComponent
    {
        public KillNearbyCreaturePerkComponent(nint addr) : base(addr) { }
        public Object EnemyClass { get { return this[nameof(EnemyClass)]; } set { this[nameof(EnemyClass)] = value; } }
    }
    public class BezerkPerkComponent : FloatPerkComponent
    {
        public BezerkPerkComponent(nint addr) : base(addr) { }
        public PawnStat BoostedStat { get { return this[nameof(BoostedStat)].As<PawnStat>(); } set { this["BoostedStat"] = value; } }
        public float AmountPerValue { get { return this[nameof(AmountPerValue)].GetValue<float>(); } set { this[nameof(AmountPerValue)].SetValue<float>(value); } }
        public void OnHealthChanged(float Health) { Invoke(nameof(OnHealthChanged), Health); }
    }
    public class EyeForEyePerkComponent : FloatPerkComponent
    {
        public EyeForEyePerkComponent(nint addr) : base(addr) { }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public Object EyeForEyeSTE { get { return this[nameof(EyeForEyeSTE)]; } set { this[nameof(EyeForEyeSTE)] = value; } }
        public Object LoadedSTE { get { return this[nameof(LoadedSTE)]; } set { this[nameof(LoadedSTE)] = value; } }
        public void OnHit(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnHit), Damage, DamageData, anyHealthLost); }
    }
    public class ThornsPerkComponent : FloatPerkComponent
    {
        public ThornsPerkComponent(nint addr) : base(addr) { }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public Object ThornsSTE { get { return this[nameof(ThornsSTE)]; } set { this[nameof(ThornsSTE)] = value; } }
        public void OnHit(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnHit), Damage, DamageData, anyHealthLost); }
    }
    public class SalutePerkComponent : FloatPerkComponent
    {
        public SalutePerkComponent(nint addr) : base(addr) { }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public float FleeRadius { get { return this[nameof(FleeRadius)].GetValue<float>(); } set { this[nameof(FleeRadius)].SetValue<float>(value); } }
        public void OnSalute() { Invoke(nameof(OnSalute)); }
    }
    public class ShieldLinkComponent : FloatPerkComponent
    {
        public ShieldLinkComponent(nint addr) : base(addr) { }
        public Object BoostedStatusEffect { get { return this[nameof(BoostedStatusEffect)]; } set { this[nameof(BoostedStatusEffect)] = value; } }
        public StatusEffect BoostedStatusEffectInstance { get { return this[nameof(BoostedStatusEffectInstance)].As<StatusEffect>(); } set { this["BoostedStatusEffectInstance"] = value; } }
        public float LinkDistance { get { return this[nameof(LinkDistance)].GetValue<float>(); } set { this[nameof(LinkDistance)].SetValue<float>(value); } }
        public Object LinkedCharacters { get { return this[nameof(LinkedCharacters)]; } set { this[nameof(LinkedCharacters)] = value; } }
        public Object LinkStatusEffect { get { return this[nameof(LinkStatusEffect)]; } set { this[nameof(LinkStatusEffect)] = value; } }
        public void TimerFunction() { Invoke(nameof(TimerFunction)); }
    }
    public class BeastMasterComponent : FloatPerkComponent
    {
        public BeastMasterComponent(nint addr) : base(addr) { }
        public bool ShowCanCharmIcon { get { return this[nameof(ShowCanCharmIcon)].Flag; } set { this[nameof(ShowCanCharmIcon)].Flag = value; } }
        public void SetDamage(DamageComponent cmp, float dmg) { Invoke(nameof(SetDamage), cmp, dmg); }
        public ActorComponent AddPetComponent(Object ComponentClass, FSDPawn targetPet, PlayerCharacter petOwner) { return Invoke<ActorComponent>(nameof(AddPetComponent), ComponentClass, targetPet, petOwner); }
    }
    public class PetComponent : ActorComponent
    {
        public PetComponent(nint addr) : base(addr) { }
        public Object OwningPlayer { get { return this[nameof(OwningPlayer)]; } set { this[nameof(OwningPlayer)] = value; } }
        public void ReceiveOwningPlayerChanged() { Invoke(nameof(ReceiveOwningPlayerChanged)); }
    }
    public class BeastMasterUseSphere : SphereComponent
    {
        public BeastMasterUseSphere(nint addr) : base(addr) { }
    }
    public class FloodFillSettings : DataAsset
    {
        public FloodFillSettings(nint addr) : base(addr) { }
        public Vector NoiseSize { get { return this[nameof(NoiseSize)].As<Vector>(); } set { this["NoiseSize"] = value; } }
        public float FreqMultiplier { get { return this[nameof(FreqMultiplier)].GetValue<float>(); } set { this[nameof(FreqMultiplier)].SetValue<float>(value); } }
        public float AmplitudeMultiplier { get { return this[nameof(AmplitudeMultiplier)].GetValue<float>(); } set { this[nameof(AmplitudeMultiplier)].SetValue<float>(value); } }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
        public bool Turbulence { get { return this[nameof(Turbulence)].Flag; } set { this[nameof(Turbulence)].Flag = value; } }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
        public int Octaves { get { return this[nameof(Octaves)].GetValue<int>(); } set { this[nameof(Octaves)].SetValue<int>(value); } }
        public UArray<LayeredNoise> NoiseLayers { get { return new UArray<LayeredNoise>(this[nameof(NoiseLayers)].Address); } }
    }
    public class DetailNoise : FloodFillSettings
    {
        public DetailNoise(nint addr) : base(addr) { }
        public float NoiseRange { get { return this[nameof(NoiseRange)].GetValue<float>(); } set { this[nameof(NoiseRange)].SetValue<float>(value); } }
    }
    public class FlyingStateComponent : CharacterStateComponent
    {
        public FlyingStateComponent(nint addr) : base(addr) { }
    }
    public class FoamPuddle : Actor
    {
        public FoamPuddle(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SceneComponent PuddleRoot { get { return this[nameof(PuddleRoot)].As<SceneComponent>(); } set { this["PuddleRoot"] = value; } }
        public NiagaraComponent NS_Foam { get { return this[nameof(NS_Foam)].As<NiagaraComponent>(); } set { this["NS_Foam"] = value; } }
        public RuntimeFloatCurve ScaleCurve { get { return this[nameof(ScaleCurve)].As<RuntimeFloatCurve>(); } set { this["ScaleCurve"] = value; } }
        public Object OnChangeVacuumStateDelegate { get { return this[nameof(OnChangeVacuumStateDelegate)]; } set { this[nameof(OnChangeVacuumStateDelegate)] = value; } }
        public UArray<Object> VacuumableActors { get { return new UArray<Object>(this[nameof(VacuumableActors)].Address); } }
        public SoundCue PickupSound { get { return this[nameof(PickupSound)].As<SoundCue>(); } set { this["PickupSound"] = value; } }
        public float PickupSoundCooldown { get { return this[nameof(PickupSoundCooldown)].GetValue<float>(); } set { this[nameof(PickupSoundCooldown)].SetValue<float>(value); } }
        public SoundCue PickupFilledSound { get { return this[nameof(PickupFilledSound)].As<SoundCue>(); } set { this["PickupFilledSound"] = value; } }
        public float PickupFilledCooldown { get { return this[nameof(PickupFilledCooldown)].GetValue<float>(); } set { this[nameof(PickupFilledCooldown)].SetValue<float>(value); } }
        public SoundCue VacuumedSound { get { return this[nameof(VacuumedSound)].As<SoundCue>(); } set { this["VacuumedSound"] = value; } }
        public float VacuumedCooldown { get { return this[nameof(VacuumedCooldown)].GetValue<float>(); } set { this[nameof(VacuumedCooldown)].SetValue<float>(value); } }
        public SoundCue VacuumedSoundFilled { get { return this[nameof(VacuumedSoundFilled)].As<SoundCue>(); } set { this["VacuumedSoundFilled"] = value; } }
        public float VacuumedSoundFilledCooldown { get { return this[nameof(VacuumedSoundFilledCooldown)].GetValue<float>(); } set { this[nameof(VacuumedSoundFilledCooldown)].SetValue<float>(value); } }
        public float InitialDebrisRadius { get { return this[nameof(InitialDebrisRadius)].GetValue<float>(); } set { this[nameof(InitialDebrisRadius)].SetValue<float>(value); } }
        public float TotalRadiusGrowth { get { return this[nameof(TotalRadiusGrowth)].GetValue<float>(); } set { this[nameof(TotalRadiusGrowth)].SetValue<float>(value); } }
        public float GrowthTime { get { return this[nameof(GrowthTime)].GetValue<float>(); } set { this[nameof(GrowthTime)].SetValue<float>(value); } }
        public float AttractorPowerWhenVacuuming { get { return this[nameof(AttractorPowerWhenVacuuming)].GetValue<float>(); } set { this[nameof(AttractorPowerWhenVacuuming)].SetValue<float>(value); } }
        public float ScaleTimeVacuuming { get { return this[nameof(ScaleTimeVacuuming)].GetValue<float>(); } set { this[nameof(ScaleTimeVacuuming)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public EVacuumState State { get { return (EVacuumState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public SceneComponent VacuumSource { get { return this[nameof(VacuumSource)].As<SceneComponent>(); } set { this["VacuumSource"] = value; } }
        public ushort MaxSoapPiles { get { return this[nameof(MaxSoapPiles)].GetValue<ushort>(); } set { this[nameof(MaxSoapPiles)].SetValue<ushort>(value); } }
        public bool UsesLocalSpace { get { return this[nameof(UsesLocalSpace)].Flag; } set { this[nameof(UsesLocalSpace)].Flag = value; } }
        public void SetState(EVacuumState State) { Invoke(nameof(SetState), State); }
        public void SetPuddleLifetime(float LifeTime) { Invoke(nameof(SetPuddleLifetime), LifeTime); }
        public void ScaleOutAndDestroy() { Invoke(nameof(ScaleOutAndDestroy)); }
        public void OnRep_State(EVacuumState prevState) { Invoke(nameof(OnRep_State), prevState); }
        public void OnHit(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnHit), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
    }
    public class FoamPuddle_WalkingPlagueheart : FoamPuddle
    {
        public FoamPuddle_WalkingPlagueheart(nint addr) : base(addr) { }
        public float FoamCleanRadius { get { return this[nameof(FoamCleanRadius)].GetValue<float>(); } set { this[nameof(FoamCleanRadius)].SetValue<float>(value); } }
    }
    public class ForgingFunctionLibrary : BlueprintFunctionLibrary
    {
        public ForgingFunctionLibrary(nint addr) : base(addr) { }
        public Schematic PickForgingMasteryDefaultReward(Object WorldContextObject, ESchematicType InType) { return Invoke<Schematic>(nameof(PickForgingMasteryDefaultReward), WorldContextObject, InType); }
        public ForgingResult GiveForgingXP(Object WorldContextObject) { return Invoke<ForgingResult>(nameof(GiveForgingXP), WorldContextObject); }
        public UArray<Schematic> GetOwnedSchematics(Object WorldContextObject) { return Invoke<UArray<Schematic>>(nameof(GetOwnedSchematics), WorldContextObject); }
        public void GetForgingPendingMasteryRewardNewest(Object WorldContextObject, bool OutSuccess, ForgingPendingReward OutReward) { Invoke(nameof(GetForgingPendingMasteryRewardNewest), WorldContextObject, OutSuccess, OutReward); }
        public ESchematicType GetForgingMasteryRewardType(Object WorldContextObject, int Level, bool ReturnDefaultIfUnavailable) { return Invoke<ESchematicType>(nameof(GetForgingMasteryRewardType), WorldContextObject, Level, ReturnDefaultIfUnavailable); }
        public ESchematicType GetForgingMasteryRewardDefaultType(ESchematicType InType) { return Invoke<ESchematicType>(nameof(GetForgingMasteryRewardDefaultType), InType); }
        public float GetForgingLevelProgress(Object WorldContextObject) { return Invoke<float>(nameof(GetForgingLevelProgress), WorldContextObject); }
        public int GetForgingLevel(Object WorldContextObject) { return Invoke<int>(nameof(GetForgingLevel), WorldContextObject); }
        public bool GetForgingHasPendingMasteryRewards(Object WorldContextObject) { return Invoke<bool>(nameof(GetForgingHasPendingMasteryRewards), WorldContextObject); }
        public UArray<Schematic> GetForgedSchematics(Object WorldContextObject) { return Invoke<UArray<Schematic>>(nameof(GetForgedSchematics), WorldContextObject); }
        public void ClaimForgingPendingMasteryReward(Object WorldContextObject, int Level, Schematic Reward) { Invoke(nameof(ClaimForgingPendingMasteryReward), WorldContextObject, Level, Reward); }
    }
    public class FormationData : DataAsset
    {
        public FormationData(nint addr) : base(addr) { }
        public UArray<FormationDataItem> FormationItems { get { return new UArray<FormationDataItem>(this[nameof(FormationItems)].Address); } }
        public GameplayTagQuery LeaderQuery { get { return this[nameof(LeaderQuery)].As<GameplayTagQuery>(); } set { this["LeaderQuery"] = value; } }
        public GameplayTagQuery MemberQuery { get { return this[nameof(MemberQuery)].As<GameplayTagQuery>(); } set { this["MemberQuery"] = value; } }
    }
    public class GroundFormationData : FormationData
    {
        public GroundFormationData(nint addr) : base(addr) { }
        public int FormationSize { get { return this[nameof(FormationSize)].GetValue<int>(); } set { this[nameof(FormationSize)].SetValue<int>(value); } }
        public float FormationSpread { get { return this[nameof(FormationSpread)].GetValue<float>(); } set { this[nameof(FormationSpread)].SetValue<float>(value); } }
        public float RandomSpread { get { return this[nameof(RandomSpread)].GetValue<float>(); } set { this[nameof(RandomSpread)].SetValue<float>(value); } }
    }
    public class FlyingFormationData : FormationData
    {
        public FlyingFormationData(nint addr) : base(addr) { }
        public int FormationSize { get { return this[nameof(FormationSize)].GetValue<int>(); } set { this[nameof(FormationSize)].SetValue<int>(value); } }
        public float FormationSpread { get { return this[nameof(FormationSpread)].GetValue<float>(); } set { this[nameof(FormationSpread)].SetValue<float>(value); } }
        public float RandomSpread { get { return this[nameof(RandomSpread)].GetValue<float>(); } set { this[nameof(RandomSpread)].SetValue<float>(value); } }
    }
    public class FormationsManagerComponent : ActorComponent
    {
        public FormationsManagerComponent(nint addr) : base(addr) { }
        public EnemySpawnManager SpawnManager { get { return this[nameof(SpawnManager)].As<EnemySpawnManager>(); } set { this["SpawnManager"] = value; } }
        public UArray<FormationData> FormationData { get { return new UArray<FormationData>(this[nameof(FormationData)].Address); } }
    }
    public class FragileDebrisCleaner : SceneComponent
    {
        public FragileDebrisCleaner(nint addr) : base(addr) { }
        public float CleanRadius { get { return this[nameof(CleanRadius)].GetValue<float>(); } set { this[nameof(CleanRadius)].SetValue<float>(value); } }
    }
    public class FriendlyHealthComponent : HealthComponent
    {
        public FriendlyHealthComponent(nint addr) : base(addr) { }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public float NeutralDamageModifier { get { return this[nameof(NeutralDamageModifier)].GetValue<float>(); } set { this[nameof(NeutralDamageModifier)].SetValue<float>(value); } }
        public float BigHitDamageModifier { get { return this[nameof(BigHitDamageModifier)].GetValue<float>(); } set { this[nameof(BigHitDamageModifier)].SetValue<float>(value); } }
        public float BigHitDamageReductionThreshold { get { return this[nameof(BigHitDamageReductionThreshold)].GetValue<float>(); } set { this[nameof(BigHitDamageReductionThreshold)].SetValue<float>(value); } }
        public ParticleSystem GenericImpactParticles { get { return this[nameof(GenericImpactParticles)].As<ParticleSystem>(); } set { this["GenericImpactParticles"] = value; } }
        public float GetMaxHealth() { return Invoke<float>(nameof(GetMaxHealth)); }
    }
    public class FriendlyParasite : EnemyDeepPathfinderCharacter
    {
        public FriendlyParasite(nint addr) : base(addr) { }
        public Object OnIsAttackingEvent { get { return this[nameof(OnIsAttackingEvent)]; } set { this[nameof(OnIsAttackingEvent)] = value; } }
        public SphereComponent Collision { get { return this[nameof(Collision)].As<SphereComponent>(); } set { this["Collision"] = value; } }
        public SphereComponent FindEnemyCollision { get { return this[nameof(FindEnemyCollision)].As<SphereComponent>(); } set { this["FindEnemyCollision"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public float MoveSpeed { get { return this[nameof(MoveSpeed)].GetValue<float>(); } set { this[nameof(MoveSpeed)].SetValue<float>(value); } }
        public float DamageBeforeDeath { get { return this[nameof(DamageBeforeDeath)].GetValue<float>(); } set { this[nameof(DamageBeforeDeath)].SetValue<float>(value); } }
        public bool CountDirectDMG { get { return this[nameof(CountDirectDMG)].Flag; } set { this[nameof(CountDirectDMG)].Flag = value; } }
        public bool CountAreaDMG { get { return this[nameof(CountAreaDMG)].Flag; } set { this[nameof(CountAreaDMG)].Flag = value; } }
        public float StartFollowRange { get { return this[nameof(StartFollowRange)].GetValue<float>(); } set { this[nameof(StartFollowRange)].SetValue<float>(value); } }
        public float DamageRange { get { return this[nameof(DamageRange)].GetValue<float>(); } set { this[nameof(DamageRange)].SetValue<float>(value); } }
        public float DamageTime { get { return this[nameof(DamageTime)].GetValue<float>(); } set { this[nameof(DamageTime)].SetValue<float>(value); } }
        public float FoldoutRange { get { return this[nameof(FoldoutRange)].GetValue<float>(); } set { this[nameof(FoldoutRange)].SetValue<float>(value); } }
        public float SpinRange { get { return this[nameof(SpinRange)].GetValue<float>(); } set { this[nameof(SpinRange)].SetValue<float>(value); } }
        public FSDPawn TargetEnemy { get { return this[nameof(TargetEnemy)].As<FSDPawn>(); } set { this["TargetEnemy"] = value; } }
        public void SelectNewTarget(HealthComponentBase Health) { Invoke(nameof(SelectNewTarget), Health); }
        public void OnEnemyCollisionEnter(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnEnemyCollisionEnter), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
    }
    public class FriendlyParasiteAnimInstance : EnemyAnimInstance
    {
        public FriendlyParasiteAnimInstance(nint addr) : base(addr) { }
        public bool InFoldoutRange { get { return this[nameof(InFoldoutRange)].Flag; } set { this[nameof(InFoldoutRange)].Flag = value; } }
        public bool InSpinRange { get { return this[nameof(InSpinRange)].Flag; } set { this[nameof(InSpinRange)].Flag = value; } }
    }
    public class FrontendBlueprintLibrary : BlueprintFunctionLibrary
    {
        public FrontendBlueprintLibrary(nint addr) : base(addr) { }
        public void OpenURLInExternalBrowser(Object URL) { Invoke(nameof(OpenURLInExternalBrowser), URL); }
        public bool IsShippingBuild() { return Invoke<bool>(nameof(IsShippingBuild)); }
        public void GetStringFromClipboard(Object fromClipboard) { Invoke(nameof(GetStringFromClipboard), fromClipboard); }
        public bool FSDTargetPlatformIsXSX() { return Invoke<bool>(nameof(FSDTargetPlatformIsXSX)); }
        public EFSDTargetPlatform FSDTargetPlatform() { return Invoke<EFSDTargetPlatform>(nameof(FSDTargetPlatform)); }
        public void CopyStringToClipboard(Object toClipboard) { Invoke(nameof(CopyStringToClipboard), toClipboard); }
    }
    public class CharacterBreakOutState : CharacterStateComponent
    {
        public CharacterBreakOutState(nint addr) : base(addr) { }
        public Object OnThawInputsUpdated { get { return this[nameof(OnThawInputsUpdated)]; } set { this[nameof(OnThawInputsUpdated)] = value; } }
        public Object OnBreakOutInputSuccess { get { return this[nameof(OnBreakOutInputSuccess)]; } set { this[nameof(OnBreakOutInputSuccess)] = value; } }
        public Object OnBreakOutInputFailed { get { return this[nameof(OnBreakOutInputFailed)]; } set { this[nameof(OnBreakOutInputFailed)] = value; } }
        public UArray<InputDirectionSet> DirectionSets { get { return new UArray<InputDirectionSet>(this[nameof(DirectionSets)].Address); } }
        public Object SuccessSound { get { return this[nameof(SuccessSound)]; } set { this[nameof(SuccessSound)] = value; } }
        public Object FailSound { get { return this[nameof(FailSound)]; } set { this[nameof(FailSound)] = value; } }
        public float ErrorGracePeriod { get { return this[nameof(ErrorGracePeriod)].GetValue<float>(); } set { this[nameof(ErrorGracePeriod)].SetValue<float>(value); } }
        public float HoldToBreakTime { get { return this[nameof(HoldToBreakTime)].GetValue<float>(); } set { this[nameof(HoldToBreakTime)].SetValue<float>(value); } }
        public float WrongInputPenaltyTime { get { return this[nameof(WrongInputPenaltyTime)].GetValue<float>(); } set { this[nameof(WrongInputPenaltyTime)].SetValue<float>(value); } }
        public float InitialWaitPeriod { get { return this[nameof(InitialWaitPeriod)].GetValue<float>(); } set { this[nameof(InitialWaitPeriod)].SetValue<float>(value); } }
        public bool UseLegacy { get { return this[nameof(UseLegacy)].Flag; } set { this[nameof(UseLegacy)].Flag = value; } }
        public bool ResetOnFail { get { return this[nameof(ResetOnFail)].Flag; } set { this[nameof(ResetOnFail)].Flag = value; } }
    }
    public class FrozenStateComponent : CharacterBreakOutState
    {
        public FrozenStateComponent(nint addr) : base(addr) { }
        public Object AudioFreeFromIce { get { return this[nameof(AudioFreeFromIce)]; } set { this[nameof(AudioFreeFromIce)] = value; } }
        public Object IcePhysicalMaterial { get { return this[nameof(IcePhysicalMaterial)]; } set { this[nameof(IcePhysicalMaterial)] = value; } }
        public Object DwarfFleshMaterial { get { return this[nameof(DwarfFleshMaterial)]; } set { this[nameof(DwarfFleshMaterial)] = value; } }
        public Object AudioFreezeStart { get { return this[nameof(AudioFreezeStart)]; } set { this[nameof(AudioFreezeStart)] = value; } }
        public Object AudioIceTap { get { return this[nameof(AudioIceTap)]; } set { this[nameof(AudioIceTap)] = value; } }
        public float SlowAnimationSpeed { get { return this[nameof(SlowAnimationSpeed)].GetValue<float>(); } set { this[nameof(SlowAnimationSpeed)].SetValue<float>(value); } }
        public RandRange DeFrostAmount { get { return this[nameof(DeFrostAmount)].As<RandRange>(); } set { this["DeFrostAmount"] = value; } }
        public void Server_ThawPlayer(float Percent) { Invoke(nameof(Server_ThawPlayer), Percent); }
        public void ReceiveOnDefrosting() { Invoke(nameof(ReceiveOnDefrosting)); }
        public SoundBase GetAudioIceTap() { return Invoke<SoundBase>(nameof(GetAudioIceTap)); }
        public SoundBase GetAudioFreezeStart() { return Invoke<SoundBase>(nameof(GetAudioFreezeStart)); }
    }
    public class FSDAchievement : SavableDataAsset
    {
        public FSDAchievement(nint addr) : base(addr) { }
        public Object SteamAPIAchievementName { get { return this[nameof(SteamAPIAchievementName)]; } set { this[nameof(SteamAPIAchievementName)] = value; } }
        public Object SteamAPIStatName { get { return this[nameof(SteamAPIStatName)]; } set { this[nameof(SteamAPIStatName)] = value; } }
        public Object XboxAchievementID { get { return this[nameof(XboxAchievementID)]; } set { this[nameof(XboxAchievementID)] = value; } }
        public float AchievementTargetValue { get { return this[nameof(AchievementTargetValue)].GetValue<float>(); } set { this[nameof(AchievementTargetValue)].SetValue<float>(value); } }
        public EFSDAchievementType AchievementType { get { return (EFSDAchievementType)this[nameof(AchievementType)].GetValue<int>(); } set { this[nameof(AchievementType)].SetValue<int>((int)value); } }
        public void SetAchievementProgressForEntireServer(float Progress, Object WorldContext) { Invoke(nameof(SetAchievementProgressForEntireServer), Progress, WorldContext); }
        public void SetAchievementProgress(float Progress, FSDPlayerController Player, Object WorldContext) { Invoke(nameof(SetAchievementProgress), Progress, Player, WorldContext); }
        public void ResetStatForAchievement(FSDAchievement AchievementToReset, FSDPlayerController Player) { Invoke(nameof(ResetStatForAchievement), AchievementToReset, Player); }
        public void QueryAchievements(FSDPlayerController Player) { Invoke(nameof(QueryAchievements), Player); }
        public float GetAchievementTargetValue() { return Invoke<float>(nameof(GetAchievementTargetValue)); }
    }
    public class AchievementList : DataAsset
    {
        public AchievementList(nint addr) : base(addr) { }
        public FSDAchievement WeakspotAchievement { get { return this[nameof(WeakspotAchievement)].As<FSDAchievement>(); } set { this["WeakspotAchievement"] = value; } }
        public FSDAchievement MissionTimeAchievement { get { return this[nameof(MissionTimeAchievement)].As<FSDAchievement>(); } set { this["MissionTimeAchievement"] = value; } }
        public FSDAchievement MissionHosterAchievement { get { return this[nameof(MissionHosterAchievement)].As<FSDAchievement>(); } set { this["MissionHosterAchievement"] = value; } }
        public FSDAchievement RollerCoasterAchievement { get { return this[nameof(RollerCoasterAchievement)].As<FSDAchievement>(); } set { this["RollerCoasterAchievement"] = value; } }
        public FSDAchievement DrillByShootingAchievement { get { return this[nameof(DrillByShootingAchievement)].As<FSDAchievement>(); } set { this["DrillByShootingAchievement"] = value; } }
        public FSDAchievement BarrelKickerAchievement { get { return this[nameof(BarrelKickerAchievement)].As<FSDAchievement>(); } set { this["BarrelKickerAchievement"] = value; } }
        public FSDAchievement Hazard3CompletedAchievement { get { return this[nameof(Hazard3CompletedAchievement)].As<FSDAchievement>(); } set { this["Hazard3CompletedAchievement"] = value; } }
        public FSDAchievement Hazard3StreakAchievement { get { return this[nameof(Hazard3StreakAchievement)].As<FSDAchievement>(); } set { this["Hazard3StreakAchievement"] = value; } }
        public FSDAchievement Hazard4CompletedAchievement { get { return this[nameof(Hazard4CompletedAchievement)].As<FSDAchievement>(); } set { this["Hazard4CompletedAchievement"] = value; } }
        public FSDAchievement Hazard4StreakAchievement { get { return this[nameof(Hazard4StreakAchievement)].As<FSDAchievement>(); } set { this["Hazard4StreakAchievement"] = value; } }
        public FSDAchievement Hazard5CompletedAchievement { get { return this[nameof(Hazard5CompletedAchievement)].As<FSDAchievement>(); } set { this["Hazard5CompletedAchievement"] = value; } }
        public FSDAchievement Hazard5StreakAchievement { get { return this[nameof(Hazard5StreakAchievement)].As<FSDAchievement>(); } set { this["Hazard5StreakAchievement"] = value; } }
        public FSDAchievement Hazard3NoKillNoSupplyAchievement { get { return this[nameof(Hazard3NoKillNoSupplyAchievement)].As<FSDAchievement>(); } set { this["Hazard3NoKillNoSupplyAchievement"] = value; } }
        public FSDAchievement Hazard4NoKillNoSupplyAchievement { get { return this[nameof(Hazard4NoKillNoSupplyAchievement)].As<FSDAchievement>(); } set { this["Hazard4NoKillNoSupplyAchievement"] = value; } }
        public FSDAchievement Hazard5NoKillNoSupplyAchievement { get { return this[nameof(Hazard5NoKillNoSupplyAchievement)].As<FSDAchievement>(); } set { this["Hazard5NoKillNoSupplyAchievement"] = value; } }
        public FSDAchievement PlayedWithLowerRankAchievement { get { return this[nameof(PlayedWithLowerRankAchievement)].As<FSDAchievement>(); } set { this["PlayedWithLowerRankAchievement"] = value; } }
        public FSDAchievement MilestoneAchievementPerfMatters { get { return this[nameof(MilestoneAchievementPerfMatters)].As<FSDAchievement>(); } set { this["MilestoneAchievementPerfMatters"] = value; } }
        public FSDAchievement MilestoneAchievement { get { return this[nameof(MilestoneAchievement)].As<FSDAchievement>(); } set { this["MilestoneAchievement"] = value; } }
        public FSDAchievement OwnedPerkAchievement { get { return this[nameof(OwnedPerkAchievement)].As<FSDAchievement>(); } set { this["OwnedPerkAchievement"] = value; } }
        public FSDAchievement MovingOnUpAchievement { get { return this[nameof(MovingOnUpAchievement)].As<FSDAchievement>(); } set { this["MovingOnUpAchievement"] = value; } }
        public FSDAchievement CorporateClimberAchievement { get { return this[nameof(CorporateClimberAchievement)].As<FSDAchievement>(); } set { this["CorporateClimberAchievement"] = value; } }
        public FSDAchievement HatTrickAchievement { get { return this[nameof(HatTrickAchievement)].As<FSDAchievement>(); } set { this["HatTrickAchievement"] = value; } }
        public FSDAchievement FullTeamAchievement { get { return this[nameof(FullTeamAchievement)].As<FSDAchievement>(); } set { this["FullTeamAchievement"] = value; } }
        public FSDAchievement SilverTierEmployeeAchievement { get { return this[nameof(SilverTierEmployeeAchievement)].As<FSDAchievement>(); } set { this["SilverTierEmployeeAchievement"] = value; } }
        public FSDAchievement ProTeamAchievement { get { return this[nameof(ProTeamAchievement)].As<FSDAchievement>(); } set { this["ProTeamAchievement"] = value; } }
        public FSDAchievement GoldTierEmployeeAchievement { get { return this[nameof(GoldTierEmployeeAchievement)].As<FSDAchievement>(); } set { this["GoldTierEmployeeAchievement"] = value; } }
        public FSDAchievement LegendaryTeamAchievement { get { return this[nameof(LegendaryTeamAchievement)].As<FSDAchievement>(); } set { this["LegendaryTeamAchievement"] = value; } }
        public FSDAchievement AllVanityEquippedAchievement { get { return this[nameof(AllVanityEquippedAchievement)].As<FSDAchievement>(); } set { this["AllVanityEquippedAchievement"] = value; } }
        public FSDAchievement MoustacheBuyerAchievement { get { return this[nameof(MoustacheBuyerAchievement)].As<FSDAchievement>(); } set { this["MoustacheBuyerAchievement"] = value; } }
        public FSDAchievement MutatorAchievement { get { return this[nameof(MutatorAchievement)].As<FSDAchievement>(); } set { this["MutatorAchievement"] = value; } }
        public FSDAchievement StateOfTheArtAchievement { get { return this[nameof(StateOfTheArtAchievement)].As<FSDAchievement>(); } set { this["StateOfTheArtAchievement"] = value; } }
        public FSDAchievement ExploringMyOptionsAchievement { get { return this[nameof(ExploringMyOptionsAchievement)].As<FSDAchievement>(); } set { this["ExploringMyOptionsAchievement"] = value; } }
        public FSDAchievement AdvancedRoboticsAchievement { get { return this[nameof(AdvancedRoboticsAchievement)].As<FSDAchievement>(); } set { this["AdvancedRoboticsAchievement"] = value; } }
        public FSDAchievement WithoutAPaddleAchievement { get { return this[nameof(WithoutAPaddleAchievement)].As<FSDAchievement>(); } set { this["WithoutAPaddleAchievement"] = value; } }
        public FSDAchievement FirstMissionCompleted { get { return this[nameof(FirstMissionCompleted)].As<FSDAchievement>(); } set { this["FirstMissionCompleted"] = value; } }
        public FSDAchievement HundredMissionsCompleted { get { return this[nameof(HundredMissionsCompleted)].As<FSDAchievement>(); } set { this["HundredMissionsCompleted"] = value; } }
        public FSDAchievement TenSoloMissionsCompleted { get { return this[nameof(TenSoloMissionsCompleted)].As<FSDAchievement>(); } set { this["TenSoloMissionsCompleted"] = value; } }
        public FSDAchievement SupplyPodsCalledStat { get { return this[nameof(SupplyPodsCalledStat)].As<FSDAchievement>(); } set { this["SupplyPodsCalledStat"] = value; } }
        public FSDAchievement LootbugsKilledStat { get { return this[nameof(LootbugsKilledStat)].As<FSDAchievement>(); } set { this["LootbugsKilledStat"] = value; } }
        public FSDAchievement PraetoriansKilledStat { get { return this[nameof(PraetoriansKilledStat)].As<FSDAchievement>(); } set { this["PraetoriansKilledStat"] = value; } }
        public FSDAchievement NormalDeepDiveCompleted { get { return this[nameof(NormalDeepDiveCompleted)].As<FSDAchievement>(); } set { this["NormalDeepDiveCompleted"] = value; } }
        public FSDAchievement EliteDeepDiveCompleted { get { return this[nameof(EliteDeepDiveCompleted)].As<FSDAchievement>(); } set { this["EliteDeepDiveCompleted"] = value; } }
        public FSDAchievement DeepDiveCompletedUnderTime { get { return this[nameof(DeepDiveCompletedUnderTime)].As<FSDAchievement>(); } set { this["DeepDiveCompletedUnderTime"] = value; } }
        public FSDAchievement DeepDivesCompleted { get { return this[nameof(DeepDivesCompleted)].As<FSDAchievement>(); } set { this["DeepDivesCompleted"] = value; } }
        public UArray<FSDAchievement> AllAchievements { get { return new UArray<FSDAchievement>(this[nameof(AllAchievements)].Address); } }
        public Object BarrelClass { get { return this[nameof(BarrelClass)]; } set { this[nameof(BarrelClass)] = value; } }
    }
    public class FSDAdvancedLabel : UserWidget
    {
        public FSDAdvancedLabel(nint addr) : base(addr) { }
        public Object FormattedText { get { return this[nameof(FormattedText)]; } set { this[nameof(FormattedText)] = value; } }
        public Object ControllerOverrideText { get { return this[nameof(ControllerOverrideText)]; } set { this[nameof(ControllerOverrideText)] = value; } }
        public bool UpperCase { get { return this[nameof(UpperCase)].Flag; } set { this[nameof(UpperCase)].Flag = value; } }
        public EFSDInputSource PreviewAs { get { return (EFSDInputSource)this[nameof(PreviewAs)].GetValue<int>(); } set { this[nameof(PreviewAs)].SetValue<int>((int)value); } }
        public void SetText(Object NewText, Object OverrideControllerText) { Invoke(nameof(SetText), NewText, OverrideControllerText); }
        public void SetAlwaysShowAs(EFSDInputSource InPreferredSource) { Invoke(nameof(SetAlwaysShowAs), InPreferredSource); }
        public void Refresh() { Invoke(nameof(Refresh)); }
        public void OnReset() { Invoke(nameof(OnReset)); }
        public void OnNewLine(int Index) { Invoke(nameof(OnNewLine), Index); }
        public void OnLanguageChanged(Object NewCulture) { Invoke(nameof(OnLanguageChanged), NewCulture); }
        public void OnInputSourceChanged(EFSDInputSource Source) { Invoke(nameof(OnInputSourceChanged), Source); }
        public void OnAddString(Object Value) { Invoke(nameof(OnAddString), Value); }
        public void OnAddKeyName(Object Name) { Invoke(nameof(OnAddKeyName), Name); }
        public void OnAddIcon(Object Name, ActionIconMapping Icon) { Invoke(nameof(OnAddIcon), Name, Icon); }
        public Object GetText() { return Invoke<Object>(nameof(GetText)); }
        public bool GetIsDesignTime() { return Invoke<bool>(nameof(GetIsDesignTime)); }
        public EFSDInputSource GetCurrentInputSource() { return Invoke<EFSDInputSource>(nameof(GetCurrentInputSource)); }
        public TextBlock CreateTextBlock(Object Text, SlateFontInfo InFontInfo, LinearColor Color) { return Invoke<TextBlock>(nameof(CreateTextBlock), Text, InFontInfo, Color); }
        public Image CreateImageSized(Texture2D Texture, int Width, int Height) { return Invoke<Image>(nameof(CreateImageSized), Texture, Width, Height); }
        public Image CreateImage(Texture2D Texture, bool MatchSize) { return Invoke<Image>(nameof(CreateImage), Texture, MatchSize); }
        public HorizontalBox CreateHorizontalBox() { return Invoke<HorizontalBox>(nameof(CreateHorizontalBox)); }
    }
    public class GamepadCursorSettings : DeveloperSettings
    {
        public GamepadCursorSettings(nint addr) : base(addr) { }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float Acceleration { get { return this[nameof(Acceleration)].GetValue<float>(); } set { this[nameof(Acceleration)].SetValue<float>(value); } }
        public float StickySlowDown { get { return this[nameof(StickySlowDown)].GetValue<float>(); } set { this[nameof(StickySlowDown)].SetValue<float>(value); } }
        public float DeadZone { get { return this[nameof(DeadZone)].GetValue<float>(); } set { this[nameof(DeadZone)].SetValue<float>(value); } }
    }
    public class FSDAnimNotify_PlaySound : AnimNotify_PlaySound
    {
        public FSDAnimNotify_PlaySound(nint addr) : base(addr) { }
    }
    public class AnimNotify_PlaySound2D : AnimNotify
    {
        public AnimNotify_PlaySound2D(nint addr) : base(addr) { }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
        public float VolumeMultiplier { get { return this[nameof(VolumeMultiplier)].GetValue<float>(); } set { this[nameof(VolumeMultiplier)].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
    }
    public class AnimNotifyState_PlaySound : AnimNotifyState
    {
        public AnimNotifyState_PlaySound(nint addr) : base(addr) { }
        public SoundCue Sound { get { return this[nameof(Sound)].As<SoundCue>(); } set { this["Sound"] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
    }
    public class AnimNotify_FSDPlayParticleEffect : AnimNotify
    {
        public AnimNotify_FSDPlayParticleEffect(nint addr) : base(addr) { }
        public FXSystemAsset PSTemplate { get { return this[nameof(PSTemplate)].As<FXSystemAsset>(); } set { this["PSTemplate"] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public bool AlwaysZUp { get { return this[nameof(AlwaysZUp)].Flag; } set { this[nameof(AlwaysZUp)].Flag = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public bool Attached { get { return this[nameof(Attached)].Flag; } set { this[nameof(Attached)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public bool IsFirstPerson { get { return this[nameof(IsFirstPerson)].Flag; } set { this[nameof(IsFirstPerson)].Flag = value; } }
        public bool UseTerainMaterial { get { return this[nameof(UseTerainMaterial)].Flag; } set { this[nameof(UseTerainMaterial)].Flag = value; } }
    }
    public class AnimNotifyState_FSDTimedNiagaraEffect : AnimNotifyState
    {
        public AnimNotifyState_FSDTimedNiagaraEffect(nint addr) : base(addr) { }
        public NiagaraSystem Template { get { return this[nameof(Template)].As<NiagaraSystem>(); } set { this["Template"] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public bool IsFirstPerson { get { return this[nameof(IsFirstPerson)].Flag; } set { this[nameof(IsFirstPerson)].Flag = value; } }
        public bool bDestroyAtEnd { get { return this[nameof(bDestroyAtEnd)].Flag; } set { this[nameof(bDestroyAtEnd)].Flag = value; } }
    }
    public class AnimNotifyState_FSDTimedVanityAnimEffect : AnimNotifyState_FSDTimedNiagaraEffect
    {
        public AnimNotifyState_FSDTimedVanityAnimEffect(nint addr) : base(addr) { }
    }
    public class EnemyPlaySoundKey : DataAsset
    {
        public EnemyPlaySoundKey(nint addr) : base(addr) { }
    }
    public class EnemyPlaySoundByKeyAnimNotify : AnimNotify
    {
        public EnemyPlaySoundByKeyAnimNotify(nint addr) : base(addr) { }
        public EnemyPlaySoundKey SoundKey { get { return this[nameof(SoundKey)].As<EnemyPlaySoundKey>(); } set { this["SoundKey"] = value; } }
        public float VolumeMultiplier { get { return this[nameof(VolumeMultiplier)].GetValue<float>(); } set { this[nameof(VolumeMultiplier)].SetValue<float>(value); } }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
        public bool bFollow { get { return this[nameof(bFollow)].Flag; } set { this[nameof(bFollow)].Flag = value; } }
        public Object AttachName { get { return this[nameof(AttachName)]; } set { this[nameof(AttachName)] = value; } }
    }
    public class AnimNotify_PushSoundMix : AnimNotify
    {
        public AnimNotify_PushSoundMix(nint addr) : base(addr) { }
        public SoundMix SoundMix { get { return this[nameof(SoundMix)].As<SoundMix>(); } set { this["SoundMix"] = value; } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
    }
    public class AnimNotifyState_SoundMix : AnimNotifyState
    {
        public AnimNotifyState_SoundMix(nint addr) : base(addr) { }
        public SoundMix SoundMix { get { return this[nameof(SoundMix)].As<SoundMix>(); } set { this["SoundMix"] = value; } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
    }
    public class EnemySpawnEffectsKey : DataAsset
    {
        public EnemySpawnEffectsKey(nint addr) : base(addr) { }
    }
    public class EnemySpawnEffectsByKeyAnimNotify : AnimNotify
    {
        public EnemySpawnEffectsByKeyAnimNotify(nint addr) : base(addr) { }
        public EnemySpawnEffectsKey EffectKey { get { return this[nameof(EffectKey)].As<EnemySpawnEffectsKey>(); } set { this["EffectKey"] = value; } }
        public bool Attached { get { return this[nameof(Attached)].Flag; } set { this[nameof(Attached)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
    }
    public class AnimNotifyState_EnemyPlaySoundByKey : AnimNotifyState
    {
        public AnimNotifyState_EnemyPlaySoundByKey(nint addr) : base(addr) { }
        public EnemyPlaySoundKey SoundKey { get { return this[nameof(SoundKey)].As<EnemyPlaySoundKey>(); } set { this["SoundKey"] = value; } }
        public float FadeOut { get { return this[nameof(FadeOut)].GetValue<float>(); } set { this[nameof(FadeOut)].SetValue<float>(value); } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
    }
    public class AnimNotify_CameraShake : AnimNotify
    {
        public AnimNotify_CameraShake(nint addr) : base(addr) { }
        public float InnerRadius { get { return this[nameof(InnerRadius)].GetValue<float>(); } set { this[nameof(InnerRadius)].SetValue<float>(value); } }
        public float OuterRadius { get { return this[nameof(OuterRadius)].GetValue<float>(); } set { this[nameof(OuterRadius)].SetValue<float>(value); } }
        public bool ControllerOnly { get { return this[nameof(ControllerOnly)].Flag; } set { this[nameof(ControllerOnly)].Flag = value; } }
        public Object CameraShake { get { return this[nameof(CameraShake)]; } set { this[nameof(CameraShake)] = value; } }
    }
    public class AnimNotify_Shout : AnimNotify
    {
        public AnimNotify_Shout(nint addr) : base(addr) { }
        public DialogDataAsset Shout { get { return this[nameof(Shout)].As<DialogDataAsset>(); } set { this["Shout"] = value; } }
        public bool ShoutNetworked { get { return this[nameof(ShoutNetworked)].Flag; } set { this[nameof(ShoutNetworked)].Flag = value; } }
        public float LocalShoutVolumeMultiplier { get { return this[nameof(LocalShoutVolumeMultiplier)].GetValue<float>(); } set { this[nameof(LocalShoutVolumeMultiplier)].SetValue<float>(value); } }
    }
    public class AnimNotify_FootStep : AnimNotify
    {
        public AnimNotify_FootStep(nint addr) : base(addr) { }
        public bool IsLeft { get { return this[nameof(IsLeft)].Flag; } set { this[nameof(IsLeft)].Flag = value; } }
    }
    public class AnimNotify_MessageOwner : AnimNotify
    {
        public AnimNotify_MessageOwner(nint addr) : base(addr) { }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
    }
    public class AnimNotify_TerrainFootStep : AnimNotify
    {
        public AnimNotify_TerrainFootStep(nint addr) : base(addr) { }
        public ParticleSystem ParticleTemplate { get { return this[nameof(ParticleTemplate)].As<ParticleSystem>(); } set { this["ParticleTemplate"] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class AnimNotify_SpawnActor : AnimNotify
    {
        public AnimNotify_SpawnActor(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
    }
    public class AnimNotify_HideBones : AnimNotify
    {
        public AnimNotify_HideBones(nint addr) : base(addr) { }
        public UArray<Object> TargetBoneNames { get { return new UArray<Object>(this[nameof(TargetBoneNames)].Address); } }
    }
    public class AnimNotify_HideBone : AnimNotify
    {
        public AnimNotify_HideBone(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class AnimNotify_UnHideBone : AnimNotify
    {
        public AnimNotify_UnHideBone(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class AnimNotify_CopyBoneVisibility : AnimNotify
    {
        public AnimNotify_CopyBoneVisibility(nint addr) : base(addr) { }
        public Object SourceBoneName { get { return this[nameof(SourceBoneName)]; } set { this[nameof(SourceBoneName)] = value; } }
        public UArray<Object> TargetBoneNames { get { return new UArray<Object>(this[nameof(TargetBoneNames)].Address); } }
        public bool HideSourceBone { get { return this[nameof(HideSourceBone)].Flag; } set { this[nameof(HideSourceBone)].Flag = value; } }
    }
    public class AnimNotifyState_SpawnMesh : AnimNotifyState
    {
        public AnimNotifyState_SpawnMesh(nint addr) : base(addr) { }
        public StaticMesh Mesh { get { return this[nameof(Mesh)].As<StaticMesh>(); } set { this["Mesh"] = value; } }
        public bool HasOverrideMaterial { get { return this[nameof(HasOverrideMaterial)].Flag; } set { this[nameof(HasOverrideMaterial)].Flag = value; } }
        public MaterialInstance OverrideMaterial { get { return this[nameof(OverrideMaterial)].As<MaterialInstance>(); } set { this["OverrideMaterial"] = value; } }
        public int OverrideMaterialSlot { get { return this[nameof(OverrideMaterialSlot)].GetValue<int>(); } set { this[nameof(OverrideMaterialSlot)].SetValue<int>(value); } }
        public bool UseFirstPersonComponent { get { return this[nameof(UseFirstPersonComponent)].Flag; } set { this[nameof(UseFirstPersonComponent)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector ScaleOverride { get { return this[nameof(ScaleOverride)].As<Vector>(); } set { this["ScaleOverride"] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
    }
    public class AnimNotifyState_SpawnSkeletalMesh : AnimNotifyState
    {
        public AnimNotifyState_SpawnSkeletalMesh(nint addr) : base(addr) { }
        public SkeletalMesh Mesh { get { return this[nameof(Mesh)].As<SkeletalMesh>(); } set { this["Mesh"] = value; } }
        public AnimSequenceBase AnimationToPlay { get { return this[nameof(AnimationToPlay)].As<AnimSequenceBase>(); } set { this["AnimationToPlay"] = value; } }
        public bool UseFirstPersonComponent { get { return this[nameof(UseFirstPersonComponent)].Flag; } set { this[nameof(UseFirstPersonComponent)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector ScaleOverride { get { return this[nameof(ScaleOverride)].As<Vector>(); } set { this["ScaleOverride"] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
    }
    public class AnimNotifyState_SpawnSkinnedMesh : AnimNotifyState
    {
        public AnimNotifyState_SpawnSkinnedMesh(nint addr) : base(addr) { }
        public EItemCategory ItemCategory { get { return (EItemCategory)this[nameof(ItemCategory)].GetValue<int>(); } set { this[nameof(ItemCategory)].SetValue<int>((int)value); } }
        public bool UseFirstPersonComponent { get { return this[nameof(UseFirstPersonComponent)].Flag; } set { this[nameof(UseFirstPersonComponent)].Flag = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
    }
    public class AnimNotifyState_HideBone : AnimNotifyState
    {
        public AnimNotifyState_HideBone(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
    }
    public class AnimNotifyState_Salute : AnimNotifyState
    {
        public AnimNotifyState_Salute(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public bool FirstPerson { get { return this[nameof(FirstPerson)].Flag; } set { this[nameof(FirstPerson)].Flag = value; } }
    }
    public class AnimNotifyState_InputWindow : AnimNotifyState
    {
        public AnimNotifyState_InputWindow(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_SpawnAndReleaseActor : AnimNotifyState
    {
        public AnimNotifyState_SpawnAndReleaseActor(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public Vector LocationOffset { get { return this[nameof(LocationOffset)].As<Vector>(); } set { this["LocationOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public bool ManualDetach { get { return this[nameof(ManualDetach)].Flag; } set { this[nameof(ManualDetach)].Flag = value; } }
    }
    public class AnimNotifyState_HideEquippedItem : AnimNotifyState
    {
        public AnimNotifyState_HideEquippedItem(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_OverrideItemOffset : AnimNotifyState
    {
        public AnimNotifyState_OverrideItemOffset(nint addr) : base(addr) { }
        public Vector CameraOffset { get { return this[nameof(CameraOffset)].As<Vector>(); } set { this["CameraOffset"] = value; } }
    }
    public class AnimNotifyState_WeaponReload : AnimNotifyState
    {
        public AnimNotifyState_WeaponReload(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_ConstrainItem : AnimNotifyState
    {
        public AnimNotifyState_ConstrainItem(nint addr) : base(addr) { }
        public Object OldConstraint { get { return this[nameof(OldConstraint)]; } set { this[nameof(OldConstraint)] = value; } }
        public Object NewConstraint { get { return this[nameof(NewConstraint)]; } set { this[nameof(NewConstraint)] = value; } }
    }
    public class GameAnimationsSettings : DeveloperSettings
    {
        public GameAnimationsSettings(nint addr) : base(addr) { }
        public SoftObjectPath FootstepTestingSound { get { return this[nameof(FootstepTestingSound)].As<SoftObjectPath>(); } set { this["FootstepTestingSound"] = value; } }
        public SoftObjectPath FootstepTestingParticles { get { return this[nameof(FootstepTestingParticles)].As<SoftObjectPath>(); } set { this["FootstepTestingParticles"] = value; } }
    }
    public class DynamicMeshScaler : WorldSubsystem
    {
        public DynamicMeshScaler(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_TimedParticleEffectWithImpactDecals : AnimNotifyState_TimedParticleEffect
    {
        public AnimNotifyState_TimedParticleEffectWithImpactDecals(nint addr) : base(addr) { }
        public MaterialInterface DecalMaterial { get { return this[nameof(DecalMaterial)].As<MaterialInterface>(); } set { this["DecalMaterial"] = value; } }
        public float DecalSize { get { return this[nameof(DecalSize)].GetValue<float>(); } set { this[nameof(DecalSize)].SetValue<float>(value); } }
        public float FadeStartDelay { get { return this[nameof(FadeStartDelay)].GetValue<float>(); } set { this[nameof(FadeStartDelay)].SetValue<float>(value); } }
        public float FadeDuration { get { return this[nameof(FadeDuration)].GetValue<float>(); } set { this[nameof(FadeDuration)].SetValue<float>(value); } }
        public void OnParticleCollision(Object EventName, float EmitterTime, int ParticleTime, Vector Location, Vector Velocity, Vector Direction, Vector Normal, Object BoneName, PhysicalMaterial PhysMat) { Invoke(nameof(OnParticleCollision), EventName, EmitterTime, ParticleTime, Location, Velocity, Direction, Normal, BoneName, PhysMat); }
    }
    public class FSDAnimationFunctionLibrary : BlueprintFunctionLibrary
    {
        public FSDAnimationFunctionLibrary(nint addr) : base(addr) { }
        public float GetAnimSequenceLength(AnimSequence AnimSequence) { return Invoke<float>(nameof(GetAnimSequenceLength), AnimSequence); }
    }
    public class FSDAssetManager : AssetManager
    {
        public FSDAssetManager(nint addr) : base(addr) { }
        public GameData GameData { get { return this[nameof(GameData)].As<GameData>(); } set { this["GameData"] = value; } }
        public Object GameDataPath { get { return this[nameof(GameDataPath)]; } set { this[nameof(GameDataPath)] = value; } }
    }
    public class FSDAudioComponent : AudioComponent
    {
        public FSDAudioComponent(nint addr) : base(addr) { }
    }
    public class FSDBehaviorTreeComponent : BehaviorTreeComponent
    {
        public FSDBehaviorTreeComponent(nint addr) : base(addr) { }
    }
    public class FSDCheatManager : CheatManager
    {
        public FSDCheatManager(nint addr) : base(addr) { }
        public int RoomJumpCount { get { return this[nameof(RoomJumpCount)].GetValue<int>(); } set { this[nameof(RoomJumpCount)].SetValue<int>(value); } }
        public float PreviousMaxDistanceBeforeCleanup { get { return this[nameof(PreviousMaxDistanceBeforeCleanup)].GetValue<float>(); } set { this[nameof(PreviousMaxDistanceBeforeCleanup)].SetValue<float>(value); } }
        public bool UnlimitedScoutFlareDuration { get { return this[nameof(UnlimitedScoutFlareDuration)].Flag; } set { this[nameof(UnlimitedScoutFlareDuration)].Flag = value; } }
        public Object ToggleHoopGameMovement { get { return this[nameof(ToggleHoopGameMovement)]; } set { this[nameof(ToggleHoopGameMovement)] = value; } }
        public Actor SpawnPosMarker { get { return this[nameof(SpawnPosMarker)].As<Actor>(); } set { this["SpawnPosMarker"] = value; } }
        public bool EscortShowSmartRockDebug { get { return this[nameof(EscortShowSmartRockDebug)].Flag; } set { this[nameof(EscortShowSmartRockDebug)].Flag = value; } }
        public bool IsUsingSavedCheats { get { return this[nameof(IsUsingSavedCheats)].Flag; } set { this[nameof(IsUsingSavedCheats)].Flag = value; } }
        public void ToggleDebugEvent(FSDEvent InEvent) { Invoke(nameof(ToggleDebugEvent), InEvent); }
        public void SwitchCharacter(PlayerCharacterID characterID) { Invoke(nameof(SwitchCharacter), characterID); }
        public void SpawnEnemies(EnemyDescriptor descriptor, int Count) { Invoke(nameof(SpawnEnemies), descriptor, Count); }
        public void SpawnCritters(BaseCritterDescriptor descriptor, int Count) { Invoke(nameof(SpawnCritters), descriptor, Count); }
        public void SpawnBosco(Object droneClass, Object aControllerClass) { Invoke(nameof(SpawnBosco), droneClass, aControllerClass); }
        public void ShowTutorialDebug() { Invoke(nameof(ShowTutorialDebug)); }
        public void SetStandingDown(bool standingDown) { Invoke(nameof(SetStandingDown), standingDown); }
        public void SetSpawnEnemies(bool SpawnEnemies) { Invoke(nameof(SetSpawnEnemies), SpawnEnemies); }
        public bool SetSavedCheatValue(Object CheatName, int ValueToSet) { return Invoke<bool>(nameof(SetSavedCheatValue), CheatName, ValueToSet); }
        public void SetQuadPickAxe(bool quad) { Invoke(nameof(SetQuadPickAxe), quad); }
        public void SetHUDVisible(bool ShowHUD) { Invoke(nameof(SetHUDVisible), ShowHUD); }
        public void SetGodMode(bool God) { Invoke(nameof(SetGodMode), God); }
        public void SetFastMovement(bool fast) { Invoke(nameof(SetFastMovement), fast); }
        public void Server_Refresh_Daily_Special(int Index) { Invoke(nameof(Server_Refresh_Daily_Special), Index); }
        public void ResetTutorials() { Invoke(nameof(ResetTutorials)); }
        public void ResetSpacerigIntroMessage() { Invoke(nameof(ResetSpacerigIntroMessage)); }
        public void R_RemoveResources(int Number) { Invoke(nameof(R_RemoveResources), Number); }
        public void R_RemoveCredits(int Number) { Invoke(nameof(R_RemoveCredits), Number); }
        public void R_RemoveCraftingResource(int amount, int Type) { Invoke(nameof(R_RemoveCraftingResource), amount, Type); }
        public void R_AddSeasonToken(Object WorldContextObject, int Number) { Invoke(nameof(R_AddSeasonToken), WorldContextObject, Number); }
        public void R_AddResources_Player(float Number) { Invoke(nameof(R_AddResources_Player), Number); }
        public void R_AddResources(float Number) { Invoke(nameof(R_AddResources), Number); }
        public void R_AddPerkPoints(int amount) { Invoke(nameof(R_AddPerkPoints), amount); }
        public void R_AddNitra(float amount) { Invoke(nameof(R_AddNitra), amount); }
        public void R_AddMorkite(float amount) { Invoke(nameof(R_AddMorkite), amount); }
        public void R_AddMatrixCores(int Number) { Invoke(nameof(R_AddMatrixCores), Number); }
        public void R_AddHollomite(float amount) { Invoke(nameof(R_AddHollomite), amount); }
        public void R_AddGold(float amount) { Invoke(nameof(R_AddGold), amount); }
        public void R_AddDystrum(float amount) { Invoke(nameof(R_AddDystrum), amount); }
        public void R_AddCredits(int Number) { Invoke(nameof(R_AddCredits), Number); }
        public void R_AddCraftingResource(int amount, int Type) { Invoke(nameof(R_AddCraftingResource), amount, Type); }
        public void R_Add_Phazyonite(int amount) { Invoke(nameof(R_Add_Phazyonite), amount); }
        public void R_Add_BitterGem(int amount) { Invoke(nameof(R_Add_BitterGem), amount); }
        public void R_Add_Aquarq(int amount) { Invoke(nameof(R_Add_Aquarq), amount); }
        public bool IsInGodMode() { return Invoke<bool>(nameof(IsInGodMode)); }
        public bool IsFlyModeActive() { return Invoke<bool>(nameof(IsFlyModeActive)); }
        public bool IsFastMovementActive() { return Invoke<bool>(nameof(IsFastMovementActive)); }
        public void InstantDropResuppyPod(RessuplyPod pod) { Invoke(nameof(InstantDropResuppyPod), pod); }
        public bool GetSavedCheatValue(Object CheatName, int ValueToGet) { return Invoke<bool>(nameof(GetSavedCheatValue), CheatName, ValueToGet); }
        public void GetListOfRoomNames(UArray<Object> roomNames) { Invoke(nameof(GetListOfRoomNames), roomNames); }
        public void DestroyAllInstances(Object destroy) { Invoke(nameof(DestroyAllInstances), destroy); }
        public void D_Rejoin_RestoreState() { Invoke(nameof(D_Rejoin_RestoreState)); }
        public void D_MovieModeStartWithCameraShake(bool Value) { Invoke(nameof(D_MovieModeStartWithCameraShake), Value); }
        public void D_MovieModeStartAtOrigin(bool Value) { Invoke(nameof(D_MovieModeStartAtOrigin), Value); }
        public void D_EnableMovieModeInSpacerig(bool Value) { Invoke(nameof(D_EnableMovieModeInSpacerig), Value); }
        public void D_EnableMovieMode(bool Value) { Invoke(nameof(D_EnableMovieMode), Value); }
        public void Cheat_UnlockWeapon(Object WorldContextObjectm, ItemID ItemID) { Invoke(nameof(Cheat_UnlockWeapon), WorldContextObjectm, ItemID); }
        public void Cheat_UnlockAllWeapons(Object WorldContextObject) { Invoke(nameof(Cheat_UnlockAllWeapons), WorldContextObject); }
        public void Cheat_UnlockAllUpgrades(Object WorldContextObject) { Invoke(nameof(Cheat_UnlockAllUpgrades), WorldContextObject); }
        public void Cheat_UnlockAll_Poses(Object WorldContextObject) { Invoke(nameof(Cheat_UnlockAll_Poses), WorldContextObject); }
        public void Cheat_UnlockAll_Beers(Object WorldContextObject) { Invoke(nameof(Cheat_UnlockAll_Beers), WorldContextObject); }
        public void Cheat_SetSpawnPosMarker(Actor Actor) { Invoke(nameof(Cheat_SetSpawnPosMarker), Actor); }
        public void Cheat_SetHealth(float newHealthValue, PlayerCharacter Player) { Invoke(nameof(Cheat_SetHealth), newHealthValue, Player); }
        public void Cheat_Schematic_UnlockAll(Object WorldContextObject) { Invoke(nameof(Cheat_Schematic_UnlockAll), WorldContextObject); }
        public void Cheat_Schematic_ResetAll(Object WorldContextObject) { Invoke(nameof(Cheat_Schematic_ResetAll), WorldContextObject); }
        public void Cheat_Schematic_GiveRandom(Object WorldContextObject) { Invoke(nameof(Cheat_Schematic_GiveRandom), WorldContextObject); }
        public void Cheat_Schematic_ForgeAll_Owned(Object WorldContextObject) { Invoke(nameof(Cheat_Schematic_ForgeAll_Owned), WorldContextObject); }
        public void Cheat_Schematic_ForgeAll(Object WorldContextObject) { Invoke(nameof(Cheat_Schematic_ForgeAll), WorldContextObject); }
        public void Cheat_Resources(Object WorldContextObject, float amount) { Invoke(nameof(Cheat_Resources), WorldContextObject, amount); }
        public void Cheat_ResetEquippedUpgrades(Object WorldContextObject) { Invoke(nameof(Cheat_ResetEquippedUpgrades), WorldContextObject); }
        public void Cheat_RemoveResources(Object WorldContextObject, int amount) { Invoke(nameof(Cheat_RemoveResources), WorldContextObject, amount); }
        public void Cheat_PickAxeVanity_UnlockAll(Object WorldContextObject) { Invoke(nameof(Cheat_PickAxeVanity_UnlockAll), WorldContextObject); }
        public void Cheat_PickAxeVanity_ResetAll(Object WorldContextObject) { Invoke(nameof(Cheat_PickAxeVanity_ResetAll), WorldContextObject); }
        public void Cheat_MinersManual_ShowAll(Object WorldContextObject) { Invoke(nameof(Cheat_MinersManual_ShowAll), WorldContextObject); }
        public void Cheat_GenerateNewMissionSeed(Object WorldContextObject, bool Enabled) { Invoke(nameof(Cheat_GenerateNewMissionSeed), WorldContextObject, Enabled); }
        public void Cheat_ForceTreasure(Object WorldContextObject) { Invoke(nameof(Cheat_ForceTreasure), WorldContextObject); }
        public void Cheat_ForceLostPack(Object WorldContextObject) { Invoke(nameof(Cheat_ForceLostPack), WorldContextObject); }
        public void Cheat_DeepDives_Refresh(Object WorldContextObject) { Invoke(nameof(Cheat_DeepDives_Refresh), WorldContextObject); }
        public void Cheat_Campaign_Complete(Object WorldContextObject) { Invoke(nameof(Cheat_Campaign_Complete), WorldContextObject); }
        public void Cheat_Campaign_Advance(Object WorldContextObject) { Invoke(nameof(Cheat_Campaign_Advance), WorldContextObject); }
        public void Cheat_AddXP(Object WorldContextObject, int amount) { Invoke(nameof(Cheat_AddXP), WorldContextObject, amount); }
        public void Cheat_AddPerkPoints(Object WorldContextObject, int amount) { Invoke(nameof(Cheat_AddPerkPoints), WorldContextObject, amount); }
        public void Cheat_AddCredits(Object WorldContextObject, int amount) { Invoke(nameof(Cheat_AddCredits), WorldContextObject, amount); }
        public void C_Windows_PrintStack() { Invoke(nameof(C_Windows_PrintStack)); }
        public void C_Windows_CloseAll() { Invoke(nameof(C_Windows_CloseAll)); }
        public void C_WeaponMaintenance_Reset() { Invoke(nameof(C_WeaponMaintenance_Reset)); }
        public void C_WeaponMaintenance_AddXP(int XP) { Invoke(nameof(C_WeaponMaintenance_AddXP), XP); }
        public void C_VanityMasteryResetXP() { Invoke(nameof(C_VanityMasteryResetXP)); }
        public void C_VanityMasteryAddXP(int Number) { Invoke(nameof(C_VanityMasteryAddXP), Number); }
        public void C_UnlockOverclocking() { Invoke(nameof(C_UnlockOverclocking)); }
        public void C_UnlockAll_WeaponUpgrades() { Invoke(nameof(C_UnlockAll_WeaponUpgrades)); }
        public void C_UnlockAll_WeaponSkins_Paintjobs() { Invoke(nameof(C_UnlockAll_WeaponSkins_Paintjobs)); }
        public void C_UnlockAll_WeaponSkins_Frameworks() { Invoke(nameof(C_UnlockAll_WeaponSkins_Frameworks)); }
        public void C_UnlockAll_WeaponSkins() { Invoke(nameof(C_UnlockAll_WeaponSkins)); }
        public void C_UnlockAll_Weapons() { Invoke(nameof(C_UnlockAll_Weapons)); }
        public void C_UnlockAll_StoreVanity() { Invoke(nameof(C_UnlockAll_StoreVanity)); }
        public void C_UnlockAll_Poses_ForAll() { Invoke(nameof(C_UnlockAll_Poses_ForAll)); }
        public void C_UnlockAll_Poses() { Invoke(nameof(C_UnlockAll_Poses)); }
        public void C_UnlockAll_PickaxeParts() { Invoke(nameof(C_UnlockAll_PickaxeParts)); }
        public void C_UnlockAll_Perks() { Invoke(nameof(C_UnlockAll_Perks)); }
        public void C_UnlockAll_Drinks() { Invoke(nameof(C_UnlockAll_Drinks)); }
        public void C_UnlockAll_Beers() { Invoke(nameof(C_UnlockAll_Beers)); }
        public void C_UnlockAll_ArmorMats() { Invoke(nameof(C_UnlockAll_ArmorMats)); }
        public void C_UnlockAll() { Invoke(nameof(C_UnlockAll)); }
        public void C_Unlock_Facility() { Invoke(nameof(C_Unlock_Facility)); }
        public void C_Treasures_Track(int Mode) { Invoke(nameof(C_Treasures_Track), Mode); }
        public void C_Treasures_Reward(int Count) { Invoke(nameof(C_Treasures_Reward), Count); }
        public void C_ToggleHoopGameMovement() { Invoke(nameof(C_ToggleHoopGameMovement)); }
        public void C_ToggleFadingEnabled() { Invoke(nameof(C_ToggleFadingEnabled)); }
        public void C_ToggleFadingDebug() { Invoke(nameof(C_ToggleFadingDebug)); }
        public void C_ToggleCanShowBlood() { Invoke(nameof(C_ToggleCanShowBlood)); }
        public void C_TestSpecialEventChance() { Invoke(nameof(C_TestSpecialEventChance)); }
        public void C_TeleportToPlayer(int InPlayerIndex) { Invoke(nameof(C_TeleportToPlayer), InPlayerIndex); }
        public void C_TeleportPlayerToMe(int InPlayerIndex) { Invoke(nameof(C_TeleportPlayerToMe), InPlayerIndex); }
        public void C_TeleportAllPlayersToMe() { Invoke(nameof(C_TeleportAllPlayersToMe)); }
        public void C_StopMovement(bool shouldMove) { Invoke(nameof(C_StopMovement), shouldMove); }
        public void C_StartCountDown() { Invoke(nameof(C_StartCountDown)); }
        public void C_SpawnScriptedWaveIndex(int Index) { Invoke(nameof(C_SpawnScriptedWaveIndex), Index); }
        public void C_SpawnScriptedWave() { Invoke(nameof(C_SpawnScriptedWave)); }
        public void C_SpawnNormalWave() { Invoke(nameof(C_SpawnNormalWave)); }
        public void C_SpawnEvenRewarder() { Invoke(nameof(C_SpawnEvenRewarder)); }
        public void C_SpawnDropPodOnSelf(float Delay) { Invoke(nameof(C_SpawnDropPodOnSelf), Delay); }
        public void C_SpawnDancingCharacterOnSelf(int InDanceIndex) { Invoke(nameof(C_SpawnDancingCharacterOnSelf), InDanceIndex); }
        public void C_SpawnBarrelOnPlayer(int amount) { Invoke(nameof(C_SpawnBarrelOnPlayer), amount); }
        public void C_SpawnAllParticles() { Invoke(nameof(C_SpawnAllParticles)); }
        public void C_SetUseSavedCheatsByDefault(bool useSavedCheats) { Invoke(nameof(C_SetUseSavedCheatsByDefault), useSavedCheats); }
        public void C_SetTestMission(int missionIndex) { Invoke(nameof(C_SetTestMission), missionIndex); }
        public void C_SetTestingCharacter(PlayerCharacterID characterID) { Invoke(nameof(C_SetTestingCharacter), characterID); }
        public void C_SetSuperRapidFireEnabled(bool Enabled) { Invoke(nameof(C_SetSuperRapidFireEnabled), Enabled); }
        public void C_SetStandingDown(bool standingDown) { Invoke(nameof(C_SetStandingDown), standingDown); }
        public void C_SetSavedCheats() { Invoke(nameof(C_SetSavedCheats)); }
        public void C_SetPlayers(int Number) { Invoke(nameof(C_SetPlayers), Number); }
        public void C_SetInWorldSubtitlesActive(bool Active) { Invoke(nameof(C_SetInWorldSubtitlesActive), Active); }
        public void C_SetInstantUsables(bool Value) { Invoke(nameof(C_SetInstantUsables), Value); }
        public void C_SetHealth(float Health) { Invoke(nameof(C_SetHealth), Health); }
        public void C_SetFlyMode(bool flyEnabled) { Invoke(nameof(C_SetFlyMode), flyEnabled); }
        public void C_SetFastFlares() { Invoke(nameof(C_SetFastFlares)); }
        public void C_SetEnglish(int Val) { Invoke(nameof(C_SetEnglish), Val); }
        public void C_SetDancing(bool shouldDance, int danceMove) { Invoke(nameof(C_SetDancing), shouldDance, danceMove); }
        public void C_SetAmmoCostEnabled(bool Enabled) { Invoke(nameof(C_SetAmmoCostEnabled), Enabled); }
        public void C_SetActorTrackingVisible(bool Visible) { Invoke(nameof(C_SetActorTrackingVisible), Visible); }
        public void C_Seasons_ResetXP(Object WorldContextObject) { Invoke(nameof(C_Seasons_ResetXP), WorldContextObject); }
        public void C_Seasons_ResetTreeOfVanity() { Invoke(nameof(C_Seasons_ResetTreeOfVanity)); }
        public void C_Seasons_ResetToken() { Invoke(nameof(C_Seasons_ResetToken)); }
        public void C_Seasons_ResetReroll() { Invoke(nameof(C_Seasons_ResetReroll)); }
        public void C_Seasons_ResetPlagueHeartsCollected() { Invoke(nameof(C_Seasons_ResetPlagueHeartsCollected)); }
        public void C_Seasons_PrintScripProgress() { Invoke(nameof(C_Seasons_PrintScripProgress)); }
        public void C_Seasons_IncrementChallenge(int Index) { Invoke(nameof(C_Seasons_IncrementChallenge), Index); }
        public void C_Seasons_CompleteSeasonAlmost() { Invoke(nameof(C_Seasons_CompleteSeasonAlmost)); }
        public void C_Seasons_CompleteSeason() { Invoke(nameof(C_Seasons_CompleteSeason)); }
        public void C_Seasons_CompleteScripChallenge(int Number) { Invoke(nameof(C_Seasons_CompleteScripChallenge), Number); }
        public void C_Seasons_ClearSeasonCompletedAnnounced() { Invoke(nameof(C_Seasons_ClearSeasonCompletedAnnounced)); }
        public void C_Seasons_ClearChallenges() { Invoke(nameof(C_Seasons_ClearChallenges)); }
        public void C_Seasons_ClearAllProgress() { Invoke(nameof(C_Seasons_ClearAllProgress)); }
        public void C_Seasons_AddXP(Object WorldContextObject, int Number) { Invoke(nameof(C_Seasons_AddXP), WorldContextObject, Number); }
        public void C_Seasons_AddHeartsCollecdted(int Number) { Invoke(nameof(C_Seasons_AddHeartsCollecdted), Number); }
        public void C_Seasons_AddChallenge() { Invoke(nameof(C_Seasons_AddChallenge)); }
        public void C_Season_SetActiveSeason(Object WorldContextObject, int Index) { Invoke(nameof(C_Season_SetActiveSeason), WorldContextObject, Index); }
        public void C_Schematics_UnlockAll() { Invoke(nameof(C_Schematics_UnlockAll)); }
        public void C_Schematics_ResetAll() { Invoke(nameof(C_Schematics_ResetAll)); }
        public void C_Schematics_ForgeAll_Owned() { Invoke(nameof(C_Schematics_ForgeAll_Owned)); }
        public void C_Schematics_ForgeAll() { Invoke(nameof(C_Schematics_ForgeAll)); }
        public void C_Schematics_ClearHasSeenFirstMessage() { Invoke(nameof(C_Schematics_ClearHasSeenFirstMessage)); }
        public void C_Schematic_GiveRandom() { Invoke(nameof(C_Schematic_GiveRandom)); }
        public void C_Salvage_FixMiniMules() { Invoke(nameof(C_Salvage_FixMiniMules)); }
        public void C_Revive() { Invoke(nameof(C_Revive)); }
        public void C_Resupply() { Invoke(nameof(C_Resupply)); }
        public void C_ResetSteamAchievementStats() { Invoke(nameof(C_ResetSteamAchievementStats)); }
        public void C_ResetForgingXP() { Invoke(nameof(C_ResetForgingXP)); }
        public void C_ResetCheatedResources(int newAmount) { Invoke(nameof(C_ResetCheatedResources), newAmount); }
        public void C_ResetAll_Vanity() { Invoke(nameof(C_ResetAll_Vanity)); }
        public void C_ResetAchievements() { Invoke(nameof(C_ResetAchievements)); }
        public void C_Reset_YearTwoGifts() { Invoke(nameof(C_Reset_YearTwoGifts)); }
        public void C_Reset_WeaponSkinsAndUpgrades() { Invoke(nameof(C_Reset_WeaponSkinsAndUpgrades)); }
        public void C_Reset_WeaponSkins_Paintjobs() { Invoke(nameof(C_Reset_WeaponSkins_Paintjobs)); }
        public void C_Reset_WeaponSkins_Framworks() { Invoke(nameof(C_Reset_WeaponSkins_Framworks)); }
        public void C_Reset_WeaponSkins() { Invoke(nameof(C_Reset_WeaponSkins)); }
        public void C_Reset_Poses() { Invoke(nameof(C_Reset_Poses)); }
        public void C_Reset_PickaxeParts() { Invoke(nameof(C_Reset_PickaxeParts)); }
        public void C_Reset_Perks() { Invoke(nameof(C_Reset_Perks)); }
        public void C_Reset_MinersManual() { Invoke(nameof(C_Reset_MinersManual)); }
        public void C_Reset_EnemyKillCount() { Invoke(nameof(C_Reset_EnemyKillCount)); }
        public void C_Reset_Drinks() { Invoke(nameof(C_Reset_Drinks)); }
        public void C_RemovePlayerRanks(int Number) { Invoke(nameof(C_RemovePlayerRanks), Number); }
        public void C_RemoveAllWidgets() { Invoke(nameof(C_RemoveAllWidgets)); }
        public void C_Remove_WeaponSkinsFromCrate_Framwork() { Invoke(nameof(C_Remove_WeaponSkinsFromCrate_Framwork)); }
        public void C_Remove_VictoryPose() { Invoke(nameof(C_Remove_VictoryPose)); }
        public void C_RefreshDailyDeal(int Seed) { Invoke(nameof(C_RefreshDailyDeal), Seed); }
        public void C_Refresh_Daily_Special(int Index) { Invoke(nameof(C_Refresh_Daily_Special), Index); }
        public void C_Refinery_BreakPipes() { Invoke(nameof(C_Refinery_BreakPipes)); }
        public void C_RecordMode() { Invoke(nameof(C_RecordMode)); }
        public void C_PropHunt_Stop() { Invoke(nameof(C_PropHunt_Stop)); }
        public void C_PropHunt_Start(int InServerIndex) { Invoke(nameof(C_PropHunt_Start), InServerIndex); }
        public void C_Promotion_SetLevelSpecific(PlayerCharacter onCharacter, int Number) { Invoke(nameof(C_Promotion_SetLevelSpecific), onCharacter, Number); }
        public void C_Promotion_SetLevel(int Number) { Invoke(nameof(C_Promotion_SetLevel), Number); }
        public void C_Promotion_SetCampaignComplete() { Invoke(nameof(C_Promotion_SetCampaignComplete)); }
        public void C_Promotion_ClearRewardsSeen() { Invoke(nameof(C_Promotion_ClearRewardsSeen)); }
        public void C_ProjectileDrawPaths() { Invoke(nameof(C_ProjectileDrawPaths)); }
        public void C_ProjectileDebugPrintToggle() { Invoke(nameof(C_ProjectileDebugPrintToggle)); }
        public void C_PrintLoadout() { Invoke(nameof(C_PrintLoadout)); }
        public void C_PreventMeteors() { Invoke(nameof(C_PreventMeteors)); }
        public void C_PlayNewMusic(int songIndex) { Invoke(nameof(C_PlayNewMusic), songIndex); }
        public void C_MissionMap_TestDistribution() { Invoke(nameof(C_MissionMap_TestDistribution)); }
        public void C_MissionMap_SetSeed(int Seed) { Invoke(nameof(C_MissionMap_SetSeed), Seed); }
        public void C_MissionMap_Rotate() { Invoke(nameof(C_MissionMap_Rotate)); }
        public void C_MissionMap_ForceWarning(int Index) { Invoke(nameof(C_MissionMap_ForceWarning), Index); }
        public void C_MissionMap_ForceAnomaly(int Index) { Invoke(nameof(C_MissionMap_ForceAnomaly), Index); }
        public void C_MissionMap_DoubleWarning(int indexA, int indexB) { Invoke(nameof(C_MissionMap_DoubleWarning), indexA, indexB); }
        public void C_MissionMap_AutoRotate(bool Enabled) { Invoke(nameof(C_MissionMap_AutoRotate), Enabled); }
        public void C_MinersManual_EnableWorkInProgress(Object WorldContextObject) { Invoke(nameof(C_MinersManual_EnableWorkInProgress), WorldContextObject); }
        public void C_MachineEvents_Track(bool Track) { Invoke(nameof(C_MachineEvents_Track), Track); }
        public void C_MachineEvents_FinishCurrent() { Invoke(nameof(C_MachineEvents_FinishCurrent)); }
        public void C_LevelUpCharacter(int amount) { Invoke(nameof(C_LevelUpCharacter), amount); }
        public void C_KillTeam() { Invoke(nameof(C_KillTeam)); }
        public void C_KillPlayer() { Invoke(nameof(C_KillPlayer)); }
        public void C_KillAllNeutral() { Invoke(nameof(C_KillAllNeutral)); }
        public void C_KillAllFriendly() { Invoke(nameof(C_KillAllFriendly)); }
        public void C_KillAll() { Invoke(nameof(C_KillAll)); }
        public void C_JumpToNextRoom() { Invoke(nameof(C_JumpToNextRoom)); }
        public void C_JetBoots_Enable_MK2() { Invoke(nameof(C_JetBoots_Enable_MK2)); }
        public void C_JetBoots_Enable() { Invoke(nameof(C_JetBoots_Enable)); }
        public void C_Intoxication_SetAll(int Percent) { Invoke(nameof(C_Intoxication_SetAll), Percent); }
        public void C_Intoxication_Set(int Percent) { Invoke(nameof(C_Intoxication_Set), Percent); }
        public void C_IncrementAllMissionStats(int amount) { Invoke(nameof(C_IncrementAllMissionStats), amount); }
        public void C_IncreasePlagueInfection(float Increment) { Invoke(nameof(C_IncreasePlagueInfection), Increment); }
        public void C_GodMode(int forceEnable) { Invoke(nameof(C_GodMode), forceEnable); }
        public void C_GiveAllGenericHeroItems() { Invoke(nameof(C_GiveAllGenericHeroItems)); }
        public void C_GameDLC_ResetAnnouncements() { Invoke(nameof(C_GameDLC_ResetAnnouncements)); }
        public void C_FSDEvent_SetDebugEvent(Object EventName) { Invoke(nameof(C_FSDEvent_SetDebugEvent), EventName); }
        public void C_FSDEvent_ListEvents() { Invoke(nameof(C_FSDEvent_ListEvents)); }
        public void C_FSDEvent_ClearSeenRewards() { Invoke(nameof(C_FSDEvent_ClearSeenRewards)); }
        public void C_ForceCrash() { Invoke(nameof(C_ForceCrash)); }
        public void C_FlareInfiniteDuration(bool Enabled) { Invoke(nameof(C_FlareInfiniteDuration), Enabled); }
        public void C_FixedPLSSeed(int Seed) { Invoke(nameof(C_FixedPLSSeed), Seed); }
        public void C_FixedMissionSeed(int Seed) { Invoke(nameof(C_FixedMissionSeed), Seed); }
        public void C_FailMission() { Invoke(nameof(C_FailMission)); }
        public void C_FadeFromBlack(Object WorldContextObject) { Invoke(nameof(C_FadeFromBlack), WorldContextObject); }
        public void C_Facility_SpawnDataCore() { Invoke(nameof(C_Facility_SpawnDataCore)); }
        public void C_Facility_DisableShields() { Invoke(nameof(C_Facility_DisableShields)); }
        public void C_Escort_ShowSmartRockDebug(bool shouldShow) { Invoke(nameof(C_Escort_ShowSmartRockDebug), shouldShow); }
        public void C_Escort_SetMuleSpeed(Object WorldContextObject, float Speed) { Invoke(nameof(C_Escort_SetMuleSpeed), WorldContextObject, Speed); }
        public void C_Escort_JumpToNextPhase(Object WorldContextObject) { Invoke(nameof(C_Escort_JumpToNextPhase), WorldContextObject); }
        public void C_Escort_AddOilShale(int Number) { Invoke(nameof(C_Escort_AddOilShale), Number); }
        public void C_DLC_ClearAnnounced() { Invoke(nameof(C_DLC_ClearAnnounced)); }
        public void C_DisableBackendEvents() { Invoke(nameof(C_DisableBackendEvents)); }
        public void C_DestroyAllDancingCharacters() { Invoke(nameof(C_DestroyAllDancingCharacters)); }
        public void C_DeepDives_UnlockAll() { Invoke(nameof(C_DeepDives_UnlockAll)); }
        public void C_DeepDives_SetSeed(int Seed) { Invoke(nameof(C_DeepDives_SetSeed), Seed); }
        public void C_DeepDives_Reset() { Invoke(nameof(C_DeepDives_Reset)); }
        public void C_DeepDives_Refresh() { Invoke(nameof(C_DeepDives_Refresh)); }
        public void C_DeepDives_List() { Invoke(nameof(C_DeepDives_List)); }
        public void C_DebugTargetEnemySync(bool FindIt) { Invoke(nameof(C_DebugTargetEnemySync), FindIt); }
        public void C_CompleteObjectives() { Invoke(nameof(C_CompleteObjectives)); }
        public void C_CompleteMission() { Invoke(nameof(C_CompleteMission)); }
        public void C_ClearAllMissionStats() { Invoke(nameof(C_ClearAllMissionStats)); }
        public void C_ClearAllMilestones() { Invoke(nameof(C_ClearAllMilestones)); }
        public void C_ClearAllDecalsLocal() { Invoke(nameof(C_ClearAllDecalsLocal)); }
        public void C_ClearAllDecalsAll() { Invoke(nameof(C_ClearAllDecalsAll)); }
        public void C_Campaign_ResetProgress() { Invoke(nameof(C_Campaign_ResetProgress)); }
        public void C_Campaign_ResetCompleted() { Invoke(nameof(C_Campaign_ResetCompleted)); }
        public void C_Campaign_CompleteMain() { Invoke(nameof(C_Campaign_CompleteMain)); }
        public void C_Campaign_CompleteCurrent() { Invoke(nameof(C_Campaign_CompleteCurrent)); }
        public void C_Campaign_CompleteAll() { Invoke(nameof(C_Campaign_CompleteAll)); }
        public void C_Campaign_Advance() { Invoke(nameof(C_Campaign_Advance)); }
        public void C_BreakAllEnemyArmor() { Invoke(nameof(C_BreakAllEnemyArmor)); }
        public void C_BiomeEffectsEnabled(bool Enabled) { Invoke(nameof(C_BiomeEffectsEnabled), Enabled); }
        public void C_AddXP(int Number) { Invoke(nameof(C_AddXP), Number); }
        public void C_AddUncappedXP(int amount) { Invoke(nameof(C_AddUncappedXP), amount); }
        public void C_AddForgingXP(int Number) { Invoke(nameof(C_AddForgingXP), Number); }
        public void C_AddAllResourcesToInventory(float amount) { Invoke(nameof(C_AddAllResourcesToInventory), amount); }
        public void AddResourceToTeamDeposit(ResourceData Resource, float amount) { Invoke(nameof(AddResourceToTeamDeposit), Resource, amount); }
    }
    public class FSDCloudLoadSave : Object
    {
        public FSDCloudLoadSave(nint addr) : base(addr) { }
        public Object OnCloudLoadAll { get { return this[nameof(OnCloudLoadAll)]; } set { this[nameof(OnCloudLoadAll)] = value; } }
        public Object OnCloudLoadAllFailed { get { return this[nameof(OnCloudLoadAllFailed)]; } set { this[nameof(OnCloudLoadAllFailed)] = value; } }
        public FSDCloudSaveHandler CloudSaveHandler { get { return this[nameof(CloudSaveHandler)].As<FSDCloudSaveHandler>(); } set { this["CloudSaveHandler"] = value; } }
        public void StartCloudLoadAll(Object WorldContextObject, int Index, int Offset) { Invoke(nameof(StartCloudLoadAll), WorldContextObject, Index, Offset); }
    }
    public class FSDCloudSaveHandler : Object
    {
        public FSDCloudSaveHandler(nint addr) : base(addr) { }
        public int NumFailedSaves { get { return this[nameof(NumFailedSaves)].GetValue<int>(); } set { this[nameof(NumFailedSaves)].SetValue<int>(value); } }
    }
    public class FSDConversionLibrary : BlueprintFunctionLibrary
    {
        public FSDConversionLibrary(nint addr) : base(addr) { }
        public Vector_NetQuantizeNormal VectorToNetQuantizeNormal(Vector Vec) { return Invoke<Vector_NetQuantizeNormal>(nameof(VectorToNetQuantizeNormal), Vec); }
        public Vector_NetQuantize VectorToNetQuantize(Vector Vec) { return Invoke<Vector_NetQuantize>(nameof(VectorToNetQuantize), Vec); }
        public Vector QuatToVector(Quat Quat) { return Invoke<Vector>(nameof(QuatToVector), Quat); }
        public Rotator QuatToRotator(Quat Quat) { return Invoke<Rotator>(nameof(QuatToRotator), Quat); }
        public Vector_NetQuantizeNormal QuadToNetQuantizeNormal(Quat Quat) { return Invoke<Vector_NetQuantizeNormal>(nameof(QuadToNetQuantizeNormal), Quat); }
        public Vector ComponentToWorldLocation(SceneComponent Component) { return Invoke<Vector>(nameof(ComponentToWorldLocation), Component); }
        public Vector ActorToWorldLocation(Actor Actor) { return Invoke<Vector>(nameof(ActorToWorldLocation), Actor); }
    }
    public class FSDCreateSessionCallbackProxy : OnlineBlueprintCallProxyBase
    {
        public FSDCreateSessionCallbackProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public FSDCreateSessionCallbackProxy FSDCreateSession(Object WorldContextObject, PlayerController PlayerController, int PublicConnections, bool bUseLAN, bool bFriendsOnly) { return Invoke<FSDCreateSessionCallbackProxy>(nameof(FSDCreateSession), WorldContextObject, PlayerController, PublicConnections, bUseLAN, bFriendsOnly); }
    }
    public class FSDCustomDPIScalingRule : DPICustomScalingRule
    {
        public FSDCustomDPIScalingRule(nint addr) : base(addr) { }
    }
    public class FSDEvent : DataAsset
    {
        public FSDEvent(nint addr) : base(addr) { }
        public Object OnActiveChanged { get { return this[nameof(OnActiveChanged)]; } set { this[nameof(OnActiveChanged)] = value; } }
        public bool EnableDangerousSaveGameIDEditing { get { return this[nameof(EnableDangerousSaveGameIDEditing)].Flag; } set { this[nameof(EnableDangerousSaveGameIDEditing)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public Object EventDisplayText { get { return this[nameof(EventDisplayText)]; } set { this[nameof(EventDisplayText)] = value; } }
        public Texture2D EventThumbnail { get { return this[nameof(EventThumbnail)].As<Texture2D>(); } set { this["EventThumbnail"] = value; } }
        public EHolidayType EventType { get { return (EHolidayType)this[nameof(EventType)].GetValue<int>(); } set { this[nameof(EventType)].SetValue<int>((int)value); } }
        public bool bFreeBeerEvent { get { return this[nameof(bFreeBeerEvent)].Flag; } set { this[nameof(bFreeBeerEvent)].Flag = value; } }
        public bool bFreeBeerConfettiVisible { get { return this[nameof(bFreeBeerConfettiVisible)].Flag; } set { this[nameof(bFreeBeerConfettiVisible)].Flag = value; } }
        public DrinkableDataAsset SpecialEventBeer { get { return this[nameof(SpecialEventBeer)].As<DrinkableDataAsset>(); } set { this["SpecialEventBeer"] = value; } }
        public Texture2D SeasonEndScreenImage { get { return this[nameof(SeasonEndScreenImage)].As<Texture2D>(); } set { this["SeasonEndScreenImage"] = value; } }
        public Object EventAmbienceMusic { get { return this[nameof(EventAmbienceMusic)]; } set { this[nameof(EventAmbienceMusic)] = value; } }
        public bool UseDifferentBarLightColor { get { return this[nameof(UseDifferentBarLightColor)].Flag; } set { this[nameof(UseDifferentBarLightColor)].Flag = value; } }
        public LinearColor SpaceRigBarLightColor { get { return this[nameof(SpaceRigBarLightColor)].As<LinearColor>(); } set { this["SpaceRigBarLightColor"] = value; } }
        public UArray<EncounterSpecialItem> EventEncounters { get { return new UArray<EncounterSpecialItem>(this[nameof(EventEncounters)].Address); } }
        public UArray<Object> EventDebris { get { return new UArray<Object>(this[nameof(EventDebris)].Address); } }
        public bool bIsEventDebrisInDeepDives { get { return this[nameof(bIsEventDebrisInDeepDives)].Flag; } set { this[nameof(bIsEventDebrisInDeepDives)].Flag = value; } }
        public UArray<Object> SpacerigSublevels { get { return new UArray<Object>(this[nameof(SpacerigSublevels)].Address); } }
        public UArray<Object> UnloadSpacerigSublevels { get { return new UArray<Object>(this[nameof(UnloadSpacerigSublevels)].Address); } }
        public bool bHasClaimableRewards { get { return this[nameof(bHasClaimableRewards)].Flag; } set { this[nameof(bHasClaimableRewards)].Flag = value; } }
        public ClaimableRewardView ClaimableRewards { get { return this[nameof(ClaimableRewards)].As<ClaimableRewardView>(); } set { this["ClaimableRewards"] = value; } }
        public UArray<PlatformSpecificEventPopup> OptionalPopUpWindow { get { return new UArray<PlatformSpecificEventPopup>(this[nameof(OptionalPopUpWindow)].Address); } }
        public UArray<Object> Campaigns { get { return new UArray<Object>(this[nameof(Campaigns)].Address); } }
        public Object TitleScreenOverride { get { return this[nameof(TitleScreenOverride)]; } set { this[nameof(TitleScreenOverride)] = value; } }
        public JettyBootEventSettings JettyBootSettings { get { return this[nameof(JettyBootSettings)].As<JettyBootEventSettings>(); } set { this["JettyBootSettings"] = value; } }
        public DateTime EventEndTimeLocal { get { return this[nameof(EventEndTimeLocal)].As<DateTime>(); } set { this["EventEndTimeLocal"] = value; } }
        public void MarkClaimableRewardsSeen(Object WorldContext) { Invoke(nameof(MarkClaimableRewardsSeen), WorldContext); }
        public bool IsFsdEventActive(Object WorldContext, FSDEvent FSDEvent) { return Invoke<bool>(nameof(IsFsdEventActive), WorldContext, FSDEvent); }
        public bool HasUnseenClaimableRewards(Object WorldContext) { return Invoke<bool>(nameof(HasUnseenClaimableRewards), WorldContext); }
        public bool GiveRewards(PlayerController PlayerController) { return Invoke<bool>(nameof(GiveRewards), PlayerController); }
        public Texture2D GetTitleScreenOverride() { return Invoke<Texture2D>(nameof(GetTitleScreenOverride)); }
        public bool GetIsActive(Object WorldContext) { return Invoke<bool>(nameof(GetIsActive), WorldContext); }
        public FSDEventPopupWidget CreatePopupWindow(PlayerController InPlayerController) { return Invoke<FSDEventPopupWidget>(nameof(CreatePopupWindow), InPlayerController); }
    }
    public class FSDEventCollection : DataAsset
    {
        public FSDEventCollection(nint addr) : base(addr) { }
        public Object Events { get { return this[nameof(Events)]; } set { this[nameof(Events)] = value; } }
        public Object OnEventActiveChanged { get { return this[nameof(OnEventActiveChanged)]; } set { this[nameof(OnEventActiveChanged)] = value; } }
        public UArray<FSDEvent> GetEventsSorted() { return Invoke<UArray<FSDEvent>>(nameof(GetEventsSorted)); }
        public FSDEvent FindEventHandler(Object EventName) { return Invoke<FSDEvent>(nameof(FindEventHandler), EventName); }
        public UArray<FSDEvent> FindAllEventHandlers(Object EventName) { return Invoke<UArray<FSDEvent>>(nameof(FindAllEventHandlers), EventName); }
    }
    public class FSDEventManager : GameInstanceSubsystem
    {
        public FSDEventManager(nint addr) : base(addr) { }
        public Object OnFSDEventsRefresh { get { return this[nameof(OnFSDEventsRefresh)]; } set { this[nameof(OnFSDEventsRefresh)] = value; } }
        public Object OnEventActiveChanged { get { return this[nameof(OnEventActiveChanged)]; } set { this[nameof(OnEventActiveChanged)] = value; } }
        public UArray<FSDEventWithEnd> PendingActiveEvents { get { return new UArray<FSDEventWithEnd>(this[nameof(PendingActiveEvents)].Address); } }
        public UArray<FSDEventWithEnd> ActiveEvents { get { return new UArray<FSDEventWithEnd>(this[nameof(ActiveEvents)].Address); } }
        public int NumFailedRequests { get { return this[nameof(NumFailedRequests)].GetValue<int>(); } set { this[nameof(NumFailedRequests)].SetValue<int>(value); } }
        public bool BackendDataValid { get { return this[nameof(BackendDataValid)].Flag; } set { this[nameof(BackendDataValid)].Flag = value; } }
        public DateTime LastRequestTime { get { return this[nameof(LastRequestTime)].As<DateTime>(); } set { this["LastRequestTime"] = value; } }
        public float NextCheckTime { get { return this[nameof(NextCheckTime)].GetValue<float>(); } set { this[nameof(NextCheckTime)].SetValue<float>(value); } }
        public DateTime SeasonExpirationTime { get { return this[nameof(SeasonExpirationTime)].As<DateTime>(); } set { this["SeasonExpirationTime"] = value; } }
        public bool SeasonExpirationTimeValid { get { return this[nameof(SeasonExpirationTimeValid)].Flag; } set { this[nameof(SeasonExpirationTimeValid)].Flag = value; } }
        public bool BackendNotificationEventValid { get { return this[nameof(BackendNotificationEventValid)].Flag; } set { this[nameof(BackendNotificationEventValid)].Flag = value; } }
        public void TryGetJettyBootSettings(bool OutHasSettings, JettyBootEventSettings OutSettings) { Invoke(nameof(TryGetJettyBootSettings), OutHasSettings, OutSettings); }
        public void RequestSeasonEndTime(Object OnComplete) { Invoke(nameof(RequestSeasonEndTime), OnComplete); }
        public bool IsEventTypeActive(EHolidayType FSDEvent) { return Invoke<bool>(nameof(IsEventTypeActive), FSDEvent); }
        public bool IsEventActive(FSDEvent FSDEvent) { return Invoke<bool>(nameof(IsEventActive), FSDEvent); }
        public bool GetSeasonExpiryDate(DateTime ExpiryDate) { return Invoke<bool>(nameof(GetSeasonExpiryDate), ExpiryDate); }
        public EHolidayType GetHolidayType() { return Invoke<EHolidayType>(nameof(GetHolidayType)); }
        public FSDEvent GetFirstActiveEventHandler() { return Invoke<FSDEvent>(nameof(GetFirstActiveEventHandler)); }
        public bool GetBackendNotificationEvent(BackendNotificationEvent Notification) { return Invoke<bool>(nameof(GetBackendNotificationEvent), Notification); }
        public UArray<FSDEvent> GetActiveEventHandlers() { return Invoke<UArray<FSDEvent>>(nameof(GetActiveEventHandlers)); }
        public void FSDEventsRefreshDelegate__DelegateSignature() { Invoke(nameof(FSDEventsRefreshDelegate__DelegateSignature)); }
        public bool FSDEventsReady() { return Invoke<bool>(nameof(FSDEventsReady)); }
    }
    public class FSDEventPopupWidget : WindowWidget
    {
        public FSDEventPopupWidget(nint addr) : base(addr) { }
        public FSDEvent FSDEvent { get { return this[nameof(FSDEvent)].As<FSDEvent>(); } set { this["FSDEvent"] = value; } }
    }
    public class FSDEventsHandler : Object
    {
        public FSDEventsHandler(nint addr) : base(addr) { }
        public DateTime LastRequestTime { get { return this[nameof(LastRequestTime)].As<DateTime>(); } set { this["LastRequestTime"] = value; } }
        public int NumFailedRequests { get { return this[nameof(NumFailedRequests)].GetValue<int>(); } set { this[nameof(NumFailedRequests)].SetValue<int>(value); } }
    }
    public class FSDFindSessionsCallbackProxy : OnlineBlueprintCallProxyBase
    {
        public FSDFindSessionsCallbackProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object OnRefresh { get { return this[nameof(OnRefresh)]; } set { this[nameof(OnRefresh)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public FSDFindSteamSessions FSDFindSteamSessions { get { return this[nameof(FSDFindSteamSessions)].As<FSDFindSteamSessions>(); } set { this["FSDFindSteamSessions"] = value; } }
        public void OnFSDCompleted(bool bSuccess, UArray<BlueprintSessionResult> Results) { Invoke(nameof(OnFSDCompleted), bSuccess, Results); }
        public void ManualRefreshServerList() { Invoke(nameof(ManualRefreshServerList)); }
        public FSDFindSessionsCallbackProxy FSDFindSessions(Object WorldContextObject, PlayerController PlayerController, int MaxResults, bool bUseLAN) { return Invoke<FSDFindSessionsCallbackProxy>(nameof(FSDFindSessions), WorldContextObject, PlayerController, MaxResults, bUseLAN); }
        public FSDFindSessionsCallbackProxy FSDFindFullSessions(Object WorldContextObject, PlayerController PlayerController, int MaxResults) { return Invoke<FSDFindSessionsCallbackProxy>(nameof(FSDFindFullSessions), WorldContextObject, PlayerController, MaxResults); }
    }
    public class FSDFindSteamSessions : Object
    {
        public FSDFindSteamSessions(nint addr) : base(addr) { }
        public Object OnFindResult { get { return this[nameof(OnFindResult)]; } set { this[nameof(OnFindResult)] = value; } }
    }
    public class FSDFlyingBugController : FSDAIController
    {
        public FSDFlyingBugController(nint addr) : base(addr) { }
        public BehaviorTree BehaviourTree { get { return this[nameof(BehaviourTree)].As<BehaviorTree>(); } set { this["BehaviourTree"] = value; } }
        public float UpdateLosInterval { get { return this[nameof(UpdateLosInterval)].GetValue<float>(); } set { this[nameof(UpdateLosInterval)].SetValue<float>(value); } }
        public bool SetTargetOnAlert { get { return this[nameof(SetTargetOnAlert)].Flag; } set { this[nameof(SetTargetOnAlert)].Flag = value; } }
        public bool SyncTargetWithBB { get { return this[nameof(SyncTargetWithBB)].Flag; } set { this[nameof(SyncTargetWithBB)].Flag = value; } }
        public void OnFlyingBugAlerted() { Invoke(nameof(OnFlyingBugAlerted)); }
    }
    public class DashingFlyingBugController : FSDFlyingBugController
    {
        public DashingFlyingBugController(nint addr) : base(addr) { }
    }
    public class FSDFriendsAndInvites : Object
    {
        public FSDFriendsAndInvites(nint addr) : base(addr) { }
        public Object OnFriendsChanged { get { return this[nameof(OnFriendsChanged)]; } set { this[nameof(OnFriendsChanged)] = value; } }
        public Object OnFriendInvitesChanged { get { return this[nameof(OnFriendInvitesChanged)]; } set { this[nameof(OnFriendInvitesChanged)] = value; } }
        public Object OnRequestRefresh { get { return this[nameof(OnRequestRefresh)]; } set { this[nameof(OnRequestRefresh)] = value; } }
        public UArray<BlueprintFriend> Friends { get { return new UArray<BlueprintFriend>(this[nameof(Friends)].Address); } }
        public UArray<BlueprintFriend> FriendInvites { get { return new UArray<BlueprintFriend>(this[nameof(FriendInvites)].Address); } }
        public void Init() { Invoke(nameof(Init)); }
    }
    public class FSDGameInstance : GameInstance
    {
        public FSDGameInstance(nint addr) : base(addr) { }
        public Object OnTemporaryBuffAdded { get { return this[nameof(OnTemporaryBuffAdded)]; } set { this[nameof(OnTemporaryBuffAdded)] = value; } }
        public Object OnGameSettingsChanged { get { return this[nameof(OnGameSettingsChanged)]; } set { this[nameof(OnGameSettingsChanged)] = value; } }
        public Object OnGraphicsSettingsChanged { get { return this[nameof(OnGraphicsSettingsChanged)]; } set { this[nameof(OnGraphicsSettingsChanged)] = value; } }
        public Object OnPressStart { get { return this[nameof(OnPressStart)]; } set { this[nameof(OnPressStart)] = value; } }
        public Object OnJoinPendingInvite { get { return this[nameof(OnJoinPendingInvite)]; } set { this[nameof(OnJoinPendingInvite)] = value; } }
        public Object OnSkinChangedEvent { get { return this[nameof(OnSkinChangedEvent)]; } set { this[nameof(OnSkinChangedEvent)] = value; } }
        public Object OnLoaderStart { get { return this[nameof(OnLoaderStart)]; } set { this[nameof(OnLoaderStart)] = value; } }
        public Object OnPlayLevelSequenceInCharacterWorld { get { return this[nameof(OnPlayLevelSequenceInCharacterWorld)]; } set { this[nameof(OnPlayLevelSequenceInCharacterWorld)] = value; } }
        public Object OnLoaderStop { get { return this[nameof(OnLoaderStop)]; } set { this[nameof(OnLoaderStop)] = value; } }
        public Object OnCharacterSelectionStart { get { return this[nameof(OnCharacterSelectionStart)]; } set { this[nameof(OnCharacterSelectionStart)] = value; } }
        public Object OnStartForging { get { return this[nameof(OnStartForging)]; } set { this[nameof(OnStartForging)] = value; } }
        public Object OnSkipForging { get { return this[nameof(OnSkipForging)]; } set { this[nameof(OnSkipForging)] = value; } }
        public Object OnForgingDone { get { return this[nameof(OnForgingDone)]; } set { this[nameof(OnForgingDone)] = value; } }
        public Object OnCharacterSelectionStop { get { return this[nameof(OnCharacterSelectionStop)]; } set { this[nameof(OnCharacterSelectionStop)] = value; } }
        public Object OnShowCharacterSelectionRefresh { get { return this[nameof(OnShowCharacterSelectionRefresh)]; } set { this[nameof(OnShowCharacterSelectionRefresh)] = value; } }
        public Object OnTutorialManagerSet { get { return this[nameof(OnTutorialManagerSet)]; } set { this[nameof(OnTutorialManagerSet)] = value; } }
        public Object OnLocalPlayerCharacterSet { get { return this[nameof(OnLocalPlayerCharacterSet)]; } set { this[nameof(OnLocalPlayerCharacterSet)] = value; } }
        public Object OnShowReconnectScreen { get { return this[nameof(OnShowReconnectScreen)]; } set { this[nameof(OnShowReconnectScreen)] = value; } }
        public Object OnXBoxAccountPickerClosed { get { return this[nameof(OnXBoxAccountPickerClosed)]; } set { this[nameof(OnXBoxAccountPickerClosed)] = value; } }
        public Object OnXBoxChangeUser { get { return this[nameof(OnXBoxChangeUser)]; } set { this[nameof(OnXBoxChangeUser)] = value; } }
        public Object OnHDRGammaChanged { get { return this[nameof(OnHDRGammaChanged)]; } set { this[nameof(OnHDRGammaChanged)] = value; } }
        public Object OnGravityChanged { get { return this[nameof(OnGravityChanged)]; } set { this[nameof(OnGravityChanged)] = value; } }
        public Object OnNewPostProcessingManager { get { return this[nameof(OnNewPostProcessingManager)]; } set { this[nameof(OnNewPostProcessingManager)] = value; } }
        public Object OnPreviewSkinChanged { get { return this[nameof(OnPreviewSkinChanged)]; } set { this[nameof(OnPreviewSkinChanged)] = value; } }
        public bool ShowingReconnectScreen { get { return this[nameof(ShowingReconnectScreen)].Flag; } set { this[nameof(ShowingReconnectScreen)].Flag = value; } }
        public Object MouseCursorWidget { get { return this[nameof(MouseCursorWidget)]; } set { this[nameof(MouseCursorWidget)] = value; } }
        public Object OnShowCharacterSelector { get { return this[nameof(OnShowCharacterSelector)]; } set { this[nameof(OnShowCharacterSelector)] = value; } }
        public Object OnShowViewer3D { get { return this[nameof(OnShowViewer3D)]; } set { this[nameof(OnShowViewer3D)] = value; } }
        public Object OnShowCharacterSelectorEquipSlot { get { return this[nameof(OnShowCharacterSelectorEquipSlot)]; } set { this[nameof(OnShowCharacterSelectorEquipSlot)] = value; } }
        public Object OnShowCharacterSelectorEquip { get { return this[nameof(OnShowCharacterSelectorEquip)]; } set { this[nameof(OnShowCharacterSelectorEquip)] = value; } }
        public Object OnShowCharacterSelectorRotate { get { return this[nameof(OnShowCharacterSelectorRotate)]; } set { this[nameof(OnShowCharacterSelectorRotate)] = value; } }
        public Object OnShowEndScreen { get { return this[nameof(OnShowEndScreen)]; } set { this[nameof(OnShowEndScreen)] = value; } }
        public ProceduralSetup ProceduralSetup { get { return this[nameof(ProceduralSetup)].As<ProceduralSetup>(); } set { this["ProceduralSetup"] = value; } }
        public bool HasStartedAMission { get { return this[nameof(HasStartedAMission)].Flag; } set { this[nameof(HasStartedAMission)].Flag = value; } }
        public Object FSDPassword { get { return this[nameof(FSDPassword)]; } set { this[nameof(FSDPassword)] = value; } }
        public bool FSDPrivateServer { get { return this[nameof(FSDPrivateServer)].Flag; } set { this[nameof(FSDPrivateServer)].Flag = value; } }
        public bool SoloSession { get { return this[nameof(SoloSession)].Flag; } set { this[nameof(SoloSession)].Flag = value; } }
        public bool IsJoiningInvite { get { return this[nameof(IsJoiningInvite)].Flag; } set { this[nameof(IsJoiningInvite)].Flag = value; } }
        public bool FirstTimeInFrontend { get { return this[nameof(FirstTimeInFrontend)].Flag; } set { this[nameof(FirstTimeInFrontend)].Flag = value; } }
        public bool SessionFirstStartOnSpaceRig { get { return this[nameof(SessionFirstStartOnSpaceRig)].Flag; } set { this[nameof(SessionFirstStartOnSpaceRig)].Flag = value; } }
        public bool ShowFirstCharacterSelector { get { return this[nameof(ShowFirstCharacterSelector)].Flag; } set { this[nameof(ShowFirstCharacterSelector)].Flag = value; } }
        public bool ShowSaveWarning { get { return this[nameof(ShowSaveWarning)].Flag; } set { this[nameof(ShowSaveWarning)].Flag = value; } }
        public Actor WorldViewTargetDummy { get { return this[nameof(WorldViewTargetDummy)].As<Actor>(); } set { this["WorldViewTargetDummy"] = value; } }
        public MissionResultInfo MissionResultInfo { get { return this[nameof(MissionResultInfo)].As<MissionResultInfo>(); } set { this["MissionResultInfo"] = value; } }
        public bool LoaderSequencePlaying { get { return this[nameof(LoaderSequencePlaying)].Flag; } set { this[nameof(LoaderSequencePlaying)].Flag = value; } }
        public Object LastPerksLoadout { get { return this[nameof(LastPerksLoadout)]; } set { this[nameof(LastPerksLoadout)] = value; } }
        public Actor CharacterSelectionLastViewTarget { get { return this[nameof(CharacterSelectionLastViewTarget)].As<Actor>(); } set { this["CharacterSelectionLastViewTarget"] = value; } }
        public bool HasSeenInfoScreen { get { return this[nameof(HasSeenInfoScreen)].Flag; } set { this[nameof(HasSeenInfoScreen)].Flag = value; } }
        public Transform CharacterSelectionViewTargetTransform { get { return this[nameof(CharacterSelectionViewTargetTransform)].As<Transform>(); } set { this["CharacterSelectionViewTargetTransform"] = value; } }
        public Transform LoaderViewTargetTransform { get { return this[nameof(LoaderViewTargetTransform)].As<Transform>(); } set { this["LoaderViewTargetTransform"] = value; } }
        public Object OnGeneratedMissionChanged { get { return this[nameof(OnGeneratedMissionChanged)]; } set { this[nameof(OnGeneratedMissionChanged)] = value; } }
        public Object OnDonkeyChanged { get { return this[nameof(OnDonkeyChanged)]; } set { this[nameof(OnDonkeyChanged)] = value; } }
        public Object Donkey { get { return this[nameof(Donkey)]; } set { this[nameof(Donkey)] = value; } }
        public Object OnBoscoChanged { get { return this[nameof(OnBoscoChanged)]; } set { this[nameof(OnBoscoChanged)] = value; } }
        public bool DEBUGUseDebugSeedForMissions { get { return this[nameof(DEBUGUseDebugSeedForMissions)].Flag; } set { this[nameof(DEBUGUseDebugSeedForMissions)].Flag = value; } }
        public bool DEBUGAutoRotateMissions { get { return this[nameof(DEBUGAutoRotateMissions)].Flag; } set { this[nameof(DEBUGAutoRotateMissions)].Flag = value; } }
        public int DEBUGFixedPLSSeed { get { return this[nameof(DEBUGFixedPLSSeed)].GetValue<int>(); } set { this[nameof(DEBUGFixedPLSSeed)].SetValue<int>(value); } }
        public int DEBUGSeedOverride { get { return this[nameof(DEBUGSeedOverride)].GetValue<int>(); } set { this[nameof(DEBUGSeedOverride)].SetValue<int>(value); } }
        public bool CanPlayOnline { get { return this[nameof(CanPlayOnline)].Flag; } set { this[nameof(CanPlayOnline)].Flag = value; } }
        public bool CanCommunicateOnline { get { return this[nameof(CanCommunicateOnline)].Flag; } set { this[nameof(CanCommunicateOnline)].Flag = value; } }
        public Object OnSteamSearchRegionChanged { get { return this[nameof(OnSteamSearchRegionChanged)]; } set { this[nameof(OnSteamSearchRegionChanged)] = value; } }
        public Object OnSteamServerJoinStatusChanged { get { return this[nameof(OnSteamServerJoinStatusChanged)]; } set { this[nameof(OnSteamServerJoinStatusChanged)] = value; } }
        public Object OnStartSearchForFriendsComplete { get { return this[nameof(OnStartSearchForFriendsComplete)]; } set { this[nameof(OnStartSearchForFriendsComplete)] = value; } }
        public Object FriendSessions { get { return this[nameof(FriendSessions)]; } set { this[nameof(FriendSessions)] = value; } }
        public GoogleAnalyticsWrapper GoogleAnalyticsWI { get { return this[nameof(GoogleAnalyticsWI)].As<GoogleAnalyticsWrapper>(); } set { this["GoogleAnalyticsWI"] = value; } }
        public DSTelemetryWrapper DSTelemetryWrapper { get { return this[nameof(DSTelemetryWrapper)].As<DSTelemetryWrapper>(); } set { this["DSTelemetryWrapper"] = value; } }
        public SpecialEvent ForcedMachineEvent { get { return this[nameof(ForcedMachineEvent)].As<SpecialEvent>(); } set { this["ForcedMachineEvent"] = value; } }
        public SpecialEvent ForcedOtherEvent { get { return this[nameof(ForcedOtherEvent)].As<SpecialEvent>(); } set { this["ForcedOtherEvent"] = value; } }
        public bool ShowMinerManualWorkInProgress { get { return this[nameof(ShowMinerManualWorkInProgress)].Flag; } set { this[nameof(ShowMinerManualWorkInProgress)].Flag = value; } }
        public Object OnMinersManualNotification { get { return this[nameof(OnMinersManualNotification)]; } set { this[nameof(OnMinersManualNotification)] = value; } }
        public Object OnNewHUDWarning { get { return this[nameof(OnNewHUDWarning)]; } set { this[nameof(OnNewHUDWarning)] = value; } }
        public float LastDreadnaughtKillTime { get { return this[nameof(LastDreadnaughtKillTime)].GetValue<float>(); } set { this[nameof(LastDreadnaughtKillTime)].SetValue<float>(value); } }
        public Object ActiveEscapeMenu { get { return this[nameof(ActiveEscapeMenu)]; } set { this[nameof(ActiveEscapeMenu)] = value; } }
        public Object PostProcessingManager { get { return this[nameof(PostProcessingManager)]; } set { this[nameof(PostProcessingManager)] = value; } }
        public Object Drone { get { return this[nameof(Drone)]; } set { this[nameof(Drone)] = value; } }
        public Object LocalPlayerCharacter { get { return this[nameof(LocalPlayerCharacter)]; } set { this[nameof(LocalPlayerCharacter)] = value; } }
        public Object TutorialManager { get { return this[nameof(TutorialManager)]; } set { this[nameof(TutorialManager)] = value; } }
        public CharacterSelectionSwitcher CharacterSelectionSwitcher { get { return this[nameof(CharacterSelectionSwitcher)].As<CharacterSelectionSwitcher>(); } set { this["CharacterSelectionSwitcher"] = value; } }
        public bool bGameSettingsChanged { get { return this[nameof(bGameSettingsChanged)].Flag; } set { this[nameof(bGameSettingsChanged)].Flag = value; } }
        public FSDServerSearchOptions ServerSearchOptions { get { return this[nameof(ServerSearchOptions)].As<FSDServerSearchOptions>(); } set { this["ServerSearchOptions"] = value; } }
        public bool ServerSearchActive { get { return this[nameof(ServerSearchActive)].Flag; } set { this[nameof(ServerSearchActive)].Flag = value; } }
        public Object OnPrivilegeCheckComplete { get { return this[nameof(OnPrivilegeCheckComplete)]; } set { this[nameof(OnPrivilegeCheckComplete)] = value; } }
        public bool IsOnPressStartScreen { get { return this[nameof(IsOnPressStartScreen)].Flag; } set { this[nameof(IsOnPressStartScreen)].Flag = value; } }
        public bool HasSeenStartScreen { get { return this[nameof(HasSeenStartScreen)].Flag; } set { this[nameof(HasSeenStartScreen)].Flag = value; } }
        public Object ProceduralLevel { get { return this[nameof(ProceduralLevel)]; } set { this[nameof(ProceduralLevel)] = value; } }
        public Object IconGenerationManagerClass { get { return this[nameof(IconGenerationManagerClass)]; } set { this[nameof(IconGenerationManagerClass)] = value; } }
        public IconGenerationManager IconGenerationManager { get { return this[nameof(IconGenerationManager)].As<IconGenerationManager>(); } set { this["IconGenerationManager"] = value; } }
        public CampaignManager CampaignManager { get { return this[nameof(CampaignManager)].As<CampaignManager>(); } set { this["CampaignManager"] = value; } }
        public Object DeepDiveManager { get { return this[nameof(DeepDiveManager)]; } set { this[nameof(DeepDiveManager)] = value; } }
        public GeneratedMission GeneratedMission { get { return this[nameof(GeneratedMission)].As<GeneratedMission>(); } set { this["GeneratedMission"] = value; } }
        public DifficultySetting DesiredDifficulty { get { return this[nameof(DesiredDifficulty)].As<DifficultySetting>(); } set { this["DesiredDifficulty"] = value; } }
        public FSDSaveGame SaveGame { get { return this[nameof(SaveGame)].As<FSDSaveGame>(); } set { this["SaveGame"] = value; } }
        public EDisconnectReason DisconnectReason { get { return (EDisconnectReason)this[nameof(DisconnectReason)].GetValue<int>(); } set { this[nameof(DisconnectReason)].SetValue<int>((int)value); } }
        public Object DisconnectErrorCode { get { return this[nameof(DisconnectErrorCode)]; } set { this[nameof(DisconnectErrorCode)] = value; } }
        public UArray<World> AlwaysLoadedWorlds { get { return new UArray<World>(this[nameof(AlwaysLoadedWorlds)].Address); } }
        public bool ShowCharacterSelectionWorld { get { return this[nameof(ShowCharacterSelectionWorld)].Flag; } set { this[nameof(ShowCharacterSelectionWorld)].Flag = value; } }
        public Object Viewer3DClass { get { return this[nameof(Viewer3DClass)]; } set { this[nameof(Viewer3DClass)] = value; } }
        public bool ShowLoaderWorld { get { return this[nameof(ShowLoaderWorld)].Flag; } set { this[nameof(ShowLoaderWorld)].Flag = value; } }
        public bool CharacterSelectionWorldActive { get { return this[nameof(CharacterSelectionWorldActive)].Flag; } set { this[nameof(CharacterSelectionWorldActive)].Flag = value; } }
        public bool MixerInteractivityEnabled { get { return this[nameof(MixerInteractivityEnabled)].Flag; } set { this[nameof(MixerInteractivityEnabled)].Flag = value; } }
        public bool LoaderWorldActive { get { return this[nameof(LoaderWorldActive)].Flag; } set { this[nameof(LoaderWorldActive)].Flag = value; } }
        public bool ResetHUDWhenReturning { get { return this[nameof(ResetHUDWhenReturning)].Flag; } set { this[nameof(ResetHUDWhenReturning)].Flag = value; } }
        public bool MovieModeActive { get { return this[nameof(MovieModeActive)].Flag; } set { this[nameof(MovieModeActive)].Flag = value; } }
        public bool MovieModeActiveInSpacerig { get { return this[nameof(MovieModeActiveInSpacerig)].Flag; } set { this[nameof(MovieModeActiveInSpacerig)].Flag = value; } }
        public bool MovieModeStartAtOrigin { get { return this[nameof(MovieModeStartAtOrigin)].Flag; } set { this[nameof(MovieModeStartAtOrigin)].Flag = value; } }
        public bool MovieModeStartWithCameraShake { get { return this[nameof(MovieModeStartWithCameraShake)].Flag; } set { this[nameof(MovieModeStartWithCameraShake)].Flag = value; } }
        public Schematic ActiveForgeSchematic { get { return this[nameof(ActiveForgeSchematic)].As<Schematic>(); } set { this["ActiveForgeSchematic"] = value; } }
        public FSDCloudLoadSave FSDCloudLoadSave { get { return this[nameof(FSDCloudLoadSave)].As<FSDCloudLoadSave>(); } set { this["FSDCloudLoadSave"] = value; } }
        public FSDSessionUpdater SessionUpdater { get { return this[nameof(SessionUpdater)].As<FSDSessionUpdater>(); } set { this["SessionUpdater"] = value; } }
        public FSDSendToURL SendToURL { get { return this[nameof(SendToURL)].As<FSDSendToURL>(); } set { this["SendToURL"] = value; } }
        public FSDFriendsAndInvites FriendsAndInvites { get { return this[nameof(FriendsAndInvites)].As<FSDFriendsAndInvites>(); } set { this["FriendsAndInvites"] = value; } }
        public double SessionStartTime { get { return this[nameof(SessionStartTime)].GetValue<double>(); } set { this[nameof(SessionStartTime)].SetValue<double>(value); } }
        public int SessionStartTimestamp { get { return this[nameof(SessionStartTimestamp)].GetValue<int>(); } set { this[nameof(SessionStartTimestamp)].SetValue<int>(value); } }
        public float InKBytesPerSecond { get { return this[nameof(InKBytesPerSecond)].GetValue<float>(); } set { this[nameof(InKBytesPerSecond)].SetValue<float>(value); } }
        public float OutKBytesPerSecond { get { return this[nameof(OutKBytesPerSecond)].GetValue<float>(); } set { this[nameof(OutKBytesPerSecond)].SetValue<float>(value); } }
        public bool PreSpawnNigaraParticles { get { return this[nameof(PreSpawnNigaraParticles)].Flag; } set { this[nameof(PreSpawnNigaraParticles)].Flag = value; } }
        public UArray<TemporaryBuff> TemporaryBuffs { get { return new UArray<TemporaryBuff>(this[nameof(TemporaryBuffs)].Address); } }
        public Object NextLoaderSequence { get { return this[nameof(NextLoaderSequence)]; } set { this[nameof(NextLoaderSequence)] = value; } }
        public EAlwaysLoadedWorlds NextLoaderLevel { get { return (EAlwaysLoadedWorlds)this[nameof(NextLoaderLevel)].GetValue<int>(); } set { this[nameof(NextLoaderLevel)].SetValue<int>((int)value); } }
        public Object DeepDiveLoaderSequence { get { return this[nameof(DeepDiveLoaderSequence)]; } set { this[nameof(DeepDiveLoaderSequence)] = value; } }
        public Object DeepDiveLoaderSequence2 { get { return this[nameof(DeepDiveLoaderSequence2)]; } set { this[nameof(DeepDiveLoaderSequence2)] = value; } }
        public SoundSubmix ControllerVibrationSubmix { get { return this[nameof(ControllerVibrationSubmix)].As<SoundSubmix>(); } set { this["ControllerVibrationSubmix"] = value; } }
        public SoundSubmix ControllerSpeakerSubmix { get { return this[nameof(ControllerSpeakerSubmix)].As<SoundSubmix>(); } set { this["ControllerSpeakerSubmix"] = value; } }
        public void UpdateGlobelMissionSeed() { Invoke(nameof(UpdateGlobelMissionSeed)); }
        public void UpdateDebugSeed() { Invoke(nameof(UpdateDebugSeed)); }
        public void StopPhotographyInputProcessor() { Invoke(nameof(StopPhotographyInputProcessor)); }
        public void StopPersonalAnalytics() { Invoke(nameof(StopPersonalAnalytics)); }
        public void SteamServerJoinStatusDelegate__DelegateSignature(ESteamServerJoinStatus Status) { Invoke(nameof(SteamServerJoinStatusDelegate__DelegateSignature), Status); }
        public void SteamSearchRegionDelegate__DelegateSignature(ESteamSearchRegion Region) { Invoke(nameof(SteamSearchRegionDelegate__DelegateSignature), Region); }
        public void StartPhotographyInputProcessor() { Invoke(nameof(StartPhotographyInputProcessor)); }
        public void StartPersonalAnalytics() { Invoke(nameof(StartPersonalAnalytics)); }
        public ProceduralSetup SpawnProcedural() { return Invoke<ProceduralSetup>(nameof(SpawnProcedural)); }
        public void SetViewer3DClass(Object NewClass, ECharselectionCameraLocation Location) { Invoke(nameof(SetViewer3DClass), NewClass, Location); }
        public void SetSteamServerJoinStatus(ESteamServerJoinStatus NewStatus) { Invoke(nameof(SetSteamServerJoinStatus), NewStatus); }
        public void SetSteamSearchRegion(ESteamSearchRegion NewRegion) { Invoke(nameof(SetSteamSearchRegion), NewRegion); }
        public void SetShouldAdvertiseInServerlist(bool bShouldAdvertise) { Invoke(nameof(SetShouldAdvertiseInServerlist), bShouldAdvertise); }
        public void SetServerSearchOptions(FSDServerSearchOptions options) { Invoke(nameof(SetServerSearchOptions), options); }
        public void SetServerSearchActive(bool Active) { Invoke(nameof(SetServerSearchActive), Active); }
        public void SetSelectedMission(GeneratedMission mission, bool updateSessionSettings) { Invoke(nameof(SetSelectedMission), mission, updateSessionSettings); }
        public void SetProceduralMap(Object procedural) { Invoke(nameof(SetProceduralMap), procedural); }
        public void SetPendingInviteJoinModding(BlueprintSessionResult Result) { Invoke(nameof(SetPendingInviteJoinModding), Result); }
        public void SetOverrideMaxPlayerCount(int Count) { Invoke(nameof(SetOverrideMaxPlayerCount), Count); }
        public void SetMinersManualNotification(EMinersManualSection Section, Object IdentifyingObject, Object Text) { Invoke(nameof(SetMinersManualNotification), Section, IdentifyingObject, Text); }
        public void SetLoaderWorldVisible(bool V, bool resetHud) { Invoke(nameof(SetLoaderWorldVisible), V, resetHud); }
        public void SetIsUsingOnlineFeatures(bool bIsOnlineFeatureUsed) { Invoke(nameof(SetIsUsingOnlineFeatures), bIsOnlineFeatureUsed); }
        public void SetHasSeenInfoScreen() { Invoke(nameof(SetHasSeenInfoScreen)); }
        public void SetGlobalMissionSeed(int Seed) { Invoke(nameof(SetGlobalMissionSeed), Seed); }
        public void SetFSDPassword(Object pw) { Invoke(nameof(SetFSDPassword), pw); }
        public void SetEligableForRetirementAssignment(bool eligable) { Invoke(nameof(SetEligableForRetirementAssignment), eligable); }
        public void SetDebugSeed(int Seed) { Invoke(nameof(SetDebugSeed), Seed); }
        public void SetCharacterSelectionWorldVisible(bool V, ECharselectionCameraLocation cameraLocation, bool resetHud, ECharacterSelectorItemStatus itemStatus) { Invoke(nameof(SetCharacterSelectionWorldVisible), V, cameraLocation, resetHud, itemStatus); }
        public void SetCharacterSelectionSwitcher(CharacterSelectionSwitcher switcher) { Invoke(nameof(SetCharacterSelectionSwitcher), switcher); }
        public void SendSteamInfo() { Invoke(nameof(SendSteamInfo)); }
        public void ScheduleResetOfWorldsAndGameDataThenOpenLevel(Object LevelName) { Invoke(nameof(ScheduleResetOfWorldsAndGameDataThenOpenLevel), LevelName); }
        public void RestoreCursors() { Invoke(nameof(RestoreCursors)); }
        public void ResetViewer3DClass() { Invoke(nameof(ResetViewer3DClass)); }
        public void ResetSaveGame() { Invoke(nameof(ResetSaveGame)); }
        public void ResetAlwaysLoadedWorldsAndGameData() { Invoke(nameof(ResetAlwaysLoadedWorldsAndGameData)); }
        public void RemoveBosco() { Invoke(nameof(RemoveBosco)); }
        public void RemoveAllTemporaryBuff(PlayerController PlayerController) { Invoke(nameof(RemoveAllTemporaryBuff), PlayerController); }
        public void RefreshIsGameModded() { Invoke(nameof(RefreshIsGameModded)); }
        public void PreClientTravelCleanup(PlayerController PlayerController) { Invoke(nameof(PreClientTravelCleanup), PlayerController); }
        public void PostInit(bool reload) { Invoke(nameof(PostInit), reload); }
        public void PairingUsePreviousProfile() { Invoke(nameof(PairingUsePreviousProfile)); }
        public void PairingUseNewProfile() { Invoke(nameof(PairingUseNewProfile)); }
        public void OnStartSearchForFriendsComplete__DelegateSignature(bool bWasSuccessful, Object ErrorStr) { Invoke(nameof(OnStartSearchForFriendsComplete__DelegateSignature), bWasSuccessful, ErrorStr); }
        public void OnNewFSDSessionID(Object sessionId) { Invoke(nameof(OnNewFSDSessionID), sessionId); }
        public void OnNetworkFailure(World World, NetDriver NetDriver, byte failType, Object errorMessage) { Invoke(nameof(OnNetworkFailure), World, NetDriver, failType, errorMessage); }
        public void OnLoadComplete(Object MapName) { Invoke(nameof(OnLoadComplete), MapName); }
        public void NewHUDWarningDelegate__DelegateSignature(HUDWarningWidget newWidget) { Invoke(nameof(NewHUDWarningDelegate__DelegateSignature), newWidget); }
        public void LoadSaveGame(FSDSaveGame toLoad) { Invoke(nameof(LoadSaveGame), toLoad); }
        public bool IsPendingInvitePasswordProtected() { return Invoke<bool>(nameof(IsPendingInvitePasswordProtected)); }
        public bool IsPendingInviteModded() { return Invoke<bool>(nameof(IsPendingInviteModded)); }
        public bool IsMutatorActive(Object mutatorClass) { return Invoke<bool>(nameof(IsMutatorActive), mutatorClass); }
        public bool IsGameModded() { return Invoke<bool>(nameof(IsGameModded)); }
        public bool IsFreeBeerRewardActive() { return Invoke<bool>(nameof(IsFreeBeerRewardActive)); }
        public bool IsCharacterSelectionWorldVisible() { return Invoke<bool>(nameof(IsCharacterSelectionWorldVisible)); }
        public bool IsCampaignMission() { return Invoke<bool>(nameof(IsCampaignMission)); }
        public bool HasTooManyModsEnabled() { return Invoke<bool>(nameof(HasTooManyModsEnabled)); }
        public bool HasSignedIn() { return Invoke<bool>(nameof(HasSignedIn)); }
        public bool HasRandomBeerBuff() { return Invoke<bool>(nameof(HasRandomBeerBuff)); }
        public bool HasPendingInvite() { return Invoke<bool>(nameof(HasPendingInvite)); }
        public bool HasPendingActivity() { return Invoke<bool>(nameof(HasPendingActivity)); }
        public bool HasAnalytics() { return Invoke<bool>(nameof(HasAnalytics)); }
        public void GraphicsUserSettingsChanged() { Invoke(nameof(GraphicsUserSettingsChanged)); }
        public void GiveTemporaryBuff(TemporaryBuff buff, PlayerCharacter Player) { Invoke(nameof(GiveTemporaryBuff), buff, Player); }
        public Vector2D GetViewportSize() { return Invoke<Vector2D>(nameof(GetViewportSize)); }
        public Object GetSoftReferenceToPLS() { return Invoke<Object>(nameof(GetSoftReferenceToPLS)); }
        public UArray<BlueprintSessionResult> GetServersFriendsArePlaying(UArray<BlueprintSessionResult> servers) { return Invoke<UArray<BlueprintSessionResult>>(nameof(GetServersFriendsArePlaying), servers); }
        public int GetOverrideMaxPlayerCount() { return Invoke<int>(nameof(GetOverrideMaxPlayerCount)); }
        public UArray<Mutator> GetMutators(Object mutatorClass) { return Invoke<UArray<Mutator>>(nameof(GetMutators), mutatorClass); }
        public int GetMaxPublicConnections() { return Invoke<int>(nameof(GetMaxPublicConnections)); }
        public int GetMaxAllowedMods() { return Invoke<int>(nameof(GetMaxAllowedMods)); }
        public FSDPlayerController GetLocalFSDPlayerController() { return Invoke<FSDPlayerController>(nameof(GetLocalFSDPlayerController)); }
        public IconGenerationManager GetIconGenerationManager() { return Invoke<IconGenerationManager>(nameof(GetIconGenerationManager)); }
        public bool GetHasSeenInfoScreen() { return Invoke<bool>(nameof(GetHasSeenInfoScreen)); }
        public GlobalMissionSeed GetGlobalMissionSeedNew() { return Invoke<GlobalMissionSeed>(nameof(GetGlobalMissionSeedNew)); }
        public GeneratedMission GetGeneratedMission() { return Invoke<GeneratedMission>(nameof(GetGeneratedMission)); }
        public Mutator GetFirstMutator(Object mutatorClass) { return Invoke<Mutator>(nameof(GetFirstMutator), mutatorClass); }
        public Object GetDisconnectErrorCode() { return Invoke<Object>(nameof(GetDisconnectErrorCode)); }
        public UArray<NetworkConnectionInfo> GetConnectionInfo() { return Invoke<UArray<NetworkConnectionInfo>>(nameof(GetConnectionInfo)); }
        public PlayerCharacter GetCharacterSelectorCharacter() { return Invoke<PlayerCharacter>(nameof(GetCharacterSelectorCharacter)); }
        public void GameUserSettingsChanged() { Invoke(nameof(GameUserSettingsChanged)); }
        public void DonkeyCharacterDelegate__DelegateSignature(Molly InDonkey) { Invoke(nameof(DonkeyCharacterDelegate__DelegateSignature), InDonkey); }
        public void CloseSessionLobby() { Invoke(nameof(CloseSessionLobby)); }
        public void ClearDisconnectError() { Invoke(nameof(ClearDisconnectError)); }
        public void ChangeSkinPreview(ItemSkin PreviewSkin) { Invoke(nameof(ChangeSkinPreview), PreviewSkin); }
        public void CancelJoin() { Invoke(nameof(CancelJoin)); }
        public void CachePSOsOnCommand() { Invoke(nameof(CachePSOsOnCommand)); }
        public void ApplyGameUserSettings(FSDGameUserSettings Settings) { Invoke(nameof(ApplyGameUserSettings), Settings); }
        public HUDWarningWidget AddWarningToHUD(Object WidgetClass, Texture2D Texture, SoundBase PingSound) { return Invoke<HUDWarningWidget>(nameof(AddWarningToHUD), WidgetClass, Texture, PingSound); }
        public void AddToFriendSessions(Object friendSessionId, Object friendName) { Invoke(nameof(AddToFriendSessions), friendSessionId, friendName); }
        public void AddStatValue(Object Key, float Value) { Invoke(nameof(AddStatValue), Key, Value); }
        public void AddStatCount(Object Key, int Count) { Invoke(nameof(AddStatCount), Key, Count); }
    }
    public class FSDGameMode : GameMode
    {
        public FSDGameMode(nint addr) : base(addr) { }
        public Object OnMatchStarted { get { return this[nameof(OnMatchStarted)]; } set { this[nameof(OnMatchStarted)] = value; } }
        public Object OnAllControllersReady { get { return this[nameof(OnAllControllersReady)]; } set { this[nameof(OnAllControllersReady)] = value; } }
        public Object OnPlayerLoggedIn { get { return this[nameof(OnPlayerLoggedIn)]; } set { this[nameof(OnPlayerLoggedIn)] = value; } }
        public Object OnDonkeyCalled { get { return this[nameof(OnDonkeyCalled)]; } set { this[nameof(OnDonkeyCalled)] = value; } }
        public Object OnDonkeyButtonPressed { get { return this[nameof(OnDonkeyButtonPressed)]; } set { this[nameof(OnDonkeyButtonPressed)] = value; } }
        public bool GenerationStarted { get { return this[nameof(GenerationStarted)].Flag; } set { this[nameof(GenerationStarted)].Flag = value; } }
        public PheromoneSpawnerComponent PheromoneComponent { get { return this[nameof(PheromoneComponent)].As<PheromoneSpawnerComponent>(); } set { this["PheromoneComponent"] = value; } }
        public EnemySpawnManager EnemySpawnManager { get { return this[nameof(EnemySpawnManager)].As<EnemySpawnManager>(); } set { this["EnemySpawnManager"] = value; } }
        public ObjectivesManager ObjectivesManager { get { return this[nameof(ObjectivesManager)].As<ObjectivesManager>(); } set { this["ObjectivesManager"] = value; } }
        public KeepInsideWorld KeepInsideWorld { get { return this[nameof(KeepInsideWorld)].As<KeepInsideWorld>(); } set { this["KeepInsideWorld"] = value; } }
        public MissionManager MissionManager { get { return this[nameof(MissionManager)].As<MissionManager>(); } set { this["MissionManager"] = value; } }
        public EncounterManager EncounterManagerComponent { get { return this[nameof(EncounterManagerComponent)].As<EncounterManager>(); } set { this["EncounterManagerComponent"] = value; } }
        public CritterManager CritterManager { get { return this[nameof(CritterManager)].As<CritterManager>(); } set { this["CritterManager"] = value; } }
        public UArray<FSDPlayerController> PlayerControllers { get { return new UArray<FSDPlayerController>(this[nameof(PlayerControllers)].Address); } }
        public FormationsManagerComponent FormationsManager { get { return this[nameof(FormationsManager)].As<FormationsManagerComponent>(); } set { this["FormationsManager"] = value; } }
        public Object DropPodClass { get { return this[nameof(DropPodClass)]; } set { this[nameof(DropPodClass)] = value; } }
        public Object MuleClass { get { return this[nameof(MuleClass)]; } set { this[nameof(MuleClass)] = value; } }
        public Object DropodEscapeClass { get { return this[nameof(DropodEscapeClass)]; } set { this[nameof(DropodEscapeClass)] = value; } }
        public Object droneClass { get { return this[nameof(droneClass)]; } set { this[nameof(droneClass)] = value; } }
        public Object CheatUI { get { return this[nameof(CheatUI)]; } set { this[nameof(CheatUI)] = value; } }
        public float ContinueCountdown { get { return this[nameof(ContinueCountdown)].GetValue<float>(); } set { this[nameof(ContinueCountdown)].SetValue<float>(value); } }
        public bool PreventAllLatejoin { get { return this[nameof(PreventAllLatejoin)].Flag; } set { this[nameof(PreventAllLatejoin)].Flag = value; } }
        public bool AllowRejoin { get { return this[nameof(AllowRejoin)].Flag; } set { this[nameof(AllowRejoin)].Flag = value; } }
        public bool PreventLateJoinOnMissionStart { get { return this[nameof(PreventLateJoinOnMissionStart)].Flag; } set { this[nameof(PreventLateJoinOnMissionStart)].Flag = value; } }
        public float PlayerSpawnHeightOffset { get { return this[nameof(PlayerSpawnHeightOffset)].GetValue<float>(); } set { this[nameof(PlayerSpawnHeightOffset)].SetValue<float>(value); } }
        public float FriendlyFireGracePeriod { get { return this[nameof(FriendlyFireGracePeriod)].GetValue<float>(); } set { this[nameof(FriendlyFireGracePeriod)].SetValue<float>(value); } }
        public UArray<EnemyDescriptor> ForcedEnemyPool { get { return new UArray<EnemyDescriptor>(this[nameof(ForcedEnemyPool)].Address); } }
        public bool UseNormalEncounters { get { return this[nameof(UseNormalEncounters)].Flag; } set { this[nameof(UseNormalEncounters)].Flag = value; } }
        public bool UseStationaryEncounter { get { return this[nameof(UseStationaryEncounter)].Flag; } set { this[nameof(UseStationaryEncounter)].Flag = value; } }
        public bool AllowSpecialEncounters { get { return this[nameof(AllowSpecialEncounters)].Flag; } set { this[nameof(AllowSpecialEncounters)].Flag = value; } }
        public EnemyWaveManager CachedWaveManager { get { return this[nameof(CachedWaveManager)].As<EnemyWaveManager>(); } set { this["CachedWaveManager"] = value; } }
        public void StartGame() { Invoke(nameof(StartGame)); }
        public void SpawnMissionCriticalItems(ECriticalItemPass pass) { Invoke(nameof(SpawnMissionCriticalItems), pass); }
        public void SignalEndLevelToClients() { Invoke(nameof(SignalEndLevelToClients)); }
        public void SignalDonkeyPressed() { Invoke(nameof(SignalDonkeyPressed)); }
        public void ResetDeaths() { Invoke(nameof(ResetDeaths)); }
        public void RecieveEndLevel() { Invoke(nameof(RecieveEndLevel)); }
        public void RecieveAllDwarvesDown() { Invoke(nameof(RecieveAllDwarvesDown)); }
        public void Recieve_ContinueTimerEnded() { Invoke(nameof(Recieve_ContinueTimerEnded)); }
        public void ReceivePostSeamlessTravel() { Invoke(nameof(ReceivePostSeamlessTravel)); }
        public void OnObjectivesInitialized() { Invoke(nameof(OnObjectivesInitialized)); }
        public void OnLevelGenerationComplete(int pass) { Invoke(nameof(OnLevelGenerationComplete), pass); }
        public void OnControllerDestroyed(Actor Controller) { Invoke(nameof(OnControllerDestroyed), Controller); }
        public void LoadSpaceRig() { Invoke(nameof(LoadSpaceRig)); }
        public void LoadMission(Object MapName, Object optionalGameMode) { Invoke(nameof(LoadMission), MapName, optionalGameMode); }
        public void HostAbortMission() { Invoke(nameof(HostAbortMission)); }
        public void HandlePlayerBanning(FSDPlayerController FSDPlayerController) { Invoke(nameof(HandlePlayerBanning), FSDPlayerController); }
        public EnemyWaveManager GetWaveManager() { return Invoke<EnemyWaveManager>(nameof(GetWaveManager)); }
        public Actor GetPlayerStart(FSDPlayerController Controller) { return Invoke<Actor>(nameof(GetPlayerStart), Controller); }
        public Object GetMuleClass() { return Invoke<Object>(nameof(GetMuleClass)); }
        public bool GetMissionWasAborted() { return Invoke<bool>(nameof(GetMissionWasAborted)); }
        public EncounterManager GetEncounterManager() { return Invoke<EncounterManager>(nameof(GetEncounterManager)); }
        public SoftObjectPath GetDropPodPath() { return Invoke<SoftObjectPath>(nameof(GetDropPodPath)); }
        public SoftObjectPath GetDropPodEscapePath() { return Invoke<SoftObjectPath>(nameof(GetDropPodEscapePath)); }
        public Object GetDropPodEscapeClass() { return Invoke<Object>(nameof(GetDropPodEscapeClass)); }
        public Object GetDropPodClass() { return Invoke<Object>(nameof(GetDropPodClass)); }
        public SoftObjectPath GetDronePath() { return Invoke<SoftObjectPath>(nameof(GetDronePath)); }
        public Object GetDroneClass() { return Invoke<Object>(nameof(GetDroneClass)); }
        public DifficultyManager GetDifficultyManager() { return Invoke<DifficultyManager>(nameof(GetDifficultyManager)); }
        public int GetCurrentLevel() { return Invoke<int>(nameof(GetCurrentLevel)); }
        public bool FSDSetPause(PlayerController PC, EPauseReason pauseReason) { return Invoke<bool>(nameof(FSDSetPause), PC, pauseReason); }
        public bool FSDKickPlayer(PlayerController KickedPlayer, Object KickReason) { return Invoke<bool>(nameof(FSDKickPlayer), KickedPlayer, KickReason); }
        public bool FSDClearPause(EPauseReason pauseReason) { return Invoke<bool>(nameof(FSDClearPause), pauseReason); }
        public void EndLevel() { Invoke(nameof(EndLevel)); }
        public void DonkeyButtonPressed() { Invoke(nameof(DonkeyButtonPressed)); }
        public void DestroyNonLocalPlayers() { Invoke(nameof(DestroyNonLocalPlayers)); }
        public void Debug_ShowPlayerSpheres() { Invoke(nameof(Debug_ShowPlayerSpheres)); }
        public bool AllPlayersHaveSelectedCharacter() { return Invoke<bool>(nameof(AllPlayersHaveSelectedCharacter)); }
        public bool AllPlayersHaveGeneratedLevel() { return Invoke<bool>(nameof(AllPlayersHaveGeneratedLevel)); }
        public void AddControllerForGracePeriod(PlayerCharacter APlayerCharacter) { Invoke(nameof(AddControllerForGracePeriod), APlayerCharacter); }
        public void AboutMission() { Invoke(nameof(AboutMission)); }
    }
    public class FSDGameModeSpaceRig : FSDGameMode
    {
        public FSDGameModeSpaceRig(nint addr) : base(addr) { }
        public byte AmountOfPlayersSpawnedInMedbay { get { return this[nameof(AmountOfPlayersSpawnedInMedbay)].GetValue<byte>(); } set { this[nameof(AmountOfPlayersSpawnedInMedbay)].SetValue<byte>(value); } }
        public bool StartedSession { get { return this[nameof(StartedSession)].Flag; } set { this[nameof(StartedSession)].Flag = value; } }
        public Actor GetFreeSpawnOfType(ESpacerigStartType aType, FSDPlayerController AController) { return Invoke<Actor>(nameof(GetFreeSpawnOfType), aType, AController); }
    }
    public class FSDGameplayStatics : BlueprintFunctionLibrary
    {
        public FSDGameplayStatics(nint addr) : base(addr) { }
        public FXSystemComponent SpawnScaledEmitterAtLocation(Object WorldContextObject, ScaledEffect ScaledEffect, Vector Location, Rotator Rotation, bool bAutoDestroy) { return Invoke<FXSystemComponent>(nameof(SpawnScaledEmitterAtLocation), WorldContextObject, ScaledEffect, Location, Rotation, bAutoDestroy); }
        public DecalComponent SpawnDecalData(Object WorldContextObject, Vector Location, Vector UpVector, DecalData DecalData, bool randomRollRotation) { return Invoke<DecalComponent>(nameof(SpawnDecalData), WorldContextObject, Location, UpVector, DecalData, randomRollRotation); }
        public DecalComponent SpawnDecalAtActor(Actor Actor, MaterialInterface DecalMaterial, float Size, float Duration, float FadeDuration) { return Invoke<DecalComponent>(nameof(SpawnDecalAtActor), Actor, DecalMaterial, Size, Duration, FadeDuration); }
        public DecalComponent SpawnDecal(Object WorldContextObject, MaterialInterface DecalMaterial, Vector Location, Vector UpVector, float Size, float Duration, float FadeDuration) { return Invoke<DecalComponent>(nameof(SpawnDecal), WorldContextObject, DecalMaterial, Location, UpVector, Size, Duration, FadeDuration); }
        public void SetControllerVibrationSubmixSend(Object WorldContextObject, AudioComponent AudioComponent, float SendLevel) { Invoke(nameof(SetControllerVibrationSubmixSend), WorldContextObject, AudioComponent, SendLevel); }
        public void SetControllerSpeakerSubmixSend(Object WorldContextObject, AudioComponent AudioComponent, float SendLevel) { Invoke(nameof(SetControllerSpeakerSubmixSend), WorldContextObject, AudioComponent, SendLevel); }
    }
    public class FSDTagSettings : DataAsset
    {
        public FSDTagSettings(nint addr) : base(addr) { }
        public GameplayTagQuery IsFriendlyQuery { get { return this[nameof(IsFriendlyQuery)].As<GameplayTagQuery>(); } set { this["IsFriendlyQuery"] = value; } }
        public GameplayTagQuery IsNeutralQuery { get { return this[nameof(IsNeutralQuery)].As<GameplayTagQuery>(); } set { this["IsNeutralQuery"] = value; } }
        public GameplayTagQuery IsHostileQuery { get { return this[nameof(IsHostileQuery)].As<GameplayTagQuery>(); } set { this["IsHostileQuery"] = value; } }
        public FSDTagsRoot Root { get { return this[nameof(Root)].As<FSDTagsRoot>(); } set { this["Root"] = value; } }
    }
    public class FSDGameSession : GameSession
    {
        public FSDGameSession(nint addr) : base(addr) { }
        public UArray<UniqueNetIdRepl> KickedPlayers { get { return new UArray<UniqueNetIdRepl>(this[nameof(KickedPlayers)].Address); } }
        public UArray<UniqueNetIdRepl> BannedPlayers { get { return new UArray<UniqueNetIdRepl>(this[nameof(BannedPlayers)].Address); } }
    }
    public class FSDGameState : GameState
    {
        public FSDGameState(nint addr) : base(addr) { }
        public Object OnMissionTimeUpdated { get { return this[nameof(OnMissionTimeUpdated)]; } set { this[nameof(OnMissionTimeUpdated)] = value; } }
        public Object OnTerrainGenerated { get { return this[nameof(OnTerrainGenerated)]; } set { this[nameof(OnTerrainGenerated)] = value; } }
        public Object OnTerrainGenerationStarting { get { return this[nameof(OnTerrainGenerationStarting)]; } set { this[nameof(OnTerrainGenerationStarting)] = value; } }
        public Object OnMatchStarted { get { return this[nameof(OnMatchStarted)]; } set { this[nameof(OnMatchStarted)] = value; } }
        public Object OnMatchEnded { get { return this[nameof(OnMatchEnded)]; } set { this[nameof(OnMatchEnded)] = value; } }
        public Object OnGameEventCompletedEvent { get { return this[nameof(OnGameEventCompletedEvent)]; } set { this[nameof(OnGameEventCompletedEvent)] = value; } }
        public Object OnPlayerJoined { get { return this[nameof(OnPlayerJoined)]; } set { this[nameof(OnPlayerJoined)] = value; } }
        public Object OnPlayerLeave { get { return this[nameof(OnPlayerLeave)]; } set { this[nameof(OnPlayerLeave)] = value; } }
        public Object OnContinueActive { get { return this[nameof(OnContinueActive)]; } set { this[nameof(OnContinueActive)] = value; } }
        public Object OnContinueCountdownChanged { get { return this[nameof(OnContinueCountdownChanged)]; } set { this[nameof(OnContinueCountdownChanged)] = value; } }
        public Object OnAllDwarvesDown { get { return this[nameof(OnAllDwarvesDown)]; } set { this[nameof(OnAllDwarvesDown)] = value; } }
        public Object OnTeamMemberCampaignMissionChanged { get { return this[nameof(OnTeamMemberCampaignMissionChanged)]; } set { this[nameof(OnTeamMemberCampaignMissionChanged)] = value; } }
        public Object OnEnemyKilledEvent { get { return this[nameof(OnEnemyKilledEvent)]; } set { this[nameof(OnEnemyKilledEvent)] = value; } }
        public Object OnPlayerCharacterRegistered { get { return this[nameof(OnPlayerCharacterRegistered)]; } set { this[nameof(OnPlayerCharacterRegistered)] = value; } }
        public int CurrentLevel { get { return this[nameof(CurrentLevel)].GetValue<int>(); } set { this[nameof(CurrentLevel)].SetValue<int>(value); } }
        public TeamTransport EscapePod { get { return this[nameof(EscapePod)].As<TeamTransport>(); } set { this["EscapePod"] = value; } }
        public Object FSDSessionID { get { return this[nameof(FSDSessionID)]; } set { this[nameof(FSDSessionID)] = value; } }
        public Object OnBoscoReviveCounterChanged { get { return this[nameof(OnBoscoReviveCounterChanged)]; } set { this[nameof(OnBoscoReviveCounterChanged)] = value; } }
        public bool bTeamDown { get { return this[nameof(bTeamDown)].Flag; } set { this[nameof(bTeamDown)].Flag = value; } }
        public Object OnTeamDown { get { return this[nameof(OnTeamDown)]; } set { this[nameof(OnTeamDown)] = value; } }
        public Object OnObjectivesCompleted { get { return this[nameof(OnObjectivesCompleted)]; } set { this[nameof(OnObjectivesCompleted)] = value; } }
        public Object OnObjectiveAdded { get { return this[nameof(OnObjectiveAdded)]; } set { this[nameof(OnObjectiveAdded)] = value; } }
        public Object OnDifficultyChanged { get { return this[nameof(OnDifficultyChanged)]; } set { this[nameof(OnDifficultyChanged)] = value; } }
        public Object OnCountdownStarted { get { return this[nameof(OnCountdownStarted)]; } set { this[nameof(OnCountdownStarted)] = value; } }
        public Object OnCountdownTimeChanged { get { return this[nameof(OnCountdownTimeChanged)]; } set { this[nameof(OnCountdownTimeChanged)] = value; } }
        public Object OnCountdownFinished { get { return this[nameof(OnCountdownFinished)]; } set { this[nameof(OnCountdownFinished)] = value; } }
        public DeepCSGWorld CSGWorld { get { return this[nameof(CSGWorld)].As<DeepCSGWorld>(); } set { this["CSGWorld"] = value; } }
        public int LastSupplyPodTimeStamp { get { return this[nameof(LastSupplyPodTimeStamp)].GetValue<int>(); } set { this[nameof(LastSupplyPodTimeStamp)].SetValue<int>(value); } }
        public int LastCleaningPodTimeStamp { get { return this[nameof(LastCleaningPodTimeStamp)].GetValue<int>(); } set { this[nameof(LastCleaningPodTimeStamp)].SetValue<int>(value); } }
        public ProceduralSetup ProceduralSetup { get { return this[nameof(ProceduralSetup)].As<ProceduralSetup>(); } set { this["ProceduralSetup"] = value; } }
        public bool DelayLateJoin { get { return this[nameof(DelayLateJoin)].Flag; } set { this[nameof(DelayLateJoin)].Flag = value; } }
        public PrimitiveComponent FakeMovementBase { get { return this[nameof(FakeMovementBase)].As<PrimitiveComponent>(); } set { this["FakeMovementBase"] = value; } }
        public int PlayerSurvivalCreditBonus { get { return this[nameof(PlayerSurvivalCreditBonus)].GetValue<int>(); } set { this[nameof(PlayerSurvivalCreditBonus)].SetValue<int>(value); } }
        public float ResourceAmountPenalty { get { return this[nameof(ResourceAmountPenalty)].GetValue<float>(); } set { this[nameof(ResourceAmountPenalty)].SetValue<float>(value); } }
        public float ObjectivesCreditPenalty { get { return this[nameof(ObjectivesCreditPenalty)].GetValue<float>(); } set { this[nameof(ObjectivesCreditPenalty)].SetValue<float>(value); } }
        public float ObjectivesXPPenaltyNormal { get { return this[nameof(ObjectivesXPPenaltyNormal)].GetValue<float>(); } set { this[nameof(ObjectivesXPPenaltyNormal)].SetValue<float>(value); } }
        public float ObjectivesXPPenaltyDeepDives { get { return this[nameof(ObjectivesXPPenaltyDeepDives)].GetValue<float>(); } set { this[nameof(ObjectivesXPPenaltyDeepDives)].SetValue<float>(value); } }
        public Object TextMissionCompleted { get { return this[nameof(TextMissionCompleted)]; } set { this[nameof(TextMissionCompleted)] = value; } }
        public Object TextSecondaryObjective { get { return this[nameof(TextSecondaryObjective)]; } set { this[nameof(TextSecondaryObjective)] = value; } }
        public Object TextSurvivalBonus { get { return this[nameof(TextSurvivalBonus)]; } set { this[nameof(TextSurvivalBonus)] = value; } }
        public Object TextMined { get { return this[nameof(TextMined)]; } set { this[nameof(TextMined)] = value; } }
        public Object TextCollected { get { return this[nameof(TextCollected)]; } set { this[nameof(TextCollected)] = value; } }
        public Object TextBonus { get { return this[nameof(TextBonus)]; } set { this[nameof(TextBonus)] = value; } }
        public int BoscoReviveCounter { get { return this[nameof(BoscoReviveCounter)].GetValue<int>(); } set { this[nameof(BoscoReviveCounter)].SetValue<int>(value); } }
        public SpawnEffectsComponent SpawnEffects { get { return this[nameof(SpawnEffects)].As<SpawnEffectsComponent>(); } set { this["SpawnEffects"] = value; } }
        public DynamicMeshScaler MeshScaler { get { return this[nameof(MeshScaler)].As<DynamicMeshScaler>(); } set { this["MeshScaler"] = value; } }
        public GemProximityTracker GemProximityTracker { get { return this[nameof(GemProximityTracker)].As<GemProximityTracker>(); } set { this["GemProximityTracker"] = value; } }
        public AttackerManagerComponent AttackerManager { get { return this[nameof(AttackerManager)].As<AttackerManagerComponent>(); } set { this["AttackerManager"] = value; } }
        public DifficultyManager DifficultyManagerComponent { get { return this[nameof(DifficultyManagerComponent)].As<DifficultyManager>(); } set { this["DifficultyManagerComponent"] = value; } }
        public SoundMixManagerComponent SoundMixManager { get { return this[nameof(SoundMixManager)].As<SoundMixManagerComponent>(); } set { this["SoundMixManager"] = value; } }
        public SeasonReplicatorComponent SeasonReplicatorComponent { get { return this[nameof(SeasonReplicatorComponent)].As<SeasonReplicatorComponent>(); } set { this["SeasonReplicatorComponent"] = value; } }
        public TeamResourcesComponent TeamResources { get { return this[nameof(TeamResources)].As<TeamResourcesComponent>(); } set { this["TeamResources"] = value; } }
        public bool IsOnSpaceRig { get { return this[nameof(IsOnSpaceRig)].Flag; } set { this[nameof(IsOnSpaceRig)].Flag = value; } }
        public bool PlayerMadeItToDropPod { get { return this[nameof(PlayerMadeItToDropPod)].Flag; } set { this[nameof(PlayerMadeItToDropPod)].Flag = value; } }
        public UArray<PlayerCharacter> ActivePlayerCharacters { get { return new UArray<PlayerCharacter>(this[nameof(ActivePlayerCharacters)].Address); } }
        public ReplicatedObjectives Objectives { get { return this[nameof(Objectives)].As<ReplicatedObjectives>(); } set { this["Objectives"] = value; } }
        public Object CompletedGameEventName { get { return this[nameof(CompletedGameEventName)]; } set { this[nameof(CompletedGameEventName)] = value; } }
        public GeneratedMissionSeed GeneratedMissionSeed { get { return this[nameof(GeneratedMissionSeed)].As<GeneratedMissionSeed>(); } set { this["GeneratedMissionSeed"] = value; } }
        public bool objectivesCompleted { get { return this[nameof(objectivesCompleted)].Flag; } set { this[nameof(objectivesCompleted)].Flag = value; } }
        public GameDifficulty CurrentDifficultySetting { get { return this[nameof(CurrentDifficultySetting)].As<GameDifficulty>(); } set { this["CurrentDifficultySetting"] = value; } }
        public bool RememberDifficulty { get { return this[nameof(RememberDifficulty)].Flag; } set { this[nameof(RememberDifficulty)].Flag = value; } }
        public PlayerProximityTracker ProximityTracker { get { return this[nameof(ProximityTracker)].As<PlayerProximityTracker>(); } set { this["ProximityTracker"] = value; } }
        public ShowroomManager ShowroomManager { get { return this[nameof(ShowroomManager)].As<ShowroomManager>(); } set { this["ShowroomManager"] = value; } }
        public GameStats GameStats { get { return this[nameof(GameStats)].As<GameStats>(); } set { this["GameStats"] = value; } }
        public uint MissionTime { get { return this[nameof(MissionTime)].GetValue<uint>(); } set { this[nameof(MissionTime)].SetValue<uint>(value); } }
        public uint MissionStartTime { get { return this[nameof(MissionStartTime)].GetValue<uint>(); } set { this[nameof(MissionStartTime)].SetValue<uint>(value); } }
        public uint MissionHaz { get { return this[nameof(MissionHaz)].GetValue<uint>(); } set { this[nameof(MissionHaz)].SetValue<uint>(value); } }
        public bool PreventLatejoinCharacterDuplication { get { return this[nameof(PreventLatejoinCharacterDuplication)].Flag; } set { this[nameof(PreventLatejoinCharacterDuplication)].Flag = value; } }
        public bool StartPressed { get { return this[nameof(StartPressed)].Flag; } set { this[nameof(StartPressed)].Flag = value; } }
        public bool ContinuePressed { get { return this[nameof(ContinuePressed)].Flag; } set { this[nameof(ContinuePressed)].Flag = value; } }
        public int ContinuesCountdown { get { return this[nameof(ContinuesCountdown)].GetValue<int>(); } set { this[nameof(ContinuesCountdown)].SetValue<int>(value); } }
        public bool AllDwarvesDown { get { return this[nameof(AllDwarvesDown)].Flag; } set { this[nameof(AllDwarvesDown)].Flag = value; } }
        public bool missionAborted { get { return this[nameof(missionAborted)].Flag; } set { this[nameof(missionAborted)].Flag = value; } }
        public int CountdownRemaining { get { return this[nameof(CountdownRemaining)].GetValue<int>(); } set { this[nameof(CountdownRemaining)].SetValue<int>(value); } }
        public Object countdownText { get { return this[nameof(countdownText)]; } set { this[nameof(countdownText)] = value; } }
        public GlobalMissionSeed HostGlobalSeed { get { return this[nameof(HostGlobalSeed)].As<GlobalMissionSeed>(); } set { this["HostGlobalSeed"] = value; } }
        public bool CanCarryOverResources { get { return this[nameof(CanCarryOverResources)].Flag; } set { this[nameof(CanCarryOverResources)].Flag = value; } }
        public Object SessionLeaderChanged { get { return this[nameof(SessionLeaderChanged)]; } set { this[nameof(SessionLeaderChanged)] = value; } }
        public PlayerState CurrentPlayerSessionLeader { get { return this[nameof(CurrentPlayerSessionLeader)].As<PlayerState>(); } set { this["CurrentPlayerSessionLeader"] = value; } }
        public void WaitForInitialGenerationDone(FSDGameState GameState, LatentActionInfo LatentInfo) { Invoke(nameof(WaitForInitialGenerationDone), GameState, LatentInfo); }
        public void StartCountdown(int Duration, Object countdownName) { Invoke(nameof(StartCountdown), Duration, countdownName); }
        public void SetPreventLatejoinCharacterDuplication(bool prevent) { Invoke(nameof(SetPreventLatejoinCharacterDuplication), prevent); }
        public void SetPlayersHaveReachedDroppod(bool newHasPlayerReached) { Invoke(nameof(SetPlayersHaveReachedDroppod), newHasPlayerReached); }
        public void SetGeneratedMissionParameters(GeneratedMission mission) { Invoke(nameof(SetGeneratedMissionParameters), mission); }
        public void SetCurrentDifficulty(DifficultySetting Setting, bool updateSessionSettings) { Invoke(nameof(SetCurrentDifficulty), Setting, updateSessionSettings); }
        public void SetCompletionData(bool objectivesCompleted, int playersInPod) { Invoke(nameof(SetCompletionData), objectivesCompleted, playersInPod); }
        public void ReceiveGeneratedMissionReplicated() { Invoke(nameof(ReceiveGeneratedMissionReplicated)); }
        public void PostLocalizedGameMessage(Object Msg, UArray<Object> Arguments) { Invoke(nameof(PostLocalizedGameMessage), Msg, Arguments); }
        public void PostGameMessage(Object Msg) { Invoke(nameof(PostGameMessage), Msg); }
        public void OnRep_StartPressed(bool oldStartPressed) { Invoke(nameof(OnRep_StartPressed), oldStartPressed); }
        public void OnRep_ObjectivesCompleted() { Invoke(nameof(OnRep_ObjectivesCompleted)); }
        public void OnRep_MissionTime() { Invoke(nameof(OnRep_MissionTime)); }
        public void OnRep_GeneratedMissionSeed() { Invoke(nameof(OnRep_GeneratedMissionSeed)); }
        public void OnRep_FSDSessionID() { Invoke(nameof(OnRep_FSDSessionID)); }
        public void OnRep_CurrentDifficultySetting() { Invoke(nameof(OnRep_CurrentDifficultySetting)); }
        public void OnRep_CountdownText() { Invoke(nameof(OnRep_CountdownText)); }
        public void OnRep_CountdownRemaining(int prevTime) { Invoke(nameof(OnRep_CountdownRemaining), prevTime); }
        public void OnRep_ContinuePressed() { Invoke(nameof(OnRep_ContinuePressed)); }
        public void OnRep_ContinueCountdown() { Invoke(nameof(OnRep_ContinueCountdown)); }
        public void OnRep_CompletedGameEvent() { Invoke(nameof(OnRep_CompletedGameEvent)); }
        public void OnRep_BoscoReviveCounter() { Invoke(nameof(OnRep_BoscoReviveCounter)); }
        public void OnRep_AllDwarvesDown() { Invoke(nameof(OnRep_AllDwarvesDown)); }
        public int MissionEndscreenSeed() { return Invoke<int>(nameof(MissionEndscreenSeed)); }
        public bool IsTutorialMission() { return Invoke<bool>(nameof(IsTutorialMission)); }
        public bool IsCountingDown() { return Invoke<bool>(nameof(IsCountingDown)); }
        public void InitObjectives() { Invoke(nameof(InitObjectives)); }
        public void HostDisbandedTeam() { Invoke(nameof(HostDisbandedTeam)); }
        public bool HasObjectivesReplicated() { return Invoke<bool>(nameof(HasObjectivesReplicated)); }
        public void HandleSeamlessTravelEvent() { Invoke(nameof(HandleSeamlessTravelEvent)); }
        public FSDPlayerState GetServerPlayerState() { return Invoke<FSDPlayerState>(nameof(GetServerPlayerState)); }
        public UArray<Objective> GetSecondaryObjectives() { return Invoke<UArray<Objective>>(nameof(GetSecondaryObjectives)); }
        public ProceduralSetup GetProceduralSetup() { return Invoke<ProceduralSetup>(nameof(GetProceduralSetup)); }
        public Objective GetPrimaryObjective() { return Invoke<Objective>(nameof(GetPrimaryObjective)); }
        public bool GetPreventLatejoinCharacterDuplication() { return Invoke<bool>(nameof(GetPreventLatejoinCharacterDuplication)); }
        public bool GetPlayersHaveReachedDroppod() { return Invoke<bool>(nameof(GetPlayersHaveReachedDroppod)); }
        public UArray<PlayerCharacterID> GetPlayableCharacterIDs() { return Invoke<UArray<PlayerCharacterID>>(nameof(GetPlayableCharacterIDs)); }
        public UArray<Objective> GetObjectives() { return Invoke<UArray<Objective>>(nameof(GetObjectives)); }
        public UArray<FSDPlayerState> GetNetworkSortedPlayerArray() { return Invoke<UArray<FSDPlayerState>>(nameof(GetNetworkSortedPlayerArray)); }
        public int GetMissionTime() { return Invoke<int>(nameof(GetMissionTime)); }
        public bool GetMissionSuccessful() { return Invoke<bool>(nameof(GetMissionSuccessful)); }
        public int GetMissionStartTime() { return Invoke<int>(nameof(GetMissionStartTime)); }
        public int GetMissionRewardCreditSum() { return Invoke<int>(nameof(GetMissionRewardCreditSum)); }
        public UArray<CreditsReward> GetMissionRewardCredits() { return Invoke<UArray<CreditsReward>>(nameof(GetMissionRewardCredits)); }
        public int GetGlobalMissionSeed() { return Invoke<int>(nameof(GetGlobalMissionSeed)); }
        public GameStats GetGameStats() { return Invoke<GameStats>(nameof(GetGameStats)); }
        public Object GetEndscreenResources() { return Invoke<Object>(nameof(GetEndscreenResources)); }
        public DifficultyManager GetDifficultyManager() { return Invoke<DifficultyManager>(nameof(GetDifficultyManager)); }
        public GameDifficulty GetCurrentGameDifficulty() { return Invoke<GameDifficulty>(nameof(GetCurrentGameDifficulty)); }
        public DifficultySetting GetCurrentDifficultySetting() { return Invoke<DifficultySetting>(nameof(GetCurrentDifficultySetting)); }
        public Object GetCollectedResources() { return Invoke<Object>(nameof(GetCollectedResources)); }
        public UArray<FSDEvent> GetActiveEventsFromMission() { return Invoke<UArray<FSDEvent>>(nameof(GetActiveEventsFromMission)); }
        public Objective FindObjective(Object SubClass) { return Invoke<Objective>(nameof(FindObjective), SubClass); }
        public void ClientNewMessage(FSDChatMessage Msg) { Invoke(nameof(ClientNewMessage), Msg); }
        public void Client_StartPressed() { Invoke(nameof(Client_StartPressed)); }
        public void Client_NewLocalizedMessage(FSDLocalizedChatMessage Msg) { Invoke(nameof(Client_NewLocalizedMessage), Msg); }
        public bool AllMissionEndResultsReceived() { return Invoke<bool>(nameof(AllMissionEndResultsReceived)); }
        public void All_SpawnScaledEffectAt(ScaledEffect Effect, Vector_NetQuantize Location) { Invoke(nameof(All_SpawnScaledEffectAt), Effect, Location); }
        public void All_SpawnScaledEffectAndCueAt(ScaledEffect Effect, SoundCue Audio, Vector_NetQuantize Location) { Invoke(nameof(All_SpawnScaledEffectAndCueAt), Effect, Audio, Location); }
        public void All_ServerQuit() { Invoke(nameof(All_ServerQuit)); }
    }
    public class FSDGameUserSettings : GameUserSettings
    {
        public FSDGameUserSettings(nint addr) : base(addr) { }
        public Object OnSettingsChanged { get { return this[nameof(OnSettingsChanged)]; } set { this[nameof(OnSettingsChanged)] = value; } }
        public Object OnUseHoldToRunChanged { get { return this[nameof(OnUseHoldToRunChanged)]; } set { this[nameof(OnUseHoldToRunChanged)] = value; } }
        public Object OnFOVChanged { get { return this[nameof(OnFOVChanged)]; } set { this[nameof(OnFOVChanged)] = value; } }
        public Object OnLanguageChanged { get { return this[nameof(OnLanguageChanged)]; } set { this[nameof(OnLanguageChanged)] = value; } }
        public Object OnGameServerNameChanged { get { return this[nameof(OnGameServerNameChanged)]; } set { this[nameof(OnGameServerNameChanged)] = value; } }
        public Object OnFontSizeChanged { get { return this[nameof(OnFontSizeChanged)]; } set { this[nameof(OnFontSizeChanged)] = value; } }
        public Object OnJukeboxStreamerModeChanged { get { return this[nameof(OnJukeboxStreamerModeChanged)]; } set { this[nameof(OnJukeboxStreamerModeChanged)] = value; } }
        public bool bJukeboxStreamerMode { get { return this[nameof(bJukeboxStreamerMode)].Flag; } set { this[nameof(bJukeboxStreamerMode)].Flag = value; } }
        public bool bGraphicSettingsChanged { get { return this[nameof(bGraphicSettingsChanged)].Flag; } set { this[nameof(bGraphicSettingsChanged)].Flag = value; } }
        public Object CurrentUserSetSaveSlotName { get { return this[nameof(CurrentUserSetSaveSlotName)]; } set { this[nameof(CurrentUserSetSaveSlotName)] = value; } }
        public Object OnCanShowBloodChanged { get { return this[nameof(OnCanShowBloodChanged)]; } set { this[nameof(OnCanShowBloodChanged)] = value; } }
        public Object NamedBoolSettings { get { return this[nameof(NamedBoolSettings)]; } set { this[nameof(NamedBoolSettings)] = value; } }
        public ModdingUISettings ModdingUISettings { get { return this[nameof(ModdingUISettings)].As<ModdingUISettings>(); } set { this["ModdingUISettings"] = value; } }
        public Object OnColorVisionDeficiencySettingsChanged { get { return this[nameof(OnColorVisionDeficiencySettingsChanged)]; } set { this[nameof(OnColorVisionDeficiencySettingsChanged)] = value; } }
        public ColorVisionDeficiencySettings ColorVisionDeficiency { get { return this[nameof(ColorVisionDeficiency)].As<ColorVisionDeficiencySettings>(); } set { this["ColorVisionDeficiency"] = value; } }
        public int ServerSearchRegion { get { return this[nameof(ServerSearchRegion)].GetValue<int>(); } set { this[nameof(ServerSearchRegion)].SetValue<int>(value); } }
        public bool ServerSearchPasswordRequired { get { return this[nameof(ServerSearchPasswordRequired)].Flag; } set { this[nameof(ServerSearchPasswordRequired)].Flag = value; } }
        public Object OnModdingSettingsChanged { get { return this[nameof(OnModdingSettingsChanged)]; } set { this[nameof(OnModdingSettingsChanged)] = value; } }
        public float volumeCharacterVoice { get { return this[nameof(volumeCharacterVoice)].GetValue<float>(); } set { this[nameof(volumeCharacterVoice)].SetValue<float>(value); } }
        public float volumeMissionControl { get { return this[nameof(volumeMissionControl)].GetValue<float>(); } set { this[nameof(volumeMissionControl)].SetValue<float>(value); } }
        public float volumeMaster { get { return this[nameof(volumeMaster)].GetValue<float>(); } set { this[nameof(volumeMaster)].SetValue<float>(value); } }
        public float volumeSFX { get { return this[nameof(volumeSFX)].GetValue<float>(); } set { this[nameof(volumeSFX)].SetValue<float>(value); } }
        public float volumeMusic { get { return this[nameof(volumeMusic)].GetValue<float>(); } set { this[nameof(volumeMusic)].SetValue<float>(value); } }
        public Object CurrentAudioOutputDeviceId { get { return this[nameof(CurrentAudioOutputDeviceId)]; } set { this[nameof(CurrentAudioOutputDeviceId)] = value; } }
        public bool UseDefaultAudioOutputDevice { get { return this[nameof(UseDefaultAudioOutputDevice)].Flag; } set { this[nameof(UseDefaultAudioOutputDevice)].Flag = value; } }
        public float Sharpening { get { return this[nameof(Sharpening)].GetValue<float>(); } set { this[nameof(Sharpening)].SetValue<float>(value); } }
        public int AntiAliasingType { get { return this[nameof(AntiAliasingType)].GetValue<int>(); } set { this[nameof(AntiAliasingType)].SetValue<int>(value); } }
        public bool TemporalAAUpsamplingEnabled { get { return this[nameof(TemporalAAUpsamplingEnabled)].Flag; } set { this[nameof(TemporalAAUpsamplingEnabled)].Flag = value; } }
        public float volumeVoice { get { return this[nameof(volumeVoice)].GetValue<float>(); } set { this[nameof(volumeVoice)].SetValue<float>(value); } }
        public int UpscalingType { get { return this[nameof(UpscalingType)].GetValue<int>(); } set { this[nameof(UpscalingType)].SetValue<int>(value); } }
        public int AmdFsrMode { get { return this[nameof(AmdFsrMode)].GetValue<int>(); } set { this[nameof(AmdFsrMode)].SetValue<int>(value); } }
        public int AmdFsr2Mode { get { return this[nameof(AmdFsr2Mode)].GetValue<int>(); } set { this[nameof(AmdFsr2Mode)].SetValue<int>(value); } }
        public float AmdFsrSharpness { get { return this[nameof(AmdFsrSharpness)].GetValue<float>(); } set { this[nameof(AmdFsrSharpness)].SetValue<float>(value); } }
        public float AmdFsr2Sharpness { get { return this[nameof(AmdFsr2Sharpness)].GetValue<float>(); } set { this[nameof(AmdFsr2Sharpness)].SetValue<float>(value); } }
        public UDLSSMode NvidiaDlssMode { get { return (UDLSSMode)this[nameof(NvidiaDlssMode)].GetValue<int>(); } set { this[nameof(NvidiaDlssMode)].SetValue<int>((int)value); } }
        public float NvidiaDlssSharpness { get { return this[nameof(NvidiaDlssSharpness)].GetValue<float>(); } set { this[nameof(NvidiaDlssSharpness)].SetValue<float>(value); } }
        public float FSDResolutionScale { get { return this[nameof(FSDResolutionScale)].GetValue<float>(); } set { this[nameof(FSDResolutionScale)].SetValue<float>(value); } }
        public ENVidiaReflexMode ReflexMode { get { return (ENVidiaReflexMode)this[nameof(ReflexMode)].GetValue<int>(); } set { this[nameof(ReflexMode)].SetValue<int>((int)value); } }
        public float WeaponSpwayScale { get { return this[nameof(WeaponSpwayScale)].GetValue<float>(); } set { this[nameof(WeaponSpwayScale)].SetValue<float>(value); } }
        public int RagdollQuality { get { return this[nameof(RagdollQuality)].GetValue<int>(); } set { this[nameof(RagdollQuality)].SetValue<int>(value); } }
        public UFSDStreamlineDLSSGMode FrameGenerationMode { get { return (UFSDStreamlineDLSSGMode)this[nameof(FrameGenerationMode)].GetValue<int>(); } set { this[nameof(FrameGenerationMode)].SetValue<int>((int)value); } }
        public SoundClass soundClassCharacterVoices { get { return this[nameof(soundClassCharacterVoices)].As<SoundClass>(); } set { this["soundClassCharacterVoices"] = value; } }
        public SoundClass soundClassMissionControl { get { return this[nameof(soundClassMissionControl)].As<SoundClass>(); } set { this["soundClassMissionControl"] = value; } }
        public SoundClass soundClassMaster { get { return this[nameof(soundClassMaster)].As<SoundClass>(); } set { this["soundClassMaster"] = value; } }
        public SoundClass soundClassSFX { get { return this[nameof(soundClassSFX)].As<SoundClass>(); } set { this["soundClassSFX"] = value; } }
        public SoundClass soundClassUI { get { return this[nameof(soundClassUI)].As<SoundClass>(); } set { this["soundClassUI"] = value; } }
        public SoundClass soundClassMusic { get { return this[nameof(soundClassMusic)].As<SoundClass>(); } set { this["soundClassMusic"] = value; } }
        public SoundClass soundClassVoice { get { return this[nameof(soundClassVoice)].As<SoundClass>(); } set { this["soundClassVoice"] = value; } }
        public int ChatFontSize { get { return this[nameof(ChatFontSize)].GetValue<int>(); } set { this[nameof(ChatFontSize)].SetValue<int>(value); } }
        public bool bUseVoiceChat { get { return this[nameof(bUseVoiceChat)].Flag; } set { this[nameof(bUseVoiceChat)].Flag = value; } }
        public bool bUsePushToTalk { get { return this[nameof(bUsePushToTalk)].Flag; } set { this[nameof(bUsePushToTalk)].Flag = value; } }
        public Object LocalGameServerName { get { return this[nameof(LocalGameServerName)]; } set { this[nameof(LocalGameServerName)] = value; } }
        public Object LocalGameServerNameFiltered { get { return this[nameof(LocalGameServerNameFiltered)]; } set { this[nameof(LocalGameServerNameFiltered)] = value; } }
        public bool AppearOffline { get { return this[nameof(AppearOffline)].Flag; } set { this[nameof(AppearOffline)].Flag = value; } }
        public bool AutoRefreshServerlist { get { return this[nameof(AutoRefreshServerlist)].Flag; } set { this[nameof(AutoRefreshServerlist)].Flag = value; } }
        public float MouseXSensitivity { get { return this[nameof(MouseXSensitivity)].GetValue<float>(); } set { this[nameof(MouseXSensitivity)].SetValue<float>(value); } }
        public float MouseYSensitivity { get { return this[nameof(MouseYSensitivity)].GetValue<float>(); } set { this[nameof(MouseYSensitivity)].SetValue<float>(value); } }
        public bool UseSeperateSensetivity { get { return this[nameof(UseSeperateSensetivity)].Flag; } set { this[nameof(UseSeperateSensetivity)].Flag = value; } }
        public bool InvertMouse { get { return this[nameof(InvertMouse)].Flag; } set { this[nameof(InvertMouse)].Flag = value; } }
        public bool InvertScroolWheel { get { return this[nameof(InvertScroolWheel)].Flag; } set { this[nameof(InvertScroolWheel)].Flag = value; } }
        public bool UseHoldToRun { get { return this[nameof(UseHoldToRun)].Flag; } set { this[nameof(UseHoldToRun)].Flag = value; } }
        public bool UseToggleLaserpointer { get { return this[nameof(UseToggleLaserpointer)].Flag; } set { this[nameof(UseToggleLaserpointer)].Flag = value; } }
        public float FOV { get { return this[nameof(FOV)].GetValue<float>(); } set { this[nameof(FOV)].SetValue<float>(value); } }
        public float HeadbobbingScale { get { return this[nameof(HeadbobbingScale)].GetValue<float>(); } set { this[nameof(HeadbobbingScale)].SetValue<float>(value); } }
        public float CameraShakeScale { get { return this[nameof(CameraShakeScale)].GetValue<float>(); } set { this[nameof(CameraShakeScale)].SetValue<float>(value); } }
        public float ChatFadeTime { get { return this[nameof(ChatFadeTime)].GetValue<float>(); } set { this[nameof(ChatFadeTime)].SetValue<float>(value); } }
        public bool UseStreamerProgram { get { return this[nameof(UseStreamerProgram)].Flag; } set { this[nameof(UseStreamerProgram)].Flag = value; } }
        public bool SoundOnChatMessage { get { return this[nameof(SoundOnChatMessage)].Flag; } set { this[nameof(SoundOnChatMessage)].Flag = value; } }
        public bool PhotosensitiveMode { get { return this[nameof(PhotosensitiveMode)].Flag; } set { this[nameof(PhotosensitiveMode)].Flag = value; } }
        public bool TinnitusProtection { get { return this[nameof(TinnitusProtection)].Flag; } set { this[nameof(TinnitusProtection)].Flag = value; } }
        public float OverlayIntensityScale { get { return this[nameof(OverlayIntensityScale)].GetValue<float>(); } set { this[nameof(OverlayIntensityScale)].SetValue<float>(value); } }
        public bool ShowUIAnimations { get { return this[nameof(ShowUIAnimations)].Flag; } set { this[nameof(ShowUIAnimations)].Flag = value; } }
        public bool UseProfanityFilter { get { return this[nameof(UseProfanityFilter)].Flag; } set { this[nameof(UseProfanityFilter)].Flag = value; } }
        public float ForceFeedbackScale { get { return this[nameof(ForceFeedbackScale)].GetValue<float>(); } set { this[nameof(ForceFeedbackScale)].SetValue<float>(value); } }
        public bool InvertFlightControls { get { return this[nameof(InvertFlightControls)].Flag; } set { this[nameof(InvertFlightControls)].Flag = value; } }
        public bool EnableDx12ByDefault { get { return this[nameof(EnableDx12ByDefault)].Flag; } set { this[nameof(EnableDx12ByDefault)].Flag = value; } }
        public float HDRColorGamma { get { return this[nameof(HDRColorGamma)].GetValue<float>(); } set { this[nameof(HDRColorGamma)].SetValue<float>(value); } }
        public EConsoleGraphicsMode ConsoleGraphicsMode { get { return (EConsoleGraphicsMode)this[nameof(ConsoleGraphicsMode)].GetValue<int>(); } set { this[nameof(ConsoleGraphicsMode)].SetValue<int>((int)value); } }
        public float StaticResoultionScale { get { return this[nameof(StaticResoultionScale)].GetValue<float>(); } set { this[nameof(StaticResoultionScale)].SetValue<float>(value); } }
        public bool UseManuelGrahpicsMode { get { return this[nameof(UseManuelGrahpicsMode)].Flag; } set { this[nameof(UseManuelGrahpicsMode)].Flag = value; } }
        public HUDElements HUDElements { get { return this[nameof(HUDElements)].As<HUDElements>(); } set { this["HUDElements"] = value; } }
        public CharacterOptions CharacterOptions { get { return this[nameof(CharacterOptions)].As<CharacterOptions>(); } set { this["CharacterOptions"] = value; } }
        public float DownedTurnDirection_Controller { get { return this[nameof(DownedTurnDirection_Controller)].GetValue<float>(); } set { this[nameof(DownedTurnDirection_Controller)].SetValue<float>(value); } }
        public float DownedTurnDirection_Mouse { get { return this[nameof(DownedTurnDirection_Mouse)].GetValue<float>(); } set { this[nameof(DownedTurnDirection_Mouse)].SetValue<float>(value); } }
        public float UIDPIScale { get { return this[nameof(UIDPIScale)].GetValue<float>(); } set { this[nameof(UIDPIScale)].SetValue<float>(value); } }
        public bool EnableCustomUIScale { get { return this[nameof(EnableCustomUIScale)].Flag; } set { this[nameof(EnableCustomUIScale)].Flag = value; } }
        public Object OnInputSourceChanged { get { return this[nameof(OnInputSourceChanged)]; } set { this[nameof(OnInputSourceChanged)] = value; } }
        public bool CheckCursorOutOfBounds { get { return this[nameof(CheckCursorOutOfBounds)].Flag; } set { this[nameof(CheckCursorOutOfBounds)].Flag = value; } }
        public Object OnEnableTutorialHintsChanged { get { return this[nameof(OnEnableTutorialHintsChanged)]; } set { this[nameof(OnEnableTutorialHintsChanged)] = value; } }
        public Object OnShowFPSChanged { get { return this[nameof(OnShowFPSChanged)]; } set { this[nameof(OnShowFPSChanged)] = value; } }
        public Object OnShowNetInfoLevelChanged { get { return this[nameof(OnShowNetInfoLevelChanged)]; } set { this[nameof(OnShowNetInfoLevelChanged)] = value; } }
        public Object OnDx12Enabled { get { return this[nameof(OnDx12Enabled)]; } set { this[nameof(OnDx12Enabled)] = value; } }
        public IntPoint ResolutionToBeApplied { get { return this[nameof(ResolutionToBeApplied)].As<IntPoint>(); } set { this["ResolutionToBeApplied"] = value; } }
        public bool VSyncToBeApplied { get { return this[nameof(VSyncToBeApplied)].Flag; } set { this[nameof(VSyncToBeApplied)].Flag = value; } }
        public bool Dx12ToBeApplied { get { return this[nameof(Dx12ToBeApplied)].Flag; } set { this[nameof(Dx12ToBeApplied)].Flag = value; } }
        public byte InFullscreenModeToBeApplied { get { return this[nameof(InFullscreenModeToBeApplied)].GetValue<byte>(); } set { this[nameof(InFullscreenModeToBeApplied)].SetValue<byte>(value); } }
        public bool InFullscreenModeToBeAppliedValid { get { return this[nameof(InFullscreenModeToBeAppliedValid)].Flag; } set { this[nameof(InFullscreenModeToBeAppliedValid)].Flag = value; } }
        public bool VSyncToBeAppliedValid { get { return this[nameof(VSyncToBeAppliedValid)].Flag; } set { this[nameof(VSyncToBeAppliedValid)].Flag = value; } }
        public bool Dx12ToBeAppliedValid { get { return this[nameof(Dx12ToBeAppliedValid)].Flag; } set { this[nameof(Dx12ToBeAppliedValid)].Flag = value; } }
        public bool ResolutionToBeAppliedValid { get { return this[nameof(ResolutionToBeAppliedValid)].Flag; } set { this[nameof(ResolutionToBeAppliedValid)].Flag = value; } }
        public bool EscMenuActive { get { return this[nameof(EscMenuActive)].Flag; } set { this[nameof(EscMenuActive)].Flag = value; } }
        public bool bShowUpgradeExtraDetails { get { return this[nameof(bShowUpgradeExtraDetails)].Flag; } set { this[nameof(bShowUpgradeExtraDetails)].Flag = value; } }
        public Object OnShowUpgradeExtraDetailsChanged { get { return this[nameof(OnShowUpgradeExtraDetailsChanged)]; } set { this[nameof(OnShowUpgradeExtraDetailsChanged)] = value; } }
        public Object OnCustomKeyBindingsChanged { get { return this[nameof(OnCustomKeyBindingsChanged)]; } set { this[nameof(OnCustomKeyBindingsChanged)] = value; } }
        public int LastNiagaraShaderVerions { get { return this[nameof(LastNiagaraShaderVerions)].GetValue<int>(); } set { this[nameof(LastNiagaraShaderVerions)].SetValue<int>(value); } }
        public bool HasKeyboardBeenConnected { get { return this[nameof(HasKeyboardBeenConnected)].Flag; } set { this[nameof(HasKeyboardBeenConnected)].Flag = value; } }
        public EFSDInputSource CurrentInputSource { get { return (EFSDInputSource)this[nameof(CurrentInputSource)].GetValue<int>(); } set { this[nameof(CurrentInputSource)].SetValue<int>((int)value); } }
        public EFSDInputSource RequestedInputSource { get { return (EFSDInputSource)this[nameof(RequestedInputSource)].GetValue<int>(); } set { this[nameof(RequestedInputSource)].SetValue<int>((int)value); } }
        public UArray<CustomKeyBinding> CustomKeyBindings { get { return new UArray<CustomKeyBinding>(this[nameof(CustomKeyBindings)].Address); } }
        public UArray<CustomKeyBinding> CustomControllerBindings { get { return new UArray<CustomKeyBinding>(this[nameof(CustomControllerBindings)].Address); } }
        public bool SwapControllerThumbsticks { get { return this[nameof(SwapControllerThumbsticks)].Flag; } set { this[nameof(SwapControllerThumbsticks)].Flag = value; } }
        public bool bTutorialHintsEnabled { get { return this[nameof(bTutorialHintsEnabled)].Flag; } set { this[nameof(bTutorialHintsEnabled)].Flag = value; } }
        public bool bShowSubtitles { get { return this[nameof(bShowSubtitles)].Flag; } set { this[nameof(bShowSubtitles)].Flag = value; } }
        public bool bShowFPS { get { return this[nameof(bShowFPS)].Flag; } set { this[nameof(bShowFPS)].Flag = value; } }
        public int ShowNetInfoLevel { get { return this[nameof(ShowNetInfoLevel)].GetValue<int>(); } set { this[nameof(ShowNetInfoLevel)].SetValue<int>(value); } }
        public bool bCanShowBlood { get { return this[nameof(bCanShowBlood)].Flag; } set { this[nameof(bCanShowBlood)].Flag = value; } }
        public bool PreventLatejoinCharacterDuplication { get { return this[nameof(PreventLatejoinCharacterDuplication)].Flag; } set { this[nameof(PreventLatejoinCharacterDuplication)].Flag = value; } }
        public bool TranslatorDebugModeEnabled { get { return this[nameof(TranslatorDebugModeEnabled)].Flag; } set { this[nameof(TranslatorDebugModeEnabled)].Flag = value; } }
        public Object PreviousCulture { get { return this[nameof(PreviousCulture)]; } set { this[nameof(PreviousCulture)] = value; } }
        public ControllerSettings ControllerSettings { get { return this[nameof(ControllerSettings)].As<ControllerSettings>(); } set { this["ControllerSettings"] = value; } }
        public UArray<Guid> SelectedDifficultyLevels { get { return new UArray<Guid>(this[nameof(SelectedDifficultyLevels)].Address); } }
        public UArray<Guid> DifficultyLevelsAddedByDefault { get { return new UArray<Guid>(this[nameof(DifficultyLevelsAddedByDefault)].Address); } }
        public void UpdateVolumeSettings(SoundClass CharacterVoices, SoundClass MissionControl, SoundClass Master, SoundClass Music, SoundClass SFX, SoundClass UI, SoundClass Voice) { Invoke(nameof(UpdateVolumeSettings), CharacterVoices, MissionControl, Master, Music, SFX, UI, Voice); }
        public void UpdateForceFeedbackScaleOnController(PlayerController Controller) { Invoke(nameof(UpdateForceFeedbackScaleOnController), Controller); }
        public bool ToggleTranslatorDebugMode() { return Invoke<bool>(nameof(ToggleTranslatorDebugMode)); }
        public bool ToggleShowUpgradeExtraDetails() { return Invoke<bool>(nameof(ToggleShowUpgradeExtraDetails)); }
        public void ToggleModdingServerFilter(byte ServerFilter, bool enable) { Invoke(nameof(ToggleModdingServerFilter), ServerFilter, enable); }
        public void SetZiplineGunAutoSwitch(bool shouldAutoSwitch) { Invoke(nameof(SetZiplineGunAutoSwitch), shouldAutoSwitch); }
        public void SetWeaponSwayScale(float Scale) { Invoke(nameof(SetWeaponSwayScale), Scale); }
        public void SetVSyncEnabledToBeApplied(bool bEnable) { Invoke(nameof(SetVSyncEnabledToBeApplied), bEnable); }
        public void SetVolume(EVolumeType volumeType, float Volume) { Invoke(nameof(SetVolume), volumeType, Volume); }
        public void SetVoiceChatEnabled(bool bEnable) { Invoke(nameof(SetVoiceChatEnabled), bEnable); }
        public void SetUseToggleTerrainScanner(bool useToggleTerrainScanner) { Invoke(nameof(SetUseToggleTerrainScanner), useToggleTerrainScanner); }
        public void SetUseToggleLaserpointer(bool UseToggleLaserpointer) { Invoke(nameof(SetUseToggleLaserpointer), UseToggleLaserpointer); }
        public void SetUseStreamerProgram(bool UseStreamerProgram) { Invoke(nameof(SetUseStreamerProgram), UseStreamerProgram); }
        public void SetUseSeparateSensitivity(bool newSetting) { Invoke(nameof(SetUseSeparateSensitivity), newSetting); }
        public void SetUseProfanityFilter(bool shouldUse) { Invoke(nameof(SetUseProfanityFilter), shouldUse); }
        public void SetUseManualGraphicsMode(bool bEnabled) { Invoke(nameof(SetUseManualGraphicsMode), bEnabled); }
        public void SetUseHoldToRun(bool UseHoldToRun) { Invoke(nameof(SetUseHoldToRun), UseHoldToRun); }
        public void SetUseDefaultAudioOutputDevice(Object WorldContextObject, bool UseDefault) { Invoke(nameof(SetUseDefaultAudioOutputDevice), WorldContextObject, UseDefault); }
        public void SetUseCustomUIScale(bool UseCustomScale) { Invoke(nameof(SetUseCustomUIScale), UseCustomScale); }
        public void SetUpscalingType(int Type) { Invoke(nameof(SetUpscalingType), Type); }
        public void SetUIDPIScale(float uiscale) { Invoke(nameof(SetUIDPIScale), uiscale); }
        public void SetTutorialHintsEnabled(bool Enabled) { Invoke(nameof(SetTutorialHintsEnabled), Enabled); }
        public void SetTurn180Mode(ETurn180Mode InMode) { Invoke(nameof(SetTurn180Mode), InMode); }
        public void SetTinnitusProtection(bool enable) { Invoke(nameof(SetTinnitusProtection), enable); }
        public void SetTemporalAAUpscalingEnabled(bool bEnable) { Invoke(nameof(SetTemporalAAUpscalingEnabled), bEnable); }
        public void SetSwapControllerThumbsticks(bool InSwapThumbsticks) { Invoke(nameof(SetSwapControllerThumbsticks), InSwapThumbsticks); }
        public void SetSteamSearchRegion(ESteamSearchRegion InRegion) { Invoke(nameof(SetSteamSearchRegion), InRegion); }
        public void SetStaticResolutionScale(float percentage) { Invoke(nameof(SetStaticResolutionScale), percentage); }
        public void SetShowUIAnimations(bool shouldShow) { Invoke(nameof(SetShowUIAnimations), shouldShow); }
        public void SetShowSubtitles(bool Show) { Invoke(nameof(SetShowSubtitles), Show); }
        public void SetShowSandboxLabel(bool InShowLabel) { Invoke(nameof(SetShowSandboxLabel), InShowLabel); }
        public void SetShowNetInfoLevel(int Level) { Invoke(nameof(SetShowNetInfoLevel), Level); }
        public void SetShowFPS(bool Visible) { Invoke(nameof(SetShowFPS), Visible); }
        public void SetSharpening(float Sharpening) { Invoke(nameof(SetSharpening), Sharpening); }
        public void SetServerSearchPasswordRequired(bool InPasswordRequired) { Invoke(nameof(SetServerSearchPasswordRequired), InPasswordRequired); }
        public void SetScreenResolutionToBeApplied(IntPoint Resolution) { Invoke(nameof(SetScreenResolutionToBeApplied), Resolution); }
        public void SetReflexMode(ENVidiaReflexMode ReflexMode) { Invoke(nameof(SetReflexMode), ReflexMode); }
        public void SetRagdollQuality(int Value) { Invoke(nameof(SetRagdollQuality), Value); }
        public void SetPushToTalk(bool bEnable) { Invoke(nameof(SetPushToTalk), bEnable); }
        public void SetPreviousItemEnabledOnController(bool InEnabled) { Invoke(nameof(SetPreviousItemEnabledOnController), InEnabled); }
        public void SetPreventLatejoinCharacterDuplication(bool prevent) { Invoke(nameof(SetPreventLatejoinCharacterDuplication), prevent); }
        public void SetPlaySoundOnChatMessage(bool playSoundOnMessage) { Invoke(nameof(SetPlaySoundOnChatMessage), playSoundOnMessage); }
        public void SetPhotosensitiveMode(bool modeOn) { Invoke(nameof(SetPhotosensitiveMode), modeOn); }
        public void SetOverlayIntensityScale(float Scale) { Invoke(nameof(SetOverlayIntensityScale), Scale); }
        public void SetNvidiaDlssSharpness(float Sharpness) { Invoke(nameof(SetNvidiaDlssSharpness), Sharpness); }
        public void SetNvidiaDlssMode(UDLSSMode Mode) { Invoke(nameof(SetNvidiaDlssMode), Mode); }
        public void SetMouseYSensitivity(float newSensitivity) { Invoke(nameof(SetMouseYSensitivity), newSensitivity); }
        public void SetMouseXSensitivity(float newSensitivity) { Invoke(nameof(SetMouseXSensitivity), newSensitivity); }
        public void SetModdingSortBy(byte SortField, bool SortAscending) { Invoke(nameof(SetModdingSortBy), SortField, SortAscending); }
        public void SetLensFlaresEnabled(bool Enabled) { Invoke(nameof(SetLensFlaresEnabled), Enabled); }
        public void SetJukeboxStreamerMode(bool InStreamerMode) { Invoke(nameof(SetJukeboxStreamerMode), InStreamerMode); }
        public void SetInvertMouseWheel(bool invertMouseWheel) { Invoke(nameof(SetInvertMouseWheel), invertMouseWheel); }
        public void SetInvertMouse(bool InvertMouse) { Invoke(nameof(SetInvertMouse), InvertMouse); }
        public void SetInvertFlightControls(bool Invert) { Invoke(nameof(SetInvertFlightControls), Invert); }
        public void SetInputSource(EFSDInputSource NewSource) { Invoke(nameof(SetInputSource), NewSource); }
        public void SetHoldToFire(bool HoldToFire) { Invoke(nameof(SetHoldToFire), HoldToFire); }
        public void SetHoldToBreakImmobilization(bool holdToBreak) { Invoke(nameof(SetHoldToBreakImmobilization), holdToBreak); }
        public void SetHeadBobbingScale(float HeadbobbingScale) { Invoke(nameof(SetHeadBobbingScale), HeadbobbingScale); }
        public void SetHDRColorGamma(float Gamma) { Invoke(nameof(SetHDRColorGamma), Gamma); }
        public void SetGrapplingHookAutoSwitch(bool shouldAutoSwitch) { Invoke(nameof(SetGrapplingHookAutoSwitch), shouldAutoSwitch); }
        public void SetGamma(float gamme) { Invoke(nameof(SetGamma), gamme); }
        public void SetGameServerName(int localUserNum, Object Name) { Invoke(nameof(SetGameServerName), localUserNum, Name); }
        public void SetFullscreenModeToBeApplied(byte InFullscreenMode) { Invoke(nameof(SetFullscreenModeToBeApplied), InFullscreenMode); }
        public void SetFrameGenerationMode(UFSDStreamlineDLSSGMode NewMode) { Invoke(nameof(SetFrameGenerationMode), NewMode); }
        public void SetFOV(float FOV) { Invoke(nameof(SetFOV), FOV); }
        public void SetForceFeedbackScale(float Scale) { Invoke(nameof(SetForceFeedbackScale), Scale); }
        public void SetDx12EnabledToBeApplied(bool bEnable) { Invoke(nameof(SetDx12EnabledToBeApplied), bEnable); }
        public void SetDownCameraTurnDirection(EFSDInputSource InputSource, float InDirection) { Invoke(nameof(SetDownCameraTurnDirection), InputSource, InDirection); }
        public void SetDisableMasterEQ(bool B) { Invoke(nameof(SetDisableMasterEQ), B); }
        public void SetDifficultySelected(DifficultySetting Difficulty, bool IsSelected) { Invoke(nameof(SetDifficultySelected), Difficulty, IsSelected); }
        public void SetDebugLocalizerMode(bool bEnable) { Invoke(nameof(SetDebugLocalizerMode), bEnable); }
        public void SetCurrentUserSaveSlotName(Object WorldContextObject, Object saveSlotName, ESaveSlotChangeProcedure changeProcedure) { Invoke(nameof(SetCurrentUserSaveSlotName), WorldContextObject, saveSlotName, changeProcedure); }
        public void SetConsoleGraphicsMode(EConsoleGraphicsMode Mode) { Invoke(nameof(SetConsoleGraphicsMode), Mode); }
        public void SetColorVisionDeficiency(EColorVisionDeficiency InType, float InSeverity) { Invoke(nameof(SetColorVisionDeficiency), InType, InSeverity); }
        public void SetCheckForOutOfBoundsEnabled(bool Enabled) { Invoke(nameof(SetCheckForOutOfBoundsEnabled), Enabled); }
        public void SetChatFontSize(int inFontSize) { Invoke(nameof(SetChatFontSize), inFontSize); }
        public void SetChatFadeTime(float FadeTime) { Invoke(nameof(SetChatFadeTime), FadeTime); }
        public void SetChatEnabledOnController(bool InEnabled) { Invoke(nameof(SetChatEnabledOnController), InEnabled); }
        public void SetCanShowBlood(bool bloodAllowed) { Invoke(nameof(SetCanShowBlood), bloodAllowed); }
        public void SetCameraShakeScale(float CameraShakeScale) { Invoke(nameof(SetCameraShakeScale), CameraShakeScale); }
        public void SetBloomEnabled(bool Enabled) { Invoke(nameof(SetBloomEnabled), Enabled); }
        public void SetAutoRefreshServerlist(bool Value) { Invoke(nameof(SetAutoRefreshServerlist), Value); }
        public bool SetAudioOutputDevice(Object WorldContextObject, Object DeviceID) { return Invoke<bool>(nameof(SetAudioOutputDevice), WorldContextObject, DeviceID); }
        public bool SetAudioInputDevice(Object DeviceName) { return Invoke<bool>(nameof(SetAudioInputDevice), DeviceName); }
        public void SetAppearOffline(bool bEnable) { Invoke(nameof(SetAppearOffline), bEnable); }
        public void SetAntiAliasingType(int AntiAliasingType) { Invoke(nameof(SetAntiAliasingType), AntiAliasingType); }
        public void SetAMDFSRSharpness(float Sharpness) { Invoke(nameof(SetAMDFSRSharpness), Sharpness); }
        public void SetAMDFSRMode(int Mode) { Invoke(nameof(SetAMDFSRMode), Mode); }
        public void SetAMDFSR2Sharpness(float Sharpness) { Invoke(nameof(SetAMDFSR2Sharpness), Sharpness); }
        public void SetAMDFSR2Mode(int Mode) { Invoke(nameof(SetAMDFSR2Mode), Mode); }
        public void SetAimSensitivity(float NewValue) { Invoke(nameof(SetAimSensitivity), NewValue); }
        public void SetAimOuterAcceleration(float NewValue) { Invoke(nameof(SetAimOuterAcceleration), NewValue); }
        public void SetAimDeadZone(float NewValue) { Invoke(nameof(SetAimDeadZone), NewValue); }
        public void ResetGraphicsChanges() { Invoke(nameof(ResetGraphicsChanges)); }
        public void ResetControllerSettings() { Invoke(nameof(ResetControllerSettings)); }
        public void PostInitFSDUserSettings(Object WorldContextObject) { Invoke(nameof(PostInitFSDUserSettings), WorldContextObject); }
        public bool IsVSyncSupported() { return Invoke<bool>(nameof(IsVSyncSupported)); }
        public bool IsVoiceChatEnabled() { return Invoke<bool>(nameof(IsVoiceChatEnabled)); }
        public bool IsUpscalingTypeSupported(int Type) { return Invoke<bool>(nameof(IsUpscalingTypeSupported), Type); }
        public bool IsNvReflexAvailable() { return Invoke<bool>(nameof(IsNvReflexAvailable)); }
        public bool IsManaulGraphicsModeAvailable() { return Invoke<bool>(nameof(IsManaulGraphicsModeAvailable)); }
        public bool IsFrameGenerationSupported() { return Invoke<bool>(nameof(IsFrameGenerationSupported)); }
        public bool IsDx12Enabled() { return Invoke<bool>(nameof(IsDx12Enabled)); }
        public bool IsDebugLocalizerModeEnabled() { return Invoke<bool>(nameof(IsDebugLocalizerModeEnabled)); }
        public bool IsCurrentInputSource(EFSDInputSource InputSource) { return Invoke<bool>(nameof(IsCurrentInputSource), InputSource); }
        public void InitializeDifficultySelection(Object WorldContext, UArray<DifficultySetting> StartSelection) { Invoke(nameof(InitializeDifficultySelection), WorldContext, StartSelection); }
        public bool HasAudioOutputDeviceChanged(Object AudioDeviceChangedTo) { return Invoke<bool>(nameof(HasAudioOutputDeviceChanged), AudioDeviceChangedTo); }
        public bool GetZiplineGunAutoSwitch() { return Invoke<bool>(nameof(GetZiplineGunAutoSwitch)); }
        public float GetWeaponSwayScale() { return Invoke<float>(nameof(GetWeaponSwayScale)); }
        public bool GetVSyncEnabledToBeApplied() { return Invoke<bool>(nameof(GetVSyncEnabledToBeApplied)); }
        public float GetVolume(EVolumeType volumeType) { return Invoke<float>(nameof(GetVolume), volumeType); }
        public bool GetUseToggleTerrainScanner() { return Invoke<bool>(nameof(GetUseToggleTerrainScanner)); }
        public bool GetUseToggleLaserpointer() { return Invoke<bool>(nameof(GetUseToggleLaserpointer)); }
        public bool GetUseStreamerProgram() { return Invoke<bool>(nameof(GetUseStreamerProgram)); }
        public bool GetUseSeparateSensitivity() { return Invoke<bool>(nameof(GetUseSeparateSensitivity)); }
        public bool GetUseProfanityFilter() { return Invoke<bool>(nameof(GetUseProfanityFilter)); }
        public bool GetUseManualGraphicsMode() { return Invoke<bool>(nameof(GetUseManualGraphicsMode)); }
        public bool GetUseHoldToRun() { return Invoke<bool>(nameof(GetUseHoldToRun)); }
        public bool GetUseDefaultAudioOutputDevice() { return Invoke<bool>(nameof(GetUseDefaultAudioOutputDevice)); }
        public bool GetUseCustomUIScale() { return Invoke<bool>(nameof(GetUseCustomUIScale)); }
        public int GetUpscalingType() { return Invoke<int>(nameof(GetUpscalingType)); }
        public float GetUIDPIScale() { return Invoke<float>(nameof(GetUIDPIScale)); }
        public bool GetTutorialHintsEnabled() { return Invoke<bool>(nameof(GetTutorialHintsEnabled)); }
        public ETurn180Mode GetTurn180Mode() { return Invoke<ETurn180Mode>(nameof(GetTurn180Mode)); }
        public bool GetTinnitusProtection() { return Invoke<bool>(nameof(GetTinnitusProtection)); }
        public bool GetTemporalAAUpscalingEnabled() { return Invoke<bool>(nameof(GetTemporalAAUpscalingEnabled)); }
        public ESteamSearchRegion GetSteamSearchRegion() { return Invoke<ESteamSearchRegion>(nameof(GetSteamSearchRegion)); }
        public float GetStaticResolutionScale() { return Invoke<float>(nameof(GetStaticResolutionScale)); }
        public bool GetShowUIAnimations() { return Invoke<bool>(nameof(GetShowUIAnimations)); }
        public bool GetShowSubtitles() { return Invoke<bool>(nameof(GetShowSubtitles)); }
        public bool GetShowSandboxLabel() { return Invoke<bool>(nameof(GetShowSandboxLabel)); }
        public int GetShowNetInfoLevel() { return Invoke<int>(nameof(GetShowNetInfoLevel)); }
        public bool GetShowFPS() { return Invoke<bool>(nameof(GetShowFPS)); }
        public float GetSharpening() { return Invoke<float>(nameof(GetSharpening)); }
        public IntPoint GetScreenResolutionToBeApplied() { return Invoke<IntPoint>(nameof(GetScreenResolutionToBeApplied)); }
        public ENVidiaReflexMode GetReflexMode() { return Invoke<ENVidiaReflexMode>(nameof(GetReflexMode)); }
        public float GetRagdollQualityDurationFactor() { return Invoke<float>(nameof(GetRagdollQualityDurationFactor)); }
        public int GetRagdollQuality() { return Invoke<int>(nameof(GetRagdollQuality)); }
        public bool GetPushToTalk() { return Invoke<bool>(nameof(GetPushToTalk)); }
        public bool GetPreviousItemEnabledOnController() { return Invoke<bool>(nameof(GetPreviousItemEnabledOnController)); }
        public bool GetPreventLatejoinCharacterDuplication() { return Invoke<bool>(nameof(GetPreventLatejoinCharacterDuplication)); }
        public bool GetPlaySoundOnChatMessage() { return Invoke<bool>(nameof(GetPlaySoundOnChatMessage)); }
        public bool GetPhotosensitiveMode() { return Invoke<bool>(nameof(GetPhotosensitiveMode)); }
        public float GetOverlayIntensityScale() { return Invoke<float>(nameof(GetOverlayIntensityScale)); }
        public float GetNvidiaDlssSharpness() { return Invoke<float>(nameof(GetNvidiaDlssSharpness)); }
        public UDLSSMode GetNvidiaDlssMode() { return Invoke<UDLSSMode>(nameof(GetNvidiaDlssMode)); }
        public float GetMouseYSensitivity() { return Invoke<float>(nameof(GetMouseYSensitivity)); }
        public float GetMouseXSensitivity() { return Invoke<float>(nameof(GetMouseXSensitivity)); }
        public bool GetModdingServerFilterEnabled(byte ServerFilter) { return Invoke<bool>(nameof(GetModdingServerFilterEnabled), ServerFilter); }
        public bool GetLensFlaresEnabled() { return Invoke<bool>(nameof(GetLensFlaresEnabled)); }
        public bool GetIsDifficultySelected(DifficultySetting Difficulty) { return Invoke<bool>(nameof(GetIsDifficultySelected), Difficulty); }
        public bool GetInvertMouseWheel() { return Invoke<bool>(nameof(GetInvertMouseWheel)); }
        public bool GetInvertMouse() { return Invoke<bool>(nameof(GetInvertMouse)); }
        public bool GetInvertFlightControls() { return Invoke<bool>(nameof(GetInvertFlightControls)); }
        public EFSDInputSource GetInputSource() { return Invoke<EFSDInputSource>(nameof(GetInputSource)); }
        public bool GetHoldToFire() { return Invoke<bool>(nameof(GetHoldToFire)); }
        public bool GetHoldToBreakImmobilization() { return Invoke<bool>(nameof(GetHoldToBreakImmobilization)); }
        public float GetHeadBobbingScale() { return Invoke<float>(nameof(GetHeadBobbingScale)); }
        public float GetHDRColorGamma() { return Invoke<float>(nameof(GetHDRColorGamma)); }
        public bool GetGrapplingHookAutoSwitch() { return Invoke<bool>(nameof(GetGrapplingHookAutoSwitch)); }
        public float GetGamma() { return Invoke<float>(nameof(GetGamma)); }
        public byte GetFullscreenModeToBeApplied() { return Invoke<byte>(nameof(GetFullscreenModeToBeApplied)); }
        public FSDGameUserSettings GetFSDGameUserSettings() { return Invoke<FSDGameUserSettings>(nameof(GetFSDGameUserSettings)); }
        public UFSDStreamlineDLSSGMode GetFrameGenerationMode() { return Invoke<UFSDStreamlineDLSSGMode>(nameof(GetFrameGenerationMode)); }
        public float GetFOV() { return Invoke<float>(nameof(GetFOV)); }
        public float GetForceFeedbackScale() { return Invoke<float>(nameof(GetForceFeedbackScale)); }
        public bool GetDx12EnabledToBeApplied() { return Invoke<bool>(nameof(GetDx12EnabledToBeApplied)); }
        public float GetDownCameraTurnDirection(EFSDInputSource InputSource) { return Invoke<float>(nameof(GetDownCameraTurnDirection), InputSource); }
        public bool GetDisableMasterEQ() { return Invoke<bool>(nameof(GetDisableMasterEQ)); }
        public Object GetCurrentUserSaveSlotName() { return Invoke<Object>(nameof(GetCurrentUserSaveSlotName)); }
        public EFSDInputSource GetCurrentInputSource() { return Invoke<EFSDInputSource>(nameof(GetCurrentInputSource)); }
        public bool GetCurrentAudioOutputDevice(Object WorldContextObject, Object AudioDevice) { return Invoke<bool>(nameof(GetCurrentAudioOutputDevice), WorldContextObject, AudioDevice); }
        public Object GetCurrentAudioInputDeviceName() { return Invoke<Object>(nameof(GetCurrentAudioInputDeviceName)); }
        public float GetCurrentAudioInputDeviceAmplitude(int localUserId) { return Invoke<float>(nameof(GetCurrentAudioInputDeviceAmplitude), localUserId); }
        public EConsoleGraphicsMode GetConsoleGraphicsMode() { return Invoke<EConsoleGraphicsMode>(nameof(GetConsoleGraphicsMode)); }
        public bool GetCheckForOutOfBounds() { return Invoke<bool>(nameof(GetCheckForOutOfBounds)); }
        public int GetChatFontSize() { return Invoke<int>(nameof(GetChatFontSize)); }
        public float GetChatFadeTime() { return Invoke<float>(nameof(GetChatFadeTime)); }
        public bool GetChatEnabledOnController() { return Invoke<bool>(nameof(GetChatEnabledOnController)); }
        public float GetCameraShakeScale() { return Invoke<float>(nameof(GetCameraShakeScale)); }
        public bool GetBloomEnabled() { return Invoke<bool>(nameof(GetBloomEnabled)); }
        public bool GetAvaliableAudioOutputDevices(Object WorldContextObject, UArray<Object> AudioDevices) { return Invoke<bool>(nameof(GetAvaliableAudioOutputDevices), WorldContextObject, AudioDevices); }
        public bool GetAvaliableAudioInputDevices(UArray<Object> AudioDevices) { return Invoke<bool>(nameof(GetAvaliableAudioInputDevices), AudioDevices); }
        public bool GetAvailableScreenResolutionsForNonPrimaryMonitors(UArray<IntPoint> Resolutions) { return Invoke<bool>(nameof(GetAvailableScreenResolutionsForNonPrimaryMonitors), Resolutions); }
        public bool GetAutoRefreshServerlist() { return Invoke<bool>(nameof(GetAutoRefreshServerlist)); }
        public Object GetAudioOutputDeviceName(Object WorldContextObject, Object DeviceID) { return Invoke<Object>(nameof(GetAudioOutputDeviceName), WorldContextObject, DeviceID); }
        public bool GetAppearOffline() { return Invoke<bool>(nameof(GetAppearOffline)); }
        public int GetAntiAliasingType() { return Invoke<int>(nameof(GetAntiAliasingType)); }
        public float GetAMDFSRSharpness() { return Invoke<float>(nameof(GetAMDFSRSharpness)); }
        public int GetAMDFSRMode() { return Invoke<int>(nameof(GetAMDFSRMode)); }
        public float GetAMDFSR2Sharpness() { return Invoke<float>(nameof(GetAMDFSR2Sharpness)); }
        public int GetAMDFSR2Mode() { return Invoke<int>(nameof(GetAMDFSR2Mode)); }
        public float GetAimSensitivity() { return Invoke<float>(nameof(GetAimSensitivity)); }
        public float GetAimOuterAcceleration() { return Invoke<float>(nameof(GetAimOuterAcceleration)); }
        public float GetAimDeadZone() { return Invoke<float>(nameof(GetAimDeadZone)); }
        public Object GameServerNameFiltered() { return Invoke<Object>(nameof(GameServerNameFiltered)); }
        public Object GameServerName() { return Invoke<Object>(nameof(GameServerName)); }
        public void FSDSetResolutionScale(float NewScaleNormalized) { Invoke(nameof(FSDSetResolutionScale), NewScaleNormalized); }
        public bool FSDSetCurrentLanguage(Object WorldContextObject, Object Culture) { return Invoke<bool>(nameof(FSDSetCurrentLanguage), WorldContextObject, Culture); }
        public FSDGameUserSettings FSDGameUserSettings_value() { return Invoke<FSDGameUserSettings>(nameof(FSDGameUserSettings_value)); }
        public bool ConsoleGraphicsModeAvailable(EConsoleGraphicsMode Mode) { return Invoke<bool>(nameof(ConsoleGraphicsModeAvailable), Mode); }
        public void ClearCustomKeyBindings(bool InGamepadKeys) { Invoke(nameof(ClearCustomKeyBindings), InGamepadKeys); }
        public bool CanShowBlood() { return Invoke<bool>(nameof(CanShowBlood)); }
        public void ApplyGraphicsChanges() { Invoke(nameof(ApplyGraphicsChanges)); }
        public void ApplyConsoleGraphicsMode() { Invoke(nameof(ApplyConsoleGraphicsMode)); }
    }
    public class FSDHUD : HUD
    {
        public FSDHUD(nint addr) : base(addr) { }
        public Object SetObjectivesVisible { get { return this[nameof(SetObjectivesVisible)]; } set { this[nameof(SetObjectivesVisible)] = value; } }
        public Object OnHUDVisibilityChanged { get { return this[nameof(OnHUDVisibilityChanged)]; } set { this[nameof(OnHUDVisibilityChanged)] = value; } }
        public byte IsVisibleFlags { get { return this[nameof(IsVisibleFlags)].GetValue<byte>(); } set { this[nameof(IsVisibleFlags)].SetValue<byte>(value); } }
        public bool ToggleHUDVisibility(EHUDVisibilityReason reason) { return Invoke<bool>(nameof(ToggleHUDVisibility), reason); }
        public void ShowObjectives(bool InVisibility) { Invoke(nameof(ShowObjectives), InVisibility); }
        public void SetObjectivesVisible__DelegateSignature(bool InVisible, bool animate) { Invoke(nameof(SetObjectivesVisible__DelegateSignature), InVisible, animate); }
        public void SetHUDVisible(bool IsVisible, EHUDVisibilityReason reason) { Invoke(nameof(SetHUDVisible), IsVisible, reason); }
        public void RadarPointAdded(RadarPointComponent radarPoint) { Invoke(nameof(RadarPointAdded), radarPoint); }
        public void PlayerSpawned(PlayerCharacter Player) { Invoke(nameof(PlayerSpawned), Player); }
        public void OnVisibilityChanged() { Invoke(nameof(OnVisibilityChanged)); }
        public bool IsHUDVisibleFlagSet(EHUDVisibilityReason reason) { return Invoke<bool>(nameof(IsHUDVisibleFlagSet), reason); }
        public void HudVisibilityChanged__DelegateSignature(bool InHudVisible) { Invoke(nameof(HudVisibilityChanged__DelegateSignature), InHudVisible); }
        public void HandleSeamlessTravel() { Invoke(nameof(HandleSeamlessTravel)); }
        public FSDMainHUDWidget GetHUDWidget() { return Invoke<FSDMainHUDWidget>(nameof(GetHUDWidget)); }
        public bool GetHUDVisible() { return Invoke<bool>(nameof(GetHUDVisible)); }
        public FSDHUD GetFSDHUD(PlayerController InPlayerController) { return Invoke<FSDHUD>(nameof(GetFSDHUD), InPlayerController); }
        public void CameraDroneSpawned(PlayerCameraDrone Drone) { Invoke(nameof(CameraDroneSpawned), Drone); }
    }
    public class SpaceRigHUD : FSDHUD
    {
        public SpaceRigHUD(nint addr) : base(addr) { }
        public UArray<NotificationEntry> NotificationQueue { get { return new UArray<NotificationEntry>(this[nameof(NotificationQueue)].Address); } }
        public bool bNotificationQueueActive { get { return this[nameof(bNotificationQueueActive)].Flag; } set { this[nameof(bNotificationQueueActive)].Flag = value; } }
        public void SetNotificationQueueActive(bool Inactive) { Invoke(nameof(SetNotificationQueueActive), Inactive); }
        public void ReceiveNotificationQueueActivated() { Invoke(nameof(ReceiveNotificationQueueActivated)); }
        public void ReceiveNotificationAdded() { Invoke(nameof(ReceiveNotificationAdded)); }
        public void QueueWindowClass(Object InWindowType) { Invoke(nameof(QueueWindowClass), InWindowType); }
        public void QueueNotificationObject(Object InObject) { Invoke(nameof(QueueNotificationObject), InObject); }
        public bool IsNotificationQueueEmpty() { return Invoke<bool>(nameof(IsNotificationQueueEmpty)); }
        public Object DequeueNotificationObject() { return Invoke<Object>(nameof(DequeueNotificationObject)); }
    }
    public class FSDJoinSessionCallbackProxy : OnlineBlueprintCallProxyBase
    {
        public FSDJoinSessionCallbackProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public FSDJoinSessionCallbackProxy FSDJoinSession(Object WorldContextObject, PlayerController PlayerController, BlueprintSessionResult SearchResult, Object FSDPassword, bool fromInvite) { return Invoke<FSDJoinSessionCallbackProxy>(nameof(FSDJoinSession), WorldContextObject, PlayerController, SearchResult, FSDPassword, fromInvite); }
    }
    public class FSDKismetArrayExtensionFunctions : KismetArrayLibrary
    {
        public FSDKismetArrayExtensionFunctions(nint addr) : base(addr) { }
        public void Array_GetRandom(UArray<int> TargetArray, int Item) { Invoke(nameof(Array_GetRandom), TargetArray, Item); }
    }
    public class FSDLobbyHandler : Object
    {
        public FSDLobbyHandler(nint addr) : base(addr) { }
    }
    public class FSDLookupSessionId : OnlineBlueprintCallProxyBase
    {
        public FSDLookupSessionId(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public FSDLookupSessionId FSDLookupSessionId_value(Object WorldContextObject, Object SessionKey) { return Invoke<FSDLookupSessionId>(nameof(FSDLookupSessionId_value), WorldContextObject, SessionKey); }
    }
    public class FSDMath : BlueprintFunctionLibrary
    {
        public FSDMath(nint addr) : base(addr) { }
        public Vector SphericalToCartesian(float Radius, float azimuth, float elecation) { return Invoke<Vector>(nameof(SphericalToCartesian), Radius, azimuth, elecation); }
        public float SignedAngleBetweenVectorsZUp(Vector v1, Vector v2) { return Invoke<float>(nameof(SignedAngleBetweenVectorsZUp), v1, v2); }
        public float RoundToDecimalPlace(float Number, int decimalPlaces) { return Invoke<float>(nameof(RoundToDecimalPlace), Number, decimalPlaces); }
        public void RotateActorAroundOffset(Actor Actor, Vector localSpaceOffset, Rotator Rotator) { Invoke(nameof(RotateActorAroundOffset), Actor, localSpaceOffset, Rotator); }
        public bool PercentageCheck(float percentage) { return Invoke<bool>(nameof(PercentageCheck), percentage); }
        public void GetAzimuthAndElevation(Vector Direction, Transform coordinateSystem, float azimuth, float elevation) { Invoke(nameof(GetAzimuthAndElevation), Direction, coordinateSystem, azimuth, elevation); }
        public float CubicSegmentLength(Vector p0, Vector tangent1, Vector p1, Vector tangent2) { return Invoke<float>(nameof(CubicSegmentLength), p0, tangent1, p1, tangent2); }
        public Vector CubicInterpBlueprint(Vector p0, Vector tangent1, Vector p1, Vector tangent2, float alpha) { return Invoke<Vector>(nameof(CubicInterpBlueprint), p0, tangent1, p1, tangent2, alpha); }
        public Vector ClampVectorToCone(Vector ToConstrain, Vector ConeDirection, float ConeAngle) { return Invoke<Vector>(nameof(ClampVectorToCone), ToConstrain, ConeDirection, ConeAngle); }
        public void CartesianToSpherical(Vector Location, float outAzimuth, float outElevation, float OutRadius) { Invoke(nameof(CartesianToSpherical), Location, outAzimuth, outElevation, OutRadius); }
        public float AngleBetweenVectors(Vector v1, Vector v2) { return Invoke<float>(nameof(AngleBetweenVectors), v1, v2); }
    }
    public class FSDOnlineSessionClient : OnlineSessionClient
    {
        public FSDOnlineSessionClient(nint addr) : base(addr) { }
    }
    public class FSDOnlineSystemUtils : BlueprintFunctionLibrary
    {
        public FSDOnlineSystemUtils(nint addr) : base(addr) { }
        public void TryToResolvePrivilege(PlayerState PlayerState, EBlueprintableUserPrivileges Privilege, EBlueprintablePrivilegeResults reason) { Invoke(nameof(TryToResolvePrivilege), PlayerState, Privilege, reason); }
        public void ShowUpgradeAccountUI() { Invoke(nameof(ShowUpgradeAccountUI)); }
        public void ShowAccountPicker(FSDGameInstance gInstance, int GamePlayerID) { Invoke(nameof(ShowAccountPicker), gInstance, GamePlayerID); }
        public void OpenURLInOverlay(Object URL, Object OnOverlayClosed) { Invoke(nameof(OpenURLInOverlay), URL, OnOverlayClosed); }
        public void OpenProfileWithEvent(PlayerState Requestor, PlayerState Requestee, Object OnProfileWindowClosed) { Invoke(nameof(OpenProfileWithEvent), Requestor, Requestee, OnProfileWindowClosed); }
        public void OpenProfileByUserId(PlayerState Requestor, Object RequesteeUserID) { Invoke(nameof(OpenProfileByUserId), Requestor, RequesteeUserID); }
        public void OpenProfile(PlayerState Requestor, PlayerState Requestee) { Invoke(nameof(OpenProfile), Requestor, Requestee); }
        public Object OnlinePlayBlockReasonToString(EBlueprintablePrivilegeResults reason) { return Invoke<Object>(nameof(OnlinePlayBlockReasonToString), reason); }
        public void GetOnlinePlayBlockReasons(UArray<EBlueprintablePrivilegeResults> reasons) { Invoke(nameof(GetOnlinePlayBlockReasons), reasons); }
        public void GetIsUpdatePending(Object Delegate) { Invoke(nameof(GetIsUpdatePending), Delegate); }
        public void GetIsPrivilegeAllowed(PlayerState PlayerState, EBlueprintableUserPrivileges Privilege, Object Delegate) { Invoke(nameof(GetIsPrivilegeAllowed), PlayerState, Privilege, Delegate); }
        public Object GetInviteFeatureBlockReason(Object WorldContextObject, EInviteBlockReason reason) { return Invoke<Object>(nameof(GetInviteFeatureBlockReason), WorldContextObject, reason); }
        public EInviteBlockReason CanPlayerInvite(Object WorldContextObject) { return Invoke<EInviteBlockReason>(nameof(CanPlayerInvite), WorldContextObject); }
    }
    public class FSDPhysicalMaterial : PhysicalMaterial
    {
        public FSDPhysicalMaterial(nint addr) : base(addr) { }
        public float BreakingDecelerationScale { get { return this[nameof(BreakingDecelerationScale)].GetValue<float>(); } set { this[nameof(BreakingDecelerationScale)].SetValue<float>(value); } }
        public float BreakingFrictionScale { get { return this[nameof(BreakingFrictionScale)].GetValue<float>(); } set { this[nameof(BreakingFrictionScale)].SetValue<float>(value); } }
        public float MaxAccelerationScale { get { return this[nameof(MaxAccelerationScale)].GetValue<float>(); } set { this[nameof(MaxAccelerationScale)].SetValue<float>(value); } }
        public bool RepulsePlayer { get { return this[nameof(RepulsePlayer)].Flag; } set { this[nameof(RepulsePlayer)].Flag = value; } }
        public FloatInterval RepulsePlayerVelocity { get { return this[nameof(RepulsePlayerVelocity)].As<FloatInterval>(); } set { this["RepulsePlayerVelocity"] = value; } }
        public float RepulsePlayerRandomDegreeOffset { get { return this[nameof(RepulsePlayerRandomDegreeOffset)].GetValue<float>(); } set { this[nameof(RepulsePlayerRandomDegreeOffset)].SetValue<float>(value); } }
        public SoundCue RepulsePlayerSound { get { return this[nameof(RepulsePlayerSound)].As<SoundCue>(); } set { this["RepulsePlayerSound"] = value; } }
        public FXSystemAsset RepulsePlayerParticle { get { return this[nameof(RepulsePlayerParticle)].As<FXSystemAsset>(); } set { this["RepulsePlayerParticle"] = value; } }
        public FXSystemAsset ImpactParticles { get { return this[nameof(ImpactParticles)].As<FXSystemAsset>(); } set { this["ImpactParticles"] = value; } }
        public FXSystemAsset MeleeImpactParticles { get { return this[nameof(MeleeImpactParticles)].As<FXSystemAsset>(); } set { this["MeleeImpactParticles"] = value; } }
        public MaterialInstance ImpactMaterialOverride { get { return this[nameof(ImpactMaterialOverride)].As<MaterialInstance>(); } set { this["ImpactMaterialOverride"] = value; } }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
        public SoundCue MeleeImpactSound { get { return this[nameof(MeleeImpactSound)].As<SoundCue>(); } set { this["MeleeImpactSound"] = value; } }
        public bool UseImpactDecalOverrides { get { return this[nameof(UseImpactDecalOverrides)].Flag; } set { this[nameof(UseImpactDecalOverrides)].Flag = value; } }
        public UArray<DecalData> ImpactDecals { get { return new UArray<DecalData>(this[nameof(ImpactDecals)].Address); } }
        public SoundCue FirstPersonDamageIndicatorSound { get { return this[nameof(FirstPersonDamageIndicatorSound)].As<SoundCue>(); } set { this["FirstPersonDamageIndicatorSound"] = value; } }
        public bool IsWeakPoint { get { return this[nameof(IsWeakPoint)].Flag; } set { this[nameof(IsWeakPoint)].Flag = value; } }
        public bool AllowFrozenBonus { get { return this[nameof(AllowFrozenBonus)].Flag; } set { this[nameof(AllowFrozenBonus)].Flag = value; } }
        public bool IsSubhealthCollider { get { return this[nameof(IsSubhealthCollider)].Flag; } set { this[nameof(IsSubhealthCollider)].Flag = value; } }
        public float DamageMultiplier { get { return this[nameof(DamageMultiplier)].GetValue<float>(); } set { this[nameof(DamageMultiplier)].SetValue<float>(value); } }
        public FXSystemAsset FootStepParticle { get { return this[nameof(FootStepParticle)].As<FXSystemAsset>(); } set { this["FootStepParticle"] = value; } }
        public MaterialInstance FootstepMaterialOverride { get { return this[nameof(FootstepMaterialOverride)].As<MaterialInstance>(); } set { this["FootstepMaterialOverride"] = value; } }
        public DecalData LeftFootprintDecal { get { return this[nameof(LeftFootprintDecal)].As<DecalData>(); } set { this["LeftFootprintDecal"] = value; } }
        public DecalData RightFootprintDecal { get { return this[nameof(RightFootprintDecal)].As<DecalData>(); } set { this["RightFootprintDecal"] = value; } }
        public SoundCue FootStepSound { get { return this[nameof(FootStepSound)].As<SoundCue>(); } set { this["FootStepSound"] = value; } }
        public float ExtraFallVelocity { get { return this[nameof(ExtraFallVelocity)].GetValue<float>(); } set { this[nameof(ExtraFallVelocity)].SetValue<float>(value); } }
        public FXSystemAsset FallImpactEffect { get { return this[nameof(FallImpactEffect)].As<FXSystemAsset>(); } set { this["FallImpactEffect"] = value; } }
        public SoundCue FallImpactSound { get { return this[nameof(FallImpactSound)].As<SoundCue>(); } set { this["FallImpactSound"] = value; } }
        public bool alwaysPenetrate { get { return this[nameof(alwaysPenetrate)].Flag; } set { this[nameof(alwaysPenetrate)].Flag = value; } }
        public Object ReactiveTerrain { get { return this[nameof(ReactiveTerrain)]; } set { this[nameof(ReactiveTerrain)] = value; } }
        public FXSystemComponent SpawnImpactParticlesFromHit(Object WorldContextObject, HitResult HitResult) { return Invoke<FXSystemComponent>(nameof(SpawnImpactParticlesFromHit), WorldContextObject, HitResult); }
        public FXSystemComponent SpawnImpactParticles(Object WorldContextObject, Vector Location, Vector Normal) { return Invoke<FXSystemComponent>(nameof(SpawnImpactParticles), WorldContextObject, Location, Normal); }
        public FSDPhysicalMaterial GetPhysicalMaterialFromPrimitive(PrimitiveComponent Component) { return Invoke<FSDPhysicalMaterial>(nameof(GetPhysicalMaterialFromPrimitive), Component); }
    }
    public class OptionalBloodPhysicalMaterial : FSDPhysicalMaterial
    {
        public OptionalBloodPhysicalMaterial(nint addr) : base(addr) { }
        public ParticleSystem BloodlessImpactParticles { get { return this[nameof(BloodlessImpactParticles)].As<ParticleSystem>(); } set { this["BloodlessImpactParticles"] = value; } }
    }
    public class FSDPlayerCameraManager : PlayerCameraManager
    {
        public FSDPlayerCameraManager(nint addr) : base(addr) { }
    }
    public class FSDPlayerControllerBase : PlayerController
    {
        public FSDPlayerControllerBase(nint addr) : base(addr) { }
        public MaterialParameterCollection GlobalMaterialParameterCollection { get { return this[nameof(GlobalMaterialParameterCollection)].As<MaterialParameterCollection>(); } set { this["GlobalMaterialParameterCollection"] = value; } }
        public Object OnPlayerVoiceStatusChanged { get { return this[nameof(OnPlayerVoiceStatusChanged)]; } set { this[nameof(OnPlayerVoiceStatusChanged)] = value; } }
        public bool bStartWithBlackScreen { get { return this[nameof(bStartWithBlackScreen)].Flag; } set { this[nameof(bStartWithBlackScreen)].Flag = value; } }
        public WindowManager WindowManager { get { return this[nameof(WindowManager)].As<WindowManager>(); } set { this["WindowManager"] = value; } }
        public UArray<PlatformComponent> PlatformComponentClasses { get { return new UArray<PlatformComponent>(this[nameof(PlatformComponentClasses)].Address); } }
        public void ToggleAnalogCursor(bool Visible) { Invoke(nameof(ToggleAnalogCursor), Visible); }
        public void StopAspectRatioAxisConstraint() { Invoke(nameof(StopAspectRatioAxisConstraint)); }
        public void StartAspectRatioAxisConstraint() { Invoke(nameof(StartAspectRatioAxisConstraint)); }
        public void ShowEscapeMenu() { Invoke(nameof(ShowEscapeMenu)); }
        public void SetHUDVisible(bool IsVisible, EHUDVisibilityReason reason) { Invoke(nameof(SetHUDVisible), IsVisible, reason); }
        public void Server_Cheat_SwitchCharacter(PlayerCharacterID NewCharacter) { Invoke(nameof(Server_Cheat_SwitchCharacter), NewCharacter); }
        public void RecievePreClientTravel() { Invoke(nameof(RecievePreClientTravel)); }
        public void RecieveHUDVisibilityChanged(bool IsVisible) { Invoke(nameof(RecieveHUDVisibilityChanged), IsVisible); }
        public void OpenStandaloneMinersManualPage(EMinersManualSinglePage page) { Invoke(nameof(OpenStandaloneMinersManualPage), page); }
        public void OpenStandaloneMinersManual(EMinersManualSection Section, Guid ID) { Invoke(nameof(OpenStandaloneMinersManual), Section, ID); }
        public bool IsPlayerBlocked(Object UserId) { return Invoke<bool>(nameof(IsPlayerBlocked), UserId); }
        public bool IsHUDVisibleFlagSet(EHUDVisibilityReason reason) { return Invoke<bool>(nameof(IsHUDVisibleFlagSet), reason); }
        public EscapeMenuWindow GetEscapeMenu() { return Invoke<EscapeMenuWindow>(nameof(GetEscapeMenu)); }
        public void Client_WasKicked(EDisconnectReason reason) { Invoke(nameof(Client_WasKicked), reason); }
    }
    public class FSDPlayerController : FSDPlayerControllerBase
    {
        public FSDPlayerController(nint addr) : base(addr) { }
        public Object OnEndLevelReceived { get { return this[nameof(OnEndLevelReceived)]; } set { this[nameof(OnEndLevelReceived)] = value; } }
        public Object OnReceiveVoiceChanged { get { return this[nameof(OnReceiveVoiceChanged)]; } set { this[nameof(OnReceiveVoiceChanged)] = value; } }
        public Object OnTransmitVoiceChanged { get { return this[nameof(OnTransmitVoiceChanged)]; } set { this[nameof(OnTransmitVoiceChanged)] = value; } }
        public Object OnLevelFinished { get { return this[nameof(OnLevelFinished)]; } set { this[nameof(OnLevelFinished)] = value; } }
        public Object OnShowTutorialHint { get { return this[nameof(OnShowTutorialHint)]; } set { this[nameof(OnShowTutorialHint)] = value; } }
        public Object OnShowTutorialWidget { get { return this[nameof(OnShowTutorialWidget)]; } set { this[nameof(OnShowTutorialWidget)] = value; } }
        public Object OnChangeTutorialHintDuration { get { return this[nameof(OnChangeTutorialHintDuration)]; } set { this[nameof(OnChangeTutorialHintDuration)] = value; } }
        public Object OnHideCurrentTutorialHint { get { return this[nameof(OnHideCurrentTutorialHint)]; } set { this[nameof(OnHideCurrentTutorialHint)] = value; } }
        public Object OnPlayerCharacterPossesed { get { return this[nameof(OnPlayerCharacterPossesed)]; } set { this[nameof(OnPlayerCharacterPossesed)] = value; } }
        public Object OnChatOpened { get { return this[nameof(OnChatOpened)]; } set { this[nameof(OnChatOpened)] = value; } }
        public DeepPathfinderCharacter DebugEnemy { get { return this[nameof(DebugEnemy)].As<DeepPathfinderCharacter>(); } set { this["DebugEnemy"] = value; } }
        public Vector DebugEnemyLocation { get { return this[nameof(DebugEnemyLocation)].As<Vector>(); } set { this["DebugEnemyLocation"] = value; } }
        public float DebugEnemySpeed { get { return this[nameof(DebugEnemySpeed)].GetValue<float>(); } set { this[nameof(DebugEnemySpeed)].SetValue<float>(value); } }
        public float DebugEnemySpeedMod { get { return this[nameof(DebugEnemySpeedMod)].GetValue<float>(); } set { this[nameof(DebugEnemySpeedMod)].SetValue<float>(value); } }
        public DeepPathfinderCharacter DebugEnemyLast { get { return this[nameof(DebugEnemyLast)].As<DeepPathfinderCharacter>(); } set { this["DebugEnemyLast"] = value; } }
        public PerkUsageComponent PerkUsageComponent { get { return this[nameof(PerkUsageComponent)].As<PerkUsageComponent>(); } set { this["PerkUsageComponent"] = value; } }
        public TerrainLatejoinComponent LateJoinComponent { get { return this[nameof(LateJoinComponent)].As<TerrainLatejoinComponent>(); } set { this["LateJoinComponent"] = value; } }
        public bool IsOnSpaceRig { get { return this[nameof(IsOnSpaceRig)].Flag; } set { this[nameof(IsOnSpaceRig)].Flag = value; } }
        public bool bReceivedEndLevel { get { return this[nameof(bReceivedEndLevel)].Flag; } set { this[nameof(bReceivedEndLevel)].Flag = value; } }
        public UArray<SoundMix> InitialSoundMixes { get { return new UArray<SoundMix>(this[nameof(InitialSoundMixes)].Address); } }
        public bool ServerTravelDone { get { return this[nameof(ServerTravelDone)].Flag; } set { this[nameof(ServerTravelDone)].Flag = value; } }
        public FSDWidgetEffectsComponent WidgetEffects { get { return this[nameof(WidgetEffects)].As<FSDWidgetEffectsComponent>(); } set { this["WidgetEffects"] = value; } }
        public ESpacerigStartType SpacerigSpawnType { get { return (ESpacerigStartType)this[nameof(SpacerigSpawnType)].GetValue<int>(); } set { this[nameof(SpacerigSpawnType)].SetValue<int>((int)value); } }
        public bool bDetectGravityChanges { get { return this[nameof(bDetectGravityChanges)].Flag; } set { this[nameof(bDetectGravityChanges)].Flag = value; } }
        public void ToggleVoiceOn(bool Enabled) { Invoke(nameof(ToggleVoiceOn), Enabled); }
        public void SpawnHUDLocal(Object hudClass) { Invoke(nameof(SpawnHUDLocal), hudClass); }
        public void SpawnHUDAsync() { Invoke(nameof(SpawnHUDAsync)); }
        public void ShowTutorialWidget(Object TutorialWidget, bool ignoreQueue) { Invoke(nameof(ShowTutorialWidget), TutorialWidget, ignoreQueue); }
        public void ShowTutorialHint(Object Text, Object Title, Object TaskText, Texture2D Image, float Duration) { Invoke(nameof(ShowTutorialHint), Text, Title, TaskText, Image, Duration); }
        public void SetPlayerStart(Actor Start) { Invoke(nameof(SetPlayerStart), Start); }
        public void SetAchievementProgressFromServer(FSDAchievement AchievementToSet, float Progress) { Invoke(nameof(SetAchievementProgressFromServer), AchievementToSet, Progress); }
        public void ServerSetUserHoldToRun(bool Value) { Invoke(nameof(ServerSetUserHoldToRun), Value); }
        public void Server_TravelDone() { Invoke(nameof(Server_TravelDone)); }
        public void Server_TakeDamageFrom(DamageComponent Damage, Vector Location) { Invoke(nameof(Server_TakeDamageFrom), Damage, Location); }
        public void Server_SetLateJoinDone() { Invoke(nameof(Server_SetLateJoinDone)); }
        public void Server_SetGenerationStatus(Object Status, float Fraction) { Invoke(nameof(Server_SetGenerationStatus), Status, Fraction); }
        public void Server_SetGenerationFraction(float Fraction) { Invoke(nameof(Server_SetGenerationFraction), Fraction); }
        public void Server_SetGenerationDone() { Invoke(nameof(Server_SetGenerationDone)); }
        public void Server_SetExtraEndScreenTime(float extraTime) { Invoke(nameof(Server_SetExtraEndScreenTime), extraTime); }
        public void Server_SetDebugEnemy(DeepPathfinderCharacter NewDebugEnemy) { Invoke(nameof(Server_SetDebugEnemy), NewDebugEnemy); }
        public void Server_SetControllerReady() { Invoke(nameof(Server_SetControllerReady)); }
        public void Server_ResetHUD() { Invoke(nameof(Server_ResetHUD)); }
        public void Server_Relay_SetArmorIndexDestroyed(SimpleArmorDamageComponent ArmorComponent, int Index, EArmorDamageType DamageType) { Invoke(nameof(Server_Relay_SetArmorIndexDestroyed), ArmorComponent, Index, DamageType); }
        public void Server_NewMessage(Object Sender, Object Text, EChatSenderType SenderType) { Invoke(nameof(Server_NewMessage), Sender, Text, SenderType); }
        public void Server_DrawProjectileDebugPath(bool bDraw) { Invoke(nameof(Server_DrawProjectileDebugPath), bDraw); }
        public void SendLevelUpStatistics(int currentRank) { Invoke(nameof(SendLevelUpStatistics), currentRank); }
        public void RecievePawnDestroyed() { Invoke(nameof(RecievePawnDestroyed)); }
        public void RecieveOnControllerReady() { Invoke(nameof(RecieveOnControllerReady)); }
        public void ReceivingVoiceSignature__DelegateSignature(bool isRecieving) { Invoke(nameof(ReceivingVoiceSignature__DelegateSignature), isRecieving); }
        public void ReceiveEndLevel() { Invoke(nameof(ReceiveEndLevel)); }
        public void ReceivedEndLevelDelegate__DelegateSignature() { Invoke(nameof(ReceivedEndLevelDelegate__DelegateSignature)); }
        public void Receive_EndLevel_WaitForData(bool areObjectivesCompleted, int numberOfPlayersInPod) { Invoke(nameof(Receive_EndLevel_WaitForData), areObjectivesCompleted, numberOfPlayersInPod); }
        public void ReadyToContinueFromEndScreen() { Invoke(nameof(ReadyToContinueFromEndScreen)); }
        public void OnShowTutorialHint__DelegateSignature(Object Text, Object Title, Object TaskText, Texture2D Image, float Duration) { Invoke(nameof(OnShowTutorialHint__DelegateSignature), Text, Title, TaskText, Image, Duration); }
        public void OnSaveGamePlayerProgressChanged(int Rank, int Stars) { Invoke(nameof(OnSaveGamePlayerProgressChanged), Rank, Stars); }
        public void OnSaveGameCreditsChanged(int Credits) { Invoke(nameof(OnSaveGameCreditsChanged), Credits); }
        public void OnSaveGameCharacterProgressChanged(Object CharacterClass, int Level, float Progress) { Invoke(nameof(OnSaveGameCharacterProgressChanged), CharacterClass, Level, Progress); }
        public void OnRep_DebugEnemyLocation() { Invoke(nameof(OnRep_DebugEnemyLocation)); }
        public void OnPlayerStateSelectedCharacterChanged(Object CharacterClass) { Invoke(nameof(OnPlayerStateSelectedCharacterChanged), CharacterClass); }
        public void OnPlayerSpawnBegin(int PlayerId) { Invoke(nameof(OnPlayerSpawnBegin), PlayerId); }
        public void OnHideTutorialHint__DelegateSignature(bool wasWatched) { Invoke(nameof(OnHideTutorialHint__DelegateSignature), wasWatched); }
        public void OnGenerationDone() { Invoke(nameof(OnGenerationDone)); }
        public void OnChangeTutorialWidget__DelegateSignature(Object TutorialWidget, bool bIgnoreQueue) { Invoke(nameof(OnChangeTutorialWidget__DelegateSignature), TutorialWidget, bIgnoreQueue); }
        public void OnChangeTutorialHintDuration__DelegateSignature(float NewDuration) { Invoke(nameof(OnChangeTutorialHintDuration__DelegateSignature), NewDuration); }
        public void LevelFinishedSignature__DelegateSignature() { Invoke(nameof(LevelFinishedSignature__DelegateSignature)); }
        public void HideTutorialHint(bool watched) { Invoke(nameof(HideTutorialHint), watched); }
        public bool GetUseToggleTerrainScanner() { return Invoke<bool>(nameof(GetUseToggleTerrainScanner)); }
        public bool GetUseToggleLaserpointer() { return Invoke<bool>(nameof(GetUseToggleLaserpointer)); }
        public bool GetUseHoldToRun() { return Invoke<bool>(nameof(GetUseHoldToRun)); }
        public Actor GetPlayerStart() { return Invoke<Actor>(nameof(GetPlayerStart)); }
        public FSDPlayerState GetFSDPlayerState() { return Invoke<FSDPlayerState>(nameof(GetFSDPlayerState)); }
        public void FlushRender() { Invoke(nameof(FlushRender)); }
        public Actor FindPlayerStart(PlayerCharacterID characterID) { return Invoke<Actor>(nameof(FindPlayerStart), characterID); }
        public void EndLevel() { Invoke(nameof(EndLevel)); }
        public void Client_PlayCue(SoundCue SoundCue) { Invoke(nameof(Client_PlayCue), SoundCue); }
        public void Client_EndLevel_WaitForData(bool areObjectivesCompleted, int numberOfPlayersInPod) { Invoke(nameof(Client_EndLevel_WaitForData), areObjectivesCompleted, numberOfPlayersInPod); }
        public void Client_CollectVanityItem(TreasureRewarder rewarder, VanityItem targetItem, PlayerCharacterID targetCharacter) { Invoke(nameof(Client_CollectVanityItem), rewarder, targetItem, targetCharacter); }
        public void Client_CollectTreasureVictoryPose(TreasureRewarder rewarder, VictoryPose targetPose, PlayerCharacterID targetCharacter) { Invoke(nameof(Client_CollectTreasureVictoryPose), rewarder, targetPose, targetCharacter); }
        public void Client_CollectTreasureSkin(SkinTreasureRewarder rewarder, ItemSkin targetSkin, ItemID targetItem) { Invoke(nameof(Client_CollectTreasureSkin), rewarder, targetSkin, targetItem); }
        public void Client_CollectPickaxePart(TreasureRewarder rewarder, PickaxePart targetPart) { Invoke(nameof(Client_CollectPickaxePart), rewarder, targetPart); }
    }
    public class FSDPlayerStart : Actor
    {
        public FSDPlayerStart(nint addr) : base(addr) { }
        public PlayerCharacterID PrefferedClassID { get { return this[nameof(PrefferedClassID)].As<PlayerCharacterID>(); } set { this["PrefferedClassID"] = value; } }
        public FSDPlayerController usedBy { get { return this[nameof(usedBy)].As<FSDPlayerController>(); } set { this["usedBy"] = value; } }
    }
    public class SpacerigStart : PlayerStart
    {
        public SpacerigStart(nint addr) : base(addr) { }
        public Object OnPlayerSpawn { get { return this[nameof(OnPlayerSpawn)]; } set { this[nameof(OnPlayerSpawn)] = value; } }
        public Object OnPlayerLeave { get { return this[nameof(OnPlayerLeave)]; } set { this[nameof(OnPlayerLeave)] = value; } }
        public FSDPlayerController usedBy { get { return this[nameof(usedBy)].As<FSDPlayerController>(); } set { this["usedBy"] = value; } }
        public ESpacerigStartType StartType { get { return (ESpacerigStartType)this[nameof(StartType)].GetValue<int>(); } set { this[nameof(StartType)].SetValue<int>((int)value); } }
    }
    public class FSDPlayerState : PlayerState
    {
        public FSDPlayerState(nint addr) : base(addr) { }
        public Object OnPlayerCharacterSpawned { get { return this[nameof(OnPlayerCharacterSpawned)]; } set { this[nameof(OnPlayerCharacterSpawned)] = value; } }
        public Object OnPlayerTalkingChanged { get { return this[nameof(OnPlayerTalkingChanged)]; } set { this[nameof(OnPlayerTalkingChanged)] = value; } }
        public Object OnSelectedCharacterChanged { get { return this[nameof(OnSelectedCharacterChanged)]; } set { this[nameof(OnSelectedCharacterChanged)] = value; } }
        public float FractionLevelGenerated { get { return this[nameof(FractionLevelGenerated)].GetValue<float>(); } set { this[nameof(FractionLevelGenerated)].SetValue<float>(value); } }
        public Object LevelGenerationState { get { return this[nameof(LevelGenerationState)]; } set { this[nameof(LevelGenerationState)] = value; } }
        public Object OnSupplyStatusChangedEvent { get { return this[nameof(OnSupplyStatusChangedEvent)]; } set { this[nameof(OnSupplyStatusChangedEvent)] = value; } }
        public Object OnEnemyKilledEvent { get { return this[nameof(OnEnemyKilledEvent)]; } set { this[nameof(OnEnemyKilledEvent)] = value; } }
        public EquippedVanity LatestEquipedVanity { get { return this[nameof(LatestEquipedVanity)].As<EquippedVanity>(); } set { this["LatestEquipedVanity"] = value; } }
        public Object SelectedCharacter { get { return this[nameof(SelectedCharacter)]; } set { this[nameof(SelectedCharacter)] = value; } }
        public bool bIsServer { get { return this[nameof(bIsServer)].Flag; } set { this[nameof(bIsServer)].Flag = value; } }
        public bool ShouldCopyProperties { get { return this[nameof(ShouldCopyProperties)].Flag; } set { this[nameof(ShouldCopyProperties)].Flag = value; } }
        public byte gameOwnerStatus { get { return this[nameof(gameOwnerStatus)].GetValue<byte>(); } set { this[nameof(gameOwnerStatus)].SetValue<byte>(value); } }
        public bool IsOnSpaceRig { get { return this[nameof(IsOnSpaceRig)].Flag; } set { this[nameof(IsOnSpaceRig)].Flag = value; } }
        public PlayerStatsComponent PlayerStatsComponent { get { return this[nameof(PlayerStatsComponent)].As<PlayerStatsComponent>(); } set { this["PlayerStatsComponent"] = value; } }
        public PlayerRejoinState RejoinState { get { return this[nameof(RejoinState)].As<PlayerRejoinState>(); } set { this["RejoinState"] = value; } }
        public SaveGameStateComponent SaveGameStateComponent { get { return this[nameof(SaveGameStateComponent)].As<SaveGameStateComponent>(); } set { this["SaveGameStateComponent"] = value; } }
        public PlayerCharacter PlayerCharacter { get { return this[nameof(PlayerCharacter)].As<PlayerCharacter>(); } set { this["PlayerCharacter"] = value; } }
        public bool IsInMission { get { return this[nameof(IsInMission)].Flag; } set { this[nameof(IsInMission)].Flag = value; } }
        public bool IsTalking { get { return this[nameof(IsTalking)].Flag; } set { this[nameof(IsTalking)].Flag = value; } }
        public bool HasGeneratedLevel { get { return this[nameof(HasGeneratedLevel)].Flag; } set { this[nameof(HasGeneratedLevel)].Flag = value; } }
        public bool HasSelectedCharacter { get { return this[nameof(HasSelectedCharacter)].Flag; } set { this[nameof(HasSelectedCharacter)].Flag = value; } }
        public int PlayerSortId { get { return this[nameof(PlayerSortId)].GetValue<int>(); } set { this[nameof(PlayerSortId)].SetValue<int>(value); } }
        public Object OnPlayerNameChanged { get { return this[nameof(OnPlayerNameChanged)]; } set { this[nameof(OnPlayerNameChanged)] = value; } }
        public Object OnFractionLevelGenerated { get { return this[nameof(OnFractionLevelGenerated)]; } set { this[nameof(OnFractionLevelGenerated)] = value; } }
        public Object OnLevelGenerationStateChanged { get { return this[nameof(OnLevelGenerationStateChanged)]; } set { this[nameof(OnLevelGenerationStateChanged)] = value; } }
        public PlayerResourceComponent PlayerResources { get { return this[nameof(PlayerResources)].As<PlayerResourceComponent>(); } set { this["PlayerResources"] = value; } }
        public byte SupplyAmmoStatus { get { return this[nameof(SupplyAmmoStatus)].GetValue<byte>(); } set { this[nameof(SupplyAmmoStatus)].SetValue<byte>(value); } }
        public byte SupplyHealthStatus { get { return this[nameof(SupplyHealthStatus)].GetValue<byte>(); } set { this[nameof(SupplyHealthStatus)].SetValue<byte>(value); } }
        public RewardTexts RewardTexts { get { return this[nameof(RewardTexts)].As<RewardTexts>(); } set { this["RewardTexts"] = value; } }
        public void SetSelectedCharacterID(PlayerCharacterID characterID) { Invoke(nameof(SetSelectedCharacterID), characterID); }
        public void SetSelectedCharacter(Object NewCharacter) { Invoke(nameof(SetSelectedCharacter), NewCharacter); }
        public void SetHasGeneratedLevel(bool hasgenerated) { Invoke(nameof(SetHasGeneratedLevel), hasgenerated); }
        public void SetCanOnlySpectate(bool canOnlySpectate) { Invoke(nameof(SetCanOnlySpectate), canOnlySpectate); }
        public void ServerSetSelectedCharacter(Object NewCharacter) { Invoke(nameof(ServerSetSelectedCharacter), NewCharacter); }
        public void Server_SetSupplyStatus(byte StatusHealth, byte StatusAmmo) { Invoke(nameof(Server_SetSupplyStatus), StatusHealth, StatusAmmo); }
        public void Server_SetGameOwnerStatus(int gameOwnerStatus) { Invoke(nameof(Server_SetGameOwnerStatus), gameOwnerStatus); }
        public void OnRep_SupplyHealthStatus() { Invoke(nameof(OnRep_SupplyHealthStatus)); }
        public void OnRep_SupplyAmmoStatus() { Invoke(nameof(OnRep_SupplyAmmoStatus)); }
        public void OnRep_SelectedCharacter() { Invoke(nameof(OnRep_SelectedCharacter)); }
        public void OnRep_PlayerCharacter() { Invoke(nameof(OnRep_PlayerCharacter)); }
        public void OnRep_LevelGenerationState() { Invoke(nameof(OnRep_LevelGenerationState)); }
        public void OnRep_GameOwnerStatus() { Invoke(nameof(OnRep_GameOwnerStatus)); }
        public void OnRep_FractionLevelGenerated() { Invoke(nameof(OnRep_FractionLevelGenerated)); }
        public void OnLateJoinFinished() { Invoke(nameof(OnLateJoinFinished)); }
        public bool HasNormalOwnerStatus() { return Invoke<bool>(nameof(HasNormalOwnerStatus)); }
        public int GetXPRewardsSum() { return Invoke<int>(nameof(GetXPRewardsSum)); }
        public UArray<XPReward> GetXPRewards() { return Invoke<UArray<XPReward>>(nameof(GetXPRewards)); }
        public UArray<XPReward> GetXPRewardDeepDive(int StagesCompleted) { return Invoke<UArray<XPReward>>(nameof(GetXPRewardDeepDive), StagesCompleted); }
        public int GetUIPing() { return Invoke<int>(nameof(GetUIPing)); }
        public float GetSupplyHealthStatus() { return Invoke<float>(nameof(GetSupplyHealthStatus)); }
        public float GetSupplyAmmoStatus() { return Invoke<float>(nameof(GetSupplyAmmoStatus)); }
        public int GetSelectedCharacterLevel() { return Invoke<int>(nameof(GetSelectedCharacterLevel)); }
        public PlayerCharacterID GetSelectedCharacterID() { return Invoke<PlayerCharacterID>(nameof(GetSelectedCharacterID)); }
        public Object GetSelectedCharacter() { return Invoke<Object>(nameof(GetSelectedCharacter)); }
        public CharacterProgress GetSelectCharacterProgress() { return Invoke<CharacterProgress>(nameof(GetSelectCharacterProgress)); }
        public PlayerResourceComponent GetPlayerResourceComponent() { return Invoke<PlayerResourceComponent>(nameof(GetPlayerResourceComponent)); }
        public int GetPlayerRank() { return Invoke<int>(nameof(GetPlayerRank)); }
        public FSDPlayerController GetPlayerController() { return Invoke<FSDPlayerController>(nameof(GetPlayerController)); }
        public bool GetHasGeneratedLevel() { return Invoke<bool>(nameof(GetHasGeneratedLevel)); }
        public bool GetGameOwnerStatus(EGameOwnerStatus Status) { return Invoke<bool>(nameof(GetGameOwnerStatus), Status); }
        public UArray<CreditsReward> GetDeepDiveCreditsReward(int StagesCompleted, int goldCollected) { return Invoke<UArray<CreditsReward>>(nameof(GetDeepDiveCreditsReward), StagesCompleted, goldCollected); }
        public EChatSenderType GetChatSenderType() { return Invoke<EChatSenderType>(nameof(GetChatSenderType)); }
        public CharacterProgress GetCharacterProgress(PlayerCharacterID characterID) { return Invoke<CharacterProgress>(nameof(GetCharacterProgress), characterID); }
        public int GetCharacterLevel(PlayerCharacterID characterID) { return Invoke<int>(nameof(GetCharacterLevel), characterID); }
        public void CharacterSelected() { Invoke(nameof(CharacterSelected)); }
    }
    public class FSDPostProcessingActor : Actor
    {
        public FSDPostProcessingActor(nint addr) : base(addr) { }
        public EPostProcessingType PostProcessingType { get { return (EPostProcessingType)this[nameof(PostProcessingType)].GetValue<int>(); } set { this[nameof(PostProcessingType)].SetValue<int>((int)value); } }
        public PostProcessComponent PostProcessComponent { get { return this[nameof(PostProcessComponent)].As<PostProcessComponent>(); } set { this["PostProcessComponent"] = value; } }
        public WeightedBlendables InitialBlendables { get { return this[nameof(InitialBlendables)].As<WeightedBlendables>(); } set { this["InitialBlendables"] = value; } }
        public void UnapplyPostProcessingBlendablesByType(Object WorldContext, EPostProcessingType Type) { Invoke(nameof(UnapplyPostProcessingBlendablesByType), WorldContext, Type); }
        public void UnapplyPostProcessingBlendablesByID(Object WorldContext, Object InID) { Invoke(nameof(UnapplyPostProcessingBlendablesByID), WorldContext, InID); }
        public void UnapplyPostProcessingBlendable(Object WorldContext, EPostProcessingType Type, Object InBlendableObject) { Invoke(nameof(UnapplyPostProcessingBlendable), WorldContext, Type, InBlendableObject); }
        public void UnapplyAllPostProcessingBlendables(Object WorldContext) { Invoke(nameof(UnapplyAllPostProcessingBlendables), WorldContext); }
        public void SetupHDRColorGamma() { Invoke(nameof(SetupHDRColorGamma)); }
        public void SetPostProcessManager(PostProcessingManager InManager) { Invoke(nameof(SetPostProcessManager), InManager); }
        public MaterialInstanceDynamic GetPostProcessingMaterialInstance(Object WorldContext, MaterialInterface Material) { return Invoke<MaterialInstanceDynamic>(nameof(GetPostProcessingMaterialInstance), WorldContext, Material); }
        public MaterialInstanceDynamic ApplyPostProcessingMaterial(Object WorldContext, EPostProcessingType Type, MaterialInterface Material, float InWeight, Object InID) { return Invoke<MaterialInstanceDynamic>(nameof(ApplyPostProcessingMaterial), WorldContext, Type, Material, InWeight, InID); }
        public void ApplyPostProcessingBlendable(Object WorldContext, EPostProcessingType Type, Object InBlendableObject, float InWeight, Object InID) { Invoke(nameof(ApplyPostProcessingBlendable), WorldContext, Type, InBlendableObject, InWeight, InID); }
    }
    public class FSDProjectileMovementComponent : ProjectileMovementComponent
    {
        public FSDProjectileMovementComponent(nint addr) : base(addr) { }
        public Object OnProjectilePenetrate { get { return this[nameof(OnProjectilePenetrate)]; } set { this[nameof(OnProjectilePenetrate)] = value; } }
        public Object OnProjectileOutOfPropulsion { get { return this[nameof(OnProjectileOutOfPropulsion)]; } set { this[nameof(OnProjectileOutOfPropulsion)] = value; } }
        public bool bShouldPenetrate { get { return this[nameof(bShouldPenetrate)].Flag; } set { this[nameof(bShouldPenetrate)].Flag = value; } }
        public UArray<Object> IgnoreCollisionAgainst { get { return new UArray<Object>(this[nameof(IgnoreCollisionAgainst)].Address); } }
        public bool InvertIgnoreCollisionAgainst { get { return this[nameof(InvertIgnoreCollisionAgainst)].Flag; } set { this[nameof(InvertIgnoreCollisionAgainst)].Flag = value; } }
        public CurveFloat AccelerationCurve { get { return this[nameof(AccelerationCurve)].As<CurveFloat>(); } set { this["AccelerationCurve"] = value; } }
        public float AccelerationMultiplier { get { return this[nameof(AccelerationMultiplier)].GetValue<float>(); } set { this[nameof(AccelerationMultiplier)].SetValue<float>(value); } }
        public float MaxPropulsionTime { get { return this[nameof(MaxPropulsionTime)].GetValue<float>(); } set { this[nameof(MaxPropulsionTime)].SetValue<float>(value); } }
        public bool bCancelPenetration { get { return this[nameof(bCancelPenetration)].Flag; } set { this[nameof(bCancelPenetration)].Flag = value; } }
    }
    public class FSDRateLimiter : Object
    {
        public FSDRateLimiter(nint addr) : base(addr) { }
        public bool RateLimted() { return Invoke<bool>(nameof(RateLimted)); }
        public void K2_Enqueue(Object OnRateLimitOpen, Object ID) { Invoke(nameof(K2_Enqueue), OnRateLimitOpen, ID); }
        public bool IsQueueEmpty() { return Invoke<bool>(nameof(IsQueueEmpty)); }
        public bool IsQueued(Object ID) { return Invoke<bool>(nameof(IsQueued), ID); }
        public void Init(int rateLimit, float rateTimeLimit, bool useBurstLimit, int burstLimit, float burstTimeLimit) { Invoke(nameof(Init), rateLimit, rateTimeLimit, useBurstLimit, burstLimit, burstTimeLimit); }
        public void IncreaseLimitCounter() { Invoke(nameof(IncreaseLimitCounter)); }
    }
    public class GDKRateLimiter : GameInstanceSubsystem
    {
        public GDKRateLimiter(nint addr) : base(addr) { }
        public FSDRateLimiter Handler { get { return this[nameof(Handler)].As<FSDRateLimiter>(); } set { this["Handler"] = value; } }
    }
    public class FSDRefinery : DroppableOutpost
    {
        public FSDRefinery(nint addr) : base(addr) { }
        public Object OnRefineryStateChanged { get { return this[nameof(OnRefineryStateChanged)]; } set { this[nameof(OnRefineryStateChanged)] = value; } }
        public Object OnRefineryProgressChanged { get { return this[nameof(OnRefineryProgressChanged)]; } set { this[nameof(OnRefineryProgressChanged)] = value; } }
        public Object OnPipelineRegistered { get { return this[nameof(OnPipelineRegistered)]; } set { this[nameof(OnPipelineRegistered)] = value; } }
        public Object OnPipelineSegmentPlaced { get { return this[nameof(OnPipelineSegmentPlaced)]; } set { this[nameof(OnPipelineSegmentPlaced)] = value; } }
        public Object OnExtractorPodSpawned { get { return this[nameof(OnExtractorPodSpawned)]; } set { this[nameof(OnExtractorPodSpawned)] = value; } }
        public SingleUsableComponent UsableStartRefining { get { return this[nameof(UsableStartRefining)].As<SingleUsableComponent>(); } set { this["UsableStartRefining"] = value; } }
        public SingleUsableComponent UsableLaunchRocket { get { return this[nameof(UsableLaunchRocket)].As<SingleUsableComponent>(); } set { this["UsableLaunchRocket"] = value; } }
        public Object ProgressMissionShouts { get { return this[nameof(ProgressMissionShouts)]; } set { this[nameof(ProgressMissionShouts)] = value; } }
        public DialogDataAsset LaunchRocketButtonPressedShout { get { return this[nameof(LaunchRocketButtonPressedShout)].As<DialogDataAsset>(); } set { this["LaunchRocketButtonPressedShout"] = value; } }
        public Object BuilderItem { get { return this[nameof(BuilderItem)]; } set { this[nameof(BuilderItem)] = value; } }
        public float RefiningTotalDuration { get { return this[nameof(RefiningTotalDuration)].GetValue<float>(); } set { this[nameof(RefiningTotalDuration)].SetValue<float>(value); } }
        public FloatRange PipelineBreakCoolDown { get { return this[nameof(PipelineBreakCoolDown)].As<FloatRange>(); } set { this["PipelineBreakCoolDown"] = value; } }
        public float PipelineBreakTimePenaltyPerAdditionalPlayers { get { return this[nameof(PipelineBreakTimePenaltyPerAdditionalPlayers)].GetValue<float>(); } set { this[nameof(PipelineBreakTimePenaltyPerAdditionalPlayers)].SetValue<float>(value); } }
        public Int32Range MaxSegmentBreakDowns { get { return this[nameof(MaxSegmentBreakDowns)].As<Int32Range>(); } set { this["MaxSegmentBreakDowns"] = value; } }
        public int SegmentBreakDownPenaltyPerAdditionalPlayers { get { return this[nameof(SegmentBreakDownPenaltyPerAdditionalPlayers)].GetValue<int>(); } set { this[nameof(SegmentBreakDownPenaltyPerAdditionalPlayers)].SetValue<int>(value); } }
        public ERefineryState RefineryState { get { return (ERefineryState)this[nameof(RefineryState)].GetValue<int>(); } set { this[nameof(RefineryState)].SetValue<int>((int)value); } }
        public ERefineryState PreviousRefineryState { get { return (ERefineryState)this[nameof(PreviousRefineryState)].GetValue<int>(); } set { this[nameof(PreviousRefineryState)].SetValue<int>((int)value); } }
        public byte RefiningProgressReplicated { get { return this[nameof(RefiningProgressReplicated)].GetValue<byte>(); } set { this[nameof(RefiningProgressReplicated)].SetValue<byte>(value); } }
        public UArray<PipelineStart> PipelineStarts { get { return new UArray<PipelineStart>(this[nameof(PipelineStarts)].Address); } }
        public void SetRefineryState(ERefineryState InState) { Invoke(nameof(SetRefineryState), InState); }
        public void RefineryStateDelegate__DelegateSignature(ERefineryState InRefineryState) { Invoke(nameof(RefineryStateDelegate__DelegateSignature), InRefineryState); }
        public void RefineryProgressDelegate__DelegateSignature(float InProgress01) { Invoke(nameof(RefineryProgressDelegate__DelegateSignature), InProgress01); }
        public void RefineryPipelineSegmentDelegate__DelegateSignature(PipelineSegment InSegment) { Invoke(nameof(RefineryPipelineSegmentDelegate__DelegateSignature), InSegment); }
        public void RefineryPipelineDelegate__DelegateSignature(PipelineStart InPipelineStart) { Invoke(nameof(RefineryPipelineDelegate__DelegateSignature), InPipelineStart); }
        public void RefineryExtractPodDelegate__DelegateSignature(PipelineExtractorPod InExtractorPod) { Invoke(nameof(RefineryExtractPodDelegate__DelegateSignature), InExtractorPod); }
        public void ReceiveRefineryStateChanged(ERefineryState InState) { Invoke(nameof(ReceiveRefineryStateChanged), InState); }
        public void ReceivePipelineStateChanged(PipelineStart InPipeline, EPipelineBuildState InState) { Invoke(nameof(ReceivePipelineStateChanged), InPipeline, InState); }
        public void ReceivePipelineStartReady(PipelineStart InPipelineStart) { Invoke(nameof(ReceivePipelineStartReady), InPipelineStart); }
        public void OnStartRefiningPressed(PlayerCharacter InCharacter, EInputKeys Key) { Invoke(nameof(OnStartRefiningPressed), InCharacter, Key); }
        public void OnRep_RefineryState(ERefineryState InOldState) { Invoke(nameof(OnRep_RefineryState), InOldState); }
        public void OnPlayerCharacterRegistered(PlayerCharacter InCharacter) { Invoke(nameof(OnPlayerCharacterRegistered), InCharacter); }
        public void OnPipelineStateChanged(PipelineStart InPipelineStart, EPipelineBuildState InPipelineState) { Invoke(nameof(OnPipelineStateChanged), InPipelineStart, InPipelineState); }
        public void OnObjectivesChanged() { Invoke(nameof(OnObjectivesChanged)); }
        public void OnLaunchRocketPressed(PlayerCharacter InCharacter, EInputKeys Key) { Invoke(nameof(OnLaunchRocketPressed), InCharacter, Key); }
        public float GetRefiningProgress() { return Invoke<float>(nameof(GetRefiningProgress)); }
    }
    public class FSDRefineryAnimInstance : AnimInstance
    {
        public FSDRefineryAnimInstance(nint addr) : base(addr) { }
        public ERefineryState RefineryState { get { return (ERefineryState)this[nameof(RefineryState)].GetValue<int>(); } set { this[nameof(RefineryState)].SetValue<int>((int)value); } }
    }
    public class FSDSaveGame : SaveGame
    {
        public FSDSaveGame(nint addr) : base(addr) { }
        public Object OnCreditsChanged { get { return this[nameof(OnCreditsChanged)]; } set { this[nameof(OnCreditsChanged)] = value; } }
        public Object OnCharacterSaveChanged { get { return this[nameof(OnCharacterSaveChanged)]; } set { this[nameof(OnCharacterSaveChanged)] = value; } }
        public Object OnCharacterCanRetire { get { return this[nameof(OnCharacterCanRetire)]; } set { this[nameof(OnCharacterCanRetire)] = value; } }
        public Object OnCharacterRetired { get { return this[nameof(OnCharacterRetired)]; } set { this[nameof(OnCharacterRetired)] = value; } }
        public Object OnPlayerProgressChanged { get { return this[nameof(OnPlayerProgressChanged)]; } set { this[nameof(OnPlayerProgressChanged)] = value; } }
        public Object OnTutorialsReset { get { return this[nameof(OnTutorialsReset)]; } set { this[nameof(OnTutorialsReset)] = value; } }
        public Object OnPersonalMetricsChanged { get { return this[nameof(OnPersonalMetricsChanged)]; } set { this[nameof(OnPersonalMetricsChanged)] = value; } }
        public Object OnAnonymousMetricsChanged { get { return this[nameof(OnAnonymousMetricsChanged)]; } set { this[nameof(OnAnonymousMetricsChanged)] = value; } }
        public Object OnItemUnlocked { get { return this[nameof(OnItemUnlocked)]; } set { this[nameof(OnItemUnlocked)] = value; } }
        public Object OnItemPurchased { get { return this[nameof(OnItemPurchased)]; } set { this[nameof(OnItemPurchased)] = value; } }
        public Object OnItemUINotificationChange { get { return this[nameof(OnItemUINotificationChange)]; } set { this[nameof(OnItemUINotificationChange)] = value; } }
        public int VersionNumber { get { return this[nameof(VersionNumber)].GetValue<int>(); } set { this[nameof(VersionNumber)].SetValue<int>(value); } }
        public bool bMilestoneResetShown { get { return this[nameof(bMilestoneResetShown)].Flag; } set { this[nameof(bMilestoneResetShown)].Flag = value; } }
        public bool bYearTwoGiftClaimed { get { return this[nameof(bYearTwoGiftClaimed)].Flag; } set { this[nameof(bYearTwoGiftClaimed)].Flag = value; } }
        public Object OnForgingXPChanged { get { return this[nameof(OnForgingXPChanged)]; } set { this[nameof(OnForgingXPChanged)] = value; } }
        public Object OnResourceAmountChanged { get { return this[nameof(OnResourceAmountChanged)]; } set { this[nameof(OnResourceAmountChanged)] = value; } }
        public Object OnSkinUnlocked { get { return this[nameof(OnSkinUnlocked)]; } set { this[nameof(OnSkinUnlocked)] = value; } }
        public DateTime SaveSlotTimeStamp { get { return this[nameof(SaveSlotTimeStamp)].As<DateTime>(); } set { this["SaveSlotTimeStamp"] = value; } }
        public Object OnPerkPointsChanged { get { return this[nameof(OnPerkPointsChanged)]; } set { this[nameof(OnPerkPointsChanged)] = value; } }
        public MissionStatSave MissionStatsSave { get { return this[nameof(MissionStatsSave)].As<MissionStatSave>(); } set { this["MissionStatsSave"] = value; } }
        public MilestoneSave Milestones { get { return this[nameof(Milestones)].As<MilestoneSave>(); } set { this["Milestones"] = value; } }
        public PerkClaimsSave OwnedPerks { get { return this[nameof(OwnedPerks)].As<PerkClaimsSave>(); } set { this["OwnedPerks"] = value; } }
        public CharacterPerksSave EquippedPerks { get { return this[nameof(EquippedPerks)].As<CharacterPerksSave>(); } set { this["EquippedPerks"] = value; } }
        public AchievementSave AchievementSave { get { return this[nameof(AchievementSave)].As<AchievementSave>(); } set { this["AchievementSave"] = value; } }
        public UArray<CharacterPerksSave> EquippedPerkLoadouts { get { return new UArray<CharacterPerksSave>(this[nameof(EquippedPerkLoadouts)].Address); } }
        public CharacterPerksSave RandomEquippedPerkLoadout { get { return this[nameof(RandomEquippedPerkLoadout)].As<CharacterPerksSave>(); } set { this["RandomEquippedPerkLoadout"] = value; } }
        public VanityMasterySave VanityMasterySave { get { return this[nameof(VanityMasterySave)].As<VanityMasterySave>(); } set { this["VanityMasterySave"] = value; } }
        public Object OnVanityMasteryChanged { get { return this[nameof(OnVanityMasteryChanged)]; } set { this[nameof(OnVanityMasteryChanged)] = value; } }
        public JettyBootsSave JettyBootsSave { get { return this[nameof(JettyBootsSave)].As<JettyBootsSave>(); } set { this["JettyBootsSave"] = value; } }
        public SchematicSave SchematicSave { get { return this[nameof(SchematicSave)].As<SchematicSave>(); } set { this["SchematicSave"] = value; } }
        public PromotionRewardsSave PromotionRewardsSave { get { return this[nameof(PromotionRewardsSave)].As<PromotionRewardsSave>(); } set { this["PromotionRewardsSave"] = value; } }
        public FSDEventRewardsSave FSDEventRewardsSave { get { return this[nameof(FSDEventRewardsSave)].As<FSDEventRewardsSave>(); } set { this["FSDEventRewardsSave"] = value; } }
        public SeasonSave SeasonSave { get { return this[nameof(SeasonSave)].As<SeasonSave>(); } set { this["SeasonSave"] = value; } }
        public GameDLCSave GameDLCSave { get { return this[nameof(GameDLCSave)].As<GameDLCSave>(); } set { this["GameDLCSave"] = value; } }
        public Object OnWeaponMaintenanceChanged { get { return this[nameof(OnWeaponMaintenanceChanged)]; } set { this[nameof(OnWeaponMaintenanceChanged)] = value; } }
        public WeaponMaintenance WeaponMaintenance { get { return this[nameof(WeaponMaintenance)].As<WeaponMaintenance>(); } set { this["WeaponMaintenance"] = value; } }
        public int SaveCreatedInPatch { get { return this[nameof(SaveCreatedInPatch)].GetValue<int>(); } set { this[nameof(SaveCreatedInPatch)].SetValue<int>(value); } }
        public Object AnonymousID { get { return this[nameof(AnonymousID)]; } set { this[nameof(AnonymousID)] = value; } }
        public int PerkPoints { get { return this[nameof(PerkPoints)].GetValue<int>(); } set { this[nameof(PerkPoints)].SetValue<int>(value); } }
        public bool HasRecievedDiscordReward { get { return this[nameof(HasRecievedDiscordReward)].Flag; } set { this[nameof(HasRecievedDiscordReward)].Flag = value; } }
        public EFSDFaction Faction { get { return (EFSDFaction)this[nameof(Faction)].GetValue<int>(); } set { this[nameof(Faction)].SetValue<int>((int)value); } }
        public UArray<Guid> UnLockedMissions { get { return new UArray<Guid>(this[nameof(UnLockedMissions)].Address); } }
        public Object UnLockedMissionParameters { get { return this[nameof(UnLockedMissionParameters)]; } set { this[nameof(UnLockedMissionParameters)] = value; } }
        public UArray<Guid> UnLockedPlanetZones { get { return new UArray<Guid>(this[nameof(UnLockedPlanetZones)].Address); } }
        public CampaignSave CampaignSave { get { return this[nameof(CampaignSave)].As<CampaignSave>(); } set { this["CampaignSave"] = value; } }
        public DeepDiveSave DeepDiveSave { get { return this[nameof(DeepDiveSave)].As<DeepDiveSave>(); } set { this["DeepDiveSave"] = value; } }
        public UArray<CharacterSave> CharacterSaves { get { return new UArray<CharacterSave>(this[nameof(CharacterSaves)].Address); } }
        public int Credits { get { return this[nameof(Credits)].GetValue<int>(); } set { this[nameof(Credits)].SetValue<int>(value); } }
        public int LastBoughtDailyDealSeed { get { return this[nameof(LastBoughtDailyDealSeed)].GetValue<int>(); } set { this[nameof(LastBoughtDailyDealSeed)].SetValue<int>(value); } }
        public ForgingSave Forging { get { return this[nameof(Forging)].As<ForgingSave>(); } set { this["Forging"] = value; } }
        public DrinkSave Drinks { get { return this[nameof(Drinks)].As<DrinkSave>(); } set { this["Drinks"] = value; } }
        public UArray<UpgradeLoadout> ItemUpgradeLoadouts { get { return new UArray<UpgradeLoadout>(this[nameof(ItemUpgradeLoadouts)].Address); } }
        public bool bIgnoreRandomLoadout { get { return this[nameof(bIgnoreRandomLoadout)].Flag; } set { this[nameof(bIgnoreRandomLoadout)].Flag = value; } }
        public UArray<Guid> PurchasedItemUpgrades { get { return new UArray<Guid>(this[nameof(PurchasedItemUpgrades)].Address); } }
        public UArray<Guid> UnlockedItems { get { return new UArray<Guid>(this[nameof(UnlockedItems)].Address); } }
        public UArray<Guid> OwnedItems { get { return new UArray<Guid>(this[nameof(OwnedItems)].Address); } }
        public Object EnemiesKilled { get { return this[nameof(EnemiesKilled)]; } set { this[nameof(EnemiesKilled)] = value; } }
        public Object ItemsWithNotification { get { return this[nameof(ItemsWithNotification)]; } set { this[nameof(ItemsWithNotification)] = value; } }
        public Object UnlockedItemSkins { get { return this[nameof(UnlockedItemSkins)]; } set { this[nameof(UnlockedItemSkins)] = value; } }
        public Object UnlockedPickaxeParts { get { return this[nameof(UnlockedPickaxeParts)]; } set { this[nameof(UnlockedPickaxeParts)] = value; } }
        public UArray<VanityItem> UnLockedVanityItems { get { return new UArray<VanityItem>(this[nameof(UnLockedVanityItems)].Address); } }
        public UArray<Guid> UnLockedVanityItemIDs { get { return new UArray<Guid>(this[nameof(UnLockedVanityItemIDs)].Address); } }
        public UArray<Guid> HiddenUICategories { get { return new UArray<Guid>(this[nameof(HiddenUICategories)].Address); } }
        public int LastCollectedCommunityRewardPeriodID { get { return this[nameof(LastCollectedCommunityRewardPeriodID)].GetValue<int>(); } set { this[nameof(LastCollectedCommunityRewardPeriodID)].SetValue<int>(value); } }
        public Object MinersManualKnownObjects { get { return this[nameof(MinersManualKnownObjects)]; } set { this[nameof(MinersManualKnownObjects)] = value; } }
        public EventRewardSave EventRewardSave { get { return this[nameof(EventRewardSave)].As<EventRewardSave>(); } set { this["EventRewardSave"] = value; } }
        public ItemUINotifications ItemUINotifications { get { return this[nameof(ItemUINotifications)].As<ItemUINotifications>(); } set { this["ItemUINotifications"] = value; } }
        public Object RejoinSessionId { get { return this[nameof(RejoinSessionId)]; } set { this[nameof(RejoinSessionId)] = value; } }
        public bool FirstRejoinAttempt { get { return this[nameof(FirstRejoinAttempt)].Flag; } set { this[nameof(FirstRejoinAttempt)].Flag = value; } }
        public bool HaveItemUpgradesBeenFixed { get { return this[nameof(HaveItemUpgradesBeenFixed)].Flag; } set { this[nameof(HaveItemUpgradesBeenFixed)].Flag = value; } }
        public bool bHasOpenedDeepDiveTerminal { get { return this[nameof(bHasOpenedDeepDiveTerminal)].Flag; } set { this[nameof(bHasOpenedDeepDiveTerminal)].Flag = value; } }
        public ResourcesSave Resources { get { return this[nameof(Resources)].As<ResourcesSave>(); } set { this["Resources"] = value; } }
        public bool FirstSession { get { return this[nameof(FirstSession)].Flag; } set { this[nameof(FirstSession)].Flag = value; } }
        public UArray<WatchedTutorial> WatchedTutorials { get { return new UArray<WatchedTutorial>(this[nameof(WatchedTutorials)].Address); } }
        public ConsoleOptionsInSaveGame ConsoleOptions { get { return this[nameof(ConsoleOptions)].As<ConsoleOptionsInSaveGame>(); } set { this["ConsoleOptions"] = value; } }
        public GDKWinOptionsInSaveGame WinGDKOptions { get { return this[nameof(WinGDKOptions)].As<GDKWinOptionsInSaveGame>(); } set { this["WinGDKOptions"] = value; } }
        public OptionsInSaveGame WindowsOptions { get { return this[nameof(WindowsOptions)].As<OptionsInSaveGame>(); } set { this["WindowsOptions"] = value; } }
        public bool HasCompletedTutorial { get { return this[nameof(HasCompletedTutorial)].Flag; } set { this[nameof(HasCompletedTutorial)].Flag = value; } }
        public bool HasPlayedTutorial { get { return this[nameof(HasPlayedTutorial)].Flag; } set { this[nameof(HasPlayedTutorial)].Flag = value; } }
        public bool ShowHowToRestartTutorialPrompt { get { return this[nameof(ShowHowToRestartTutorialPrompt)].Flag; } set { this[nameof(ShowHowToRestartTutorialPrompt)].Flag = value; } }
        public bool HasPlayedIntroMessage { get { return this[nameof(HasPlayedIntroMessage)].Flag; } set { this[nameof(HasPlayedIntroMessage)].Flag = value; } }
        public bool HasSentSteamInfo { get { return this[nameof(HasSentSteamInfo)].Flag; } set { this[nameof(HasSentSteamInfo)].Flag = value; } }
        public bool HasClaimedSteamGroupLoot { get { return this[nameof(HasClaimedSteamGroupLoot)].Flag; } set { this[nameof(HasClaimedSteamGroupLoot)].Flag = value; } }
        public bool IsBoscoAllowed { get { return this[nameof(IsBoscoAllowed)].Flag; } set { this[nameof(IsBoscoAllowed)].Flag = value; } }
        public bool HasJoinedXboxClub { get { return this[nameof(HasJoinedXboxClub)].Flag; } set { this[nameof(HasJoinedXboxClub)].Flag = value; } }
        public bool HasSeenAnalyticsPopUp { get { return this[nameof(HasSeenAnalyticsPopUp)].Flag; } set { this[nameof(HasSeenAnalyticsPopUp)].Flag = value; } }
        public bool AllowAnalyticsTracking { get { return this[nameof(AllowAnalyticsTracking)].Flag; } set { this[nameof(AllowAnalyticsTracking)].Flag = value; } }
        public bool AllowPersonalAnalyticsTracking { get { return this[nameof(AllowPersonalAnalyticsTracking)].Flag; } set { this[nameof(AllowPersonalAnalyticsTracking)].Flag = value; } }
        public bool IsModded { get { return this[nameof(IsModded)].Flag; } set { this[nameof(IsModded)].Flag = value; } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public float TotalPlayTimeSeconds { get { return this[nameof(TotalPlayTimeSeconds)].GetValue<float>(); } set { this[nameof(TotalPlayTimeSeconds)].SetValue<float>(value); } }
        public Object SelectedLoadout { get { return this[nameof(SelectedLoadout)]; } set { this[nameof(SelectedLoadout)] = value; } }
        public uint userIdx { get { return this[nameof(userIdx)].GetValue<uint>(); } set { this[nameof(userIdx)].SetValue<uint>(value); } }
        public uint CurrLoadoutIdx { get { return this[nameof(CurrLoadoutIdx)].GetValue<uint>(); } set { this[nameof(CurrLoadoutIdx)].SetValue<uint>(value); } }
        public uint SaveToDiskCounter { get { return this[nameof(SaveToDiskCounter)].GetValue<uint>(); } set { this[nameof(SaveToDiskCounter)].SetValue<uint>(value); } }
        public uint BackupSaveIndex { get { return this[nameof(BackupSaveIndex)].GetValue<uint>(); } set { this[nameof(BackupSaveIndex)].SetValue<uint>(value); } }
        public uint ExternalBackupSaveIndex { get { return this[nameof(ExternalBackupSaveIndex)].GetValue<uint>(); } set { this[nameof(ExternalBackupSaveIndex)].SetValue<uint>(value); } }
        public int NumberOfGamesPlayed { get { return this[nameof(NumberOfGamesPlayed)].GetValue<int>(); } set { this[nameof(NumberOfGamesPlayed)].SetValue<int>(value); } }
        public PlayerCharacterID LastPlayedCharacter { get { return this[nameof(LastPlayedCharacter)].As<PlayerCharacterID>(); } set { this["LastPlayedCharacter"] = value; } }
        public bool ShowInfoScreen { get { return this[nameof(ShowInfoScreen)].Flag; } set { this[nameof(ShowInfoScreen)].Flag = value; } }
        public Object LastShownVersion { get { return this[nameof(LastShownVersion)]; } set { this[nameof(LastShownVersion)] = value; } }
        public SonyInputSettings SonyInputSettings { get { return this[nameof(SonyInputSettings)].As<SonyInputSettings>(); } set { this["SonyInputSettings"] = value; } }
        public FSDGameInstance FSDGameInstance { get { return this[nameof(FSDGameInstance)].As<FSDGameInstance>(); } set { this["FSDGameInstance"] = value; } }
        public void TutorialsResetDelegate__DelegateSignature() { Invoke(nameof(TutorialsResetDelegate__DelegateSignature)); }
        public bool TrySellResource(ResourceData Resource, int amount, int Price) { return Invoke<bool>(nameof(TrySellResource), Resource, amount, Price); }
        public bool TryDeductResources(Object Resources) { return Invoke<bool>(nameof(TryDeductResources), Resources); }
        public bool TryDeductCredits(int amount) { return Invoke<bool>(nameof(TryDeductCredits), amount); }
        public bool TryBuyResource(ResourceData Resource, int amount, int Price) { return Invoke<bool>(nameof(TryBuyResource), Resource, amount, Price); }
        public void SkinSignature__DelegateSignature(ItemSkin Skin, ItemID ItemID) { Invoke(nameof(SkinSignature__DelegateSignature), Skin, ItemID); }
        public bool ShouldDisplayFirstSchematicMessage() { return Invoke<bool>(nameof(ShouldDisplayFirstSchematicMessage)); }
        public void SetSonyInputSettingMotionXMapping(ESonyControllerMotionMapping NewValue) { Invoke(nameof(SetSonyInputSettingMotionXMapping), NewValue); }
        public void SetSonyInputSettingLightMode(ESonyControllerLightMode NewValue) { Invoke(nameof(SetSonyInputSettingLightMode), NewValue); }
        public void SetSonyInputSettingFloat(Object WorldContext, ESonyInputSettingsFloats Setting, float NewValue) { Invoke(nameof(SetSonyInputSettingFloat), WorldContext, Setting, NewValue); }
        public void SetSonyInputSettingBool(ESonyInputSettingsBools Setting, bool NewValue) { Invoke(nameof(SetSonyInputSettingBool), Setting, NewValue); }
        public bool SetPersonalAnalytics(bool State) { return Invoke<bool>(nameof(SetPersonalAnalytics), State); }
        public void SetIsModded(bool modded) { Invoke(nameof(SetIsModded), modded); }
        public void SetIndexAndName(int Index, Object Name) { Invoke(nameof(SetIndexAndName), Index, Name); }
        public void SetIgnoreRandomLoadout(bool inIgnoreRandomLoadout) { Invoke(nameof(SetIgnoreRandomLoadout), inIgnoreRandomLoadout); }
        public void SetHasSentSteamInfo() { Invoke(nameof(SetHasSentSteamInfo)); }
        public void SetHasJoinedXboxClub() { Invoke(nameof(SetHasJoinedXboxClub)); }
        public void SetHasClaimSteamGroupLoot() { Invoke(nameof(SetHasClaimSteamGroupLoot)); }
        public void SetFaction(EFSDFaction newFaction, bool Reasign) { Invoke(nameof(SetFaction), newFaction, Reasign); }
        public void SetEquippedItemID(EItemCategory Category, PlayerCharacterID PlayerId, ItemID Item) { Invoke(nameof(SetEquippedItemID), Category, PlayerId, Item); }
        public void SetEquippedItem(EItemCategory Category, PlayerCharacterID PlayerId, Object Item) { Invoke(nameof(SetEquippedItem), Category, PlayerId, Item); }
        public void SetDiscordReward(bool State) { Invoke(nameof(SetDiscordReward), State); }
        public void SetCharacterLoadout(PlayerCharacterID characterID, int loadoutNumber) { Invoke(nameof(SetCharacterLoadout), characterID, loadoutNumber); }
        public void SetBoscoAllowed(bool aIsBoscoAllowed) { Invoke(nameof(SetBoscoAllowed), aIsBoscoAllowed); }
        public bool SetAnonymousAnalytics(bool State) { return Invoke<bool>(nameof(SetAnonymousAnalytics), State); }
        public void SaveToDisk() { Invoke(nameof(SaveToDisk)); }
        public bool SaveSlotToDisk(FSDSaveGame SaveSlot, Object slotName, int userIdx) { return Invoke<bool>(nameof(SaveSlotToDisk), SaveSlot, slotName, userIdx); }
        public void RetirementSignature__DelegateSignature(Object CharacterClass, int RetirementCount) { Invoke(nameof(RetirementSignature__DelegateSignature), CharacterClass, RetirementCount); }
        public int RetireCharacter(PlayerCharacterID characterID) { return Invoke<int>(nameof(RetireCharacter), characterID); }
        public void ResourceAmountChangedDelegate__DelegateSignature(ResourceData Resource, float currentAmount) { Invoke(nameof(ResourceAmountChangedDelegate__DelegateSignature), Resource, currentAmount); }
        public void ResetTutorials() { Invoke(nameof(ResetTutorials)); }
        public void ResetSonyTouchSettings() { Invoke(nameof(ResetSonyTouchSettings)); }
        public void ResetSonyMotionSettings() { Invoke(nameof(ResetSonyMotionSettings)); }
        public void ResetSonyDualSenseSettings() { Invoke(nameof(ResetSonyDualSenseSettings)); }
        public void ResetRejoinSessionId() { Invoke(nameof(ResetRejoinSessionId)); }
        public void RejoinAttempted() { Invoke(nameof(RejoinAttempted)); }
        public void RefreshLoadoutFromCharacter(PlayerCharacterID characterID) { Invoke(nameof(RefreshLoadoutFromCharacter), characterID); }
        public bool RecievedDiscordReward() { return Invoke<bool>(nameof(RecievedDiscordReward)); }
        public Object PromotedClassesString() { return Invoke<Object>(nameof(PromotedClassesString)); }
        public void PlayerProgressChangedSignature__DelegateSignature(int Rank, int Stars) { Invoke(nameof(PlayerProgressChangedSignature__DelegateSignature), Rank, Stars); }
        public void PersonalMatricsChangedSignature__DelegateSignature(bool AllowPersonalMetrics) { Invoke(nameof(PersonalMatricsChangedSignature__DelegateSignature), AllowPersonalMetrics); }
        public void PerkPointsChangedSignature__DelegateSignature(int PerkPoints, int Change) { Invoke(nameof(PerkPointsChangedSignature__DelegateSignature), PerkPoints, Change); }
        public void MarkRetirementRewardScreenSeen(PlayerCharacterID characterID) { Invoke(nameof(MarkRetirementRewardScreenSeen), characterID); }
        public void MarkFirstSchematicMessageSeen() { Invoke(nameof(MarkFirstSchematicMessageSeen)); }
        public void LevelUpCharacter(Object WorldContext, PlayerCharacterID characterID) { Invoke(nameof(LevelUpCharacter), WorldContext, characterID); }
        public void ItemUnlockedDelegate__DelegateSignature() { Invoke(nameof(ItemUnlockedDelegate__DelegateSignature)); }
        public void ItemUINotificationDelegate__DelegateSignature() { Invoke(nameof(ItemUINotificationDelegate__DelegateSignature)); }
        public bool IsObsolete() { return Invoke<bool>(nameof(IsObsolete)); }
        public bool IsInMinersManual(Guid ObjectID) { return Invoke<bool>(nameof(IsInMinersManual), ObjectID); }
        public bool IsFirstRejoinAttempt() { return Invoke<bool>(nameof(IsFirstRejoinAttempt)); }
        public bool HasSeenRetirementRewardScreen() { return Invoke<bool>(nameof(HasSeenRetirementRewardScreen)); }
        public bool HasCredits(int amount) { return Invoke<bool>(nameof(HasCredits), amount); }
        public bool HasCharacterRetired(PlayerCharacterID characterID) { return Invoke<bool>(nameof(HasCharacterRetired), characterID); }
        public bool HasCharacterCompletedRetirementCampaign(PlayerCharacterID characterID) { return Invoke<bool>(nameof(HasCharacterCompletedRetirementCampaign), characterID); }
        public bool HasBackupWithMoreProgress(FSDGameInstance GameInstance) { return Invoke<bool>(nameof(HasBackupWithMoreProgress), GameInstance); }
        public bool HasAnyCharacterRetired() { return Invoke<bool>(nameof(HasAnyCharacterRetired)); }
        public int GetTotalGamesPlayed() { return Invoke<int>(nameof(GetTotalGamesPlayed)); }
        public int GetTotalCharacterXP() { return Invoke<int>(nameof(GetTotalCharacterXP)); }
        public ESonyControllerMotionMapping GetSonyInputSettingMotionXMapping() { return Invoke<ESonyControllerMotionMapping>(nameof(GetSonyInputSettingMotionXMapping)); }
        public ESonyControllerLightMode GetSonyInputSettingLightMode() { return Invoke<ESonyControllerLightMode>(nameof(GetSonyInputSettingLightMode)); }
        public float GetSonyInputSettingFloat(ESonyInputSettingsFloats Setting) { return Invoke<float>(nameof(GetSonyInputSettingFloat), Setting); }
        public bool GetSonyInputSettingBool(ESonyInputSettingsBools Setting) { return Invoke<bool>(nameof(GetSonyInputSettingBool), Setting); }
        public DateTime GetSlotTimeStamp() { return Invoke<DateTime>(nameof(GetSlotTimeStamp)); }
        public Object GetSlotLoadedFrom() { return Invoke<Object>(nameof(GetSlotLoadedFrom)); }
        public int GetSelectedLoadoutIndex(PlayerCharacterID characterID) { return Invoke<int>(nameof(GetSelectedLoadoutIndex), characterID); }
        public Object GetSaveSlotName(int userIdx) { return Invoke<Object>(nameof(GetSaveSlotName), userIdx); }
        public int GetResourceSellingPrice(ResourceData Resource, int amount) { return Invoke<int>(nameof(GetResourceSellingPrice), Resource, amount); }
        public int GetResourceBuyingPrice(ResourceData Resource, int amount) { return Invoke<int>(nameof(GetResourceBuyingPrice), Resource, amount); }
        public float GetResourceAmount(ResourceData Resource) { return Invoke<float>(nameof(GetResourceAmount), Resource); }
        public int GetRequiredXPForLevel(int Level) { return Invoke<int>(nameof(GetRequiredXPForLevel), Level); }
        public Object GetRejoinSessionId() { return Invoke<Object>(nameof(GetRejoinSessionId)); }
        public int GetPurchasableItemCount() { return Invoke<int>(nameof(GetPurchasableItemCount)); }
        public int GetPlayerRetirementRank() { return Invoke<int>(nameof(GetPlayerRetirementRank)); }
        public int GetPlayerRank() { return Invoke<int>(nameof(GetPlayerRank)); }
        public int GetPerkPoints() { return Invoke<int>(nameof(GetPerkPoints)); }
        public Object GetName() { return Invoke<Object>(nameof(GetName)); }
        public int GetMaxSaveSlots() { return Invoke<int>(nameof(GetMaxSaveSlots)); }
        public int GetMainSaves(FSDGameInstance GameInstance, UArray<FSDSaveGame> outMainSaves) { return Invoke<int>(nameof(GetMainSaves), GameInstance, outMainSaves); }
        public bool GetIsModded() { return Invoke<bool>(nameof(GetIsModded)); }
        public int GetIndex() { return Invoke<int>(nameof(GetIndex)); }
        public bool GetHasSentSteamInfo() { return Invoke<bool>(nameof(GetHasSentSteamInfo)); }
        public bool GetHasClaimedSteamGroupLoot() { return Invoke<bool>(nameof(GetHasClaimedSteamGroupLoot)); }
        public EFSDFaction GetFaction() { return Invoke<EFSDFaction>(nameof(GetFaction)); }
        public ItemID GetEquippedItemID(EItemCategory Category, PlayerCharacterID PlayerId) { return Invoke<ItemID>(nameof(GetEquippedItemID), Category, PlayerId); }
        public Object GetEquippedItem(EItemCategory Category, PlayerCharacterID PlayerId) { return Invoke<Object>(nameof(GetEquippedItem), Category, PlayerId); }
        public int GetCredits() { return Invoke<int>(nameof(GetCredits)); }
        public int GetClassXP(PlayerCharacterID characterID) { return Invoke<int>(nameof(GetClassXP), characterID); }
        public int GetClassLevel(PlayerCharacterID characterID) { return Invoke<int>(nameof(GetClassLevel), characterID); }
        public int GetCharacterRetirementCount(Guid PlayerId) { return Invoke<int>(nameof(GetCharacterRetirementCount), PlayerId); }
        public bool GetBoscoAllowed() { return Invoke<bool>(nameof(GetBoscoAllowed)); }
        public int GetAvailableUserSlotIndex(FSDGameInstance GameInstance) { return Invoke<int>(nameof(GetAvailableUserSlotIndex), GameInstance); }
        public UArray<FSDSaveGame> GetAllSavesFromDisk(FSDGameInstance GameInstance) { return Invoke<UArray<FSDSaveGame>>(nameof(GetAllSavesFromDisk), GameInstance); }
        public void ForgingXPDelegate__DelegateSignature(float XP) { Invoke(nameof(ForgingXPDelegate__DelegateSignature), XP); }
        public void ForceSetIsModded(bool modded) { Invoke(nameof(ForceSetIsModded), modded); }
        public void FixNamingOfMainSave(FSDSaveGame mainsave) { Invoke(nameof(FixNamingOfMainSave), mainsave); }
        public bool DeleteFromDisk(FSDGameInstance GameInstance, Object slotName, int userIdx) { return Invoke<bool>(nameof(DeleteFromDisk), GameInstance, slotName, userIdx); }
        public bool DeductPerkPoints(int amount) { return Invoke<bool>(nameof(DeductPerkPoints), amount); }
        public void CreditsChangedSignature__DelegateSignature(int Credits) { Invoke(nameof(CreditsChangedSignature__DelegateSignature), Credits); }
        public void CraftingMasteryChanged__DelegateSignature(VanityMasteryResult Result) { Invoke(nameof(CraftingMasteryChanged__DelegateSignature), Result); }
        public void CheckPromotionAchievementProgress(Object WorldContext, bool IsRetroactive) { Invoke(nameof(CheckPromotionAchievementProgress), WorldContext, IsRetroactive); }
        public void CharacterSignature__DelegateSignature(Object CharacterClass) { Invoke(nameof(CharacterSignature__DelegateSignature), CharacterClass); }
        public void CharacterProgressChangedSignature__DelegateSignature(Object CharacterClass, int Level, float Progress) { Invoke(nameof(CharacterProgressChangedSignature__DelegateSignature), CharacterClass, Level, Progress); }
        public bool CanAfford(Object Resources) { return Invoke<bool>(nameof(CanAfford), Resources); }
        public void AnonymousMatricsChangedSignature__DelegateSignature(bool AllowAnonymousMetrics) { Invoke(nameof(AnonymousMatricsChangedSignature__DelegateSignature), AllowAnonymousMetrics); }
        public void AddPerkPoints(int amount) { Invoke(nameof(AddPerkPoints), amount); }
        public void AddGamePlayed() { Invoke(nameof(AddGamePlayed)); }
        public int AddCredits(int amount) { return Invoke<int>(nameof(AddCredits), amount); }
        public int AddClassXP(Object WorldContext, PlayerCharacterID characterID, int XP) { return Invoke<int>(nameof(AddClassXP), WorldContext, characterID, XP); }
    }
    public class OptionalUICategory : DataAsset
    {
        public OptionalUICategory(nint addr) : base(addr) { }
        public Object OnVisibilityChanged { get { return this[nameof(OnVisibilityChanged)]; } set { this[nameof(OnVisibilityChanged)] = value; } }
        public Guid Guid { get { return this[nameof(Guid)].As<Guid>(); } set { this["Guid"] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public void VisibilityChanged__DelegateSignature(OptionalUICategory Category, bool IsVisible) { Invoke(nameof(VisibilityChanged__DelegateSignature), Category, IsVisible); }
        public void SetVisible(Object WorldContext, bool IsCategoryVisible) { Invoke(nameof(SetVisible), WorldContext, IsCategoryVisible); }
        public bool IsVisible(Object WorldContext) { return Invoke<bool>(nameof(IsVisible), WorldContext); }
    }
    public class FSDSendToURL : Object
    {
        public FSDSendToURL(nint addr) : base(addr) { }
    }
    public class FSDSessionHandler : Object
    {
        public FSDSessionHandler(nint addr) : base(addr) { }
    }
    public class FSDSessionUpdater : Object
    {
        public FSDSessionUpdater(nint addr) : base(addr) { }
        public Object OnNewFSDSessionID { get { return this[nameof(OnNewFSDSessionID)]; } set { this[nameof(OnNewFSDSessionID)] = value; } }
        public FSDSessionHandler SessionHandler { get { return this[nameof(SessionHandler)].As<FSDSessionHandler>(); } set { this["SessionHandler"] = value; } }
        public FSDLobbyHandler LobbyHandler { get { return this[nameof(LobbyHandler)].As<FSDLobbyHandler>(); } set { this["LobbyHandler"] = value; } }
    }
    public class FSDSkeletalMeshComponent : SkeletalMeshComponent
    {
        public FSDSkeletalMeshComponent(nint addr) : base(addr) { }
    }
    public class FSDSplineLibrary : BlueprintFunctionLibrary
    {
        public FSDSplineLibrary(nint addr) : base(addr) { }
        public bool SplineComponentSphereTrace(SplineComponent SplineComponent, float Radius, byte TraceType, float StepSize, UArray<Actor> IgnoreActors, HitResult OutHitResult, Vector Offset) { return Invoke<bool>(nameof(SplineComponentSphereTrace), SplineComponent, Radius, TraceType, StepSize, IgnoreActors, OutHitResult, Offset); }
        public void SetStartAndEndTangentsCurve2D(InterpCurveVector2D Curve, Vector2D StartTangent, Vector2D EndTangent) { Invoke(nameof(SetStartAndEndTangentsCurve2D), Curve, StartTangent, EndTangent); }
        public UArray<Transform> GetSplineComponentTransforms(SplineComponent SplineComponent, float StepSize, byte Space) { return Invoke<UArray<Transform>>(nameof(GetSplineComponentTransforms), SplineComponent, StepSize, Space); }
        public void GetLocationAndTangentsAtSplinePoint(SplineComponent Spline, int PointIndex, Vector Location, Vector ArriveTangent, Vector LeaveTangent, byte CoordinateSpace) { Invoke(nameof(GetLocationAndTangentsAtSplinePoint), Spline, PointIndex, Location, ArriveTangent, LeaveTangent, CoordinateSpace); }
        public void EvalCurveScaled2D(InterpCurveVector2D Curve, float Key, Vector2D ScaleBy, Vector2D OutPosition, Vector2D OutTangent) { Invoke(nameof(EvalCurveScaled2D), Curve, Key, ScaleBy, OutPosition, OutTangent); }
        public void EvalCurve2D(InterpCurveVector2D Curve, float Key, Vector2D OutPosition, Vector2D OutTangent) { Invoke(nameof(EvalCurve2D), Curve, Key, OutPosition, OutTangent); }
        public void DrawCurveScaled2D(PaintContext Context, InterpCurveVector2D Curve, Vector2D ScaleBy, Curve2DAppearance Appearance, float Opacity) { Invoke(nameof(DrawCurveScaled2D), Context, Curve, ScaleBy, Appearance, Opacity); }
        public void DrawCurve2D(PaintContext Context, InterpCurveVector2D Curve, Curve2DAppearance Appearance, float Opacity) { Invoke(nameof(DrawCurve2D), Context, Curve, Appearance, Opacity); }
        public void DrawBezierScaled2D(PaintContext Context, Vector2D InStartPos, Vector2D InStartTangent, Vector2D InEndPos, Vector2D InEndTangent, Curve2DAppearance InAppearance, Vector2D ScaleBy, float Opacity, bool InClampTangents) { Invoke(nameof(DrawBezierScaled2D), Context, InStartPos, InStartTangent, InEndPos, InEndTangent, InAppearance, ScaleBy, Opacity, InClampTangents); }
        public void DrawBezier2D(PaintContext Context, Vector2D InStartPos, Vector2D InStartTangent, Vector2D InEndPos, Vector2D InEndTangent, Curve2DAppearance InAppearance, float Opacity, bool InClampTangents) { Invoke(nameof(DrawBezier2D), Context, InStartPos, InStartTangent, InEndPos, InEndTangent, InAppearance, Opacity, InClampTangents); }
        public InterpCurveVector2D CreateCurveWithTangents2D(UArray<Vector2D> Positions, Vector2D StartTangent, Vector2D EndTangent, byte Mode) { return Invoke<InterpCurveVector2D>(nameof(CreateCurveWithTangents2D), Positions, StartTangent, EndTangent, Mode); }
        public InterpCurveVector2D CreateCurve2D(UArray<Vector2D> Positions, byte Mode) { return Invoke<InterpCurveVector2D>(nameof(CreateCurve2D), Positions, Mode); }
        public void ConvertSplineDistanceToInputKey(SplineComponent SplineComponent, SplineComponent OptionalTargetSpline) { Invoke(nameof(ConvertSplineDistanceToInputKey), SplineComponent, OptionalTargetSpline); }
        public bool CarveAroundSplinePoints(Object WorldContext, Vector InStartLocation, Vector InStartTangent, Vector InEndLocation, Vector InEndTangent, float InRadius, TerrainMaterial InTerrainMaterial, ECarveFilterType InCarveFilter, EPreciousMaterialOptions InPrecious) { return Invoke<bool>(nameof(CarveAroundSplinePoints), WorldContext, InStartLocation, InStartTangent, InEndLocation, InEndTangent, InRadius, InTerrainMaterial, InCarveFilter, InPrecious); }
        public bool CarveAroundSplineMesh(SplineMeshComponent InMesh, float InRadius, TerrainMaterial InTerrainMaterial, ECarveFilterType InCarveFilter, EPreciousMaterialOptions InPrecious) { return Invoke<bool>(nameof(CarveAroundSplineMesh), InMesh, InRadius, InTerrainMaterial, InCarveFilter, InPrecious); }
        public float ApproximateSplineDistanceAtWorldLocation(SplineComponent Spline, Vector WorldLocation) { return Invoke<float>(nameof(ApproximateSplineDistanceAtWorldLocation), Spline, WorldLocation); }
    }
    public class FSDSteamUserStats : ActorComponent
    {
        public FSDSteamUserStats(nint addr) : base(addr) { }
    }
    public class FSDSteamUtils : BlueprintFunctionLibrary
    {
        public FSDSteamUtils(nint addr) : base(addr) { }
        public bool PlayerIsFollowingUsOnSteam() { return Invoke<bool>(nameof(PlayerIsFollowingUsOnSteam)); }
        public void OpenURLInSteamBrowser(Object URL) { Invoke(nameof(OpenURLInSteamBrowser), URL); }
        public void OpenSteamSettings() { Invoke(nameof(OpenSteamSettings)); }
        public bool IsTextFilteringInitialized() { return Invoke<bool>(nameof(IsTextFilteringInitialized)); }
        public bool IsSteamLoaded() { return Invoke<bool>(nameof(IsSteamLoaded)); }
        public bool IsDev(PlayerState PlayerState) { return Invoke<bool>(nameof(IsDev), PlayerState); }
        public bool InitializeFilterText() { return Invoke<bool>(nameof(InitializeFilterText)); }
        public bool HasSupporterUpgrade() { return Invoke<bool>(nameof(HasSupporterUpgrade)); }
        public bool HasDeluxeEdition() { return Invoke<bool>(nameof(HasDeluxeEdition)); }
        public bool HasContentCreatorEdition() { return Invoke<bool>(nameof(HasContentCreatorEdition)); }
        public Object GetSteamRegion() { return Invoke<Object>(nameof(GetSteamRegion)); }
        public Object GetSteamLanguage() { return Invoke<Object>(nameof(GetSteamLanguage)); }
        public Object GetSteamBranchString() { return Invoke<Object>(nameof(GetSteamBranchString)); }
        public ESteamBranch GetSteamBranch() { return Invoke<ESteamBranch>(nameof(GetSteamBranch)); }
        public Object GetPlayerSteamName() { return Invoke<Object>(nameof(GetPlayerSteamName)); }
        public Object GetPlayerSteamID() { return Invoke<Object>(nameof(GetPlayerSteamID)); }
        public Object FilterProfanityText(Object inputMessage) { return Invoke<Object>(nameof(FilterProfanityText), inputMessage); }
    }
    public class FSDPS4Utils : BlueprintFunctionLibrary
    {
        public FSDPS4Utils(nint addr) : base(addr) { }
        public void SetUGCAllowed(bool bAllowed) { Invoke(nameof(SetUGCAllowed), bAllowed); }
        public bool IsUGCAllowed() { return Invoke<bool>(nameof(IsUGCAllowed)); }
        public bool IsPS4SystemLoaded() { return Invoke<bool>(nameof(IsPS4SystemLoaded)); }
    }
    public class FSDTutorialSettings : DataAsset
    {
        public FSDTutorialSettings(nint addr) : base(addr) { }
        public int RequiredCPTreasures { get { return this[nameof(RequiredCPTreasures)].GetValue<int>(); } set { this[nameof(RequiredCPTreasures)].SetValue<int>(value); } }
        public int RequiredCPMachineEvents { get { return this[nameof(RequiredCPMachineEvents)].GetValue<int>(); } set { this[nameof(RequiredCPMachineEvents)].SetValue<int>(value); } }
        public int RequiredCPVeterans { get { return this[nameof(RequiredCPVeterans)].GetValue<int>(); } set { this[nameof(RequiredCPVeterans)].SetValue<int>(value); } }
        public UArray<NewPlayerMutator> FirstMissionsMutators { get { return new UArray<NewPlayerMutator>(this[nameof(FirstMissionsMutators)].Address); } }
    }
    public class FSDLevelLoadingPersistentWidget : UserWidget
    {
        public FSDLevelLoadingPersistentWidget(nint addr) : base(addr) { }
        public void SetFadeProgress(float fade, bool ToSpaceRig, Texture LoadingImage) { Invoke(nameof(SetFadeProgress), fade, ToSpaceRig, LoadingImage); }
    }
    public class FSDLabelWidget : TextBlock
    {
        public FSDLabelWidget(nint addr) : base(addr) { }
        public void SetWrapTextAt(float WrapAt) { Invoke(nameof(SetWrapTextAt), WrapAt); }
        public void SetWrappingPolicy(ETextWrappingPolicy Policy) { Invoke(nameof(SetWrappingPolicy), Policy); }
        public void SetMargin(Margin NewMargin) { Invoke(nameof(SetMargin), NewMargin); }
        public void SetLineHeightPercentage(float percentage) { Invoke(nameof(SetLineHeightPercentage), percentage); }
        public void SetFontSize(int Size) { Invoke(nameof(SetFontSize), Size); }
        public int GetFontSize() { return Invoke<int>(nameof(GetFontSize)); }
    }
    public class FSDWidgetBlueprintLibrary : BlueprintFunctionLibrary
    {
        public FSDWidgetBlueprintLibrary(nint addr) : base(addr) { }
        public void WidgetDelegate__DelegateSignature(UserWidget Widget) { Invoke(nameof(WidgetDelegate__DelegateSignature), Widget); }
        public void WidgetCreatedOrReusedDelegate__DelegateSignature(bool WasCreated, UserWidget Widget, int ActiveIndex) { Invoke(nameof(WidgetCreatedOrReusedDelegate__DelegateSignature), WasCreated, Widget, ActiveIndex); }
        public void ToggleAnimationLooping(Object WorldContext, WidgetAnimation InAnimation, WidgetAnimationSettings InSettings, bool InLoop, bool OutPlayingChanged, bool OutIsPlaying) { Invoke(nameof(ToggleAnimationLooping), WorldContext, InAnimation, InSettings, InLoop, OutPlayingChanged, OutIsPlaying); }
        public bool TextSmallerThan(Object Text1, Object Text2) { return Invoke<bool>(nameof(TextSmallerThan), Text1, Text2); }
        public bool TextGreaterThan(Object Text1, Object Text2) { return Invoke<bool>(nameof(TextGreaterThan), Text1, Text2); }
        public UArray<Widget> SortWidgetArray(UArray<Widget> InWidgets, Object InCompareFunction) { return Invoke<UArray<Widget>>(nameof(SortWidgetArray), InWidgets, InCompareFunction); }
        public void SimpleBox(PaintContext Context, Vector2D Position, Vector2D Size, LinearColor Tint) { Invoke(nameof(SimpleBox), Context, Position, Size, Tint); }
        public TimerHandle SetTimerForNextTick(Object WorldContext, Object TimerDelegate) { return Invoke<TimerHandle>(nameof(SetTimerForNextTick), WorldContext, TimerDelegate); }
        public void SetSizeBoxSettings(SizeBox InSizeBox, SizeBoxSettings InSettings) { Invoke(nameof(SetSizeBoxSettings), InSizeBox, InSettings); }
        public void SetProgressBarType(ProgressBar InProgressBar, byte InType) { Invoke(nameof(SetProgressBarType), InProgressBar, InType); }
        public void SetMousePosition(Object WorldContextObject, int X, int Y) { Invoke(nameof(SetMousePosition), WorldContextObject, X, Y); }
        public void SetChildrenVisibility(PanelWidget Panel, ESlateVisibility Visibility, int StartIndex, Object OptionalClassFilter) { Invoke(nameof(SetChildrenVisibility), Panel, Visibility, StartIndex, OptionalClassFilter); }
        public void ScrubAnimation(Object WorldContext, WidgetAnimation InAnimation, float Progress01) { Invoke(nameof(ScrubAnimation), WorldContext, InAnimation, Progress01); }
        public void ScaleTextBlockToHeight(TextBlock TextBlock, float TargetHeight, bool SetMinimimumWidth) { Invoke(nameof(ScaleTextBlockToHeight), TextBlock, TargetHeight, SetMinimimumWidth); }
        public void ScaleImageToHeight(Image Image, float TargetHeight) { Invoke(nameof(ScaleImageToHeight), Image, TargetHeight); }
        public void PrintStrings(Object WorldContextObject, UArray<Object> InStrings, bool bPrintToScreen, bool bPrintToLog, LinearColor TextColor, float Duration) { Invoke(nameof(PrintStrings), WorldContextObject, InStrings, bPrintToScreen, bPrintToLog, TextColor, Duration); }
        public Object MidIgnoringWhiteSpace(Object Source, int Index, int Count) { return Invoke<Object>(nameof(MidIgnoringWhiteSpace), Source, Index, Count); }
        public Vector2D MeasureTextSize(Object Text, SlateFontInfo Font) { return Invoke<Vector2D>(nameof(MeasureTextSize), Text, Font); }
        public Vector2D MeasureTextBlockSize(TextBlock TextBlock) { return Invoke<Vector2D>(nameof(MeasureTextBlockSize), TextBlock); }
        public void Line(PaintContext Context, Vector2D Pos1, Vector2D Pos2, LinearColor Tint) { Invoke(nameof(Line), Context, Pos1, Pos2, Tint); }
        public LinearColor LerpColors(UArray<LinearColor> Colors, bool Interpolate, float Progress01) { return Invoke<LinearColor>(nameof(LerpColors), Colors, Interpolate, Progress01); }
        public int LengthIgnoringWhitespace(Object Source) { return Invoke<int>(nameof(LengthIgnoringWhitespace), Source); }
        public bool IsWindowsPlatform(Object WorldContextObject) { return Invoke<bool>(nameof(IsWindowsPlatform), WorldContextObject); }
        public bool IsWhiteSpaceAt(Object Source, int Index) { return Invoke<bool>(nameof(IsWhiteSpaceAt), Source, Index); }
        public bool IsWhiteSpace(Object Source) { return Invoke<bool>(nameof(IsWhiteSpace), Source); }
        public bool IsHUDVisible(Object WorldContextObject) { return Invoke<bool>(nameof(IsHUDVisible), WorldContextObject); }
        public Object IntToRomanNumeral(int Value) { return Invoke<Object>(nameof(IntToRomanNumeral), Value); }
        public bool HasAnyVisibleChildren(PanelWidget Panel, int StartIndex, Object OptionalClassFilter) { return Invoke<bool>(nameof(HasAnyVisibleChildren), Panel, StartIndex, OptionalClassFilter); }
        public Object GetShortTimeString(int TotalSeconds, bool BlinkDelimiter) { return Invoke<Object>(nameof(GetShortTimeString), TotalSeconds, BlinkDelimiter); }
        public WindowWidget GetParentWindowWidget(UserWidget InWidget) { return Invoke<WindowWidget>(nameof(GetParentWindowWidget), InWidget); }
        public UserWidget GetParentUserWidget(UserWidget InWidget) { return Invoke<UserWidget>(nameof(GetParentUserWidget), InWidget); }
        public FSDPlayerState GetOwningFSDPlayerState(Widget Target) { return Invoke<FSDPlayerState>(nameof(GetOwningFSDPlayerState), Target); }
        public Object GetKeyName(Key Key) { return Invoke<Object>(nameof(GetKeyName), Key); }
        public float GetFontMaxHeight(SlateFontInfo Font) { return Invoke<float>(nameof(GetFontMaxHeight), Font); }
        public float GetFontBaseline(SlateFontInfo Font) { return Invoke<float>(nameof(GetFontBaseline), Font); }
        public Widget GetFocusedWidget(Object WorldContextObject, PlayerController Controller) { return Invoke<Widget>(nameof(GetFocusedWidget), WorldContextObject, Controller); }
        public UserWidget GetFocusableParentUserWidget(UserWidget InWidget) { return Invoke<UserWidget>(nameof(GetFocusableParentUserWidget), InWidget); }
        public Vector2D GetDrawSize(PaintContext InContext) { return Invoke<Vector2D>(nameof(GetDrawSize), InContext); }
        public FSDCheatManager GetCheatManager(Object WorldContextObject) { return Invoke<FSDCheatManager>(nameof(GetCheatManager), WorldContextObject); }
        public void FixupRetainerWidgetUpdateInEditor(RetainerBox InWidget) { Invoke(nameof(FixupRetainerWidgetUpdateInEditor), InWidget); }
        public Widget FindChildWidget(PanelWidget ParentWidget, Object WidgetClass, bool SearchChildren) { return Invoke<Widget>(nameof(FindChildWidget), ParentWidget, WidgetClass, SearchChildren); }
        public VerticalBox CreateVerticalBox(Object WorldContext) { return Invoke<VerticalBox>(nameof(CreateVerticalBox), WorldContext); }
        public TextBlock CreateTextBlock(Object WorldContext, Object Text, SlateFontInfo Font, byte Justification, LinearColor Color, bool WrapText) { return Invoke<TextBlock>(nameof(CreateTextBlock), WorldContext, Text, Font, Justification, Color, WrapText); }
        public Spacer CreateSpacer(Object WorldContext, Vector2D Size) { return Invoke<Spacer>(nameof(CreateSpacer), WorldContext, Size); }
        public UArray<UserWidget> CreateOrReuseChildrenWithCallbackEx(PanelWidget Panel, int Count, Object WidgetClass, Object OnCreatedOrReused, Object OnCollapsed) { return Invoke<UArray<UserWidget>>(nameof(CreateOrReuseChildrenWithCallbackEx), Panel, Count, WidgetClass, OnCreatedOrReused, OnCollapsed); }
        public UArray<UserWidget> CreateOrReuseChildrenWithCallback(PanelWidget Panel, int Count, Object WidgetClass, Object OnCreatedOrReused) { return Invoke<UArray<UserWidget>>(nameof(CreateOrReuseChildrenWithCallback), Panel, Count, WidgetClass, OnCreatedOrReused); }
        public UArray<UserWidget> CreateOrReuseChildren(PanelWidget Panel, int Count, Object WidgetClass) { return Invoke<UArray<UserWidget>>(nameof(CreateOrReuseChildren), Panel, Count, WidgetClass); }
        public Image CreateImageSized(Object WorldContext, Texture2D Texture, LinearColor Tint, Vector2D Size) { return Invoke<Image>(nameof(CreateImageSized), WorldContext, Texture, Tint, Size); }
        public Image CreateImageFromBrush(Object WorldContext, SlateBrush InBrush, LinearColor InColorAndOpacity) { return Invoke<Image>(nameof(CreateImageFromBrush), WorldContext, InBrush, InColorAndOpacity); }
        public Image CreateImage(Object WorldContext, Texture2D Texture, LinearColor Tint, bool AutoSize) { return Invoke<Image>(nameof(CreateImage), WorldContext, Texture, Tint, AutoSize); }
        public HorizontalBox CreateHorizontalBox(Object WorldContext) { return Invoke<HorizontalBox>(nameof(CreateHorizontalBox), WorldContext); }
        public bool CompareWidgetsDelegate__DelegateSignature(Widget InFirstWidget, Widget InSecondWidget) { return Invoke<bool>(nameof(CompareWidgetsDelegate__DelegateSignature), InFirstWidget, InSecondWidget); }
        public Object ClampTextLength(Object Text, int MaxLength, Object CutOffIndicator) { return Invoke<Object>(nameof(ClampTextLength), Text, MaxLength, CutOffIndicator); }
        public void Box(PaintContext Context, Vector2D Position, Vector2D Size, SlateBrush Brush, LinearColor Tint) { Invoke(nameof(Box), Context, Position, Size, Brush, Tint); }
        public bool AreWidgetsIntersecting(Widget InWidget1, Widget InWidget2) { return Invoke<bool>(nameof(AreWidgetsIntersecting), InWidget1, InWidget2); }
        public Widget AddWidgetToRow(VerticalBox VerticalBox, Widget Widget, int MaxWidgetsPerRow, float WidgetSpacing, float RowSpacing, HorizontalBoxSlot OutSlot, HorizontalBox OutRow) { return Invoke<Widget>(nameof(AddWidgetToRow), VerticalBox, Widget, MaxWidgetsPerRow, WidgetSpacing, RowSpacing, OutSlot, OutRow); }
        public Widget AddChildToVerticalBoxEx(VerticalBox VerticalBox, Widget Widget, byte HorizontalAlignment, byte VerticalAlignment, float Size, Margin Padding, VerticalBoxSlot OutSlot, VerticalBox OutVerticalBox) { return Invoke<Widget>(nameof(AddChildToVerticalBoxEx), VerticalBox, Widget, HorizontalAlignment, VerticalAlignment, Size, Padding, OutSlot, OutVerticalBox); }
        public Widget AddChildToUniformGridEx(UniformGridPanel GridPanel, Widget Widget, byte HorizontalAlignment, byte VerticalAlignment, int Column, int Row, UniformGridSlot OutSlot, UniformGridPanel OutGridPanel) { return Invoke<Widget>(nameof(AddChildToUniformGridEx), GridPanel, Widget, HorizontalAlignment, VerticalAlignment, Column, Row, OutSlot, OutGridPanel); }
        public Widget AddChildToOverlayEx(Overlay OverlayPanel, Widget Widget, byte HorizontalAlignment, byte VerticalAlignment, Margin Padding, OverlaySlot OutSlot, Overlay OutOverlayPanel) { return Invoke<Widget>(nameof(AddChildToOverlayEx), OverlayPanel, Widget, HorizontalAlignment, VerticalAlignment, Padding, OutSlot, OutOverlayPanel); }
        public Widget AddChildToHorizontalBoxEx(HorizontalBox HorizontalBox, Widget Widget, byte HorizontalAlignment, byte VerticalAlignment, float Size, Margin Padding, HorizontalBoxSlot OutSlot, HorizontalBox OutHorizontalBox) { return Invoke<Widget>(nameof(AddChildToHorizontalBoxEx), HorizontalBox, Widget, HorizontalAlignment, VerticalAlignment, Size, Padding, OutSlot, OutHorizontalBox); }
        public Widget AddChildToCanvasEx(CanvasPanel CanvasPanel, Widget Widget, Anchors Anchors, Margin Offsets, bool AutoSize, int Z_Order, CanvasPanelSlot OutSlot, CanvasPanel OutCanvasPanel) { return Invoke<Widget>(nameof(AddChildToCanvasEx), CanvasPanel, Widget, Anchors, Offsets, AutoSize, Z_Order, OutSlot, OutCanvasPanel); }
        public HorizontalBox AddChildrenToHorizontalBox(Object WorldContext, HorizontalBox HorizontalBox, UArray<Widget> Children, bool ClearHorizontalBox, Margin Padding, byte HorizontalAlignment, byte VerticalAlignment, float FillFirst, float FillMiddle, float FillLast) { return Invoke<HorizontalBox>(nameof(AddChildrenToHorizontalBox), WorldContext, HorizontalBox, Children, ClearHorizontalBox, Padding, HorizontalAlignment, VerticalAlignment, FillFirst, FillMiddle, FillLast); }
    }
    public class FSDWidgetEffectsComponent : ActorComponent
    {
        public FSDWidgetEffectsComponent(nint addr) : base(addr) { }
        public UArray<WidgetPing> WidgetPings { get { return new UArray<WidgetPing>(this[nameof(WidgetPings)].Address); } }
        public UArray<WidgetFade> WidgetFades { get { return new UArray<WidgetFade>(this[nameof(WidgetFades)].Address); } }
        public UArray<WidgetTextCounter> WidgetTextCounters { get { return new UArray<WidgetTextCounter>(this[nameof(WidgetTextCounters)].Address); } }
        public UArray<CustomCounter> CustomCounters { get { return new UArray<CustomCounter>(this[nameof(CustomCounters)].Address); } }
        public UArray<WidgetMover> WidgetMovers { get { return new UArray<WidgetMover>(this[nameof(WidgetMovers)].Address); } }
        public void StartTextCounter(Object WorldContext, TextBlock Widget, float Start, float End, float Duration, int MaxDigits, float StartDelay) { Invoke(nameof(StartTextCounter), WorldContext, Widget, Start, End, Duration, MaxDigits, StartDelay); }
        public void StartCounter(Object WorldContext, Object Owner, float Start, float End, float Duration, Object OnCount, float StartDelay) { Invoke(nameof(StartCounter), WorldContext, Owner, Start, End, Duration, OnCount, StartDelay); }
        public void PingWidget(Object WorldContext, Widget Widget, float amount, float Duration, EPingType PingType, float StartDelay) { Invoke(nameof(PingWidget), WorldContext, Widget, amount, Duration, PingType, StartDelay); }
        public void MoveWidget(Object WorldContext, UserWidget Widget, Vector2D Start, Vector2D End, float Duration, EMoveType MoveType, float StartDelay) { Invoke(nameof(MoveWidget), WorldContext, Widget, Start, End, Duration, MoveType, StartDelay); }
        public void MoveOutWidget(Object WorldContext, UserWidget Widget, Vector2D MoveToOffset, float Duration, float StartDelay) { Invoke(nameof(MoveOutWidget), WorldContext, Widget, MoveToOffset, Duration, StartDelay); }
        public void MoveInWidget(Object WorldContext, UserWidget Widget, Vector2D MoveFromOffset, float Duration, float StartDelay) { Invoke(nameof(MoveInWidget), WorldContext, Widget, MoveFromOffset, Duration, StartDelay); }
        public void FadeWidget(Object WorldContext, UserWidget Widget, float StartFade, float EndFade, float Duration, float StartDelay) { Invoke(nameof(FadeWidget), WorldContext, Widget, StartFade, EndFade, Duration, StartDelay); }
        public void FadeOutWidget(Object WorldContext, UserWidget Widget, float Duration, float StartDelay) { Invoke(nameof(FadeOutWidget), WorldContext, Widget, Duration, StartDelay); }
        public void FadeInWidget(Object WorldContext, UserWidget Widget, float Duration, float StartDelay) { Invoke(nameof(FadeInWidget), WorldContext, Widget, Duration, StartDelay); }
    }
    public class FSDWorldSettings : WorldSettings
    {
        public FSDWorldSettings(nint addr) : base(addr) { }
        public PlayerCharacterID CharacterClass { get { return this[nameof(CharacterClass)].As<PlayerCharacterID>(); } set { this["CharacterClass"] = value; } }
    }
    public class FSDXboxUtils : BlueprintFunctionLibrary
    {
        public FSDXboxUtils(nint addr) : base(addr) { }
        public void ShowStoreUIForStoreItem(Object WorldContextObject, Object storeItemName) { Invoke(nameof(ShowStoreUIForStoreItem), WorldContextObject, storeItemName); }
        public void ShowStoreUI(Object WorldContextObject) { Invoke(nameof(ShowStoreUI), WorldContextObject); }
        public bool ShowCheatTerminal() { return Invoke<bool>(nameof(ShowCheatTerminal)); }
        public bool IsDCLCheckComplete(Object WorldContextObject) { return Invoke<bool>(nameof(IsDCLCheckComplete), WorldContextObject); }
    }
    public class FSDPFPUtils : BlueprintFunctionLibrary
    {
        public FSDPFPUtils(nint addr) : base(addr) { }
        public bool IsPlayfabLoaded() { return Invoke<bool>(nameof(IsPlayfabLoaded)); }
        public Object GetPlayfabUserId() { return Invoke<Object>(nameof(GetPlayfabUserId)); }
    }
    public class TrackBuilderItem : AnimatedItem
    {
        public TrackBuilderItem(nint addr) : base(addr) { }
        public CrosshairAggregator CrosshairAggregator { get { return this[nameof(CrosshairAggregator)].As<CrosshairAggregator>(); } set { this["CrosshairAggregator"] = value; } }
        public EPlaceableObstructionType ObstructionType { get { return (EPlaceableObstructionType)this[nameof(ObstructionType)].GetValue<int>(); } set { this[nameof(ObstructionType)].SetValue<int>((int)value); } }
        public Vector ObstructionLocation { get { return this[nameof(ObstructionLocation)].As<Vector>(); } set { this["ObstructionLocation"] = value; } }
        public Vector GroundNormal { get { return this[nameof(GroundNormal)].As<Vector>(); } set { this["GroundNormal"] = value; } }
        public Object DefaultSegmentType { get { return this[nameof(DefaultSegmentType)]; } set { this[nameof(DefaultSegmentType)] = value; } }
        public TrackBuilderSegment NextSegment { get { return this[nameof(NextSegment)].As<TrackBuilderSegment>(); } set { this["NextSegment"] = value; } }
        public bool bIsPlacingSegment { get { return this[nameof(bIsPlacingSegment)].Flag; } set { this[nameof(bIsPlacingSegment)].Flag = value; } }
        public void UpdatePlacement(Transform InTransform, TrackBuilderConnectPoint InConnectPoint, bool bPlacementValid, bool InUpdateServer) { Invoke(nameof(UpdatePlacement), InTransform, InConnectPoint, bPlacementValid, InUpdateServer); }
        public void ServerUpdatePlacement(Transform InTransform, bool bPlacementValid, TrackBuilderConnectPoint InConnectPoint) { Invoke(nameof(ServerUpdatePlacement), InTransform, bPlacementValid, InConnectPoint); }
        public void ServerFinishPlacement(Transform FinalLocation, TrackBuilderConnectPoint ConnectPoint) { Invoke(nameof(ServerFinishPlacement), FinalLocation, ConnectPoint); }
        public void ServerCancelPlacement() { Invoke(nameof(ServerCancelPlacement)); }
        public void ServerBeginPlaceSegment(TrackBuilderUsable InUsable) { Invoke(nameof(ServerBeginPlaceSegment), InUsable); }
        public void ReceiveBeginPlaceSegment() { Invoke(nameof(ReceiveBeginPlaceSegment)); }
        public void OnRep_NextSegment() { Invoke(nameof(OnRep_NextSegment)); }
        public Object GetSegmentType() { return Invoke<Object>(nameof(GetSegmentType)); }
        public void FinishPlacement(Transform FinalLocation, TrackBuilderConnectPoint ConnectPoint) { Invoke(nameof(FinishPlacement), FinalLocation, ConnectPoint); }
        public void CancelPlacement() { Invoke(nameof(CancelPlacement)); }
        public Vector AdjustInitialLocation(Vector Location) { return Invoke<Vector>(nameof(AdjustInitialLocation), Location); }
    }
    public class FuelLineBuilderItem : TrackBuilderItem
    {
        public FuelLineBuilderItem(nint addr) : base(addr) { }
        public ItemPlacerAggregator SegmentPlacer { get { return this[nameof(SegmentPlacer)].As<ItemPlacerAggregator>(); } set { this["SegmentPlacer"] = value; } }
        public void ReceivePlacementUpdated(bool InCanPlace, bool InConnecting, float InDistanceProgress) { Invoke(nameof(ReceivePlacementUpdated), InCanPlace, InConnecting, InDistanceProgress); }
    }
    public class FuelLineEndPoint : Actor
    {
        public FuelLineEndPoint(nint addr) : base(addr) { }
        public FuelLineConnectPoint ConnectPoint { get { return this[nameof(ConnectPoint)].As<FuelLineConnectPoint>(); } set { this["ConnectPoint"] = value; } }
        public StaticMeshComponent StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMeshComponent>(); } set { this["StaticMesh"] = value; } }
        public Object AllowedSegment { get { return this[nameof(AllowedSegment)]; } set { this[nameof(AllowedSegment)] = value; } }
        public bool OpenForConnection { get { return this[nameof(OpenForConnection)].Flag; } set { this[nameof(OpenForConnection)].Flag = value; } }
        public void SetOpenForConnection(bool Open) { Invoke(nameof(SetOpenForConnection), Open); }
        public void ReceivePing(bool InValidPlacement) { Invoke(nameof(ReceivePing), InValidPlacement); }
        public bool IsOpenForConnection() { return Invoke<bool>(nameof(IsOpenForConnection)); }
        public void CallbackConnectedWithSegment(TrackBuilderConnectPoint InConnectPoint, TrackBuilderSegment InSegment) { Invoke(nameof(CallbackConnectedWithSegment), InConnectPoint, InSegment); }
    }
    public class TrackBuilderConnectPoint : SphereComponent
    {
        public TrackBuilderConnectPoint(nint addr) : base(addr) { }
        public Object OnConnectedWithSegment { get { return this[nameof(OnConnectedWithSegment)]; } set { this[nameof(OnConnectedWithSegment)] = value; } }
        public Object ConnectType { get { return this[nameof(ConnectType)]; } set { this[nameof(ConnectType)] = value; } }
        public Object ConnectedSegment { get { return this[nameof(ConnectedSegment)]; } set { this[nameof(ConnectedSegment)] = value; } }
        public float MaxConnectRadius { get { return this[nameof(MaxConnectRadius)].GetValue<float>(); } set { this[nameof(MaxConnectRadius)].SetValue<float>(value); } }
        public float ConnectDistance { get { return this[nameof(ConnectDistance)].GetValue<float>(); } set { this[nameof(ConnectDistance)].SetValue<float>(value); } }
        public Vector MaxAngles { get { return this[nameof(MaxAngles)].As<Vector>(); } set { this["MaxAngles"] = value; } }
        public void OnRep_ConnectedSegment() { Invoke(nameof(OnRep_ConnectedSegment)); }
        public Transform GetConnectTransform(Transform FromWorldTransform) { return Invoke<Transform>(nameof(GetConnectTransform), FromWorldTransform); }
        public bool Disconnect(TrackBuilderSegment InSegment) { return Invoke<bool>(nameof(Disconnect), InSegment); }
        public void ConnectionDelegate__DelegateSignature(TrackBuilderConnectPoint InConnectPoint, TrackBuilderSegment InSegment) { Invoke(nameof(ConnectionDelegate__DelegateSignature), InConnectPoint, InSegment); }
        public bool Connect(TrackBuilderSegment InSegment) { return Invoke<bool>(nameof(Connect), InSegment); }
        public bool CanConnectWith(TrackBuilderSegment InSegment, Transform FromWorldTransform) { return Invoke<bool>(nameof(CanConnectWith), InSegment, FromWorldTransform); }
    }
    public class FuelLineConnectPoint : TrackBuilderConnectPoint
    {
        public FuelLineConnectPoint(nint addr) : base(addr) { }
    }
    public class TrackBuilderSegment : Actor
    {
        public TrackBuilderSegment(nint addr) : base(addr) { }
        public TrackBuilderUsable NextSegmentUsable { get { return this[nameof(NextSegmentUsable)].As<TrackBuilderUsable>(); } set { this["NextSegmentUsable"] = value; } }
        public Object BuiltByCharacter { get { return this[nameof(BuiltByCharacter)]; } set { this[nameof(BuiltByCharacter)] = value; } }
        public Object BuiltFromUsable { get { return this[nameof(BuiltFromUsable)]; } set { this[nameof(BuiltFromUsable)] = value; } }
        public TrackBuilderPoint SegmentEndTransform { get { return this[nameof(SegmentEndTransform)].As<TrackBuilderPoint>(); } set { this["SegmentEndTransform"] = value; } }
        public TrackBuilderPoint ServerSegmentEndTransform { get { return this[nameof(ServerSegmentEndTransform)].As<TrackBuilderPoint>(); } set { this["ServerSegmentEndTransform"] = value; } }
        public bool UpdatePlacement(Transform InTransform, TrackBuilderConnectPoint InConnectPoint, bool InPlacementValid, Item PlaceableItem) { return Invoke<bool>(nameof(UpdatePlacement), InTransform, InConnectPoint, InPlacementValid, PlaceableItem); }
        public void ReceivPlacementValidChanged(bool InIsValid) { Invoke(nameof(ReceivPlacementValidChanged), InIsValid); }
        public void ReceivePlacementStateChanged(ETrackBuildPlacementState NewState) { Invoke(nameof(ReceivePlacementStateChanged), NewState); }
        public void ReceivePlacementChangedEnd(Transform NewEndTransform, TrackBuilderConnectPoint InConnectPoint) { Invoke(nameof(ReceivePlacementChangedEnd), NewEndTransform, InConnectPoint); }
        public void ReceivePlacementChangedBegin(Transform NewEndTransform, TrackBuilderConnectPoint InConnectPoint) { Invoke(nameof(ReceivePlacementChangedBegin), NewEndTransform, InConnectPoint); }
        public bool ReceiveCanPlaceAt(Transform InCandidateTransform, TrackBuilderConnectPoint InConnectPoint) { return Invoke<bool>(nameof(ReceiveCanPlaceAt), InCandidateTransform, InConnectPoint); }
        public void OnRep_SegmentEndTransform() { Invoke(nameof(OnRep_SegmentEndTransform)); }
        public TrackBuilderUsable GetTrackStartUsable() { return Invoke<TrackBuilderUsable>(nameof(GetTrackStartUsable)); }
        public Actor GetTrackStartActor() { return Invoke<Actor>(nameof(GetTrackStartActor)); }
        public Transform GetStartTransform() { return Invoke<Transform>(nameof(GetStartTransform)); }
        public Transform GetSegmentEndTransform() { return Invoke<Transform>(nameof(GetSegmentEndTransform)); }
        public ETrackBuildPlacementState GetPlacementState() { return Invoke<ETrackBuildPlacementState>(nameof(GetPlacementState)); }
        public TrackBuilderSegment GetNextSegment(bool bForward) { return Invoke<TrackBuilderSegment>(nameof(GetNextSegment), bForward); }
        public bool GetIsSegmentEndTransformValid() { return Invoke<bool>(nameof(GetIsSegmentEndTransformValid)); }
        public TrackBuilderConnectPoint GetConnectPoint() { return Invoke<TrackBuilderConnectPoint>(nameof(GetConnectPoint)); }
        public bool CanPlaceAt(Transform InCandidateTransform, TrackBuilderConnectPoint InConnectPoint, Item PlaceableItem) { return Invoke<bool>(nameof(CanPlaceAt), InCandidateTransform, InConnectPoint, PlaceableItem); }
    }
    public class FuelLineSegment : TrackBuilderSegment
    {
        public FuelLineSegment(nint addr) : base(addr) { }
        public SplineMeshComponent FuelLineSplineMesh { get { return this[nameof(FuelLineSplineMesh)].As<SplineMeshComponent>(); } set { this["FuelLineSplineMesh"] = value; } }
        public SplineComponent FuelLineSplineComponent { get { return this[nameof(FuelLineSplineComponent)].As<SplineComponent>(); } set { this["FuelLineSplineComponent"] = value; } }
        public StaticMeshComponent FuelLineEndPostMesh { get { return this[nameof(FuelLineEndPostMesh)].As<StaticMeshComponent>(); } set { this["FuelLineEndPostMesh"] = value; } }
        public SimpleHealthComponent DeconstructHealthComponent { get { return this[nameof(DeconstructHealthComponent)].As<SimpleHealthComponent>(); } set { this["DeconstructHealthComponent"] = value; } }
        public SceneComponent PreviewEndPostLocation { get { return this[nameof(PreviewEndPostLocation)].As<SceneComponent>(); } set { this["PreviewEndPostLocation"] = value; } }
        public float EndPostHeightOffset { get { return this[nameof(EndPostHeightOffset)].GetValue<float>(); } set { this[nameof(EndPostHeightOffset)].SetValue<float>(value); } }
        public float MaxLength { get { return this[nameof(MaxLength)].GetValue<float>(); } set { this[nameof(MaxLength)].SetValue<float>(value); } }
        public bool bHasMaxTurnAngle { get { return this[nameof(bHasMaxTurnAngle)].Flag; } set { this[nameof(bHasMaxTurnAngle)].Flag = value; } }
        public float MaxTurnAngle { get { return this[nameof(MaxTurnAngle)].GetValue<float>(); } set { this[nameof(MaxTurnAngle)].SetValue<float>(value); } }
        public void ClientUpdateStartTransform(Vector NewStartLocation) { Invoke(nameof(ClientUpdateStartTransform), NewStartLocation); }
        public void ChangeStartTransform(Transform ChangedStartLocation) { Invoke(nameof(ChangeStartTransform), ChangedStartLocation); }
        public void CallbackOnDeath(HealthComponentBase InHealthComponent) { Invoke(nameof(CallbackOnDeath), InHealthComponent); }
        public void CallbackCanStartNextSegmentChanged(bool InCanStart) { Invoke(nameof(CallbackCanStartNextSegmentChanged), InCanStart); }
    }
    public class FuelLineStart : Actor
    {
        public FuelLineStart(nint addr) : base(addr) { }
        public Object OnFuelLineConnected { get { return this[nameof(OnFuelLineConnected)]; } set { this[nameof(OnFuelLineConnected)] = value; } }
        public Object OnFuelLineStarted { get { return this[nameof(OnFuelLineStarted)]; } set { this[nameof(OnFuelLineStarted)] = value; } }
        public Object OnFirstFuelLineSegment { get { return this[nameof(OnFirstFuelLineSegment)]; } set { this[nameof(OnFirstFuelLineSegment)] = value; } }
        public StaticMeshComponent StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMeshComponent>(); } set { this["StaticMesh"] = value; } }
        public OutlineComponent OutlineComponent { get { return this[nameof(OutlineComponent)].As<OutlineComponent>(); } set { this["OutlineComponent"] = value; } }
        public SimpleObjectInfoComponent ObjectInfoComponent { get { return this[nameof(ObjectInfoComponent)].As<SimpleObjectInfoComponent>(); } set { this["ObjectInfoComponent"] = value; } }
        public FuelLineStartUsable UsableStartFuelLine { get { return this[nameof(UsableStartFuelLine)].As<FuelLineStartUsable>(); } set { this["UsableStartFuelLine"] = value; } }
        public bool bFuelLineConnected { get { return this[nameof(bFuelLineConnected)].Flag; } set { this[nameof(bFuelLineConnected)].Flag = value; } }
        public void ReceiveFuelLineConnected() { Invoke(nameof(ReceiveFuelLineConnected)); }
        public void OnRep_FuelLineConnected() { Invoke(nameof(OnRep_FuelLineConnected)); }
        public void FuelLineStartedDelegate__DelegateSignature(bool InFuelLineStarted) { Invoke(nameof(FuelLineStartedDelegate__DelegateSignature), InFuelLineStarted); }
        public void FuelLineConnectedDelegate__DelegateSignature(FuelLineEndPoint InFuelLineStart) { Invoke(nameof(FuelLineConnectedDelegate__DelegateSignature), InFuelLineStart); }
        public void FirstFuelLineDelegate__DelegateSignature(FuelLineSegment InFirstSegment) { Invoke(nameof(FirstFuelLineDelegate__DelegateSignature), InFirstSegment); }
        public void CallbackNextSegmentChanged(TrackBuilderUsable InUsable, TrackBuilderSegment InSegment) { Invoke(nameof(CallbackNextSegmentChanged), InUsable, InSegment); }
    }
    public class TrackBuilderUsable : InstantUsable
    {
        public TrackBuilderUsable(nint addr) : base(addr) { }
        public Object OnNextSegmentChanged { get { return this[nameof(OnNextSegmentChanged)]; } set { this[nameof(OnNextSegmentChanged)] = value; } }
        public Object BuilderItemType { get { return this[nameof(BuilderItemType)]; } set { this[nameof(BuilderItemType)] = value; } }
        public Object ColliderName { get { return this[nameof(ColliderName)]; } set { this[nameof(ColliderName)] = value; } }
        public SceneComponent TrackStartComponent { get { return this[nameof(TrackStartComponent)].As<SceneComponent>(); } set { this["TrackStartComponent"] = value; } }
        public TrackBuilderSegment NextSegment { get { return this[nameof(NextSegment)].As<TrackBuilderSegment>(); } set { this["NextSegment"] = value; } }
        public Object InUseBy { get { return this[nameof(InUseBy)]; } set { this[nameof(InUseBy)] = value; } }
        public void SegmentDelegate__DelegateSignature(TrackBuilderUsable InUsable, TrackBuilderSegment InSegment) { Invoke(nameof(SegmentDelegate__DelegateSignature), InUsable, InSegment); }
        public void OnRep_NextSegment() { Invoke(nameof(OnRep_NextSegment)); }
        public void OnNextSegmentDestroyed(Actor InActor) { Invoke(nameof(OnNextSegmentDestroyed), InActor); }
        public Transform GetStartTransform() { return Invoke<Transform>(nameof(GetStartTransform)); }
        public void FinishUse(PlayerCharacter User, TrackBuilderSegment InSegment) { Invoke(nameof(FinishUse), User, InSegment); }
    }
    public class FuelLineStartUsable : TrackBuilderUsable
    {
        public FuelLineStartUsable(nint addr) : base(addr) { }
    }
    public class GameAnimationSettings : DataAsset
    {
        public GameAnimationSettings(nint addr) : base(addr) { }
    }
    public class GameData : Object
    {
        public GameData(nint addr) : base(addr) { }
        public KPISettings KPI_Settings { get { return this[nameof(KPI_Settings)].As<KPISettings>(); } set { this["KPI_Settings"] = value; } }
        public GVisibilityGroups VisibilityGroups { get { return this[nameof(VisibilityGroups)].As<GVisibilityGroups>(); } set { this["VisibilityGroups"] = value; } }
        public PromotionRewardsSettings PromotionRewardsSettings { get { return this[nameof(PromotionRewardsSettings)].As<PromotionRewardsSettings>(); } set { this["PromotionRewardsSettings"] = value; } }
        public WeaponMaintenanceSettings WeaponMaintenanceSettings { get { return this[nameof(WeaponMaintenanceSettings)].As<WeaponMaintenanceSettings>(); } set { this["WeaponMaintenanceSettings"] = value; } }
        public PropHuntSettings PropHuntSettings { get { return this[nameof(PropHuntSettings)].As<PropHuntSettings>(); } set { this["PropHuntSettings"] = value; } }
        public FSDEventCollection FsdEventsSettings { get { return this[nameof(FsdEventsSettings)].As<FSDEventCollection>(); } set { this["FsdEventsSettings"] = value; } }
        public GameActivitySettings GameActivitySettings { get { return this[nameof(GameActivitySettings)].As<GameActivitySettings>(); } set { this["GameActivitySettings"] = value; } }
        public DanceSettings DanceSettings { get { return this[nameof(DanceSettings)].As<DanceSettings>(); } set { this["DanceSettings"] = value; } }
        public GameAnimationSettings AnimationSettings { get { return this[nameof(AnimationSettings)].As<GameAnimationSettings>(); } set { this["AnimationSettings"] = value; } }
        public EnemySettings EnemySettings { get { return this[nameof(EnemySettings)].As<EnemySettings>(); } set { this["EnemySettings"] = value; } }
        public DamageSettings DamageSettings { get { return this[nameof(DamageSettings)].As<DamageSettings>(); } set { this["DamageSettings"] = value; } }
        public PlanetZoneSetup ZoneSettings { get { return this[nameof(ZoneSettings)].As<PlanetZoneSetup>(); } set { this["ZoneSettings"] = value; } }
        public TreasureSettings TreasureSettings { get { return this[nameof(TreasureSettings)].As<TreasureSettings>(); } set { this["TreasureSettings"] = value; } }
        public DrinkSettings DrinkSettings { get { return this[nameof(DrinkSettings)].As<DrinkSettings>(); } set { this["DrinkSettings"] = value; } }
        public UpgradeSettings UpgradeSettings { get { return this[nameof(UpgradeSettings)].As<UpgradeSettings>(); } set { this["UpgradeSettings"] = value; } }
        public SpawnSettings SpawnSettings { get { return this[nameof(SpawnSettings)].As<SpawnSettings>(); } set { this["SpawnSettings"] = value; } }
        public VanitySettings VanitySettings { get { return this[nameof(VanitySettings)].As<VanitySettings>(); } set { this["VanitySettings"] = value; } }
        public KeyBindingSettings KeyBindingSettings { get { return this[nameof(KeyBindingSettings)].As<KeyBindingSettings>(); } set { this["KeyBindingSettings"] = value; } }
        public DeepDiveSettings DeepDiveSettings { get { return this[nameof(DeepDiveSettings)].As<DeepDiveSettings>(); } set { this["DeepDiveSettings"] = value; } }
        public BEESettings BEESettings { get { return this[nameof(BEESettings)].As<BEESettings>(); } set { this["BEESettings"] = value; } }
        public EncounterSettings EncounterSettings { get { return this[nameof(EncounterSettings)].As<EncounterSettings>(); } set { this["EncounterSettings"] = value; } }
        public ForginSettings ForgingSettings { get { return this[nameof(ForgingSettings)].As<ForginSettings>(); } set { this["ForgingSettings"] = value; } }
        public SchematicSettings SchematicSettings { get { return this[nameof(SchematicSettings)].As<SchematicSettings>(); } set { this["SchematicSettings"] = value; } }
        public ItemSkinSettings SkinSettings { get { return this[nameof(SkinSettings)].As<ItemSkinSettings>(); } set { this["SkinSettings"] = value; } }
        public SpecialEventSettings SpecialEventSettings { get { return this[nameof(SpecialEventSettings)].As<SpecialEventSettings>(); } set { this["SpecialEventSettings"] = value; } }
        public ProceduralSettings ProceduralSettings { get { return this[nameof(ProceduralSettings)].As<ProceduralSettings>(); } set { this["ProceduralSettings"] = value; } }
        public PickaxeSettings PickaxeSettings { get { return this[nameof(PickaxeSettings)].As<PickaxeSettings>(); } set { this["PickaxeSettings"] = value; } }
        public FSDTagSettings TagSettings { get { return this[nameof(TagSettings)].As<FSDTagSettings>(); } set { this["TagSettings"] = value; } }
        public ItemSettings ItemSettings { get { return this[nameof(ItemSettings)].As<ItemSettings>(); } set { this["ItemSettings"] = value; } }
        public DynamicIconSettings DynamicIconSettings { get { return this[nameof(DynamicIconSettings)].As<DynamicIconSettings>(); } set { this["DynamicIconSettings"] = value; } }
        public ShowroomSettings ShowroomSettings { get { return this[nameof(ShowroomSettings)].As<ShowroomSettings>(); } set { this["ShowroomSettings"] = value; } }
        public VictoryPoseSettings VictoryPoseSettings { get { return this[nameof(VictoryPoseSettings)].As<VictoryPoseSettings>(); } set { this["VictoryPoseSettings"] = value; } }
        public FSDTutorialSettings TutorialSettings { get { return this[nameof(TutorialSettings)].As<FSDTutorialSettings>(); } set { this["TutorialSettings"] = value; } }
        public LegacySettings LegacySettings { get { return this[nameof(LegacySettings)].As<LegacySettings>(); } set { this["LegacySettings"] = value; } }
        public EffectSettings EffectSettings { get { return this[nameof(EffectSettings)].As<EffectSettings>(); } set { this["EffectSettings"] = value; } }
        public AfflictionSettings AfflictionSettings { get { return this[nameof(AfflictionSettings)].As<AfflictionSettings>(); } set { this["AfflictionSettings"] = value; } }
        public CommunityGoalSettings CommunityGoalSettings { get { return this[nameof(CommunityGoalSettings)].As<CommunityGoalSettings>(); } set { this["CommunityGoalSettings"] = value; } }
        public DailyDealSettings DailyDealSettings { get { return this[nameof(DailyDealSettings)].As<DailyDealSettings>(); } set { this["DailyDealSettings"] = value; } }
        public TerrainMaterialSettings TerrainMaterialSettings { get { return this[nameof(TerrainMaterialSettings)].As<TerrainMaterialSettings>(); } set { this["TerrainMaterialSettings"] = value; } }
        public SaveGameSettings SaveGameSettings { get { return this[nameof(SaveGameSettings)].As<SaveGameSettings>(); } set { this["SaveGameSettings"] = value; } }
        public GDItemCategoryIDs ItemCategoryIDs { get { return this[nameof(ItemCategoryIDs)].As<GDItemCategoryIDs>(); } set { this["ItemCategoryIDs"] = value; } }
        public UArray<Texture2D> LoadoutIconList { get { return new UArray<Texture2D>(this[nameof(LoadoutIconList)].Address); } }
        public MinersManual MinersManual { get { return this[nameof(MinersManual)].As<MinersManual>(); } set { this["MinersManual"] = value; } }
        public GDDamageClasses DamageClasses { get { return this[nameof(DamageClasses)].As<GDDamageClasses>(); } set { this["DamageClasses"] = value; } }
        public GDStats Stats { get { return this[nameof(Stats)].As<GDStats>(); } set { this["Stats"] = value; } }
        public GDResources Resources { get { return this[nameof(Resources)].As<GDResources>(); } set { this["Resources"] = value; } }
        public GDTerrainTypes TerrainTypes { get { return this[nameof(TerrainTypes)].As<GDTerrainTypes>(); } set { this["TerrainTypes"] = value; } }
        public GDGameStatsTracking GameStatsTracking { get { return this[nameof(GameStatsTracking)].As<GDGameStatsTracking>(); } set { this["GameStatsTracking"] = value; } }
        public GDAudio Audio { get { return this[nameof(Audio)].As<GDAudio>(); } set { this["Audio"] = value; } }
        public GDDifficulty Difficulty { get { return this[nameof(Difficulty)].As<GDDifficulty>(); } set { this["Difficulty"] = value; } }
        public StatusEffectSettings StatusEffects { get { return this[nameof(StatusEffects)].As<StatusEffectSettings>(); } set { this["StatusEffects"] = value; } }
        public GDCharacterRetirement Retirement { get { return this[nameof(Retirement)].As<GDCharacterRetirement>(); } set { this["Retirement"] = value; } }
        public GDPlayerAndCharacterProgression PlayerAndCharacterProgression { get { return this[nameof(PlayerAndCharacterProgression)].As<GDPlayerAndCharacterProgression>(); } set { this["PlayerAndCharacterProgression"] = value; } }
        public CharacterSettings CharacterSettings { get { return this[nameof(CharacterSettings)].As<CharacterSettings>(); } set { this["CharacterSettings"] = value; } }
        public AchievementList Achievements { get { return this[nameof(Achievements)].As<AchievementList>(); } set { this["Achievements"] = value; } }
        public GlobalMissionSetup MissionSetup { get { return this[nameof(MissionSetup)].As<GlobalMissionSetup>(); } set { this["MissionSetup"] = value; } }
        public SeasonSettings SeasonSettings { get { return this[nameof(SeasonSettings)].As<SeasonSettings>(); } set { this["SeasonSettings"] = value; } }
        public PlayerCharacterID DefaultCharacterID { get { return this[nameof(DefaultCharacterID)].As<PlayerCharacterID>(); } set { this["DefaultCharacterID"] = value; } }
        public PlayerCharacterID DefaultEditorCharacterID { get { return this[nameof(DefaultEditorCharacterID)].As<PlayerCharacterID>(); } set { this["DefaultEditorCharacterID"] = value; } }
        public GameplayTag XBoxExcludeRoomTag { get { return this[nameof(XBoxExcludeRoomTag)].As<GameplayTag>(); } set { this["XBoxExcludeRoomTag"] = value; } }
        public AssetsToLoadSettings AssetsToLoad { get { return this[nameof(AssetsToLoad)].As<AssetsToLoadSettings>(); } set { this["AssetsToLoad"] = value; } }
        public void UnloadPreloadedAssets() { Invoke(nameof(UnloadPreloadedAssets)); }
        public void LoadDefaultAssetsBlocking(AsyncManager AsyncManager) { Invoke(nameof(LoadDefaultAssetsBlocking), AsyncManager); }
        public bool IsCheatConsolesEnabled() { return Invoke<bool>(nameof(IsCheatConsolesEnabled)); }
        public UArray<PlayerCharacterID> GetRankedHeroIDs() { return Invoke<UArray<PlayerCharacterID>>(nameof(GetRankedHeroIDs)); }
        public Object GetPlayerRankName(int Rank) { return Invoke<Object>(nameof(GetPlayerRankName), Rank); }
        public PlayerCharacterID GetPlayerCharacterID(Guid ID) { return Invoke<PlayerCharacterID>(nameof(GetPlayerCharacterID), ID); }
        public GDPerks GetPerkData() { return Invoke<GDPerks>(nameof(GetPerkData)); }
        public GDMissionStats GetMissionStats() { return Invoke<GDMissionStats>(nameof(GetMissionStats)); }
        public GDMilestones GetMileStonesData() { return Invoke<GDMilestones>(nameof(GetMileStonesData)); }
        public InventoryList GetInventoryList(PlayerCharacterID characterID) { return Invoke<InventoryList>(nameof(GetInventoryList), characterID); }
        public int GetDifficultySettingIndex(DifficultySetting InDifficulty) { return Invoke<int>(nameof(GetDifficultySettingIndex), InDifficulty); }
        public DifficultySetting GetDifficultySetting(int Index) { return Invoke<DifficultySetting>(nameof(GetDifficultySetting), Index); }
        public int GetDifficultyIndex(DifficultySetting Difficulty) { return Invoke<int>(nameof(GetDifficultyIndex), Difficulty); }
        public Object GetDefaultEditorCharacter() { return Invoke<Object>(nameof(GetDefaultEditorCharacter)); }
        public Object GetDefaultCharacter() { return Invoke<Object>(nameof(GetDefaultCharacter)); }
        public RetirementCostItem GetCharacterRetirementCost(Object WorldContext, PlayerCharacterID ID) { return Invoke<RetirementCostItem>(nameof(GetCharacterRetirementCost), WorldContext, ID); }
        public UArray<HUDVisibilityGroup> GetAllVisibilityGroups() { return Invoke<UArray<HUDVisibilityGroup>>(nameof(GetAllVisibilityGroups)); }
        public UArray<MissionStat> GetAllMissionStats() { return Invoke<UArray<MissionStat>>(nameof(GetAllMissionStats)); }
        public UArray<MilestoneAsset> GetAllMilestones() { return Invoke<UArray<MilestoneAsset>>(nameof(GetAllMilestones)); }
        public UArray<MissionStat> GetAllInfirmaryStats() { return Invoke<UArray<MissionStat>>(nameof(GetAllInfirmaryStats)); }
    }
    public class KPISettings : DataAsset
    {
        public KPISettings(nint addr) : base(addr) { }
        public GDMissionStats MissionStats { get { return this[nameof(MissionStats)].As<GDMissionStats>(); } set { this["MissionStats"] = value; } }
        public GDMilestones Milestones { get { return this[nameof(Milestones)].As<GDMilestones>(); } set { this["Milestones"] = value; } }
        public GDPerks perks { get { return this[nameof(perks)].As<GDPerks>(); } set { this["perks"] = value; } }
    }
    public class DLCBase : DataAsset
    {
        public DLCBase(nint addr) : base(addr) { }
        public void QueryAllDLC() { Invoke(nameof(QueryAllDLC)); }
        public bool IsUnlocked() { return Invoke<bool>(nameof(IsUnlocked)); }
        public bool IsDLCUnLocked(DLCBase DLC) { return Invoke<bool>(nameof(IsDLCUnLocked), DLC); }
    }
    public class GameDLC : DLCBase
    {
        public GameDLC(nint addr) : base(addr) { }
        public bool bFakeUnlockedStateInEditor { get { return this[nameof(bFakeUnlockedStateInEditor)].Flag; } set { this[nameof(bFakeUnlockedStateInEditor)].Flag = value; } }
        public bool bEditorUnlockedState { get { return this[nameof(bEditorUnlockedState)].Flag; } set { this[nameof(bEditorUnlockedState)].Flag = value; } }
        public int SteamID { get { return this[nameof(SteamID)].GetValue<int>(); } set { this[nameof(SteamID)].SetValue<int>(value); } }
        public Object SteamName { get { return this[nameof(SteamName)]; } set { this[nameof(SteamName)] = value; } }
        public Object OddishID { get { return this[nameof(OddishID)]; } set { this[nameof(OddishID)] = value; } }
        public Object XBoxDLCName { get { return this[nameof(XBoxDLCName)]; } set { this[nameof(XBoxDLCName)] = value; } }
        public Object SonyAdditionalContentLabelMap { get { return this[nameof(SonyAdditionalContentLabelMap)]; } set { this[nameof(SonyAdditionalContentLabelMap)] = value; } }
        public Object UWPStoreID { get { return this[nameof(UWPStoreID)]; } set { this[nameof(UWPStoreID)] = value; } }
        public bool ShowOnDLCScreen { get { return this[nameof(ShowOnDLCScreen)].Flag; } set { this[nameof(ShowOnDLCScreen)].Flag = value; } }
        public Object banner { get { return this[nameof(banner)]; } set { this[nameof(banner)] = value; } }
        public Object Banner_16 { get { return this[nameof(Banner_16)]; } set { this[nameof(Banner_16)] = value; } }
        public Object InfoScreenOverlay { get { return this[nameof(InfoScreenOverlay)]; } set { this[nameof(InfoScreenOverlay)] = value; } }
        public Object AnnouncementWidget { get { return this[nameof(AnnouncementWidget)]; } set { this[nameof(AnnouncementWidget)] = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public Object Resources { get { return this[nameof(Resources)]; } set { this[nameof(Resources)] = value; } }
        public int PerformancePoints { get { return this[nameof(PerformancePoints)].GetValue<int>(); } set { this[nameof(PerformancePoints)].SetValue<int>(value); } }
        public Object Movie { get { return this[nameof(Movie)]; } set { this[nameof(Movie)] = value; } }
        public bool ShouldBeAnnounced(Object WorldContext) { return Invoke<bool>(nameof(ShouldBeAnnounced), WorldContext); }
        public bool OpenStorePage(Object WorldContext) { return Invoke<bool>(nameof(OpenStorePage), WorldContext); }
        public void MarkAnnounced(Object WorldContext) { Invoke(nameof(MarkAnnounced), WorldContext); }
        public Object GetSonyAdditionalContentId() { return Invoke<Object>(nameof(GetSonyAdditionalContentId)); }
        public Texture2D GetInfoScreenOverlay() { return Invoke<Texture2D>(nameof(GetInfoScreenOverlay)); }
        public Texture2D GetBanner_16() { return Invoke<Texture2D>(nameof(GetBanner_16)); }
        public Texture2D GetBanner() { return Invoke<Texture2D>(nameof(GetBanner)); }
    }
    public class GameDLCSettings : DataAsset
    {
        public GameDLCSettings(nint addr) : base(addr) { }
        public Object StoreDLCs { get { return this[nameof(StoreDLCs)]; } set { this[nameof(StoreDLCs)] = value; } }
        public UArray<GameDLC> GetStoreDLCs(Object WorldContext) { return Invoke<UArray<GameDLC>>(nameof(GetStoreDLCs), WorldContext); }
        public UArray<GameDLC> GetAnnouncableDLCs(Object WorldContext) { return Invoke<UArray<GameDLC>>(nameof(GetAnnouncableDLCs), WorldContext); }
    }
    public class TimedDLC : DLCBase
    {
        public TimedDLC(nint addr) : base(addr) { }
        public DateTime StartDate { get { return this[nameof(StartDate)].As<DateTime>(); } set { this["StartDate"] = value; } }
        public DateTime EndDate { get { return this[nameof(EndDate)].As<DateTime>(); } set { this["EndDate"] = value; } }
    }
    public class AlwaysLockedDLC : DLCBase
    {
        public AlwaysLockedDLC(nint addr) : base(addr) { }
    }
    public class PlatformExclusiveDLC : DLCBase
    {
        public PlatformExclusiveDLC(nint addr) : base(addr) { }
        public EFSDTargetPlatform Platform { get { return (EFSDTargetPlatform)this[nameof(Platform)].GetValue<int>(); } set { this[nameof(Platform)].SetValue<int>((int)value); } }
    }
    public class AndDLC : DLCBase
    {
        public AndDLC(nint addr) : base(addr) { }
        public UArray<DLCBase> DLCs { get { return new UArray<DLCBase>(this[nameof(DLCs)].Address); } }
    }
    public class OrDLC : DLCBase
    {
        public OrDLC(nint addr) : base(addr) { }
        public UArray<DLCBase> DLCs { get { return new UArray<DLCBase>(this[nameof(DLCs)].Address); } }
    }
    public class NotDLC : DLCBase
    {
        public NotDLC(nint addr) : base(addr) { }
        public DLCBase DLC { get { return this[nameof(DLC)].As<DLCBase>(); } set { this["DLC"] = value; } }
    }
    public class EventSpawnTimer : Actor
    {
        public EventSpawnTimer(nint addr) : base(addr) { }
        public void StopTimer() { Invoke(nameof(StopTimer)); }
    }
    public class EventRewardFrame : Actor
    {
        public EventRewardFrame(nint addr) : base(addr) { }
        public SpecialEventUsableComponent EventUsable { get { return this[nameof(EventUsable)].As<SpecialEventUsableComponent>(); } set { this["EventUsable"] = value; } }
        public UArray<EventRewardDispenser> Dispensers { get { return new UArray<EventRewardDispenser>(this[nameof(Dispensers)].Address); } }
        public bool keyInserted { get { return this[nameof(keyInserted)].Flag; } set { this[nameof(keyInserted)].Flag = value; } }
        public UArray<Object> EventPlayerIDs { get { return new UArray<Object>(this[nameof(EventPlayerIDs)].Address); } }
        public void TurnOff() { Invoke(nameof(TurnOff)); }
        public void SetKeyInserted(bool keyInserted) { Invoke(nameof(SetKeyInserted), keyInserted); }
        public void SetDispenseRewards(bool dispensRewards) { Invoke(nameof(SetDispenseRewards), dispensRewards); }
        public void RegisterDispenser(EventRewardDispenser Dispenser) { Invoke(nameof(RegisterDispenser), Dispenser); }
        public bool GetDispensRewards() { return Invoke<bool>(nameof(GetDispensRewards)); }
    }
    public class EventRewardDispenser : Actor
    {
        public EventRewardDispenser(nint addr) : base(addr) { }
        public UniqueNetIdRepl PlayerId { get { return this[nameof(PlayerId)].As<UniqueNetIdRepl>(); } set { this["PlayerId"] = value; } }
        public EventRewardFrame DispenserFrame { get { return this[nameof(DispenserFrame)].As<EventRewardFrame>(); } set { this["DispenserFrame"] = value; } }
        public bool PoweredUp { get { return this[nameof(PoweredUp)].Flag; } set { this[nameof(PoweredUp)].Flag = value; } }
        public bool IsActivated { get { return this[nameof(IsActivated)].Flag; } set { this[nameof(IsActivated)].Flag = value; } }
        public Schematic SelectedReward { get { return this[nameof(SelectedReward)].As<Schematic>(); } set { this["SelectedReward"] = value; } }
        public void SetSelectedReward(Schematic InReward) { Invoke(nameof(SetSelectedReward), InReward); }
        public bool PowerUp(PlayerCharacter InPlayerCharacter) { return Invoke<bool>(nameof(PowerUp), InPlayerCharacter); }
        public void OnRewardSelected() { Invoke(nameof(OnRewardSelected)); }
        public void OnRep_SelectedReward() { Invoke(nameof(OnRep_SelectedReward)); }
        public void OnRep_PoweredUp() { Invoke(nameof(OnRep_PoweredUp)); }
        public void OnRep_PlayerId() { Invoke(nameof(OnRep_PlayerId)); }
        public void OnRep_IsActivated() { Invoke(nameof(OnRep_IsActivated)); }
        public void OnPoweredUp() { Invoke(nameof(OnPoweredUp)); }
        public void OnOwnerAssigned() { Invoke(nameof(OnOwnerAssigned)); }
        public void OnOpenDispenser() { Invoke(nameof(OnOpenDispenser)); }
        public bool IsOwningPlayer(PlayerCharacter PlayerCharacter) { return Invoke<bool>(nameof(IsOwningPlayer), PlayerCharacter); }
        public PlayerCharacter GetPlayerCharacter() { return Invoke<PlayerCharacter>(nameof(GetPlayerCharacter)); }
        public FSDPlayerState GetPlayer() { return Invoke<FSDPlayerState>(nameof(GetPlayer)); }
    }
    public class EventRewardType : DataAsset
    {
        public EventRewardType(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object IconFront { get { return this[nameof(IconFront)]; } set { this[nameof(IconFront)] = value; } }
        public Object IconBack { get { return this[nameof(IconBack)]; } set { this[nameof(IconBack)] = value; } }
        public LinearColor IconFrontTint { get { return this[nameof(IconFrontTint)].As<LinearColor>(); } set { this["IconFrontTint"] = value; } }
        public LinearColor IconBackTint { get { return this[nameof(IconBackTint)].As<LinearColor>(); } set { this["IconBackTint"] = value; } }
        public LinearColor BackgroundTint { get { return this[nameof(BackgroundTint)].As<LinearColor>(); } set { this["BackgroundTint"] = value; } }
    }
    public class EventStarterButton : Actor
    {
        public EventStarterButton(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SingleUsableComponent Usable { get { return this[nameof(Usable)].As<SingleUsableComponent>(); } set { this["Usable"] = value; } }
        public Object OnBootupEvent { get { return this[nameof(OnBootupEvent)]; } set { this[nameof(OnBootupEvent)] = value; } }
        public bool Booted { get { return this[nameof(Booted)].Flag; } set { this[nameof(Booted)].Flag = value; } }
        public bool IsOpenForUse { get { return this[nameof(IsOpenForUse)].Flag; } set { this[nameof(IsOpenForUse)].Flag = value; } }
        public bool IsEventActive { get { return this[nameof(IsEventActive)].Flag; } set { this[nameof(IsEventActive)].Flag = value; } }
        public void SetIsEventActive(bool IsEventActive) { Invoke(nameof(SetIsEventActive), IsEventActive); }
        public void OnUseProgress(float Progress) { Invoke(nameof(OnUseProgress), Progress); }
        public void OnRep_OpenForUse() { Invoke(nameof(OnRep_OpenForUse)); }
        public void OnRep_Booted() { Invoke(nameof(OnRep_Booted)); }
        public void OnOpenedForUse(bool wasOpened) { Invoke(nameof(OnOpenedForUse), wasOpened); }
        public void OnBooted() { Invoke(nameof(OnBooted)); }
        public void CloseForUse(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(CloseForUse), User, Key); }
        public void BootUpEvent() { Invoke(nameof(BootUpEvent)); }
    }
    public class GameEventAnimInstance : AnimInstance
    {
        public GameEventAnimInstance(nint addr) : base(addr) { }
        public float StageProgress { get { return this[nameof(StageProgress)].GetValue<float>(); } set { this[nameof(StageProgress)].SetValue<float>(value); } }
        public bool IsEventActive { get { return this[nameof(IsEventActive)].Flag; } set { this[nameof(IsEventActive)].Flag = value; } }
        public bool AreEventStartersActive { get { return this[nameof(AreEventStartersActive)].Flag; } set { this[nameof(AreEventStartersActive)].Flag = value; } }
        public bool EventFailed { get { return this[nameof(EventFailed)].Flag; } set { this[nameof(EventFailed)].Flag = value; } }
    }
    public class EventStarterAnimInstance : AnimInstance
    {
        public EventStarterAnimInstance(nint addr) : base(addr) { }
        public float UseProgress { get { return this[nameof(UseProgress)].GetValue<float>(); } set { this[nameof(UseProgress)].SetValue<float>(value); } }
        public bool IsOpenForUse { get { return this[nameof(IsOpenForUse)].Flag; } set { this[nameof(IsOpenForUse)].Flag = value; } }
        public bool IsBooted { get { return this[nameof(IsBooted)].Flag; } set { this[nameof(IsBooted)].Flag = value; } }
        public bool IsEventActive { get { return this[nameof(IsEventActive)].Flag; } set { this[nameof(IsEventActive)].Flag = value; } }
    }
    public class CoreInfuserAnimInstance : AnimInstance
    {
        public CoreInfuserAnimInstance(nint addr) : base(addr) { }
        public bool PoweredUp { get { return this[nameof(PoweredUp)].Flag; } set { this[nameof(PoweredUp)].Flag = value; } }
        public bool IsOpen { get { return this[nameof(IsOpen)].Flag; } set { this[nameof(IsOpen)].Flag = value; } }
        public bool IsRewardSelected { get { return this[nameof(IsRewardSelected)].Flag; } set { this[nameof(IsRewardSelected)].Flag = value; } }
        public void OnRewardSelected() { Invoke(nameof(OnRewardSelected)); }
    }
    public class CoreInfuserPlatformAnimInstance : AnimInstance
    {
        public CoreInfuserPlatformAnimInstance(nint addr) : base(addr) { }
        public bool keyInserted { get { return this[nameof(keyInserted)].Flag; } set { this[nameof(keyInserted)].Flag = value; } }
        public bool dispensRewards { get { return this[nameof(dispensRewards)].Flag; } set { this[nameof(dispensRewards)].Flag = value; } }
    }
    public class EventParticipant : Interface
    {
        public EventParticipant(nint addr) : base(addr) { }
        public bool SetupEvent(GameEvent GameEvent) { return Invoke<bool>(nameof(SetupEvent), GameEvent); }
        public void OnEventTriggered() { Invoke(nameof(OnEventTriggered)); }
        public void OnEventProgress(float Progress) { Invoke(nameof(OnEventProgress), Progress); }
        public void OnEventOpened() { Invoke(nameof(OnEventOpened)); }
        public void OnEventFinished(bool eventSuccess) { Invoke(nameof(OnEventFinished), eventSuccess); }
        public bool AdvanceOneObjective() { return Invoke<bool>(nameof(AdvanceOneObjective)); }
        public bool AddEventProgress(float Progress) { return Invoke<bool>(nameof(AddEventProgress), Progress); }
    }
    public class GameFunctionLibrary : BlueprintFunctionLibrary
    {
        public GameFunctionLibrary(nint addr) : base(addr) { }
        public void SpawnOrUpdateAudio2D(Object WorldContext, AudioComponent AudioComponent, SoundBase Sound, float VolumeMultiplier, float PitchMultiplier, Object FloatParamName, float FloatParam) { Invoke(nameof(SpawnOrUpdateAudio2D), WorldContext, AudioComponent, Sound, VolumeMultiplier, PitchMultiplier, FloatParamName, FloatParam); }
        public void SetUsePushToTalk(bool enable) { Invoke(nameof(SetUsePushToTalk), enable); }
        public void SetGlobalGravityZ(Object WorldContextObject, float GravityZ) { Invoke(nameof(SetGlobalGravityZ), WorldContextObject, GravityZ); }
        public void SetGlobalGravityScale(Object WorldContextObject, float GravityScale) { Invoke(nameof(SetGlobalGravityScale), WorldContextObject, GravityScale); }
        public bool IsWorldTickEnabled(Object WorldContextObject) { return Invoke<bool>(nameof(IsWorldTickEnabled), WorldContextObject); }
        public void IsTearingDown(Object caller, bool IsTearingDown) { Invoke(nameof(IsTearingDown), caller, IsTearingDown); }
        public bool IsPlayingOffline(Object WorldContextObject) { return Invoke<bool>(nameof(IsPlayingOffline), WorldContextObject); }
        public bool IsPlayInEditor(Object WorldContextObject) { return Invoke<bool>(nameof(IsPlayInEditor), WorldContextObject); }
        public WindowManager GetWindowManager(Object WorldContextObject) { return Invoke<WindowManager>(nameof(GetWindowManager), WorldContextObject); }
        public bool GetUsePushToTalk() { return Invoke<bool>(nameof(GetUsePushToTalk)); }
        public WindowWidget GetTopWindow(Object WorldContextObject) { return Invoke<WindowWidget>(nameof(GetTopWindow), WorldContextObject); }
        public Object GetProjectVersion() { return Invoke<Object>(nameof(GetProjectVersion)); }
        public int GetNumPlayers(Object WorldContext, bool onlyAlive) { return Invoke<int>(nameof(GetNumPlayers), WorldContext, onlyAlive); }
        public int GetNumAdditionalPlayers(Object WorldContext) { return Invoke<int>(nameof(GetNumAdditionalPlayers), WorldContext); }
        public Object GetMajorProjectVersion() { return Invoke<Object>(nameof(GetMajorProjectVersion)); }
        public PlayerCharacter GetLocalPlayerCharacter(Object WorldContext) { return Invoke<PlayerCharacter>(nameof(GetLocalPlayerCharacter), WorldContext); }
        public GoogleAnalyticsWrapper GetGoogleAnalyticsWrapper(Object WorldContextObject) { return Invoke<GoogleAnalyticsWrapper>(nameof(GetGoogleAnalyticsWrapper), WorldContextObject); }
        public float GetGlobalGravityZ(Object WorldContextObject) { return Invoke<float>(nameof(GetGlobalGravityZ), WorldContextObject); }
        public FSDGameModeSpaceRig GetFSDSRGameMode(Object WorldContextObject) { return Invoke<FSDGameModeSpaceRig>(nameof(GetFSDSRGameMode), WorldContextObject); }
        public FSDSaveGame GetFSDSaveGame(Object WorldContextObject) { return Invoke<FSDSaveGame>(nameof(GetFSDSaveGame), WorldContextObject); }
        public FSDGameState GetFSDGameState(Object WorldContextObject) { return Invoke<FSDGameState>(nameof(GetFSDGameState), WorldContextObject); }
        public FSDGameMode GetFSDGameMode(Object WorldContextObject) { return Invoke<FSDGameMode>(nameof(GetFSDGameMode), WorldContextObject); }
        public FSDGameInstance GetFSDGameInstance(Object WorldContextObject) { return Invoke<FSDGameInstance>(nameof(GetFSDGameInstance), WorldContextObject); }
        public GameData GetFSDGameData() { return Invoke<GameData>(nameof(GetFSDGameData)); }
        public float GetFrameRateInHz(Object WorldContextObject) { return Invoke<float>(nameof(GetFrameRateInHz), WorldContextObject); }
        public Object GetDeepDiveManager(Object WorldContextObject) { return Invoke<Object>(nameof(GetDeepDiveManager), WorldContextObject); }
        public DeepCSGWorld GetCSGWorld(Object WorldContextObject) { return Invoke<DeepCSGWorld>(nameof(GetCSGWorld), WorldContextObject); }
        public int GetChangelist() { return Invoke<int>(nameof(GetChangelist)); }
        public CampaignManager GetCampaingManager(Object WorldContextObject) { return Invoke<CampaignManager>(nameof(GetCampaingManager), WorldContextObject); }
        public AsyncManager GetAsyncManager(Object WorldContextObject) { return Invoke<AsyncManager>(nameof(GetAsyncManager), WorldContextObject); }
    }
    public class GameModeFunctionLibrary : BlueprintFunctionLibrary
    {
        public GameModeFunctionLibrary(nint addr) : base(addr) { }
        public bool IsCloseToImportantLocation(FSDGameState GameState, Vector Location) { return Invoke<bool>(nameof(IsCloseToImportantLocation), GameState, Location); }
        public Transform FindEscapePodLocationAtDistance(Object WorldContextObject, float Distance, float aboveDistanceBias, Actor optionalFrom) { return Invoke<Transform>(nameof(FindEscapePodLocationAtDistance), WorldContextObject, Distance, aboveDistanceBias, optionalFrom); }
        public void AddSeamlessTravelEventKey(Object WorldContextObject, SeamlessTravelEventKey Key) { Invoke(nameof(AddSeamlessTravelEventKey), WorldContextObject, Key); }
    }
    public class GameStats : Info
    {
        public GameStats(nint addr) : base(addr) { }
        public int NumberOfPlayersEscapedInPod { get { return this[nameof(NumberOfPlayersEscapedInPod)].GetValue<int>(); } set { this[nameof(NumberOfPlayersEscapedInPod)].SetValue<int>(value); } }
        public float TotalGoldMined { get { return this[nameof(TotalGoldMined)].GetValue<float>(); } set { this[nameof(TotalGoldMined)].SetValue<float>(value); } }
        public int TotalEnemiesKilled { get { return this[nameof(TotalEnemiesKilled)].GetValue<int>(); } set { this[nameof(TotalEnemiesKilled)].SetValue<int>(value); } }
        public int MissionHaz { get { return this[nameof(MissionHaz)].GetValue<int>(); } set { this[nameof(MissionHaz)].SetValue<int>(value); } }
        public UArray<SeamlessTravelEventKey> EventKeys { get { return new UArray<SeamlessTravelEventKey>(this[nameof(EventKeys)].Address); } }
        public void OnPlayerMinedGold(CappedResource Resource, float amount) { Invoke(nameof(OnPlayerMinedGold), Resource, amount); }
    }
    public class GasCloud : Actor
    {
        public GasCloud(nint addr) : base(addr) { }
        public void Ignite() { Invoke(nameof(Ignite)); }
        public void Freeze() { Invoke(nameof(Freeze)); }
    }
    public class ResourceBasedObjective : Objective
    {
        public ResourceBasedObjective(nint addr) : base(addr) { }
    }
    public class GatherGemsObjective : ResourceBasedObjective
    {
        public GatherGemsObjective(nint addr) : base(addr) { }
        public int GemsRequired { get { return this[nameof(GemsRequired)].GetValue<int>(); } set { this[nameof(GemsRequired)].SetValue<int>(value); } }
        public float GemsSpawnedModifier { get { return this[nameof(GemsSpawnedModifier)].GetValue<float>(); } set { this[nameof(GemsSpawnedModifier)].SetValue<float>(value); } }
        public int GemsCollected { get { return this[nameof(GemsCollected)].GetValue<int>(); } set { this[nameof(GemsCollected)].SetValue<int>(value); } }
        public GemResourceData GemResource { get { return this[nameof(GemResource)].As<GemResourceData>(); } set { this["GemResource"] = value; } }
        public void OnResourceChanged(CappedResource CappedResource, float amount) { Invoke(nameof(OnResourceChanged), CappedResource, amount); }
        public void OnRep_GemsCollected(int prevAmount) { Invoke(nameof(OnRep_GemsCollected), prevAmount); }
    }
    public class GatheItemsObjective : ResourceBasedObjective
    {
        public GatheItemsObjective(nint addr) : base(addr) { }
        public int ItemsRequired { get { return this[nameof(ItemsRequired)].GetValue<int>(); } set { this[nameof(ItemsRequired)].SetValue<int>(value); } }
        public float ItemsSpawnedModifier { get { return this[nameof(ItemsSpawnedModifier)].GetValue<float>(); } set { this[nameof(ItemsSpawnedModifier)].SetValue<float>(value); } }
        public int ItemsCollected { get { return this[nameof(ItemsCollected)].GetValue<int>(); } set { this[nameof(ItemsCollected)].SetValue<int>(value); } }
        public CollectableResourceData ItemResource { get { return this[nameof(ItemResource)].As<CollectableResourceData>(); } set { this["ItemResource"] = value; } }
        public void OnResourceChanged(CappedResource CappedResource, float amount) { Invoke(nameof(OnResourceChanged), CappedResource, amount); }
        public void OnRep_ItemsCollected(int prevAmount) { Invoke(nameof(OnRep_ItemsCollected), prevAmount); }
        public void AddItemCollected(int Count) { Invoke(nameof(AddItemCollected), Count); }
    }
    public class Gem : CarriableItem
    {
        public Gem(nint addr) : base(addr) { }
        public CarriableInstantUsable Usable { get { return this[nameof(Usable)].As<CarriableInstantUsable>(); } set { this["Usable"] = value; } }
        public ResourceData ResourceType { get { return this[nameof(ResourceType)].As<ResourceData>(); } set { this["ResourceType"] = value; } }
        public float ResourceAmount { get { return this[nameof(ResourceAmount)].GetValue<float>(); } set { this[nameof(ResourceAmount)].SetValue<float>(value); } }
        public bool hasBeenReleased { get { return this[nameof(hasBeenReleased)].Flag; } set { this[nameof(hasBeenReleased)].Flag = value; } }
        public void SetHasBeenReleased(bool hasBeenReleased) { Invoke(nameof(SetHasBeenReleased), hasBeenReleased); }
        public bool GetHasBeenReleased() { return Invoke<bool>(nameof(GetHasBeenReleased)); }
    }
    public class GemTracker : ActorComponent
    {
        public GemTracker(nint addr) : base(addr) { }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        public float CustomValue { get { return this[nameof(CustomValue)].GetValue<float>(); } set { this[nameof(CustomValue)].SetValue<float>(value); } }
    }
    public class GemProximityTracker : ActorComponent
    {
        public GemProximityTracker(nint addr) : base(addr) { }
        public UArray<Object> Trackers { get { return new UArray<Object>(this[nameof(Trackers)].Address); } }
        public UArray<TrackPositionList> TrackerLists { get { return new UArray<TrackPositionList>(this[nameof(TrackerLists)].Address); } }
    }
    public class GemResourceData : ResourceData
    {
        public GemResourceData(nint addr) : base(addr) { }
        public DebrisPositioning DebrisPositioning { get { return this[nameof(DebrisPositioning)].As<DebrisPositioning>(); } set { this["DebrisPositioning"] = value; } }
        public bool CheckIfCompletelyCoveredByTerrain { get { return this[nameof(CheckIfCompletelyCoveredByTerrain)].Flag; } set { this[nameof(CheckIfCompletelyCoveredByTerrain)].Flag = value; } }
        public IRandRange GemValue { get { return this[nameof(GemValue)].As<IRandRange>(); } set { this["GemValue"] = value; } }
        public GemResourceCreator ResourceCreator { get { return this[nameof(ResourceCreator)].As<GemResourceCreator>(); } set { this["ResourceCreator"] = value; } }
        public float InfluencerRange { get { return this[nameof(InfluencerRange)].GetValue<float>(); } set { this[nameof(InfluencerRange)].SetValue<float>(value); } }
        public UArray<Object> Debris { get { return new UArray<Object>(this[nameof(Debris)].Address); } }
        public UArray<Object> GemClasses { get { return new UArray<Object>(this[nameof(GemClasses)].Address); } }
        public float ImportantRadius { get { return this[nameof(ImportantRadius)].GetValue<float>(); } set { this[nameof(ImportantRadius)].SetValue<float>(value); } }
        public UArray<Object> GemClassesLoaded { get { return new UArray<Object>(this[nameof(GemClassesLoaded)].Address); } }
        public UArray<DebrisBase> DebrisLoaded { get { return new UArray<DebrisBase>(this[nameof(DebrisLoaded)].Address); } }
        public int GetCollectedGemsCreditValue(FSDGameState GameState) { return Invoke<int>(nameof(GetCollectedGemsCreditValue), GameState); }
        public int GetCollectedGemsAmount(FSDGameState GameState) { return Invoke<int>(nameof(GetCollectedGemsAmount), GameState); }
    }
    public class GemResourceCreator : DataAsset
    {
        public GemResourceCreator(nint addr) : base(addr) { }
        public GemResourceData ResourceData { get { return this[nameof(ResourceData)].As<GemResourceData>(); } set { this["ResourceData"] = value; } }
        public bool CheckIfFreeSpaceAbove { get { return this[nameof(CheckIfFreeSpaceAbove)].Flag; } set { this[nameof(CheckIfFreeSpaceAbove)].Flag = value; } }
        public int SearchSize { get { return this[nameof(SearchSize)].GetValue<int>(); } set { this[nameof(SearchSize)].SetValue<int>(value); } }
    }
    public class RandomGemResourceCreator : GemResourceCreator
    {
        public RandomGemResourceCreator(nint addr) : base(addr) { }
        public CurveFloat PlacementDistanceProbabilityCurve { get { return this[nameof(PlacementDistanceProbabilityCurve)].As<CurveFloat>(); } set { this["PlacementDistanceProbabilityCurve"] = value; } }
    }
    public class DistributedGemResourceCreator : GemResourceCreator
    {
        public DistributedGemResourceCreator(nint addr) : base(addr) { }
        public float MinDistanceBetweenGems { get { return this[nameof(MinDistanceBetweenGems)].GetValue<float>(); } set { this[nameof(MinDistanceBetweenGems)].SetValue<float>(value); } }
    }
    public class GeneratedMission : Object
    {
        public GeneratedMission(nint addr) : base(addr) { }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public GlobalMissionSeed GlobalSeed { get { return this[nameof(GlobalSeed)].As<GlobalMissionSeed>(); } set { this["GlobalSeed"] = value; } }
        public MissionTemplate Template { get { return this[nameof(Template)].As<MissionTemplate>(); } set { this["Template"] = value; } }
        public Object MissionName { get { return this[nameof(MissionName)]; } set { this[nameof(MissionName)] = value; } }
        public Object PrimaryObjective { get { return this[nameof(PrimaryObjective)]; } set { this[nameof(PrimaryObjective)] = value; } }
        public UArray<Object> SecondaryObjectives { get { return new UArray<Object>(this[nameof(SecondaryObjectives)].Address); } }
        public Object Mutators { get { return this[nameof(Mutators)]; } set { this[nameof(Mutators)] = value; } }
        public UArray<MissionWarning> MissionWarnings { get { return new UArray<MissionWarning>(this[nameof(MissionWarnings)].Address); } }
        public MissionMutator MissionMutator { get { return this[nameof(MissionMutator)].As<MissionMutator>(); } set { this["MissionMutator"] = value; } }
        public MissionChallenge MissionChallenge { get { return this[nameof(MissionChallenge)].As<MissionChallenge>(); } set { this["MissionChallenge"] = value; } }
        public MissionComplexity ComplexityLimit { get { return this[nameof(ComplexityLimit)].As<MissionComplexity>(); } set { this["ComplexityLimit"] = value; } }
        public MissionDuration DurationLimit { get { return this[nameof(DurationLimit)].As<MissionDuration>(); } set { this["DurationLimit"] = value; } }
        public Object MissionDNA { get { return this[nameof(MissionDNA)]; } set { this[nameof(MissionDNA)] = value; } }
        public EMissionStructure MissionStructure { get { return (EMissionStructure)this[nameof(MissionStructure)].GetValue<int>(); } set { this[nameof(MissionStructure)].SetValue<int>((int)value); } }
        public bool IsInSeasonEventZone { get { return this[nameof(IsInSeasonEventZone)].Flag; } set { this[nameof(IsInSeasonEventZone)].Flag = value; } }
        public bool WouldBeInSeasonEventZone { get { return this[nameof(WouldBeInSeasonEventZone)].Flag; } set { this[nameof(WouldBeInSeasonEventZone)].Flag = value; } }
        public bool CanHaveMutators { get { return this[nameof(CanHaveMutators)].Flag; } set { this[nameof(CanHaveMutators)].Flag = value; } }
        public Object LoaderLevelSequence { get { return this[nameof(LoaderLevelSequence)]; } set { this[nameof(LoaderLevelSequence)] = value; } }
        public void Recieve_SetupPLS(ProceduralSetup pls) { Invoke(nameof(Recieve_SetupPLS), pls); }
        public bool IsSingleMission() { return Invoke<bool>(nameof(IsSingleMission)); }
        public bool IsPlagueMission() { return Invoke<bool>(nameof(IsPlagueMission)); }
        public bool IsLocked(FSDPlayerController Player) { return Invoke<bool>(nameof(IsLocked), Player); }
        public bool IsDeepDive() { return Invoke<bool>(nameof(IsDeepDive)); }
        public ObjectiveMissionIcon GetSecondaryObjectiveIcon() { return Invoke<ObjectiveMissionIcon>(nameof(GetSecondaryObjectiveIcon)); }
        public Object GetPLS() { return Invoke<Object>(nameof(GetPLS)); }
        public UArray<Mutator> GetMutators(Object mutatorClass) { return Invoke<UArray<Mutator>>(nameof(GetMutators), mutatorClass); }
        public float GetMissionScale() { return Invoke<float>(nameof(GetMissionScale)); }
        public MissionDNA GetMissionDNA() { return Invoke<MissionDNA>(nameof(GetMissionDNA)); }
        public ProceduralSetup CreatePLS(int Seed) { return Invoke<ProceduralSetup>(nameof(CreatePLS), Seed); }
        public bool AreMissionsEqual(GeneratedMission Other) { return Invoke<bool>(nameof(AreMissionsEqual), Other); }
    }
    public class RoomGenerationItem : GenerationItem
    {
        public RoomGenerationItem(nint addr) : base(addr) { }
    }
    public class GetFriendsListBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public GetFriendsListBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public GetFriendsListBlueprintCallProxy GetFriendsList(Object WorldContextObject, Object ListName) { return Invoke<GetFriendsListBlueprintCallProxy>(nameof(GetFriendsList), WorldContextObject, ListName); }
    }
    public class GlobalMissionSetup : DataAsset
    {
        public GlobalMissionSetup(nint addr) : base(addr) { }
        public IRandRange ExtraBiomes { get { return this[nameof(ExtraBiomes)].As<IRandRange>(); } set { this["ExtraBiomes"] = value; } }
        public IRandRange AdditionalMissionsForExtraBiomes { get { return this[nameof(AdditionalMissionsForExtraBiomes)].As<IRandRange>(); } set { this["AdditionalMissionsForExtraBiomes"] = value; } }
        public IRandRange MissionsPerZone { get { return this[nameof(MissionsPerZone)].As<IRandRange>(); } set { this["MissionsPerZone"] = value; } }
        public UArray<MissionBiomeItem> Biomes { get { return new UArray<MissionBiomeItem>(this[nameof(Biomes)].Address); } }
        public UArray<MissionTemplateItem> AvailableMissions { get { return new UArray<MissionTemplateItem>(this[nameof(AvailableMissions)].Address); } }
        public float FacilityMutatorChance { get { return this[nameof(FacilityMutatorChance)].GetValue<float>(); } set { this[nameof(FacilityMutatorChance)].SetValue<float>(value); } }
        public MissionNameBank MissionNames { get { return this[nameof(MissionNames)].As<MissionNameBank>(); } set { this["MissionNames"] = value; } }
        public IRandRange MutatorWarningCount { get { return this[nameof(MutatorWarningCount)].As<IRandRange>(); } set { this["MutatorWarningCount"] = value; } }
        public IRandRange ExtraSeasonWarningCount { get { return this[nameof(ExtraSeasonWarningCount)].As<IRandRange>(); } set { this["ExtraSeasonWarningCount"] = value; } }
        public float DoubleWarningChance { get { return this[nameof(DoubleWarningChance)].GetValue<float>(); } set { this[nameof(DoubleWarningChance)].SetValue<float>(value); } }
        public MissionStat DoubleWarningStat { get { return this[nameof(DoubleWarningStat)].As<MissionStat>(); } set { this["DoubleWarningStat"] = value; } }
        public UArray<MissionMutator> Mutators { get { return new UArray<MissionMutator>(this[nameof(Mutators)].Address); } }
        public UArray<MissionWarning> Warnings { get { return new UArray<MissionWarning>(this[nameof(Warnings)].Address); } }
        public Object IncompatibleWarnings { get { return this[nameof(IncompatibleWarnings)]; } set { this[nameof(IncompatibleWarnings)] = value; } }
        public UArray<MissionChallenge> Challenges { get { return new UArray<MissionChallenge>(this[nameof(Challenges)].Address); } }
        public UArray<PlanetZone> PlanetZones { get { return new UArray<PlanetZone>(this[nameof(PlanetZones)].Address); } }
        public UArray<RequiredMissionItem> GlobalRequiredMissions { get { return new UArray<RequiredMissionItem>(this[nameof(GlobalRequiredMissions)].Address); } }
        public UArray<MissionTemplateItem> GetAllPossibleMissions() { return Invoke<UArray<MissionTemplateItem>>(nameof(GetAllPossibleMissions)); }
    }
    public class GlowPlant : Actor
    {
        public GlowPlant(nint addr) : base(addr) { }
        public StaticMeshComponent TrunkMesh { get { return this[nameof(TrunkMesh)].As<StaticMeshComponent>(); } set { this["TrunkMesh"] = value; } }
        public PointLightComponent mainLight { get { return this[nameof(mainLight)].As<PointLightComponent>(); } set { this["mainLight"] = value; } }
        public float IntensityBase { get { return this[nameof(IntensityBase)].GetValue<float>(); } set { this[nameof(IntensityBase)].SetValue<float>(value); } }
        public float RadiusBase { get { return this[nameof(RadiusBase)].GetValue<float>(); } set { this[nameof(RadiusBase)].SetValue<float>(value); } }
        public float IntensityPerPart { get { return this[nameof(IntensityPerPart)].GetValue<float>(); } set { this[nameof(IntensityPerPart)].SetValue<float>(value); } }
        public float RadiusPerPart { get { return this[nameof(RadiusPerPart)].GetValue<float>(); } set { this[nameof(RadiusPerPart)].SetValue<float>(value); } }
        public float IntensityAllParts { get { return this[nameof(IntensityAllParts)].GetValue<float>(); } set { this[nameof(IntensityAllParts)].SetValue<float>(value); } }
        public float RadiusAllParts { get { return this[nameof(RadiusAllParts)].GetValue<float>(); } set { this[nameof(RadiusAllParts)].SetValue<float>(value); } }
        public float MaxIntensity { get { return this[nameof(MaxIntensity)].GetValue<float>(); } set { this[nameof(MaxIntensity)].SetValue<float>(value); } }
        public float MinIntensity { get { return this[nameof(MinIntensity)].GetValue<float>(); } set { this[nameof(MinIntensity)].SetValue<float>(value); } }
        public float TimeOnMaxLight { get { return this[nameof(TimeOnMaxLight)].GetValue<float>(); } set { this[nameof(TimeOnMaxLight)].SetValue<float>(value); } }
        public float IntensityFadeInTime { get { return this[nameof(IntensityFadeInTime)].GetValue<float>(); } set { this[nameof(IntensityFadeInTime)].SetValue<float>(value); } }
        public float IntensityFadeOutTime { get { return this[nameof(IntensityFadeOutTime)].GetValue<float>(); } set { this[nameof(IntensityFadeOutTime)].SetValue<float>(value); } }
        public float MaxEmissive { get { return this[nameof(MaxEmissive)].GetValue<float>(); } set { this[nameof(MaxEmissive)].SetValue<float>(value); } }
        public float MinEmissive { get { return this[nameof(MinEmissive)].GetValue<float>(); } set { this[nameof(MinEmissive)].SetValue<float>(value); } }
        public float EmissiveFadeInTime { get { return this[nameof(EmissiveFadeInTime)].GetValue<float>(); } set { this[nameof(EmissiveFadeInTime)].SetValue<float>(value); } }
        public float EmissiveFadeOutTime { get { return this[nameof(EmissiveFadeOutTime)].GetValue<float>(); } set { this[nameof(EmissiveFadeOutTime)].SetValue<float>(value); } }
        public void OnDeath() { Invoke(nameof(OnDeath)); }
        public void OnDamage(PrimitiveComponent hitSphere) { Invoke(nameof(OnDamage), hitSphere); }
    }
    public class GoogleAnalyticsWrapper : Object
    {
        public GoogleAnalyticsWrapper(nint addr) : base(addr) { }
        public Object LastUnlockedWeapons { get { return this[nameof(LastUnlockedWeapons)]; } set { this[nameof(LastUnlockedWeapons)] = value; } }
        public Object LastKnownClass { get { return this[nameof(LastKnownClass)]; } set { this[nameof(LastKnownClass)] = value; } }
        public Object BoscoLoadOut { get { return this[nameof(BoscoLoadOut)]; } set { this[nameof(BoscoLoadOut)] = value; } }
        public bool WasCampaign { get { return this[nameof(WasCampaign)].Flag; } set { this[nameof(WasCampaign)].Flag = value; } }
        public Object LastCampaignName { get { return this[nameof(LastCampaignName)]; } set { this[nameof(LastCampaignName)] = value; } }
        public int LastCampaignProgress { get { return this[nameof(LastCampaignProgress)].GetValue<int>(); } set { this[nameof(LastCampaignProgress)].SetValue<int>(value); } }
        public bool WasLastCampaignMission { get { return this[nameof(WasLastCampaignMission)].Flag; } set { this[nameof(WasLastCampaignMission)].Flag = value; } }
        public int LastCampaignSize { get { return this[nameof(LastCampaignSize)].GetValue<int>(); } set { this[nameof(LastCampaignSize)].SetValue<int>(value); } }
        public Object LastWeaponsLoadout { get { return this[nameof(LastWeaponsLoadout)]; } set { this[nameof(LastWeaponsLoadout)] = value; } }
        public Object LastUpgradesLoadout { get { return this[nameof(LastUpgradesLoadout)]; } set { this[nameof(LastUpgradesLoadout)] = value; } }
        public Object SchematicInformation { get { return this[nameof(SchematicInformation)]; } set { this[nameof(SchematicInformation)] = value; } }
        public PartyAnalyticsInformation PartyInfo { get { return this[nameof(PartyInfo)].As<PartyAnalyticsInformation>(); } set { this["PartyInfo"] = value; } }
        public DeepDiveAnalyticsInformation DeepDiveInfo { get { return this[nameof(DeepDiveInfo)].As<DeepDiveAnalyticsInformation>(); } set { this["DeepDiveInfo"] = value; } }
        public Object DiscordCommunityTrackingID { get { return this[nameof(DiscordCommunityTrackingID)]; } set { this[nameof(DiscordCommunityTrackingID)] = value; } }
        public Object CommunityGoalsTrackingID { get { return this[nameof(CommunityGoalsTrackingID)]; } set { this[nameof(CommunityGoalsTrackingID)] = value; } }
        public bool ShouldUpdateSchematicTrackingInformation { get { return this[nameof(ShouldUpdateSchematicTrackingInformation)].Flag; } set { this[nameof(ShouldUpdateSchematicTrackingInformation)].Flag = value; } }
        public void StartMissionPartyInfo(FSDGameState GameState) { Invoke(nameof(StartMissionPartyInfo), GameState); }
        public void SetShouldUpdateSchematicInformation() { Invoke(nameof(SetShouldUpdateSchematicInformation)); }
        public void ResetBoscoLoadout() { Invoke(nameof(ResetBoscoLoadout)); }
        public void RecordTotalTimeHit(Object Key, Object Campaign, bool Rank, int Time) { Invoke(nameof(RecordTotalTimeHit), Key, Campaign, Rank, Time); }
        public void RecordOpenScreen(Object Key, bool Rank) { Invoke(nameof(RecordOpenScreen), Key, Rank); }
        public void RecordMachineEventEnd(Object EventName, bool WasCompleted, float completionTime) { Invoke(nameof(RecordMachineEventEnd), EventName, WasCompleted, completionTime); }
        public void RecordKickPlayer(Object reason, PlayerController KickedPlayer) { Invoke(nameof(RecordKickPlayer), reason, KickedPlayer); }
        public void RecordGAUserTiming(Object TimingCategory, int TimingValue, Object TimingName) { Invoke(nameof(RecordGAUserTiming), TimingCategory, TimingValue, TimingName); }
        public void RecordGaTreeOfVanityClaim(int NodeID) { Invoke(nameof(RecordGaTreeOfVanityClaim), NodeID); }
        public void RecordGASeasonLevelUp() { Invoke(nameof(RecordGASeasonLevelUp)); }
        public void RecordGAMissionTotalTimeHit(Object Key, Object Campaign, bool Rank, int TotalTime, int Progress, int XP, int Credits) { Invoke(nameof(RecordGAMissionTotalTimeHit), Key, Campaign, Rank, TotalTime, Progress, XP, Credits); }
        public void RecordGAMissionTimeEvent(int Time) { Invoke(nameof(RecordGAMissionTimeEvent), Time); }
        public void RecordGAEvent(Object EventCategory, Object EventAction, Object EventLabel, int EventValue, EFSDGoogleAnalyticsProperties Property) { Invoke(nameof(RecordGAEvent), EventCategory, EventAction, EventLabel, EventValue, Property); }
        public void RecordGADeepDiveStageHit(Object Key, bool Rank, int StageTime, int TimeSinceStartOfDive, int TotalTime, int NitraLeft) { Invoke(nameof(RecordGADeepDiveStageHit), Key, Rank, StageTime, TimeSinceStartOfDive, TotalTime, NitraLeft); }
        public void RecordGaChallengeReroll(int ChallengeIndex, SeasonChallenge Challenge) { Invoke(nameof(RecordGaChallengeReroll), ChallengeIndex, Challenge); }
        public void RecordExtraFailInfo(Object MissionName, Object Stage, Object ExtraText) { Invoke(nameof(RecordExtraFailInfo), MissionName, Stage, ExtraText); }
        public void RecordCustomGAEvent(Object EventCategory, Object EventAction, Object EventLabel, int EventValue, Object TrackingID) { Invoke(nameof(RecordCustomGAEvent), EventCategory, EventAction, EventLabel, EventValue, TrackingID); }
        public void RecordContinuousDamage(Actor DamageCauser) { Invoke(nameof(RecordContinuousDamage), DamageCauser); }
        public void RecordBossFightEnd(Object BossName, bool WasBossKilled, int BossKills) { Invoke(nameof(RecordBossFightEnd), BossName, WasBossKilled, BossKills); }
        public Object ProcessCampaignName(Object Campaign) { return Invoke<Object>(nameof(ProcessCampaignName), Campaign); }
        public void PlayerLatejoin() { Invoke(nameof(PlayerLatejoin)); }
        public void PlayerDropout() { Invoke(nameof(PlayerDropout)); }
        public void OnPlayerLeaveBind(FSDPlayerState PlayerState) { Invoke(nameof(OnPlayerLeaveBind), PlayerState); }
        public void OnPlayerJoinBind(FSDPlayerState PlayerState) { Invoke(nameof(OnPlayerJoinBind), PlayerState); }
        public void HandleMatchStarted() { Invoke(nameof(HandleMatchStarted)); }
        public Object GetAnalyticsFText(Object Text) { return Invoke<Object>(nameof(GetAnalyticsFText), Text); }
        public void EndMissionPartyInfo() { Invoke(nameof(EndMissionPartyInfo)); }
    }
    public class GooGun : AmmoDrivenWeapon
    {
        public GooGun(nint addr) : base(addr) { }
        public Object OnStartCharging { get { return this[nameof(OnStartCharging)]; } set { this[nameof(OnStartCharging)] = value; } }
        public Object OnEndCharging { get { return this[nameof(OnEndCharging)]; } set { this[nameof(OnEndCharging)] = value; } }
        public Object OnChargingFailed { get { return this[nameof(OnChargingFailed)]; } set { this[nameof(OnChargingFailed)] = value; } }
        public Object OnChargeChanged { get { return this[nameof(OnChargeChanged)]; } set { this[nameof(OnChargeChanged)] = value; } }
        public float ChargeTime { get { return this[nameof(ChargeTime)].GetValue<float>(); } set { this[nameof(ChargeTime)].SetValue<float>(value); } }
        public int ShotCostCharged { get { return this[nameof(ShotCostCharged)].GetValue<int>(); } set { this[nameof(ShotCostCharged)].SetValue<int>(value); } }
        public float ChargeThreshold { get { return this[nameof(ChargeThreshold)].GetValue<float>(); } set { this[nameof(ChargeThreshold)].SetValue<float>(value); } }
        public float AutoStopCharingAfterSeconds { get { return this[nameof(AutoStopCharingAfterSeconds)].GetValue<float>(); } set { this[nameof(AutoStopCharingAfterSeconds)].SetValue<float>(value); } }
        public int ShotCostCycle { get { return this[nameof(ShotCostCycle)].GetValue<int>(); } set { this[nameof(ShotCostCycle)].SetValue<int>(value); } }
        public EGooGunFireMode FireMode { get { return (EGooGunFireMode)this[nameof(FireMode)].GetValue<int>(); } set { this[nameof(FireMode)].SetValue<int>((int)value); } }
        public SoundCue FullyChargedFireSound { get { return this[nameof(FullyChargedFireSound)].As<SoundCue>(); } set { this["FullyChargedFireSound"] = value; } }
        public int ChargedShotCount { get { return this[nameof(ChargedShotCount)].GetValue<int>(); } set { this[nameof(ChargedShotCount)].SetValue<int>(value); } }
        public float BuckShotSpreadV { get { return this[nameof(BuckShotSpreadV)].GetValue<float>(); } set { this[nameof(BuckShotSpreadV)].SetValue<float>(value); } }
        public float BuckShotSpreadH { get { return this[nameof(BuckShotSpreadH)].GetValue<float>(); } set { this[nameof(BuckShotSpreadH)].SetValue<float>(value); } }
        public float BuckshotArcCompensation { get { return this[nameof(BuckshotArcCompensation)].GetValue<float>(); } set { this[nameof(BuckshotArcCompensation)].SetValue<float>(value); } }
        public FXSystemAsset ChargeupParticles { get { return this[nameof(ChargeupParticles)].As<FXSystemAsset>(); } set { this["ChargeupParticles"] = value; } }
        public FXSystemAsset ChargeupFireMuzzleFlash { get { return this[nameof(ChargeupFireMuzzleFlash)].As<FXSystemAsset>(); } set { this["ChargeupFireMuzzleFlash"] = value; } }
        public FXSystemComponent ChargeupParticleInstance { get { return this[nameof(ChargeupParticleInstance)].As<FXSystemComponent>(); } set { this["ChargeupParticleInstance"] = value; } }
        public AnimMontage FP_ChargeupMontage { get { return this[nameof(FP_ChargeupMontage)].As<AnimMontage>(); } set { this["FP_ChargeupMontage"] = value; } }
        public AnimMontage TP_ChargeupMontage { get { return this[nameof(TP_ChargeupMontage)].As<AnimMontage>(); } set { this["TP_ChargeupMontage"] = value; } }
        public void OnPuddleSuckedIn() { Invoke(nameof(OnPuddleSuckedIn)); }
        public float GetOverChargeProgress() { return Invoke<float>(nameof(GetOverChargeProgress)); }
        public bool GetIsCharging() { return Invoke<bool>(nameof(GetIsCharging)); }
        public float GetChargeProgress() { return Invoke<float>(nameof(GetChargeProgress)); }
        public void ChargingDelegate__DelegateSignature() { Invoke(nameof(ChargingDelegate__DelegateSignature)); }
        public void ChargeChangedDelegate__DelegateSignature(float charge) { Invoke(nameof(ChargeChangedDelegate__DelegateSignature), charge); }
    }
    public class GooGunProjectile : Projectile
    {
        public GooGunProjectile(nint addr) : base(addr) { }
        public float PuddleLifeTime { get { return this[nameof(PuddleLifeTime)].GetValue<float>(); } set { this[nameof(PuddleLifeTime)].SetValue<float>(value); } }
        public int FragmentCount { get { return this[nameof(FragmentCount)].GetValue<int>(); } set { this[nameof(FragmentCount)].SetValue<int>(value); } }
        public GooGunPuddle SpawnPuddle(Transform Transform, Object PuddleClass) { return Invoke<GooGunPuddle>(nameof(SpawnPuddle), Transform, PuddleClass); }
        public void DealSocketArmorDamage(Actor Actor, PrimitiveComponent Target) { Invoke(nameof(DealSocketArmorDamage), Actor, Target); }
    }
    public class GooGunPuddle : Actor
    {
        public GooGunPuddle(nint addr) : base(addr) { }
        public SphereComponent SphereTrigger { get { return this[nameof(SphereTrigger)].As<SphereComponent>(); } set { this["SphereTrigger"] = value; } }
        public SimpleHealthComponent SimpleHealth { get { return this[nameof(SimpleHealth)].As<SimpleHealthComponent>(); } set { this["SimpleHealth"] = value; } }
        public SoundBase SpawnSound { get { return this[nameof(SpawnSound)].As<SoundBase>(); } set { this["SpawnSound"] = value; } }
        public UArray<GooPuddleStatusEffectTrigger> StatusEffectTriggers { get { return new UArray<GooPuddleStatusEffectTrigger>(this[nameof(StatusEffectTriggers)].Address); } }
        public UArray<Object> InflictedStatusEffects { get { return new UArray<Object>(this[nameof(InflictedStatusEffects)].Address); } }
        public int ActiveStatusEffectTriggersMask { get { return this[nameof(ActiveStatusEffectTriggersMask)].GetValue<int>(); } set { this[nameof(ActiveStatusEffectTriggersMask)].SetValue<int>(value); } }
        public float LifeTime { get { return this[nameof(LifeTime)].GetValue<float>(); } set { this[nameof(LifeTime)].SetValue<float>(value); } }
        public bool IsOnFire { get { return this[nameof(IsOnFire)].Flag; } set { this[nameof(IsOnFire)].Flag = value; } }
        public bool CollisionOnClients { get { return this[nameof(CollisionOnClients)].Flag; } set { this[nameof(CollisionOnClients)].Flag = value; } }
        public void SetStatusEffect(Object NewStatusEffect) { Invoke(nameof(SetStatusEffect), NewStatusEffect); }
        public void OnStatusEffectAdded(GooPuddleStatusEffectTrigger Trigger) { Invoke(nameof(OnStatusEffectAdded), Trigger); }
        public void OnRep_IsOnFire(bool Prev_IsOnFire) { Invoke(nameof(OnRep_IsOnFire), Prev_IsOnFire); }
        public void OnRep_ActiveStatusEffectTriggersMask(int PreviousMask) { Invoke(nameof(OnRep_ActiveStatusEffectTriggersMask), PreviousMask); }
        public void OnPuddleEndOverLap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnPuddleEndOverLap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnPuddleBeginOverLap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnPuddleBeginOverLap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void OnHit(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnHit), Damage, DamageData, anyHealthLost); }
        public void OnGooIgnited() { Invoke(nameof(OnGooIgnited)); }
        public void IgniteGoo() { Invoke(nameof(IgniteGoo)); }
        public void AddStatusEffect(Object NewStatusEffect) { Invoke(nameof(AddStatusEffect), NewStatusEffect); }
    }
    public class GooGunAnimInstance : AnimInstance
    {
        public GooGunAnimInstance(nint addr) : base(addr) { }
        public bool isCharging { get { return this[nameof(isCharging)].Flag; } set { this[nameof(isCharging)].Flag = value; } }
        public float ChargePercentVisual { get { return this[nameof(ChargePercentVisual)].GetValue<float>(); } set { this[nameof(ChargePercentVisual)].SetValue<float>(value); } }
        public float ChargePercent { get { return this[nameof(ChargePercent)].GetValue<float>(); } set { this[nameof(ChargePercent)].SetValue<float>(value); } }
        public float OverChargePercent { get { return this[nameof(OverChargePercent)].GetValue<float>(); } set { this[nameof(OverChargePercent)].SetValue<float>(value); } }
        public float BarrelRotationRate { get { return this[nameof(BarrelRotationRate)].GetValue<float>(); } set { this[nameof(BarrelRotationRate)].SetValue<float>(value); } }
        public void SetTargetBarrelRotationRate(float RotationRate) { Invoke(nameof(SetTargetBarrelRotationRate), RotationRate); }
    }
    public class GrabbedStateComponent : CharacterStateComponent
    {
        public GrabbedStateComponent(nint addr) : base(addr) { }
    }
    public class FlyingLifter : AFlyingBug
    {
        public FlyingLifter(nint addr) : base(addr) { }
        public PointLightComponent GrabLight { get { return this[nameof(GrabLight)].As<PointLightComponent>(); } set { this["GrabLight"] = value; } }
        public GrabberComponent GrabberComp { get { return this[nameof(GrabberComp)].As<GrabberComponent>(); } set { this["GrabberComp"] = value; } }
        public CapsuleComponent GrabCapsule { get { return this[nameof(GrabCapsule)].As<CapsuleComponent>(); } set { this["GrabCapsule"] = value; } }
        public AudioComponent GrabbedIdleLoop { get { return this[nameof(GrabbedIdleLoop)].As<AudioComponent>(); } set { this["GrabbedIdleLoop"] = value; } }
        public InDangerComponent InDanger { get { return this[nameof(InDanger)].As<InDangerComponent>(); } set { this["InDanger"] = value; } }
        public AudioComponent ScreamComponent { get { return this[nameof(ScreamComponent)].As<AudioComponent>(); } set { this["ScreamComponent"] = value; } }
        public Object OnGrabSuccess { get { return this[nameof(OnGrabSuccess)]; } set { this[nameof(OnGrabSuccess)] = value; } }
        public float PreventGrabAfterSpawn { get { return this[nameof(PreventGrabAfterSpawn)].GetValue<float>(); } set { this[nameof(PreventGrabAfterSpawn)].SetValue<float>(value); } }
        public EGrabberState GrabberState { get { return (EGrabberState)this[nameof(GrabberState)].GetValue<int>(); } set { this[nameof(GrabberState)].SetValue<int>((int)value); } }
        public float WanderingSpeed { get { return this[nameof(WanderingSpeed)].GetValue<float>(); } set { this[nameof(WanderingSpeed)].SetValue<float>(value); } }
        public float WanderingAcceleration { get { return this[nameof(WanderingAcceleration)].GetValue<float>(); } set { this[nameof(WanderingAcceleration)].SetValue<float>(value); } }
        public float ChaseSpeed { get { return this[nameof(ChaseSpeed)].GetValue<float>(); } set { this[nameof(ChaseSpeed)].SetValue<float>(value); } }
        public float ChaseAcceleration { get { return this[nameof(ChaseAcceleration)].GetValue<float>(); } set { this[nameof(ChaseAcceleration)].SetValue<float>(value); } }
        public float CarrySpeed { get { return this[nameof(CarrySpeed)].GetValue<float>(); } set { this[nameof(CarrySpeed)].SetValue<float>(value); } }
        public float CarryAcceleration { get { return this[nameof(CarryAcceleration)].GetValue<float>(); } set { this[nameof(CarryAcceleration)].SetValue<float>(value); } }
        public float FleeSpeed { get { return this[nameof(FleeSpeed)].GetValue<float>(); } set { this[nameof(FleeSpeed)].SetValue<float>(value); } }
        public float FleeAcceleration { get { return this[nameof(FleeAcceleration)].GetValue<float>(); } set { this[nameof(FleeAcceleration)].SetValue<float>(value); } }
        public float CarryCooldown { get { return this[nameof(CarryCooldown)].GetValue<float>(); } set { this[nameof(CarryCooldown)].SetValue<float>(value); } }
        public SoundBase FleeSound { get { return this[nameof(FleeSound)].As<SoundBase>(); } set { this["FleeSound"] = value; } }
        public AnimSequenceBase FleeAnimation { get { return this[nameof(FleeAnimation)].As<AnimSequenceBase>(); } set { this["FleeAnimation"] = value; } }
        public bool ParalyzeOnGrab { get { return this[nameof(ParalyzeOnGrab)].Flag; } set { this[nameof(ParalyzeOnGrab)].Flag = value; } }
        public float ExtraUpForce { get { return this[nameof(ExtraUpForce)].GetValue<float>(); } set { this[nameof(ExtraUpForce)].SetValue<float>(value); } }
        public float ScreamDistance { get { return this[nameof(ScreamDistance)].GetValue<float>(); } set { this[nameof(ScreamDistance)].SetValue<float>(value); } }
        public bool SelectAnotherTarget() { return Invoke<bool>(nameof(SelectAnotherTarget)); }
        public void OnStateBroke(Actor aReleasedPlayer, bool fullGrabElapsed) { Invoke(nameof(OnStateBroke), aReleasedPlayer, fullGrabElapsed); }
        public void OnRep_State(EGrabberState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnInDanger() { Invoke(nameof(OnInDanger)); }
        public void OnActorLeftGrabZone(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnActorLeftGrabZone), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnActorEnterGrabZone(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnActorEnterGrabZone), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public bool GetJustGrabbed() { return Invoke<bool>(nameof(GetJustGrabbed)); }
        public void DropTarget() { Invoke(nameof(DropTarget)); }
        public void ChangeState(EGrabberState aGrabberState) { Invoke(nameof(ChangeState), aGrabberState); }
    }
    public class FlyingLifterAnimInstance : SimpleMovingEnemyAnimInstance
    {
        public FlyingLifterAnimInstance(nint addr) : base(addr) { }
        public bool HasGrabbedPlayer { get { return this[nameof(HasGrabbedPlayer)].Flag; } set { this[nameof(HasGrabbedPlayer)].Flag = value; } }
        public bool ToChaseLock { get { return this[nameof(ToChaseLock)].Flag; } set { this[nameof(ToChaseLock)].Flag = value; } }
        public bool ChaseToWanderLock { get { return this[nameof(ChaseToWanderLock)].Flag; } set { this[nameof(ChaseToWanderLock)].Flag = value; } }
        public bool ToCarryLock { get { return this[nameof(ToCarryLock)].Flag; } set { this[nameof(ToCarryLock)].Flag = value; } }
        public EGrabberState GrabberState { get { return (EGrabberState)this[nameof(GrabberState)].GetValue<int>(); } set { this[nameof(GrabberState)].SetValue<int>((int)value); } }
    }
    public class GrabberComponent : ActorComponent
    {
        public GrabberComponent(nint addr) : base(addr) { }
        public Object OnGrabbedActor { get { return this[nameof(OnGrabbedActor)]; } set { this[nameof(OnGrabbedActor)] = value; } }
        public Object OnReleasedActor { get { return this[nameof(OnReleasedActor)]; } set { this[nameof(OnReleasedActor)] = value; } }
        public GameplayTagQuery TagFilter { get { return this[nameof(TagFilter)].As<GameplayTagQuery>(); } set { this["TagFilter"] = value; } }
        public AudioComponent GrabLoopSoundInstance { get { return this[nameof(GrabLoopSoundInstance)].As<AudioComponent>(); } set { this["GrabLoopSoundInstance"] = value; } }
        public Object PathfinderOwner { get { return this[nameof(PathfinderOwner)]; } set { this[nameof(PathfinderOwner)] = value; } }
        public Object OwnerMesh { get { return this[nameof(OwnerMesh)]; } set { this[nameof(OwnerMesh)] = value; } }
        public SoundCue BeginGrabedSound { get { return this[nameof(BeginGrabedSound)].As<SoundCue>(); } set { this["BeginGrabedSound"] = value; } }
        public SoundCue GrabedLoopSound { get { return this[nameof(GrabedLoopSound)].As<SoundCue>(); } set { this["GrabedLoopSound"] = value; } }
        public SoundCue EndGrabedSound { get { return this[nameof(EndGrabedSound)].As<SoundCue>(); } set { this["EndGrabedSound"] = value; } }
        public DialogDataAsset BeginGrabbedShout { get { return this[nameof(BeginGrabbedShout)].As<DialogDataAsset>(); } set { this["BeginGrabbedShout"] = value; } }
        public DialogDataAsset EndGrabbedShout { get { return this[nameof(EndGrabbedShout)].As<DialogDataAsset>(); } set { this["EndGrabbedShout"] = value; } }
        public DialogDataAsset AttentionGrabbedShout { get { return this[nameof(AttentionGrabbedShout)].As<DialogDataAsset>(); } set { this["AttentionGrabbedShout"] = value; } }
        public Actor CurrentlyGrabbed { get { return this[nameof(CurrentlyGrabbed)].As<Actor>(); } set { this["CurrentlyGrabbed"] = value; } }
        public Object GrabAttachName { get { return this[nameof(GrabAttachName)]; } set { this[nameof(GrabAttachName)] = value; } }
        public float GrabTime { get { return this[nameof(GrabTime)].GetValue<float>(); } set { this[nameof(GrabTime)].SetValue<float>(value); } }
        public float CarryCooldown { get { return this[nameof(CarryCooldown)].GetValue<float>(); } set { this[nameof(CarryCooldown)].SetValue<float>(value); } }
        public float RevivedGravePeriod { get { return this[nameof(RevivedGravePeriod)].GetValue<float>(); } set { this[nameof(RevivedGravePeriod)].SetValue<float>(value); } }
        public EOutline PlayerOutlineOnGrab { get { return (EOutline)this[nameof(PlayerOutlineOnGrab)].GetValue<int>(); } set { this[nameof(PlayerOutlineOnGrab)].SetValue<int>((int)value); } }
        public EGrabbedStateCameraMode CameraMode { get { return (EGrabbedStateCameraMode)this[nameof(CameraMode)].GetValue<int>(); } set { this[nameof(CameraMode)].SetValue<int>((int)value); } }
        public bool TrackPlayerCollision { get { return this[nameof(TrackPlayerCollision)].Flag; } set { this[nameof(TrackPlayerCollision)].Flag = value; } }
        public bool ManualGrabTime { get { return this[nameof(ManualGrabTime)].Flag; } set { this[nameof(ManualGrabTime)].Flag = value; } }
        public bool CanPlayerShoot { get { return this[nameof(CanPlayerShoot)].Flag; } set { this[nameof(CanPlayerShoot)].Flag = value; } }
        public bool HeightenSensesImmune { get { return this[nameof(HeightenSensesImmune)].Flag; } set { this[nameof(HeightenSensesImmune)].Flag = value; } }
        public bool NeedsPathToTarget { get { return this[nameof(NeedsPathToTarget)].Flag; } set { this[nameof(NeedsPathToTarget)].Flag = value; } }
        public void Timer_ReleaseTarget() { Invoke(nameof(Timer_ReleaseTarget)); }
        public void ReleaseTarget() { Invoke(nameof(ReleaseTarget)); }
        public void OnRep_CurrentlyGrabbed(Actor oldCurrentlyGrabbed) { Invoke(nameof(OnRep_CurrentlyGrabbed), oldCurrentlyGrabbed); }
        public void OnPrimWake(PrimitiveComponent WakingComponent, Object BoneName) { Invoke(nameof(OnPrimWake), WakingComponent, BoneName); }
        public bool IsGrabbedTargetValid() { return Invoke<bool>(nameof(IsGrabbedTargetValid)); }
        public bool HasGrabbed() { return Invoke<bool>(nameof(HasGrabbed)); }
        public bool GrabTarget(Actor aGrabTarget) { return Invoke<bool>(nameof(GrabTarget), aGrabTarget); }
        public Actor GetGrabbedActor() { return Invoke<Actor>(nameof(GetGrabbedActor)); }
        public bool CanGrabTarget(Actor aTarget) { return Invoke<bool>(nameof(CanGrabTarget), aTarget); }
    }
    public class FakePhysGrabberComponent : GrabberComponent
    {
        public FakePhysGrabberComponent(nint addr) : base(addr) { }
        public UArray<GrabAvoidClassEntry> ActorTypesToAvoid { get { return new UArray<GrabAvoidClassEntry>(this[nameof(ActorTypesToAvoid)].Address); } }
        public UArray<AvoidActorEntry> ActorsToAvoid { get { return new UArray<AvoidActorEntry>(this[nameof(ActorsToAvoid)].Address); } }
    }
    public class GrapplingHookGun : AnimatedItem
    {
        public GrapplingHookGun(nint addr) : base(addr) { }
        public CoolDownItemAggregator CoolDownAggregator { get { return this[nameof(CoolDownAggregator)].As<CoolDownItemAggregator>(); } set { this["CoolDownAggregator"] = value; } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public AnimMontage FPReloadAnim { get { return this[nameof(FPReloadAnim)].As<AnimMontage>(); } set { this["FPReloadAnim"] = value; } }
        public AnimMontage TPReloadAnim { get { return this[nameof(TPReloadAnim)].As<AnimMontage>(); } set { this["TPReloadAnim"] = value; } }
        public AnimMontage FPGunslingAnim { get { return this[nameof(FPGunslingAnim)].As<AnimMontage>(); } set { this["FPGunslingAnim"] = value; } }
        public AnimMontage TPGunslingAnim { get { return this[nameof(TPGunslingAnim)].As<AnimMontage>(); } set { this["TPGunslingAnim"] = value; } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float MaxSpeedReleaseModifier { get { return this[nameof(MaxSpeedReleaseModifier)].GetValue<float>(); } set { this[nameof(MaxSpeedReleaseModifier)].SetValue<float>(value); } }
        public float WindUpTime { get { return this[nameof(WindUpTime)].GetValue<float>(); } set { this[nameof(WindUpTime)].SetValue<float>(value); } }
        public bool AutoFire { get { return this[nameof(AutoFire)].Flag; } set { this[nameof(AutoFire)].Flag = value; } }
        public GraplingGunState State { get { return this[nameof(State)].As<GraplingGunState>(); } set { this["State"] = value; } }
        public float GrapleStartTime { get { return this[nameof(GrapleStartTime)].GetValue<float>(); } set { this[nameof(GrapleStartTime)].SetValue<float>(value); } }
        public void StopGrapple() { Invoke(nameof(StopGrapple)); }
        public bool StartGrapple() { return Invoke<bool>(nameof(StartGrapple)); }
        public void Server_SetState(GraplingGunState NewState) { Invoke(nameof(Server_SetState), NewState); }
        public void OnRep_State(GraplingGunState prevState) { Invoke(nameof(OnRep_State), prevState); }
        public void OnReleaseHook() { Invoke(nameof(OnReleaseHook)); }
        public void OnGrappleUpdate(float DeltaSeconds) { Invoke(nameof(OnGrappleUpdate), DeltaSeconds); }
        public void OnGrappleStart() { Invoke(nameof(OnGrappleStart)); }
        public void OnGrappleFailed(bool TooFar) { Invoke(nameof(OnGrappleFailed), TooFar); }
        public void OnGrappleEnd() { Invoke(nameof(OnGrappleEnd)); }
        public float GetWindUpProgress() { return Invoke<float>(nameof(GetWindUpProgress)); }
        public float GetCooldownDuration(Object GrapplingHookGun) { return Invoke<float>(nameof(GetCooldownDuration), GrapplingHookGun); }
    }
    public class GravityChangedComponent : ActorComponent
    {
        public GravityChangedComponent(nint addr) : base(addr) { }
        public bool bAwakeOnGravityChanged { get { return this[nameof(bAwakeOnGravityChanged)].Flag; } set { this[nameof(bAwakeOnGravityChanged)].Flag = value; } }
        public UArray<PrimitiveComponent> PrimitiveComponents { get { return new UArray<PrimitiveComponent>(this[nameof(PrimitiveComponents)].Address); } }
        public void OnGravityChanged(float Gravity, float Change) { Invoke(nameof(OnGravityChanged), Gravity, Change); }
    }
    public class MolotovComponent : ActorComponent
    {
        public MolotovComponent(nint addr) : base(addr) { }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public Object BurningFlamesClass { get { return this[nameof(BurningFlamesClass)]; } set { this[nameof(BurningFlamesClass)] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public void Trigger() { Invoke(nameof(Trigger)); }
    }
    public class AreaSpawnerComponent : ActorComponent
    {
        public AreaSpawnerComponent(nint addr) : base(addr) { }
        public Object ActorToSpawn { get { return this[nameof(ActorToSpawn)]; } set { this[nameof(ActorToSpawn)] = value; } }
        public DeepPathFinderSize PathfinderSize { get { return (DeepPathFinderSize)this[nameof(PathfinderSize)].GetValue<int>(); } set { this[nameof(PathfinderSize)].SetValue<int>((int)value); } }
        public float ChanceToSpawn { get { return this[nameof(ChanceToSpawn)].GetValue<float>(); } set { this[nameof(ChanceToSpawn)].SetValue<float>(value); } }
        public void SpawnInArea(Vector Origin, float Radius, float maxVerticalDistance, Pawn Instigator) { Invoke(nameof(SpawnInArea), Origin, Radius, maxVerticalDistance, Instigator); }
    }
    public class HugeExplosionComponent : ActorComponent
    {
        public HugeExplosionComponent(nint addr) : base(addr) { }
        public ParticleSystem ExplosionEffect { get { return this[nameof(ExplosionEffect)].As<ParticleSystem>(); } set { this["ExplosionEffect"] = value; } }
        public float ExplosionSpeed { get { return this[nameof(ExplosionSpeed)].GetValue<float>(); } set { this[nameof(ExplosionSpeed)].SetValue<float>(value); } }
        public float ExplosionSize { get { return this[nameof(ExplosionSize)].GetValue<float>(); } set { this[nameof(ExplosionSize)].SetValue<float>(value); } }
        public void TriggerExplosion(Vector Location) { Invoke(nameof(TriggerExplosion), Location); }
    }
    public class GrenadeAnimationSet : DataAsset
    {
        public GrenadeAnimationSet(nint addr) : base(addr) { }
        public AnimMontage FP_EquipAnimation { get { return this[nameof(FP_EquipAnimation)].As<AnimMontage>(); } set { this["FP_EquipAnimation"] = value; } }
        public AnimMontage TP_EquipAnimation { get { return this[nameof(TP_EquipAnimation)].As<AnimMontage>(); } set { this["TP_EquipAnimation"] = value; } }
        public AnimMontage FP_ThrowAnimation { get { return this[nameof(FP_ThrowAnimation)].As<AnimMontage>(); } set { this["FP_ThrowAnimation"] = value; } }
        public AnimMontage TP_ThrowAnimation { get { return this[nameof(TP_ThrowAnimation)].As<AnimMontage>(); } set { this["TP_ThrowAnimation"] = value; } }
    }
    public class GrenadeProjectionSettings : DataAsset
    {
        public GrenadeProjectionSettings(nint addr) : base(addr) { }
        public UArray<Vector> SplinePoints { get { return new UArray<Vector>(this[nameof(SplinePoints)].Address); } }
        public float ProjectionScale { get { return this[nameof(ProjectionScale)].GetValue<float>(); } set { this[nameof(ProjectionScale)].SetValue<float>(value); } }
        public float VelocityScale { get { return this[nameof(VelocityScale)].GetValue<float>(); } set { this[nameof(VelocityScale)].SetValue<float>(value); } }
        public bool ProjectionVisible { get { return this[nameof(ProjectionVisible)].Flag; } set { this[nameof(ProjectionVisible)].Flag = value; } }
    }
    public class GroundToAirComponent : ActorComponent
    {
        public GroundToAirComponent(nint addr) : base(addr) { }
        public Object OnChangedPathfinderState { get { return this[nameof(OnChangedPathfinderState)]; } set { this[nameof(OnChangedPathfinderState)] = value; } }
        public DeepPathfinderMovement CurrentMove { get { return this[nameof(CurrentMove)].As<DeepPathfinderMovement>(); } set { this["CurrentMove"] = value; } }
        public float WalkTime { get { return this[nameof(WalkTime)].GetValue<float>(); } set { this[nameof(WalkTime)].SetValue<float>(value); } }
        public float WalkTimeMaxRandomOffset { get { return this[nameof(WalkTimeMaxRandomOffset)].GetValue<float>(); } set { this[nameof(WalkTimeMaxRandomOffset)].SetValue<float>(value); } }
        public float WalkTimeMinRandomOffset { get { return this[nameof(WalkTimeMinRandomOffset)].GetValue<float>(); } set { this[nameof(WalkTimeMinRandomOffset)].SetValue<float>(value); } }
        public bool WalkUseTimer { get { return this[nameof(WalkUseTimer)].Flag; } set { this[nameof(WalkUseTimer)].Flag = value; } }
        public StateStats WalkStats { get { return this[nameof(WalkStats)].As<StateStats>(); } set { this["WalkStats"] = value; } }
        public float FlyTime { get { return this[nameof(FlyTime)].GetValue<float>(); } set { this[nameof(FlyTime)].SetValue<float>(value); } }
        public float FlyTimeMaxRandomOffset { get { return this[nameof(FlyTimeMaxRandomOffset)].GetValue<float>(); } set { this[nameof(FlyTimeMaxRandomOffset)].SetValue<float>(value); } }
        public float FlyTimeMinRandomOffset { get { return this[nameof(FlyTimeMinRandomOffset)].GetValue<float>(); } set { this[nameof(FlyTimeMinRandomOffset)].SetValue<float>(value); } }
        public bool FlyUseTimer { get { return this[nameof(FlyUseTimer)].Flag; } set { this[nameof(FlyUseTimer)].Flag = value; } }
        public StateStats FlyStats { get { return this[nameof(FlyStats)].As<StateStats>(); } set { this["FlyStats"] = value; } }
        public bool IsFlying { get { return this[nameof(IsFlying)].Flag; } set { this[nameof(IsFlying)].Flag = value; } }
        public Object OwningPathfinder { get { return this[nameof(OwningPathfinder)]; } set { this[nameof(OwningPathfinder)] = value; } }
        public void SetIsFlying(bool aIsFlying) { Invoke(nameof(SetIsFlying), aIsFlying); }
        public void SetAllowedToChangeState(bool aIsAllowed) { Invoke(nameof(SetAllowedToChangeState), aIsAllowed); }
        public void OnRep_StateChange() { Invoke(nameof(OnRep_StateChange)); }
        public bool GetIsWalking() { return Invoke<bool>(nameof(GetIsWalking)); }
        public bool GetIsFlying() { return Invoke<bool>(nameof(GetIsFlying)); }
        public void Engage() { Invoke(nameof(Engage)); }
    }
    public class GrowthComponent : ActorComponent
    {
        public GrowthComponent(nint addr) : base(addr) { }
        public SceneComponent ScaleComponent { get { return this[nameof(ScaleComponent)].As<SceneComponent>(); } set { this["ScaleComponent"] = value; } }
        public RuntimeFloatCurve CurrentGrowthCurve { get { return this[nameof(CurrentGrowthCurve)].As<RuntimeFloatCurve>(); } set { this["CurrentGrowthCurve"] = value; } }
        public void StopGrow() { Invoke(nameof(StopGrow)); }
        public void StartGrow(SceneComponent aComponentToScale, RuntimeFloatCurve aCurve) { Invoke(nameof(StartGrow), aComponentToScale, aCurve); }
    }
    public class GuntowerActivationPlatform : Actor
    {
        public GuntowerActivationPlatform(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public StaticMeshComponent STMesh { get { return this[nameof(STMesh)].As<StaticMeshComponent>(); } set { this["STMesh"] = value; } }
        public CapsuleComponent Trigger { get { return this[nameof(Trigger)].As<CapsuleComponent>(); } set { this["Trigger"] = value; } }
        public Object OnProgressUpdatedDelegate { get { return this[nameof(OnProgressUpdatedDelegate)]; } set { this[nameof(OnProgressUpdatedDelegate)] = value; } }
        public Object OnPlayersInsideChangedDelegate { get { return this[nameof(OnPlayersInsideChangedDelegate)]; } set { this[nameof(OnPlayersInsideChangedDelegate)] = value; } }
        public Object OnProgressFilled { get { return this[nameof(OnProgressFilled)]; } set { this[nameof(OnProgressFilled)] = value; } }
        public GuntowerModule AssignedModule { get { return this[nameof(AssignedModule)].As<GuntowerModule>(); } set { this["AssignedModule"] = value; } }
        public float DoneAt { get { return this[nameof(DoneAt)].GetValue<float>(); } set { this[nameof(DoneAt)].SetValue<float>(value); } }
        public float DisabledTime { get { return this[nameof(DisabledTime)].GetValue<float>(); } set { this[nameof(DisabledTime)].SetValue<float>(value); } }
        public int playersInside { get { return this[nameof(playersInside)].GetValue<int>(); } set { this[nameof(playersInside)].SetValue<int>(value); } }
        public bool Disabled { get { return this[nameof(Disabled)].Flag; } set { this[nameof(Disabled)].Flag = value; } }
        public bool IsShutDown { get { return this[nameof(IsShutDown)].Flag; } set { this[nameof(IsShutDown)].Flag = value; } }
        public void ShutDown() { Invoke(nameof(ShutDown)); }
        public void SetPlatformActive(bool IsActive) { Invoke(nameof(SetPlatformActive), IsActive); }
        public void ReEnable() { Invoke(nameof(ReEnable)); }
        public void PlayerSteppedOn(int CurrentCount) { Invoke(nameof(PlayerSteppedOn), CurrentCount); }
        public void PlayerSteppedOff(int CurrentCount) { Invoke(nameof(PlayerSteppedOff), CurrentCount); }
        public void PlayerInsideRevived() { Invoke(nameof(PlayerInsideRevived)); }
        public void PlayerInsideDied(HealthComponentBase Health) { Invoke(nameof(PlayerInsideDied), Health); }
        public void OnShutDown() { Invoke(nameof(OnShutDown)); }
        public void OnRep_PlayersInside(int OldCount) { Invoke(nameof(OnRep_PlayersInside), OldCount); }
        public void OnRep_IsShutDown() { Invoke(nameof(OnRep_IsShutDown)); }
        public void OnRep_Disabled() { Invoke(nameof(OnRep_Disabled)); }
        public void OnPlayersInsideChanged(int playersInside) { Invoke(nameof(OnPlayersInsideChanged), playersInside); }
        public void OnPlayerLeave(FSDPlayerState PlayerState) { Invoke(nameof(OnPlayerLeave), PlayerState); }
        public void OnOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void OnFinished() { Invoke(nameof(OnFinished)); }
        public void OnDisabledChanged(bool IsDisabled) { Invoke(nameof(OnDisabledChanged), IsDisabled); }
        public void ModuleDestroyed(HealthComponentBase Health) { Invoke(nameof(ModuleDestroyed), Health); }
        public int GetPlayerCount() { return Invoke<int>(nameof(GetPlayerCount)); }
        public GuntowerModule GetAssignedModule() { return Invoke<GuntowerModule>(nameof(GetAssignedModule)); }
        public void EndOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(EndOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public bool CanWidgetAppear() { return Invoke<bool>(nameof(CanWidgetAppear)); }
        public void AssignModule(GuntowerModule towerModule) { Invoke(nameof(AssignModule), towerModule); }
    }
    public class GuntowerEvent : GameEvent
    {
        public GuntowerEvent(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent BaseMesh { get { return this[nameof(BaseMesh)].As<SkeletalMeshComponent>(); } set { this["BaseMesh"] = value; } }
        public DamageComponent EndExplosionDamage { get { return this[nameof(EndExplosionDamage)].As<DamageComponent>(); } set { this["EndExplosionDamage"] = value; } }
        public UArray<GuntowerModuleLevel> GuntowerLevels { get { return new UArray<GuntowerModuleLevel>(this[nameof(GuntowerLevels)].Address); } }
        public Object ModuleAttachBone { get { return this[nameof(ModuleAttachBone)]; } set { this[nameof(ModuleAttachBone)] = value; } }
        public float TowerExplodeDelay { get { return this[nameof(TowerExplodeDelay)].GetValue<float>(); } set { this[nameof(TowerExplodeDelay)].SetValue<float>(value); } }
        public float DelayBetweenExplosions { get { return this[nameof(DelayBetweenExplosions)].GetValue<float>(); } set { this[nameof(DelayBetweenExplosions)].SetValue<float>(value); } }
        public UArray<GuntowerModule> TowerModules { get { return new UArray<GuntowerModule>(this[nameof(TowerModules)].Address); } }
        public int ActiveHostileModules { get { return this[nameof(ActiveHostileModules)].GetValue<int>(); } set { this[nameof(ActiveHostileModules)].SetValue<int>(value); } }
        public void SpawnModules() { Invoke(nameof(SpawnModules)); }
        public void OnRep_ModuleActive() { Invoke(nameof(OnRep_ModuleActive)); }
        public void OnModulesSpawned() { Invoke(nameof(OnModulesSpawned)); }
        public void OnModuleExploded(GuntowerModule explodedModule) { Invoke(nameof(OnModuleExploded), explodedModule); }
    }
    public class TowerModuleBase : FSDPawn
    {
        public TowerModuleBase(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent ModuleMesh { get { return this[nameof(ModuleMesh)].As<SkeletalMeshComponent>(); } set { this["ModuleMesh"] = value; } }
        public UArray<StaticMeshComponent> ArmorPlates { get { return new UArray<StaticMeshComponent>(this[nameof(ArmorPlates)].Address); } }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public Rotator ModuleRotation { get { return this[nameof(ModuleRotation)].As<Rotator>(); } set { this["ModuleRotation"] = value; } }
        public SkeletalMesh DestroyedMesh { get { return this[nameof(DestroyedMesh)].As<SkeletalMesh>(); } set { this["DestroyedMesh"] = value; } }
        public SoundCue deathSound { get { return this[nameof(deathSound)].As<SoundCue>(); } set { this["deathSound"] = value; } }
        public ParticleSystem deathParticles { get { return this[nameof(deathParticles)].As<ParticleSystem>(); } set { this["deathParticles"] = value; } }
        public float ArmorLaunchPower { get { return this[nameof(ArmorLaunchPower)].GetValue<float>(); } set { this[nameof(ArmorLaunchPower)].SetValue<float>(value); } }
        public float HideArmorTime { get { return this[nameof(HideArmorTime)].GetValue<float>(); } set { this[nameof(HideArmorTime)].SetValue<float>(value); } }
        public float ModuleRotationSpeed { get { return this[nameof(ModuleRotationSpeed)].GetValue<float>(); } set { this[nameof(ModuleRotationSpeed)].SetValue<float>(value); } }
        public bool ConstantRotation { get { return this[nameof(ConstantRotation)].Flag; } set { this[nameof(ConstantRotation)].Flag = value; } }
        public EGuntowerModuleState State { get { return (EGuntowerModuleState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public void SetState(EGuntowerModuleState State) { Invoke(nameof(SetState), State); }
        public void OnRep_State(EGuntowerModuleState prevState) { Invoke(nameof(OnRep_State), prevState); }
        public void HideArmorPlates() { Invoke(nameof(HideArmorPlates)); }
        public void DoAttack() { Invoke(nameof(DoAttack)); }
    }
    public class AimingTowerModule : TowerModuleBase
    {
        public AimingTowerModule(nint addr) : base(addr) { }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public Rotator AimRotation { get { return this[nameof(AimRotation)].As<Rotator>(); } set { this["AimRotation"] = value; } }
        public float BurstTime { get { return this[nameof(BurstTime)].GetValue<float>(); } set { this[nameof(BurstTime)].SetValue<float>(value); } }
        public float AttackTime { get { return this[nameof(AttackTime)].GetValue<float>(); } set { this[nameof(AttackTime)].SetValue<float>(value); } }
        public int BurstSize { get { return this[nameof(BurstSize)].GetValue<int>(); } set { this[nameof(BurstSize)].SetValue<int>(value); } }
    }
    public class GuntowerModule : FSDPawn
    {
        public GuntowerModule(nint addr) : base(addr) { }
        public SoundCue ExposeWeakpointSound { get { return this[nameof(ExposeWeakpointSound)].As<SoundCue>(); } set { this["ExposeWeakpointSound"] = value; } }
        public SoundCue deathSound { get { return this[nameof(deathSound)].As<SoundCue>(); } set { this["deathSound"] = value; } }
        public ParticleSystem deathParticles { get { return this[nameof(deathParticles)].As<ParticleSystem>(); } set { this["deathParticles"] = value; } }
        public UArray<Actor> WeakpointActors { get { return new UArray<Actor>(this[nameof(WeakpointActors)].Address); } }
        public Object BodyBone { get { return this[nameof(BodyBone)]; } set { this[nameof(BodyBone)] = value; } }
        public Object TopConnectionPointName { get { return this[nameof(TopConnectionPointName)]; } set { this[nameof(TopConnectionPointName)] = value; } }
        public Rotator CurrentTurretRotation { get { return this[nameof(CurrentTurretRotation)].As<Rotator>(); } set { this["CurrentTurretRotation"] = value; } }
        public AnimSequenceBase IntroductionAnimation { get { return this[nameof(IntroductionAnimation)].As<AnimSequenceBase>(); } set { this["IntroductionAnimation"] = value; } }
        public StaticMeshComponent ArmorPiece1 { get { return this[nameof(ArmorPiece1)].As<StaticMeshComponent>(); } set { this["ArmorPiece1"] = value; } }
        public StaticMeshComponent ArmorPiece2 { get { return this[nameof(ArmorPiece2)].As<StaticMeshComponent>(); } set { this["ArmorPiece2"] = value; } }
        public StaticMeshComponent ArmorPiece3 { get { return this[nameof(ArmorPiece3)].As<StaticMeshComponent>(); } set { this["ArmorPiece3"] = value; } }
        public SkeletalMeshComponent ModuleMesh { get { return this[nameof(ModuleMesh)].As<SkeletalMeshComponent>(); } set { this["ModuleMesh"] = value; } }
        public GunTowerHealthComponent GuntowerModuleHealth { get { return this[nameof(GuntowerModuleHealth)].As<GunTowerHealthComponent>(); } set { this["GuntowerModuleHealth"] = value; } }
        public GuntowerEvent OwningEvent { get { return this[nameof(OwningEvent)].As<GuntowerEvent>(); } set { this["OwningEvent"] = value; } }
        public GuntowerModule ChildModule { get { return this[nameof(ChildModule)].As<GuntowerModule>(); } set { this["ChildModule"] = value; } }
        public float WeakpointsExposedTime { get { return this[nameof(WeakpointsExposedTime)].GetValue<float>(); } set { this[nameof(WeakpointsExposedTime)].SetValue<float>(value); } }
        public float WeakpointsExposedTimeSolo { get { return this[nameof(WeakpointsExposedTimeSolo)].GetValue<float>(); } set { this[nameof(WeakpointsExposedTimeSolo)].SetValue<float>(value); } }
        public float HideArmorTime { get { return this[nameof(HideArmorTime)].GetValue<float>(); } set { this[nameof(HideArmorTime)].SetValue<float>(value); } }
        public float ArmorShootoutDelay { get { return this[nameof(ArmorShootoutDelay)].GetValue<float>(); } set { this[nameof(ArmorShootoutDelay)].SetValue<float>(value); } }
        public float ArmorLaunchPower { get { return this[nameof(ArmorLaunchPower)].GetValue<float>(); } set { this[nameof(ArmorLaunchPower)].SetValue<float>(value); } }
        public int ModuleID { get { return this[nameof(ModuleID)].GetValue<int>(); } set { this[nameof(ModuleID)].SetValue<int>(value); } }
        public bool IsPassiveModule { get { return this[nameof(IsPassiveModule)].Flag; } set { this[nameof(IsPassiveModule)].Flag = value; } }
        public bool ModuleIsActive { get { return this[nameof(ModuleIsActive)].Flag; } set { this[nameof(ModuleIsActive)].Flag = value; } }
        public bool AreWeakpointsExposed { get { return this[nameof(AreWeakpointsExposed)].Flag; } set { this[nameof(AreWeakpointsExposed)].Flag = value; } }
        public bool AreWeaponsExposed { get { return this[nameof(AreWeaponsExposed)].Flag; } set { this[nameof(AreWeaponsExposed)].Flag = value; } }
        public bool ConstantRotation { get { return this[nameof(ConstantRotation)].Flag; } set { this[nameof(ConstantRotation)].Flag = value; } }
        public bool IsArmorOff { get { return this[nameof(IsArmorOff)].Flag; } set { this[nameof(IsArmorOff)].Flag = value; } }
        public bool Exploded { get { return this[nameof(Exploded)].Flag; } set { this[nameof(Exploded)].Flag = value; } }
        public void ShootOutArmor() { Invoke(nameof(ShootOutArmor)); }
        public void SetModuleActive() { Invoke(nameof(SetModuleActive)); }
        public void OnTearArmor() { Invoke(nameof(OnTearArmor)); }
        public void OnRep_IsModuleActive() { Invoke(nameof(OnRep_IsModuleActive)); }
        public void OnRep_IsArmorOff() { Invoke(nameof(OnRep_IsArmorOff)); }
        public void OnRep_Exploded() { Invoke(nameof(OnRep_Exploded)); }
        public void OnRep_AreWeakpointExposed() { Invoke(nameof(OnRep_AreWeakpointExposed)); }
        public void OnActivationChanged(bool IsActivated) { Invoke(nameof(OnActivationChanged), IsActivated); }
        public void Introduce() { Invoke(nameof(Introduce)); }
        public void HideWeakpoints() { Invoke(nameof(HideWeakpoints)); }
        public void HideArmor() { Invoke(nameof(HideArmor)); }
        public int GetModuleID() { return Invoke<int>(nameof(GetModuleID)); }
        public void DoExplosion() { Invoke(nameof(DoExplosion)); }
        public void DeactivateTowerModule() { Invoke(nameof(DeactivateTowerModule)); }
        public void All_PlayIntroductionAnim() { Invoke(nameof(All_PlayIntroductionAnim)); }
        public void ActivateTowerModule() { Invoke(nameof(ActivateTowerModule)); }
    }
    public class HostileGuntowerModule : GuntowerModule
    {
        public HostileGuntowerModule(nint addr) : base(addr) { }
        public SkeletalMeshComponent DestroyedMesh { get { return this[nameof(DestroyedMesh)].As<SkeletalMeshComponent>(); } set { this["DestroyedMesh"] = value; } }
        public ParticleSystemComponent DestroyedSmoke { get { return this[nameof(DestroyedSmoke)].As<ParticleSystemComponent>(); } set { this["DestroyedSmoke"] = value; } }
        public EnemyComponent EnemyComponent { get { return this[nameof(EnemyComponent)].As<EnemyComponent>(); } set { this["EnemyComponent"] = value; } }
        public float ModuleMaxHealth { get { return this[nameof(ModuleMaxHealth)].GetValue<float>(); } set { this[nameof(ModuleMaxHealth)].SetValue<float>(value); } }
        public Rotator CurrentAimRotation { get { return this[nameof(CurrentAimRotation)].As<Rotator>(); } set { this["CurrentAimRotation"] = value; } }
        public void OnWeakpointDied(HealthComponentBase Health) { Invoke(nameof(OnWeakpointDied), Health); }
        public void OnRep_ModuleMaxHealth() { Invoke(nameof(OnRep_ModuleMaxHealth)); }
        public void OnModuleDied(HealthComponentBase Health) { Invoke(nameof(OnModuleDied), Health); }
    }
    public class HostileTargetingGuntowerModule : HostileGuntowerModule
    {
        public HostileTargetingGuntowerModule(nint addr) : base(addr) { }
        public UArray<Actor> SensedTargets { get { return new UArray<Actor>(this[nameof(SensedTargets)].Address); } }
        public float TurretRotationSpeed { get { return this[nameof(TurretRotationSpeed)].GetValue<float>(); } set { this[nameof(TurretRotationSpeed)].SetValue<float>(value); } }
        public Actor TargetedActor { get { return this[nameof(TargetedActor)].As<Actor>(); } set { this["TargetedActor"] = value; } }
        public float TargetingRotationSpeed { get { return this[nameof(TargetingRotationSpeed)].GetValue<float>(); } set { this[nameof(TargetingRotationSpeed)].SetValue<float>(value); } }
        public Object TargetingFromBone { get { return this[nameof(TargetingFromBone)]; } set { this[nameof(TargetingFromBone)] = value; } }
        public float TimeUntilForgetTarget { get { return this[nameof(TimeUntilForgetTarget)].GetValue<float>(); } set { this[nameof(TimeUntilForgetTarget)].SetValue<float>(value); } }
        public bool AlwaysUpdateAimRotation { get { return this[nameof(AlwaysUpdateAimRotation)].Flag; } set { this[nameof(AlwaysUpdateAimRotation)].Flag = value; } }
        public void OnPerceptionUpdated(Actor sensedActor, AIStimulus Stimulus) { Invoke(nameof(OnPerceptionUpdated), sensedActor, Stimulus); }
    }
    public class LMGGuntoweModule : HostileTargetingGuntowerModule
    {
        public LMGGuntoweModule(nint addr) : base(addr) { }
        public HitscanComponent HitScanComp { get { return this[nameof(HitScanComp)].As<HitscanComponent>(); } set { this["HitScanComp"] = value; } }
        public DamageComponent DamageComp { get { return this[nameof(DamageComp)].As<DamageComponent>(); } set { this["DamageComp"] = value; } }
        public SceneComponent AimAtWhenNoTarget { get { return this[nameof(AimAtWhenNoTarget)].As<SceneComponent>(); } set { this["AimAtWhenNoTarget"] = value; } }
        public AudioComponent FireAudio { get { return this[nameof(FireAudio)].As<AudioComponent>(); } set { this["FireAudio"] = value; } }
        public ParticleSystem TracerEffect { get { return this[nameof(TracerEffect)].As<ParticleSystem>(); } set { this["TracerEffect"] = value; } }
        public ParticleSystem MuzzleEffect { get { return this[nameof(MuzzleEffect)].As<ParticleSystem>(); } set { this["MuzzleEffect"] = value; } }
        public SoundCue ShootTailSound { get { return this[nameof(ShootTailSound)].As<SoundCue>(); } set { this["ShootTailSound"] = value; } }
        public int BurstSize { get { return this[nameof(BurstSize)].GetValue<int>(); } set { this[nameof(BurstSize)].SetValue<int>(value); } }
        public float MaxAimOffset { get { return this[nameof(MaxAimOffset)].GetValue<float>(); } set { this[nameof(MaxAimOffset)].SetValue<float>(value); } }
        public float IdleAimRotationSpeed { get { return this[nameof(IdleAimRotationSpeed)].GetValue<float>(); } set { this[nameof(IdleAimRotationSpeed)].SetValue<float>(value); } }
        public float TimeBetweenShots { get { return this[nameof(TimeBetweenShots)].GetValue<float>(); } set { this[nameof(TimeBetweenShots)].SetValue<float>(value); } }
        public float TimeBetweenBursts { get { return this[nameof(TimeBetweenBursts)].GetValue<float>(); } set { this[nameof(TimeBetweenBursts)].SetValue<float>(value); } }
        public float AimSpeed { get { return this[nameof(AimSpeed)].GetValue<float>(); } set { this[nameof(AimSpeed)].SetValue<float>(value); } }
        public bool IsFiresoundPlaying { get { return this[nameof(IsFiresoundPlaying)].Flag; } set { this[nameof(IsFiresoundPlaying)].Flag = value; } }
        public void ShowShot(Vector Location) { Invoke(nameof(ShowShot), Location); }
        public void OnRep_IsFiresoundPlaying() { Invoke(nameof(OnRep_IsFiresoundPlaying)); }
    }
    public class RandomFiringGuntowerModule : HostileGuntowerModule
    {
        public RandomFiringGuntowerModule(nint addr) : base(addr) { }
        public StaticMeshComponent LaserFrontTop { get { return this[nameof(LaserFrontTop)].As<StaticMeshComponent>(); } set { this["LaserFrontTop"] = value; } }
        public StaticMeshComponent LaserFrontBottom { get { return this[nameof(LaserFrontBottom)].As<StaticMeshComponent>(); } set { this["LaserFrontBottom"] = value; } }
        public StaticMeshComponent LaserBackTop { get { return this[nameof(LaserBackTop)].As<StaticMeshComponent>(); } set { this["LaserBackTop"] = value; } }
        public StaticMeshComponent LaserBackBottom { get { return this[nameof(LaserBackBottom)].As<StaticMeshComponent>(); } set { this["LaserBackBottom"] = value; } }
        public ParticleSystemComponent FrontTopLaserMuzzle { get { return this[nameof(FrontTopLaserMuzzle)].As<ParticleSystemComponent>(); } set { this["FrontTopLaserMuzzle"] = value; } }
        public ParticleSystemComponent FrontBottomLaserMuzzle { get { return this[nameof(FrontBottomLaserMuzzle)].As<ParticleSystemComponent>(); } set { this["FrontBottomLaserMuzzle"] = value; } }
        public ParticleSystemComponent BackTopLaserMuzzle { get { return this[nameof(BackTopLaserMuzzle)].As<ParticleSystemComponent>(); } set { this["BackTopLaserMuzzle"] = value; } }
        public ParticleSystemComponent BackBottomLaserMuzzle { get { return this[nameof(BackBottomLaserMuzzle)].As<ParticleSystemComponent>(); } set { this["BackBottomLaserMuzzle"] = value; } }
        public Rotator OtherCurrentRotation { get { return this[nameof(OtherCurrentRotation)].As<Rotator>(); } set { this["OtherCurrentRotation"] = value; } }
        public ParticleSystem LaserImpact { get { return this[nameof(LaserImpact)].As<ParticleSystem>(); } set { this["LaserImpact"] = value; } }
        public AudioComponent LaserSound { get { return this[nameof(LaserSound)].As<AudioComponent>(); } set { this["LaserSound"] = value; } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public float BoneSpaceTurretMaxYaw { get { return this[nameof(BoneSpaceTurretMaxYaw)].GetValue<float>(); } set { this[nameof(BoneSpaceTurretMaxYaw)].SetValue<float>(value); } }
        public float BoneSpaceTurretMaxPitch { get { return this[nameof(BoneSpaceTurretMaxPitch)].GetValue<float>(); } set { this[nameof(BoneSpaceTurretMaxPitch)].SetValue<float>(value); } }
        public float TimeBetweenAttacks { get { return this[nameof(TimeBetweenAttacks)].GetValue<float>(); } set { this[nameof(TimeBetweenAttacks)].SetValue<float>(value); } }
        public float TimeUntilNextAttack { get { return this[nameof(TimeUntilNextAttack)].GetValue<float>(); } set { this[nameof(TimeUntilNextAttack)].SetValue<float>(value); } }
        public float ModuleRotationSpeed { get { return this[nameof(ModuleRotationSpeed)].GetValue<float>(); } set { this[nameof(ModuleRotationSpeed)].SetValue<float>(value); } }
        public float TurretAimSpeed { get { return this[nameof(TurretAimSpeed)].GetValue<float>(); } set { this[nameof(TurretAimSpeed)].SetValue<float>(value); } }
        public float LaserLeghtRatio { get { return this[nameof(LaserLeghtRatio)].GetValue<float>(); } set { this[nameof(LaserLeghtRatio)].SetValue<float>(value); } }
        public float TimeBetweenHits { get { return this[nameof(TimeBetweenHits)].GetValue<float>(); } set { this[nameof(TimeBetweenHits)].SetValue<float>(value); } }
        public float ChanceToInvert { get { return this[nameof(ChanceToInvert)].GetValue<float>(); } set { this[nameof(ChanceToInvert)].SetValue<float>(value); } }
        public float PlatformDissolveRadius { get { return this[nameof(PlatformDissolveRadius)].GetValue<float>(); } set { this[nameof(PlatformDissolveRadius)].SetValue<float>(value); } }
        public float PlatformDissolveSqueeze { get { return this[nameof(PlatformDissolveSqueeze)].GetValue<float>(); } set { this[nameof(PlatformDissolveSqueeze)].SetValue<float>(value); } }
        public bool IsAttacking { get { return this[nameof(IsAttacking)].Flag; } set { this[nameof(IsAttacking)].Flag = value; } }
    }
    public class RadialFireModule : HostileGuntowerModule
    {
        public RadialFireModule(nint addr) : base(addr) { }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public Rotator AttackEndRotation { get { return this[nameof(AttackEndRotation)].As<Rotator>(); } set { this["AttackEndRotation"] = value; } }
        public float RotationSpeedTurret { get { return this[nameof(RotationSpeedTurret)].GetValue<float>(); } set { this[nameof(RotationSpeedTurret)].SetValue<float>(value); } }
        public float DelayBetweenShots { get { return this[nameof(DelayBetweenShots)].GetValue<float>(); } set { this[nameof(DelayBetweenShots)].SetValue<float>(value); } }
        public bool IsAttacking { get { return this[nameof(IsAttacking)].Flag; } set { this[nameof(IsAttacking)].Flag = value; } }
        public Object LeftFireSocket { get { return this[nameof(LeftFireSocket)]; } set { this[nameof(LeftFireSocket)] = value; } }
        public Object RightFireSocket { get { return this[nameof(RightFireSocket)]; } set { this[nameof(RightFireSocket)] = value; } }
        public Object FrontFireSocket { get { return this[nameof(FrontFireSocket)]; } set { this[nameof(FrontFireSocket)] = value; } }
        public Object BackFireSocket { get { return this[nameof(BackFireSocket)]; } set { this[nameof(BackFireSocket)] = value; } }
        public void OnFire() { Invoke(nameof(OnFire)); }
    }
    public class HomingFireModule : HostileTargetingGuntowerModule
    {
        public HomingFireModule(nint addr) : base(addr) { }
        public Object ShootDroneSocket { get { return this[nameof(ShootDroneSocket)]; } set { this[nameof(ShootDroneSocket)] = value; } }
        public Object HomingProjectileClass { get { return this[nameof(HomingProjectileClass)]; } set { this[nameof(HomingProjectileClass)] = value; } }
        public float TimeBetweenShots { get { return this[nameof(TimeBetweenShots)].GetValue<float>(); } set { this[nameof(TimeBetweenShots)].SetValue<float>(value); } }
    }
    public class HomingDroneBomb : Projectile
    {
        public HomingDroneBomb(nint addr) : base(addr) { }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public SoundCue ArmingSound { get { return this[nameof(ArmingSound)].As<SoundCue>(); } set { this["ArmingSound"] = value; } }
        public float HomingUpdateInterval { get { return this[nameof(HomingUpdateInterval)].GetValue<float>(); } set { this[nameof(HomingUpdateInterval)].SetValue<float>(value); } }
        public float TargetSearchInterval { get { return this[nameof(TargetSearchInterval)].GetValue<float>(); } set { this[nameof(TargetSearchInterval)].SetValue<float>(value); } }
        public float ArmTime { get { return this[nameof(ArmTime)].GetValue<float>(); } set { this[nameof(ArmTime)].SetValue<float>(value); } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public float HomingAccelerationMagnitude { get { return this[nameof(HomingAccelerationMagnitude)].GetValue<float>(); } set { this[nameof(HomingAccelerationMagnitude)].SetValue<float>(value); } }
        public void UpdateHomingSpeed() { Invoke(nameof(UpdateHomingSpeed)); }
        public void SearchForTarget() { Invoke(nameof(SearchForTarget)); }
        public void OnRep_HomingAccelerationMagnitude() { Invoke(nameof(OnRep_HomingAccelerationMagnitude)); }
    }
    public class GunTowerModuleAnimInstance : AnimInstance
    {
        public GunTowerModuleAnimInstance(nint addr) : base(addr) { }
        public Rotator CurrentModuleRotation { get { return this[nameof(CurrentModuleRotation)].As<Rotator>(); } set { this["CurrentModuleRotation"] = value; } }
        public Rotator CurrentLookAtRotation { get { return this[nameof(CurrentLookAtRotation)].As<Rotator>(); } set { this["CurrentLookAtRotation"] = value; } }
        public bool IsModuleActive { get { return this[nameof(IsModuleActive)].Flag; } set { this[nameof(IsModuleActive)].Flag = value; } }
        public bool AreWeakpointsExposed { get { return this[nameof(AreWeakpointsExposed)].Flag; } set { this[nameof(AreWeakpointsExposed)].Flag = value; } }
    }
    public class RandomFireModuleAnimInstance : GunTowerModuleAnimInstance
    {
        public RandomFireModuleAnimInstance(nint addr) : base(addr) { }
        public Rotator OtherLookatRotation { get { return this[nameof(OtherLookatRotation)].As<Rotator>(); } set { this["OtherLookatRotation"] = value; } }
    }
    public class GuntowerWeakPoint : FSDPawn
    {
        public GuntowerWeakPoint(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public StaticMeshComponent Mesh { get { return this[nameof(Mesh)].As<StaticMeshComponent>(); } set { this["Mesh"] = value; } }
        public WeakpointGlowComponent HitGlow { get { return this[nameof(HitGlow)].As<WeakpointGlowComponent>(); } set { this["HitGlow"] = value; } }
        public Object ParentHealth { get { return this[nameof(ParentHealth)]; } set { this[nameof(ParentHealth)] = value; } }
        public DamageClass DamageToParent { get { return this[nameof(DamageToParent)].As<DamageClass>(); } set { this["DamageToParent"] = value; } }
        public ParticleSystem deathParticles { get { return this[nameof(deathParticles)].As<ParticleSystem>(); } set { this["deathParticles"] = value; } }
        public SoundCue deathSound { get { return this[nameof(deathSound)].As<SoundCue>(); } set { this["deathSound"] = value; } }
        public void OnExposedChanged(bool isExposed) { Invoke(nameof(OnExposedChanged), isExposed); }
        public void OnDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnDeath), HealthComponent); }
        public void DamageParent(float ammount) { Invoke(nameof(DamageParent), ammount); }
    }
    public class GunTowerHealthComponent : EnemyHealthComponent
    {
        public GunTowerHealthComponent(nint addr) : base(addr) { }
    }
    public class HackingToolItem : AnimatedItem
    {
        public HackingToolItem(nint addr) : base(addr) { }
        public Object HackingUsable { get { return this[nameof(HackingUsable)]; } set { this[nameof(HackingUsable)] = value; } }
        public void Server_HackingCompleted(HackingUsableComponent InUsable, bool InHackingSuccessful) { Invoke(nameof(Server_HackingCompleted), InUsable, InHackingSuccessful); }
        public void ReceiveHackingStarted() { Invoke(nameof(ReceiveHackingStarted)); }
        public void ReceivedActionReleased() { Invoke(nameof(ReceivedActionReleased)); }
        public void ReceivedActionPressed() { Invoke(nameof(ReceivedActionPressed)); }
        public void ReceiveActionClick() { Invoke(nameof(ReceiveActionClick)); }
        public void OnRep_HackingUsable() { Invoke(nameof(OnRep_HackingUsable)); }
        public void HackingCompleted(bool InHackingSuccessful) { Invoke(nameof(HackingCompleted), InHackingSuccessful); }
    }
    public class HackingUsableComponent : InstantUsable
    {
        public HackingUsableComponent(nint addr) : base(addr) { }
        public Object OnHacked { get { return this[nameof(OnHacked)]; } set { this[nameof(OnHacked)] = value; } }
        public Object BeingHackedUpdated { get { return this[nameof(BeingHackedUpdated)]; } set { this[nameof(BeingHackedUpdated)] = value; } }
        public Object ItemType { get { return this[nameof(ItemType)]; } set { this[nameof(ItemType)] = value; } }
        public Object HackingWidgetType { get { return this[nameof(HackingWidgetType)]; } set { this[nameof(HackingWidgetType)] = value; } }
        public HackingUsableState HackingState { get { return this[nameof(HackingState)].As<HackingUsableState>(); } set { this["HackingState"] = value; } }
        public void OnRep_HackingState(HackingUsableState oldState) { Invoke(nameof(OnRep_HackingState), oldState); }
        public void HackedDelegate__DelegateSignature(PlayerCharacter InHackedBy) { Invoke(nameof(HackedDelegate__DelegateSignature), InHackedBy); }
        public bool GetIsHacked() { return Invoke<bool>(nameof(GetIsHacked)); }
        public bool GetIsBeingHacked() { return Invoke<bool>(nameof(GetIsBeingHacked)); }
        public Object GetHackingWidgetType() { return Invoke<Object>(nameof(GetHackingWidgetType)); }
        public PlayerCharacter GetHackedBy() { return Invoke<PlayerCharacter>(nameof(GetHackedBy)); }
    }
    public class HackingToolWidget : UserWidget
    {
        public HackingToolWidget(nint addr) : base(addr) { }
        public Object OnHackingFail { get { return this[nameof(OnHackingFail)]; } set { this[nameof(OnHackingFail)] = value; } }
        public Object OnHackingStageCompleted { get { return this[nameof(OnHackingStageCompleted)]; } set { this[nameof(OnHackingStageCompleted)] = value; } }
        public Object OnHackingCompleted { get { return this[nameof(OnHackingCompleted)]; } set { this[nameof(OnHackingCompleted)] = value; } }
        public Object OnRequestUnequipHackingTool { get { return this[nameof(OnRequestUnequipHackingTool)]; } set { this[nameof(OnRequestUnequipHackingTool)] = value; } }
        public Object HackingUsable { get { return this[nameof(HackingUsable)]; } set { this[nameof(HackingUsable)] = value; } }
        public Object HackingTool { get { return this[nameof(HackingTool)]; } set { this[nameof(HackingTool)] = value; } }
        public void StartHacking(HackingUsableComponent InHackingUsable, HackingToolItem InHackingTool) { Invoke(nameof(StartHacking), InHackingUsable, InHackingTool); }
        public void RequestUnequipHackingTool() { Invoke(nameof(RequestUnequipHackingTool)); }
        public void ReceiveHackingToolUnequipped() { Invoke(nameof(ReceiveHackingToolUnequipped)); }
        public void ReceiveHackingStarted() { Invoke(nameof(ReceiveHackingStarted)); }
        public void ReceiveActionReleased() { Invoke(nameof(ReceiveActionReleased)); }
        public void ReceiveActionPressed() { Invoke(nameof(ReceiveActionPressed)); }
        public void ReceiveActionClick() { Invoke(nameof(ReceiveActionClick)); }
        public void HackingUnequipDelegate__DelegateSignature() { Invoke(nameof(HackingUnequipDelegate__DelegateSignature)); }
        public void HackingStageCompletedDelegate__DelegateSignature(int InNextStage, int InTotalStages) { Invoke(nameof(HackingStageCompletedDelegate__DelegateSignature), InNextStage, InTotalStages); }
        public void HackingStageComplete(int InNextStage, int InTotalStages) { Invoke(nameof(HackingStageComplete), InNextStage, InTotalStages); }
        public void HackingFailDelegate__DelegateSignature(SoundCue InFailCue, DialogDataAsset InShout) { Invoke(nameof(HackingFailDelegate__DelegateSignature), InFailCue, InShout); }
        public void HackingCompleteDelegate__DelegateSignature(bool InSuccess) { Invoke(nameof(HackingCompleteDelegate__DelegateSignature), InSuccess); }
        public void HackingComplete(bool InSuccess) { Invoke(nameof(HackingComplete), InSuccess); }
    }
    public class HalloweenSkull : EnemyDeepPathfinderCharacter
    {
        public HalloweenSkull(nint addr) : base(addr) { }
        public Vector WobbleSpeeds { get { return this[nameof(WobbleSpeeds)].As<Vector>(); } set { this["WobbleSpeeds"] = value; } }
        public Vector WobbleRanges { get { return this[nameof(WobbleRanges)].As<Vector>(); } set { this["WobbleRanges"] = value; } }
        public RuntimeFloatCurve AlertedMovement { get { return this[nameof(AlertedMovement)].As<RuntimeFloatCurve>(); } set { this["AlertedMovement"] = value; } }
        public float AlertedMovementScale { get { return this[nameof(AlertedMovementScale)].GetValue<float>(); } set { this[nameof(AlertedMovementScale)].SetValue<float>(value); } }
        public float AlertedMovementTimeScale { get { return this[nameof(AlertedMovementTimeScale)].GetValue<float>(); } set { this[nameof(AlertedMovementTimeScale)].SetValue<float>(value); } }
        public float JawMovementSpeed { get { return this[nameof(JawMovementSpeed)].GetValue<float>(); } set { this[nameof(JawMovementSpeed)].SetValue<float>(value); } }
        public void OnJawClosed() { Invoke(nameof(OnJawClosed)); }
        public void OnAlert() { Invoke(nameof(OnAlert)); }
    }
    public class HalloweenSkullAnimInstance : AnimInstance
    {
        public HalloweenSkullAnimInstance(nint addr) : base(addr) { }
        public float JawMovementSpeedMin { get { return this[nameof(JawMovementSpeedMin)].GetValue<float>(); } set { this[nameof(JawMovementSpeedMin)].SetValue<float>(value); } }
        public float JawMovementSpeedMax { get { return this[nameof(JawMovementSpeedMax)].GetValue<float>(); } set { this[nameof(JawMovementSpeedMax)].SetValue<float>(value); } }
        public float JawMovementRange { get { return this[nameof(JawMovementRange)].GetValue<float>(); } set { this[nameof(JawMovementRange)].SetValue<float>(value); } }
        public float SwitchAnimationTimeMin { get { return this[nameof(SwitchAnimationTimeMin)].GetValue<float>(); } set { this[nameof(SwitchAnimationTimeMin)].SetValue<float>(value); } }
        public float SwitchAnimationTimeMax { get { return this[nameof(SwitchAnimationTimeMax)].GetValue<float>(); } set { this[nameof(SwitchAnimationTimeMax)].SetValue<float>(value); } }
        public float JawPosition { get { return this[nameof(JawPosition)].GetValue<float>(); } set { this[nameof(JawPosition)].SetValue<float>(value); } }
    }
    public class HangingFireCracker : Actor
    {
        public HangingFireCracker(nint addr) : base(addr) { }
        public InstantUsable Usable { get { return this[nameof(Usable)].As<InstantUsable>(); } set { this["Usable"] = value; } }
        public SkeletalMeshComponent SKMesh { get { return this[nameof(SKMesh)].As<SkeletalMeshComponent>(); } set { this["SKMesh"] = value; } }
        public NiagaraComponent MovingSparks { get { return this[nameof(MovingSparks)].As<NiagaraComponent>(); } set { this["MovingSparks"] = value; } }
        public FSDAudioComponent FuseSound { get { return this[nameof(FuseSound)].As<FSDAudioComponent>(); } set { this["FuseSound"] = value; } }
        public UArray<StaticMeshComponent> Crackers { get { return new UArray<StaticMeshComponent>(this[nameof(Crackers)].Address); } }
        public NiagaraSystem CrackerExplosion { get { return this[nameof(CrackerExplosion)].As<NiagaraSystem>(); } set { this["CrackerExplosion"] = value; } }
        public SoundCue CrackerExplosionCue { get { return this[nameof(CrackerExplosionCue)].As<SoundCue>(); } set { this["CrackerExplosionCue"] = value; } }
        public float SparkSpeed { get { return this[nameof(SparkSpeed)].GetValue<float>(); } set { this[nameof(SparkSpeed)].SetValue<float>(value); } }
        public float ExplodeRange { get { return this[nameof(ExplodeRange)].GetValue<float>(); } set { this[nameof(ExplodeRange)].SetValue<float>(value); } }
        public float ExplodeImpulse { get { return this[nameof(ExplodeImpulse)].GetValue<float>(); } set { this[nameof(ExplodeImpulse)].SetValue<float>(value); } }
        public void StartFire() { Invoke(nameof(StartFire)); }
    }
    public class HeadVanityItem : VanityItem
    {
        public HeadVanityItem(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object AnimInstance { get { return this[nameof(AnimInstance)]; } set { this[nameof(AnimInstance)] = value; } }
        public EHeadVanityType HeadVanityType { get { return (EHeadVanityType)this[nameof(HeadVanityType)].GetValue<int>(); } set { this[nameof(HeadVanityType)].SetValue<int>((int)value); } }
        public bool HideEyebrows { get { return this[nameof(HideEyebrows)].Flag; } set { this[nameof(HideEyebrows)].Flag = value; } }
        public bool HideSideburns { get { return this[nameof(HideSideburns)].Flag; } set { this[nameof(HideSideburns)].Flag = value; } }
        public bool HideMoustache { get { return this[nameof(HideMoustache)].Flag; } set { this[nameof(HideMoustache)].Flag = value; } }
        public bool HideBeard { get { return this[nameof(HideBeard)].Flag; } set { this[nameof(HideBeard)].Flag = value; } }
        public bool HideAll { get { return this[nameof(HideAll)].Flag; } set { this[nameof(HideAll)].Flag = value; } }
        public bool RequiresSlimArmor { get { return this[nameof(RequiresSlimArmor)].Flag; } set { this[nameof(RequiresSlimArmor)].Flag = value; } }
        public UArray<ArmorVanityItem> ForceThickAmorsHack { get { return new UArray<ArmorVanityItem>(this[nameof(ForceThickAmorsHack)].Address); } }
        public bool HideHead { get { return this[nameof(HideHead)].Flag; } set { this[nameof(HideHead)].Flag = value; } }
        public ECharacterHeadMesh HeadMesh { get { return (ECharacterHeadMesh)this[nameof(HeadMesh)].GetValue<int>(); } set { this[nameof(HeadMesh)].SetValue<int>((int)value); } }
        public Object MaterialOverride { get { return this[nameof(MaterialOverride)]; } set { this[nameof(MaterialOverride)] = value; } }
        public Object ClassMaterials { get { return this[nameof(ClassMaterials)]; } set { this[nameof(ClassMaterials)] = value; } }
        public Object VanityTags { get { return this[nameof(VanityTags)]; } set { this[nameof(VanityTags)] = value; } }
    }
    public class WidgetComponentCustomMaterial : WidgetComponent
    {
        public WidgetComponentCustomMaterial(nint addr) : base(addr) { }
        public MaterialInterface CustomMaterial { get { return this[nameof(CustomMaterial)].As<MaterialInterface>(); } set { this["CustomMaterial"] = value; } }
    }
    public class HealthBarComponent : WidgetComponentCustomMaterial
    {
        public HealthBarComponent(nint addr) : base(addr) { }
    }
    public class HealthDamageTracker : ActorComponent
    {
        public HealthDamageTracker(nint addr) : base(addr) { }
        public Object OnTrackedPercentageReachedEvent { get { return this[nameof(OnTrackedPercentageReachedEvent)]; } set { this[nameof(OnTrackedPercentageReachedEvent)] = value; } }
        public float TiggerOnPercentage { get { return this[nameof(TiggerOnPercentage)].GetValue<float>(); } set { this[nameof(TiggerOnPercentage)].SetValue<float>(value); } }
        public HealthComponentBase Health { get { return this[nameof(Health)].As<HealthComponentBase>(); } set { this["Health"] = value; } }
        public void ResetTrackedDamage() { Invoke(nameof(ResetTrackedDamage)); }
        public void OnDamageTaken(float amount) { Invoke(nameof(OnDamageTaken), amount); }
    }
    public class HeartstoneTrap : Actor
    {
        public HeartstoneTrap(nint addr) : base(addr) { }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
    }
    public class HeavyParticleCannon : AmmoDrivenWeapon
    {
        public HeavyParticleCannon(nint addr) : base(addr) { }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public ReflectionHitscanComponent HitscanComponent { get { return this[nameof(HitscanComponent)].As<ReflectionHitscanComponent>(); } set { this["HitscanComponent"] = value; } }
        public StickyFlameSpawner StickyFlamesSpawner { get { return this[nameof(StickyFlamesSpawner)].As<StickyFlameSpawner>(); } set { this["StickyFlamesSpawner"] = value; } }
        public FirstPersonNiagaraComponent FirstPersonBeam { get { return this[nameof(FirstPersonBeam)].As<FirstPersonNiagaraComponent>(); } set { this["FirstPersonBeam"] = value; } }
        public FirstPersonNiagaraComponent FirstPersonLaserSight { get { return this[nameof(FirstPersonLaserSight)].As<FirstPersonNiagaraComponent>(); } set { this["FirstPersonLaserSight"] = value; } }
        public NiagaraComponent ThirdPersonBeam { get { return this[nameof(ThirdPersonBeam)].As<NiagaraComponent>(); } set { this["ThirdPersonBeam"] = value; } }
        public SoundBase BeamHitLocationGenericSound { get { return this[nameof(BeamHitLocationGenericSound)].As<SoundBase>(); } set { this["BeamHitLocationGenericSound"] = value; } }
        public SoundBase BeamHitLocationEnemySound { get { return this[nameof(BeamHitLocationEnemySound)].As<SoundBase>(); } set { this["BeamHitLocationEnemySound"] = value; } }
        public SoundBase BeamHitLocationEnemy_Local_Sound { get { return this[nameof(BeamHitLocationEnemy_Local_Sound)].As<SoundBase>(); } set { this["BeamHitLocationEnemy_Local_Sound"] = value; } }
        public float BeamHitSoundFadeSwitchTime { get { return this[nameof(BeamHitSoundFadeSwitchTime)].GetValue<float>(); } set { this[nameof(BeamHitSoundFadeSwitchTime)].SetValue<float>(value); } }
        public SoundBase BeamHitLocationTailSound { get { return this[nameof(BeamHitLocationTailSound)].As<SoundBase>(); } set { this["BeamHitLocationTailSound"] = value; } }
        public SoundBase BoosterModuleActivated { get { return this[nameof(BoosterModuleActivated)].As<SoundBase>(); } set { this["BoosterModuleActivated"] = value; } }
        public Object OnBoosterActiveChanged { get { return this[nameof(OnBoosterActiveChanged)]; } set { this[nameof(OnBoosterActiveChanged)] = value; } }
        public NiagaraSystem ReflectedBeam { get { return this[nameof(ReflectedBeam)].As<NiagaraSystem>(); } set { this["ReflectedBeam"] = value; } }
        public NiagaraSystem ReflectedBeam_PhotoSensitive { get { return this[nameof(ReflectedBeam_PhotoSensitive)].As<NiagaraSystem>(); } set { this["ReflectedBeam_PhotoSensitive"] = value; } }
        public NiagaraSystem ReflectedLaserSight { get { return this[nameof(ReflectedLaserSight)].As<NiagaraSystem>(); } set { this["ReflectedLaserSight"] = value; } }
        public NiagaraSystem ImpactParticle { get { return this[nameof(ImpactParticle)].As<NiagaraSystem>(); } set { this["ImpactParticle"] = value; } }
        public NiagaraSystem ImpactParticle_PhotoSensitive { get { return this[nameof(ImpactParticle_PhotoSensitive)].As<NiagaraSystem>(); } set { this["ImpactParticle_PhotoSensitive"] = value; } }
        public NiagaraSystem ProjectionModuleParticle { get { return this[nameof(ProjectionModuleParticle)].As<NiagaraSystem>(); } set { this["ProjectionModuleParticle"] = value; } }
        public NiagaraComponent ImpactParticleComp { get { return this[nameof(ImpactParticleComp)].As<NiagaraComponent>(); } set { this["ImpactParticleComp"] = value; } }
        public DecalData ImpactDecal_ShortTime { get { return this[nameof(ImpactDecal_ShortTime)].As<DecalData>(); } set { this["ImpactDecal_ShortTime"] = value; } }
        public DecalData ImpactDecal_LongTime { get { return this[nameof(ImpactDecal_LongTime)].As<DecalData>(); } set { this["ImpactDecal_LongTime"] = value; } }
        public bool bReloadOnButtonRelease { get { return this[nameof(bReloadOnButtonRelease)].Flag; } set { this[nameof(bReloadOnButtonRelease)].Flag = value; } }
        public float MinTimeBetweenBiomassGain { get { return this[nameof(MinTimeBetweenBiomassGain)].GetValue<float>(); } set { this[nameof(MinTimeBetweenBiomassGain)].SetValue<float>(value); } }
        public bool BulkyBeam { get { return this[nameof(BulkyBeam)].Flag; } set { this[nameof(BulkyBeam)].Flag = value; } }
        public float NormalBeamWidth { get { return this[nameof(NormalBeamWidth)].GetValue<float>(); } set { this[nameof(NormalBeamWidth)].SetValue<float>(value); } }
        public float BulkyBeamWidth { get { return this[nameof(BulkyBeamWidth)].GetValue<float>(); } set { this[nameof(BulkyBeamWidth)].SetValue<float>(value); } }
        public float ExtraRadialDamagePerSec { get { return this[nameof(ExtraRadialDamagePerSec)].GetValue<float>(); } set { this[nameof(ExtraRadialDamagePerSec)].SetValue<float>(value); } }
        public float ExtraRadialRangePerSec { get { return this[nameof(ExtraRadialRangePerSec)].GetValue<float>(); } set { this[nameof(ExtraRadialRangePerSec)].SetValue<float>(value); } }
        public float CancelCostPercentage { get { return this[nameof(CancelCostPercentage)].GetValue<float>(); } set { this[nameof(CancelCostPercentage)].SetValue<float>(value); } }
        public float ChargeupTime { get { return this[nameof(ChargeupTime)].GetValue<float>(); } set { this[nameof(ChargeupTime)].SetValue<float>(value); } }
        public SoundBase StartChargeSound { get { return this[nameof(StartChargeSound)].As<SoundBase>(); } set { this["StartChargeSound"] = value; } }
        public Vector LastDecalLocation { get { return this[nameof(LastDecalLocation)].As<Vector>(); } set { this["LastDecalLocation"] = value; } }
        public bool IsNewDecalBeam { get { return this[nameof(IsNewDecalBeam)].Flag; } set { this[nameof(IsNewDecalBeam)].Flag = value; } }
        public float ProjectionModuleDamage { get { return this[nameof(ProjectionModuleDamage)].GetValue<float>(); } set { this[nameof(ProjectionModuleDamage)].SetValue<float>(value); } }
        public TerrainType PlatformTerrainType { get { return this[nameof(PlatformTerrainType)].As<TerrainType>(); } set { this["PlatformTerrainType"] = value; } }
        public bool BoostActive { get { return this[nameof(BoostActive)].Flag; } set { this[nameof(BoostActive)].Flag = value; } }
        public bool bReloadBoostsBeam { get { return this[nameof(bReloadBoostsBeam)].Flag; } set { this[nameof(bReloadBoostsBeam)].Flag = value; } }
        public float ExtraReloadTimeAfterBoost { get { return this[nameof(ExtraReloadTimeAfterBoost)].GetValue<float>(); } set { this[nameof(ExtraReloadTimeAfterBoost)].SetValue<float>(value); } }
        public float BoostExtraAmmoCost { get { return this[nameof(BoostExtraAmmoCost)].GetValue<float>(); } set { this[nameof(BoostExtraAmmoCost)].SetValue<float>(value); } }
        public float BeamDependentReloadDuration { get { return this[nameof(BeamDependentReloadDuration)].GetValue<float>(); } set { this[nameof(BeamDependentReloadDuration)].SetValue<float>(value); } }
        public Vector2D BeamDistanceRange { get { return this[nameof(BeamDistanceRange)].As<Vector2D>(); } set { this["BeamDistanceRange"] = value; } }
        public Vector2D BeamTesselationRange { get { return this[nameof(BeamTesselationRange)].As<Vector2D>(); } set { this["BeamTesselationRange"] = value; } }
        public bool bIsBeamActive { get { return this[nameof(bIsBeamActive)].Flag; } set { this[nameof(bIsBeamActive)].Flag = value; } }
        public void UpdateBeamsVisibility(bool isBeamVisible) { Invoke(nameof(UpdateBeamsVisibility), isBeamVisible); }
        public void UpdateBeam(ReflectionTraceResult Path) { Invoke(nameof(UpdateBeam), Path); }
        public void ServerSetBoostActive(bool newActive) { Invoke(nameof(ServerSetBoostActive), newActive); }
        public void Server_SetBeamActive(bool inIsBeamActive) { Invoke(nameof(Server_SetBeamActive), inIsBeamActive); }
        public void Server_ExplodePlatform(Vector Location) { Invoke(nameof(Server_ExplodePlatform), Location); }
        public void OnTargetKilled(Actor Target, FSDPhysicalMaterial PhysMat, bool wasDirectHit) { Invoke(nameof(OnTargetKilled), Target, PhysMat, wasDirectHit); }
        public void OnRep_BoostActive() { Invoke(nameof(OnRep_BoostActive)); }
        public void OnRep_bIsBeamActive() { Invoke(nameof(OnRep_bIsBeamActive)); }
        public void IsHittngEnemyChanged(bool isHittingEnemy) { Invoke(nameof(IsHittngEnemyChanged), isHittingEnemy); }
        public void Client_AddAmmoOnKill() { Invoke(nameof(Client_AddAmmoOnKill)); }
        public void ChargeUpComplete() { Invoke(nameof(ChargeUpComplete)); }
        public void ChargeChanged(bool isCharging) { Invoke(nameof(ChargeChanged), isCharging); }
    }
    public class HeliumTank : Actor
    {
        public HeliumTank(nint addr) : base(addr) { }
        public CurveFloat PitchCurve { get { return this[nameof(PitchCurve)].As<CurveFloat>(); } set { this["PitchCurve"] = value; } }
        public UArray<PitchedUsers> PitchedUsers { get { return new UArray<PitchedUsers>(this[nameof(PitchedUsers)].Address); } }
        public HeliumTank Leader { get { return this[nameof(Leader)].As<HeliumTank>(); } set { this["Leader"] = value; } }
        public void OnUsedBy(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnUsedBy), User, Key); }
        public void OnShoutStarted(PlayerCharacter Player, AudioComponent Audio) { Invoke(nameof(OnShoutStarted), Player, Audio); }
        public void OnRep_PitchedUsers() { Invoke(nameof(OnRep_PitchedUsers)); }
    }
    public class HeroEnemies : RunningMissionBP
    {
        public HeroEnemies(nint addr) : base(addr) { }
        public GameplayTagQuery AllowedQuery { get { return this[nameof(AllowedQuery)].As<GameplayTagQuery>(); } set { this["AllowedQuery"] = value; } }
        public Object Entries { get { return this[nameof(Entries)]; } set { this[nameof(Entries)] = value; } }
        public void OnEnemySpawned(Pawn enemy, EnemyDescriptor descriptor) { Invoke(nameof(OnEnemySpawned), enemy, descriptor); }
    }
    public class PlayerCharacterData : PrimaryDataAsset
    {
        public PlayerCharacterData(nint addr) : base(addr) { }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
        public HeroInfo HeroInfo { get { return this[nameof(HeroInfo)].As<HeroInfo>(); } set { this["HeroInfo"] = value; } }
        public Object GetSwitchToMessage() { return Invoke<Object>(nameof(GetSwitchToMessage)); }
        public Texture2D GetSmallIcon() { return Invoke<Texture2D>(nameof(GetSmallIcon)); }
        public Object GetShortDescription() { return Invoke<Object>(nameof(GetShortDescription)); }
        public Object GetName() { return Invoke<Object>(nameof(GetName)); }
        public Object GetLongDescription() { return Invoke<Object>(nameof(GetLongDescription)); }
        public Texture2D GetIcon() { return Invoke<Texture2D>(nameof(GetIcon)); }
        public Texture2D GetFullSizeImage() { return Invoke<Texture2D>(nameof(GetFullSizeImage)); }
        public LinearColor GetColor() { return Invoke<LinearColor>(nameof(GetColor)); }
    }
    public class HitReactionComponent : ActorComponent
    {
        public HitReactionComponent(nint addr) : base(addr) { }
        public UArray<AnimSequenceBase> HitReactions { get { return new UArray<AnimSequenceBase>(this[nameof(HitReactions)].Address); } }
        public float FirstHitReactBlendIn { get { return this[nameof(FirstHitReactBlendIn)].GetValue<float>(); } set { this[nameof(FirstHitReactBlendIn)].SetValue<float>(value); } }
        public float OverrideHitReactBlendIn { get { return this[nameof(OverrideHitReactBlendIn)].GetValue<float>(); } set { this[nameof(OverrideHitReactBlendIn)].SetValue<float>(value); } }
        public bool AllowHitReactions { get { return this[nameof(AllowHitReactions)].Flag; } set { this[nameof(AllowHitReactions)].Flag = value; } }
        public SkeletalMeshComponent SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMeshComponent>(); } set { this["SkeletalMesh"] = value; } }
        public void PlayHitReaction() { Invoke(nameof(PlayHitReaction)); }
        public void OnDamageTaken(float amount) { Invoke(nameof(OnDamageTaken), amount); }
    }
    public class HitscanComponent : HitscanBaseComponent
    {
        public HitscanComponent(nint addr) : base(addr) { }
        public Object OnHit { get { return this[nameof(OnHit)]; } set { this[nameof(OnHit)] = value; } }
        public bool CanHitInstigator { get { return this[nameof(CanHitInstigator)].Flag; } set { this[nameof(CanHitInstigator)].Flag = value; } }
        public bool BulletsCanCarve { get { return this[nameof(BulletsCanCarve)].Flag; } set { this[nameof(BulletsCanCarve)].Flag = value; } }
        public IRandRange NormalBulletsPerCarvingOne { get { return this[nameof(NormalBulletsPerCarvingOne)].As<IRandRange>(); } set { this["NormalBulletsPerCarvingOne"] = value; } }
        public float CarveDiameter { get { return this[nameof(CarveDiameter)].GetValue<float>(); } set { this[nameof(CarveDiameter)].SetValue<float>(value); } }
        public float CarveNoise { get { return this[nameof(CarveNoise)].GetValue<float>(); } set { this[nameof(CarveNoise)].SetValue<float>(value); } }
        public float CarveDebrisSize { get { return this[nameof(CarveDebrisSize)].GetValue<float>(); } set { this[nameof(CarveDebrisSize)].SetValue<float>(value); } }
        public float GeneralImpactAudioVolume { get { return this[nameof(GeneralImpactAudioVolume)].GetValue<float>(); } set { this[nameof(GeneralImpactAudioVolume)].SetValue<float>(value); } }
        public float ImpactDelay { get { return this[nameof(ImpactDelay)].GetValue<float>(); } set { this[nameof(ImpactDelay)].SetValue<float>(value); } }
        public bool OnlyUseImpactEffects { get { return this[nameof(OnlyUseImpactEffects)].Flag; } set { this[nameof(OnlyUseImpactEffects)].Flag = value; } }
        public FXSystemAsset ImpactParticles { get { return this[nameof(ImpactParticles)].As<FXSystemAsset>(); } set { this["ImpactParticles"] = value; } }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
        public bool IgnoreAlwaysPenetrate { get { return this[nameof(IgnoreAlwaysPenetrate)].Flag; } set { this[nameof(IgnoreAlwaysPenetrate)].Flag = value; } }
        public UArray<Actor> DamagedActorCache { get { return new UArray<Actor>(this[nameof(DamagedActorCache)].Address); } }
        public UArray<HitscanDelayedImpact> DelayedImpacts { get { return new UArray<HitscanDelayedImpact>(this[nameof(DelayedImpacts)].Address); } }
        public void Server_RegisterRicochetHit_Terrain(Vector_NetQuantize Origin, Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(Server_RegisterRicochetHit_Terrain), Origin, Location, Normal, PhysMaterial); }
        public void Server_RegisterRicochetHit_Destructable(Vector_NetQuantize Origin, Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial, byte BoneIndex) { Invoke(nameof(Server_RegisterRicochetHit_Destructable), Origin, Location, Normal, Target, PhysMaterial, BoneIndex); }
        public void Server_RegisterRicochetHit(Vector_NetQuantize Origin, Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(Server_RegisterRicochetHit), Origin, Location, Normal, Target, PhysMaterial); }
        public void Server_RegisterHit_Terrain(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(Server_RegisterHit_Terrain), Location, Normal, PhysMaterial); }
        public void Server_RegisterHit_Destructable(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial, byte BoneIndex) { Invoke(nameof(Server_RegisterHit_Destructable), Location, Normal, Target, PhysMaterial, BoneIndex); }
        public void Server_RegisterHit(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(Server_RegisterHit), Location, Normal, Target, PhysMaterial); }
        public void All_ShowRicochetHit_Terrain(Vector_NetQuantize Origin, Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, byte MaterialID, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(All_ShowRicochetHit_Terrain), Origin, Location, Normal, MaterialID, PhysMaterial); }
        public void All_ShowRicochetHit_Destructable(Vector_NetQuantize Origin, Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial, byte BoneIndex) { Invoke(nameof(All_ShowRicochetHit_Destructable), Origin, Location, Normal, Target, PhysMaterial, BoneIndex); }
        public void All_ShowRicochetHit(Vector_NetQuantize Origin, Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, bool SpawnDecal, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(All_ShowRicochetHit), Origin, Location, Normal, SpawnDecal, PhysMaterial); }
        public void All_ShowHit_Terrain(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, byte MaterialID, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(All_ShowHit_Terrain), Location, Normal, MaterialID, PhysMaterial); }
        public void All_ShowHit_Destructable(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, PrimitiveComponent Target, FSDPhysicalMaterial PhysMaterial, byte BoneIndex) { Invoke(nameof(All_ShowHit_Destructable), Location, Normal, Target, PhysMaterial, BoneIndex); }
        public void All_ShowHit(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal, bool SpawnDecal, FSDPhysicalMaterial PhysMaterial) { Invoke(nameof(All_ShowHit), Location, Normal, SpawnDecal, PhysMaterial); }
    }
    public class ThrowableItem : AnimatedItem
    {
        public ThrowableItem(nint addr) : base(addr) { }
        public Object ThrowableClass { get { return this[nameof(ThrowableClass)]; } set { this[nameof(ThrowableClass)] = value; } }
        public AnimMontage FPThrowMontage { get { return this[nameof(FPThrowMontage)].As<AnimMontage>(); } set { this["FPThrowMontage"] = value; } }
        public AnimMontage TPThrowMontage { get { return this[nameof(TPThrowMontage)].As<AnimMontage>(); } set { this["TPThrowMontage"] = value; } }
        public float ThrowVelocity { get { return this[nameof(ThrowVelocity)].GetValue<float>(); } set { this[nameof(ThrowVelocity)].SetValue<float>(value); } }
        public float InheritOwnerVelocityScale { get { return this[nameof(InheritOwnerVelocityScale)].GetValue<float>(); } set { this[nameof(InheritOwnerVelocityScale)].SetValue<float>(value); } }
        public float ThrowAngle { get { return this[nameof(ThrowAngle)].GetValue<float>(); } set { this[nameof(ThrowAngle)].SetValue<float>(value); } }
        public float CooldownAfterThrow { get { return this[nameof(CooldownAfterThrow)].GetValue<float>(); } set { this[nameof(CooldownAfterThrow)].SetValue<float>(value); } }
        public bool CanThrowBeforeEquipAnimFinish { get { return this[nameof(CanThrowBeforeEquipAnimFinish)].Flag; } set { this[nameof(CanThrowBeforeEquipAnimFinish)].Flag = value; } }
        public float CooldownAfterEquip { get { return this[nameof(CooldownAfterEquip)].GetValue<float>(); } set { this[nameof(CooldownAfterEquip)].SetValue<float>(value); } }
        public float ThrowDelay { get { return this[nameof(ThrowDelay)].GetValue<float>(); } set { this[nameof(ThrowDelay)].SetValue<float>(value); } }
        public Vector ThrowOffset { get { return this[nameof(ThrowOffset)].As<Vector>(); } set { this["ThrowOffset"] = value; } }
        public float CooldownLeft { get { return this[nameof(CooldownLeft)].GetValue<float>(); } set { this[nameof(CooldownLeft)].SetValue<float>(value); } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public Object LoadoutItem { get { return this[nameof(LoadoutItem)]; } set { this[nameof(LoadoutItem)] = value; } }
        public UArray<Object> ThrownActors { get { return new UArray<Object>(this[nameof(ThrownActors)].Address); } }
        public void Simulate_Throw(Object actorClass) { Invoke(nameof(Simulate_Throw), actorClass); }
        public void Server_Throw(Object actorClass, Vector Location) { Invoke(nameof(Server_Throw), actorClass, Location); }
        public void ReceiveItemThrown(ThrowableActor thrownActor) { Invoke(nameof(ReceiveItemThrown), thrownActor); }
        public void ReceiveItemSpawned(ThrowableActor thrownActor) { Invoke(nameof(ReceiveItemSpawned), thrownActor); }
        public void OnThrownActorDestroyed(Actor Actor) { Invoke(nameof(OnThrownActorDestroyed), Actor); }
    }
    public class HolidayThrowableItem : ThrowableItem
    {
        public HolidayThrowableItem(nint addr) : base(addr) { }
        public void CameraModeUpdated(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode) { Invoke(nameof(CameraModeUpdated), NewCameraMode, OldCameraMode); }
    }
    public class HostileGuntowerModuleController : FSDAIController
    {
        public HostileGuntowerModuleController(nint addr) : base(addr) { }
        public AIPerceptionComponent Perception { get { return this[nameof(Perception)].As<AIPerceptionComponent>(); } set { this["Perception"] = value; } }
        public void OnPerceptionUpdated(Actor sensedActor, AIStimulus Stimulus) { Invoke(nameof(OnPerceptionUpdated), sensedActor, Stimulus); }
    }
    public class HttpUtilityLibrary : BlueprintFunctionLibrary
    {
        public HttpUtilityLibrary(nint addr) : base(addr) { }
    }
    public class HUDActorTrackingSubsystem : WorldSubsystem
    {
        public HUDActorTrackingSubsystem(nint addr) : base(addr) { }
        public Object OnToggleTrackingEvent { get { return this[nameof(OnToggleTrackingEvent)]; } set { this[nameof(OnToggleTrackingEvent)] = value; } }
        public Object OnShowAlwaysTrackedEvent { get { return this[nameof(OnShowAlwaysTrackedEvent)]; } set { this[nameof(OnShowAlwaysTrackedEvent)] = value; } }
    }
    public class HUDHealthBar : FSDUserWidget
    {
        public HUDHealthBar(nint addr) : base(addr) { }
        public Object OnOwnerDead { get { return this[nameof(OnOwnerDead)]; } set { this[nameof(OnOwnerDead)] = value; } }
        public LinearColor BackgroundColor { get { return this[nameof(BackgroundColor)].As<LinearColor>(); } set { this["BackgroundColor"] = value; } }
        public LinearColor HealthColor { get { return this[nameof(HealthColor)].As<LinearColor>(); } set { this["HealthColor"] = value; } }
        public LinearColor DamageColor { get { return this[nameof(DamageColor)].As<LinearColor>(); } set { this["DamageColor"] = value; } }
        public Object HealthBarLooks { get { return this[nameof(HealthBarLooks)]; } set { this[nameof(HealthBarLooks)] = value; } }
        public LinearColor OutlineColor { get { return this[nameof(OutlineColor)].As<LinearColor>(); } set { this["OutlineColor"] = value; } }
        public int OutlineThickness { get { return this[nameof(OutlineThickness)].GetValue<int>(); } set { this[nameof(OutlineThickness)].SetValue<int>(value); } }
        public float HealthAnimationFactor { get { return this[nameof(HealthAnimationFactor)].GetValue<float>(); } set { this[nameof(HealthAnimationFactor)].SetValue<float>(value); } }
        public float HealthPerCell { get { return this[nameof(HealthPerCell)].GetValue<float>(); } set { this[nameof(HealthPerCell)].SetValue<float>(value); } }
        public int MinHealthCells { get { return this[nameof(MinHealthCells)].GetValue<int>(); } set { this[nameof(MinHealthCells)].SetValue<int>(value); } }
        public int MaxHealthCells { get { return this[nameof(MaxHealthCells)].GetValue<int>(); } set { this[nameof(MaxHealthCells)].SetValue<int>(value); } }
        public Object TargetHealth { get { return this[nameof(TargetHealth)]; } set { this[nameof(TargetHealth)] = value; } }
        public float AnimatedHealth { get { return this[nameof(AnimatedHealth)].GetValue<float>(); } set { this[nameof(AnimatedHealth)].SetValue<float>(value); } }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public void SetHealthComponent(Object Health, float Damage) { Invoke(nameof(SetHealthComponent), Health, Damage); }
        public float GetCurrentHealth() { return Invoke<float>(nameof(GetCurrentHealth)); }
    }
    public class HUDVisibilityGroup : DataAsset
    {
        public HUDVisibilityGroup(nint addr) : base(addr) { }
        public Object OnModeChanged { get { return this[nameof(OnModeChanged)]; } set { this[nameof(OnModeChanged)] = value; } }
        public Object OnVisibilityChanged { get { return this[nameof(OnVisibilityChanged)]; } set { this[nameof(OnVisibilityChanged)] = value; } }
        public EHUDVisibilityGroups GroupID { get { return (EHUDVisibilityGroups)this[nameof(GroupID)].GetValue<int>(); } set { this[nameof(GroupID)].SetValue<int>((int)value); } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public bool AllowDynamicMode { get { return this[nameof(AllowDynamicMode)].Flag; } set { this[nameof(AllowDynamicMode)].Flag = value; } }
        public bool AllowHiddenMode { get { return this[nameof(AllowHiddenMode)].Flag; } set { this[nameof(AllowHiddenMode)].Flag = value; } }
        public bool bDynamicallyVisible { get { return this[nameof(bDynamicallyVisible)].Flag; } set { this[nameof(bDynamicallyVisible)].Flag = value; } }
        public UArray<HUDVisibilityRegisteredWidget> RegisteredWidgets { get { return new UArray<HUDVisibilityRegisteredWidget>(this[nameof(RegisteredWidgets)].Address); } }
        public EHUDVisibilityMode RecommendedMode { get { return (EHUDVisibilityMode)this[nameof(RecommendedMode)].GetValue<int>(); } set { this[nameof(RecommendedMode)].SetValue<int>((int)value); } }
        public EHUDVisibilityMode MinimalMode { get { return (EHUDVisibilityMode)this[nameof(MinimalMode)].GetValue<int>(); } set { this[nameof(MinimalMode)].SetValue<int>((int)value); } }
        public void VisibilityDelegate__DelegateSignature(HUDVisibilityGroup Group, bool IsVisible) { Invoke(nameof(VisibilityDelegate__DelegateSignature), Group, IsVisible); }
        public void SetModeFromPreset(EHUDVisibilityPresets Preset) { Invoke(nameof(SetModeFromPreset), Preset); }
        public void SetMode(EHUDVisibilityMode InMode) { Invoke(nameof(SetMode), InMode); }
        public void SetHudGroupDynamicallyVisible(HUDVisibilityGroup Group, bool IsVisible) { Invoke(nameof(SetHudGroupDynamicallyVisible), Group, IsVisible); }
        public void SetGroupDynamicallyVisible(bool IsVisible) { Invoke(nameof(SetGroupDynamicallyVisible), IsVisible); }
        public void RegisterWidgetWithVisibilityGroup(Widget Widget, HUDVisibilityGroup Group, ESlateVisibility VisibleMode, ESlateVisibility HiddenMode) { Invoke(nameof(RegisterWidgetWithVisibilityGroup), Widget, Group, VisibleMode, HiddenMode); }
        public void RegisterMultipleWidgetsWithVisibilityGroup(UArray<Widget> Widgets, HUDVisibilityGroup Group, ESlateVisibility VisibleMode, ESlateVisibility HiddenMode) { Invoke(nameof(RegisterMultipleWidgetsWithVisibilityGroup), Widgets, Group, VisibleMode, HiddenMode); }
        public void ModeDelegate__DelegateSignature(HUDVisibilityGroup Group, EHUDVisibilityMode Mode) { Invoke(nameof(ModeDelegate__DelegateSignature), Group, Mode); }
        public bool IsModeAllowed(EHUDVisibilityMode InMode) { return Invoke<bool>(nameof(IsModeAllowed), InMode); }
        public bool IsInDynamicMode() { return Invoke<bool>(nameof(IsInDynamicMode)); }
        public bool IsHudGroupVisible(HUDVisibilityGroup Group) { return Invoke<bool>(nameof(IsHudGroupVisible), Group); }
        public bool IsGroupVisible() { return Invoke<bool>(nameof(IsGroupVisible)); }
        public EHUDVisibilityMode GetMode() { return Invoke<EHUDVisibilityMode>(nameof(GetMode)); }
        public UArray<EHUDVisibilityMode> GetAllowedModes() { return Invoke<UArray<EHUDVisibilityMode>>(nameof(GetAllowedModes)); }
    }
    public class HUDWarningWidget : FSDUserWidget
    {
        public HUDWarningWidget(nint addr) : base(addr) { }
        public void SetData(Texture2D Texture, SoundBase PingSound) { Invoke(nameof(SetData), Texture, PingSound); }
        public void Ping(bool DestroyAfterPing) { Invoke(nameof(Ping), DestroyAfterPing); }
    }
    public class FSDMainHUDWidget : UserWidget
    {
        public FSDMainHUDWidget(nint addr) : base(addr) { }
        public void PushEvent(Widget eventWidget, bool Left) { Invoke(nameof(PushEvent), eventWidget, Left); }
        public void PopEvent(Widget eventWidget, bool Left) { Invoke(nameof(PopEvent), eventWidget, Left); }
        public void OnRadarPointAdded(RadarPointComponent Point) { Invoke(nameof(OnRadarPointAdded), Point); }
        public JetBootsFuelWidget GetHudJetBootsFuelVertical() { return Invoke<JetBootsFuelWidget>(nameof(GetHudJetBootsFuelVertical)); }
        public void AddRadarPoint(RadarPointComponent Point) { Invoke(nameof(AddRadarPoint), Point); }
    }
    public class FSDInWorldWidget : UserWidget
    {
        public FSDInWorldWidget(nint addr) : base(addr) { }
        public bool bHUDVisibile { get { return this[nameof(bHUDVisibile)].Flag; } set { this[nameof(bHUDVisibile)].Flag = value; } }
        public void ReceiveHUDVisibilityChanged(bool InHudVisible) { Invoke(nameof(ReceiveHUDVisibilityChanged), InHudVisible); }
        public void CallbackHUDVisibilityChanged(bool InHudVisible) { Invoke(nameof(CallbackHUDVisibilityChanged), InHudVisible); }
    }
    public class HydraWeedCore : EnemyPawn
    {
        public HydraWeedCore(nint addr) : base(addr) { }
        public void WakupCore() { Invoke(nameof(WakupCore)); }
        public void OnShooterKilled(HydraWeedShooter shooter) { Invoke(nameof(OnShooterKilled), shooter); }
        public void OnHealerKilled(HydraWeedHealer healer) { Invoke(nameof(OnHealerKilled), healer); }
    }
    public class ShootingPlant : EnemyPawn
    {
        public ShootingPlant(nint addr) : base(addr) { }
        public bool IsVisible { get { return this[nameof(IsVisible)].Flag; } set { this[nameof(IsVisible)].Flag = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public void SetTarget(Actor Target) { Invoke(nameof(SetTarget), Target); }
        public void OnRep_Target() { Invoke(nameof(OnRep_Target)); }
    }
    public class HydraWeedShooter : ShootingPlant
    {
        public HydraWeedShooter(nint addr) : base(addr) { }
        public HydraWeedCore Core { get { return this[nameof(Core)].As<HydraWeedCore>(); } set { this["Core"] = value; } }
    }
    public class HydraWeedHealer : EnemyPawn
    {
        public HydraWeedHealer(nint addr) : base(addr) { }
        public HydraWeedCore Core { get { return this[nameof(Core)].As<HydraWeedCore>(); } set { this["Core"] = value; } }
    }
    public class HydraWeedSpawnProjectile : Projectile
    {
        public HydraWeedSpawnProjectile(nint addr) : base(addr) { }
        public Vector TargetLocation { get { return this[nameof(TargetLocation)].As<Vector>(); } set { this["TargetLocation"] = value; } }
    }
    public class TriggerAI : Interface
    {
        public TriggerAI(nint addr) : base(addr) { }
        public bool OnTriggerAI(Object TriggerName) { return Invoke<bool>(nameof(OnTriggerAI), TriggerName); }
        public void OnMessageAI(Object TriggerName) { Invoke(nameof(OnMessageAI), TriggerName); }
    }
    public class Aquisitionable : Interface
    {
        public Aquisitionable(nint addr) : base(addr) { }
    }
    public class IconGenerationManager : Object
    {
        public IconGenerationManager(nint addr) : base(addr) { }
        public IconGenerationCharacter GeneratorInst { get { return this[nameof(GeneratorInst)].As<IconGenerationCharacter>(); } set { this["GeneratorInst"] = value; } }
        public IconGenerationPickaxe PickaxeGeneratorInst { get { return this[nameof(PickaxeGeneratorInst)].As<IconGenerationPickaxe>(); } set { this["PickaxeGeneratorInst"] = value; } }
        public IconGenerationWeapon WeaponGeneratorInst { get { return this[nameof(WeaponGeneratorInst)].As<IconGenerationWeapon>(); } set { this["WeaponGeneratorInst"] = value; } }
        public UArray<GenerateIconInfo> ItemGenerationQueue { get { return new UArray<GenerateIconInfo>(this[nameof(ItemGenerationQueue)].Address); } }
        public UArray<EVanitySlot> VanitySlots { get { return new UArray<EVanitySlot>(this[nameof(VanitySlots)].Address); } }
        public UArray<VanityItem> HairColorHairItems { get { return new UArray<VanityItem>(this[nameof(HairColorHairItems)].Address); } }
        public Object IconCharacter { get { return this[nameof(IconCharacter)]; } set { this[nameof(IconCharacter)] = value; } }
        public Object IconPickaxe { get { return this[nameof(IconPickaxe)]; } set { this[nameof(IconPickaxe)] = value; } }
        public Object IconWeapon { get { return this[nameof(IconWeapon)]; } set { this[nameof(IconWeapon)] = value; } }
        public TextureRenderTarget2D LatestGeneratedTexture { get { return this[nameof(LatestGeneratedTexture)].As<TextureRenderTarget2D>(); } set { this["LatestGeneratedTexture"] = value; } }
        public IconGenerationBase ActiveIconGenerator { get { return this[nameof(ActiveIconGenerator)].As<IconGenerationBase>(); } set { this["ActiveIconGenerator"] = value; } }
        public TextureRenderTarget2D GenerateWeaponSkinIcon(Object WorldContextObject, ItemSkin Item, bool inShowCloseUp, Transform Offset, Vector2D Size) { return Invoke<TextureRenderTarget2D>(nameof(GenerateWeaponSkinIcon), WorldContextObject, Item, inShowCloseUp, Offset, Size); }
        public void GenerateWeaponIcon_Async(IconGenerationManager Manager, ItemSkin Item, bool inShowCloseUp, PlayerCharacterID Character, TextureRenderTarget2D Icon, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateWeaponIcon_Async), Manager, Item, inShowCloseUp, Character, Icon, LatentInfo); }
        public void GenerateVanityIcon_Async(IconGenerationManager Manager, VanityItem Item, PlayerCharacterID Character, Object CancelGroup, TextureRenderTarget2D Icon, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateVanityIcon_Async), Manager, Item, Character, CancelGroup, Icon, LatentInfo); }
        public TextureRenderTarget2D GenerateVanityIcon(Object WorldContextObject, VanityItem Item, PlayerCharacterID Character, Transform Offset, Vector2D Size, bool persistant) { return Invoke<TextureRenderTarget2D>(nameof(GenerateVanityIcon), WorldContextObject, Item, Character, Offset, Size, persistant); }
        public void GeneratePickaxeSetIcon_Async(IconGenerationManager Manager, PickaxeSet PickaxeSet, PlayerCharacterID Character, TextureRenderTarget2D Icon, LatentActionInfo LatentInfo) { Invoke(nameof(GeneratePickaxeSetIcon_Async), Manager, PickaxeSet, Character, Icon, LatentInfo); }
        public TextureRenderTarget2D GeneratePickaxeSetIcon(Object WorldContextObject, PickaxeSet PickaxeSet, PlayerCharacterID Character, Transform Offset, Vector2D Size) { return Invoke<TextureRenderTarget2D>(nameof(GeneratePickaxeSetIcon), WorldContextObject, PickaxeSet, Character, Offset, Size); }
        public void GeneratePickaxePartIcon_Async(IconGenerationManager Manager, PickaxePart part, EPickaxePartLocation PickaxePartLocation, PlayerCharacterID Character, TextureRenderTarget2D Icon, LatentActionInfo LatentInfo) { Invoke(nameof(GeneratePickaxePartIcon_Async), Manager, part, PickaxePartLocation, Character, Icon, LatentInfo); }
        public TextureRenderTarget2D GeneratePickaxePartIcon(Object WorldContextObject, PickaxePart part, EPickaxePartLocation PickaxePartLocation, PlayerCharacterID Character, Transform Offset, Vector2D Size) { return Invoke<TextureRenderTarget2D>(nameof(GeneratePickaxePartIcon), WorldContextObject, part, PickaxePartLocation, Character, Offset, Size); }
        public void CancelIconGenerations(IconGenerationManager Manager, Object CancelGroup) { Invoke(nameof(CancelIconGenerations), Manager, CancelGroup); }
    }
    public class IconGeneratable : Interface
    {
        public IconGeneratable(nint addr) : base(addr) { }
    }
    public class Craftable : Interface
    {
        public Craftable(nint addr) : base(addr) { }
        public void PreviewItem(FSDPlayerState PlayerState, bool Show) { Invoke(nameof(PreviewItem), PlayerState, Show); }
        public bool IsOwned(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsOwned), WorldContextObject, characterID); }
        public UArray<CraftingCost> GetResourceCost() { return Invoke<UArray<CraftingCost>>(nameof(GetResourceCost)); }
        public int GetRequiredPlayerRank() { return Invoke<int>(nameof(GetRequiredPlayerRank)); }
        public CraftingCost GetFashioniteCost() { return Invoke<CraftingCost>(nameof(GetFashioniteCost)); }
        public int GetCraftingCreditsCost() { return Invoke<int>(nameof(GetCraftingCreditsCost)); }
        public Object GetCraftableName() { return Invoke<Object>(nameof(GetCraftableName)); }
        public Object GetCraftableDescription() { return Invoke<Object>(nameof(GetCraftableDescription)); }
        public void CraftItemWithFashionite(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(CraftItemWithFashionite), WorldContextObject, characterID); }
        public void CraftItem(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(CraftItem), WorldContextObject, characterID); }
        public bool CanCraftWithFashionite(Object WorldContextObject) { return Invoke<bool>(nameof(CanCraftWithFashionite), WorldContextObject); }
        public bool CanCraft(Object WorldContextObject) { return Invoke<bool>(nameof(CanCraft), WorldContextObject); }
    }
    public class FootStepNotifyTarget : Interface
    {
        public FootStepNotifyTarget(nint addr) : base(addr) { }
    }
    public class Health : Interface
    {
        public Health(nint addr) : base(addr) { }
        public bool IsDead() { return Invoke<bool>(nameof(IsDead)); }
        public bool IsAlive() { return Invoke<bool>(nameof(IsAlive)); }
        public Actor GetOwner() { return Invoke<Actor>(nameof(GetOwner)); }
        public float GetMaxHealth() { return Invoke<float>(nameof(GetMaxHealth)); }
        public EHealthbarType GetHealthbarType() { return Invoke<EHealthbarType>(nameof(GetHealthbarType)); }
        public float GetHealth() { return Invoke<float>(nameof(GetHealth)); }
    }
    public class InputCompatible : Interface
    {
        public InputCompatible(nint addr) : base(addr) { }
    }
    public class AnimNotifyState_FootStep : AnimNotifyState
    {
        public AnimNotifyState_FootStep(nint addr) : base(addr) { }
        public int LegNr { get { return this[nameof(LegNr)].GetValue<int>(); } set { this[nameof(LegNr)].SetValue<int>(value); } }
    }
    public class IKComponent : ActorComponent
    {
        public IKComponent(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public UArray<IKLegSetup> LegSetups { get { return new UArray<IKLegSetup>(this[nameof(LegSetups)].Address); } }
        public UArray<IKSyncGroup> SyncGroups { get { return new UArray<IKSyncGroup>(this[nameof(SyncGroups)].Address); } }
        public IKStyle IKStyle { get { return this[nameof(IKStyle)].As<IKStyle>(); } set { this["IKStyle"] = value; } }
        public SphereComponent BodyColi { get { return this[nameof(BodyColi)].As<SphereComponent>(); } set { this["BodyColi"] = value; } }
        public UArray<EndEffector> Effectors { get { return new UArray<EndEffector>(this[nameof(Effectors)].Address); } }
        public float EffectorWeight { get { return this[nameof(EffectorWeight)].GetValue<float>(); } set { this[nameof(EffectorWeight)].SetValue<float>(value); } }
        public bool EffectorsEnabled { get { return this[nameof(EffectorsEnabled)].Flag; } set { this[nameof(EffectorsEnabled)].Flag = value; } }
    }
    public class MinersManualHandler : Interface
    {
        public MinersManualHandler(nint addr) : base(addr) { }
        public void OpenMinersManualPage(EMinersManualSinglePage page) { Invoke(nameof(OpenMinersManualPage), page); }
        public void OpenMinersManualFromID(EMinersManualSection Section, Guid ID) { Invoke(nameof(OpenMinersManualFromID), Section, ID); }
    }
    public class ImpactComponent : ActorComponent
    {
        public ImpactComponent(nint addr) : base(addr) { }
        public Object OnImpactedEvent { get { return this[nameof(OnImpactedEvent)]; } set { this[nameof(OnImpactedEvent)] = value; } }
        public Object OnHighAcceleration { get { return this[nameof(OnHighAcceleration)]; } set { this[nameof(OnHighAcceleration)] = value; } }
        public bool DebugText { get { return this[nameof(DebugText)].Flag; } set { this[nameof(DebugText)].Flag = value; } }
        public bool TrackAcceleration { get { return this[nameof(TrackAcceleration)].Flag; } set { this[nameof(TrackAcceleration)].Flag = value; } }
        public bool TrackVelocity { get { return this[nameof(TrackVelocity)].Flag; } set { this[nameof(TrackVelocity)].Flag = value; } }
        public float TriggerHighAccelAt { get { return this[nameof(TriggerHighAccelAt)].GetValue<float>(); } set { this[nameof(TriggerHighAccelAt)].SetValue<float>(value); } }
        public float TriggerAtVelocityDifference { get { return this[nameof(TriggerAtVelocityDifference)].GetValue<float>(); } set { this[nameof(TriggerAtVelocityDifference)].SetValue<float>(value); } }
        public void SetCheckVelocity(bool aCheckVelocity) { Invoke(nameof(SetCheckVelocity), aCheckVelocity); }
        public void SetCheckAcceleration(bool aCheckAcceleration) { Invoke(nameof(SetCheckAcceleration), aCheckAcceleration); }
        public void EnableImpactCheckhing(SceneComponent cmp) { Invoke(nameof(EnableImpactCheckhing), cmp); }
        public void DisableImpactChecking() { Invoke(nameof(DisableImpactChecking)); }
    }
    public class WeaponImpactComponent : ActorComponent
    {
        public WeaponImpactComponent(nint addr) : base(addr) { }
        public Object OnImpactedEvent { get { return this[nameof(OnImpactedEvent)]; } set { this[nameof(OnImpactedEvent)] = value; } }
        public Object OnHighAcceleration { get { return this[nameof(OnHighAcceleration)]; } set { this[nameof(OnHighAcceleration)] = value; } }
        public bool DebugText { get { return this[nameof(DebugText)].Flag; } set { this[nameof(DebugText)].Flag = value; } }
        public Object ImpactSocketName { get { return this[nameof(ImpactSocketName)]; } set { this[nameof(ImpactSocketName)] = value; } }
        public SkeletalMeshComponent ActiveMesh { get { return this[nameof(ActiveMesh)].As<SkeletalMeshComponent>(); } set { this["ActiveMesh"] = value; } }
        public bool TrackAcceleration { get { return this[nameof(TrackAcceleration)].Flag; } set { this[nameof(TrackAcceleration)].Flag = value; } }
        public bool TrackVelocity { get { return this[nameof(TrackVelocity)].Flag; } set { this[nameof(TrackVelocity)].Flag = value; } }
        public float TriggerHighAccelAt { get { return this[nameof(TriggerHighAccelAt)].GetValue<float>(); } set { this[nameof(TriggerHighAccelAt)].SetValue<float>(value); } }
        public float TriggerAtVelocityDifference { get { return this[nameof(TriggerAtVelocityDifference)].GetValue<float>(); } set { this[nameof(TriggerAtVelocityDifference)].SetValue<float>(value); } }
        public void EnableImpactCheckhing(SkeletalMeshComponent cmp) { Invoke(nameof(EnableImpactCheckhing), cmp); }
        public void DisableImpactChecking() { Invoke(nameof(DisableImpactChecking)); }
    }
    public class ImpactAudioComponent : AudioComponent
    {
        public ImpactAudioComponent(nint addr) : base(addr) { }
        public Object AudioParameterSpeed { get { return this[nameof(AudioParameterSpeed)]; } set { this[nameof(AudioParameterSpeed)] = value; } }
        public float DecelerationThreshold { get { return this[nameof(DecelerationThreshold)].GetValue<float>(); } set { this[nameof(DecelerationThreshold)].SetValue<float>(value); } }
        public bool ListenForDeath { get { return this[nameof(ListenForDeath)].Flag; } set { this[nameof(ListenForDeath)].Flag = value; } }
        public HealthComponentBase ParentHealth { get { return this[nameof(ParentHealth)].As<HealthComponentBase>(); } set { this["ParentHealth"] = value; } }
        public void OnOwnerDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnOwnerDeath), HealthComponent); }
        public ImpactAudioComponent AddImpactAudioToActor(Actor Actor, SceneComponent AttachToComponent, Object ComponentClass) { return Invoke<ImpactAudioComponent>(nameof(AddImpactAudioToActor), Actor, AttachToComponent, ComponentClass); }
    }
    public class FSDReverbVolume : Actor
    {
        public FSDReverbVolume(nint addr) : base(addr) { }
        public BoxComponent BoxCollision { get { return this[nameof(BoxCollision)].As<BoxComponent>(); } set { this["BoxCollision"] = value; } }
        public ReverbEffect Reverb { get { return this[nameof(Reverb)].As<ReverbEffect>(); } set { this["Reverb"] = value; } }
        public SoundMix SoundMix { get { return this[nameof(SoundMix)].As<SoundMix>(); } set { this["SoundMix"] = value; } }
        public SoundCue Ambient { get { return this[nameof(Ambient)].As<SoundCue>(); } set { this["Ambient"] = value; } }
        public AudioComponent AmbientInstance { get { return this[nameof(AmbientInstance)].As<AudioComponent>(); } set { this["AmbientInstance"] = value; } }
        public float Priority { get { return this[nameof(Priority)].GetValue<float>(); } set { this[nameof(Priority)].SetValue<float>(value); } }
    }
    public class InDangerComponent : ActorComponent
    {
        public InDangerComponent(nint addr) : base(addr) { }
        public Object OnInDanger { get { return this[nameof(OnInDanger)]; } set { this[nameof(OnInDanger)] = value; } }
        public Object ParentHealthComponent { get { return this[nameof(ParentHealthComponent)]; } set { this[nameof(ParentHealthComponent)] = value; } }
        public float DamageTimeLimit { get { return this[nameof(DamageTimeLimit)].GetValue<float>(); } set { this[nameof(DamageTimeLimit)].SetValue<float>(value); } }
        public float DamageThreshold { get { return this[nameof(DamageThreshold)].GetValue<float>(); } set { this[nameof(DamageThreshold)].SetValue<float>(value); } }
        public bool RunsOnClients { get { return this[nameof(RunsOnClients)].Flag; } set { this[nameof(RunsOnClients)].Flag = value; } }
        public void SetIsActive(bool aFlag) { Invoke(nameof(SetIsActive), aFlag); }
        public void OnDamage(float amount) { Invoke(nameof(OnDamage), amount); }
        public bool GetIsActive() { return Invoke<bool>(nameof(GetIsActive)); }
    }
    public class NetMontageAble : Interface
    {
        public NetMontageAble(nint addr) : base(addr) { }
        public float QueueMontage(AnimMontage Montage) { return Invoke<float>(nameof(QueueMontage), Montage); }
        public SkeletalMeshComponent GetSkeletalMesh() { return Invoke<SkeletalMeshComponent>(nameof(GetSkeletalMesh)); }
        public Object GetCenterOfMassSocketName() { return Invoke<Object>(nameof(GetCenterOfMassSocketName)); }
        public AnimInstance GetAnimInstance() { return Invoke<AnimInstance>(nameof(GetAnimInstance)); }
    }
    public class InfectedStateComponent : CharacterBreakOutState
    {
        public InfectedStateComponent(nint addr) : base(addr) { }
        public RandRange CleanseAmount { get { return this[nameof(CleanseAmount)].As<RandRange>(); } set { this["CleanseAmount"] = value; } }
        public SoundBase AudioFreeOfInfection { get { return this[nameof(AudioFreeOfInfection)].As<SoundBase>(); } set { this["AudioFreeOfInfection"] = value; } }
        public FSDPhysicalMaterial InfectedPhysicalMaterial { get { return this[nameof(InfectedPhysicalMaterial)].As<FSDPhysicalMaterial>(); } set { this["InfectedPhysicalMaterial"] = value; } }
        public FSDPhysicalMaterial DwarfFleshMaterial { get { return this[nameof(DwarfFleshMaterial)].As<FSDPhysicalMaterial>(); } set { this["DwarfFleshMaterial"] = value; } }
        public PawnAffliction InfectedAffliction { get { return this[nameof(InfectedAffliction)].As<PawnAffliction>(); } set { this["InfectedAffliction"] = value; } }
        public AnimMontage InfectedMontage { get { return this[nameof(InfectedMontage)].As<AnimMontage>(); } set { this["InfectedMontage"] = value; } }
        public AnimMontage InfectedAndBreakingFreeMontage { get { return this[nameof(InfectedAndBreakingFreeMontage)].As<AnimMontage>(); } set { this["InfectedAndBreakingFreeMontage"] = value; } }
        public float BreakingFreeMontageDuration { get { return this[nameof(BreakingFreeMontageDuration)].GetValue<float>(); } set { this[nameof(BreakingFreeMontageDuration)].SetValue<float>(value); } }
        public void Server_Breakout() { Invoke(nameof(Server_Breakout)); }
        public void ReceiveOnCleansing() { Invoke(nameof(ReceiveOnCleansing)); }
    }
    public class InfectionMasterComponent : ActorComponent
    {
        public InfectionMasterComponent(nint addr) : base(addr) { }
        public Object WeakpointPopSTE { get { return this[nameof(WeakpointPopSTE)]; } set { this[nameof(WeakpointPopSTE)] = value; } }
        public float WeakpointPopSTERange { get { return this[nameof(WeakpointPopSTERange)].GetValue<float>(); } set { this[nameof(WeakpointPopSTERange)].SetValue<float>(value); } }
        public byte InfectionPoints { get { return this[nameof(InfectionPoints)].GetValue<byte>(); } set { this[nameof(InfectionPoints)].SetValue<byte>(value); } }
        public bool ExtraInfectionPointsWithMorePlayers { get { return this[nameof(ExtraInfectionPointsWithMorePlayers)].Flag; } set { this[nameof(ExtraInfectionPointsWithMorePlayers)].Flag = value; } }
        public float SpikeScale { get { return this[nameof(SpikeScale)].GetValue<float>(); } set { this[nameof(SpikeScale)].SetValue<float>(value); } }
        public float InfectionScale { get { return this[nameof(InfectionScale)].GetValue<float>(); } set { this[nameof(InfectionScale)].SetValue<float>(value); } }
        public bool KillWhenAllPointsDestroyed { get { return this[nameof(KillWhenAllPointsDestroyed)].Flag; } set { this[nameof(KillWhenAllPointsDestroyed)].Flag = value; } }
        public float ScaleDownOnDeathTime { get { return this[nameof(ScaleDownOnDeathTime)].GetValue<float>(); } set { this[nameof(ScaleDownOnDeathTime)].SetValue<float>(value); } }
        public MaterialInterface BaseMat { get { return this[nameof(BaseMat)].As<MaterialInterface>(); } set { this["BaseMat"] = value; } }
        public MaterialInterface GlowMat { get { return this[nameof(GlowMat)].As<MaterialInterface>(); } set { this["GlowMat"] = value; } }
        public UArray<StaticMesh> InfectionPointMeshes { get { return new UArray<StaticMesh>(this[nameof(InfectionPointMeshes)].Address); } }
        public UArray<StaticMesh> InfectionSpikeMeshes { get { return new UArray<StaticMesh>(this[nameof(InfectionSpikeMeshes)].Address); } }
        public HealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponent>(); } set { this["HealthComponent"] = value; } }
        public UArray<StaticMeshComponent> MeshComponents { get { return new UArray<StaticMeshComponent>(this[nameof(MeshComponents)].Address); } }
        public uint RandomSeed { get { return this[nameof(RandomSeed)].GetValue<uint>(); } set { this[nameof(RandomSeed)].SetValue<uint>(value); } }
        public void OnRep_RandomSeed() { Invoke(nameof(OnRep_RandomSeed)); }
        public void OnDeath(HealthComponentBase enemy) { Invoke(nameof(OnDeath), enemy); }
        public void InfectionPointDestroyed(Object Name) { Invoke(nameof(InfectionPointDestroyed), Name); }
        public void DealWeakpointDamage(Object SocketName) { Invoke(nameof(DealWeakpointDamage), SocketName); }
    }
    public class NotifyMessageReceiver : Interface
    {
        public NotifyMessageReceiver(nint addr) : base(addr) { }
        public bool OnNotifyMessageReceived(Object TriggerName) { return Invoke<bool>(nameof(OnNotifyMessageReceived), TriggerName); }
    }
    public class InputCaptureWidget : UserWidget
    {
        public InputCaptureWidget(nint addr) : base(addr) { }
        public CustomKeySetting Settings { get { return this[nameof(Settings)].As<CustomKeySetting>(); } set { this["Settings"] = value; } }
        public EKeyBindingSlot InputSlot { get { return (EKeyBindingSlot)this[nameof(InputSlot)].GetValue<int>(); } set { this[nameof(InputSlot)].SetValue<int>((int)value); } }
        public bool bIsGamepadKey { get { return this[nameof(bIsGamepadKey)].Flag; } set { this[nameof(bIsGamepadKey)].Flag = value; } }
        public bool bCapturing { get { return this[nameof(bCapturing)].Flag; } set { this[nameof(bCapturing)].Flag = value; } }
        public void SetData(CustomKeySetting InSettings, EKeyBindingSlot InInputSlot, bool InIsGamepadKey) { Invoke(nameof(SetData), InSettings, InInputSlot, InIsGamepadKey); }
        public void SetCurrentBinding(Key InKey) { Invoke(nameof(SetCurrentBinding), InKey); }
        public void ReceiveKeyChanged(Key InKey) { Invoke(nameof(ReceiveKeyChanged), InKey); }
        public void ReceiveKeyCaptured(Key InKey) { Invoke(nameof(ReceiveKeyCaptured), InKey); }
        public void ReceiveCapturingChanged(bool InCapturing) { Invoke(nameof(ReceiveCapturingChanged), InCapturing); }
        public Key GetCurrentBinding() { return Invoke<Key>(nameof(GetCurrentBinding)); }
        public bool FindCurrentSettingsForKey(Key InKey, CustomKeySetting OutSettings) { return Invoke<bool>(nameof(FindCurrentSettingsForKey), InKey, OutSettings); }
        public void ClearCurrentBinding() { Invoke(nameof(ClearCurrentBinding)); }
        public void BindActionToKey(CustomKeySetting InAction, Key InKey, EKeyBindingSlot InSlot, bool SaveToDisk) { Invoke(nameof(BindActionToKey), InAction, InKey, InSlot, SaveToDisk); }
    }
    public class InputFunctionLibrary : BlueprintFunctionLibrary
    {
        public InputFunctionLibrary(nint addr) : base(addr) { }
        public void SetMouseSmoothingOn(bool smoothingOn) { Invoke(nameof(SetMouseSmoothingOn), smoothingOn); }
        public bool IsMouseSmoothingOn() { return Invoke<bool>(nameof(IsMouseSmoothingOn)); }
        public bool IsMouseEventAction(PointerEvent MouseEvent, Object ActionName, bool IgnoreCustomBindings) { return Invoke<bool>(nameof(IsMouseEventAction), MouseEvent, ActionName, IgnoreCustomBindings); }
        public bool IsKeyEventActionAny(KeyEvent KeyEvent, UArray<Object> ActionNames, bool IgnoreCustomBindings) { return Invoke<bool>(nameof(IsKeyEventActionAny), KeyEvent, ActionNames, IgnoreCustomBindings); }
        public bool IsKeyEventAction(KeyEvent KeyEvent, Object ActionName, bool IgnoreCustomBindings) { return Invoke<bool>(nameof(IsKeyEventAction), KeyEvent, ActionName, IgnoreCustomBindings); }
        public bool IsInputActionDown(PlayerController InPlayerController, Object InActionName) { return Invoke<bool>(nameof(IsInputActionDown), InPlayerController, InActionName); }
        public bool IsAxisMappedToDirectional(Object InActionName, Key Key, int Direction, bool IgnoreCustomBindings) { return Invoke<bool>(nameof(IsAxisMappedToDirectional), InActionName, Key, Direction, IgnoreCustomBindings); }
        public bool IsAnyInputActionDown(PlayerController InPlayerController, UArray<Object> InActionNames) { return Invoke<bool>(nameof(IsAnyInputActionDown), InPlayerController, InActionNames); }
        public bool IsActionMappedTo(Object InActionName, Key Key, bool IgnoreCustomBindings) { return Invoke<bool>(nameof(IsActionMappedTo), InActionName, Key, IgnoreCustomBindings); }
        public bool GetAxisMapping(Object InActionName, int Axis, bool InGamepadKeys, InputAxisKeyMapping OutResult) { return Invoke<bool>(nameof(GetAxisMapping), InActionName, Axis, InGamepadKeys, OutResult); }
        public bool GetActionMapping(Object InActionName, bool InGamepadKeys, InputActionKeyMapping OutResult) { return Invoke<bool>(nameof(GetActionMapping), InActionName, InGamepadKeys, OutResult); }
        public bool FindInputDisplay(PlayerController PlayerController, Object InputName, EFSDInputSource InputSource, int LayoutIndex, InputDisplay OutInputDisplay) { return Invoke<bool>(nameof(FindInputDisplay), PlayerController, InputName, InputSource, LayoutIndex, OutInputDisplay); }
        public Texture2D FindActionIcon(Object InActionName, bool InGamepadKeys) { return Invoke<Texture2D>(nameof(FindActionIcon), InActionName, InGamepadKeys); }
    }
    public class InsectSwarmEnemy : EnemyDeepPathfinderCharacter
    {
        public InsectSwarmEnemy(nint addr) : base(addr) { }
        public ParticleSystemComponent SwarmParticles { get { return this[nameof(SwarmParticles)].As<ParticleSystemComponent>(); } set { this["SwarmParticles"] = value; } }
    }
    public class InsectSwarmSpawner : EnemyPawn
    {
        public InsectSwarmSpawner(nint addr) : base(addr) { }
        public Object SwarmType { get { return this[nameof(SwarmType)]; } set { this[nameof(SwarmType)] = value; } }
        public float SpawnHeightOffset { get { return this[nameof(SpawnHeightOffset)].GetValue<float>(); } set { this[nameof(SpawnHeightOffset)].SetValue<float>(value); } }
        public float AlertDistance { get { return this[nameof(AlertDistance)].GetValue<float>(); } set { this[nameof(AlertDistance)].SetValue<float>(value); } }
        public float respawnDelay { get { return this[nameof(respawnDelay)].GetValue<float>(); } set { this[nameof(respawnDelay)].SetValue<float>(value); } }
        public Object SwarmInstance { get { return this[nameof(SwarmInstance)]; } set { this[nameof(SwarmInstance)] = value; } }
        public StaticMeshComponent Receive_GetStaticMesh() { return Invoke<StaticMeshComponent>(nameof(Receive_GetStaticMesh)); }
        public void OnSwarmSpawned(InsectSwarmEnemy Swarm) { Invoke(nameof(OnSwarmSpawned), Swarm); }
        public void OnSwarmDestroyed(Actor DestroyedActor) { Invoke(nameof(OnSwarmDestroyed), DestroyedActor); }
    }
    public class InstancedMeshOnSpline : InstancedStaticMeshComponent
    {
        public InstancedMeshOnSpline(nint addr) : base(addr) { }
        public SplineComponent Spline { get { return this[nameof(Spline)].As<SplineComponent>(); } set { this["Spline"] = value; } }
        public int NumInstances { get { return this[nameof(NumInstances)].GetValue<int>(); } set { this[nameof(NumInstances)].SetValue<int>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<float>(); } set { this[nameof(VerticalOffset)].SetValue<float>(value); } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public UArray<Transform> NewInstancesTransforms { get { return new UArray<Transform>(this[nameof(NewInstancesTransforms)].Address); } }
        public float Phase { get { return this[nameof(Phase)].GetValue<float>(); } set { this[nameof(Phase)].SetValue<float>(value); } }
        public void SetSpeed(float NewSpeed) { Invoke(nameof(SetSpeed), NewSpeed); }
    }
    public class InstancedNiagaraComponent : SceneComponent
    {
        public InstancedNiagaraComponent(nint addr) : base(addr) { }
        public UArray<EmitterConnection> Emitters { get { return new UArray<EmitterConnection>(this[nameof(Emitters)].Address); } }
        public NiagaraComponent NiagaraComponent { get { return this[nameof(NiagaraComponent)].As<NiagaraComponent>(); } set { this["NiagaraComponent"] = value; } }
        public void SpawnParticlesFromName(Vector Location, Object EmitterName) { Invoke(nameof(SpawnParticlesFromName), Location, EmitterName); }
        public void SpawnParticles(Vector Location, int EmitterIndex) { Invoke(nameof(SpawnParticles), Location, EmitterIndex); }
    }
    public class InventoryBase : ActorComponent
    {
        public InventoryBase(nint addr) : base(addr) { }
        public UArray<Actor> ActorsSelectable { get { return new UArray<Actor>(this[nameof(ActorsSelectable)].Address); } }
        public UArray<Actor> ActorsNonSelectable { get { return new UArray<Actor>(this[nameof(ActorsNonSelectable)].Address); } }
        public EquippedActorData ReplicatedEquippedActor { get { return this[nameof(ReplicatedEquippedActor)].As<EquippedActorData>(); } set { this["ReplicatedEquippedActor"] = value; } }
        public EquippedActorData EquippedActor { get { return this[nameof(EquippedActor)].As<EquippedActorData>(); } set { this["EquippedActor"] = value; } }
        public Actor LastEquippedActors { get { return this[nameof(LastEquippedActors)].As<Actor>(); } set { this["LastEquippedActors"] = value; } }
        public DelayedActorSwitchData DelayedActorSwitchOldActor { get { return this[nameof(DelayedActorSwitchOldActor)].As<DelayedActorSwitchData>(); } set { this["DelayedActorSwitchOldActor"] = value; } }
        public void Server_SetEquippedActor(EquippedActorData Actor, bool CallClientDelayed) { Invoke(nameof(Server_SetEquippedActor), Actor, CallClientDelayed); }
        public void Server_EquipExternalActor(Actor Actor) { Invoke(nameof(Server_EquipExternalActor), Actor); }
        public void OnRep_EquippedActor(EquippedActorData OldActor) { Invoke(nameof(OnRep_EquippedActor), OldActor); }
        public void OnRep_ActorsSelectable() { Invoke(nameof(OnRep_ActorsSelectable)); }
        public void OnRep_ActorsNonSelectable() { Invoke(nameof(OnRep_ActorsNonSelectable)); }
        public UArray<Actor> GetSelectableActors() { return Invoke<UArray<Actor>>(nameof(GetSelectableActors)); }
        public UArray<Actor> GetAllItems() { return Invoke<UArray<Actor>>(nameof(GetAllItems)); }
        public void EquipPrevious() { Invoke(nameof(EquipPrevious)); }
        public void EquipNull() { Invoke(nameof(EquipNull)); }
        public void EquipNext() { Invoke(nameof(EquipNext)); }
        public void EquipLast() { Invoke(nameof(EquipLast)); }
        public void EquipAtIndex(int Index, bool ignoreUsing) { Invoke(nameof(EquipAtIndex), Index, ignoreUsing); }
    }
    public class InventoryComponent : InventoryBase
    {
        public InventoryComponent(nint addr) : base(addr) { }
        public Object OnItemsLoaded { get { return this[nameof(OnItemsLoaded)]; } set { this[nameof(OnItemsLoaded)] = value; } }
        public Object OnItemClicked { get { return this[nameof(OnItemClicked)]; } set { this[nameof(OnItemClicked)] = value; } }
        public Object OnItemEquipped { get { return this[nameof(OnItemEquipped)]; } set { this[nameof(OnItemEquipped)] = value; } }
        public Object OnItemUnequipped { get { return this[nameof(OnItemUnequipped)]; } set { this[nameof(OnItemUnequipped)] = value; } }
        public Object OnGrenadeCountChanged { get { return this[nameof(OnGrenadeCountChanged)]; } set { this[nameof(OnGrenadeCountChanged)] = value; } }
        public Object OnFlareCountChanged { get { return this[nameof(OnFlareCountChanged)]; } set { this[nameof(OnFlareCountChanged)] = value; } }
        public Object OnMaxFlareCountChanged { get { return this[nameof(OnMaxFlareCountChanged)]; } set { this[nameof(OnMaxFlareCountChanged)] = value; } }
        public Object OnFlareProduction { get { return this[nameof(OnFlareProduction)]; } set { this[nameof(OnFlareProduction)] = value; } }
        public Object OnResuppliedEvent { get { return this[nameof(OnResuppliedEvent)]; } set { this[nameof(OnResuppliedEvent)] = value; } }
        public Object OnCarriableChangedEvent { get { return this[nameof(OnCarriableChangedEvent)]; } set { this[nameof(OnCarriableChangedEvent)] = value; } }
        public InventoryList InventoryList { get { return this[nameof(InventoryList)].As<InventoryList>(); } set { this["InventoryList"] = value; } }
        public Object ThrownGrenadeClass { get { return this[nameof(ThrownGrenadeClass)]; } set { this[nameof(ThrownGrenadeClass)] = value; } }
        public Object flareClass { get { return this[nameof(flareClass)]; } set { this[nameof(flareClass)] = value; } }
        public Vector FlareOffset { get { return this[nameof(FlareOffset)].As<Vector>(); } set { this["FlareOffset"] = value; } }
        public SoundCue OutOfFlaresSound { get { return this[nameof(OutOfFlaresSound)].As<SoundCue>(); } set { this["OutOfFlaresSound"] = value; } }
        public DialogDataAsset OutOfFlaresShout { get { return this[nameof(OutOfFlaresShout)].As<DialogDataAsset>(); } set { this["OutOfFlaresShout"] = value; } }
        public float FlareAngle { get { return this[nameof(FlareAngle)].GetValue<float>(); } set { this[nameof(FlareAngle)].SetValue<float>(value); } }
        public float FlareCooldown { get { return this[nameof(FlareCooldown)].GetValue<float>(); } set { this[nameof(FlareCooldown)].SetValue<float>(value); } }
        public float FlareProductionTime { get { return this[nameof(FlareProductionTime)].GetValue<float>(); } set { this[nameof(FlareProductionTime)].SetValue<float>(value); } }
        public LinearColor FlareChromaColor { get { return this[nameof(FlareChromaColor)].As<LinearColor>(); } set { this["FlareChromaColor"] = value; } }
        public float FlareProductionTimeLeft { get { return this[nameof(FlareProductionTimeLeft)].GetValue<float>(); } set { this[nameof(FlareProductionTimeLeft)].SetValue<float>(value); } }
        public int MaxFlares { get { return this[nameof(MaxFlares)].GetValue<int>(); } set { this[nameof(MaxFlares)].SetValue<int>(value); } }
        public int Flares { get { return this[nameof(Flares)].GetValue<int>(); } set { this[nameof(Flares)].SetValue<int>(value); } }
        public float FlareCooldownRemaining { get { return this[nameof(FlareCooldownRemaining)].GetValue<float>(); } set { this[nameof(FlareCooldownRemaining)].SetValue<float>(value); } }
        public UArray<ItemUpgrade> FlareUpgrades { get { return new UArray<ItemUpgrade>(this[nameof(FlareUpgrades)].Address); } }
        public bool bItemsLoaded { get { return this[nameof(bItemsLoaded)].Flag; } set { this[nameof(bItemsLoaded)].Flag = value; } }
        public PickaxeItem MiningItem { get { return this[nameof(MiningItem)].As<PickaxeItem>(); } set { this["MiningItem"] = value; } }
        public ThrownGrenadeItem GrenadeItem { get { return this[nameof(GrenadeItem)].As<ThrownGrenadeItem>(); } set { this["GrenadeItem"] = value; } }
        public LaserPointerItem LaserPointerItem { get { return this[nameof(LaserPointerItem)].As<LaserPointerItem>(); } set { this["LaserPointerItem"] = value; } }
        public TerrainScannerItem TerrainScannerItem { get { return this[nameof(TerrainScannerItem)].As<TerrainScannerItem>(); } set { this["TerrainScannerItem"] = value; } }
        public RessuplyPodItem ResupplyItem { get { return this[nameof(ResupplyItem)].As<RessuplyPodItem>(); } set { this["ResupplyItem"] = value; } }
        public RecallableSentryGunItem RecallableSentryGunItem { get { return this[nameof(RecallableSentryGunItem)].As<RecallableSentryGunItem>(); } set { this["RecallableSentryGunItem"] = value; } }
        public void UpdateFromSaveGameInSlot(EItemCategory Category) { Invoke(nameof(UpdateFromSaveGameInSlot), Category); }
        public void StartGrenadeThrow() { Invoke(nameof(StartGrenadeThrow)); }
        public void Server_ThrowItem(Actor Item, Vector force, bool PlayMontage) { Invoke(nameof(Server_ThrowItem), Item, force, PlayMontage); }
        public void Server_ThrowFlare() { Invoke(nameof(Server_ThrowFlare)); }
        public void ResupplyGrenades(float percentage) { Invoke(nameof(ResupplyGrenades), percentage); }
        public void Resupply(float percentage) { Invoke(nameof(Resupply), percentage); }
        public void PickupItemInstance(Item Item) { Invoke(nameof(PickupItemInstance), Item); }
        public Item PickupItem(Object itemClass) { return Invoke<Item>(nameof(PickupItem), itemClass); }
        public void OnRep_FlareClass() { Invoke(nameof(OnRep_FlareClass)); }
        public bool IsTerrainScannerEquipped() { return Invoke<bool>(nameof(IsTerrainScannerEquipped)); }
        public bool HasPickedUpItem() { return Invoke<bool>(nameof(HasPickedUpItem)); }
        public bool HasDrink() { return Invoke<bool>(nameof(HasDrink)); }
        public int GetTotalAmmoLeft() { return Invoke<int>(nameof(GetTotalAmmoLeft)); }
        public RecallableSentryGunItem GetRecallableSentryGunItem() { return Invoke<RecallableSentryGunItem>(nameof(GetRecallableSentryGunItem)); }
        public Item GetOrCreateUnlistedItem(Object ItemType) { return Invoke<Item>(nameof(GetOrCreateUnlistedItem), ItemType); }
        public Item GetItem(EItemCategory Category) { return Invoke<Item>(nameof(GetItem), Category); }
        public Item GetEquippedItem() { return Invoke<Item>(nameof(GetEquippedItem)); }
        public Actor GetCarriedItem() { return Invoke<Actor>(nameof(GetCarriedItem)); }
        public bool EquipCategory(EItemCategory Category) { return Invoke<bool>(nameof(EquipCategory), Category); }
        public void Equip(Item Item) { Invoke(nameof(Equip), Item); }
        public void EndGrenadeThrow() { Invoke(nameof(EndGrenadeThrow)); }
        public void DropPickedupItem() { Invoke(nameof(DropPickedupItem)); }
        public void Client_Resupply(float percentage) { Invoke(nameof(Client_Resupply), percentage); }
        public void AnimationNotify2() { Invoke(nameof(AnimationNotify2)); }
        public void AnimationNotify1() { Invoke(nameof(AnimationNotify1)); }
        public void All_PlayThrowMontage(Actor Item) { Invoke(nameof(All_PlayThrowMontage), Item); }
        public void AddItemClass(Object itemClass) { Invoke(nameof(AddItemClass), itemClass); }
    }
    public class InventoryList : DataAsset
    {
        public InventoryList(nint addr) : base(addr) { }
        public Object IconWeaponSetOutline { get { return this[nameof(IconWeaponSetOutline)]; } set { this[nameof(IconWeaponSetOutline)] = value; } }
        public Object IconWeaponSetFill { get { return this[nameof(IconWeaponSetFill)]; } set { this[nameof(IconWeaponSetFill)] = value; } }
        public Object LaserpointerMarkerMaterial { get { return this[nameof(LaserpointerMarkerMaterial)]; } set { this[nameof(LaserpointerMarkerMaterial)] = value; } }
        public Object LaserpointerBeamMaterial { get { return this[nameof(LaserpointerBeamMaterial)]; } set { this[nameof(LaserpointerBeamMaterial)] = value; } }
        public ItemID LaserPointerItem { get { return this[nameof(LaserPointerItem)].As<ItemID>(); } set { this["LaserPointerItem"] = value; } }
        public ItemID TerrainScannerItem { get { return this[nameof(TerrainScannerItem)].As<ItemID>(); } set { this["TerrainScannerItem"] = value; } }
        public ItemID ResupplyItem { get { return this[nameof(ResupplyItem)].As<ItemID>(); } set { this["ResupplyItem"] = value; } }
        public UArray<ItemID> PrimaryWeapons { get { return new UArray<ItemID>(this[nameof(PrimaryWeapons)].Address); } }
        public UArray<ItemID> SecondaryWeapons { get { return new UArray<ItemID>(this[nameof(SecondaryWeapons)].Address); } }
        public UArray<ItemID> TraversalTools { get { return new UArray<ItemID>(this[nameof(TraversalTools)].Address); } }
        public UArray<ItemID> ClassTools { get { return new UArray<ItemID>(this[nameof(ClassTools)].Address); } }
        public UArray<ItemID> Armors { get { return new UArray<ItemID>(this[nameof(Armors)].Address); } }
        public UArray<ItemID> Flares { get { return new UArray<ItemID>(this[nameof(Flares)].Address); } }
        public UArray<ItemID> Grenades { get { return new UArray<ItemID>(this[nameof(Grenades)].Address); } }
        public UArray<ItemID> MiningTools { get { return new UArray<ItemID>(this[nameof(MiningTools)].Address); } }
        public ItemID GetPreviousUnlockedItem(Object WorldContextObject, EItemCategory Category, ItemID currentItem) { return Invoke<ItemID>(nameof(GetPreviousUnlockedItem), WorldContextObject, Category, currentItem); }
        public ItemID GetPreviousItem(EItemCategory Category, ItemID currentItem) { return Invoke<ItemID>(nameof(GetPreviousItem), Category, currentItem); }
        public int GetNumberOfItems(EItemCategory Category) { return Invoke<int>(nameof(GetNumberOfItems), Category); }
        public ItemID GetNextUnlockedItem(Object WorldContextObject, EItemCategory Category, ItemID currentItem) { return Invoke<ItemID>(nameof(GetNextUnlockedItem), WorldContextObject, Category, currentItem); }
        public ItemID GetNextItem(EItemCategory Category, ItemID currentItem) { return Invoke<ItemID>(nameof(GetNextItem), Category, currentItem); }
        public UArray<Object> GetLoadedItemListFiltered(EItemCategory Category, Object Filter) { return Invoke<UArray<Object>>(nameof(GetLoadedItemListFiltered), Category, Filter); }
        public UArray<Object> GetLoadedItemList(EItemCategory Category) { return Invoke<UArray<Object>>(nameof(GetLoadedItemList), Category); }
        public UArray<ItemID> GetItemList(EItemCategory Category) { return Invoke<UArray<ItemID>>(nameof(GetItemList), Category); }
        public int GetItemIndex(EItemCategory Category, ItemID Item) { return Invoke<int>(nameof(GetItemIndex), Category, Item); }
        public UArray<ItemID> GetAllItemsList() { return Invoke<UArray<ItemID>>(nameof(GetAllItemsList)); }
        public void CheckForInventoryAchievements(Object WorldContextObject) { Invoke(nameof(CheckForInventoryAchievements), WorldContextObject); }
    }
    public class PlaySoundInterface : Interface
    {
        public PlaySoundInterface(nint addr) : base(addr) { }
    }
    public class ProjectileSpawner : Interface
    {
        public ProjectileSpawner(nint addr) : base(addr) { }
    }
    public class RejoinListener : Interface
    {
        public RejoinListener(nint addr) : base(addr) { }
    }
    public class SpawnReleasedActor : Interface
    {
        public SpawnReleasedActor(nint addr) : base(addr) { }
        public bool OnSpawnRelease_Released() { return Invoke<bool>(nameof(OnSpawnRelease_Released)); }
        public bool OnSpawnRelease_Attached(Actor Parent) { return Invoke<bool>(nameof(OnSpawnRelease_Attached), Parent); }
    }
    public class Targetable : Interface
    {
        public Targetable(nint addr) : base(addr) { }
        public void ShowDamageEffects(ParticleSystem Particles, Vector Location, Rotator Orientation) { Invoke(nameof(ShowDamageEffects), Particles, Location, Orientation); }
        public HealthComponentBase GetTargetHealthComponent() { return Invoke<HealthComponentBase>(nameof(GetTargetHealthComponent)); }
        public Vector GetTargetCenterMass() { return Invoke<Vector>(nameof(GetTargetCenterMass)); }
        public bool GetIsTargetable() { return Invoke<bool>(nameof(GetIsTargetable)); }
    }
    public class AnimNotify_CycleItemComplete : AnimNotify
    {
        public AnimNotify_CycleItemComplete(nint addr) : base(addr) { }
    }
    public class HeatMaterialComponent : ActorComponent
    {
        public HeatMaterialComponent(nint addr) : base(addr) { }
        public Object ParameterName { get { return this[nameof(ParameterName)]; } set { this[nameof(ParameterName)] = value; } }
        public float MaxEffect { get { return this[nameof(MaxEffect)].GetValue<float>(); } set { this[nameof(MaxEffect)].SetValue<float>(value); } }
        public UArray<MaterialInstanceDynamic> MaterialIntances { get { return new UArray<MaterialInstanceDynamic>(this[nameof(MaterialIntances)].Address); } }
        public void OnTemperatureChanged(float temperature, bool overheated) { Invoke(nameof(OnTemperatureChanged), temperature, overheated); }
        public void AddHeatMaterial(MaterialInstanceDynamic MaterialInstance) { Invoke(nameof(AddHeatMaterial), MaterialInstance); }
    }
    public class ItemAquisitionSource : SavableDataAsset
    {
        public ItemAquisitionSource(nint addr) : base(addr) { }
    }
    public class ItemCharacterAnimationSet : DataAsset
    {
        public ItemCharacterAnimationSet(nint addr) : base(addr) { }
        public AnimSequence FP_Idle { get { return this[nameof(FP_Idle)].As<AnimSequence>(); } set { this["FP_Idle"] = value; } }
        public AnimMontage FP_InspectWeapon { get { return this[nameof(FP_InspectWeapon)].As<AnimMontage>(); } set { this["FP_InspectWeapon"] = value; } }
        public AnimSequence FP_Walk { get { return this[nameof(FP_Walk)].As<AnimSequence>(); } set { this["FP_Walk"] = value; } }
        public AnimSequence FP_Sprint { get { return this[nameof(FP_Sprint)].As<AnimSequence>(); } set { this["FP_Sprint"] = value; } }
        public AnimMontage FP_JumpStart_Montage { get { return this[nameof(FP_JumpStart_Montage)].As<AnimMontage>(); } set { this["FP_JumpStart_Montage"] = value; } }
        public AnimSequence FP_JumpStart { get { return this[nameof(FP_JumpStart)].As<AnimSequence>(); } set { this["FP_JumpStart"] = value; } }
        public AnimSequence FP_JumpLoop { get { return this[nameof(FP_JumpLoop)].As<AnimSequence>(); } set { this["FP_JumpLoop"] = value; } }
        public AnimSequence FP_JumpLand { get { return this[nameof(FP_JumpLand)].As<AnimSequence>(); } set { this["FP_JumpLand"] = value; } }
        public AnimSequence FP_JumpLand_Aim { get { return this[nameof(FP_JumpLand_Aim)].As<AnimSequence>(); } set { this["FP_JumpLand_Aim"] = value; } }
        public AnimSequence FP_Downed { get { return this[nameof(FP_Downed)].As<AnimSequence>(); } set { this["FP_Downed"] = value; } }
        public BlendSpace1D TP_LookUpDown { get { return this[nameof(TP_LookUpDown)].As<BlendSpace1D>(); } set { this["TP_LookUpDown"] = value; } }
        public BlendSpace1D TP_LookUpDown_Aim { get { return this[nameof(TP_LookUpDown_Aim)].As<BlendSpace1D>(); } set { this["TP_LookUpDown_Aim"] = value; } }
        public AnimSequence TP_Sprint { get { return this[nameof(TP_Sprint)].As<AnimSequence>(); } set { this["TP_Sprint"] = value; } }
        public AnimSequence TP_Idle { get { return this[nameof(TP_Idle)].As<AnimSequence>(); } set { this["TP_Idle"] = value; } }
        public AnimSequence TP_Idle_Aim { get { return this[nameof(TP_Idle_Aim)].As<AnimSequence>(); } set { this["TP_Idle_Aim"] = value; } }
        public AnimSequence TP_LookForward { get { return this[nameof(TP_LookForward)].As<AnimSequence>(); } set { this["TP_LookForward"] = value; } }
        public AnimSequence TP_LookForward_Aim { get { return this[nameof(TP_LookForward_Aim)].As<AnimSequence>(); } set { this["TP_LookForward_Aim"] = value; } }
        public AnimSequence TP_JumpStart { get { return this[nameof(TP_JumpStart)].As<AnimSequence>(); } set { this["TP_JumpStart"] = value; } }
        public AnimSequence TP_JumpStart_Aim { get { return this[nameof(TP_JumpStart_Aim)].As<AnimSequence>(); } set { this["TP_JumpStart_Aim"] = value; } }
        public AnimSequence TP_JumpLoop { get { return this[nameof(TP_JumpLoop)].As<AnimSequence>(); } set { this["TP_JumpLoop"] = value; } }
        public AnimSequence TP_JumpLoop_Aim { get { return this[nameof(TP_JumpLoop_Aim)].As<AnimSequence>(); } set { this["TP_JumpLoop_Aim"] = value; } }
        public AnimMontage TP_JumpLand { get { return this[nameof(TP_JumpLand)].As<AnimMontage>(); } set { this["TP_JumpLand"] = value; } }
        public AnimSequence TP_Walk_Forward { get { return this[nameof(TP_Walk_Forward)].As<AnimSequence>(); } set { this["TP_Walk_Forward"] = value; } }
        public AnimSequence TP_Walk_Forward_Aim { get { return this[nameof(TP_Walk_Forward_Aim)].As<AnimSequence>(); } set { this["TP_Walk_Forward_Aim"] = value; } }
        public AnimSequence TP_Run_Forward { get { return this[nameof(TP_Run_Forward)].As<AnimSequence>(); } set { this["TP_Run_Forward"] = value; } }
        public AnimSequence TP_Run_Forward_Aim { get { return this[nameof(TP_Run_Forward_Aim)].As<AnimSequence>(); } set { this["TP_Run_Forward_Aim"] = value; } }
        public AnimSequence TP_Walk_Right { get { return this[nameof(TP_Walk_Right)].As<AnimSequence>(); } set { this["TP_Walk_Right"] = value; } }
        public AnimSequence TP_Walk_Right_Aim { get { return this[nameof(TP_Walk_Right_Aim)].As<AnimSequence>(); } set { this["TP_Walk_Right_Aim"] = value; } }
        public AnimSequence TP_Run_Right { get { return this[nameof(TP_Run_Right)].As<AnimSequence>(); } set { this["TP_Run_Right"] = value; } }
        public AnimSequence TP_Run_Right_Aim { get { return this[nameof(TP_Run_Right_Aim)].As<AnimSequence>(); } set { this["TP_Run_Right_Aim"] = value; } }
        public AnimSequence TP_Walk_Left { get { return this[nameof(TP_Walk_Left)].As<AnimSequence>(); } set { this["TP_Walk_Left"] = value; } }
        public AnimSequence TP_Walk_Left_Aim { get { return this[nameof(TP_Walk_Left_Aim)].As<AnimSequence>(); } set { this["TP_Walk_Left_Aim"] = value; } }
        public AnimSequence TP_Run_Left { get { return this[nameof(TP_Run_Left)].As<AnimSequence>(); } set { this["TP_Run_Left"] = value; } }
        public AnimSequence TP_Run_Left_Aim { get { return this[nameof(TP_Run_Left_Aim)].As<AnimSequence>(); } set { this["TP_Run_Left_Aim"] = value; } }
        public AnimSequence TP_Walk_Back { get { return this[nameof(TP_Walk_Back)].As<AnimSequence>(); } set { this["TP_Walk_Back"] = value; } }
        public AnimSequence TP_Walk_Back_Aim { get { return this[nameof(TP_Walk_Back_Aim)].As<AnimSequence>(); } set { this["TP_Walk_Back_Aim"] = value; } }
        public AnimSequence TP_Run_Back { get { return this[nameof(TP_Run_Back)].As<AnimSequence>(); } set { this["TP_Run_Back"] = value; } }
        public AnimSequence TP_Run_Back_Aim { get { return this[nameof(TP_Run_Back_Aim)].As<AnimSequence>(); } set { this["TP_Run_Back_Aim"] = value; } }
        public AnimSequence TP_Revived { get { return this[nameof(TP_Revived)].As<AnimSequence>(); } set { this["TP_Revived"] = value; } }
        public AnimSequence TP_Downed { get { return this[nameof(TP_Downed)].As<AnimSequence>(); } set { this["TP_Downed"] = value; } }
        public AnimSequence TP_Downed_Loop { get { return this[nameof(TP_Downed_Loop)].As<AnimSequence>(); } set { this["TP_Downed_Loop"] = value; } }
        public AnimMontage FP_Salute { get { return this[nameof(FP_Salute)].As<AnimMontage>(); } set { this["FP_Salute"] = value; } }
        public AnimMontage TP_Salute { get { return this[nameof(TP_Salute)].As<AnimMontage>(); } set { this["TP_Salute"] = value; } }
        public ItemLoadoutAnimations LoadoutAnimations { get { return this[nameof(LoadoutAnimations)].As<ItemLoadoutAnimations>(); } set { this["LoadoutAnimations"] = value; } }
        public float CameraOffset { get { return this[nameof(CameraOffset)].GetValue<float>(); } set { this[nameof(CameraOffset)].SetValue<float>(value); } }
        public ItemCharacterAnimationSet ParentSet { get { return this[nameof(ParentSet)].As<ItemCharacterAnimationSet>(); } set { this["ParentSet"] = value; } }
    }
    public class ItemData : PrimaryDataAsset
    {
        public ItemData(nint addr) : base(addr) { }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public Texture2D IconLine { get { return this[nameof(IconLine)].As<Texture2D>(); } set { this["IconLine"] = value; } }
        public Texture2D IconBG { get { return this[nameof(IconBG)].As<Texture2D>(); } set { this["IconBG"] = value; } }
        public Texture2D IconDetailed { get { return this[nameof(IconDetailed)].As<Texture2D>(); } set { this["IconDetailed"] = value; } }
        public Object PreviewImage { get { return this[nameof(PreviewImage)]; } set { this[nameof(PreviewImage)] = value; } }
        public Object PreviewActor { get { return this[nameof(PreviewActor)]; } set { this[nameof(PreviewActor)] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int CreditCost { get { return this[nameof(CreditCost)].GetValue<int>(); } set { this[nameof(CreditCost)].SetValue<int>(value); } }
        public Object ResourceCost { get { return this[nameof(ResourceCost)]; } set { this[nameof(ResourceCost)] = value; } }
        public int RequiredCharacterLevel { get { return this[nameof(RequiredCharacterLevel)].GetValue<int>(); } set { this[nameof(RequiredCharacterLevel)].SetValue<int>(value); } }
        public Texture2D GetPreviewImage(Object WorldContext) { return Invoke<Texture2D>(nameof(GetPreviewImage), WorldContext); }
        public Object GetPreviewActorClass() { return Invoke<Object>(nameof(GetPreviewActorClass)); }
        public UArray<CraftingCost> GetCraftingCost() { return Invoke<UArray<CraftingCost>>(nameof(GetCraftingCost)); }
    }
    public class ItemDispenser : Actor
    {
        public ItemDispenser(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public InstantUsable Usable { get { return this[nameof(Usable)].As<InstantUsable>(); } set { this["Usable"] = value; } }
        public Object OnItemSpawned { get { return this[nameof(OnItemSpawned)]; } set { this[nameof(OnItemSpawned)] = value; } }
        public Object OnItemTaken { get { return this[nameof(OnItemTaken)]; } set { this[nameof(OnItemTaken)] = value; } }
        public UArray<Actor> ItemHistory { get { return new UArray<Actor>(this[nameof(ItemHistory)].Address); } }
        public Object itemClass { get { return this[nameof(itemClass)]; } set { this[nameof(itemClass)] = value; } }
        public Actor spawnedItem { get { return this[nameof(spawnedItem)].As<Actor>(); } set { this["spawnedItem"] = value; } }
        public float ItemSpawnTime { get { return this[nameof(ItemSpawnTime)].GetValue<float>(); } set { this[nameof(ItemSpawnTime)].SetValue<float>(value); } }
        public float InitialItemSpawnTime { get { return this[nameof(InitialItemSpawnTime)].GetValue<float>(); } set { this[nameof(InitialItemSpawnTime)].SetValue<float>(value); } }
        public bool IsOpen { get { return this[nameof(IsOpen)].Flag; } set { this[nameof(IsOpen)].Flag = value; } }
        public bool KillItemsOnDestuction { get { return this[nameof(KillItemsOnDestuction)].Flag; } set { this[nameof(KillItemsOnDestuction)].Flag = value; } }
        public void SpawnItem() { Invoke(nameof(SpawnItem)); }
        public void Open() { Invoke(nameof(Open)); }
        public void OnUsed(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnUsed), User, Key); }
        public void OnRep_SpawnedItem(Actor oldItem) { Invoke(nameof(OnRep_SpawnedItem), oldItem); }
        public void OnRep_IsOpen() { Invoke(nameof(OnRep_IsOpen)); }
        public void OnPickedUpItem(Actor Item) { Invoke(nameof(OnPickedUpItem), Item); }
        public void OnOpenChanged(bool Open) { Invoke(nameof(OnOpenChanged), Open); }
        public void OnItemSpawnedEvent(Actor Item) { Invoke(nameof(OnItemSpawnedEvent), Item); }
        public bool HasItem() { return Invoke<bool>(nameof(HasItem)); }
        public Actor GetItem() { return Invoke<Actor>(nameof(GetItem)); }
        public void Close() { Invoke(nameof(Close)); }
    }
    public class WeaponMaintenanceSettings : DataAsset
    {
        public WeaponMaintenanceSettings(nint addr) : base(addr) { }
        public UArray<int> LevelXPRequirements { get { return new UArray<int>(this[nameof(LevelXPRequirements)].Address); } }
        public UArray<ItemSkin> LevelRewards { get { return new UArray<ItemSkin>(this[nameof(LevelRewards)].Address); } }
        public SpaceRigNotification WeaponUnlockedNotification { get { return this[nameof(WeaponUnlockedNotification)].As<SpaceRigNotification>(); } set { this["WeaponUnlockedNotification"] = value; } }
    }
    public class WeaponMaintenanceAquisition : ItemAquisitionBase
    {
        public WeaponMaintenanceAquisition(nint addr) : base(addr) { }
    }
    public class WeaponMaintenanceItemWidget : UserWidget
    {
        public WeaponMaintenanceItemWidget(nint addr) : base(addr) { }
        public ItemID WeaponID { get { return this[nameof(WeaponID)].As<ItemID>(); } set { this["WeaponID"] = value; } }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
        public ItemSkin Reward { get { return this[nameof(Reward)].As<ItemSkin>(); } set { this["Reward"] = value; } }
        public ItemData WeaponData { get { return this[nameof(WeaponData)].As<ItemData>(); } set { this["WeaponData"] = value; } }
        public EWeaponMaintenanceState MaintenanceState { get { return (EWeaponMaintenanceState)this[nameof(MaintenanceState)].GetValue<int>(); } set { this[nameof(MaintenanceState)].SetValue<int>((int)value); } }
        public int MaintenanceLevel { get { return this[nameof(MaintenanceLevel)].GetValue<int>(); } set { this[nameof(MaintenanceLevel)].SetValue<int>(value); } }
        public int MaintenanceXP { get { return this[nameof(MaintenanceXP)].GetValue<int>(); } set { this[nameof(MaintenanceXP)].SetValue<int>(value); } }
        public int MaintenanceTargetXP { get { return this[nameof(MaintenanceTargetXP)].GetValue<int>(); } set { this[nameof(MaintenanceTargetXP)].SetValue<int>(value); } }
        public void SetWeapon(Object WorldContext, ItemID InWeaponID, PlayerCharacterID InCharacterID) { Invoke(nameof(SetWeapon), WorldContext, InWeaponID, InCharacterID); }
        public void RefreshFromSavegame(Object WorldContext) { Invoke(nameof(RefreshFromSavegame), WorldContext); }
        public void Receive_RefreshedFromSavegame() { Invoke(nameof(Receive_RefreshedFromSavegame)); }
        public void Receive_CanLevelUp() { Invoke(nameof(Receive_CanLevelUp)); }
        public bool LevelUp(Object WorldContext) { return Invoke<bool>(nameof(LevelUp), WorldContext); }
        public int GetMaxLevel() { return Invoke<int>(nameof(GetMaxLevel)); }
    }
    public class WeaponMaintenanceTabWidget : WindowWidget
    {
        public WeaponMaintenanceTabWidget(nint addr) : base(addr) { }
        public bool HasNewNotifications(Object WorldContext) { return Invoke<bool>(nameof(HasNewNotifications), WorldContext); }
    }
    public class ItemMarker : Actor
    {
        public ItemMarker(nint addr) : base(addr) { }
        public bool bMarkerValid { get { return this[nameof(bMarkerValid)].Flag; } set { this[nameof(bMarkerValid)].Flag = value; } }
        public bool bMarkerVisible { get { return this[nameof(bMarkerVisible)].Flag; } set { this[nameof(bMarkerVisible)].Flag = value; } }
        public void OnMarkerVisibilityChanged(bool Visible) { Invoke(nameof(OnMarkerVisibilityChanged), Visible); }
        public void OnMarkerValidChanged(bool Valid) { Invoke(nameof(OnMarkerValidChanged), Valid); }
    }
    public class ItemPlacerAggregator : ItemAggregator
    {
        public ItemPlacerAggregator(nint addr) : base(addr) { }
        public UArray<Object> IgnoreActors { get { return new UArray<Object>(this[nameof(IgnoreActors)].Address); } }
        public Object OnMarkerSpawned { get { return this[nameof(OnMarkerSpawned)]; } set { this[nameof(OnMarkerSpawned)] = value; } }
        public Object OnPlacementChanged { get { return this[nameof(OnPlacementChanged)]; } set { this[nameof(OnPlacementChanged)] = value; } }
        public float PlacementDistance { get { return this[nameof(PlacementDistance)].GetValue<float>(); } set { this[nameof(PlacementDistance)].SetValue<float>(value); } }
        public float MaxOffsetZ { get { return this[nameof(MaxOffsetZ)].GetValue<float>(); } set { this[nameof(MaxOffsetZ)].SetValue<float>(value); } }
        public float MinOffsetZ { get { return this[nameof(MinOffsetZ)].GetValue<float>(); } set { this[nameof(MinOffsetZ)].SetValue<float>(value); } }
        public float ItemHeight { get { return this[nameof(ItemHeight)].GetValue<float>(); } set { this[nameof(ItemHeight)].SetValue<float>(value); } }
        public DialogDataAsset ShoutOnPlaced { get { return this[nameof(ShoutOnPlaced)].As<DialogDataAsset>(); } set { this["ShoutOnPlaced"] = value; } }
        public Object MarkerType { get { return this[nameof(MarkerType)]; } set { this[nameof(MarkerType)] = value; } }
        public bool CanOnlyPlaceOnTerrain { get { return this[nameof(CanOnlyPlaceOnTerrain)].Flag; } set { this[nameof(CanOnlyPlaceOnTerrain)].Flag = value; } }
        public GameplayTagQuery ExcludeTags { get { return this[nameof(ExcludeTags)].As<GameplayTagQuery>(); } set { this["ExcludeTags"] = value; } }
        public GameplayTagQuery IncludeTags { get { return this[nameof(IncludeTags)].As<GameplayTagQuery>(); } set { this["IncludeTags"] = value; } }
        public UArray<Object> InvalidAroundActors { get { return new UArray<Object>(this[nameof(InvalidAroundActors)].Address); } }
        public UArray<TerrainMaterial> InvalidMaterials { get { return new UArray<TerrainMaterial>(this[nameof(InvalidMaterials)].Address); } }
        public float InvalidAroundSize { get { return this[nameof(InvalidAroundSize)].GetValue<float>(); } set { this[nameof(InvalidAroundSize)].SetValue<float>(value); } }
        public ItemMarker PlacementMarker { get { return this[nameof(PlacementMarker)].As<ItemMarker>(); } set { this["PlacementMarker"] = value; } }
        public Item Item { get { return this[nameof(Item)].As<Item>(); } set { this["Item"] = value; } }
        public bool bIsPlacementActive { get { return this[nameof(bIsPlacementActive)].Flag; } set { this[nameof(bIsPlacementActive)].Flag = value; } }
        public bool bIsMarkerHidden { get { return this[nameof(bIsMarkerHidden)].Flag; } set { this[nameof(bIsMarkerHidden)].Flag = value; } }
        public bool bIsMarkerValid { get { return this[nameof(bIsMarkerValid)].Flag; } set { this[nameof(bIsMarkerValid)].Flag = value; } }
        public bool bCanPlaceMarker { get { return this[nameof(bCanPlaceMarker)].Flag; } set { this[nameof(bCanPlaceMarker)].Flag = value; } }
        public Transform LastPlacement { get { return this[nameof(LastPlacement)].As<Transform>(); } set { this["LastPlacement"] = value; } }
        public HitResult LastHit { get { return this[nameof(LastHit)].As<HitResult>(); } set { this["LastHit"] = value; } }
        public void ToggleValid(bool Valid) { Invoke(nameof(ToggleValid), Valid); }
        public void TogglePlacement(bool Inactive) { Invoke(nameof(TogglePlacement), Inactive); }
        public void ToggleMarkerHidden(bool InHidden) { Invoke(nameof(ToggleMarkerHidden), InHidden); }
        public void PlacementUpdatedDelegate__DelegateSignature(bool InPlacementValid, Transform InPlacement) { Invoke(nameof(PlacementUpdatedDelegate__DelegateSignature), InPlacementValid, InPlacement); }
        public void MarkerDelegate__DelegateSignature(ItemMarker Marker) { Invoke(nameof(MarkerDelegate__DelegateSignature), Marker); }
        public void GetPlacementEx(Transform Placement, bool OutValidLocation, bool OutValidMarker) { Invoke(nameof(GetPlacementEx), Placement, OutValidLocation, OutValidMarker); }
        public bool GetPlacement(Transform Placement) { return Invoke<bool>(nameof(GetPlacement), Placement); }
        public HitResult GetLastHit() { return Invoke<HitResult>(nameof(GetLastHit)); }
        public void ClearIgnoredActors() { Invoke(nameof(ClearIgnoredActors)); }
        public void AddIgnoredActor(Actor InActor) { Invoke(nameof(AddIgnoredActor), InActor); }
    }
    public class ItemPreviewActor : Actor
    {
        public ItemPreviewActor(nint addr) : base(addr) { }
        public ItemSkin CurrentSkinColor { get { return this[nameof(CurrentSkinColor)].As<ItemSkin>(); } set { this["CurrentSkinColor"] = value; } }
        public ItemSkin CurrentSkinMesh { get { return this[nameof(CurrentSkinMesh)].As<ItemSkin>(); } set { this["CurrentSkinMesh"] = value; } }
        public Object itemClass { get { return this[nameof(itemClass)]; } set { this[nameof(itemClass)] = value; } }
        public IconGenerationCameraKey CameraKey_Normal { get { return this[nameof(CameraKey_Normal)].As<IconGenerationCameraKey>(); } set { this["CameraKey_Normal"] = value; } }
        public IconGenerationCameraKey CameraKey_CloseUp { get { return this[nameof(CameraKey_CloseUp)].As<IconGenerationCameraKey>(); } set { this["CameraKey_CloseUp"] = value; } }
        public void SkinItem(SkinEffect Skin) { Invoke(nameof(SkinItem), Skin); }
        public void SetItemClass(Object itemClass) { Invoke(nameof(SetItemClass), itemClass); }
        public void OnSkinPreviewChanged(ItemSkin PreviewSkin) { Invoke(nameof(OnSkinPreviewChanged), PreviewSkin); }
        public void OnSkinItem(SkinEffect Skin) { Invoke(nameof(OnSkinItem), Skin); }
        public void OnSkinChanged() { Invoke(nameof(OnSkinChanged)); }
        public void ChangeSkin(ItemSkin skinMesh, ItemSkin skinColor, bool isPreview) { Invoke(nameof(ChangeSkin), skinMesh, skinColor, isPreview); }
    }
    public class ItemRefundList : DataAsset
    {
        public ItemRefundList(nint addr) : base(addr) { }
        public bool ResetListOnSave { get { return this[nameof(ResetListOnSave)].Flag; } set { this[nameof(ResetListOnSave)].Flag = value; } }
        public UArray<Object> Items { get { return new UArray<Object>(this[nameof(Items)].Address); } }
        public Object ItemsToRefund { get { return this[nameof(ItemsToRefund)]; } set { this[nameof(ItemsToRefund)] = value; } }
    }
    public class ItemsBarIcon : UserWidget
    {
        public ItemsBarIcon(nint addr) : base(addr) { }
        public bool Selected { get { return this[nameof(Selected)].Flag; } set { this[nameof(Selected)].Flag = value; } }
        public ItemsBar ItemBar { get { return this[nameof(ItemBar)].As<ItemsBar>(); } set { this["ItemBar"] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public Item Item { get { return this[nameof(Item)].As<Item>(); } set { this["Item"] = value; } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public void OnUnselect() { Invoke(nameof(OnUnselect)); }
        public void OnSelect() { Invoke(nameof(OnSelect)); }
        public void OnInit() { Invoke(nameof(OnInit)); }
    }
    public class ItemsBar : FSDUserWidget
    {
        public ItemsBar(nint addr) : base(addr) { }
        public Object DefaultItemWidget { get { return this[nameof(DefaultItemWidget)]; } set { this[nameof(DefaultItemWidget)] = value; } }
        public bool bShowSupplyItem { get { return this[nameof(bShowSupplyItem)].Flag; } set { this[nameof(bShowSupplyItem)].Flag = value; } }
        public UArray<ItemsBarIcon> ItemIcons { get { return new UArray<ItemsBarIcon>(this[nameof(ItemIcons)].Address); } }
        public ItemsBarIcon SupplyIcon { get { return this[nameof(SupplyIcon)].As<ItemsBarIcon>(); } set { this["SupplyIcon"] = value; } }
        public ItemsBarIcon SelectedIcon { get { return this[nameof(SelectedIcon)].As<ItemsBarIcon>(); } set { this["SelectedIcon"] = value; } }
        public void OnSupplyItemUnequipped(ItemsBarIcon ItemIcon) { Invoke(nameof(OnSupplyItemUnequipped), ItemIcon); }
        public void OnSupplyItemEquipped(ItemsBarIcon ItemIcon) { Invoke(nameof(OnSupplyItemEquipped), ItemIcon); }
        public void OnSupplyItemAdded(ItemsBarIcon ItemIcon) { Invoke(nameof(OnSupplyItemAdded), ItemIcon); }
        public void OnItemUnequipped(ItemsBarIcon ItemIcon) { Invoke(nameof(OnItemUnequipped), ItemIcon); }
        public void OnItemsLoaded() { Invoke(nameof(OnItemsLoaded)); }
        public void OnItemEquipped(ItemsBarIcon ItemIcon) { Invoke(nameof(OnItemEquipped), ItemIcon); }
        public void OnItemClicked() { Invoke(nameof(OnItemClicked)); }
        public void OnItemAdded(ItemsBarIcon ItemIcon) { Invoke(nameof(OnItemAdded), ItemIcon); }
        public void OnClear() { Invoke(nameof(OnClear)); }
        public void ItemEquipped(Item NewItem) { Invoke(nameof(ItemEquipped), NewItem); }
        public void ItemClicked(Item NewItem) { Invoke(nameof(ItemClicked), NewItem); }
    }
    public class ItemSettings : DataAsset
    {
        public ItemSettings(nint addr) : base(addr) { }
        public UArray<ItemRefundList> ItemRefunds { get { return new UArray<ItemRefundList>(this[nameof(ItemRefunds)].Address); } }
        public Object ItemData { get { return this[nameof(ItemData)]; } set { this[nameof(ItemData)] = value; } }
    }
    public class ItemSkin : SavablePrimaryDataAsset
    {
        public ItemSkin(nint addr) : base(addr) { }
        public Object OnSkinUnlocked { get { return this[nameof(OnSkinUnlocked)]; } set { this[nameof(OnSkinUnlocked)] = value; } }
        public Object OnSkinEquipped { get { return this[nameof(OnSkinEquipped)]; } set { this[nameof(OnSkinEquipped)] = value; } }
        public Object OnSkinUnequipped { get { return this[nameof(OnSkinUnequipped)]; } set { this[nameof(OnSkinUnequipped)] = value; } }
        public ItemAquisitionBase Aquisition { get { return this[nameof(Aquisition)].As<ItemAquisitionBase>(); } set { this["Aquisition"] = value; } }
        public Object SkinName { get { return this[nameof(SkinName)]; } set { this[nameof(SkinName)] = value; } }
        public ItemSkinSet SkinSet { get { return this[nameof(SkinSet)].As<ItemSkinSet>(); } set { this["SkinSet"] = value; } }
        public DynamicIcon DynamicIcon { get { return this[nameof(DynamicIcon)].As<DynamicIcon>(); } set { this["DynamicIcon"] = value; } }
        public SkinEffect SkinEffect { get { return this[nameof(SkinEffect)].As<SkinEffect>(); } set { this["SkinEffect"] = value; } }
        public ItemID OwningItem { get { return this[nameof(OwningItem)].As<ItemID>(); } set { this["OwningItem"] = value; } }
        public PlayerCharacterID OwningCharacter { get { return this[nameof(OwningCharacter)].As<PlayerCharacterID>(); } set { this["OwningCharacter"] = value; } }
        public bool Unlock(Object WorldContext, ItemID ItemID, bool broadcast) { return Invoke<bool>(nameof(Unlock), WorldContext, ItemID, broadcast); }
        public void Receive_SkinItem(Object Skinnable) { Invoke(nameof(Receive_SkinItem), Skinnable); }
        public void Lock(Object WorldContext, ItemID ItemID) { Invoke(nameof(Lock), WorldContext, ItemID); }
        public void ItemSkinSignature__DelegateSignature(ItemSkin Skin) { Invoke(nameof(ItemSkinSignature__DelegateSignature), Skin); }
        public void ItemSkinEquipSignature__DelegateSignature(ItemSkin Skin) { Invoke(nameof(ItemSkinEquipSignature__DelegateSignature), Skin); }
        public bool IsUnlockedFromStart() { return Invoke<bool>(nameof(IsUnlockedFromStart)); }
        public bool IsLocked(Object WorldContext, ItemID skinnableID) { return Invoke<bool>(nameof(IsLocked), WorldContext, skinnableID); }
        public bool IsEquippedOnItem(ItemID ItemID, FSDPlayerState PlayerState) { return Invoke<bool>(nameof(IsEquippedOnItem), ItemID, PlayerState); }
        public EItemSkinType GetSkinType() { return Invoke<EItemSkinType>(nameof(GetSkinType)); }
        public Object GetSkinName() { return Invoke<Object>(nameof(GetSkinName)); }
        public ItemID GetOwningItem() { return Invoke<ItemID>(nameof(GetOwningItem)); }
        public PlayerCharacterID GetOwningCharacter() { return Invoke<PlayerCharacterID>(nameof(GetOwningCharacter)); }
        public MaterialInstanceDynamic CreateIcon(Object Owner) { return Invoke<MaterialInstanceDynamic>(nameof(CreateIcon), Owner); }
    }
    public class ItemSkinSettings : DataAsset
    {
        public ItemSkinSettings(nint addr) : base(addr) { }
        public ItemSkinSet StockSet { get { return this[nameof(StockSet)].As<ItemSkinSet>(); } set { this["StockSet"] = value; } }
        public UArray<ItemSkin> LoadedSkins { get { return new UArray<ItemSkin>(this[nameof(LoadedSkins)].Address); } }
        public UArray<ItemSkin> FindableSkins { get { return new UArray<ItemSkin>(this[nameof(FindableSkins)].Address); } }
    }
    public class ItemSkinFunctionLibrary : BlueprintFunctionLibrary
    {
        public ItemSkinFunctionLibrary(nint addr) : base(addr) { }
    }
    public class ItemSkinSet : DataAsset
    {
        public ItemSkinSet(nint addr) : base(addr) { }
        public bool ColorIsLockedToSet { get { return this[nameof(ColorIsLockedToSet)].Flag; } set { this[nameof(ColorIsLockedToSet)].Flag = value; } }
        public Object SkinName { get { return this[nameof(SkinName)]; } set { this[nameof(SkinName)] = value; } }
        public DynamicIcon PaintJobDynamicIcon { get { return this[nameof(PaintJobDynamicIcon)].As<DynamicIcon>(); } set { this["PaintJobDynamicIcon"] = value; } }
        public DynamicIcon FrameworkDynamicIcon { get { return this[nameof(FrameworkDynamicIcon)].As<DynamicIcon>(); } set { this["FrameworkDynamicIcon"] = value; } }
    }
    public class ItemUpgrade : SavableDataAsset
    {
        public ItemUpgrade(nint addr) : base(addr) { }
        public Object OnCrafted { get { return this[nameof(OnCrafted)]; } set { this[nameof(OnCrafted)] = value; } }
        public Object OnEquipped { get { return this[nameof(OnEquipped)]; } set { this[nameof(OnEquipped)] = value; } }
        public Object OnUnEquipped { get { return this[nameof(OnUnEquipped)]; } set { this[nameof(OnUnEquipped)] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int Cost { get { return this[nameof(Cost)].GetValue<int>(); } set { this[nameof(Cost)].SetValue<int>(value); } }
        public bool UseOldCost { get { return this[nameof(UseOldCost)].Flag; } set { this[nameof(UseOldCost)].Flag = value; } }
        public EUpgradeTiers UpgradeTier { get { return (EUpgradeTiers)this[nameof(UpgradeTier)].GetValue<int>(); } set { this[nameof(UpgradeTier)].SetValue<int>((int)value); } }
        public EUpgradeClass upgradeClass { get { return (EUpgradeClass)this[nameof(upgradeClass)].GetValue<int>(); } set { this[nameof(upgradeClass)].SetValue<int>((int)value); } }
        public ItemUpgradeCategory Category { get { return this[nameof(Category)].As<ItemUpgradeCategory>(); } set { this["Category"] = value; } }
        public Object UpgradeCraftingCost { get { return this[nameof(UpgradeCraftingCost)]; } set { this[nameof(UpgradeCraftingCost)] = value; } }
        public UArray<ResourceData> ResourceCost { get { return new UArray<ResourceData>(this[nameof(ResourceCost)].Address); } }
        public UArray<ItemUpgradeElement> Elements { get { return new UArray<ItemUpgradeElement>(this[nameof(Elements)].Address); } }
        public UArray<ItemUpgradeStatText> StatTexts { get { return new UArray<ItemUpgradeStatText>(this[nameof(StatTexts)].Address); } }
        public void UnequipUpgrade(Object itemClass, FSDPlayerState PlayerState) { Invoke(nameof(UnequipUpgrade), itemClass, PlayerState); }
        public void ItemUpgradeSignature__DelegateSignature(ItemUpgrade Upgrade) { Invoke(nameof(ItemUpgradeSignature__DelegateSignature), Upgrade); }
        public UArray<ItemUpgradeStatText> GetUpgradeStatTexts() { return Invoke<UArray<ItemUpgradeStatText>>(nameof(GetUpgradeStatTexts)); }
        public Object GetUpgradeName(ItemUpgrade Upgrade) { return Invoke<Object>(nameof(GetUpgradeName), Upgrade); }
        public UArray<CraftingCost> GetUpgradeCost() { return Invoke<UArray<CraftingCost>>(nameof(GetUpgradeCost)); }
        public Object GetSourceName() { return Invoke<Object>(nameof(GetSourceName)); }
        public UpgradeValues GetGenericUpgradedValue(Object Item, FSDPlayerState Player, ItemUpgrade upgradeClass) { return Invoke<UpgradeValues>(nameof(GetGenericUpgradedValue), Item, Player, upgradeClass); }
        public float GetCreditsCost() { return Invoke<float>(nameof(GetCreditsCost)); }
        public void EquipUpgrade(Object itemClass, FSDPlayerState PlayerState) { Invoke(nameof(EquipUpgrade), itemClass, PlayerState); }
    }
    public class CombinedUpgrade : ItemUpgrade
    {
        public CombinedUpgrade(nint addr) : base(addr) { }
        public UArray<Object> CombinedUpgrades { get { return new UArray<Object>(this[nameof(CombinedUpgrades)].Address); } }
        public UArray<ItemUpgrade> LoadedUpgrades { get { return new UArray<ItemUpgrade>(this[nameof(LoadedUpgrades)].Address); } }
        public UArray<ItemUpgrade> GetUpgrades() { return Invoke<UArray<ItemUpgrade>>(nameof(GetUpgrades)); }
    }
    public class OverclockUpgrade : CombinedUpgrade
    {
        public OverclockUpgrade(nint addr) : base(addr) { }
        public SchematicCategory SchematicCategory { get { return this[nameof(SchematicCategory)].As<SchematicCategory>(); } set { this["SchematicCategory"] = value; } }
    }
    public class ItemUpgradeCategory : DataAsset
    {
        public ItemUpgradeCategory(nint addr) : base(addr) { }
        public Object CategoryName { get { return this[nameof(CategoryName)]; } set { this[nameof(CategoryName)] = value; } }
        public Object CategoryDescription { get { return this[nameof(CategoryDescription)]; } set { this[nameof(CategoryDescription)] = value; } }
        public Texture2D CategoryIcon { get { return this[nameof(CategoryIcon)].As<Texture2D>(); } set { this["CategoryIcon"] = value; } }
        public Color CategoryTint { get { return this[nameof(CategoryTint)].As<Color>(); } set { this["CategoryTint"] = value; } }
    }
    public class ItemUpgradeCondition : Object
    {
        public ItemUpgradeCondition(nint addr) : base(addr) { }
    }
    public class PlayerShieldsItemUpgradeCondition : ItemUpgradeCondition
    {
        public PlayerShieldsItemUpgradeCondition(nint addr) : base(addr) { }
        public FloatInterval ShieldPercentageRequired { get { return this[nameof(ShieldPercentageRequired)].As<FloatInterval>(); } set { this["ShieldPercentageRequired"] = value; } }
    }
    public class ProjectileClassFilterItemUpgradeCondition : ItemUpgradeCondition
    {
        public ProjectileClassFilterItemUpgradeCondition(nint addr) : base(addr) { }
        public UArray<Object> ProjectileClasses { get { return new UArray<Object>(this[nameof(ProjectileClasses)].Address); } }
    }
    public class ItemUpgradeElement : DataAsset
    {
        public ItemUpgradeElement(nint addr) : base(addr) { }
        public bool ElementOf(ItemUpgrade upg) { return Invoke<bool>(nameof(ElementOf), upg); }
    }
    public class MuzzleEffectUpgradeElement : ItemUpgradeElement
    {
        public MuzzleEffectUpgradeElement(nint addr) : base(addr) { }
        public Object FPMuzzleFlash { get { return this[nameof(FPMuzzleFlash)]; } set { this[nameof(FPMuzzleFlash)] = value; } }
        public Object TPMuzzleFlash { get { return this[nameof(TPMuzzleFlash)]; } set { this[nameof(TPMuzzleFlash)] = value; } }
    }
    public class FireWeaponSoundUpgradeElement : ItemUpgradeElement
    {
        public FireWeaponSoundUpgradeElement(nint addr) : base(addr) { }
        public Object FireSound { get { return this[nameof(FireSound)]; } set { this[nameof(FireSound)] = value; } }
        public bool OverrideTailSound { get { return this[nameof(OverrideTailSound)].Flag; } set { this[nameof(OverrideTailSound)].Flag = value; } }
        public Object TailSound { get { return this[nameof(TailSound)]; } set { this[nameof(TailSound)] = value; } }
    }
    public class TracerUpgradeElement : ItemUpgradeElement
    {
        public TracerUpgradeElement(nint addr) : base(addr) { }
        public Object Tracer { get { return this[nameof(Tracer)]; } set { this[nameof(Tracer)] = value; } }
    }
    public class HitScanImpactUpgradeElement : ItemUpgradeElement
    {
        public HitScanImpactUpgradeElement(nint addr) : base(addr) { }
        public Object ImpactParticle { get { return this[nameof(ImpactParticle)]; } set { this[nameof(ImpactParticle)] = value; } }
        public Object ImpactSound { get { return this[nameof(ImpactSound)]; } set { this[nameof(ImpactSound)] = value; } }
    }
    public class TrailUpgradeElement : ItemUpgradeElement
    {
        public TrailUpgradeElement(nint addr) : base(addr) { }
        public Object Trail { get { return this[nameof(Trail)]; } set { this[nameof(Trail)] = value; } }
    }
    public class ReplaceMaterialUpgradeElement : ItemUpgradeElement
    {
        public ReplaceMaterialUpgradeElement(nint addr) : base(addr) { }
        public Object TargetMaterial { get { return this[nameof(TargetMaterial)]; } set { this[nameof(TargetMaterial)] = value; } }
        public Object ReplaceWithMaterial { get { return this[nameof(ReplaceWithMaterial)]; } set { this[nameof(ReplaceWithMaterial)] = value; } }
    }
    public class ReplaceSkeletonMeshUpgradeElement : ItemUpgradeElement
    {
        public ReplaceSkeletonMeshUpgradeElement(nint addr) : base(addr) { }
        public Object TargetMesh { get { return this[nameof(TargetMesh)]; } set { this[nameof(TargetMesh)] = value; } }
        public Object ReplaceWithMesh { get { return this[nameof(ReplaceWithMesh)]; } set { this[nameof(ReplaceWithMesh)] = value; } }
        public Object ReplaceWithAnimInstance { get { return this[nameof(ReplaceWithAnimInstance)]; } set { this[nameof(ReplaceWithAnimInstance)] = value; } }
    }
    public class ProjectileUpgradeElement : ItemUpgradeElement
    {
        public ProjectileUpgradeElement(nint addr) : base(addr) { }
        public Object NewTrailParticle { get { return this[nameof(NewTrailParticle)]; } set { this[nameof(NewTrailParticle)] = value; } }
    }
    public class ItemUpgradePreviewComponent : ActorComponent
    {
        public ItemUpgradePreviewComponent(nint addr) : base(addr) { }
        public Object OnPreviewUpgradeChanged { get { return this[nameof(OnPreviewUpgradeChanged)]; } set { this[nameof(OnPreviewUpgradeChanged)] = value; } }
        public ItemUpgrade PreviewUpgrade { get { return this[nameof(PreviewUpgrade)].As<ItemUpgrade>(); } set { this["PreviewUpgrade"] = value; } }
        public void SetPreviewUpgrade(ItemUpgrade InUpgrade) { Invoke(nameof(SetPreviewUpgrade), InUpgrade); }
        public void RefreshPreviewUpgrade() { Invoke(nameof(RefreshPreviewUpgrade)); }
        public void ItemUpgradeDelegate__DelegateSignature(ItemUpgrade PreviewUpgrade) { Invoke(nameof(ItemUpgradeDelegate__DelegateSignature), PreviewUpgrade); }
    }
    public class StandardItemUpgrade : ItemUpgrade
    {
        public StandardItemUpgrade(nint addr) : base(addr) { }
        public float amount { get { return this[nameof(amount)].GetValue<float>(); } set { this[nameof(amount)].SetValue<float>(value); } }
        public bool IsPercentage { get { return this[nameof(IsPercentage)].Flag; } set { this[nameof(IsPercentage)].Flag = value; } }
    }
    public class AmmoDrivenWeaponUpgrade : StandardItemUpgrade
    {
        public AmmoDrivenWeaponUpgrade(nint addr) : base(addr) { }
        public EAmmoDrivenWeapnUpgradeType upgradeType { get { return (EAmmoDrivenWeapnUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EAmmoDrivenWeapnUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class WeaponHitCounterUpgrade : ItemUpgrade
    {
        public WeaponHitCounterUpgrade(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, Object ComponentClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, ComponentClass); }
    }
    public class BeltDrivenWeaponUpgrade : StandardItemUpgrade
    {
        public BeltDrivenWeaponUpgrade(nint addr) : base(addr) { }
        public EBeltDrivenWeaponUpgrade upgradeType { get { return (EBeltDrivenWeaponUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EBeltDrivenWeaponUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class GatlingGunUpgrade : StandardItemUpgrade
    {
        public GatlingGunUpgrade(nint addr) : base(addr) { }
        public EGatlingGunUpgrade upgradeType { get { return (EGatlingGunUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EGatlingGunUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class AssaultRifleUpgrade : StandardItemUpgrade
    {
        public AssaultRifleUpgrade(nint addr) : base(addr) { }
        public EAssaultRifleUpgrade upgradeType { get { return (EAssaultRifleUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EAssaultRifleUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class BoltActionRifleUpgrade : StandardItemUpgrade
    {
        public BoltActionRifleUpgrade(nint addr) : base(addr) { }
        public EBoltActionRifleUpgrades upgradeType { get { return (EBoltActionRifleUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EBoltActionRifleUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class DualMachinePistolsUpgrade : StandardItemUpgrade
    {
        public DualMachinePistolsUpgrade(nint addr) : base(addr) { }
        public EDualMachinePistolsUpgrades upgradeType { get { return (EDualMachinePistolsUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EDualMachinePistolsUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class ChargedWeaponUpgrade : StandardItemUpgrade
    {
        public ChargedWeaponUpgrade(nint addr) : base(addr) { }
        public EChargedWeaponUpgrades upgradeType { get { return (EChargedWeaponUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EChargedWeaponUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class CoilgunUpgrade : StandardItemUpgrade
    {
        public CoilgunUpgrade(nint addr) : base(addr) { }
        public ECoilgunUpgrades upgradeType { get { return (ECoilgunUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ECoilgunUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class AutoCannonUpgrade : StandardItemUpgrade
    {
        public AutoCannonUpgrade(nint addr) : base(addr) { }
        public EAutoCannonUpgrades upgradeType { get { return (EAutoCannonUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EAutoCannonUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class SawedOffShotgunUpgrade : StandardItemUpgrade
    {
        public SawedOffShotgunUpgrade(nint addr) : base(addr) { }
        public ESawedOffShotgunUpgrades upgradeType { get { return (ESawedOffShotgunUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ESawedOffShotgunUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class BurstWeaponUpgrade : StandardItemUpgrade
    {
        public BurstWeaponUpgrade(nint addr) : base(addr) { }
        public EBurstWeaponUpgrades upgradeType { get { return (EBurstWeaponUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EBurstWeaponUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class AutoShotgunUpgrade : StandardItemUpgrade
    {
        public AutoShotgunUpgrade(nint addr) : base(addr) { }
        public EAutoShotgunUpgrades upgradeType { get { return (EAutoShotgunUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EAutoShotgunUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class BasicPistolUpgrade : StandardItemUpgrade
    {
        public BasicPistolUpgrade(nint addr) : base(addr) { }
        public EBasicPistol upgradeType { get { return (EBasicPistol)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EBasicPistol upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class RevolverUpgrade : StandardItemUpgrade
    {
        public RevolverUpgrade(nint addr) : base(addr) { }
        public ERevolerUpgrades upgradeType { get { return (ERevolerUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ERevolerUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class CryoSprayUpgrade : StandardItemUpgrade
    {
        public CryoSprayUpgrade(nint addr) : base(addr) { }
        public ECryoSprayUpgrades upgradeType { get { return (ECryoSprayUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ECryoSprayUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class CryoSprayProjectileUpgrade : ItemUpgrade
    {
        public CryoSprayProjectileUpgrade(nint addr) : base(addr) { }
        public float MaxFireCost { get { return this[nameof(MaxFireCost)].GetValue<float>(); } set { this[nameof(MaxFireCost)].SetValue<float>(value); } }
        public float BaseArch { get { return this[nameof(BaseArch)].GetValue<float>(); } set { this[nameof(BaseArch)].SetValue<float>(value); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object ProjectileClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, ProjectileClass); }
    }
    public class PickaxeUpgrade : StandardItemUpgrade
    {
        public PickaxeUpgrade(nint addr) : base(addr) { }
        public EPickaxeUpgradeType upgradeType { get { return (EPickaxeUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EPickaxeUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class FlameThrowerUpgrade : StandardItemUpgrade
    {
        public FlameThrowerUpgrade(nint addr) : base(addr) { }
        public EFlameThrowerUpgradeType upgradeType { get { return (EFlameThrowerUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EFlameThrowerUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class StickyFlameStatusEffectUpgrade : ItemUpgrade
    {
        public StickyFlameStatusEffectUpgrade(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public Object ClassFilter { get { return this[nameof(ClassFilter)]; } set { this[nameof(ClassFilter)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object StatusEffect) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, StatusEffect); }
    }
    public class DoubleDrillUpgrade : StandardItemUpgrade
    {
        public DoubleDrillUpgrade(nint addr) : base(addr) { }
        public EDoubleDrillUpgradeType upgradeType { get { return (EDoubleDrillUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EDoubleDrillUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class InventoryItemUpgrade : StandardItemUpgrade
    {
        public InventoryItemUpgrade(nint addr) : base(addr) { }
        public EInventoryItemUpgradeType upgradeType { get { return (EInventoryItemUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EInventoryItemUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class CapacityUpgrade : StandardItemUpgrade
    {
        public CapacityUpgrade(nint addr) : base(addr) { }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, int componentIndex) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, componentIndex); }
    }
    public class CooldownUpgrade : StandardItemUpgrade
    {
        public CooldownUpgrade(nint addr) : base(addr) { }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player); }
    }
    public class MultiHitscanUpgrade : StandardItemUpgrade
    {
        public MultiHitscanUpgrade(nint addr) : base(addr) { }
        public EMultiHitscanUpgradeType upgradeType { get { return (EMultiHitscanUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EMultiHitscanUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class ReflectionHitscanUpgrade : StandardItemUpgrade
    {
        public ReflectionHitscanUpgrade(nint addr) : base(addr) { }
        public EReflectionHitscanUpgradeType upgradeType { get { return (EReflectionHitscanUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EReflectionHitscanUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class HitscanBaseUpgrade : StandardItemUpgrade
    {
        public HitscanBaseUpgrade(nint addr) : base(addr) { }
        public EHitScanBaseUpgradeType upgradeType { get { return (EHitScanBaseUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EHitScanBaseUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class DamageUpgrade : StandardItemUpgrade
    {
        public DamageUpgrade(nint addr) : base(addr) { }
        public EDamageUpgrade upgradeType { get { return (EDamageUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public EDamageComponentType DamageComponentType { get { return (EDamageComponentType)this[nameof(DamageComponentType)].GetValue<int>(); } set { this[nameof(DamageComponentType)].SetValue<int>((int)value); } }
        public Object RequiredClass { get { return this[nameof(RequiredClass)]; } set { this[nameof(RequiredClass)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, Object upgradedItem, FSDPlayerState Player, EDamageUpgrade upgradeType, EDamageComponentType DamageComponentType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, upgradedItem, Player, upgradeType, DamageComponentType); }
    }
    public class DamageBonusBaseUpgrade : ItemUpgrade
    {
        public DamageBonusBaseUpgrade(nint addr) : base(addr) { }
        public bool UseBaseDamage { get { return this[nameof(UseBaseDamage)].Flag; } set { this[nameof(UseBaseDamage)].Flag = value; } }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
    }
    public class FlatDamageUpgrade : ItemUpgrade
    {
        public FlatDamageUpgrade(nint addr) : base(addr) { }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public Object RequiredClass { get { return this[nameof(RequiredClass)]; } set { this[nameof(RequiredClass)] = value; } }
        public bool MergeWithOtherFlatDamageUpgrades { get { return this[nameof(MergeWithOtherFlatDamageUpgrades)].Flag; } set { this[nameof(MergeWithOtherFlatDamageUpgrades)].Flag = value; } }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, DamageClass DamageClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, DamageClass); }
    }
    public class RandomDamageUpgrade : DamageBonusBaseUpgrade
    {
        public RandomDamageUpgrade(nint addr) : base(addr) { }
        public RandRange DamageRange { get { return this[nameof(DamageRange)].As<RandRange>(); } set { this["DamageRange"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player); }
    }
    public class DamageConversionUpgrade : DamageBonusBaseUpgrade
    {
        public DamageConversionUpgrade(nint addr) : base(addr) { }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public float ConversionPercentage { get { return this[nameof(ConversionPercentage)].GetValue<float>(); } set { this[nameof(ConversionPercentage)].SetValue<float>(value); } }
        public bool DamageIsAdded { get { return this[nameof(DamageIsAdded)].Flag; } set { this[nameof(DamageIsAdded)].Flag = value; } }
        public Object RequiredClass { get { return this[nameof(RequiredClass)]; } set { this[nameof(RequiredClass)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, Object upgradedItem, FSDPlayerState Player, DamageClass DamageClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, upgradedItem, Player, DamageClass); }
    }
    public class GatlingHotShellsBonusUpgrade : ItemUpgrade
    {
        public GatlingHotShellsBonusUpgrade(nint addr) : base(addr) { }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public float ConversionPercentage { get { return this[nameof(ConversionPercentage)].GetValue<float>(); } set { this[nameof(ConversionPercentage)].SetValue<float>(value); } }
        public bool DamageIsAdded { get { return this[nameof(DamageIsAdded)].Flag; } set { this[nameof(DamageIsAdded)].Flag = value; } }
        public float TemperatureRequired { get { return this[nameof(TemperatureRequired)].GetValue<float>(); } set { this[nameof(TemperatureRequired)].SetValue<float>(value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, DamageClass DamageClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, DamageClass); }
    }
    public class TargetSpecificDamageBonusUpgrade : ItemUpgrade
    {
        public TargetSpecificDamageBonusUpgrade(nint addr) : base(addr) { }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public GameplayTagQuery tagQuery { get { return this[nameof(tagQuery)].As<GameplayTagQuery>(); } set { this["tagQuery"] = value; } }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object Key) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, Key); }
    }
    public class TargetStateDamageBonusUpgrade : ItemUpgrade
    {
        public TargetStateDamageBonusUpgrade(nint addr) : base(addr) { }
        public ETargetStateDamageBonusType TargetState { get { return (ETargetStateDamageBonusType)this[nameof(TargetState)].GetValue<int>(); } set { this[nameof(TargetState)].SetValue<int>((int)value); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ETargetStateDamageBonusType TargetState) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, TargetState); }
    }
    public class StatusDamageBonusUpgrade : ItemUpgrade
    {
        public StatusDamageBonusUpgrade(nint addr) : base(addr) { }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object StatusEffect) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, StatusEffect); }
    }
    public class StatusAndStateDamageBonusUpgrade : ItemUpgrade
    {
        public StatusAndStateDamageBonusUpgrade(nint addr) : base(addr) { }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
        public UArray<ETargetStateDamageBonusType> TargetStates { get { return new UArray<ETargetStateDamageBonusType>(this[nameof(TargetStates)].Address); } }
        public float Bonus { get { return this[nameof(Bonus)].GetValue<float>(); } set { this[nameof(Bonus)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
    }
    public class PushSatusEffectDamageBonusUpgrade : ItemUpgrade
    {
        public PushSatusEffectDamageBonusUpgrade(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
        public bool IgnoreArmorHit { get { return this[nameof(IgnoreArmorHit)].Flag; } set { this[nameof(IgnoreArmorHit)].Flag = value; } }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object StatusEffect) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, StatusEffect); }
    }
    public class PushDynamicStatusEffectDamageBonusUpgrade : ItemUpgrade
    {
        public PushDynamicStatusEffectDamageBonusUpgrade(nint addr) : base(addr) { }
        public Object Key { get { return this[nameof(Key)]; } set { this[nameof(Key)] = value; } }
        public StatusEffectItem StatusEffectItem { get { return this[nameof(StatusEffectItem)].As<StatusEffectItem>(); } set { this["StatusEffectItem"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object Key) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, Key); }
    }
    public class ModifyDynamicStatusEffectDamageBonusUpgrade : StandardItemUpgrade
    {
        public ModifyDynamicStatusEffectDamageBonusUpgrade(nint addr) : base(addr) { }
        public EModifyStatusEffectDamageUpgrade upgradeType { get { return (EModifyStatusEffectDamageUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, Object upgradedItem, FSDPlayerState Player, EModifyStatusEffectDamageUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, upgradedItem, Player, upgradeType); }
    }
    public class LockCountSTEBonusUpgrade : ItemUpgrade
    {
        public LockCountSTEBonusUpgrade(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public bool UseTotalLockCount { get { return this[nameof(UseTotalLockCount)].Flag; } set { this[nameof(UseTotalLockCount)].Flag = value; } }
        public float amount { get { return this[nameof(amount)].GetValue<float>(); } set { this[nameof(amount)].SetValue<float>(value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object StatusEffect) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, StatusEffect); }
    }
    public class DamageTagBonusUpgrade : ItemUpgrade
    {
        public DamageTagBonusUpgrade(nint addr) : base(addr) { }
        public UArray<DamageTag> Tags { get { return new UArray<DamageTag>(this[nameof(Tags)].Address); } }
    }
    public class ConditionalDamageTagBonusUpgrade : ItemUpgrade
    {
        public ConditionalDamageTagBonusUpgrade(nint addr) : base(addr) { }
        public UArray<DamageTag> Tags { get { return new UArray<DamageTag>(this[nameof(Tags)].Address); } }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
    }
    public class ConditionalDamageModifierUpgrade : ItemUpgrade
    {
        public ConditionalDamageModifierUpgrade(nint addr) : base(addr) { }
        public DamageCondition Condition { get { return this[nameof(Condition)].As<DamageCondition>(); } set { this["Condition"] = value; } }
        public UArray<DamageModifierItem> Modifiers { get { return new UArray<DamageModifierItem>(this[nameof(Modifiers)].Address); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player); }
    }
    public class FearAoEBonusUpgrade : ItemUpgrade
    {
        public FearAoEBonusUpgrade(nint addr) : base(addr) { }
        public float FearFactor { get { return this[nameof(FearFactor)].GetValue<float>(); } set { this[nameof(FearFactor)].SetValue<float>(value); } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player); }
    }
    public class SingleUsableUpgrade : StandardItemUpgrade
    {
        public SingleUsableUpgrade(nint addr) : base(addr) { }
        public ESingleUsableUpgradeType upgradeType { get { return (ESingleUsableUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, Object subItem, FSDPlayerState Player, ESingleUsableUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, subItem, Player, upgradeType); }
    }
    public class FlareUpgrade : StandardItemUpgrade
    {
        public FlareUpgrade(nint addr) : base(addr) { }
        public EFlareUpgradeType upgradeType { get { return (EFlareUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object flareClass, EFlareUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, flareClass, upgradeType); }
    }
    public class GrenadeUpgrade : StandardItemUpgrade
    {
        public GrenadeUpgrade(nint addr) : base(addr) { }
        public EGrenadeUpgradeType upgradeType { get { return (EGrenadeUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object flareClass, EGrenadeUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, flareClass, upgradeType); }
    }
    public class LineCutterUpgrade : StandardItemUpgrade
    {
        public LineCutterUpgrade(nint addr) : base(addr) { }
        public ELineCutterUpgradeType upgradeType { get { return (ELineCutterUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, ELineCutterUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradeType); }
    }
    public class LineCutterProjectileUpgrade : StandardItemUpgrade
    {
        public LineCutterProjectileUpgrade(nint addr) : base(addr) { }
        public ELineCutterProjectileUpgradeType upgradeType { get { return (ELineCutterProjectileUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, ELineCutterProjectileUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradeType); }
    }
    public class ProjectileUpgrade : StandardItemUpgrade
    {
        public ProjectileUpgrade(nint addr) : base(addr) { }
        public EProjectileUpgrade upgradeType { get { return (EProjectileUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public ItemUpgradeCondition Condition { get { return this[nameof(Condition)].As<ItemUpgradeCondition>(); } set { this["Condition"] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, Object upgradedItem, FSDPlayerState Player, EProjectileUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, upgradedItem, Player, upgradeType); }
    }
    public class WeaponFireComponentUpgrade : ItemUpgrade
    {
        public WeaponFireComponentUpgrade(nint addr) : base(addr) { }
        public Object WeaponFireComponentClass { get { return this[nameof(WeaponFireComponentClass)]; } set { this[nameof(WeaponFireComponentClass)] = value; } }
    }
    public class FlareGunUpgrade : StandardItemUpgrade
    {
        public FlareGunUpgrade(nint addr) : base(addr) { }
        public EFlaregunUpgrades upgradeType { get { return (EFlaregunUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EFlaregunUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class FlaregunProjectileUpgrade : StandardItemUpgrade
    {
        public FlaregunProjectileUpgrade(nint addr) : base(addr) { }
        public EFlaregunProjectileUpgrades upgradeType { get { return (EFlaregunProjectileUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, Object upgradedItem, FSDPlayerState Player, EFlaregunProjectileUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, upgradedItem, Player, upgradeType); }
    }
    public class ChargedProjectileUpgrade : StandardItemUpgrade
    {
        public ChargedProjectileUpgrade(nint addr) : base(addr) { }
        public EChargedProjectileUpgrades upgradeType { get { return (EChargedProjectileUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public UpgradeValues GetUpgradedValue(Object Item, Object upgradedActor, FSDPlayerState Player, EChargedProjectileUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, upgradedActor, Player, upgradeType); }
    }
    public class ElectricalSMGUpgrade : StandardItemUpgrade
    {
        public ElectricalSMGUpgrade(nint addr) : base(addr) { }
        public EElectricalSMGUpgrades upgradeType { get { return (EElectricalSMGUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, EElectricalSMGUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradeType); }
    }
    public class ZiplineGunUpgrade : StandardItemUpgrade
    {
        public ZiplineGunUpgrade(nint addr) : base(addr) { }
        public EZiplineGunUpgrades upgradeType { get { return (EZiplineGunUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, EZiplineGunUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradeType); }
    }
    public class GrapplingHookUpgrade : StandardItemUpgrade
    {
        public GrapplingHookUpgrade(nint addr) : base(addr) { }
        public EGrapplingHookUpgrade upgradeType { get { return (EGrapplingHookUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, EGrapplingHookUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradeType); }
    }
    public class SentryGunUpgrade : StandardItemUpgrade
    {
        public SentryGunUpgrade(nint addr) : base(addr) { }
        public ESentryGunUpgradeType upgradeType { get { return (ESentryGunUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ESentryGunUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class SentryGunTypeUpgrade : ItemUpgrade
    {
        public SentryGunTypeUpgrade(nint addr) : base(addr) { }
        public Object SentryGunType { get { return this[nameof(SentryGunType)]; } set { this[nameof(SentryGunType)] = value; } }
        public Object MarkerType { get { return this[nameof(MarkerType)]; } set { this[nameof(MarkerType)] = value; } }
    }
    public class ShieldGeneratorUpgrade : StandardItemUpgrade
    {
        public ShieldGeneratorUpgrade(nint addr) : base(addr) { }
        public EShieldGeneratorUpgrades upgradeType { get { return (EShieldGeneratorUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EShieldGeneratorUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class AddComponentUpgrade : ItemUpgrade
    {
        public AddComponentUpgrade(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
        public bool ServerOnly { get { return this[nameof(ServerOnly)].Flag; } set { this[nameof(ServerOnly)].Flag = value; } }
        public bool GetUpgradedValue(Object Item, FSDPlayerState Player, Object ComponentClass, bool includePreview) { return Invoke<bool>(nameof(GetUpgradedValue), Item, Player, ComponentClass, includePreview); }
    }
    public class TriggeredStatusEffectUpgrade : ItemUpgrade
    {
        public TriggeredStatusEffectUpgrade(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public ETriggeredStatusEffectType upgradeType { get { return (ETriggeredStatusEffectType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public float AoERange { get { return this[nameof(AoERange)].GetValue<float>(); } set { this[nameof(AoERange)].SetValue<float>(value); } }
        public Object OwnerEffect { get { return this[nameof(OwnerEffect)]; } set { this[nameof(OwnerEffect)] = value; } }
        public void OnEffectShouldTrigger(Actor PlayerCharacter) { Invoke(nameof(OnEffectShouldTrigger), PlayerCharacter); }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, Object StatusEffect, ETriggeredStatusEffectType aUpgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, StatusEffect, aUpgradeType); }
    }
    public class ArmorUpgrade : StandardItemUpgrade
    {
        public ArmorUpgrade(nint addr) : base(addr) { }
        public EArmorUpgradeType upgradeType { get { return (EArmorUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object armorClass, EArmorUpgradeType aUpgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, armorClass, aUpgradeType); }
    }
    public class ArmorStatUpgrade : StandardItemUpgrade
    {
        public ArmorStatUpgrade(nint addr) : base(addr) { }
        public PawnStat Stat { get { return this[nameof(Stat)].As<PawnStat>(); } set { this["Stat"] = value; } }
        public UpgradeValues GetUpgradedStatValue(FSDPlayerState Player, Object armorClass, PawnStat Stat) { return Invoke<UpgradeValues>(nameof(GetUpgradedStatValue), Player, armorClass, Stat); }
    }
    public class BoscoUpgrade : StandardItemUpgrade
    {
        public BoscoUpgrade(nint addr) : base(addr) { }
        public EBoscoUpgrades upgradeType { get { return (EBoscoUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, EBoscoUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradeType); }
    }
    public class PlatformGunUpgrade : ItemUpgrade
    {
        public PlatformGunUpgrade(nint addr) : base(addr) { }
        public EPlatformGunUpgrades myUpgradeType { get { return (EPlatformGunUpgrades)this[nameof(myUpgradeType)].GetValue<int>(); } set { this[nameof(myUpgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, EPlatformGunUpgrades aUpgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, aUpgradeType); }
    }
    public class DetPackUpgrade : StandardItemUpgrade
    {
        public DetPackUpgrade(nint addr) : base(addr) { }
        public EDetPackUpgrades upgradeType { get { return (EDetPackUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EDetPackUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class BonusDamageUpgrade : ItemUpgrade
    {
        public BonusDamageUpgrade(nint addr) : base(addr) { }
        public DamageBonusBase DamageBonus { get { return this[nameof(DamageBonus)].As<DamageBonusBase>(); } set { this["DamageBonus"] = value; } }
    }
    public class ProjectileLauncherBaseUpgrade : StandardItemUpgrade
    {
        public ProjectileLauncherBaseUpgrade(nint addr) : base(addr) { }
        public EProjectileLauncherBaseUpgradeType upgradeType { get { return (EProjectileLauncherBaseUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EProjectileLauncherBaseUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class MicroMissileLauncherUpgrade : StandardItemUpgrade
    {
        public MicroMissileLauncherUpgrade(nint addr) : base(addr) { }
        public EMicroMissileLauncherUpgrades upgradeType { get { return (EMicroMissileLauncherUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EMicroMissileLauncherUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class WeaponSwitchProjectileUpgrade : ItemUpgrade
    {
        public WeaponSwitchProjectileUpgrade(nint addr) : base(addr) { }
        public ProjectileSwitch Projectile { get { return this[nameof(Projectile)].As<ProjectileSwitch>(); } set { this["Projectile"] = value; } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, Object ComponentClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, ComponentClass); }
    }
    public class GooGunUpgrade : StandardItemUpgrade
    {
        public GooGunUpgrade(nint addr) : base(addr) { }
        public EGooGunUpgrades upgradeType { get { return (EGooGunUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EGooGunUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class GooGunProjectileUpgrade : StandardItemUpgrade
    {
        public GooGunProjectileUpgrade(nint addr) : base(addr) { }
        public EGooGunProjectileUpgrades upgradeType { get { return (EGooGunProjectileUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(FSDPlayerState Player, Object Item, Object upgradedItem, EGooGunProjectileUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Player, Item, upgradedItem, upgradeType); }
    }
    public class LockOnWeaponUpgrade : StandardItemUpgrade
    {
        public LockOnWeaponUpgrade(nint addr) : base(addr) { }
        public ELockOnWeaponUpgrades upgradeType { get { return (ELockOnWeaponUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ELockOnWeaponUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class PlasmaCarbineUpgrade : StandardItemUpgrade
    {
        public PlasmaCarbineUpgrade(nint addr) : base(addr) { }
        public EPlasmaCarbineUpgrades upgradeType { get { return (EPlasmaCarbineUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EPlasmaCarbineUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class CrossbowUpgrade : StandardItemUpgrade
    {
        public CrossbowUpgrade(nint addr) : base(addr) { }
        public ECrossbowUpgrades upgradeType { get { return (ECrossbowUpgrades)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, Object Projectile, FSDPlayerState Player, ECrossbowUpgrades upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Projectile, Player, upgradeType); }
    }
    public class WeaponChargeProgressDamageBonus : ItemUpgrade
    {
        public WeaponChargeProgressDamageBonus(nint addr) : base(addr) { }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public FloatInterval ChargeRange { get { return this[nameof(ChargeRange)].As<FloatInterval>(); } set { this["ChargeRange"] = value; } }
        public FloatInterval DamageBonusRange { get { return this[nameof(DamageBonusRange)].As<FloatInterval>(); } set { this["DamageBonusRange"] = value; } }
    }
    public class HeavyParticleCannonUpgrade : StandardItemUpgrade
    {
        public HeavyParticleCannonUpgrade(nint addr) : base(addr) { }
        public EHeavyParticleCannonUpgrade upgradeType { get { return (EHeavyParticleCannonUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EHeavyParticleCannonUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class CapsuleHitscanUpgrade : StandardItemUpgrade
    {
        public CapsuleHitscanUpgrade(nint addr) : base(addr) { }
        public ECapsuleHitscanUpgradeType upgradeType { get { return (ECapsuleHitscanUpgradeType)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, ECapsuleHitscanUpgradeType upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class MicrowavegunUpgrade : StandardItemUpgrade
    {
        public MicrowavegunUpgrade(nint addr) : base(addr) { }
        public EMicrowaveGunUpgrade upgradeType { get { return (EMicrowaveGunUpgrade)this[nameof(upgradeType)].GetValue<int>(); } set { this[nameof(upgradeType)].SetValue<int>((int)value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, EMicrowaveGunUpgrade upgradeType) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, upgradeType); }
    }
    public class StickFlameActorUpgrade : ItemUpgrade
    {
        public StickFlameActorUpgrade(nint addr) : base(addr) { }
        public Object stickyFlameClass { get { return this[nameof(stickyFlameClass)]; } set { this[nameof(stickyFlameClass)] = value; } }
        public bool OverrideFlameLifetime { get { return this[nameof(OverrideFlameLifetime)].Flag; } set { this[nameof(OverrideFlameLifetime)].Flag = value; } }
        public float FlameLifetime { get { return this[nameof(FlameLifetime)].GetValue<float>(); } set { this[nameof(FlameLifetime)].SetValue<float>(value); } }
        public UpgradeValues GetUpgradedValue(Object Item, FSDPlayerState Player, Object stickyFlameClass) { return Invoke<UpgradeValues>(nameof(GetUpgradedValue), Item, Player, stickyFlameClass); }
    }
    public class Upgradable : Interface
    {
        public Upgradable(nint addr) : base(addr) { }
        public void Upgraded(UArray<ItemUpgrade> Upgrades) { Invoke(nameof(Upgraded), Upgrades); }
    }
    public class UpgradableGear : Interface
    {
        public UpgradableGear(nint addr) : base(addr) { }
        public void GetGearStatEntry(FSDPlayerState PlayerState, UArray<GearStatEntry> Stats) { Invoke(nameof(GetGearStatEntry), PlayerState, Stats); }
    }
    public class Vacuumable : Interface
    {
        public Vacuumable(nint addr) : base(addr) { }
    }
    public class JellyBreeder : AFlyingBug
    {
        public JellyBreeder(nint addr) : base(addr) { }
        public AnimSequenceBase EggSpawnAnimation { get { return this[nameof(EggSpawnAnimation)].As<AnimSequenceBase>(); } set { this["EggSpawnAnimation"] = value; } }
        public ParticleSystem EggParticles { get { return this[nameof(EggParticles)].As<ParticleSystem>(); } set { this["EggParticles"] = value; } }
        public SoundBase EggSound { get { return this[nameof(EggSound)].As<SoundBase>(); } set { this["EggSound"] = value; } }
        public EnemyDescriptor EnemyToSpawn { get { return this[nameof(EnemyToSpawn)].As<EnemyDescriptor>(); } set { this["EnemyToSpawn"] = value; } }
        public Object EggClass { get { return this[nameof(EggClass)]; } set { this[nameof(EggClass)] = value; } }
        public float TimeBetweenBursts { get { return this[nameof(TimeBetweenBursts)].GetValue<float>(); } set { this[nameof(TimeBetweenBursts)].SetValue<float>(value); } }
        public float TimeBetweenEggs { get { return this[nameof(TimeBetweenEggs)].GetValue<float>(); } set { this[nameof(TimeBetweenEggs)].SetValue<float>(value); } }
        public float CloseToSpawnEggTime { get { return this[nameof(CloseToSpawnEggTime)].GetValue<float>(); } set { this[nameof(CloseToSpawnEggTime)].SetValue<float>(value); } }
        public PhysicalMaterial WeakPointMaterial { get { return this[nameof(WeakPointMaterial)].As<PhysicalMaterial>(); } set { this["WeakPointMaterial"] = value; } }
        public PhysicalMaterial UnWeakPointMaterial { get { return this[nameof(UnWeakPointMaterial)].As<PhysicalMaterial>(); } set { this["UnWeakPointMaterial"] = value; } }
        public int EggBurstSize { get { return this[nameof(EggBurstSize)].GetValue<int>(); } set { this[nameof(EggBurstSize)].SetValue<int>(value); } }
        public int MaxJellies { get { return this[nameof(MaxJellies)].GetValue<int>(); } set { this[nameof(MaxJellies)].SetValue<int>(value); } }
        public float MultiplierOnHighPlayerCount { get { return this[nameof(MultiplierOnHighPlayerCount)].GetValue<float>(); } set { this[nameof(MultiplierOnHighPlayerCount)].SetValue<float>(value); } }
        public bool IsInBreedMode { get { return this[nameof(IsInBreedMode)].Flag; } set { this[nameof(IsInBreedMode)].Flag = value; } }
        public void SpawnEnemies(Projectile Egg, int AmountToSpawn) { Invoke(nameof(SpawnEnemies), Egg, AmountToSpawn); }
        public void PlaySpawnEggAnim() { Invoke(nameof(PlaySpawnEggAnim)); }
        public void OnRep_BreedMode() { Invoke(nameof(OnRep_BreedMode)); }
        public void OnJellyDestroyed(Actor AActor) { Invoke(nameof(OnJellyDestroyed), AActor); }
        public void BreedModeFlipped(bool aIsLayingEggs) { Invoke(nameof(BreedModeFlipped), aIsLayingEggs); }
    }
    public class JellyBreederAnimInstance : FlyingBugAnimInstance
    {
        public JellyBreederAnimInstance(nint addr) : base(addr) { }
        public bool ReadyToSpawnEggs { get { return this[nameof(ReadyToSpawnEggs)].Flag; } set { this[nameof(ReadyToSpawnEggs)].Flag = value; } }
    }
    public class JellyEggAnimInstance : AnimInstance
    {
        public JellyEggAnimInstance(nint addr) : base(addr) { }
        public Vector force { get { return this[nameof(force)].As<Vector>(); } set { this["force"] = value; } }
    }
    public class JetBootsBox : Actor
    {
        public JetBootsBox(nint addr) : base(addr) { }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public SpecialEvent SpecialEvent { get { return this[nameof(SpecialEvent)].As<SpecialEvent>(); } set { this["SpecialEvent"] = value; } }
    }
    public class JetBootsBoxSpawner : Actor
    {
        public JetBootsBoxSpawner(nint addr) : base(addr) { }
        public Object JetBootsBoxClass { get { return this[nameof(JetBootsBoxClass)]; } set { this[nameof(JetBootsBoxClass)] = value; } }
        public FloatInterval SpawnIntervalFromDropPod { get { return this[nameof(SpawnIntervalFromDropPod)].As<FloatInterval>(); } set { this["SpawnIntervalFromDropPod"] = value; } }
        public int MaxSpawnLocationTries { get { return this[nameof(MaxSpawnLocationTries)].GetValue<int>(); } set { this[nameof(MaxSpawnLocationTries)].SetValue<int>(value); } }
        public DebrisPositioning DebrisPositioning { get { return this[nameof(DebrisPositioning)].As<DebrisPositioning>(); } set { this["DebrisPositioning"] = value; } }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public JetBootsBox JetBootsBoxInstance { get { return this[nameof(JetBootsBoxInstance)].As<JetBootsBox>(); } set { this["JetBootsBoxInstance"] = value; } }
        public Object JetBootsBoxClassLoaded { get { return this[nameof(JetBootsBoxClassLoaded)]; } set { this[nameof(JetBootsBoxClassLoaded)] = value; } }
    }
    public class JetBootsFuelWidget : FSDUserWidget
    {
        public JetBootsFuelWidget(nint addr) : base(addr) { }
        public void ShowMK2(bool IsVisible) { Invoke(nameof(ShowMK2), IsVisible); }
        public void SetProgress(float CurrentProgress, bool overheated) { Invoke(nameof(SetProgress), CurrentProgress, overheated); }
        public void SetIsActive(bool IsActive) { Invoke(nameof(SetIsActive), IsActive); }
    }
    public class JetBootsSettings : DataAsset
    {
        public JetBootsSettings(nint addr) : base(addr) { }
        public float JetForce { get { return this[nameof(JetForce)].GetValue<float>(); } set { this[nameof(JetForce)].SetValue<float>(value); } }
        public float AirControlSpeed { get { return this[nameof(AirControlSpeed)].GetValue<float>(); } set { this[nameof(AirControlSpeed)].SetValue<float>(value); } }
        public float MaxAirSpeedZ { get { return this[nameof(MaxAirSpeedZ)].GetValue<float>(); } set { this[nameof(MaxAirSpeedZ)].SetValue<float>(value); } }
        public float FallCompensationStrength { get { return this[nameof(FallCompensationStrength)].GetValue<float>(); } set { this[nameof(FallCompensationStrength)].SetValue<float>(value); } }
        public float MaxCustomMovementSpeed { get { return this[nameof(MaxCustomMovementSpeed)].GetValue<float>(); } set { this[nameof(MaxCustomMovementSpeed)].SetValue<float>(value); } }
        public float MaxJetFuel { get { return this[nameof(MaxJetFuel)].GetValue<float>(); } set { this[nameof(MaxJetFuel)].SetValue<float>(value); } }
        public float JetFuelCost { get { return this[nameof(JetFuelCost)].GetValue<float>(); } set { this[nameof(JetFuelCost)].SetValue<float>(value); } }
        public float JetFuelRechargeRate { get { return this[nameof(JetFuelRechargeRate)].GetValue<float>(); } set { this[nameof(JetFuelRechargeRate)].SetValue<float>(value); } }
        public float JetFuelRechargeDelay { get { return this[nameof(JetFuelRechargeDelay)].GetValue<float>(); } set { this[nameof(JetFuelRechargeDelay)].SetValue<float>(value); } }
        public float OutOfFuelRechargeDelay { get { return this[nameof(OutOfFuelRechargeDelay)].GetValue<float>(); } set { this[nameof(OutOfFuelRechargeDelay)].SetValue<float>(value); } }
    }
    public class JetBootsMovementComponent : ActorComponent
    {
        public JetBootsMovementComponent(nint addr) : base(addr) { }
        public Object FuelUpdated { get { return this[nameof(FuelUpdated)]; } set { this[nameof(FuelUpdated)] = value; } }
        public Object FuelUpdatedNonLocal { get { return this[nameof(FuelUpdatedNonLocal)]; } set { this[nameof(FuelUpdatedNonLocal)] = value; } }
        public JetBootsSettings Settings { get { return this[nameof(Settings)].As<JetBootsSettings>(); } set { this["Settings"] = value; } }
        public Object UseSound { get { return this[nameof(UseSound)]; } set { this[nameof(UseSound)] = value; } }
        public Object DeactivatedSound { get { return this[nameof(DeactivatedSound)]; } set { this[nameof(DeactivatedSound)] = value; } }
        public Object OverHeatSound { get { return this[nameof(OverHeatSound)]; } set { this[nameof(OverHeatSound)] = value; } }
        public AudioComponent UseAudioComponent { get { return this[nameof(UseAudioComponent)].As<AudioComponent>(); } set { this["UseAudioComponent"] = value; } }
        public AudioComponent OverHeatAudioComponent { get { return this[nameof(OverHeatAudioComponent)].As<AudioComponent>(); } set { this["OverHeatAudioComponent"] = value; } }
        public AudioComponent DeactivatedAudioComponent { get { return this[nameof(DeactivatedAudioComponent)].As<AudioComponent>(); } set { this["DeactivatedAudioComponent"] = value; } }
        public AudioComponent TP_UseAudioComponent { get { return this[nameof(TP_UseAudioComponent)].As<AudioComponent>(); } set { this["TP_UseAudioComponent"] = value; } }
        public AudioComponent TP_OverHeatAudioComponent { get { return this[nameof(TP_OverHeatAudioComponent)].As<AudioComponent>(); } set { this["TP_OverHeatAudioComponent"] = value; } }
        public AudioComponent TP_DeactivatedAudioComponent { get { return this[nameof(TP_DeactivatedAudioComponent)].As<AudioComponent>(); } set { this["TP_DeactivatedAudioComponent"] = value; } }
        public Object FootParticles { get { return this[nameof(FootParticles)]; } set { this[nameof(FootParticles)] = value; } }
        public Object FootParticlesFP { get { return this[nameof(FootParticlesFP)]; } set { this[nameof(FootParticlesFP)] = value; } }
        public Object FootSocketNameLeft { get { return this[nameof(FootSocketNameLeft)]; } set { this[nameof(FootSocketNameLeft)] = value; } }
        public Object FootSocketNameRight { get { return this[nameof(FootSocketNameRight)]; } set { this[nameof(FootSocketNameRight)] = value; } }
        public Object FootAttachMesh { get { return this[nameof(FootAttachMesh)]; } set { this[nameof(FootAttachMesh)] = value; } }
        public SkeletalMeshComponent LFootAttachMeshComponent { get { return this[nameof(LFootAttachMeshComponent)].As<SkeletalMeshComponent>(); } set { this["LFootAttachMeshComponent"] = value; } }
        public SkeletalMeshComponent RFootAttachMeshComponent { get { return this[nameof(RFootAttachMeshComponent)].As<SkeletalMeshComponent>(); } set { this["RFootAttachMeshComponent"] = value; } }
        public NiagaraComponent LeftFootParticles { get { return this[nameof(LeftFootParticles)].As<NiagaraComponent>(); } set { this["LeftFootParticles"] = value; } }
        public NiagaraComponent RightFootParticles { get { return this[nameof(RightFootParticles)].As<NiagaraComponent>(); } set { this["RightFootParticles"] = value; } }
        public FXSystemComponent FPFootParticles { get { return this[nameof(FPFootParticles)].As<FXSystemComponent>(); } set { this["FPFootParticles"] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public float FromJumpDelay { get { return this[nameof(FromJumpDelay)].GetValue<float>(); } set { this[nameof(FromJumpDelay)].SetValue<float>(value); } }
        public float FromTerrainStartDelay { get { return this[nameof(FromTerrainStartDelay)].GetValue<float>(); } set { this[nameof(FromTerrainStartDelay)].SetValue<float>(value); } }
        public float OverHeatAtPercent { get { return this[nameof(OverHeatAtPercent)].GetValue<float>(); } set { this[nameof(OverHeatAtPercent)].SetValue<float>(value); } }
        public float AddPlayerAirVelocityToThrowFactor { get { return this[nameof(AddPlayerAirVelocityToThrowFactor)].GetValue<float>(); } set { this[nameof(AddPlayerAirVelocityToThrowFactor)].SetValue<float>(value); } }
        public float CurrentJetFuel { get { return this[nameof(CurrentJetFuel)].GetValue<float>(); } set { this[nameof(CurrentJetFuel)].SetValue<float>(value); } }
        public bool isUsing { get { return this[nameof(isUsing)].Flag; } set { this[nameof(isUsing)].Flag = value; } }
        public bool isFromTakeOff { get { return this[nameof(isFromTakeOff)].Flag; } set { this[nameof(isFromTakeOff)].Flag = value; } }
        public bool overheated { get { return this[nameof(overheated)].Flag; } set { this[nameof(overheated)].Flag = value; } }
        public void Server_SetOverheated(bool Current) { Invoke(nameof(Server_SetOverheated), Current); }
        public void Server_SetIsUsing(bool Current, bool last, bool isFromTakeOff) { Invoke(nameof(Server_SetIsUsing), Current, last, isFromTakeOff); }
        public void Server_SetCurrentJetFuel(float Current) { Invoke(nameof(Server_SetCurrentJetFuel), Current); }
        public void RemoveJetBoots() { Invoke(nameof(RemoveJetBoots)); }
        public void Receive_OnTakeOffLocal() { Invoke(nameof(Receive_OnTakeOffLocal)); }
        public void Receive_OnOverheatedChanged(bool overheated) { Invoke(nameof(Receive_OnOverheatedChanged), overheated); }
        public void Receive_OnDestroy() { Invoke(nameof(Receive_OnDestroy)); }
        public void Receive_OnCharacterSet(PlayerCharacter Player) { Invoke(nameof(Receive_OnCharacterSet), Player); }
        public void Receive_OnActiveChangedServer(bool IsActive, bool fromTakeOff) { Invoke(nameof(Receive_OnActiveChangedServer), IsActive, fromTakeOff); }
        public void Receive_OnActiveChangedNonLocal(bool IsActive, bool fromTakeOff) { Invoke(nameof(Receive_OnActiveChangedNonLocal), IsActive, fromTakeOff); }
        public void Receive_OnActiveChangedLocal(bool IsActive, bool fromTakeOff) { Invoke(nameof(Receive_OnActiveChangedLocal), IsActive, fromTakeOff); }
        public void OnStateChanged(ECharacterState State) { Invoke(nameof(OnStateChanged), State); }
        public void OnRep_OverHeated(bool lastOverheated) { Invoke(nameof(OnRep_OverHeated), lastOverheated); }
        public void OnRep_IsUsing(bool lastUsing) { Invoke(nameof(OnRep_IsUsing), lastUsing); }
        public void OnRep_CurrentJetFuel() { Invoke(nameof(OnRep_CurrentJetFuel)); }
        public void OnPlayerCharacterHit(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComp, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnPlayerCharacterHit), HitComponent, OtherActor, OtherComp, NormalImpulse, Hit); }
        public void OnJumpReleased() { Invoke(nameof(OnJumpReleased)); }
        public void OnJumpPressed() { Invoke(nameof(OnJumpPressed)); }
        public void OnCameraModeChanged(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode) { Invoke(nameof(OnCameraModeChanged), NewCameraMode, OldCameraMode); }
        public void Client_SetIsUsing(bool isUsing) { Invoke(nameof(Client_SetIsUsing), isUsing); }
    }
    public class JetPackItem : AnimatedItem
    {
        public JetPackItem(nint addr) : base(addr) { }
        public float ActiveTime { get { return this[nameof(ActiveTime)].GetValue<float>(); } set { this[nameof(ActiveTime)].SetValue<float>(value); } }
        public CurveFloat VerticalAccelerationCurve { get { return this[nameof(VerticalAccelerationCurve)].As<CurveFloat>(); } set { this["VerticalAccelerationCurve"] = value; } }
        public float VerticalAcceleration { get { return this[nameof(VerticalAcceleration)].GetValue<float>(); } set { this[nameof(VerticalAcceleration)].SetValue<float>(value); } }
        public float MaxVerticalSpeed { get { return this[nameof(MaxVerticalSpeed)].GetValue<float>(); } set { this[nameof(MaxVerticalSpeed)].SetValue<float>(value); } }
        public float MaxHorizontalSpeed { get { return this[nameof(MaxHorizontalSpeed)].GetValue<float>(); } set { this[nameof(MaxHorizontalSpeed)].SetValue<float>(value); } }
        public float MaxHorizontalDrift { get { return this[nameof(MaxHorizontalDrift)].GetValue<float>(); } set { this[nameof(MaxHorizontalDrift)].SetValue<float>(value); } }
        public float BurnDuration { get { return this[nameof(BurnDuration)].GetValue<float>(); } set { this[nameof(BurnDuration)].SetValue<float>(value); } }
        public float RechargeDuration { get { return this[nameof(RechargeDuration)].GetValue<float>(); } set { this[nameof(RechargeDuration)].SetValue<float>(value); } }
        public float Fuel { get { return this[nameof(Fuel)].GetValue<float>(); } set { this[nameof(Fuel)].SetValue<float>(value); } }
        public bool Active { get { return this[nameof(Active)].Flag; } set { this[nameof(Active)].Flag = value; } }
        public PlayerMovementComponent CharacterMovement { get { return this[nameof(CharacterMovement)].As<PlayerMovementComponent>(); } set { this["CharacterMovement"] = value; } }
        public void Server_StopThruster() { Invoke(nameof(Server_StopThruster)); }
        public void Server_StartThruster() { Invoke(nameof(Server_StartThruster)); }
        public void OnRep_Fuel(float OldFuel) { Invoke(nameof(OnRep_Fuel), OldFuel); }
        public void OnRep_Active() { Invoke(nameof(OnRep_Active)); }
        public void OnFuelChanged(float Value, float Delta) { Invoke(nameof(OnFuelChanged), Value, Delta); }
    }
    public class JettyBootsArcadeActor : Actor
    {
        public JettyBootsArcadeActor(nint addr) : base(addr) { }
        public JettyBootUsableComponent StartGameUsable { get { return this[nameof(StartGameUsable)].As<JettyBootUsableComponent>(); } set { this["StartGameUsable"] = value; } }
        public JettyBootsPlayer Player { get { return this[nameof(Player)].As<JettyBootsPlayer>(); } set { this["Player"] = value; } }
        public int MaxDistanceToPlay { get { return this[nameof(MaxDistanceToPlay)].GetValue<int>(); } set { this[nameof(MaxDistanceToPlay)].SetValue<int>(value); } }
        public SceneComponent MaxDistanceComponent { get { return this[nameof(MaxDistanceComponent)].As<SceneComponent>(); } set { this["MaxDistanceComponent"] = value; } }
        public UArray<AnimMontage> AnimPlaying { get { return new UArray<AnimMontage>(this[nameof(AnimPlaying)].Address); } }
        public UArray<AnimMontage> AnimFailed { get { return new UArray<AnimMontage>(this[nameof(AnimFailed)].Address); } }
        public UArray<AnimMontage> AnimSucces { get { return new UArray<AnimMontage>(this[nameof(AnimSucces)].Address); } }
        public UArray<JettyBootNPC> HighScoreNPCs { get { return new UArray<JettyBootNPC>(this[nameof(HighScoreNPCs)].Address); } }
        public JettyBootsSave JettyBootsSave { get { return this[nameof(JettyBootsSave)].As<JettyBootsSave>(); } set { this["JettyBootsSave"] = value; } }
        public void SetActivePlayer(PlayerCharacter InPlayer) { Invoke(nameof(SetActivePlayer), InPlayer); }
        public void Server_ReplayPackage(JettyBootsReplay InPackage) { Invoke(nameof(Server_ReplayPackage), InPackage); }
        public void ReceiveReplayPackage(JettyBootsReplay InPackage) { Invoke(nameof(ReceiveReplayPackage), InPackage); }
        public void ReceivePlayerChanged() { Invoke(nameof(ReceivePlayerChanged)); }
        public void ReceiveHighScoreChanged() { Invoke(nameof(ReceiveHighScoreChanged)); }
        public void OnRep_Save() { Invoke(nameof(OnRep_Save)); }
        public void OnRep_Player(JettyBootsPlayer OldPlayer) { Invoke(nameof(OnRep_Player), OldPlayer); }
        public void OnPlayerCharacterDestroyed(Actor InActor) { Invoke(nameof(OnPlayerCharacterDestroyed), InActor); }
        public void OnCharacterMoved(float DeltaSeconds, Vector OldLocation, Vector OldVelocity) { Invoke(nameof(OnCharacterMoved), DeltaSeconds, OldLocation, OldVelocity); }
        public void OnCharacterMontageEnded(AnimMontage InMontage, bool InInterrupted) { Invoke(nameof(OnCharacterMontageEnded), InMontage, InInterrupted); }
        public bool IsPlayerWithinDistance() { return Invoke<bool>(nameof(IsPlayerWithinDistance)); }
        public int GetLastHighScoreIndex() { return Invoke<int>(nameof(GetLastHighScoreIndex)); }
        public UArray<JettyBootsScore> GetHighScores() { return Invoke<UArray<JettyBootsScore>>(nameof(GetHighScores)); }
        public PlayerCharacter GetActivePlayer() { return Invoke<PlayerCharacter>(nameof(GetActivePlayer)); }
        public void ClearHighScores() { Invoke(nameof(ClearHighScores)); }
        public void All_ReplayPackage(JettyBootsReplay InPackage) { Invoke(nameof(All_ReplayPackage), InPackage); }
        public void AddHighScoreServer(JettyBootsScore InScore) { Invoke(nameof(AddHighScoreServer), InScore); }
        public void AddHighScoreClient(JettyBootsScore InScore) { Invoke(nameof(AddHighScoreClient), InScore); }
    }
    public class SingleUsableComponent : UsableComponent
    {
        public SingleUsableComponent(nint addr) : base(addr) { }
        public Object OnUsedBy { get { return this[nameof(OnUsedBy)]; } set { this[nameof(OnUsedBy)] = value; } }
        public Object OnUseBegin { get { return this[nameof(OnUseBegin)]; } set { this[nameof(OnUseBegin)] = value; } }
        public Object OnUseEnd { get { return this[nameof(OnUseEnd)]; } set { this[nameof(OnUseEnd)] = value; } }
        public Object OnProgress { get { return this[nameof(OnProgress)]; } set { this[nameof(OnProgress)] = value; } }
        public Object OnUsableChanged { get { return this[nameof(OnUsableChanged)]; } set { this[nameof(OnUsableChanged)] = value; } }
        public Object OnUserCountChanged { get { return this[nameof(OnUserCountChanged)]; } set { this[nameof(OnUserCountChanged)] = value; } }
        public Object OnFailed { get { return this[nameof(OnFailed)]; } set { this[nameof(OnFailed)] = value; } }
        public SoundCue AudioBeginUse { get { return this[nameof(AudioBeginUse)].As<SoundCue>(); } set { this["AudioBeginUse"] = value; } }
        public SoundCue AudioFailedUse { get { return this[nameof(AudioFailedUse)].As<SoundCue>(); } set { this["AudioFailedUse"] = value; } }
        public SoundCue AudioCompletedUse { get { return this[nameof(AudioCompletedUse)].As<SoundCue>(); } set { this["AudioCompletedUse"] = value; } }
        public DialogDataAsset BoscoLaserpointerShout { get { return this[nameof(BoscoLaserpointerShout)].As<DialogDataAsset>(); } set { this["BoscoLaserpointerShout"] = value; } }
        public bool CoopUse { get { return this[nameof(CoopUse)].Flag; } set { this[nameof(CoopUse)].Flag = value; } }
        public PawnStat UseSpeedStat { get { return this[nameof(UseSpeedStat)].As<PawnStat>(); } set { this["UseSpeedStat"] = value; } }
        public float CoopUseMultiplier { get { return this[nameof(CoopUseMultiplier)].GetValue<float>(); } set { this[nameof(CoopUseMultiplier)].SetValue<float>(value); } }
        public bool Usable { get { return this[nameof(Usable)].Flag; } set { this[nameof(Usable)].Flag = value; } }
        public bool TurnOffAfterUse { get { return this[nameof(TurnOffAfterUse)].Flag; } set { this[nameof(TurnOffAfterUse)].Flag = value; } }
        public bool MultipleUse { get { return this[nameof(MultipleUse)].Flag; } set { this[nameof(MultipleUse)].Flag = value; } }
        public bool bShowUsingUI { get { return this[nameof(bShowUsingUI)].Flag; } set { this[nameof(bShowUsingUI)].Flag = value; } }
        public Object UsableIcon { get { return this[nameof(UsableIcon)]; } set { this[nameof(UsableIcon)] = value; } }
        public float useDuration { get { return this[nameof(useDuration)].GetValue<float>(); } set { this[nameof(useDuration)].SetValue<float>(value); } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
        public float DesiredProgress { get { return this[nameof(DesiredProgress)].GetValue<float>(); } set { this[nameof(DesiredProgress)].SetValue<float>(value); } }
        public int userCount { get { return this[nameof(userCount)].GetValue<int>(); } set { this[nameof(userCount)].SetValue<int>(value); } }
        public AudioComponent AudioBeginUseInstance { get { return this[nameof(AudioBeginUseInstance)].As<AudioComponent>(); } set { this["AudioBeginUseInstance"] = value; } }
        public void Use(PlayerCharacter User, EInputKeys Key, float DeltaTime) { Invoke(nameof(Use), User, Key, DeltaTime); }
        public void SetProgress(float Value) { Invoke(nameof(SetProgress), Value); }
        public void SetCanUse(bool CanUse) { Invoke(nameof(SetCanUse), CanUse); }
        public void OnRep_UserCount() { Invoke(nameof(OnRep_UserCount)); }
        public void OnRep_Usable() { Invoke(nameof(OnRep_Usable)); }
        public void OnRep_DesiredProgress() { Invoke(nameof(OnRep_DesiredProgress)); }
        public void Cheat_Use(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(Cheat_Use), User, Key); }
        public void All_PlayFailedAudio() { Invoke(nameof(All_PlayFailedAudio)); }
    }
    public class JettyBootUsableComponent : SingleUsableComponent
    {
        public JettyBootUsableComponent(nint addr) : base(addr) { }
        public int CreditPrice { get { return this[nameof(CreditPrice)].GetValue<int>(); } set { this[nameof(CreditPrice)].SetValue<int>(value); } }
        public bool DeductCredits(PlayerCharacter User, MissionStat InCreditCounter) { return Invoke<bool>(nameof(DeductCredits), User, InCreditCounter); }
    }
    public class JettyBootsArcadeWidget : UserWidget
    {
        public JettyBootsArcadeWidget(nint addr) : base(addr) { }
    }
    public class SpriteRectLibrary : BlueprintFunctionLibrary
    {
        public SpriteRectLibrary(nint addr) : base(addr) { }
        public SpriteRect TranslateSpriteRect(SpriteRect Rect, Vector2D Offset) { return Invoke<SpriteRect>(nameof(TranslateSpriteRect), Rect, Offset); }
        public bool SpriteRectIntersectsAny(SpriteRect A, UArray<SpriteRect> Others) { return Invoke<bool>(nameof(SpriteRectIntersectsAny), A, Others); }
        public bool SpriteRectIntersects(SpriteRect A, SpriteRect B) { return Invoke<bool>(nameof(SpriteRectIntersects), A, B); }
        public void MoveSpriteRect(SpriteRect Rect, Vector2D Offset) { Invoke(nameof(MoveSpriteRect), Rect, Offset); }
        public SpriteRect MakeSpriteRectFromPoints(Vector2D Start, Vector2D End) { return Invoke<SpriteRect>(nameof(MakeSpriteRectFromPoints), Start, End); }
        public SpriteRect MakeSpriteRectFromCenter(Vector2D Center, Vector2D Size) { return Invoke<SpriteRect>(nameof(MakeSpriteRectFromCenter), Center, Size); }
        public void MakeGateSpriteRects(int CanvasHeight, int GateWidth, Vector OpeningPos, float OpeningHeight, SpriteRect OutTopRect, SpriteRect OutBottomRect) { Invoke(nameof(MakeGateSpriteRects), CanvasHeight, GateWidth, OpeningPos, OpeningHeight, OutTopRect, OutBottomRect); }
        public Vector2D GetSpriteRectSize(SpriteRect Rect) { return Invoke<Vector2D>(nameof(GetSpriteRectSize), Rect); }
        public Vector2D GetSpriteRectCenter(SpriteRect Rect) { return Invoke<Vector2D>(nameof(GetSpriteRectCenter), Rect); }
    }
    public class SpriteRectWidget : UserWidget
    {
        public SpriteRectWidget(nint addr) : base(addr) { }
        public Vector2D Position { get { return this[nameof(Position)].As<Vector2D>(); } set { this["Position"] = value; } }
        public Vector2D Size { get { return this[nameof(Size)].As<Vector2D>(); } set { this["Size"] = value; } }
        public void SetSize(Vector2D InSize) { Invoke(nameof(SetSize), InSize); }
        public void SetPositionAndSize(Vector2D InPosition, Vector2D InSize) { Invoke(nameof(SetPositionAndSize), InPosition, InSize); }
        public void SetPosition(Vector2D InPosition) { Invoke(nameof(SetPosition), InPosition); }
        public void Move(Vector2D InOffset) { Invoke(nameof(Move), InOffset); }
        public SpriteRect GetSpriteRect() { return Invoke<SpriteRect>(nameof(GetSpriteRect)); }
    }
    public class JettyBootSettings : DataAsset
    {
        public JettyBootSettings(nint addr) : base(addr) { }
        public UArray<JettyBootSetting> LevelSettings { get { return new UArray<JettyBootSetting>(this[nameof(LevelSettings)].Address); } }
        public JettyBootSetting GetLevelSetting(int InLevel) { return Invoke<JettyBootSetting>(nameof(GetLevelSetting), InLevel); }
    }
    public class KeepInsideWorld : ActorComponent
    {
        public KeepInsideWorld(nint addr) : base(addr) { }
        public UArray<Object> ActorsToKeepInsideWorld { get { return new UArray<Object>(this[nameof(ActorsToKeepInsideWorld)].Address); } }
        public int IteratorIndex { get { return this[nameof(IteratorIndex)].GetValue<int>(); } set { this[nameof(IteratorIndex)].SetValue<int>(value); } }
        public void UnregisterForKeepInsideWorld(Object WorldContextObject, Actor Actor) { Invoke(nameof(UnregisterForKeepInsideWorld), WorldContextObject, Actor); }
        public void RegisterForKeepInsideWorld(Object WorldContextObject, Actor Actor) { Invoke(nameof(RegisterForKeepInsideWorld), WorldContextObject, Actor); }
    }
    public class KillEnemiesObjective : Objective
    {
        public KillEnemiesObjective(nint addr) : base(addr) { }
        public int EnemyCount { get { return this[nameof(EnemyCount)].GetValue<int>(); } set { this[nameof(EnemyCount)].SetValue<int>(value); } }
        public int ExtraEnemies { get { return this[nameof(ExtraEnemies)].GetValue<int>(); } set { this[nameof(ExtraEnemies)].SetValue<int>(value); } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public EnemyDescriptor EnemyTarget { get { return this[nameof(EnemyTarget)].As<EnemyDescriptor>(); } set { this["EnemyTarget"] = value; } }
        public int EnemiesKilled { get { return this[nameof(EnemiesKilled)].GetValue<int>(); } set { this[nameof(EnemiesKilled)].SetValue<int>(value); } }
        public int EnemiesToKill { get { return this[nameof(EnemiesToKill)].GetValue<int>(); } set { this[nameof(EnemiesToKill)].SetValue<int>(value); } }
        public void RegisterTargetSpawned(Pawn Target) { Invoke(nameof(RegisterTargetSpawned), Target); }
        public void ReceiveTargetKilled(HealthComponentBase Health) { Invoke(nameof(ReceiveTargetKilled), Health); }
        public void OnTargetKilled(HealthComponentBase Health) { Invoke(nameof(OnTargetKilled), Health); }
        public void OnRep_EnemiesToKill(int prevAmount) { Invoke(nameof(OnRep_EnemiesToKill), prevAmount); }
        public void OnRep_EnemiesKilled(int prevAmount) { Invoke(nameof(OnRep_EnemiesKilled), prevAmount); }
    }
    public class LaserPointerMarker : Actor
    {
        public LaserPointerMarker(nint addr) : base(addr) { }
        public LaserPointerData LookAtData { get { return this[nameof(LookAtData)].As<LaserPointerData>(); } set { this["LookAtData"] = value; } }
        public Actor LookAtActor { get { return this[nameof(LookAtActor)].As<Actor>(); } set { this["LookAtActor"] = value; } }
        public PrimitiveComponent LookAtComponent { get { return this[nameof(LookAtComponent)].As<PrimitiveComponent>(); } set { this["LookAtComponent"] = value; } }
        public TerrainMaterial LookAtTerrainMaterial { get { return this[nameof(LookAtTerrainMaterial)].As<TerrainMaterial>(); } set { this["LookAtTerrainMaterial"] = value; } }
        public PlayerCharacter GetCharacter() { return Invoke<PlayerCharacter>(nameof(GetCharacter)); }
    }
    public class LaserPointerWaypoint : Actor
    {
        public LaserPointerWaypoint(nint addr) : base(addr) { }
        public Object Character { get { return this[nameof(Character)]; } set { this[nameof(Character)] = value; } }
        public Object LaserPointer { get { return this[nameof(LaserPointer)]; } set { this[nameof(LaserPointer)] = value; } }
        public Vector Normal { get { return this[nameof(Normal)].As<Vector>(); } set { this["Normal"] = value; } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public void OnShow() { Invoke(nameof(OnShow)); }
        public void OnHide() { Invoke(nameof(OnHide)); }
    }
    public class LaserPointerItem : AnimatedItem
    {
        public LaserPointerItem(nint addr) : base(addr) { }
        public Object OnMarkerPlaced { get { return this[nameof(OnMarkerPlaced)]; } set { this[nameof(OnMarkerPlaced)] = value; } }
        public Object MarkerType { get { return this[nameof(MarkerType)]; } set { this[nameof(MarkerType)] = value; } }
        public Object SecondaryMarkerType { get { return this[nameof(SecondaryMarkerType)]; } set { this[nameof(SecondaryMarkerType)] = value; } }
        public Object ActiveMarker { get { return this[nameof(ActiveMarker)]; } set { this[nameof(ActiveMarker)] = value; } }
        public GameplayTagContainer enemyTags { get { return this[nameof(enemyTags)].As<GameplayTagContainer>(); } set { this["enemyTags"] = value; } }
        public Object WaypointType { get { return this[nameof(WaypointType)]; } set { this[nameof(WaypointType)] = value; } }
        public int MaxWaypoints { get { return this[nameof(MaxWaypoints)].GetValue<int>(); } set { this[nameof(MaxWaypoints)].SetValue<int>(value); } }
        public UArray<LaserPointerWaypoint> Waypoints { get { return new UArray<LaserPointerWaypoint>(this[nameof(Waypoints)].Address); } }
        public int NextWaypointIndex { get { return this[nameof(NextWaypointIndex)].GetValue<int>(); } set { this[nameof(NextWaypointIndex)].SetValue<int>(value); } }
        public float MarkerLifeTime { get { return this[nameof(MarkerLifeTime)].GetValue<float>(); } set { this[nameof(MarkerLifeTime)].SetValue<float>(value); } }
        public DialogDataAsset DefaultLookAtShout { get { return this[nameof(DefaultLookAtShout)].As<DialogDataAsset>(); } set { this["DefaultLookAtShout"] = value; } }
        public DialogDataAsset DefaultEnemyShout { get { return this[nameof(DefaultEnemyShout)].As<DialogDataAsset>(); } set { this["DefaultEnemyShout"] = value; } }
        public SceneComponent PointerComponent { get { return this[nameof(PointerComponent)].As<SceneComponent>(); } set { this["PointerComponent"] = value; } }
        public HitResult LookAtHit { get { return this[nameof(LookAtHit)].As<HitResult>(); } set { this["LookAtHit"] = value; } }
        public Object LookAtInfo { get { return this[nameof(LookAtInfo)]; } set { this[nameof(LookAtInfo)] = value; } }
        public Object LookAtTerrainMaterial { get { return this[nameof(LookAtTerrainMaterial)]; } set { this[nameof(LookAtTerrainMaterial)] = value; } }
        public LaserPointerData LookAtData { get { return this[nameof(LookAtData)].As<LaserPointerData>(); } set { this["LookAtData"] = value; } }
        public float LookAtDistance { get { return this[nameof(LookAtDistance)].GetValue<float>(); } set { this[nameof(LookAtDistance)].SetValue<float>(value); } }
        public DialogDataAsset LookAtShout { get { return this[nameof(LookAtShout)].As<DialogDataAsset>(); } set { this["LookAtShout"] = value; } }
        public DialogDataAsset MissionControlLookAtShout { get { return this[nameof(MissionControlLookAtShout)].As<DialogDataAsset>(); } set { this["MissionControlLookAtShout"] = value; } }
        public FSDGameState GameState { get { return this[nameof(GameState)].As<FSDGameState>(); } set { this["GameState"] = value; } }
        public void UnlockToMinersManual(Object WorldContextObject, Guid ObjectID) { Invoke(nameof(UnlockToMinersManual), WorldContextObject, ObjectID); }
        public void ToggleLaserVisible(bool aVisible) { Invoke(nameof(ToggleLaserVisible), aVisible); }
        public void ServerPlaceMarker(Vector Location, Vector Normal, Actor Actor, PrimitiveComponent Cmponent, TerrainMaterial TerrainMaterial, ELaserPointerMarkerType eMarkerType) { Invoke(nameof(ServerPlaceMarker), Location, Normal, Actor, Cmponent, TerrainMaterial, eMarkerType); }
        public void Server_SecondaryUse(Vector Location, Vector Normal, Actor Actor, PrimitiveComponent Cmponent, TerrainMaterial TerrainMaterial) { Invoke(nameof(Server_SecondaryUse), Location, Normal, Actor, Cmponent, TerrainMaterial); }
        public void OnPointOfInterest(Actor TargetActor, Vector TargetLocation, Texture2D TargetIcon) { Invoke(nameof(OnPointOfInterest), TargetActor, TargetLocation, TargetIcon); }
        public void GetPointTransform(Transform PointTransform) { Invoke(nameof(GetPointTransform), PointTransform); }
        public Vector GetActiveMarkerLocation() { return Invoke<Vector>(nameof(GetActiveMarkerLocation)); }
    }
    public class LegacySettings : DataAsset
    {
        public LegacySettings(nint addr) : base(addr) { }
        public UArray<Object> ArmorMeshes { get { return new UArray<Object>(this[nameof(ArmorMeshes)].Address); } }
    }
    public class LevelGenerationDebris : ActorComponent
    {
        public LevelGenerationDebris(nint addr) : base(addr) { }
        public DebrisBase Debris { get { return this[nameof(Debris)].As<DebrisBase>(); } set { this["Debris"] = value; } }
        public Object Influencer { get { return this[nameof(Influencer)].As<Object>(); } set { this["Influencer"] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public bool SelfActivate { get { return this[nameof(SelfActivate)].Flag; } set { this[nameof(SelfActivate)].Flag = value; } }
    }
    public class LightStrobingComponent : ActorComponent
    {
        public LightStrobingComponent(nint addr) : base(addr) { }
        public LightStrobeChannel DefaultChannel { get { return this[nameof(DefaultChannel)].As<LightStrobeChannel>(); } set { this["DefaultChannel"] = value; } }
        public float PhotosensitiveMultiplier { get { return this[nameof(PhotosensitiveMultiplier)].GetValue<float>(); } set { this[nameof(PhotosensitiveMultiplier)].SetValue<float>(value); } }
        public bool AutoSetup { get { return this[nameof(AutoSetup)].Flag; } set { this[nameof(AutoSetup)].Flag = value; } }
        public void StopLoop(int Channel) { Invoke(nameof(StopLoop), Channel); }
        public void AddMesh(MeshComponent Mesh) { Invoke(nameof(AddMesh), Mesh); }
        public void AddMaterial(MaterialInstanceDynamic Mid) { Invoke(nameof(AddMaterial), Mid); }
        public void AddLight(PointLightComponent Light) { Invoke(nameof(AddLight), Light); }
    }
    public class LimbDismembermentList : DataAsset
    {
        public LimbDismembermentList(nint addr) : base(addr) { }
        public UArray<Object> Bones { get { return new UArray<Object>(this[nameof(Bones)].Address); } }
    }
    public class GibPartsList : DataAsset
    {
        public GibPartsList(nint addr) : base(addr) { }
        public UArray<StaticMesh> GibMeshes { get { return new UArray<StaticMesh>(this[nameof(GibMeshes)].Address); } }
        public void SetGibMeshesAndMaterialsOnFX(NiagaraComponent ns, MaterialInstance Material, float Scale) { Invoke(nameof(SetGibMeshesAndMaterialsOnFX), ns, Material, Scale); }
    }
    public class LineSegmentCarverComponent : GenerationComponent
    {
        public LineSegmentCarverComponent(nint addr) : base(addr) { }
        public UArray<LineSegmentCarverPoint> LinePoints { get { return new UArray<LineSegmentCarverPoint>(this[nameof(LinePoints)].Address); } }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
        public int Layer { get { return this[nameof(Layer)].GetValue<int>(); } set { this[nameof(Layer)].SetValue<int>(value); } }
        public float Cielingheight { get { return this[nameof(Cielingheight)].GetValue<float>(); } set { this[nameof(Cielingheight)].SetValue<float>(value); } }
        public float FloorDepth { get { return this[nameof(FloorDepth)].GetValue<float>(); } set { this[nameof(FloorDepth)].SetValue<float>(value); } }
        public FloodFillSettings CeilingNoiseOverride { get { return this[nameof(CeilingNoiseOverride)].As<FloodFillSettings>(); } set { this["CeilingNoiseOverride"] = value; } }
        public FloodFillSettings WallNoiseOverride { get { return this[nameof(WallNoiseOverride)].As<FloodFillSettings>(); } set { this["WallNoiseOverride"] = value; } }
        public FloodFillSettings FloorNoiseOverride { get { return this[nameof(FloorNoiseOverride)].As<FloodFillSettings>(); } set { this["FloorNoiseOverride"] = value; } }
        public bool UseDetailNoise { get { return this[nameof(UseDetailNoise)].Flag; } set { this[nameof(UseDetailNoise)].Flag = value; } }
    }
    public class LineSegmentCarver : GenerationItem
    {
        public LineSegmentCarver(nint addr) : base(addr) { }
        public LineSegmentCarverComponent LineComponent { get { return this[nameof(LineComponent)].As<LineSegmentCarverComponent>(); } set { this["LineComponent"] = value; } }
    }
    public class LineCutterProjectile : Projectile
    {
        public LineCutterProjectile(nint addr) : base(addr) { }
        public ScaledEffect EletricHitEffect { get { return this[nameof(EletricHitEffect)].As<ScaledEffect>(); } set { this["EletricHitEffect"] = value; } }
        public ScaledEffect ProjectileDisappearEffect { get { return this[nameof(ProjectileDisappearEffect)].As<ScaledEffect>(); } set { this["ProjectileDisappearEffect"] = value; } }
        public float SwipeRadius { get { return this[nameof(SwipeRadius)].GetValue<float>(); } set { this[nameof(SwipeRadius)].SetValue<float>(value); } }
        public float DoubleLineDistanceMultiplier { get { return this[nameof(DoubleLineDistanceMultiplier)].GetValue<float>(); } set { this[nameof(DoubleLineDistanceMultiplier)].SetValue<float>(value); } }
        public float OverlapRadius { get { return this[nameof(OverlapRadius)].GetValue<float>(); } set { this[nameof(OverlapRadius)].SetValue<float>(value); } }
        public bool DestroyOnTerrainCollision { get { return this[nameof(DestroyOnTerrainCollision)].Flag; } set { this[nameof(DestroyOnTerrainCollision)].Flag = value; } }
        public bool IsDead { get { return this[nameof(IsDead)].Flag; } set { this[nameof(IsDead)].Flag = value; } }
        public bool bHasReversedDirection { get { return this[nameof(bHasReversedDirection)].Flag; } set { this[nameof(bHasReversedDirection)].Flag = value; } }
        public bool bIsHoming { get { return this[nameof(bIsHoming)].Flag; } set { this[nameof(bIsHoming)].Flag = value; } }
        public float FlyStraighTime { get { return this[nameof(FlyStraighTime)].GetValue<float>(); } set { this[nameof(FlyStraighTime)].SetValue<float>(value); } }
        public EImpactDecalSize EletricDecalSize { get { return (EImpactDecalSize)this[nameof(EletricDecalSize)].GetValue<int>(); } set { this[nameof(EletricDecalSize)].SetValue<int>((int)value); } }
        public EImpactDecalSize ImpactDecalSize { get { return (EImpactDecalSize)this[nameof(ImpactDecalSize)].GetValue<int>(); } set { this[nameof(ImpactDecalSize)].SetValue<int>((int)value); } }
        public Object OnLineDestroy { get { return this[nameof(OnLineDestroy)]; } set { this[nameof(OnLineDestroy)] = value; } }
        public Object OnLineLifespanEnd { get { return this[nameof(OnLineLifespanEnd)]; } set { this[nameof(OnLineLifespanEnd)] = value; } }
        public Object OnPerformHit { get { return this[nameof(OnPerformHit)]; } set { this[nameof(OnPerformHit)] = value; } }
        public Object OnLineEffectHide { get { return this[nameof(OnLineEffectHide)]; } set { this[nameof(OnLineEffectHide)] = value; } }
        public Vector LeftLastPosition { get { return this[nameof(LeftLastPosition)].As<Vector>(); } set { this["LeftLastPosition"] = value; } }
        public Vector RightLastPosition { get { return this[nameof(RightLastPosition)].As<Vector>(); } set { this["RightLastPosition"] = value; } }
        public SceneComponent LineRoot { get { return this[nameof(LineRoot)].As<SceneComponent>(); } set { this["LineRoot"] = value; } }
        public SceneComponent LeftSphere { get { return this[nameof(LeftSphere)].As<SceneComponent>(); } set { this["LeftSphere"] = value; } }
        public SceneComponent RightSphere { get { return this[nameof(RightSphere)].As<SceneComponent>(); } set { this["RightSphere"] = value; } }
        public SceneComponent LeftSphere2 { get { return this[nameof(LeftSphere2)].As<SceneComponent>(); } set { this["LeftSphere2"] = value; } }
        public SceneComponent RightSphere2 { get { return this[nameof(RightSphere2)].As<SceneComponent>(); } set { this["RightSphere2"] = value; } }
        public SceneComponent LeftSphere3 { get { return this[nameof(LeftSphere3)].As<SceneComponent>(); } set { this["LeftSphere3"] = value; } }
        public SceneComponent RightSphere3 { get { return this[nameof(RightSphere3)].As<SceneComponent>(); } set { this["RightSphere3"] = value; } }
        public ParticleSystemComponent BeamParticle { get { return this[nameof(BeamParticle)].As<ParticleSystemComponent>(); } set { this["BeamParticle"] = value; } }
        public ParticleSystemComponent BeamParticle2 { get { return this[nameof(BeamParticle2)].As<ParticleSystemComponent>(); } set { this["BeamParticle2"] = value; } }
        public ParticleSystemComponent BeamParticle3 { get { return this[nameof(BeamParticle3)].As<ParticleSystemComponent>(); } set { this["BeamParticle3"] = value; } }
        public ParticleSystemComponent LeftHitParticles { get { return this[nameof(LeftHitParticles)].As<ParticleSystemComponent>(); } set { this["LeftHitParticles"] = value; } }
        public ParticleSystemComponent RightHitParticles { get { return this[nameof(RightHitParticles)].As<ParticleSystemComponent>(); } set { this["RightHitParticles"] = value; } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public Rotator LineRotation { get { return this[nameof(LineRotation)].As<Rotator>(); } set { this["LineRotation"] = value; } }
        public ELineRotation RotationMode { get { return (ELineRotation)this[nameof(RotationMode)].GetValue<int>(); } set { this[nameof(RotationMode)].SetValue<int>((int)value); } }
        public bool ShouldExplode { get { return this[nameof(ShouldExplode)].Flag; } set { this[nameof(ShouldExplode)].Flag = value; } }
        public bool OnlyOne { get { return this[nameof(OnlyOne)].Flag; } set { this[nameof(OnlyOne)].Flag = value; } }
        public bool IsDoubleLine { get { return this[nameof(IsDoubleLine)].Flag; } set { this[nameof(IsDoubleLine)].Flag = value; } }
        public bool HasPlasmaTrail { get { return this[nameof(HasPlasmaTrail)].Flag; } set { this[nameof(HasPlasmaTrail)].Flag = value; } }
        public float LineMaxSize { get { return this[nameof(LineMaxSize)].GetValue<float>(); } set { this[nameof(LineMaxSize)].SetValue<float>(value); } }
        public float LineExpansionDelay { get { return this[nameof(LineExpansionDelay)].GetValue<float>(); } set { this[nameof(LineExpansionDelay)].SetValue<float>(value); } }
        public float TimeToLineExpansion { get { return this[nameof(TimeToLineExpansion)].GetValue<float>(); } set { this[nameof(TimeToLineExpansion)].SetValue<float>(value); } }
        public float FireRate { get { return this[nameof(FireRate)].GetValue<float>(); } set { this[nameof(FireRate)].SetValue<float>(value); } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public DamageComponent InitialDamageComponent { get { return this[nameof(InitialDamageComponent)].As<DamageComponent>(); } set { this["InitialDamageComponent"] = value; } }
        public int InitialHitDamageMultiplier { get { return this[nameof(InitialHitDamageMultiplier)].GetValue<int>(); } set { this[nameof(InitialHitDamageMultiplier)].SetValue<int>(value); } }
        public float InhibitImpactDecalsTime { get { return this[nameof(InhibitImpactDecalsTime)].GetValue<float>(); } set { this[nameof(InhibitImpactDecalsTime)].SetValue<float>(value); } }
        public float MinTimeBetweenImpactDecals { get { return this[nameof(MinTimeBetweenImpactDecals)].GetValue<float>(); } set { this[nameof(MinTimeBetweenImpactDecals)].SetValue<float>(value); } }
        public void UpdateBeamLocations() { Invoke(nameof(UpdateBeamLocations)); }
        public void TerrainSweep(Vector Left, Vector Right) { Invoke(nameof(TerrainSweep), Left, Right); }
        public void StartSpawningTrail() { Invoke(nameof(StartSpawningTrail)); }
        public void SpawnDecal(HitResult Result) { Invoke(nameof(SpawnDecal), Result); }
        public void SetExtraBeamVisibility(bool IsVisible) { Invoke(nameof(SetExtraBeamVisibility), IsVisible); }
        public void Server_RemoveDebris(int instance, int Component) { Invoke(nameof(Server_RemoveDebris), instance, Component); }
        public void PerformHit__DelegateSignature(HitResult Result) { Invoke(nameof(PerformHit__DelegateSignature), Result); }
        public void OnRep_LineRotation() { Invoke(nameof(OnRep_LineRotation)); }
        public void LineLifeSpanDestroy__DelegateSignature() { Invoke(nameof(LineLifeSpanDestroy__DelegateSignature)); }
        public void LineEffectHide__DelegateSignature() { Invoke(nameof(LineEffectHide__DelegateSignature)); }
        public void LineDestroy__DelegateSignature(HitResult Result) { Invoke(nameof(LineDestroy__DelegateSignature), Result); }
        public void Fire(Vector Origin, Vector Direction, float Distance) { Invoke(nameof(Fire), Origin, Direction, Distance); }
    }
    public class GuntowerLineProjectile : Projectile
    {
        public GuntowerLineProjectile(nint addr) : base(addr) { }
        public Object OnLineDestroy { get { return this[nameof(OnLineDestroy)]; } set { this[nameof(OnLineDestroy)] = value; } }
        public SceneComponent LeftLinePoint { get { return this[nameof(LeftLinePoint)].As<SceneComponent>(); } set { this["LeftLinePoint"] = value; } }
        public SceneComponent RightLinePoint { get { return this[nameof(RightLinePoint)].As<SceneComponent>(); } set { this["RightLinePoint"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public ParticleSystemComponent BeamParticles { get { return this[nameof(BeamParticles)].As<ParticleSystemComponent>(); } set { this["BeamParticles"] = value; } }
        public float PlatformDissolveRadius { get { return this[nameof(PlatformDissolveRadius)].GetValue<float>(); } set { this[nameof(PlatformDissolveRadius)].SetValue<float>(value); } }
        public float PlatformDissolveSqueeze { get { return this[nameof(PlatformDissolveSqueeze)].GetValue<float>(); } set { this[nameof(PlatformDissolveSqueeze)].SetValue<float>(value); } }
        public ParticleSystemComponent HitParticles { get { return this[nameof(HitParticles)].As<ParticleSystemComponent>(); } set { this["HitParticles"] = value; } }
        public float TimeBetweenLineChecks { get { return this[nameof(TimeBetweenLineChecks)].GetValue<float>(); } set { this[nameof(TimeBetweenLineChecks)].SetValue<float>(value); } }
        public void TurnOffParticles() { Invoke(nameof(TurnOffParticles)); }
        public void LineDestroy__DelegateSignature(HitResult Result) { Invoke(nameof(LineDestroy__DelegateSignature), Result); }
        public void Fire(Vector Origin, Vector Direction, float Distance) { Invoke(nameof(Fire), Origin, Direction, Distance); }
    }
    public class LineSegmentFillerComponent : GenerationComponent
    {
        public LineSegmentFillerComponent(nint addr) : base(addr) { }
        public UArray<LineSegmentFillerPoint> LinePoints { get { return new UArray<LineSegmentFillerPoint>(this[nameof(LinePoints)].Address); } }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
        public FloodFillSettings NoiseOverride { get { return this[nameof(NoiseOverride)].As<FloodFillSettings>(); } set { this["NoiseOverride"] = value; } }
        public RandRange RangeScale { get { return this[nameof(RangeScale)].As<RandRange>(); } set { this["RangeScale"] = value; } }
        public RandRange NoiseRangeScale { get { return this[nameof(NoiseRangeScale)].As<RandRange>(); } set { this["NoiseRangeScale"] = value; } }
    }
    public class LineSegmentFiller : GenerationItem
    {
        public LineSegmentFiller(nint addr) : base(addr) { }
        public LineSegmentFillerComponent LineComponent { get { return this[nameof(LineComponent)].As<LineSegmentFillerComponent>(); } set { this["LineComponent"] = value; } }
    }
    public class LineSpikeTaskBase : Object
    {
        public LineSpikeTaskBase(nint addr) : base(addr) { }
    }
    public class WaitTask : LineSpikeTaskBase
    {
        public WaitTask(nint addr) : base(addr) { }
        public float WaitTime { get { return this[nameof(WaitTime)].GetValue<float>(); } set { this[nameof(WaitTime)].SetValue<float>(value); } }
        public bool SkipIfLast { get { return this[nameof(SkipIfLast)].Flag; } set { this[nameof(SkipIfLast)].Flag = value; } }
        public bool OnlyOnce { get { return this[nameof(OnlyOnce)].Flag; } set { this[nameof(OnlyOnce)].Flag = value; } }
    }
    public class PlayEffectsTask : LineSpikeTaskBase
    {
        public PlayEffectsTask(nint addr) : base(addr) { }
    }
    public class ShootTask : LineSpikeTaskBase
    {
        public ShootTask(nint addr) : base(addr) { }
        public bool HasToFinish { get { return this[nameof(HasToFinish)].Flag; } set { this[nameof(HasToFinish)].Flag = value; } }
    }
    public class AquireTargetTask : LineSpikeTaskBase
    {
        public AquireTargetTask(nint addr) : base(addr) { }
        public bool ForceNewTarget { get { return this[nameof(ForceNewTarget)].Flag; } set { this[nameof(ForceNewTarget)].Flag = value; } }
    }
    public class SpecialAttackComponent : AttackBaseComponent
    {
        public SpecialAttackComponent(nint addr) : base(addr) { }
        public UArray<AnimMontage> Montages { get { return new UArray<AnimMontage>(this[nameof(Montages)].Address); } }
        public Object OnAttackActionNotify { get { return this[nameof(OnAttackActionNotify)]; } set { this[nameof(OnAttackActionNotify)] = value; } }
        public void TriggerAttack(Object Name) { Invoke(nameof(TriggerAttack), Name); }
        public AnimMontage SelectMontage() { return Invoke<AnimMontage>(nameof(SelectMontage)); }
        public void Receive_OnPerformAttack() { Invoke(nameof(Receive_OnPerformAttack)); }
        public void Receive_OnAborted() { Invoke(nameof(Receive_OnAborted)); }
        public void OnMontageEnded(AnimMontage Montage, bool interrupted) { Invoke(nameof(OnMontageEnded), Montage, interrupted); }
        public void OnFrozen(bool IsFrozen) { Invoke(nameof(OnFrozen), IsFrozen); }
    }
    public class LineSpikeAttack : SpecialAttackComponent
    {
        public LineSpikeAttack(nint addr) : base(addr) { }
        public MaterialInterface TentacleMaterial { get { return this[nameof(TentacleMaterial)].As<MaterialInterface>(); } set { this["TentacleMaterial"] = value; } }
        public MaterialInstance ActiveMaterial { get { return this[nameof(ActiveMaterial)].As<MaterialInstance>(); } set { this["ActiveMaterial"] = value; } }
        public UArray<Object> ActiveParticles { get { return new UArray<Object>(this[nameof(ActiveParticles)].Address); } }
        public NiagaraSystem TentacleImpactParticles { get { return this[nameof(TentacleImpactParticles)].As<NiagaraSystem>(); } set { this["TentacleImpactParticles"] = value; } }
        public NiagaraSystem StartWaveParticles { get { return this[nameof(StartWaveParticles)].As<NiagaraSystem>(); } set { this["StartWaveParticles"] = value; } }
        public SoundCue TentacleImpactSound { get { return this[nameof(TentacleImpactSound)].As<SoundCue>(); } set { this["TentacleImpactSound"] = value; } }
        public SoundCue TentacleExitSound { get { return this[nameof(TentacleExitSound)].As<SoundCue>(); } set { this["TentacleExitSound"] = value; } }
        public SoundCue StartWaveSound { get { return this[nameof(StartWaveSound)].As<SoundCue>(); } set { this["StartWaveSound"] = value; } }
        public NiagaraComponent Tentacles { get { return this[nameof(Tentacles)].As<NiagaraComponent>(); } set { this["Tentacles"] = value; } }
        public UArray<LineSpikeTaskBase> Sequence { get { return new UArray<LineSpikeTaskBase>(this[nameof(Sequence)].Address); } }
        public UArray<Actor> Children { get { return new UArray<Actor>(this[nameof(Children)].Address); } }
        public int SequenceLoops { get { return this[nameof(SequenceLoops)].GetValue<int>(); } set { this[nameof(SequenceLoops)].SetValue<int>(value); } }
        public Object SpikeClass { get { return this[nameof(SpikeClass)]; } set { this[nameof(SpikeClass)] = value; } }
        public bool TentaclesBurried { get { return this[nameof(TentaclesBurried)].Flag; } set { this[nameof(TentaclesBurried)].Flag = value; } }
        public float MaxStepUpheight { get { return this[nameof(MaxStepUpheight)].GetValue<float>(); } set { this[nameof(MaxStepUpheight)].SetValue<float>(value); } }
        public float firstSpikeDelay { get { return this[nameof(firstSpikeDelay)].GetValue<float>(); } set { this[nameof(firstSpikeDelay)].SetValue<float>(value); } }
        public float firstSpikeExtraDistance { get { return this[nameof(firstSpikeExtraDistance)].GetValue<float>(); } set { this[nameof(firstSpikeExtraDistance)].SetValue<float>(value); } }
        public float MaxDistanceToGround { get { return this[nameof(MaxDistanceToGround)].GetValue<float>(); } set { this[nameof(MaxDistanceToGround)].SetValue<float>(value); } }
        public float DistanceBetweenSpikes { get { return this[nameof(DistanceBetweenSpikes)].GetValue<float>(); } set { this[nameof(DistanceBetweenSpikes)].SetValue<float>(value); } }
        public float TimeBetweenSpikes { get { return this[nameof(TimeBetweenSpikes)].GetValue<float>(); } set { this[nameof(TimeBetweenSpikes)].SetValue<float>(value); } }
        public float TentacleStretchPower { get { return this[nameof(TentacleStretchPower)].GetValue<float>(); } set { this[nameof(TentacleStretchPower)].SetValue<float>(value); } }
        public float TentacleSearchDistance { get { return this[nameof(TentacleSearchDistance)].GetValue<float>(); } set { this[nameof(TentacleSearchDistance)].SetValue<float>(value); } }
        public float TentacleInGroundOffset { get { return this[nameof(TentacleInGroundOffset)].GetValue<float>(); } set { this[nameof(TentacleInGroundOffset)].SetValue<float>(value); } }
        public int MinSpikeCount { get { return this[nameof(MinSpikeCount)].GetValue<int>(); } set { this[nameof(MinSpikeCount)].SetValue<int>(value); } }
        public int MaxFails { get { return this[nameof(MaxFails)].GetValue<int>(); } set { this[nameof(MaxFails)].SetValue<int>(value); } }
        public void OnRep_TentaclesBurried() { Invoke(nameof(OnRep_TentaclesBurried)); }
        public void All_PlayEffects() { Invoke(nameof(All_PlayEffects)); }
    }
    public class LoadoutFunctionLibrary : BlueprintFunctionLibrary
    {
        public LoadoutFunctionLibrary(nint addr) : base(addr) { }
        public void SetCurrLoadout(Object WorldContextObject, PlayerCharacterID PlayerId, LoadoutCopy newLoadout) { Invoke(nameof(SetCurrLoadout), WorldContextObject, PlayerId, newLoadout); }
        public void RandomizeWeaponLoadout(Object WorldContextObject, PlayerCharacterID PlayerId, int loadoutIndex) { Invoke(nameof(RandomizeWeaponLoadout), WorldContextObject, PlayerId, loadoutIndex); }
        public void RandomizeAllRandomWeaponLoadout(PlayerCharacter Player) { Invoke(nameof(RandomizeAllRandomWeaponLoadout), Player); }
        public LoadoutCopy GetCurrentLoadout(Object WorldContextObject, PlayerCharacterID PlayerId) { return Invoke<LoadoutCopy>(nameof(GetCurrentLoadout), WorldContextObject, PlayerId); }
        public void CopyPasteWeaponLoadout(Object WorldContextObject, PlayerCharacterID PlayerId, int fromIndex, int toIndex) { Invoke(nameof(CopyPasteWeaponLoadout), WorldContextObject, PlayerId, fromIndex, toIndex); }
    }
    public class LoadoutItem : Interface
    {
        public LoadoutItem(nint addr) : base(addr) { }
        public Object GetLoadoutItemClass() { return Invoke<Object>(nameof(GetLoadoutItemClass)); }
    }
    public class LoadoutItemProxy : Item
    {
        public LoadoutItemProxy(nint addr) : base(addr) { }
        public ItemCharacterAnimationSet AnimationSet { get { return this[nameof(AnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["AnimationSet"] = value; } }
        public ItemLoadoutAnimations LoadoutAnimations { get { return this[nameof(LoadoutAnimations)].As<ItemLoadoutAnimations>(); } set { this["LoadoutAnimations"] = value; } }
        public Object GetLoadoutItemFromClass(Object actorClass) { return Invoke<Object>(nameof(GetLoadoutItemFromClass), actorClass); }
    }
    public class LocalizationFunctionLibrary : BlueprintFunctionLibrary
    {
        public LocalizationFunctionLibrary(nint addr) : base(addr) { }
        public UArray<LocalizedLanguageInfo> GetLocalizedLanguages() { return Invoke<UArray<LocalizedLanguageInfo>>(nameof(GetLocalizedLanguages)); }
    }
    public class FSDLocalizationSettings : DeveloperSettings
    {
        public FSDLocalizationSettings(nint addr) : base(addr) { }
        public UArray<FSDTranslationProgress> CommunityTranslationProgress { get { return new UArray<FSDTranslationProgress>(this[nameof(CommunityTranslationProgress)].Address); } }
    }
    public class LockOnBeam : Actor
    {
        public LockOnBeam(nint addr) : base(addr) { }
        public SplineComponent BeamSpline { get { return this[nameof(BeamSpline)].As<SplineComponent>(); } set { this["BeamSpline"] = value; } }
        public SplineMeshComponent BeamMeshComponent01 { get { return this[nameof(BeamMeshComponent01)].As<SplineMeshComponent>(); } set { this["BeamMeshComponent01"] = value; } }
        public SplineMeshComponent BeamMeshComponent02 { get { return this[nameof(BeamMeshComponent02)].As<SplineMeshComponent>(); } set { this["BeamMeshComponent02"] = value; } }
        public SplineMeshComponent BeamMeshComponent03 { get { return this[nameof(BeamMeshComponent03)].As<SplineMeshComponent>(); } set { this["BeamMeshComponent03"] = value; } }
        public SceneComponent BlockedNodeComponent { get { return this[nameof(BlockedNodeComponent)].As<SceneComponent>(); } set { this["BlockedNodeComponent"] = value; } }
        public SceneComponent PreviewLocationComponent { get { return this[nameof(PreviewLocationComponent)].As<SceneComponent>(); } set { this["PreviewLocationComponent"] = value; } }
        public MaterialInterface BeamMaterial { get { return this[nameof(BeamMaterial)].As<MaterialInterface>(); } set { this["BeamMaterial"] = value; } }
        public MaterialInterface BlockedBeamMaterial { get { return this[nameof(BlockedBeamMaterial)].As<MaterialInterface>(); } set { this["BlockedBeamMaterial"] = value; } }
        public MaterialInterface SeekerMaterial { get { return this[nameof(SeekerMaterial)].As<MaterialInterface>(); } set { this["SeekerMaterial"] = value; } }
        public float BeamThicknessScale { get { return this[nameof(BeamThicknessScale)].GetValue<float>(); } set { this[nameof(BeamThicknessScale)].SetValue<float>(value); } }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public Object TargetActor { get { return this[nameof(TargetActor)]; } set { this[nameof(TargetActor)] = value; } }
        public BeamCollision Collision { get { return this[nameof(Collision)].As<BeamCollision>(); } set { this["Collision"] = value; } }
        public void ReceiveItemSet() { Invoke(nameof(ReceiveItemSet)); }
    }
    public class LockOnTrackingWidget : ActorTrackingWidget
    {
        public LockOnTrackingWidget(nint addr) : base(addr) { }
        public void OnLockOn(int numberOfLockOnsOnThisTarget, int totalNumberOfLockOns) { Invoke(nameof(OnLockOn), numberOfLockOnsOnThisTarget, totalNumberOfLockOns); }
        public void OnFireComplete(int numberOfLockOnsOnThisTarget) { Invoke(nameof(OnFireComplete), numberOfLockOnsOnThisTarget); }
        public void CleanUpWidget(bool showFade) { Invoke(nameof(CleanUpWidget), showFade); }
    }
    public class LockOnWeapon : AmmoDrivenWeapon
    {
        public LockOnWeapon(nint addr) : base(addr) { }
        public Object OnLockingStarted { get { return this[nameof(OnLockingStarted)]; } set { this[nameof(OnLockingStarted)] = value; } }
        public Object OnLockingStopped { get { return this[nameof(OnLockingStopped)]; } set { this[nameof(OnLockingStopped)] = value; } }
        public Object OnMaxTargetsChanged { get { return this[nameof(OnMaxTargetsChanged)]; } set { this[nameof(OnMaxTargetsChanged)] = value; } }
        public Object OnLockOnCountChanged { get { return this[nameof(OnLockOnCountChanged)]; } set { this[nameof(OnLockOnCountChanged)] = value; } }
        public Object OnLockonTargetRotationUpdated { get { return this[nameof(OnLockonTargetRotationUpdated)]; } set { this[nameof(OnLockonTargetRotationUpdated)] = value; } }
        public Actor AimTarget { get { return this[nameof(AimTarget)].As<Actor>(); } set { this["AimTarget"] = value; } }
        public float LockOnDamageMultiplier { get { return this[nameof(LockOnDamageMultiplier)].GetValue<float>(); } set { this[nameof(LockOnDamageMultiplier)].SetValue<float>(value); } }
        public int ShotsPerTarget { get { return this[nameof(ShotsPerTarget)].GetValue<int>(); } set { this[nameof(ShotsPerTarget)].SetValue<int>(value); } }
        public int MaxTargets { get { return this[nameof(MaxTargets)].GetValue<int>(); } set { this[nameof(MaxTargets)].SetValue<int>(value); } }
        public float TimeBetweenLockedShots { get { return this[nameof(TimeBetweenLockedShots)].GetValue<float>(); } set { this[nameof(TimeBetweenLockedShots)].SetValue<float>(value); } }
        public float LockOnTime { get { return this[nameof(LockOnTime)].GetValue<float>(); } set { this[nameof(LockOnTime)].SetValue<float>(value); } }
        public float MaxLockOnDegree { get { return this[nameof(MaxLockOnDegree)].GetValue<float>(); } set { this[nameof(MaxLockOnDegree)].SetValue<float>(value); } }
        public float LoseLockOnDegree { get { return this[nameof(LoseLockOnDegree)].GetValue<float>(); } set { this[nameof(LoseLockOnDegree)].SetValue<float>(value); } }
        public float DegreeTolerance { get { return this[nameof(DegreeTolerance)].GetValue<float>(); } set { this[nameof(DegreeTolerance)].SetValue<float>(value); } }
        public float MaxLockOnRange { get { return this[nameof(MaxLockOnRange)].GetValue<float>(); } set { this[nameof(MaxLockOnRange)].SetValue<float>(value); } }
        public bool bPrioritizeLowHitPoint { get { return this[nameof(bPrioritizeLowHitPoint)].Flag; } set { this[nameof(bPrioritizeLowHitPoint)].Flag = value; } }
        public bool bAlwaysHitTarget { get { return this[nameof(bAlwaysHitTarget)].Flag; } set { this[nameof(bAlwaysHitTarget)].Flag = value; } }
        public float MaxLockOnDuration { get { return this[nameof(MaxLockOnDuration)].GetValue<float>(); } set { this[nameof(MaxLockOnDuration)].SetValue<float>(value); } }
        public float RateOfFireLockedOnModifier { get { return this[nameof(RateOfFireLockedOnModifier)].GetValue<float>(); } set { this[nameof(RateOfFireLockedOnModifier)].SetValue<float>(value); } }
        public bool bLockOnControlsSentryGun { get { return this[nameof(bLockOnControlsSentryGun)].Flag; } set { this[nameof(bLockOnControlsSentryGun)].Flag = value; } }
        public bool bSentryGunShootsOnLockedShot { get { return this[nameof(bSentryGunShootsOnLockedShot)].Flag; } set { this[nameof(bSentryGunShootsOnLockedShot)].Flag = value; } }
        public Object TrackingWidgetClass { get { return this[nameof(TrackingWidgetClass)]; } set { this[nameof(TrackingWidgetClass)] = value; } }
        public Object LockOnBeamClass { get { return this[nameof(LockOnBeamClass)]; } set { this[nameof(LockOnBeamClass)] = value; } }
        public Object AoeActorClass { get { return this[nameof(AoeActorClass)]; } set { this[nameof(AoeActorClass)] = value; } }
        public int AoeHitCountThreshhold { get { return this[nameof(AoeHitCountThreshhold)].GetValue<int>(); } set { this[nameof(AoeHitCountThreshhold)].SetValue<int>(value); } }
        public bool UseLockOnTargetStatusEffect { get { return this[nameof(UseLockOnTargetStatusEffect)].Flag; } set { this[nameof(UseLockOnTargetStatusEffect)].Flag = value; } }
        public Object LockOnTargetStatusEffect { get { return this[nameof(LockOnTargetStatusEffect)]; } set { this[nameof(LockOnTargetStatusEffect)] = value; } }
        public int PushStatusEffectEveryXLock { get { return this[nameof(PushStatusEffectEveryXLock)].GetValue<int>(); } set { this[nameof(PushStatusEffectEveryXLock)].SetValue<int>(value); } }
        public int LockOnCount { get { return this[nameof(LockOnCount)].GetValue<int>(); } set { this[nameof(LockOnCount)].SetValue<int>(value); } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public HitscanComponent HitscanComponent { get { return this[nameof(HitscanComponent)].As<HitscanComponent>(); } set { this["HitscanComponent"] = value; } }
        public TracerData ChargedShotTracer { get { return this[nameof(ChargedShotTracer)].As<TracerData>(); } set { this["ChargedShotTracer"] = value; } }
        public float ChargeSpeed { get { return this[nameof(ChargeSpeed)].GetValue<float>(); } set { this[nameof(ChargeSpeed)].SetValue<float>(value); } }
        public float SlowMovementAtCharge { get { return this[nameof(SlowMovementAtCharge)].GetValue<float>(); } set { this[nameof(SlowMovementAtCharge)].SetValue<float>(value); } }
        public bool FearEnabled { get { return this[nameof(FearEnabled)].Flag; } set { this[nameof(FearEnabled)].Flag = value; } }
        public float FearFactorBase { get { return this[nameof(FearFactorBase)].GetValue<float>(); } set { this[nameof(FearFactorBase)].SetValue<float>(value); } }
        public float FearFactorPerShotBonus { get { return this[nameof(FearFactorPerShotBonus)].GetValue<float>(); } set { this[nameof(FearFactorPerShotBonus)].SetValue<float>(value); } }
        public float FearRange { get { return this[nameof(FearRange)].GetValue<float>(); } set { this[nameof(FearRange)].SetValue<float>(value); } }
        public float FearRangePerShotBonus { get { return this[nameof(FearRangePerShotBonus)].GetValue<float>(); } set { this[nameof(FearRangePerShotBonus)].SetValue<float>(value); } }
        public bool IsMovementSlowed { get { return this[nameof(IsMovementSlowed)].Flag; } set { this[nameof(IsMovementSlowed)].Flag = value; } }
        public bool Charging { get { return this[nameof(Charging)].Flag; } set { this[nameof(Charging)].Flag = value; } }
        public float ChargeProgress { get { return this[nameof(ChargeProgress)].GetValue<float>(); } set { this[nameof(ChargeProgress)].SetValue<float>(value); } }
        public bool LastShotWasLockedOn { get { return this[nameof(LastShotWasLockedOn)].Flag; } set { this[nameof(LastShotWasLockedOn)].Flag = value; } }
        public float LockOnRecoilMult { get { return this[nameof(LockOnRecoilMult)].GetValue<float>(); } set { this[nameof(LockOnRecoilMult)].SetValue<float>(value); } }
        public bool FireOnRelease { get { return this[nameof(FireOnRelease)].Flag; } set { this[nameof(FireOnRelease)].Flag = value; } }
        public void UpdateRifleEye() { Invoke(nameof(UpdateRifleEye)); }
        public void SetMuzzleDirection(Vector TargetLocation) { Invoke(nameof(SetMuzzleDirection), TargetLocation); }
        public void Server_TriggerAoe(Vector Location) { Invoke(nameof(Server_TriggerAoe), Location); }
        public void Server_SetTotalLockCount(int totalLockCount) { Invoke(nameof(Server_SetTotalLockCount), totalLockCount); }
        public void Server_SetLockCount(LockCounter LockCounter) { Invoke(nameof(Server_SetLockCount), LockCounter); }
        public void Server_SetIsMovementSlowed(bool bisMovementSlowed) { Invoke(nameof(Server_SetIsMovementSlowed), bisMovementSlowed); }
        public void Server_SetIsLatestShotLockedOn(bool bisShotLockedOn) { Invoke(nameof(Server_SetIsLatestShotLockedOn), bisShotLockedOn); }
        public void Server_SetIsChargingShot(bool bisCharging) { Invoke(nameof(Server_SetIsChargingShot), bisCharging); }
        public void Server_PushStatusEffect(Actor Target) { Invoke(nameof(Server_PushStatusEffect), Target); }
        public void Server_PopStatusEffect(Actor Target) { Invoke(nameof(Server_PopStatusEffect), Target); }
        public void Server_FiringComplete(int ShotsFired) { Invoke(nameof(Server_FiringComplete), ShotsFired); }
        public void RefundAmmo() { Invoke(nameof(RefundAmmo)); }
        public void OnRep_AimTarget() { Invoke(nameof(OnRep_AimTarget)); }
        public void OnMovementSlowed(bool isSlowed) { Invoke(nameof(OnMovementSlowed), isSlowed); }
        public void OnHitDeadTarget() { Invoke(nameof(OnHitDeadTarget)); }
        public void OnHit(HitResult Hit, bool alwaysPenetrate) { Invoke(nameof(OnHit), Hit, alwaysPenetrate); }
        public void OnAsyncFireComplete() { Invoke(nameof(OnAsyncFireComplete)); }
        public void MuzzleLerpToTarget(Vector TargetLocation) { Invoke(nameof(MuzzleLerpToTarget), TargetLocation); }
        public void MaxTargetsDelegate__DelegateSignature(int InMaxTargets) { Invoke(nameof(MaxTargetsDelegate__DelegateSignature), InMaxTargets); }
        public void LockonTargetRotationUpdated__DelegateSignature(bool hasTargetLockon, Rotator socketRotation) { Invoke(nameof(LockonTargetRotationUpdated__DelegateSignature), hasTargetLockon, socketRotation); }
        public void LockOnRifleLockingOnState__DelegateSignature() { Invoke(nameof(LockOnRifleLockingOnState__DelegateSignature)); }
        public void LockOnCountDelegate__DelegateSignature(int InCurrentCount) { Invoke(nameof(LockOnCountDelegate__DelegateSignature), InCurrentCount); }
        public void FireWeapon(bool ResetUsing, bool Fire) { Invoke(nameof(FireWeapon), ResetUsing, Fire); }
    }
    public class LookingAtWidget : UserWidget
    {
        public LookingAtWidget(nint addr) : base(addr) { }
        public float TargetSelectDuration { get { return this[nameof(TargetSelectDuration)].GetValue<float>(); } set { this[nameof(TargetSelectDuration)].SetValue<float>(value); } }
        public float TargetLostDuration { get { return this[nameof(TargetLostDuration)].GetValue<float>(); } set { this[nameof(TargetLostDuration)].SetValue<float>(value); } }
        public Object Character { get { return this[nameof(Character)]; } set { this[nameof(Character)] = value; } }
        public Object CharacterSight { get { return this[nameof(CharacterSight)]; } set { this[nameof(CharacterSight)] = value; } }
        public Object CurrentTarget { get { return this[nameof(CurrentTarget)]; } set { this[nameof(CurrentTarget)] = value; } }
        public Object CurrentTargetAfflictions { get { return this[nameof(CurrentTargetAfflictions)]; } set { this[nameof(CurrentTargetAfflictions)] = value; } }
        public Object CurrentTargetHealth { get { return this[nameof(CurrentTargetHealth)]; } set { this[nameof(CurrentTargetHealth)] = value; } }
        public bool CanCurrentTargetTakeDamage { get { return this[nameof(CanCurrentTargetTakeDamage)].Flag; } set { this[nameof(CanCurrentTargetTakeDamage)].Flag = value; } }
        public float TargetLostTime { get { return this[nameof(TargetLostTime)].GetValue<float>(); } set { this[nameof(TargetLostTime)].SetValue<float>(value); } }
        public bool bTargetSet { get { return this[nameof(bTargetSet)].Flag; } set { this[nameof(bTargetSet)].Flag = value; } }
        public void SetCurrentTarget(Actor NewActor, Object HealthComponent, float OverrideTargetLostTime) { Invoke(nameof(SetCurrentTarget), NewActor, HealthComponent, OverrideTargetLostTime); }
        public void ResetCurrentTarget() { Invoke(nameof(ResetCurrentTarget)); }
        public void ReceiveUpdateTarget(Actor InCurrentTarget, float DeltaTime) { Invoke(nameof(ReceiveUpdateTarget), InCurrentTarget, DeltaTime); }
        public void ReceiveTargetLost() { Invoke(nameof(ReceiveTargetLost)); }
        public void ReceiveNewTarget(Actor InCurrentTarget) { Invoke(nameof(ReceiveNewTarget), InCurrentTarget); }
        public bool IsValidTarget(Actor TargetActor, Object TargetHealth) { return Invoke<bool>(nameof(IsValidTarget), TargetActor, TargetHealth); }
        public bool IsBossFight(Object Health) { return Invoke<bool>(nameof(IsBossFight), Health); }
        public HealthComponentBase GetLookingAtHealth() { return Invoke<HealthComponentBase>(nameof(GetLookingAtHealth)); }
        public Actor GetLookingAtActor() { return Invoke<Actor>(nameof(GetLookingAtActor)); }
        public bool GetCharacterTemperatureEffect(float TemperatureEffect) { return Invoke<bool>(nameof(GetCharacterTemperatureEffect), TemperatureEffect); }
    }
    public class LookingAtContentWidget : UserWidget
    {
        public LookingAtContentWidget(nint addr) : base(addr) { }
        public Object CurrentTarget { get { return this[nameof(CurrentTarget)]; } set { this[nameof(CurrentTarget)] = value; } }
        public Object CurrentTargetAfflictions { get { return this[nameof(CurrentTargetAfflictions)]; } set { this[nameof(CurrentTargetAfflictions)] = value; } }
        public Object CurrentTargetInfo { get { return this[nameof(CurrentTargetInfo)]; } set { this[nameof(CurrentTargetInfo)] = value; } }
        public Object CurrentTargetHealth { get { return this[nameof(CurrentTargetHealth)]; } set { this[nameof(CurrentTargetHealth)] = value; } }
        public Object CurrentHackingComponent { get { return this[nameof(CurrentHackingComponent)]; } set { this[nameof(CurrentHackingComponent)] = value; } }
        public Object CurrentPetComponent { get { return this[nameof(CurrentPetComponent)]; } set { this[nameof(CurrentPetComponent)] = value; } }
        public bool bWeakPointHit { get { return this[nameof(bWeakPointHit)].Flag; } set { this[nameof(bWeakPointHit)].Flag = value; } }
        public void UpdateCurrentTarget(float DeltaSeconds, Actor InTargetActor, Object InTargetHealthComponent) { Invoke(nameof(UpdateCurrentTarget), DeltaSeconds, InTargetActor, InTargetHealthComponent); }
        public void RegisterWeakPointHit() { Invoke(nameof(RegisterWeakPointHit)); }
        public void ReceiveUpdateTarget(Actor InCurrentTarget, float DeltaTime) { Invoke(nameof(ReceiveUpdateTarget), InCurrentTarget, DeltaTime); }
        public void ReceiveNewTarget(Actor InCurrentTarget) { Invoke(nameof(ReceiveNewTarget), InCurrentTarget); }
        public Object GetTargetOwnerName() { return Invoke<Object>(nameof(GetTargetOwnerName)); }
        public Object GetTargetName() { return Invoke<Object>(nameof(GetTargetName)); }
        public float GetTargetHealthPct() { return Invoke<float>(nameof(GetTargetHealthPct)); }
    }
    public class TreasureBeacon : Actor
    {
        public TreasureBeacon(nint addr) : base(addr) { }
        public SceneComponent RootComp { get { return this[nameof(RootComp)].As<SceneComponent>(); } set { this["RootComp"] = value; } }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public DebrisPositioning TreasurePositioning { get { return this[nameof(TreasurePositioning)].As<DebrisPositioning>(); } set { this["TreasurePositioning"] = value; } }
        public DebrisPositioning DebrisPartsPositioning { get { return this[nameof(DebrisPartsPositioning)].As<DebrisPositioning>(); } set { this["DebrisPartsPositioning"] = value; } }
        public CurveFloat AvoidCostCurve { get { return this[nameof(AvoidCostCurve)].As<CurveFloat>(); } set { this["AvoidCostCurve"] = value; } }
        public CurveFloat AvoidCostCurveDebris { get { return this[nameof(AvoidCostCurveDebris)].As<CurveFloat>(); } set { this["AvoidCostCurveDebris"] = value; } }
        public float MaxRange { get { return this[nameof(MaxRange)].GetValue<float>(); } set { this[nameof(MaxRange)].SetValue<float>(value); } }
        public float MinRange { get { return this[nameof(MinRange)].GetValue<float>(); } set { this[nameof(MinRange)].SetValue<float>(value); } }
        public float DebrisSpawnRange { get { return this[nameof(DebrisSpawnRange)].GetValue<float>(); } set { this[nameof(DebrisSpawnRange)].SetValue<float>(value); } }
        public Object DebrisPartClass { get { return this[nameof(DebrisPartClass)]; } set { this[nameof(DebrisPartClass)] = value; } }
        public int DebrisPartsToSpawn { get { return this[nameof(DebrisPartsToSpawn)].GetValue<int>(); } set { this[nameof(DebrisPartsToSpawn)].SetValue<int>(value); } }
        public int MaxSpawnLocationTries { get { return this[nameof(MaxSpawnLocationTries)].GetValue<int>(); } set { this[nameof(MaxSpawnLocationTries)].SetValue<int>(value); } }
        public Object TreasureClass { get { return this[nameof(TreasureClass)]; } set { this[nameof(TreasureClass)] = value; } }
        public TreasureContainer TreasureInstance { get { return this[nameof(TreasureInstance)].As<TreasureContainer>(); } set { this["TreasureInstance"] = value; } }
        public void SpawnDebreeParts() { Invoke(nameof(SpawnDebreeParts)); }
        public void ActivateTreasure() { Invoke(nameof(ActivateTreasure)); }
    }
    public class TreasureContainer : Actor
    {
        public TreasureContainer(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public OncePerPlayerUsableComponent CollectUsable { get { return this[nameof(CollectUsable)].As<OncePerPlayerUsableComponent>(); } set { this["CollectUsable"] = value; } }
        public ItemAquisitionSource AquisitionSource { get { return this[nameof(AquisitionSource)].As<ItemAquisitionSource>(); } set { this["AquisitionSource"] = value; } }
        public UArray<PlayerCharacter> Collectors { get { return new UArray<PlayerCharacter>(this[nameof(Collectors)].Address); } }
        public PlayerCharacter LastJoiner { get { return this[nameof(LastJoiner)].As<PlayerCharacter>(); } set { this["LastJoiner"] = value; } }
        public UArray<TreasureWeight> PossibleRewarders { get { return new UArray<TreasureWeight>(this[nameof(PossibleRewarders)].Address); } }
        public TreasureRewarder TreasureRewarder { get { return this[nameof(TreasureRewarder)].As<TreasureRewarder>(); } set { this["TreasureRewarder"] = value; } }
        public bool PreventLatejoiners { get { return this[nameof(PreventLatejoiners)].Flag; } set { this[nameof(PreventLatejoiners)].Flag = value; } }
        public void TestAwardTreasure() { Invoke(nameof(TestAwardTreasure)); }
        public void SetPreventFurtherLatejoiners(bool prevent) { Invoke(nameof(SetPreventFurtherLatejoiners), prevent); }
        public void SetCanCollectTreasure(bool canCollect) { Invoke(nameof(SetCanCollectTreasure), canCollect); }
        public void OnRep_LastJoiner() { Invoke(nameof(OnRep_LastJoiner)); }
        public void OnRep_Collectors() { Invoke(nameof(OnRep_Collectors)); }
        public void OnPlayerLatejoined(PlayerCharacter joiner) { Invoke(nameof(OnPlayerLatejoined), joiner); }
        public void OnPlayerCollectedTreasure(PlayerCharacter collector, EInputKeys Key) { Invoke(nameof(OnPlayerCollectedTreasure), collector, Key); }
        public void OnLocalPlayerCollectedTreasure(PlayerCharacter Player) { Invoke(nameof(OnLocalPlayerCollectedTreasure), Player); }
        public void OnDisableChestLocally() { Invoke(nameof(OnDisableChestLocally)); }
        public void OnContainerActivated() { Invoke(nameof(OnContainerActivated)); }
        public bool GetPreventFurtherLatejoiners() { return Invoke<bool>(nameof(GetPreventFurtherLatejoiners)); }
    }
    public class LostPack : Actor
    {
        public LostPack(nint addr) : base(addr) { }
    }
    public class MasteryIconWidget : UserWidget
    {
        public MasteryIconWidget(nint addr) : base(addr) { }
        public void ReceiveUnlocked() { Invoke(nameof(ReceiveUnlocked)); }
    }
    public class MediaPlayerWidget : UserWidget
    {
        public MediaPlayerWidget(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public Object SoftMediaTexture { get { return this[nameof(SoftMediaTexture)]; } set { this[nameof(SoftMediaTexture)] = value; } }
        public Object SoftMediaSoundClass { get { return this[nameof(SoftMediaSoundClass)]; } set { this[nameof(SoftMediaSoundClass)] = value; } }
        public Object SoftMediaSource { get { return this[nameof(SoftMediaSource)]; } set { this[nameof(SoftMediaSource)] = value; } }
        public Object WeakMediaTexture { get { return this[nameof(WeakMediaTexture)]; } set { this[nameof(WeakMediaTexture)] = value; } }
        public Object WeakMediaSoundClass { get { return this[nameof(WeakMediaSoundClass)]; } set { this[nameof(WeakMediaSoundClass)] = value; } }
        public Object WeakMediaPlayer { get { return this[nameof(WeakMediaPlayer)]; } set { this[nameof(WeakMediaPlayer)] = value; } }
        public Object WeakMediaSource { get { return this[nameof(WeakMediaSource)]; } set { this[nameof(WeakMediaSource)] = value; } }
        public EMediaPlayerState PlayerState { get { return (EMediaPlayerState)this[nameof(PlayerState)].GetValue<int>(); } set { this[nameof(PlayerState)].SetValue<int>((int)value); } }
        public Image OutputImage { get { return this[nameof(OutputImage)].As<Image>(); } set { this["OutputImage"] = value; } }
        public void Stop() { Invoke(nameof(Stop)); }
        public void StateChanged__DelegateSignature(MediaPlayerWidget InPlayerWidget, EMediaPlayerState InState) { Invoke(nameof(StateChanged__DelegateSignature), InPlayerWidget, InState); }
        public void ReceiveStateChanged(EMediaPlayerState InState) { Invoke(nameof(ReceiveStateChanged), InState); }
        public void PlaySource(FileMediaSource InSource) { Invoke(nameof(PlaySource), InSource); }
        public void PlaySoftSource(Object InSource) { Invoke(nameof(PlaySoftSource), InSource); }
        public void Play() { Invoke(nameof(Play)); }
        public void Callback_MediaPlayResumed() { Invoke(nameof(Callback_MediaPlayResumed)); }
        public void Callback_MediaOpened(Object URL) { Invoke(nameof(Callback_MediaOpened), URL); }
        public void Callback_MediaEndReached() { Invoke(nameof(Callback_MediaEndReached)); }
        public void Callback_MediaClosed() { Invoke(nameof(Callback_MediaClosed)); }
    }
    public class MediaSoundController : MediaSoundComponent
    {
        public MediaSoundController(nint addr) : base(addr) { }
        public void StopMediaSoundController(PlayerController InPlayerController, MediaTexture InTexture) { Invoke(nameof(StopMediaSoundController), InPlayerController, InTexture); }
        public void StopAllMediaSoundControllers(PlayerController InPlayerController) { Invoke(nameof(StopAllMediaSoundControllers), InPlayerController); }
    }
    public class MeleeAttackComponent : DamageAttackComponent
    {
        public MeleeAttackComponent(nint addr) : base(addr) { }
        public UArray<AnimMontage> Montages { get { return new UArray<AnimMontage>(this[nameof(Montages)].Address); } }
        public TargetValidator HitValidator { get { return this[nameof(HitValidator)].As<TargetValidator>(); } set { this["HitValidator"] = value; } }
        public bool CenterOnTarget { get { return this[nameof(CenterOnTarget)].Flag; } set { this[nameof(CenterOnTarget)].Flag = value; } }
        public UArray<AttackEffect> AttackEffects { get { return new UArray<AttackEffect>(this[nameof(AttackEffects)].Address); } }
        public Object OnAttackStartedEvent { get { return this[nameof(OnAttackStartedEvent)]; } set { this[nameof(OnAttackStartedEvent)] = value; } }
        public Object OnDamageAppliedEvent { get { return this[nameof(OnDamageAppliedEvent)]; } set { this[nameof(OnDamageAppliedEvent)] = value; } }
        public Object OnAttackEndedEvent { get { return this[nameof(OnAttackEndedEvent)]; } set { this[nameof(OnAttackEndedEvent)] = value; } }
        public AnimMontage SelectMontage() { return Invoke<AnimMontage>(nameof(SelectMontage)); }
        public void OnPerformAttack(Object Name) { Invoke(nameof(OnPerformAttack), Name); }
        public void OnMontageEnded(AnimMontage Montage, bool interrupted) { Invoke(nameof(OnMontageEnded), Montage, interrupted); }
    }
    public class MeshCarveAttackEffect : AttackEffect
    {
        public MeshCarveAttackEffect(nint addr) : base(addr) { }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public StaticMesh CarveMesh { get { return this[nameof(CarveMesh)].As<StaticMesh>(); } set { this["CarveMesh"] = value; } }
        public float CarverOffset { get { return this[nameof(CarverOffset)].GetValue<float>(); } set { this[nameof(CarverOffset)].SetValue<float>(value); } }
        public Rotator CarverOrientation { get { return this[nameof(CarverOrientation)].As<Rotator>(); } set { this["CarverOrientation"] = value; } }
        public Vector CarverScale { get { return this[nameof(CarverScale)].As<Vector>(); } set { this["CarverScale"] = value; } }
        public Object Socket { get { return this[nameof(Socket)]; } set { this[nameof(Socket)] = value; } }
    }
    public class MessagingSubSystem : GameInstanceSubsystem
    {
        public MessagingSubSystem(nint addr) : base(addr) { }
        public Object OnNewMessage { get { return this[nameof(OnNewMessage)]; } set { this[nameof(OnNewMessage)] = value; } }
        public Object MessageSenderIdAsString(FSDChatMessage Msg) { return Invoke<Object>(nameof(MessageSenderIdAsString), Msg); }
        public float MessageAge(FSDChatMessage Msg) { return Invoke<float>(nameof(MessageAge), Msg); }
        public void LatestMessages(int Num, bool resetAge, UArray<FSDChatMessage> OutMessages) { Invoke(nameof(LatestMessages), Num, resetAge, OutMessages); }
        public void ClearMessages() { Invoke(nameof(ClearMessages)); }
    }
    public class MeteorDefenseEvent : GameEvent
    {
        public MeteorDefenseEvent(nint addr) : base(addr) { }
        public UArray<ProgressShout> ProgressShouts { get { return new UArray<ProgressShout>(this[nameof(ProgressShouts)].Address); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float InitialProgress { get { return this[nameof(InitialProgress)].GetValue<float>(); } set { this[nameof(InitialProgress)].SetValue<float>(value); } }
        public PlagueMeteor meteor { get { return this[nameof(meteor)].As<PlagueMeteor>(); } set { this["meteor"] = value; } }
        public void SetMeteor(PlagueMeteor meteor) { Invoke(nameof(SetMeteor), meteor); }
        public PlagueMeteor GetMeteor() { return Invoke<PlagueMeteor>(nameof(GetMeteor)); }
    }
    public class PlagueMeteorSpawner : DebrisLocationFinder
    {
        public PlagueMeteorSpawner(nint addr) : base(addr) { }
        public Object OnSpawnedMeteor { get { return this[nameof(OnSpawnedMeteor)]; } set { this[nameof(OnSpawnedMeteor)] = value; } }
        public Object MeteorActorClass { get { return this[nameof(MeteorActorClass)]; } set { this[nameof(MeteorActorClass)] = value; } }
        public RandRange EscortSpawnFromMuleRange { get { return this[nameof(EscortSpawnFromMuleRange)].As<RandRange>(); } set { this["EscortSpawnFromMuleRange"] = value; } }
        public float EscortSpawnFromImportantRange { get { return this[nameof(EscortSpawnFromImportantRange)].GetValue<float>(); } set { this[nameof(EscortSpawnFromImportantRange)].SetValue<float>(value); } }
        public float EscortMinimum2DSpawnDistFromPath { get { return this[nameof(EscortMinimum2DSpawnDistFromPath)].GetValue<float>(); } set { this[nameof(EscortMinimum2DSpawnDistFromPath)].SetValue<float>(value); } }
        public float EscortMinimumZSpawnDistFromPath { get { return this[nameof(EscortMinimumZSpawnDistFromPath)].GetValue<float>(); } set { this[nameof(EscortMinimumZSpawnDistFromPath)].SetValue<float>(value); } }
        public float DropLocationHeightOffset { get { return this[nameof(DropLocationHeightOffset)].GetValue<float>(); } set { this[nameof(DropLocationHeightOffset)].SetValue<float>(value); } }
        public float ImportantLocationRange { get { return this[nameof(ImportantLocationRange)].GetValue<float>(); } set { this[nameof(ImportantLocationRange)].SetValue<float>(value); } }
        public Object MeteorActorClassLoaded { get { return this[nameof(MeteorActorClassLoaded)]; } set { this[nameof(MeteorActorClassLoaded)] = value; } }
    }
    public class DropRockCrackerPodsSpawner : DebrisLocationFinder
    {
        public DropRockCrackerPodsSpawner(nint addr) : base(addr) { }
        public PlagueMeteor meteor { get { return this[nameof(meteor)].As<PlagueMeteor>(); } set { this["meteor"] = value; } }
        public Object MeteorActorClass { get { return this[nameof(MeteorActorClass)]; } set { this[nameof(MeteorActorClass)] = value; } }
        public Object RockCrackerIndicationClass { get { return this[nameof(RockCrackerIndicationClass)]; } set { this[nameof(RockCrackerIndicationClass)] = value; } }
    }
    public class MicroMissileLauncher : AmmoDrivenWeapon
    {
        public MicroMissileLauncher(nint addr) : base(addr) { }
        public Object OnStartCharging { get { return this[nameof(OnStartCharging)]; } set { this[nameof(OnStartCharging)] = value; } }
        public Object OnEndCharging { get { return this[nameof(OnEndCharging)]; } set { this[nameof(OnEndCharging)] = value; } }
        public UArray<Object> MuzzleNames { get { return new UArray<Object>(this[nameof(MuzzleNames)].Address); } }
        public float ChargeTime { get { return this[nameof(ChargeTime)].GetValue<float>(); } set { this[nameof(ChargeTime)].SetValue<float>(value); } }
        public int ChargeMaxFireCount { get { return this[nameof(ChargeMaxFireCount)].GetValue<int>(); } set { this[nameof(ChargeMaxFireCount)].SetValue<int>(value); } }
        public float BuckShotDelay { get { return this[nameof(BuckShotDelay)].GetValue<float>(); } set { this[nameof(BuckShotDelay)].SetValue<float>(value); } }
        public float ShotDirectionHorizontalDegreeOffset { get { return this[nameof(ShotDirectionHorizontalDegreeOffset)].GetValue<float>(); } set { this[nameof(ShotDirectionHorizontalDegreeOffset)].SetValue<float>(value); } }
        public float ShotDirectionVerticleDegreeOffset { get { return this[nameof(ShotDirectionVerticleDegreeOffset)].GetValue<float>(); } set { this[nameof(ShotDirectionVerticleDegreeOffset)].SetValue<float>(value); } }
        public EMicroMissileLauncherFireMode FireMode { get { return (EMicroMissileLauncherFireMode)this[nameof(FireMode)].GetValue<int>(); } set { this[nameof(FireMode)].SetValue<int>((int)value); } }
        public bool DisableHomingOnRelease { get { return this[nameof(DisableHomingOnRelease)].Flag; } set { this[nameof(DisableHomingOnRelease)].Flag = value; } }
        public float MaxHomingProjectiles { get { return this[nameof(MaxHomingProjectiles)].GetValue<float>(); } set { this[nameof(MaxHomingProjectiles)].SetValue<float>(value); } }
        public AnimMontage WPN_Fire_Empty_Mag { get { return this[nameof(WPN_Fire_Empty_Mag)].As<AnimMontage>(); } set { this["WPN_Fire_Empty_Mag"] = value; } }
        public AnimMontage WPN_Fire_Level2 { get { return this[nameof(WPN_Fire_Level2)].As<AnimMontage>(); } set { this["WPN_Fire_Level2"] = value; } }
        public AnimMontage WPN_Fire_Level2_Empty_Mag { get { return this[nameof(WPN_Fire_Level2_Empty_Mag)].As<AnimMontage>(); } set { this["WPN_Fire_Level2_Empty_Mag"] = value; } }
        public AnimMontage WPN_Fire_Level3 { get { return this[nameof(WPN_Fire_Level3)].As<AnimMontage>(); } set { this["WPN_Fire_Level3"] = value; } }
        public AnimMontage WPN_Fire_Level3_Empty_Mag { get { return this[nameof(WPN_Fire_Level3_Empty_Mag)].As<AnimMontage>(); } set { this["WPN_Fire_Level3_Empty_Mag"] = value; } }
        public AnimMontage WPN_Mag_Feed { get { return this[nameof(WPN_Mag_Feed)].As<AnimMontage>(); } set { this["WPN_Mag_Feed"] = value; } }
        public AnimMontage WPN_Mag_And_Barrel_Feed { get { return this[nameof(WPN_Mag_And_Barrel_Feed)].As<AnimMontage>(); } set { this["WPN_Mag_And_Barrel_Feed"] = value; } }
        public SoundCue ChargedMissileFireSound { get { return this[nameof(ChargedMissileFireSound)].As<SoundCue>(); } set { this["ChargedMissileFireSound"] = value; } }
        public bool TriggerClusterActive { get { return this[nameof(TriggerClusterActive)].Flag; } set { this[nameof(TriggerClusterActive)].Flag = value; } }
        public float TriggerClusterHoldDuration { get { return this[nameof(TriggerClusterHoldDuration)].GetValue<float>(); } set { this[nameof(TriggerClusterHoldDuration)].SetValue<float>(value); } }
        public Object TriggerClusterHoldDescription { get { return this[nameof(TriggerClusterHoldDescription)]; } set { this[nameof(TriggerClusterHoldDescription)] = value; } }
        public void Server_SetIsCharging(bool isCharging) { Invoke(nameof(Server_SetIsCharging), isCharging); }
        public void Server_SetChargedMissile(bool isCharged) { Invoke(nameof(Server_SetChargedMissile), isCharged); }
        public void OnTriggerCluster() { Invoke(nameof(OnTriggerCluster)); }
        public bool IsNextShotBuckShot() { return Invoke<bool>(nameof(IsNextShotBuckShot)); }
        public Projectile GetFirstActiveProjectileOfType(Object Class) { return Invoke<Projectile>(nameof(GetFirstActiveProjectileOfType), Class); }
        public int GetChargeCurrentFireCount() { return Invoke<int>(nameof(GetChargeCurrentFireCount)); }
        public void GetActiveProjectiles(UArray<Projectile> ActiveProjectiles) { Invoke(nameof(GetActiveProjectiles), ActiveProjectiles); }
        public void ChargingDelegate__DelegateSignature() { Invoke(nameof(ChargingDelegate__DelegateSignature)); }
        public void All_SetChargedMissile(bool isCharged) { Invoke(nameof(All_SetChargedMissile), isCharged); }
    }
    public class MicroMissileLauncherAnimInstance : AnimInstance
    {
        public MicroMissileLauncherAnimInstance(nint addr) : base(addr) { }
        public MicroMissileLauncher Weapon { get { return this[nameof(Weapon)].As<MicroMissileLauncher>(); } set { this["Weapon"] = value; } }
        public void OnMontageEndedInternal(AnimMontage Montage, bool interrupted) { Invoke(nameof(OnMontageEndedInternal), Montage, interrupted); }
    }
    public class MicrowaveWeapon : AmmoDrivenWeapon
    {
        public MicrowaveWeapon(nint addr) : base(addr) { }
        public DamageComponent DamageComp { get { return this[nameof(DamageComp)].As<DamageComponent>(); } set { this["DamageComp"] = value; } }
        public CapsuleHitscanComponent CapsuleHitscanComp { get { return this[nameof(CapsuleHitscanComp)].As<CapsuleHitscanComponent>(); } set { this["CapsuleHitscanComp"] = value; } }
        public FirstPersonNiagaraComponent FP_MuzzleParticle { get { return this[nameof(FP_MuzzleParticle)].As<FirstPersonNiagaraComponent>(); } set { this["FP_MuzzleParticle"] = value; } }
        public NiagaraComponent TP_MuzzleParticle { get { return this[nameof(TP_MuzzleParticle)].As<NiagaraComponent>(); } set { this["TP_MuzzleParticle"] = value; } }
        public DamageComponent ExplodingTargetsDamageComponent { get { return this[nameof(ExplodingTargetsDamageComponent)].As<DamageComponent>(); } set { this["ExplodingTargetsDamageComponent"] = value; } }
        public DamageComponent RadiantSuperheaterHeat { get { return this[nameof(RadiantSuperheaterHeat)].As<DamageComponent>(); } set { this["RadiantSuperheaterHeat"] = value; } }
        public DamageComponent RadiantSuperheaterFrostShock { get { return this[nameof(RadiantSuperheaterFrostShock)].As<DamageComponent>(); } set { this["RadiantSuperheaterFrostShock"] = value; } }
        public Object OnLenseActivated { get { return this[nameof(OnLenseActivated)]; } set { this[nameof(OnLenseActivated)] = value; } }
        public Object OnLenseDeactivated { get { return this[nameof(OnLenseDeactivated)]; } set { this[nameof(OnLenseDeactivated)] = value; } }
        public float SwitchTime { get { return this[nameof(SwitchTime)].GetValue<float>(); } set { this[nameof(SwitchTime)].SetValue<float>(value); } }
        public Object GammaContaminationSTE { get { return this[nameof(GammaContaminationSTE)]; } set { this[nameof(GammaContaminationSTE)] = value; } }
        public Object GammaContaminationZoneSTE { get { return this[nameof(GammaContaminationZoneSTE)]; } set { this[nameof(GammaContaminationZoneSTE)] = value; } }
        public float GammaContaminationRange { get { return this[nameof(GammaContaminationRange)].GetValue<float>(); } set { this[nameof(GammaContaminationRange)].SetValue<float>(value); } }
        public Object ExplodableBlisterClass { get { return this[nameof(ExplodableBlisterClass)]; } set { this[nameof(ExplodableBlisterClass)] = value; } }
        public float BlisteringNecrosisChance { get { return this[nameof(BlisteringNecrosisChance)].GetValue<float>(); } set { this[nameof(BlisteringNecrosisChance)].SetValue<float>(value); } }
        public float MinTimeBetweenBlisteringNecrosis { get { return this[nameof(MinTimeBetweenBlisteringNecrosis)].GetValue<float>(); } set { this[nameof(MinTimeBetweenBlisteringNecrosis)].SetValue<float>(value); } }
        public Object FireEffect { get { return this[nameof(FireEffect)]; } set { this[nameof(FireEffect)] = value; } }
        public UArray<Object> NeuroEffects { get { return new UArray<Object>(this[nameof(NeuroEffects)].Address); } }
        public Object NeuroToSpread { get { return this[nameof(NeuroToSpread)]; } set { this[nameof(NeuroToSpread)] = value; } }
        public Object SlowEffect { get { return this[nameof(SlowEffect)]; } set { this[nameof(SlowEffect)] = value; } }
        public NiagaraSystem ImpactParticleEnemies { get { return this[nameof(ImpactParticleEnemies)].As<NiagaraSystem>(); } set { this["ImpactParticleEnemies"] = value; } }
        public NiagaraSystem ImpactParticleTerrain { get { return this[nameof(ImpactParticleTerrain)].As<NiagaraSystem>(); } set { this["ImpactParticleTerrain"] = value; } }
        public NiagaraSystem NeuroSpreadParticles { get { return this[nameof(NeuroSpreadParticles)].As<NiagaraSystem>(); } set { this["NeuroSpreadParticles"] = value; } }
        public ParticleSystem P_NeuroSpreadParticles { get { return this[nameof(P_NeuroSpreadParticles)].As<ParticleSystem>(); } set { this["P_NeuroSpreadParticles"] = value; } }
        public SoundCue NeuroSpreadSound { get { return this[nameof(NeuroSpreadSound)].As<SoundCue>(); } set { this["NeuroSpreadSound"] = value; } }
        public NiagaraSystem MicrowaveMuzzle { get { return this[nameof(MicrowaveMuzzle)].As<NiagaraSystem>(); } set { this["MicrowaveMuzzle"] = value; } }
        public NiagaraComponent MuzzleComp { get { return this[nameof(MuzzleComp)].As<NiagaraComponent>(); } set { this["MuzzleComp"] = value; } }
        public Object ActorsInCapsule { get { return this[nameof(ActorsInCapsule)]; } set { this[nameof(ActorsInCapsule)] = value; } }
        public float WeaponRange { get { return this[nameof(WeaponRange)].GetValue<float>(); } set { this[nameof(WeaponRange)].SetValue<float>(value); } }
        public float ShotWidth { get { return this[nameof(ShotWidth)].GetValue<float>(); } set { this[nameof(ShotWidth)].SetValue<float>(value); } }
        public float DamageInterval { get { return this[nameof(DamageInterval)].GetValue<float>(); } set { this[nameof(DamageInterval)].SetValue<float>(value); } }
        public float KilledTargetsExplosionChance { get { return this[nameof(KilledTargetsExplosionChance)].GetValue<float>(); } set { this[nameof(KilledTargetsExplosionChance)].SetValue<float>(value); } }
        public NiagaraSystem ExplosionOCSystem { get { return this[nameof(ExplosionOCSystem)].As<NiagaraSystem>(); } set { this["ExplosionOCSystem"] = value; } }
        public float NeuroSpreadRadius { get { return this[nameof(NeuroSpreadRadius)].GetValue<float>(); } set { this[nameof(NeuroSpreadRadius)].SetValue<float>(value); } }
        public MicrowaveLense WideLense { get { return this[nameof(WideLense)].As<MicrowaveLense>(); } set { this["WideLense"] = value; } }
        public MicrowaveLense FocusLense { get { return this[nameof(FocusLense)].As<MicrowaveLense>(); } set { this["FocusLense"] = value; } }
        public float TemperatureAmplification { get { return this[nameof(TemperatureAmplification)].GetValue<float>(); } set { this[nameof(TemperatureAmplification)].SetValue<float>(value); } }
        public bool RadiantSuperheaterActive { get { return this[nameof(RadiantSuperheaterActive)].Flag; } set { this[nameof(RadiantSuperheaterActive)].Flag = value; } }
        public float RadiantSuperheaterFrostShockChance { get { return this[nameof(RadiantSuperheaterFrostShockChance)].GetValue<float>(); } set { this[nameof(RadiantSuperheaterFrostShockChance)].SetValue<float>(value); } }
        public float RadiantSuperheaterHeatShockChance { get { return this[nameof(RadiantSuperheaterHeatShockChance)].GetValue<float>(); } set { this[nameof(RadiantSuperheaterHeatShockChance)].SetValue<float>(value); } }
        public float RadiantSuperheaterMinColdDamage { get { return this[nameof(RadiantSuperheaterMinColdDamage)].GetValue<float>(); } set { this[nameof(RadiantSuperheaterMinColdDamage)].SetValue<float>(value); } }
        public float RadiantSuperheaterMinHeatDamage { get { return this[nameof(RadiantSuperheaterMinHeatDamage)].GetValue<float>(); } set { this[nameof(RadiantSuperheaterMinHeatDamage)].SetValue<float>(value); } }
        public float RadiantSuperheaterFrostTransferFactor { get { return this[nameof(RadiantSuperheaterFrostTransferFactor)].GetValue<float>(); } set { this[nameof(RadiantSuperheaterFrostTransferFactor)].SetValue<float>(value); } }
        public float RadiantSuperheaterHeatTransferFactor { get { return this[nameof(RadiantSuperheaterHeatTransferFactor)].GetValue<float>(); } set { this[nameof(RadiantSuperheaterHeatTransferFactor)].SetValue<float>(value); } }
        public float ColdTempAmpMultiplier { get { return this[nameof(ColdTempAmpMultiplier)].GetValue<float>(); } set { this[nameof(ColdTempAmpMultiplier)].SetValue<float>(value); } }
        public Object RadiantSuperheaterTarget { get { return this[nameof(RadiantSuperheaterTarget)]; } set { this[nameof(RadiantSuperheaterTarget)] = value; } }
        public bool SlowOnHit { get { return this[nameof(SlowOnHit)].Flag; } set { this[nameof(SlowOnHit)].Flag = value; } }
        public Object HeatSink { get { return this[nameof(HeatSink)]; } set { this[nameof(HeatSink)] = value; } }
        public void UpdateMuzzleAnim(bool InIsFiring) { Invoke(nameof(UpdateMuzzleAnim), InIsFiring); }
        public void SpawnExplosiveBoil(PrimitiveComponent Target, MultiHitscanHit Hit) { Invoke(nameof(SpawnExplosiveBoil), Target, Hit); }
        public void ShowBoilerRayExplosion_Server(Vector_NetQuantize Location, Rotator Rotation) { Invoke(nameof(ShowBoilerRayExplosion_Server), Location, Rotation); }
        public void ShowBoilerRayExplosion(Vector_NetQuantize Location, Rotator Rotation) { Invoke(nameof(ShowBoilerRayExplosion), Location, Rotation); }
        public void Server_SetLensePower(float lensepower) { Invoke(nameof(Server_SetLensePower), lensepower); }
        public void OnTargetKilled(Actor Target, FSDPhysicalMaterial PhysMat, bool wasDirectHit) { Invoke(nameof(OnTargetKilled), Target, PhysMat, wasDirectHit); }
        public void OnShowHitEffect(Vector ImpactPoint, Vector ImpactNormal, bool hitEnemy) { Invoke(nameof(OnShowHitEffect), ImpactPoint, ImpactNormal, hitEnemy); }
        public void OnServerHitscanHit(MultiHitScanHits Hits) { Invoke(nameof(OnServerHitscanHit), Hits); }
        public void OnRadiantSuperHeaterAoe() { Invoke(nameof(OnRadiantSuperHeaterAoe)); }
        public void OnPushedDamageEffect(HealthComponentBase healthComp) { Invoke(nameof(OnPushedDamageEffect), healthComp); }
        public void HeatUpdated(float SmoothedTemperature) { Invoke(nameof(HeatUpdated), SmoothedTemperature); }
        public void EndCharacterOverheatAnim() { Invoke(nameof(EndCharacterOverheatAnim)); }
        public void All_ShowNeuroSpread(Vector Location) { Invoke(nameof(All_ShowNeuroSpread), Location); }
    }
    public class Boil : Actor
    {
        public Boil(nint addr) : base(addr) { }
        public UArray<FSDPhysicalMaterial> PhysicalMaterials { get { return new UArray<FSDPhysicalMaterial>(this[nameof(PhysicalMaterials)].Address); } }
        public int MaterialIndex { get { return this[nameof(MaterialIndex)].GetValue<int>(); } set { this[nameof(MaterialIndex)].SetValue<int>(value); } }
        public void OnRep_MaterialIndex() { Invoke(nameof(OnRep_MaterialIndex)); }
    }
    public class MilestoneAsset : DataAsset
    {
        public MilestoneAsset(nint addr) : base(addr) { }
        public Object OnMilestoneClaimed { get { return this[nameof(OnMilestoneClaimed)]; } set { this[nameof(OnMilestoneClaimed)] = value; } }
        public Object OnMilestoneReached { get { return this[nameof(OnMilestoneReached)]; } set { this[nameof(OnMilestoneReached)] = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public Object LargeImage { get { return this[nameof(LargeImage)]; } set { this[nameof(LargeImage)] = value; } }
        public Object FormattedTitle { get { return this[nameof(FormattedTitle)]; } set { this[nameof(FormattedTitle)] = value; } }
        public int FormattedValueOffset { get { return this[nameof(FormattedValueOffset)].GetValue<int>(); } set { this[nameof(FormattedValueOffset)].SetValue<int>(value); } }
        public bool CountValueAsTotal { get { return this[nameof(CountValueAsTotal)].Flag; } set { this[nameof(CountValueAsTotal)].Flag = value; } }
        public MissionStat TrackingStat { get { return this[nameof(TrackingStat)].As<MissionStat>(); } set { this["TrackingStat"] = value; } }
        public PlayerCharacterID TrackingCharacterID { get { return this[nameof(TrackingCharacterID)].As<PlayerCharacterID>(); } set { this["TrackingCharacterID"] = value; } }
        public UArray<MilestoneTier> Tiers { get { return new UArray<MilestoneTier>(this[nameof(Tiers)].Address); } }
        public int LastTierReached { get { return this[nameof(LastTierReached)].GetValue<int>(); } set { this[nameof(LastTierReached)].SetValue<int>(value); } }
        public bool bPendingMilestoneReached { get { return this[nameof(bPendingMilestoneReached)].Flag; } set { this[nameof(bPendingMilestoneReached)].Flag = value; } }
        public UArray<MilestoneAsset> SortMilestonesByProgress(Object WorldContext, UArray<MilestoneAsset> Milestones) { return Invoke<UArray<MilestoneAsset>>(nameof(SortMilestonesByProgress), WorldContext, Milestones); }
        public void OnMissionStatChanged(Object WorldContext, MissionStat Stat, float Value) { Invoke(nameof(OnMissionStatChanged), WorldContext, Stat, Value); }
        public bool IsCompleted(Object WorldContext) { return Invoke<bool>(nameof(IsCompleted), WorldContext); }
        public bool IsClaimable(Object WorldContext) { return Invoke<bool>(nameof(IsClaimable), WorldContext); }
        public Object GetTitleForTier(int Tier) { return Invoke<Object>(nameof(GetTitleForTier), Tier); }
        public Object GetTitle(Object WorldContext) { return Invoke<Object>(nameof(GetTitle), WorldContext); }
        public int GetNextPerkPointsReward(Object WorldContext) { return Invoke<int>(nameof(GetNextPerkPointsReward), WorldContext); }
        public void GetCurrentProgress(Object WorldContext, int Tier, float Progress, float CurrentCount, float TargetCount) { Invoke(nameof(GetCurrentProgress), WorldContext, Tier, Progress, CurrentCount, TargetCount); }
        public int GetClaimedTier(Object WorldContext) { return Invoke<int>(nameof(GetClaimedTier), WorldContext); }
        public bool GetClaimedProgress(Object WorldContext, int Tier, float Progress, float CurrentCount, float TargetCount) { return Invoke<bool>(nameof(GetClaimedProgress), WorldContext, Tier, Progress, CurrentCount, TargetCount); }
        public Texture2D GetCategoryIcon() { return Invoke<Texture2D>(nameof(GetCategoryIcon)); }
        public void ClearPendingMilestoneReached() { Invoke(nameof(ClearPendingMilestoneReached)); }
        public int ClaimNextTier(Object WorldContext) { return Invoke<int>(nameof(ClaimNextTier), WorldContext); }
    }
    public class MineralTradeData : DataAsset
    {
        public MineralTradeData(nint addr) : base(addr) { }
        public UArray<Object> MineralTradeTickerTexts { get { return new UArray<Object>(this[nameof(MineralTradeTickerTexts)].Address); } }
    }
    public class MinersManualData : DataAsset
    {
        public MinersManualData(nint addr) : base(addr) { }
        public SoftMinersManualDescription Description { get { return this[nameof(Description)].As<SoftMinersManualDescription>(); } set { this["Description"] = value; } }
        public void GetText(Object Headline, Object richText) { Invoke(nameof(GetText), Headline, richText); }
        public Texture2D GetFrontImage() { return Invoke<Texture2D>(nameof(GetFrontImage)); }
        public Texture2D GetBackgroundImage() { return Invoke<Texture2D>(nameof(GetBackgroundImage)); }
    }
    public class LoreScreenMasterWidget : UserWidget
    {
        public LoreScreenMasterWidget(nint addr) : base(addr) { }
        public Object PageName { get { return this[nameof(PageName)]; } set { this[nameof(PageName)] = value; } }
        public Object SolidImage { get { return this[nameof(SolidImage)]; } set { this[nameof(SolidImage)] = value; } }
        public Object TransparentImage { get { return this[nameof(TransparentImage)]; } set { this[nameof(TransparentImage)] = value; } }
        public LinearColor BackgroundColor { get { return this[nameof(BackgroundColor)].As<LinearColor>(); } set { this["BackgroundColor"] = value; } }
    }
    public class MinersManual : DataAsset
    {
        public MinersManual(nint addr) : base(addr) { }
        public UArray<Object> BasicsPages { get { return new UArray<Object>(this[nameof(BasicsPages)].Address); } }
        public Object BasicsPageHeaders { get { return this[nameof(BasicsPageHeaders)]; } set { this[nameof(BasicsPageHeaders)] = value; } }
        public UArray<Object> CombatPages { get { return new UArray<Object>(this[nameof(CombatPages)].Address); } }
        public UArray<Object> ExtraMissionPages { get { return new UArray<Object>(this[nameof(ExtraMissionPages)].Address); } }
        public UArray<Object> ResourcePages { get { return new UArray<Object>(this[nameof(ResourcePages)].Address); } }
        public UArray<EnemyMinersManualData> Enemies { get { return new UArray<EnemyMinersManualData>(this[nameof(Enemies)].Address); } }
        public UArray<Object> BiomeReferences { get { return new UArray<Object>(this[nameof(BiomeReferences)].Address); } }
        public UArray<Object> MissionReferences { get { return new UArray<Object>(this[nameof(MissionReferences)].Address); } }
        public UArray<DamageTypeDescription> DamageTypeInfo { get { return new UArray<DamageTypeDescription>(this[nameof(DamageTypeInfo)].Address); } }
        public Object MissionDescriptions { get { return this[nameof(MissionDescriptions)]; } set { this[nameof(MissionDescriptions)] = value; } }
        public Object BiomeFeatureDescriptions { get { return this[nameof(BiomeFeatureDescriptions)]; } set { this[nameof(BiomeFeatureDescriptions)] = value; } }
        public bool IsObjectInMinersManual(Object WorldContext, Object Object) { return Invoke<bool>(nameof(IsObjectInMinersManual), WorldContext, Object); }
        public bool IsMissionUnlocked(Object WorldContext, MissionTemplate mission) { return Invoke<bool>(nameof(IsMissionUnlocked), WorldContext, mission); }
        public bool IsBiomeUnlocked(Object WorldContext, Biome Biome) { return Invoke<bool>(nameof(IsBiomeUnlocked), WorldContext, Biome); }
        public UArray<Object> GetUnlockedCreatureLore(Object WorldContext, EnemyMinersManualData enemy, float completePercentage) { return Invoke<UArray<Object>>(nameof(GetUnlockedCreatureLore), WorldContext, enemy, completePercentage); }
        public UArray<Object> GetMissions() { return Invoke<UArray<Object>>(nameof(GetMissions)); }
        public void GetMissionInfo(int MissionTypeIndex, Object InfoHeadline, Object InfoDescription, UArray<MissionStepDescription> Steps) { Invoke(nameof(GetMissionInfo), MissionTypeIndex, InfoHeadline, InfoDescription, Steps); }
        public int GetEnemyKillCount(Object WorldContext, Guid EnemyID) { return Invoke<int>(nameof(GetEnemyKillCount), WorldContext, EnemyID); }
        public UArray<EnemyMinersManualData> GetEnemiesSorted() { return Invoke<UArray<EnemyMinersManualData>>(nameof(GetEnemiesSorted)); }
        public UArray<EnemyMinersManualData> GetEnemies() { return Invoke<UArray<EnemyMinersManualData>>(nameof(GetEnemies)); }
        public void GetDamageTypeDescriptions(UArray<EDamageType> damageTypes, UArray<DamageTypeDescription> Icon) { Invoke(nameof(GetDamageTypeDescriptions), damageTypes, Icon); }
        public void GetDamageTypeDescription(EDamageType damageTypes, DamageTypeDescription Icon) { Invoke(nameof(GetDamageTypeDescription), damageTypes, Icon); }
        public UArray<Object> GetBiomes() { return Invoke<UArray<Object>>(nameof(GetBiomes)); }
        public UArray<MinersManualData> GetBiomeFeatures(int BiomeIndex) { return Invoke<UArray<MinersManualData>>(nameof(GetBiomeFeatures), BiomeIndex); }
        public UArray<DamageTypeDescription> GetAllDamageTypeDescriptions() { return Invoke<UArray<DamageTypeDescription>>(nameof(GetAllDamageTypeDescriptions)); }
    }
    public class MissionChallenge : SavableDataAsset
    {
        public MissionChallenge(nint addr) : base(addr) { }
        public UArray<Mutator> Mutators { get { return new UArray<Mutator>(this[nameof(Mutators)].Address); } }
        public Object MissionBP { get { return this[nameof(MissionBP)]; } set { this[nameof(MissionBP)] = value; } }
    }
    public class MissionComplexity : DataAsset
    {
        public MissionComplexity(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public int NumberOfDots { get { return this[nameof(NumberOfDots)].GetValue<int>(); } set { this[nameof(NumberOfDots)].SetValue<int>(value); } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
    }
    public class MissionDuration : DataAsset
    {
        public MissionDuration(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public int NumberOfDots { get { return this[nameof(NumberOfDots)].GetValue<int>(); } set { this[nameof(NumberOfDots)].SetValue<int>(value); } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
    }
    public class MissionFunctionLibrary : BlueprintFunctionLibrary
    {
        public MissionFunctionLibrary(nint addr) : base(addr) { }
        public Object GetSeedString(Object WorldContextObject) { return Invoke<Object>(nameof(GetSeedString), WorldContextObject); }
        public bool GetSeedsFromString(Object seedString, GlobalMissionSeed outGlobalSeed, int outMissionSeed, int outPlsSeed) { return Invoke<bool>(nameof(GetSeedsFromString), seedString, outGlobalSeed, outMissionSeed, outPlsSeed); }
        public DateTime GetGlobalMissionBaseTime() { return Invoke<DateTime>(nameof(GetGlobalMissionBaseTime)); }
    }
    public class MissionGenerationManager : GameInstanceSubsystem
    {
        public MissionGenerationManager(nint addr) : base(addr) { }
        public Object AllMissionGroups { get { return this[nameof(AllMissionGroups)]; } set { this[nameof(AllMissionGroups)] = value; } }
        public UArray<GeneratedMission> GetMissions(GlobalMissionSeed Seed) { return Invoke<UArray<GeneratedMission>>(nameof(GetMissions), Seed); }
        public GeneratedMission GetMissionFromSeeds(GlobalMissionSeed GlobalSeed, int MissionSeed) { return Invoke<GeneratedMission>(nameof(GetMissionFromSeeds), GlobalSeed, MissionSeed); }
        public UArray<GeneratedMission> GetAvailableMissions() { return Invoke<UArray<GeneratedMission>>(nameof(GetAvailableMissions)); }
    }
    public class MissionManager : ActorComponent
    {
        public MissionManager(nint addr) : base(addr) { }
        public UArray<RunningMissionBP> RunningBlueprints { get { return new UArray<RunningMissionBP>(this[nameof(RunningBlueprints)].Address); } }
        public void OnMatchStarted() { Invoke(nameof(OnMatchStarted)); }
    }
    public class MissionModeManager : Interface
    {
        public MissionModeManager(nint addr) : base(addr) { }
        public void StartDive() { Invoke(nameof(StartDive)); }
        public void ReInitialize() { Invoke(nameof(ReInitialize)); }
        public bool IsLastStage() { return Invoke<bool>(nameof(IsLastStage)); }
        public bool IsActive() { return Invoke<bool>(nameof(IsActive)); }
        public int GetStage() { return Invoke<int>(nameof(GetStage)); }
        public void GetPerObjectiveXP(int perPrimary, int perSecondary) { Invoke(nameof(GetPerObjectiveXP), perPrimary, perSecondary); }
        public int GetNumberOfStages() { return Invoke<int>(nameof(GetNumberOfStages)); }
        public Object GetMissionModeCheatUI() { return Invoke<Object>(nameof(GetMissionModeCheatUI)); }
        public Object GetMissionCompleteScreen(bool missionSuccessful) { return Invoke<Object>(nameof(GetMissionCompleteScreen), missionSuccessful); }
        public Object GetMissionBarWidget() { return Invoke<Object>(nameof(GetMissionBarWidget)); }
        public float GetHazardBonus(Object WorldContextObject, GeneratedMission mission) { return Invoke<float>(nameof(GetHazardBonus), WorldContextObject, mission); }
        public GeneratedMission GetActiveMission() { return Invoke<GeneratedMission>(nameof(GetActiveMission)); }
        public Object GetActiveDiveName() { return Invoke<Object>(nameof(GetActiveDiveName)); }
        public bool CompleteCurrentSingleMission() { return Invoke<bool>(nameof(CompleteCurrentSingleMission)); }
        public bool AreAllSelectedClassesQualified() { return Invoke<bool>(nameof(AreAllSelectedClassesQualified)); }
    }
    public class MissionMutator : DataAsset
    {
        public MissionMutator(nint addr) : base(addr) { }
        public Object MissionBP { get { return this[nameof(MissionBP)]; } set { this[nameof(MissionBP)] = value; } }
        public UArray<Object> BannedObjectives { get { return new UArray<Object>(this[nameof(BannedObjectives)].Address); } }
        public UArray<Mutator> Mutators { get { return new UArray<Mutator>(this[nameof(Mutators)].Address); } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
    }
    public class Mutator : DataAsset
    {
        public Mutator(nint addr) : base(addr) { }
    }
    public class VeinMutator : Mutator
    {
        public VeinMutator(nint addr) : base(addr) { }
        public VeinResourceData VeinResource { get { return this[nameof(VeinResource)].As<VeinResourceData>(); } set { this["VeinResource"] = value; } }
        public float modifier { get { return this[nameof(modifier)].GetValue<float>(); } set { this[nameof(modifier)].SetValue<float>(value); } }
    }
    public class CraftingMaterialMutator : Mutator
    {
        public CraftingMaterialMutator(nint addr) : base(addr) { }
        public float modifier { get { return this[nameof(modifier)].GetValue<float>(); } set { this[nameof(modifier)].SetValue<float>(value); } }
    }
    public class ResourceMutator : Mutator
    {
        public ResourceMutator(nint addr) : base(addr) { }
        public UArray<ResourceData> Resources { get { return new UArray<ResourceData>(this[nameof(Resources)].Address); } }
        public float modifier { get { return this[nameof(modifier)].GetValue<float>(); } set { this[nameof(modifier)].SetValue<float>(value); } }
    }
    public class SupplyPodMutator : Mutator
    {
        public SupplyPodMutator(nint addr) : base(addr) { }
        public float CostModifier { get { return this[nameof(CostModifier)].GetValue<float>(); } set { this[nameof(CostModifier)].SetValue<float>(value); } }
    }
    public class PlayerShieldsMutator : Mutator
    {
        public PlayerShieldsMutator(nint addr) : base(addr) { }
        public float ShieldModifier { get { return this[nameof(ShieldModifier)].GetValue<float>(); } set { this[nameof(ShieldModifier)].SetValue<float>(value); } }
    }
    public class EnemyRarityMutator : Mutator
    {
        public EnemyRarityMutator(nint addr) : base(addr) { }
        public float RarityMultiplier { get { return this[nameof(RarityMultiplier)].GetValue<float>(); } set { this[nameof(RarityMultiplier)].SetValue<float>(value); } }
        public float SpawnAmountMultiplier { get { return this[nameof(SpawnAmountMultiplier)].GetValue<float>(); } set { this[nameof(SpawnAmountMultiplier)].SetValue<float>(value); } }
        public float DifficultyMultiplier { get { return this[nameof(DifficultyMultiplier)].GetValue<float>(); } set { this[nameof(DifficultyMultiplier)].SetValue<float>(value); } }
        public EnemyDescriptor EnemyDescriptor { get { return this[nameof(EnemyDescriptor)].As<EnemyDescriptor>(); } set { this["EnemyDescriptor"] = value; } }
    }
    public class ForceStationaryEncounterMutator : Mutator
    {
        public ForceStationaryEncounterMutator(nint addr) : base(addr) { }
        public EnemyGroupDescriptor EnemyGroup { get { return this[nameof(EnemyGroup)].As<EnemyGroupDescriptor>(); } set { this["EnemyGroup"] = value; } }
        public IRandRange GroupSize { get { return this[nameof(GroupSize)].As<IRandRange>(); } set { this["GroupSize"] = value; } }
    }
    public class EncounterOverrideMutator : Mutator
    {
        public EncounterOverrideMutator(nint addr) : base(addr) { }
        public float MobileEncounterScale { get { return this[nameof(MobileEncounterScale)].GetValue<float>(); } set { this[nameof(MobileEncounterScale)].SetValue<float>(value); } }
        public float StationaryEncounterScale { get { return this[nameof(StationaryEncounterScale)].GetValue<float>(); } set { this[nameof(StationaryEncounterScale)].SetValue<float>(value); } }
    }
    public class NoHeadlightMutator : Mutator
    {
        public NoHeadlightMutator(nint addr) : base(addr) { }
    }
    public class DifficultyMutator : Mutator
    {
        public DifficultyMutator(nint addr) : base(addr) { }
        public float ExtraLargeEnemyDamageResistanceMultiplier { get { return this[nameof(ExtraLargeEnemyDamageResistanceMultiplier)].GetValue<float>(); } set { this[nameof(ExtraLargeEnemyDamageResistanceMultiplier)].SetValue<float>(value); } }
        public float EnemyDamageResistanceMultiplier { get { return this[nameof(EnemyDamageResistanceMultiplier)].GetValue<float>(); } set { this[nameof(EnemyDamageResistanceMultiplier)].SetValue<float>(value); } }
        public float SmallEnemyDamageResistanceMultiplier { get { return this[nameof(SmallEnemyDamageResistanceMultiplier)].GetValue<float>(); } set { this[nameof(SmallEnemyDamageResistanceMultiplier)].SetValue<float>(value); } }
        public float EnemyDamageModifierMultiplier { get { return this[nameof(EnemyDamageModifierMultiplier)].GetValue<float>(); } set { this[nameof(EnemyDamageModifierMultiplier)].SetValue<float>(value); } }
        public float EnemyCountModifierMultiplier { get { return this[nameof(EnemyCountModifierMultiplier)].GetValue<float>(); } set { this[nameof(EnemyCountModifierMultiplier)].SetValue<float>(value); } }
        public int EnemyPoolSize { get { return this[nameof(EnemyPoolSize)].GetValue<int>(); } set { this[nameof(EnemyPoolSize)].SetValue<int>(value); } }
        public int EnemyDisruptivePoolSize { get { return this[nameof(EnemyDisruptivePoolSize)].GetValue<int>(); } set { this[nameof(EnemyDisruptivePoolSize)].SetValue<int>(value); } }
        public float VetaranChanceModifier { get { return this[nameof(VetaranChanceModifier)].GetValue<float>(); } set { this[nameof(VetaranChanceModifier)].SetValue<float>(value); } }
        public float WeakpointDamageMultiplier { get { return this[nameof(WeakpointDamageMultiplier)].GetValue<float>(); } set { this[nameof(WeakpointDamageMultiplier)].SetValue<float>(value); } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public float ProjectileSpeedModifier { get { return this[nameof(ProjectileSpeedModifier)].GetValue<float>(); } set { this[nameof(ProjectileSpeedModifier)].SetValue<float>(value); } }
        public float AttackCooldownModifier { get { return this[nameof(AttackCooldownModifier)].GetValue<float>(); } set { this[nameof(AttackCooldownModifier)].SetValue<float>(value); } }
        public float SpeedModifier { get { return this[nameof(SpeedModifier)].GetValue<float>(); } set { this[nameof(SpeedModifier)].SetValue<float>(value); } }
        public float MaxActiveEnemiesModifier { get { return this[nameof(MaxActiveEnemiesModifier)].GetValue<float>(); } set { this[nameof(MaxActiveEnemiesModifier)].SetValue<float>(value); } }
        public float MaxActiveSwarmersModifier { get { return this[nameof(MaxActiveSwarmersModifier)].GetValue<float>(); } set { this[nameof(MaxActiveSwarmersModifier)].SetValue<float>(value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public float EnvironmentalDamageModifier { get { return this[nameof(EnvironmentalDamageModifier)].GetValue<float>(); } set { this[nameof(EnvironmentalDamageModifier)].SetValue<float>(value); } }
    }
    public class ResourceVeinMutator : Mutator
    {
        public ResourceVeinMutator(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float VeinLengthMultiplier { get { return this[nameof(VeinLengthMultiplier)].GetValue<float>(); } set { this[nameof(VeinLengthMultiplier)].SetValue<float>(value); } }
        public float RangeMultiplier { get { return this[nameof(RangeMultiplier)].GetValue<float>(); } set { this[nameof(RangeMultiplier)].SetValue<float>(value); } }
        public float NoiseRangeMultiplier { get { return this[nameof(NoiseRangeMultiplier)].GetValue<float>(); } set { this[nameof(NoiseRangeMultiplier)].SetValue<float>(value); } }
    }
    public class RewardMutator : Mutator
    {
        public RewardMutator(nint addr) : base(addr) { }
        public Object RewardText { get { return this[nameof(RewardText)]; } set { this[nameof(RewardText)] = value; } }
        public float XPMultiplier { get { return this[nameof(XPMultiplier)].GetValue<float>(); } set { this[nameof(XPMultiplier)].SetValue<float>(value); } }
        public float CreditMultiplier { get { return this[nameof(CreditMultiplier)].GetValue<float>(); } set { this[nameof(CreditMultiplier)].SetValue<float>(value); } }
    }
    public class CommunicationMutator : Mutator
    {
        public CommunicationMutator(nint addr) : base(addr) { }
        public float PitchMultiplier { get { return this[nameof(PitchMultiplier)].GetValue<float>(); } set { this[nameof(PitchMultiplier)].SetValue<float>(value); } }
    }
    public class ExplosiveEnemiesMutator : Mutator
    {
        public ExplosiveEnemiesMutator(nint addr) : base(addr) { }
    }
    public class InfestedEnemiesMutator : Mutator
    {
        public InfestedEnemiesMutator(nint addr) : base(addr) { }
        public UArray<ParticleSystem> SpawnEffects { get { return new UArray<ParticleSystem>(this[nameof(SpawnEffects)].Address); } }
        public ParticleSystem GetParticleSystem(FSDPawn enemy) { return Invoke<ParticleSystem>(nameof(GetParticleSystem), enemy); }
    }
    public class NoOxygenMutator : Mutator
    {
        public NoOxygenMutator(nint addr) : base(addr) { }
        public float OxygenReplenishmentRate { get { return this[nameof(OxygenReplenishmentRate)].GetValue<float>(); } set { this[nameof(OxygenReplenishmentRate)].SetValue<float>(value); } }
        public Object OxygenComponent { get { return this[nameof(OxygenComponent)]; } set { this[nameof(OxygenComponent)] = value; } }
        public Object ReplenishOxygenEffect { get { return this[nameof(ReplenishOxygenEffect)]; } set { this[nameof(ReplenishOxygenEffect)] = value; } }
    }
    public class PlayerDamageTakenMutator : Mutator
    {
        public PlayerDamageTakenMutator(nint addr) : base(addr) { }
        public float DamageMultiplier { get { return this[nameof(DamageMultiplier)].GetValue<float>(); } set { this[nameof(DamageMultiplier)].SetValue<float>(value); } }
        public Object SkipDamageClasses { get { return this[nameof(SkipDamageClasses)]; } set { this[nameof(SkipDamageClasses)] = value; } }
    }
    public class PlayerStatMutator : Mutator
    {
        public PlayerStatMutator(nint addr) : base(addr) { }
        public PawnStat Stat { get { return this[nameof(Stat)].As<PawnStat>(); } set { this["Stat"] = value; } }
        public float StatValue { get { return this[nameof(StatValue)].GetValue<float>(); } set { this[nameof(StatValue)].SetValue<float>(value); } }
    }
    public class CaveItemsMutator : Mutator
    {
        public CaveItemsMutator(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
    }
    public class DebrisActorMutator : Mutator
    {
        public DebrisActorMutator(nint addr) : base(addr) { }
        public Object DebrisActor { get { return this[nameof(DebrisActor)]; } set { this[nameof(DebrisActor)] = value; } }
    }
    public class EliteEnemiesMutator : Mutator
    {
        public EliteEnemiesMutator(nint addr) : base(addr) { }
        public float SpawnChanceModifier { get { return this[nameof(SpawnChanceModifier)].GetValue<float>(); } set { this[nameof(SpawnChanceModifier)].SetValue<float>(value); } }
        public int MaxElites { get { return this[nameof(MaxElites)].GetValue<int>(); } set { this[nameof(MaxElites)].SetValue<int>(value); } }
        public float EliteCooldown { get { return this[nameof(EliteCooldown)].GetValue<float>(); } set { this[nameof(EliteCooldown)].SetValue<float>(value); } }
    }
    public class MaxAmmoMutator : Mutator
    {
        public MaxAmmoMutator(nint addr) : base(addr) { }
        public UArray<EItemCategory> ApplyToItems { get { return new UArray<EItemCategory>(this[nameof(ApplyToItems)].Address); } }
        public float MaxAmmoMultiplier { get { return this[nameof(MaxAmmoMultiplier)].GetValue<float>(); } set { this[nameof(MaxAmmoMultiplier)].SetValue<float>(value); } }
    }
    public class RestrictItemCategoriesMutator : Mutator
    {
        public RestrictItemCategoriesMutator(nint addr) : base(addr) { }
        public UArray<EItemCategory> RestrictedCategories { get { return new UArray<EItemCategory>(this[nameof(RestrictedCategories)].Address); } }
    }
    public class SharedHealthMutator : Mutator
    {
        public SharedHealthMutator(nint addr) : base(addr) { }
        public float TotalHealthPool { get { return this[nameof(TotalHealthPool)].GetValue<float>(); } set { this[nameof(TotalHealthPool)].SetValue<float>(value); } }
    }
    public class RandomSecondaryMutator : Mutator
    {
        public RandomSecondaryMutator(nint addr) : base(addr) { }
        public bool MustBeCompleted { get { return this[nameof(MustBeCompleted)].Flag; } set { this[nameof(MustBeCompleted)].Flag = value; } }
    }
    public class ForcedSecondaryMutator : Mutator
    {
        public ForcedSecondaryMutator(nint addr) : base(addr) { }
        public Object ForceSecondaryObjective { get { return this[nameof(ForceSecondaryObjective)]; } set { this[nameof(ForceSecondaryObjective)] = value; } }
    }
    public class CompleteDarkNessMutator : Mutator
    {
        public CompleteDarkNessMutator(nint addr) : base(addr) { }
        public float FogDensity { get { return this[nameof(FogDensity)].GetValue<float>(); } set { this[nameof(FogDensity)].SetValue<float>(value); } }
        public LinearColor FogInscatteringColor { get { return this[nameof(FogInscatteringColor)].As<LinearColor>(); } set { this["FogInscatteringColor"] = value; } }
        public float FogMaxOpacity { get { return this[nameof(FogMaxOpacity)].GetValue<float>(); } set { this[nameof(FogMaxOpacity)].SetValue<float>(value); } }
        public float StartDistance { get { return this[nameof(StartDistance)].GetValue<float>(); } set { this[nameof(StartDistance)].SetValue<float>(value); } }
    }
    public class MissionPlayerAndCharacterWidget : UserWidget
    {
        public MissionPlayerAndCharacterWidget(nint addr) : base(addr) { }
        public void UpdateValues(int PlayerRank, int PlayerStars, int CharacterLevel, float CharacterProgress) { Invoke(nameof(UpdateValues), PlayerRank, PlayerStars, CharacterLevel, CharacterProgress); }
        public void StepCounter(float TimeScale, bool CounterFinished) { Invoke(nameof(StepCounter), TimeScale, CounterFinished); }
        public void PingPlayerRank() { Invoke(nameof(PingPlayerRank)); }
        public void PingCharacterLevel(int Level, int Stars) { Invoke(nameof(PingCharacterLevel), Level, Stars); }
        public void InitCounter(PlayerProgress PlayerProgressStart, CharacterProgress CharacterProgressStart, PlayerProgress PlayerProgressFinish, CharacterProgress CharacterProgressFinish) { Invoke(nameof(InitCounter), PlayerProgressStart, CharacterProgressStart, PlayerProgressFinish, CharacterProgressFinish); }
    }
    public class MissionResultInfo : Object
    {
        public MissionResultInfo(nint addr) : base(addr) { }
        public bool HasInfo { get { return this[nameof(HasInfo)].Flag; } set { this[nameof(HasInfo)].Flag = value; } }
        public float MissionTime { get { return this[nameof(MissionTime)].GetValue<float>(); } set { this[nameof(MissionTime)].SetValue<float>(value); } }
        public float MissionTotalHazBonus { get { return this[nameof(MissionTotalHazBonus)].GetValue<float>(); } set { this[nameof(MissionTotalHazBonus)].SetValue<float>(value); } }
        public Object MissionHazName { get { return this[nameof(MissionHazName)]; } set { this[nameof(MissionHazName)] = value; } }
        public float MissionHazBonus { get { return this[nameof(MissionHazBonus)].GetValue<float>(); } set { this[nameof(MissionHazBonus)].SetValue<float>(value); } }
        public float HazPlusBonus { get { return this[nameof(HazPlusBonus)].GetValue<float>(); } set { this[nameof(HazPlusBonus)].SetValue<float>(value); } }
        public float ComplexityBonus { get { return this[nameof(ComplexityBonus)].GetValue<float>(); } set { this[nameof(ComplexityBonus)].SetValue<float>(value); } }
        public int ComplexityDots { get { return this[nameof(ComplexityDots)].GetValue<int>(); } set { this[nameof(ComplexityDots)].SetValue<int>(value); } }
        public float LenghtBonus { get { return this[nameof(LenghtBonus)].GetValue<float>(); } set { this[nameof(LenghtBonus)].SetValue<float>(value); } }
        public int LenghtDots { get { return this[nameof(LenghtDots)].GetValue<int>(); } set { this[nameof(LenghtDots)].SetValue<int>(value); } }
        public UArray<Object> WarningTitles { get { return new UArray<Object>(this[nameof(WarningTitles)].Address); } }
        public UArray<Texture2D> WarningIcons { get { return new UArray<Texture2D>(this[nameof(WarningIcons)].Address); } }
        public UArray<float> WarningBonusses { get { return new UArray<float>(this[nameof(WarningBonusses)].Address); } }
        public float TotalCreditsSum { get { return this[nameof(TotalCreditsSum)].GetValue<float>(); } set { this[nameof(TotalCreditsSum)].SetValue<float>(value); } }
        public float TotalXPSum { get { return this[nameof(TotalXPSum)].GetValue<float>(); } set { this[nameof(TotalXPSum)].SetValue<float>(value); } }
        public bool wasSuccess { get { return this[nameof(wasSuccess)].Flag; } set { this[nameof(wasSuccess)].Flag = value; } }
        public float GetWarningBonusSum() { return Invoke<float>(nameof(GetWarningBonusSum)); }
    }
    public class FSDMissionSettings : DeveloperSettings
    {
        public FSDMissionSettings(nint addr) : base(addr) { }
        public SoftObjectPath DefaultRoomGenerator { get { return this[nameof(DefaultRoomGenerator)].As<SoftObjectPath>(); } set { this["DefaultRoomGenerator"] = value; } }
        public Object MissionComplexitySettings { get { return this[nameof(MissionComplexitySettings)]; } set { this[nameof(MissionComplexitySettings)] = value; } }
        public Object MissionDurationSettings { get { return this[nameof(MissionDurationSettings)]; } set { this[nameof(MissionDurationSettings)] = value; } }
        public float GetTotalHazPlusBonus(GameDifficulty Difficulty) { return Invoke<float>(nameof(GetTotalHazPlusBonus), Difficulty); }
        public float GetTotalHazardBonus(Object WorldContextObject, GeneratedMission mission, GameDifficulty Difficulty) { return Invoke<float>(nameof(GetTotalHazardBonus), WorldContextObject, mission, Difficulty); }
    }
    public class MissionStatCategory : DataAsset
    {
        public MissionStatCategory(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
    }
    public class MissionStat : DataAsset
    {
        public MissionStat(nint addr) : base(addr) { }
        public Object OnCountChanged { get { return this[nameof(OnCountChanged)]; } set { this[nameof(OnCountChanged)] = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public MissionStatCategory Category { get { return this[nameof(Category)].As<MissionStatCategory>(); } set { this["Category"] = value; } }
        public FSDAchievement StatAchievement { get { return this[nameof(StatAchievement)].As<FSDAchievement>(); } set { this["StatAchievement"] = value; } }
        public EMissionStatType MissionStatType { get { return (EMissionStatType)this[nameof(MissionStatType)].GetValue<int>(); } set { this[nameof(MissionStatType)].SetValue<int>((int)value); } }
        public bool DoNotShowInMissionStatView { get { return this[nameof(DoNotShowInMissionStatView)].Flag; } set { this[nameof(DoNotShowInMissionStatView)].Flag = value; } }
        public bool ShowAllValuesCombined { get { return this[nameof(ShowAllValuesCombined)].Flag; } set { this[nameof(ShowAllValuesCombined)].Flag = value; } }
        public bool ShowHighestValue { get { return this[nameof(ShowHighestValue)].Flag; } set { this[nameof(ShowHighestValue)].Flag = value; } }
        public void StatCountChanged__DelegateSignature(Object WorldContext, MissionStat MissionStat, float Value) { Invoke(nameof(StatCountChanged__DelegateSignature), WorldContext, MissionStat, Value); }
        public float SetStatValue(Object WorldContext, PlayerCharacter Character, float amount) { return Invoke<float>(nameof(SetStatValue), WorldContext, Character, amount); }
        public Object MissionStatToText(EMissionStatType StatType, float Value) { return Invoke<Object>(nameof(MissionStatToText), StatType, Value); }
        public void Increment(Object WorldContext, MissionStat Stat, Object CharacterClass, float amount) { Invoke(nameof(Increment), WorldContext, Stat, CharacterClass, amount); }
        public float GetStatMinCount(Object WorldContext) { return Invoke<float>(nameof(GetStatMinCount), WorldContext); }
        public float GetStatMaxCount(Object WorldContext) { return Invoke<float>(nameof(GetStatMaxCount), WorldContext); }
        public Object GetStatCountTotalAsText(Object WorldContext) { return Invoke<Object>(nameof(GetStatCountTotalAsText), WorldContext); }
        public float GetStatCountTotal(Object WorldContext) { return Invoke<float>(nameof(GetStatCountTotal), WorldContext); }
        public float GetStatCountPct(Object WorldContext, Object CharacterClass) { return Invoke<float>(nameof(GetStatCountPct), WorldContext, CharacterClass); }
        public Object GetStatCountAsText(Object WorldContext, PlayerCharacterID characterID) { return Invoke<Object>(nameof(GetStatCountAsText), WorldContext, characterID); }
        public float GetStatCount(Object WorldContext, PlayerCharacterID characterID) { return Invoke<float>(nameof(GetStatCount), WorldContext, characterID); }
        public Object GetSourceTitle() { return Invoke<Object>(nameof(GetSourceTitle)); }
        public Object GetLowestStatCountAsText(Object WorldContext) { return Invoke<Object>(nameof(GetLowestStatCountAsText), WorldContext); }
        public Texture2D GetIcon() { return Invoke<Texture2D>(nameof(GetIcon)); }
        public Object GetHighestStatCountAsText(Object WorldContext) { return Invoke<Object>(nameof(GetHighestStatCountAsText), WorldContext); }
        public Object GetCategoryTitle() { return Invoke<Object>(nameof(GetCategoryTitle)); }
    }
    public class MissionStatsCollector : ActorComponent
    {
        public MissionStatsCollector(nint addr) : base(addr) { }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public void OnResourceIncremented(CappedResource Resource, float amount) { Invoke(nameof(OnResourceIncremented), Resource, amount); }
    }
    public class GlobalMissionParameters : DataAsset
    {
        public GlobalMissionParameters(nint addr) : base(addr) { }
        public UArray<ResourceSpawner> DefaultResources { get { return new UArray<ResourceSpawner>(this[nameof(DefaultResources)].Address); } }
    }
    public class MissionTemplate : SavableDataAsset
    {
        public MissionTemplate(nint addr) : base(addr) { }
        public UArray<ResourceSpawner> ResourceDistribution { get { return new UArray<ResourceSpawner>(this[nameof(ResourceDistribution)].Address); } }
        public Object PrimaryObjective { get { return this[nameof(PrimaryObjective)]; } set { this[nameof(PrimaryObjective)] = value; } }
        public UArray<Object> SecondaryObjectives { get { return new UArray<Object>(this[nameof(SecondaryObjectives)].Address); } }
        public UArray<Object> DeepDiveObjectives { get { return new UArray<Object>(this[nameof(DeepDiveObjectives)].Address); } }
        public UArray<Mutator> BaseMutators { get { return new UArray<Mutator>(this[nameof(BaseMutators)].Address); } }
        public Object pls { get { return this[nameof(pls)]; } set { this[nameof(pls)] = value; } }
        public Object Level { get { return this[nameof(Level)]; } set { this[nameof(Level)] = value; } }
        public Object GameMode { get { return this[nameof(GameMode)]; } set { this[nameof(GameMode)] = value; } }
        public UArray<MissionComplexity> LockedComplexities { get { return new UArray<MissionComplexity>(this[nameof(LockedComplexities)].Address); } }
        public UArray<MissionDuration> LockedDurations { get { return new UArray<MissionDuration>(this[nameof(LockedDurations)].Address); } }
        public Object MissionName { get { return this[nameof(MissionName)]; } set { this[nameof(MissionName)] = value; } }
        public Object MissionImageLarge { get { return this[nameof(MissionImageLarge)]; } set { this[nameof(MissionImageLarge)] = value; } }
        public Object MissionButtonImage { get { return this[nameof(MissionButtonImage)]; } set { this[nameof(MissionButtonImage)] = value; } }
        public Texture2D MissionIcon { get { return this[nameof(MissionIcon)].As<Texture2D>(); } set { this["MissionIcon"] = value; } }
        public Texture2D MissionIconSmall { get { return this[nameof(MissionIconSmall)].As<Texture2D>(); } set { this["MissionIconSmall"] = value; } }
        public LinearColor MissionColor { get { return this[nameof(MissionColor)].As<LinearColor>(); } set { this["MissionColor"] = value; } }
        public int MissionTypeIndex { get { return this[nameof(MissionTypeIndex)].GetValue<int>(); } set { this[nameof(MissionTypeIndex)].SetValue<int>(value); } }
        public Object MissionTypeAnalyticsIndex { get { return this[nameof(MissionTypeAnalyticsIndex)]; } set { this[nameof(MissionTypeAnalyticsIndex)] = value; } }
        public UArray<Object> DNA { get { return new UArray<Object>(this[nameof(DNA)].Address); } }
        public UArray<Object> DebrisComponents { get { return new UArray<Object>(this[nameof(DebrisComponents)].Address); } }
        public bool MustBeUnlocked { get { return this[nameof(MustBeUnlocked)].Flag; } set { this[nameof(MustBeUnlocked)].Flag = value; } }
        public float RoomEncounerScale { get { return this[nameof(RoomEncounerScale)].GetValue<float>(); } set { this[nameof(RoomEncounerScale)].SetValue<float>(value); } }
        public float StationaryEnemyScale { get { return this[nameof(StationaryEnemyScale)].GetValue<float>(); } set { this[nameof(StationaryEnemyScale)].SetValue<float>(value); } }
        public UArray<Object> Tutorials { get { return new UArray<Object>(this[nameof(Tutorials)].Address); } }
        public void Receive_SetMissionParameters(GeneratedMission mission, RandomStream Random) { Invoke(nameof(Receive_SetMissionParameters), mission, Random); }
        public bool IsLocked(FSDSaveGame SaveGame) { return Invoke<bool>(nameof(IsLocked), SaveGame); }
        public UArray<MissionDuration> GetValidDurations() { return Invoke<UArray<MissionDuration>>(nameof(GetValidDurations)); }
        public UArray<MissionComplexity> GetValidComplexities() { return Invoke<UArray<MissionComplexity>>(nameof(GetValidComplexities)); }
        public Object GetSoftReferenceToPLS() { return Invoke<Object>(nameof(GetSoftReferenceToPLS)); }
        public ObjectiveMissionIcon GetPrimaryObjectiveIconFromAsset(MissionTemplate mission, bool getSmallVersion) { return Invoke<ObjectiveMissionIcon>(nameof(GetPrimaryObjectiveIconFromAsset), mission, getSmallVersion); }
        public ObjectiveMissionIcon GetPrimaryObjectiveIcon(bool getSmallVersion) { return Invoke<ObjectiveMissionIcon>(nameof(GetPrimaryObjectiveIcon), getSmallVersion); }
        public Object GetPLS() { return Invoke<Object>(nameof(GetPLS)); }
        public Object GetObjectiveClass() { return Invoke<Object>(nameof(GetObjectiveClass)); }
        public int GetMissionTypeIndex() { return Invoke<int>(nameof(GetMissionTypeIndex)); }
        public Texture2D GetMissionImageLarge() { return Invoke<Texture2D>(nameof(GetMissionImageLarge)); }
        public Texture2D GetMissionButtonImage() { return Invoke<Texture2D>(nameof(GetMissionButtonImage)); }
        public GeneratedMission GenerateMission(Object WorldContextObject, Biome Biome, int Seed, GlobalMissionSeed GlobalSeed, MissionComplexity limitComplexity, MissionDuration limitDuration, MissionMutator Mutator, UArray<MissionWarning> Warnings, MissionChallenge Challenge, UArray<Object> forceSecondary, GemResourceData forcedGem) { return Invoke<GeneratedMission>(nameof(GenerateMission), WorldContextObject, Biome, Seed, GlobalSeed, limitComplexity, limitDuration, Mutator, Warnings, Challenge, forceSecondary, forcedGem); }
    }
    public class MissionNameBank : DataAsset
    {
        public MissionNameBank(nint addr) : base(addr) { }
        public UArray<Object> FirstNames { get { return new UArray<Object>(this[nameof(FirstNames)].Address); } }
        public UArray<Object> LastNames { get { return new UArray<Object>(this[nameof(LastNames)].Address); } }
        public UArray<Object> GetRandomGeneratedNames(RandomStream Random, int Count) { return Invoke<UArray<Object>>(nameof(GetRandomGeneratedNames), Random, Count); }
    }
    public class MissionWarning : DataAsset
    {
        public MissionWarning(nint addr) : base(addr) { }
        public Object MissionBP { get { return this[nameof(MissionBP)]; } set { this[nameof(MissionBP)] = value; } }
        public bool IsOptionalExtraObjectiveMandatory { get { return this[nameof(IsOptionalExtraObjectiveMandatory)].Flag; } set { this[nameof(IsOptionalExtraObjectiveMandatory)].Flag = value; } }
        public bool OptionalExtraObjectiveIsRandom { get { return this[nameof(OptionalExtraObjectiveIsRandom)].Flag; } set { this[nameof(OptionalExtraObjectiveIsRandom)].Flag = value; } }
        public Object OptionalExtraObjective { get { return this[nameof(OptionalExtraObjective)]; } set { this[nameof(OptionalExtraObjective)] = value; } }
        public UArray<Object> BannedObjectives { get { return new UArray<Object>(this[nameof(BannedObjectives)].Address); } }
        public UArray<MissionMutator> BannedMutators { get { return new UArray<MissionMutator>(this[nameof(BannedMutators)].Address); } }
        public bool DoubleWarning { get { return this[nameof(DoubleWarning)].Flag; } set { this[nameof(DoubleWarning)].Flag = value; } }
        public UArray<Mutator> Mutators { get { return new UArray<Mutator>(this[nameof(Mutators)].Address); } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Texture2D CampaignIcon { get { return this[nameof(CampaignIcon)].As<Texture2D>(); } set { this["CampaignIcon"] = value; } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
        public MissionStat MissionCompletedStat { get { return this[nameof(MissionCompletedStat)].As<MissionStat>(); } set { this["MissionCompletedStat"] = value; } }
        public float CampaignWeight { get { return this[nameof(CampaignWeight)].GetValue<float>(); } set { this[nameof(CampaignWeight)].SetValue<float>(value); } }
    }
    public class MOD_MakeEliteEnemy : ActorComponent
    {
        public MOD_MakeEliteEnemy(nint addr) : base(addr) { }
    }
    public class MULE : DeepPathfinderCharacter
    {
        public MULE(nint addr) : base(addr) { }
        public HealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponent>(); } set { this["HealthComponent"] = value; } }
        public SimpleObjectInfoComponent ObjectInfo { get { return this[nameof(ObjectInfo)].As<SimpleObjectInfoComponent>(); } set { this["ObjectInfo"] = value; } }
        public bool IsDown { get { return this[nameof(IsDown)].Flag; } set { this[nameof(IsDown)].Flag = value; } }
        public void SetIsDown(bool IsDown) { Invoke(nameof(SetIsDown), IsDown); }
        public void SetControlledByDropShip(bool Control) { Invoke(nameof(SetControlledByDropShip), Control); }
        public void OnRep_IsDown() { Invoke(nameof(OnRep_IsDown)); }
    }
    public class Molly : MULE
    {
        public Molly(nint addr) : base(addr) { }
        public Object OnCalledByChanged { get { return this[nameof(OnCalledByChanged)]; } set { this[nameof(OnCalledByChanged)] = value; } }
        public ResourceBank ResourceBank { get { return this[nameof(ResourceBank)].As<ResourceBank>(); } set { this["ResourceBank"] = value; } }
        public OutlineComponent OutlineComponent { get { return this[nameof(OutlineComponent)].As<OutlineComponent>(); } set { this["OutlineComponent"] = value; } }
        public float ShowButtonDelay { get { return this[nameof(ShowButtonDelay)].GetValue<float>(); } set { this[nameof(ShowButtonDelay)].SetValue<float>(value); } }
        public Object OnReachedDropShip { get { return this[nameof(OnReachedDropShip)]; } set { this[nameof(OnReachedDropShip)] = value; } }
        public Object CalledBy { get { return this[nameof(CalledBy)]; } set { this[nameof(CalledBy)] = value; } }
        public void SetOpenForDeposit(bool Open) { Invoke(nameof(SetOpenForDeposit), Open); }
        public void SetGotoDropShip(Vector Location) { Invoke(nameof(SetGotoDropShip), Location); }
        public void SetCalledBy(PlayerCharacter InPlayer) { Invoke(nameof(SetCalledBy), InPlayer); }
        public void OnRep_CalledBy() { Invoke(nameof(OnRep_CalledBy)); }
        public DialogDataAsset GetCallingShout() { return Invoke<DialogDataAsset>(nameof(GetCallingShout)); }
        public void EnableButton() { Invoke(nameof(EnableButton)); }
        public void CalledByDelegate__DelegateSignature(PlayerCharacter InPlayer) { Invoke(nameof(CalledByDelegate__DelegateSignature), InPlayer); }
        public void AddTrayEffect(NiagaraSystem Effect, int numberOfTraysAffected) { Invoke(nameof(AddTrayEffect), Effect, numberOfTraysAffected); }
    }
    public class MiniMule : MULE
    {
        public MiniMule(nint addr) : base(addr) { }
        public UArray<Gem> LostLegs { get { return new UArray<Gem>(this[nameof(LostLegs)].Address); } }
        public void SetLegsVisibleOnScanner() { Invoke(nameof(SetLegsVisibleOnScanner)); }
        public void OnLegsSetVisible() { Invoke(nameof(OnLegsSetVisible)); }
        public UArray<Gem> FindLegsInLevelSortedByDistance() { return Invoke<UArray<Gem>>(nameof(FindLegsInLevelSortedByDistance)); }
        public void CheatRepair() { Invoke(nameof(CheatRepair)); }
    }
    public class MorkiteSeedNut : Actor
    {
        public MorkiteSeedNut(nint addr) : base(addr) { }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
    }
    public class MotionAudioController : FSDAudioComponent
    {
        public MotionAudioController(nint addr) : base(addr) { }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
        public float IncreseSpeed { get { return this[nameof(IncreseSpeed)].GetValue<float>(); } set { this[nameof(IncreseSpeed)].SetValue<float>(value); } }
        public float DecaySpeed { get { return this[nameof(DecaySpeed)].GetValue<float>(); } set { this[nameof(DecaySpeed)].SetValue<float>(value); } }
        public bool DebugText { get { return this[nameof(DebugText)].Flag; } set { this[nameof(DebugText)].Flag = value; } }
        public bool Clamp { get { return this[nameof(Clamp)].Flag; } set { this[nameof(Clamp)].Flag = value; } }
        public bool Interp { get { return this[nameof(Interp)].Flag; } set { this[nameof(Interp)].Flag = value; } }
        public float AccelerationThreshold { get { return this[nameof(AccelerationThreshold)].GetValue<float>(); } set { this[nameof(AccelerationThreshold)].SetValue<float>(value); } }
        public float SpeedThreshold { get { return this[nameof(SpeedThreshold)].GetValue<float>(); } set { this[nameof(SpeedThreshold)].SetValue<float>(value); } }
        public float FadeInTime { get { return this[nameof(FadeInTime)].GetValue<float>(); } set { this[nameof(FadeInTime)].SetValue<float>(value); } }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
        public bool AutoPlayOnSpeedThreshold { get { return this[nameof(AutoPlayOnSpeedThreshold)].Flag; } set { this[nameof(AutoPlayOnSpeedThreshold)].Flag = value; } }
    }
    public class MountedGun : Actor
    {
        public MountedGun(nint addr) : base(addr) { }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public WeaponFireComponent WeaponFire { get { return this[nameof(WeaponFire)].As<WeaponFireComponent>(); } set { this["WeaponFire"] = value; } }
        public GunLogicComponent GunLogic { get { return this[nameof(GunLogic)].As<GunLogicComponent>(); } set { this["GunLogic"] = value; } }
        public void Server_Test() { Invoke(nameof(Server_Test)); }
    }
    public class GunLogicComponent : ActorComponent
    {
        public GunLogicComponent(nint addr) : base(addr) { }
        public WeaponFireComponent WeaponFire { get { return this[nameof(WeaponFire)].As<WeaponFireComponent>(); } set { this["WeaponFire"] = value; } }
        public MeshComponent Mesh { get { return this[nameof(Mesh)].As<MeshComponent>(); } set { this["Mesh"] = value; } }
        public float RateOfFire { get { return this[nameof(RateOfFire)].GetValue<float>(); } set { this[nameof(RateOfFire)].SetValue<float>(value); } }
        public ParticleSystem MuzzleParticles { get { return this[nameof(MuzzleParticles)].As<ParticleSystem>(); } set { this["MuzzleParticles"] = value; } }
        public ParticleSystem TracerParticles { get { return this[nameof(TracerParticles)].As<ParticleSystem>(); } set { this["TracerParticles"] = value; } }
        public SoundCue FireSound { get { return this[nameof(FireSound)].As<SoundCue>(); } set { this["FireSound"] = value; } }
        public float MinTracerDistance { get { return this[nameof(MinTracerDistance)].GetValue<float>(); } set { this[nameof(MinTracerDistance)].SetValue<float>(value); } }
        public float TracerSpeed { get { return this[nameof(TracerSpeed)].GetValue<float>(); } set { this[nameof(TracerSpeed)].SetValue<float>(value); } }
        public void SetMesh(MeshComponent Mesh) { Invoke(nameof(SetMesh), Mesh); }
        public void OnWeaponFireEnded() { Invoke(nameof(OnWeaponFireEnded)); }
        public void OnWeaponFired(Vector Location) { Invoke(nameof(OnWeaponFired), Location); }
    }
    public class MouseCursorWidget : FSDUserWidget
    {
        public MouseCursorWidget(nint addr) : base(addr) { }
        public EFSDInputSource TargetInput { get { return (EFSDInputSource)this[nameof(TargetInput)].GetValue<int>(); } set { this[nameof(TargetInput)].SetValue<int>((int)value); } }
        public bool bIsHovering { get { return this[nameof(bIsHovering)].Flag; } set { this[nameof(bIsHovering)].Flag = value; } }
        public void OnUnhover() { Invoke(nameof(OnUnhover)); }
        public void OnInputSourceChanged(EFSDInputSource Source) { Invoke(nameof(OnInputSourceChanged), Source); }
        public void OnHover() { Invoke(nameof(OnHover)); }
    }
    public class MoustacheVanityItem : VanityItem
    {
        public MoustacheVanityItem(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object AnimInstance { get { return this[nameof(AnimInstance)]; } set { this[nameof(AnimInstance)] = value; } }
        public bool RequiresSlimArmor { get { return this[nameof(RequiresSlimArmor)].Flag; } set { this[nameof(RequiresSlimArmor)].Flag = value; } }
        public Object VanityTags { get { return this[nameof(VanityTags)]; } set { this[nameof(VanityTags)] = value; } }
    }
    public class MultiHitscanComponent : HitscanBaseComponent
    {
        public MultiHitscanComponent(nint addr) : base(addr) { }
        public Object OnHit { get { return this[nameof(OnHit)]; } set { this[nameof(OnHit)] = value; } }
        public int BulletsPerShot { get { return this[nameof(BulletsPerShot)].GetValue<int>(); } set { this[nameof(BulletsPerShot)].SetValue<int>(value); } }
        public float GeneralImpactAudioVolume { get { return this[nameof(GeneralImpactAudioVolume)].GetValue<float>(); } set { this[nameof(GeneralImpactAudioVolume)].SetValue<float>(value); } }
        public bool CountMultiHits { get { return this[nameof(CountMultiHits)].Flag; } set { this[nameof(CountMultiHits)].Flag = value; } }
        public UArray<Actor> DamagedActorCache { get { return new UArray<Actor>(this[nameof(DamagedActorCache)].Address); } }
        public MultiHitScanHits Hits { get { return this[nameof(Hits)].As<MultiHitScanHits>(); } set { this["Hits"] = value; } }
        public UArray<Actor> ActorsHit { get { return new UArray<Actor>(this[nameof(ActorsHit)].Address); } }
        public void Server_RegisterHit(MultiHitScanHits hitResults) { Invoke(nameof(Server_RegisterHit), hitResults); }
        public void All_ShowHit(MultiHitScanHits hitResults) { Invoke(nameof(All_ShowHit), hitResults); }
    }
    public class MultiprojectileSpawner : ActorComponent
    {
        public MultiprojectileSpawner(nint addr) : base(addr) { }
        public UArray<ProjectileSpawnData> ProjectileData { get { return new UArray<ProjectileSpawnData>(this[nameof(ProjectileData)].Address); } }
        public bool ProjectilesIgnoreEachOther { get { return this[nameof(ProjectilesIgnoreEachOther)].Flag; } set { this[nameof(ProjectilesIgnoreEachOther)].Flag = value; } }
        public bool GetIsFiring() { return Invoke<bool>(nameof(GetIsFiring)); }
        public void Fire(Vector Velocity, Vector Origin) { Invoke(nameof(Fire), Velocity, Origin); }
        public MultiprojectileSpawner FindMultiProjectileSpawner(Actor Actor, DataAsset RangedAttack) { return Invoke<MultiprojectileSpawner>(nameof(FindMultiProjectileSpawner), Actor, RangedAttack); }
    }
    public class MultiTargeter : Interface
    {
        public MultiTargeter(nint addr) : base(addr) { }
    }
    public class MusicLibrary : DataAsset
    {
        public MusicLibrary(nint addr) : base(addr) { }
        public UArray<Object> MusicCues { get { return new UArray<Object>(this[nameof(MusicCues)].Address); } }
        public MusicCategory Category { get { return this[nameof(Category)].As<MusicCategory>(); } set { this["Category"] = value; } }
    }
    public class MusicCategory : DataAsset
    {
        public MusicCategory(nint addr) : base(addr) { }
        public float FadeDuration { get { return this[nameof(FadeDuration)].GetValue<float>(); } set { this[nameof(FadeDuration)].SetValue<float>(value); } }
    }
    public class MusicReplicator : Actor
    {
        public MusicReplicator(nint addr) : base(addr) { }
        public UArray<ActiveMusicItem> ActiveMusic { get { return new UArray<ActiveMusicItem>(this[nameof(ActiveMusic)].Address); } }
        public void OnRep_ActiveMusic() { Invoke(nameof(OnRep_ActiveMusic)); }
    }
    public class MusicManager : WorldSubsystem
    {
        public MusicManager(nint addr) : base(addr) { }
        public Object ActiveAudio { get { return this[nameof(ActiveAudio)]; } set { this[nameof(ActiveAudio)] = value; } }
        public void StopHandle(MusicHandle Handle) { Invoke(nameof(StopHandle), Handle); }
        public void StopCategory(MusicCategory Category) { Invoke(nameof(StopCategory), Category); }
        public void SetIsPaused(bool IsPaused) { Invoke(nameof(SetIsPaused), IsPaused); }
        public MusicHandle PlayLibrary(MusicLibrary library, int musicIndex) { return Invoke<MusicHandle>(nameof(PlayLibrary), library, musicIndex); }
        public MusicHandle Play(SoundBase Music, MusicCategory Category) { return Invoke<MusicHandle>(nameof(Play), Music, Category); }
    }
    public class NeedleSprayer : Actor
    {
        public NeedleSprayer(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent SKMesh { get { return this[nameof(SKMesh)].As<SkeletalMeshComponent>(); } set { this["SKMesh"] = value; } }
        public HitscanComponent FireComponent { get { return this[nameof(FireComponent)].As<HitscanComponent>(); } set { this["FireComponent"] = value; } }
        public HitscanComponent OnSpawnedEffectComponent { get { return this[nameof(OnSpawnedEffectComponent)].As<HitscanComponent>(); } set { this["OnSpawnedEffectComponent"] = value; } }
        public PointLightComponent MuzzleFlashLight { get { return this[nameof(MuzzleFlashLight)].As<PointLightComponent>(); } set { this["MuzzleFlashLight"] = value; } }
        public NiagaraComponent MuzzleFlashParticleSys { get { return this[nameof(MuzzleFlashParticleSys)].As<NiagaraComponent>(); } set { this["MuzzleFlashParticleSys"] = value; } }
        public NiagaraComponent ImpactParticleComponent { get { return this[nameof(ImpactParticleComponent)].As<NiagaraComponent>(); } set { this["ImpactParticleComponent"] = value; } }
        public SceneComponent ShotOriginPivot { get { return this[nameof(ShotOriginPivot)].As<SceneComponent>(); } set { this["ShotOriginPivot"] = value; } }
        public HitscanComponent HitscanComponent { get { return this[nameof(HitscanComponent)].As<HitscanComponent>(); } set { this["HitscanComponent"] = value; } }
        public FSDAudioComponent SoundEnd { get { return this[nameof(SoundEnd)].As<FSDAudioComponent>(); } set { this["SoundEnd"] = value; } }
        public AnimMontage ReloadAnimation { get { return this[nameof(ReloadAnimation)].As<AnimMontage>(); } set { this["ReloadAnimation"] = value; } }
        public int MaxRotations { get { return this[nameof(MaxRotations)].GetValue<int>(); } set { this[nameof(MaxRotations)].SetValue<int>(value); } }
        public int LinesPerRotation { get { return this[nameof(LinesPerRotation)].GetValue<int>(); } set { this[nameof(LinesPerRotation)].SetValue<int>(value); } }
        public Vector2D ShotAngleFromTop { get { return this[nameof(ShotAngleFromTop)].As<Vector2D>(); } set { this["ShotAngleFromTop"] = value; } }
        public float DeployDelay { get { return this[nameof(DeployDelay)].GetValue<float>(); } set { this[nameof(DeployDelay)].SetValue<float>(value); } }
        public float LifeTime { get { return this[nameof(LifeTime)].GetValue<float>(); } set { this[nameof(LifeTime)].SetValue<float>(value); } }
        public float TimeBetweenRotations { get { return this[nameof(TimeBetweenRotations)].GetValue<float>(); } set { this[nameof(TimeBetweenRotations)].SetValue<float>(value); } }
        public float RearmTime { get { return this[nameof(RearmTime)].GetValue<float>(); } set { this[nameof(RearmTime)].SetValue<float>(value); } }
        public float AvoidCloseOffset { get { return this[nameof(AvoidCloseOffset)].GetValue<float>(); } set { this[nameof(AvoidCloseOffset)].SetValue<float>(value); } }
        public float ShotOriginOffset { get { return this[nameof(ShotOriginOffset)].GetValue<float>(); } set { this[nameof(ShotOriginOffset)].SetValue<float>(value); } }
        public int MaxRearms { get { return this[nameof(MaxRearms)].GetValue<int>(); } set { this[nameof(MaxRearms)].SetValue<int>(value); } }
        public bool PlayAnimationOnBeginPlay { get { return this[nameof(PlayAnimationOnBeginPlay)].Flag; } set { this[nameof(PlayAnimationOnBeginPlay)].Flag = value; } }
        public bool PlayAnimationOnReload { get { return this[nameof(PlayAnimationOnReload)].Flag; } set { this[nameof(PlayAnimationOnReload)].Flag = value; } }
        public bool DrawDebugLines { get { return this[nameof(DrawDebugLines)].Flag; } set { this[nameof(DrawDebugLines)].Flag = value; } }
        public float DebugLinesDuration { get { return this[nameof(DebugLinesDuration)].GetValue<float>(); } set { this[nameof(DebugLinesDuration)].SetValue<float>(value); } }
        public void OnSpinningChanged(bool isSpinning) { Invoke(nameof(OnSpinningChanged), isSpinning); }
        public void OnHit(HitResult Result, bool IsPenetrating) { Invoke(nameof(OnHit), Result, IsPenetrating); }
    }
    public class NewsTextLists : DataAsset
    {
        public NewsTextLists(nint addr) : base(addr) { }
        public UArray<Object> Verb { get { return new UArray<Object>(this[nameof(Verb)].Address); } }
        public UArray<Object> Person { get { return new UArray<Object>(this[nameof(Person)].Address); } }
        public UArray<Object> Creature { get { return new UArray<Object>(this[nameof(Creature)].Address); } }
        public UArray<Object> Resource { get { return new UArray<Object>(this[nameof(Resource)].Address); } }
        public UArray<Object> Minerals { get { return new UArray<Object>(this[nameof(Minerals)].Address); } }
        public UArray<Object> MineralFactions { get { return new UArray<Object>(this[nameof(MineralFactions)].Address); } }
    }
    public class NewsTextHeadlines : DataAsset
    {
        public NewsTextHeadlines(nint addr) : base(addr) { }
        public UArray<Object> MineralTradeTicker { get { return new UArray<Object>(this[nameof(MineralTradeTicker)].Address); } }
    }
    public class NiagaraSpawnerAndCacheGenerator : Actor
    {
        public NiagaraSpawnerAndCacheGenerator(nint addr) : base(addr) { }
        public UArray<FXSystemAsset> ToGenerate { get { return new UArray<FXSystemAsset>(this[nameof(ToGenerate)].Address); } }
        public UArray<FXSystemComponent> Generating { get { return new UArray<FXSystemComponent>(this[nameof(Generating)].Address); } }
    }
    public class NoiseCarveAttackEffect : AttackEffect
    {
        public NoiseCarveAttackEffect(nint addr) : base(addr) { }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public float CarveDiameterCM { get { return this[nameof(CarveDiameterCM)].GetValue<float>(); } set { this[nameof(CarveDiameterCM)].SetValue<float>(value); } }
        public float CarveNoiseCM { get { return this[nameof(CarveNoiseCM)].GetValue<float>(); } set { this[nameof(CarveNoiseCM)].SetValue<float>(value); } }
        public float CarveBurnThicknessCM { get { return this[nameof(CarveBurnThicknessCM)].GetValue<float>(); } set { this[nameof(CarveBurnThicknessCM)].SetValue<float>(value); } }
        public float CarverOffset { get { return this[nameof(CarverOffset)].GetValue<float>(); } set { this[nameof(CarverOffset)].SetValue<float>(value); } }
        public Object Socket { get { return this[nameof(Socket)]; } set { this[nameof(Socket)] = value; } }
    }
    public class NoiseFunctionLibrary : BlueprintFunctionLibrary
    {
        public NoiseFunctionLibrary(nint addr) : base(addr) { }
        public void SphericalNoiseMovementComponent(Object WorldContextObject, SceneComponent Component, Vector Center, float Radius, float Speed, float TimeOffset) { Invoke(nameof(SphericalNoiseMovementComponent), WorldContextObject, Component, Center, Radius, Speed, TimeOffset); }
        public void SphericalNoiseMovementActor(Object WorldContextObject, Actor Actor, Vector Center, float Radius, float Speed, float TimeOffset) { Invoke(nameof(SphericalNoiseMovementActor), WorldContextObject, Actor, Center, Radius, Speed, TimeOffset); }
        public Vector NoiseSphere3D(Object WorldContextObject, float Time, float Radius) { return Invoke<Vector>(nameof(NoiseSphere3D), WorldContextObject, Time, Radius); }
        public Vector2D NoiseSphere2D(Object WorldContextObject, float Time, float Radius) { return Invoke<Vector2D>(nameof(NoiseSphere2D), WorldContextObject, Time, Radius); }
        public float Noise3D(Object WorldContextObject, float X, float Y, float Z) { return Invoke<float>(nameof(Noise3D), WorldContextObject, X, Y, Z); }
        public float Noise2D(Object WorldContextObject, float X, float Y) { return Invoke<float>(nameof(Noise2D), WorldContextObject, X, Y); }
        public float Noise(Object WorldContextObject, float X) { return Invoke<float>(nameof(Noise), WorldContextObject, X); }
    }
    public class NoiseVisualizor : Actor
    {
        public NoiseVisualizor(nint addr) : base(addr) { }
        public FloodFillSettings FloodFillSettings { get { return this[nameof(FloodFillSettings)].As<FloodFillSettings>(); } set { this["FloodFillSettings"] = value; } }
        public float FreqMultiplier { get { return this[nameof(FreqMultiplier)].GetValue<float>(); } set { this[nameof(FreqMultiplier)].SetValue<float>(value); } }
        public float AmplitudeMultiplier { get { return this[nameof(AmplitudeMultiplier)].GetValue<float>(); } set { this[nameof(AmplitudeMultiplier)].SetValue<float>(value); } }
        public Vector NoiseSize { get { return this[nameof(NoiseSize)].As<Vector>(); } set { this["NoiseSize"] = value; } }
        public float PointSize { get { return this[nameof(PointSize)].GetValue<float>(); } set { this[nameof(PointSize)].SetValue<float>(value); } }
        public float PostNoiseAmplitude { get { return this[nameof(PostNoiseAmplitude)].GetValue<float>(); } set { this[nameof(PostNoiseAmplitude)].SetValue<float>(value); } }
        public int Octaves { get { return this[nameof(Octaves)].GetValue<int>(); } set { this[nameof(Octaves)].SetValue<int>(value); } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public bool ShowNoise { get { return this[nameof(ShowNoise)].Flag; } set { this[nameof(ShowNoise)].Flag = value; } }
        public bool ShowTerrainNoise { get { return this[nameof(ShowTerrainNoise)].Flag; } set { this[nameof(ShowTerrainNoise)].Flag = value; } }
    }
    public class NoisyPathfinderComponent : ActorComponent
    {
        public NoisyPathfinderComponent(nint addr) : base(addr) { }
    }
    public class NoisyPathfinderTest : Actor
    {
        public NoisyPathfinderTest(nint addr) : base(addr) { }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
        public Vector StartDirection { get { return this[nameof(StartDirection)].As<Vector>(); } set { this["StartDirection"] = value; } }
        public Vector EndDirection { get { return this[nameof(EndDirection)].As<Vector>(); } set { this["EndDirection"] = value; } }
        public float DirectionDistance { get { return this[nameof(DirectionDistance)].GetValue<float>(); } set { this[nameof(DirectionDistance)].SetValue<float>(value); } }
        public float DirectionPenalty { get { return this[nameof(DirectionPenalty)].GetValue<float>(); } set { this[nameof(DirectionPenalty)].SetValue<float>(value); } }
        public float ZPenaltyPower { get { return this[nameof(ZPenaltyPower)].GetValue<float>(); } set { this[nameof(ZPenaltyPower)].SetValue<float>(value); } }
        public float ZPenaltyScale { get { return this[nameof(ZPenaltyScale)].GetValue<float>(); } set { this[nameof(ZPenaltyScale)].SetValue<float>(value); } }
        public float DistancePenaltyScale { get { return this[nameof(DistancePenaltyScale)].GetValue<float>(); } set { this[nameof(DistancePenaltyScale)].SetValue<float>(value); } }
        public float RandomPenaltyScale { get { return this[nameof(RandomPenaltyScale)].GetValue<float>(); } set { this[nameof(RandomPenaltyScale)].SetValue<float>(value); } }
        public UArray<PathObstacle> Obstacles { get { return new UArray<PathObstacle>(this[nameof(Obstacles)].Address); } }
        public TunnelSegmentSetting TunnelSettings { get { return this[nameof(TunnelSettings)].As<TunnelSegmentSetting>(); } set { this["TunnelSettings"] = value; } }
        public TunnelParameters TunnelParameters { get { return this[nameof(TunnelParameters)].As<TunnelParameters>(); } set { this["TunnelParameters"] = value; } }
        public int StepSize { get { return this[nameof(StepSize)].GetValue<int>(); } set { this[nameof(StepSize)].SetValue<int>(value); } }
        public bool Realtime { get { return this[nameof(Realtime)].Flag; } set { this[nameof(Realtime)].Flag = value; } }
        public bool CarvePath { get { return this[nameof(CarvePath)].Flag; } set { this[nameof(CarvePath)].Flag = value; } }
        public bool CanDiagonal { get { return this[nameof(CanDiagonal)].Flag; } set { this[nameof(CanDiagonal)].Flag = value; } }
        public FloodFillSettings FloodFillSettings { get { return this[nameof(FloodFillSettings)].As<FloodFillSettings>(); } set { this["FloodFillSettings"] = value; } }
        public DeepCSGWorld CSGWorld { get { return this[nameof(CSGWorld)].As<DeepCSGWorld>(); } set { this["CSGWorld"] = value; } }
    }
    public class NoMovementStateComponent : CharacterStateComponent
    {
        public NoMovementStateComponent(nint addr) : base(addr) { }
        public bool DisableHeadLightOnEnter { get { return this[nameof(DisableHeadLightOnEnter)].Flag; } set { this[nameof(DisableHeadLightOnEnter)].Flag = value; } }
        public bool EnableHeadLightOnExit { get { return this[nameof(EnableHeadLightOnExit)].Flag; } set { this[nameof(EnableHeadLightOnExit)].Flag = value; } }
    }
    public class AttachedStateComponent : CharacterStateComponent
    {
        public AttachedStateComponent(nint addr) : base(addr) { }
        public bool DisableHeadLightOnEnter { get { return this[nameof(DisableHeadLightOnEnter)].Flag; } set { this[nameof(DisableHeadLightOnEnter)].Flag = value; } }
        public bool EnableHeadLightOnExit { get { return this[nameof(EnableHeadLightOnExit)].Flag; } set { this[nameof(EnableHeadLightOnExit)].Flag = value; } }
        public float MaxPitch { get { return this[nameof(MaxPitch)].GetValue<float>(); } set { this[nameof(MaxPitch)].SetValue<float>(value); } }
    }
    public class OxygenComponent : ActorComponent
    {
        public OxygenComponent(nint addr) : base(addr) { }
        public Object OnOxygenChanged { get { return this[nameof(OnOxygenChanged)]; } set { this[nameof(OnOxygenChanged)] = value; } }
        public Object OnOxygenReplenishingEvent { get { return this[nameof(OnOxygenReplenishingEvent)]; } set { this[nameof(OnOxygenReplenishingEvent)] = value; } }
        public float OxygenGivenOnRevive { get { return this[nameof(OxygenGivenOnRevive)].GetValue<float>(); } set { this[nameof(OxygenGivenOnRevive)].SetValue<float>(value); } }
        public float CurrentOxygen { get { return this[nameof(CurrentOxygen)].GetValue<float>(); } set { this[nameof(CurrentOxygen)].SetValue<float>(value); } }
        public float OxygenReplinishmentRate { get { return this[nameof(OxygenReplinishmentRate)].GetValue<float>(); } set { this[nameof(OxygenReplinishmentRate)].SetValue<float>(value); } }
        public int NetworkedOxygen { get { return this[nameof(NetworkedOxygen)].GetValue<int>(); } set { this[nameof(NetworkedOxygen)].SetValue<int>(value); } }
        public bool IsReplenishingOxygen { get { return this[nameof(IsReplenishingOxygen)].Flag; } set { this[nameof(IsReplenishingOxygen)].Flag = value; } }
        public float OxygenDepletionPersecond { get { return this[nameof(OxygenDepletionPersecond)].GetValue<float>(); } set { this[nameof(OxygenDepletionPersecond)].SetValue<float>(value); } }
        public UArray<OxygenCallback> Callbacks { get { return new UArray<OxygenCallback>(this[nameof(Callbacks)].Address); } }
        public Object NoOxygenStatusEffect { get { return this[nameof(NoOxygenStatusEffect)]; } set { this[nameof(NoOxygenStatusEffect)] = value; } }
        public void RegisterOxygenEvent(Object OxygenCallback, float oxygenLevel, bool triggerOnOxygenLoss) { Invoke(nameof(RegisterOxygenEvent), OxygenCallback, oxygenLevel, triggerOnOxygenLoss); }
        public void OnRevived() { Invoke(nameof(OnRevived)); }
        public void OnRep_NetworkedOxygen(int OldValue) { Invoke(nameof(OnRep_NetworkedOxygen), OldValue); }
        public void OnRep_IsReplenishingOxygen() { Invoke(nameof(OnRep_IsReplenishingOxygen)); }
        public void OnDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnDeath), HealthComponent); }
    }
    public class OxygenSourceComponent : ActorComponent
    {
        public OxygenSourceComponent(nint addr) : base(addr) { }
        public float SourceRadius { get { return this[nameof(SourceRadius)].GetValue<float>(); } set { this[nameof(SourceRadius)].SetValue<float>(value); } }
        public float CenterOffset { get { return this[nameof(CenterOffset)].GetValue<float>(); } set { this[nameof(CenterOffset)].SetValue<float>(value); } }
        public Object OnOxygenActivationChanged { get { return this[nameof(OnOxygenActivationChanged)]; } set { this[nameof(OnOxygenActivationChanged)] = value; } }
        public NoOxygenMutator Mutator { get { return this[nameof(Mutator)].As<NoOxygenMutator>(); } set { this["Mutator"] = value; } }
        public void OnTimerTick() { Invoke(nameof(OnTimerTick)); }
        public void OnSourceActivated() { Invoke(nameof(OnSourceActivated)); }
    }
    public class CampaignNotification : Object
    {
        public CampaignNotification(nint addr) : base(addr) { }
        public Campaign Campaign { get { return this[nameof(Campaign)].As<Campaign>(); } set { this["Campaign"] = value; } }
        public CampaignMission mission { get { return this[nameof(mission)].As<CampaignMission>(); } set { this["mission"] = value; } }
        public int Progress { get { return this[nameof(Progress)].GetValue<int>(); } set { this[nameof(Progress)].SetValue<int>(value); } }
        public bool bIsCampaignCompleted { get { return this[nameof(bIsCampaignCompleted)].Flag; } set { this[nameof(bIsCampaignCompleted)].Flag = value; } }
    }
    public class NotificationSubSystem : GameInstanceSubsystem
    {
        public NotificationSubSystem(nint addr) : base(addr) { }
        public Object OnNewSpaceRigNotificationEvent { get { return this[nameof(OnNewSpaceRigNotificationEvent)]; } set { this[nameof(OnNewSpaceRigNotificationEvent)] = value; } }
        public Object OnCampaignNotification { get { return this[nameof(OnCampaignNotification)]; } set { this[nameof(OnCampaignNotification)] = value; } }
        public UArray<SpaceRigNotification> SpaceRigNotifications { get { return new UArray<SpaceRigNotification>(this[nameof(SpaceRigNotifications)].Address); } }
        public CampaignNotification CampaignNotification { get { return this[nameof(CampaignNotification)].As<CampaignNotification>(); } set { this["CampaignNotification"] = value; } }
        public bool GetNextSpaceRigNotification(SpaceRigNotification NextNotification) { return Invoke<bool>(nameof(GetNextSpaceRigNotification), NextNotification); }
        public void ClearCampaignNotifications() { Invoke(nameof(ClearCampaignNotifications)); }
        public void AddSpaceRigNotification(SpaceRigNotification NewNotification, Object ID, bool TriggerEvent) { Invoke(nameof(AddSpaceRigNotification), NewNotification, ID, TriggerEvent); }
    }
    public class PlayerCharacterID : SavableDataAsset
    {
        public PlayerCharacterID(nint addr) : base(addr) { }
        public Object AssetName { get { return this[nameof(AssetName)]; } set { this[nameof(AssetName)] = value; } }
        public Object Character { get { return this[nameof(Character)]; } set { this[nameof(Character)] = value; } }
        public Object AnalyticsID { get { return this[nameof(AnalyticsID)]; } set { this[nameof(AnalyticsID)] = value; } }
        public PlayerCharacterData CharacterData { get { return this[nameof(CharacterData)].As<PlayerCharacterData>(); } set { this["CharacterData"] = value; } }
        public PlayerCharacterData GetCharacterData() { return Invoke<PlayerCharacterData>(nameof(GetCharacterData)); }
        public Object GetCharacterClass() { return Invoke<Object>(nameof(GetCharacterClass)); }
        public PlayerCharacter GetCharacter() { return Invoke<PlayerCharacter>(nameof(GetCharacter)); }
    }
    public class ItemID : SavableDataAsset
    {
        public ItemID(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public PlayerCharacterID ItemOwner { get { return this[nameof(ItemOwner)].As<PlayerCharacterID>(); } set { this["ItemOwner"] = value; } }
        public EItemCategory ItemCategory { get { return (EItemCategory)this[nameof(ItemCategory)].GetValue<int>(); } set { this[nameof(ItemCategory)].SetValue<int>((int)value); } }
        public bool IsItemClassChildOf(Object InParentClass) { return Invoke<bool>(nameof(IsItemClassChildOf), InParentClass); }
        public ItemData GetItemData() { return Invoke<ItemData>(nameof(GetItemData)); }
        public Object GetItemClass() { return Invoke<Object>(nameof(GetItemClass)); }
        public EItemCategory GetItemCategory() { return Invoke<EItemCategory>(nameof(GetItemCategory)); }
        public Item GetItem() { return Invoke<Item>(nameof(GetItem)); }
        public UArray<ItemSkin> GetAllSkins() { return Invoke<UArray<ItemSkin>>(nameof(GetAllSkins)); }
        public Object GetActorClass() { return Invoke<Object>(nameof(GetActorClass)); }
        public Actor GetActor() { return Invoke<Actor>(nameof(GetActor)); }
    }
    public class EnemyID : SavableDataAsset
    {
        public EnemyID(nint addr) : base(addr) { }
    }
    public class CategoryID : DataAsset
    {
        public CategoryID(nint addr) : base(addr) { }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
    }
    public class PlayerInfoComponent : ObjectInfoComponent
    {
        public PlayerInfoComponent(nint addr) : base(addr) { }
        public Object LookAtShout { get { return this[nameof(LookAtShout)]; } set { this[nameof(LookAtShout)] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
    }
    public class ActorContextWidget : UserWidget
    {
        public ActorContextWidget(nint addr) : base(addr) { }
        public Actor ContextActor { get { return this[nameof(ContextActor)].As<Actor>(); } set { this["ContextActor"] = value; } }
        public PrimitiveComponent ContextPrimitive { get { return this[nameof(ContextPrimitive)].As<PrimitiveComponent>(); } set { this["ContextPrimitive"] = value; } }
        public void Update(PrimitiveComponent InContextPrimitive) { Invoke(nameof(Update), InContextPrimitive); }
        public void Show(PrimitiveComponent InContextPrimitive) { Invoke(nameof(Show), InContextPrimitive); }
        public void ReceiveUpdate(PrimitiveComponent InContextPrimitive) { Invoke(nameof(ReceiveUpdate), InContextPrimitive); }
        public void ReceiveShow(PrimitiveComponent InContextPrimitive) { Invoke(nameof(ReceiveShow), InContextPrimitive); }
        public void ReceiveContextActorChanged(Actor InContextActor) { Invoke(nameof(ReceiveContextActorChanged), InContextActor); }
    }
    public class ObjectivesManager : ActorComponent
    {
        public ObjectivesManager(nint addr) : base(addr) { }
        public Object OnObjectivesCompleted { get { return this[nameof(OnObjectivesCompleted)]; } set { this[nameof(OnObjectivesCompleted)] = value; } }
        public Object OnObjectivesChanged { get { return this[nameof(OnObjectivesChanged)]; } set { this[nameof(OnObjectivesChanged)] = value; } }
        public Object OnAllRequiredReturnObjectivesCompleted { get { return this[nameof(OnAllRequiredReturnObjectivesCompleted)]; } set { this[nameof(OnAllRequiredReturnObjectivesCompleted)] = value; } }
        public Objective Objective { get { return this[nameof(Objective)].As<Objective>(); } set { this["Objective"] = value; } }
        public UArray<Objective> SecondaryObjectives { get { return new UArray<Objective>(this[nameof(SecondaryObjectives)].Address); } }
        public bool ObjectivesInitialized { get { return this[nameof(ObjectivesInitialized)].Flag; } set { this[nameof(ObjectivesInitialized)].Flag = value; } }
        public bool ObjectivesStarted { get { return this[nameof(ObjectivesStarted)].Flag; } set { this[nameof(ObjectivesStarted)].Flag = value; } }
        public bool bCheatObjectivesCompleted { get { return this[nameof(bCheatObjectivesCompleted)].Flag; } set { this[nameof(bCheatObjectivesCompleted)].Flag = value; } }
        public void OnObjectiveChanged(Objective obj) { Invoke(nameof(OnObjectiveChanged), obj); }
        public bool HasRequiredSecondaryObjective() { return Invoke<bool>(nameof(HasRequiredSecondaryObjective)); }
        public UArray<Objective> GetSecondaryObjectives() { return Invoke<UArray<Objective>>(nameof(GetSecondaryObjectives)); }
        public Objective GetSecondaryObjective() { return Invoke<Objective>(nameof(GetSecondaryObjective)); }
        public Objective GetPrimaryObjective() { return Invoke<Objective>(nameof(GetPrimaryObjective)); }
        public Objective FindSecondaryObjective(Object objectiveClass) { return Invoke<Objective>(nameof(FindSecondaryObjective), objectiveClass); }
        public void ExitPodDescending() { Invoke(nameof(ExitPodDescending)); }
        public void ExitPodArrived() { Invoke(nameof(ExitPodArrived)); }
        public void DropPodExited() { Invoke(nameof(DropPodExited)); }
        public bool AreRequiredSecondariesComplete() { return Invoke<bool>(nameof(AreRequiredSecondariesComplete)); }
    }
    public class ObjectiveWidget : UserWidget
    {
        public ObjectiveWidget(nint addr) : base(addr) { }
        public Object OnObjectiveWidgetUpdated { get { return this[nameof(OnObjectiveWidgetUpdated)]; } set { this[nameof(OnObjectiveWidgetUpdated)] = value; } }
        public Objective MissionObjective { get { return this[nameof(MissionObjective)].As<Objective>(); } set { this["MissionObjective"] = value; } }
        public bool bIsPrimaryObjective { get { return this[nameof(bIsPrimaryObjective)].Flag; } set { this[nameof(bIsPrimaryObjective)].Flag = value; } }
        public Object ObjectiveText { get { return this[nameof(ObjectiveText)]; } set { this[nameof(ObjectiveText)] = value; } }
        public Object ObjectiveCounterText { get { return this[nameof(ObjectiveCounterText)]; } set { this[nameof(ObjectiveCounterText)] = value; } }
        public Texture2D ObjectiveCounterIcon { get { return this[nameof(ObjectiveCounterIcon)].As<Texture2D>(); } set { this["ObjectiveCounterIcon"] = value; } }
        public bool bObjectiveCompleted { get { return this[nameof(bObjectiveCompleted)].Flag; } set { this[nameof(bObjectiveCompleted)].Flag = value; } }
        public void SetText(Object InText, Object InCounterText, Texture2D InCounterIcon, bool InObjectiveCompleted) { Invoke(nameof(SetText), InText, InCounterText, InCounterIcon, InObjectiveCompleted); }
        public void SetSimpleText(Object InText, bool InObjectiveCompleted) { Invoke(nameof(SetSimpleText), InText, InObjectiveCompleted); }
        public void SetObjective(Objective InObjective, bool InIsPrimaryObjective) { Invoke(nameof(SetObjective), InObjective, InIsPrimaryObjective); }
        public void ReceiveObjectiveUpdated() { Invoke(nameof(ReceiveObjectiveUpdated)); }
        public void ReceiveObjectiveInitialized() { Invoke(nameof(ReceiveObjectiveInitialized)); }
        public void OnObjectiveUpdated(Objective InObjective) { Invoke(nameof(OnObjectiveUpdated), InObjective); }
        public void ObjectiveWidgetDelegate__DelegateSignature(ObjectiveWidget InObjectiveWidget) { Invoke(nameof(ObjectiveWidgetDelegate__DelegateSignature), InObjectiveWidget); }
    }
    public class ObjectTemperatureComponent : TemperatureComponent
    {
        public ObjectTemperatureComponent(nint addr) : base(addr) { }
        public Object OnStartBurning { get { return this[nameof(OnStartBurning)]; } set { this[nameof(OnStartBurning)] = value; } }
        public Object OnFrozenServer { get { return this[nameof(OnFrozenServer)]; } set { this[nameof(OnFrozenServer)] = value; } }
        public float TemperatureChangeScale { get { return this[nameof(TemperatureChangeScale)].GetValue<float>(); } set { this[nameof(TemperatureChangeScale)].SetValue<float>(value); } }
        public float BurnTemperature { get { return this[nameof(BurnTemperature)].GetValue<float>(); } set { this[nameof(BurnTemperature)].SetValue<float>(value); } }
        public float FreezeTemperature { get { return this[nameof(FreezeTemperature)].GetValue<float>(); } set { this[nameof(FreezeTemperature)].SetValue<float>(value); } }
        public float DouseFireTemperature { get { return this[nameof(DouseFireTemperature)].GetValue<float>(); } set { this[nameof(DouseFireTemperature)].SetValue<float>(value); } }
        public int CoolingRate { get { return this[nameof(CoolingRate)].GetValue<int>(); } set { this[nameof(CoolingRate)].SetValue<int>(value); } }
        public bool IsHeatsourceWhenOnFire { get { return this[nameof(IsHeatsourceWhenOnFire)].Flag; } set { this[nameof(IsHeatsourceWhenOnFire)].Flag = value; } }
        public float OnFireHeatRange { get { return this[nameof(OnFireHeatRange)].GetValue<float>(); } set { this[nameof(OnFireHeatRange)].SetValue<float>(value); } }
        public void TimerCallback() { Invoke(nameof(TimerCallback)); }
        public void OnDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnDeath), HealthComponent); }
    }
    public class OldZiplineSalvage : Actor
    {
        public OldZiplineSalvage(nint addr) : base(addr) { }
        public Object ZiplineProjectileClass { get { return this[nameof(ZiplineProjectileClass)]; } set { this[nameof(ZiplineProjectileClass)] = value; } }
        public Vector RelativeDestinationLocation { get { return this[nameof(RelativeDestinationLocation)].As<Vector>(); } set { this["RelativeDestinationLocation"] = value; } }
        public void OnMatchStarted() { Invoke(nameof(OnMatchStarted)); }
    }
    public class OptionalObjectiveWidget : UserWidget
    {
        public OptionalObjectiveWidget(nint addr) : base(addr) { }
        public Object OnWidgetUpdated { get { return this[nameof(OnWidgetUpdated)]; } set { this[nameof(OnWidgetUpdated)] = value; } }
        public void SignalWidgetUpdated() { Invoke(nameof(SignalWidgetUpdated)); }
        public void SetObjective(Objective obj) { Invoke(nameof(SetObjective), obj); }
        public void OptionalObjectiveWidgetDelegate__DelegateSignature(OptionalObjectiveWidget InOptionalObjectiveWidget) { Invoke(nameof(OptionalObjectiveWidgetDelegate__DelegateSignature), InOptionalObjectiveWidget); }
    }
    public class OptionalUIWidget : UserWidget
    {
        public OptionalUIWidget(nint addr) : base(addr) { }
        public OptionalUICategory Category { get { return this[nameof(Category)].As<OptionalUICategory>(); } set { this["Category"] = value; } }
        public ESlateVisibility VisibleFlag { get { return (ESlateVisibility)this[nameof(VisibleFlag)].GetValue<int>(); } set { this[nameof(VisibleFlag)].SetValue<int>((int)value); } }
        public ESlateVisibility HiddenFlag { get { return (ESlateVisibility)this[nameof(HiddenFlag)].GetValue<int>(); } set { this[nameof(HiddenFlag)].SetValue<int>((int)value); } }
        public void OnVisibilityChanged(OptionalUICategory UICategory, bool IsVisible) { Invoke(nameof(OnVisibilityChanged), UICategory, IsVisible); }
    }
    public class OutlineComponent : ActorComponent
    {
        public OutlineComponent(nint addr) : base(addr) { }
        public Object OnOutlineChanged { get { return this[nameof(OnOutlineChanged)]; } set { this[nameof(OnOutlineChanged)] = value; } }
        public Object OnPingedByLaserPointer { get { return this[nameof(OnPingedByLaserPointer)]; } set { this[nameof(OnPingedByLaserPointer)] = value; } }
        public EOutline DefaultOutline { get { return (EOutline)this[nameof(DefaultOutline)].GetValue<int>(); } set { this[nameof(DefaultOutline)].SetValue<int>((int)value); } }
        public bool ActiveOnHoldTAB { get { return this[nameof(ActiveOnHoldTAB)].Flag; } set { this[nameof(ActiveOnHoldTAB)].Flag = value; } }
        public float CustomLaserPointDuration { get { return this[nameof(CustomLaserPointDuration)].GetValue<float>(); } set { this[nameof(CustomLaserPointDuration)].SetValue<float>(value); } }
        public int LockCounter { get { return this[nameof(LockCounter)].GetValue<int>(); } set { this[nameof(LockCounter)].SetValue<int>(value); } }
        public EOutline CurrentOutline { get { return (EOutline)this[nameof(CurrentOutline)].GetValue<int>(); } set { this[nameof(CurrentOutline)].SetValue<int>((int)value); } }
        public UArray<PrimitiveComponent> OutlinedComponents { get { return new UArray<PrimitiveComponent>(this[nameof(OutlinedComponents)].Address); } }
        public UArray<PrimitiveComponent> ExcludedComponents { get { return new UArray<PrimitiveComponent>(this[nameof(ExcludedComponents)].Address); } }
        public Object Character { get { return this[nameof(Character)]; } set { this[nameof(Character)] = value; } }
        public void UnlockOutline() { Invoke(nameof(UnlockOutline)); }
        public void ToggleDefaultOutline(bool Visible) { Invoke(nameof(ToggleDefaultOutline), Visible); }
        public void SetOutline(EOutline outline) { Invoke(nameof(SetOutline), outline); }
        public void RemoveFromOutline(PrimitiveComponent Component) { Invoke(nameof(RemoveFromOutline), Component); }
        public void OutlineChanged__DelegateSignature(EOutline InOutline) { Invoke(nameof(OutlineChanged__DelegateSignature), InOutline); }
        public void OnToggleOutline(bool Visible) { Invoke(nameof(OnToggleOutline), Visible); }
        public void OnOwnerDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnOwnerDeath), HealthComponent); }
        public void OnItemUnequipped(Item Item) { Invoke(nameof(OnItemUnequipped), Item); }
        public void OnItemEquipped(Item Item) { Invoke(nameof(OnItemEquipped), Item); }
        public void LockOutline() { Invoke(nameof(LockOutline)); }
        public void EnableActivateOnHoldTab() { Invoke(nameof(EnableActivateOnHoldTab)); }
        public void DisableActiveOnHoldTab() { Invoke(nameof(DisableActiveOnHoldTab)); }
        public void AddToOutline(PrimitiveComponent Component) { Invoke(nameof(AddToOutline), Component); }
        public void AddActorToOutline(Actor Actor) { Invoke(nameof(AddActorToOutline), Actor); }
    }
    public class OverclockBank : DataAsset
    {
        public OverclockBank(nint addr) : base(addr) { }
        public Object Overclocks { get { return this[nameof(Overclocks)]; } set { this[nameof(Overclocks)] = value; } }
        public ItemID OwningItem { get { return this[nameof(OwningItem)].As<ItemID>(); } set { this["OwningItem"] = value; } }
    }
    public class OverheatingAggregator : ItemAggregator
    {
        public OverheatingAggregator(nint addr) : base(addr) { }
        public Object OnOverheatingProgressChanged { get { return this[nameof(OnOverheatingProgressChanged)]; } set { this[nameof(OnOverheatingProgressChanged)] = value; } }
        public Object OnOverheatedChanged { get { return this[nameof(OnOverheatedChanged)]; } set { this[nameof(OnOverheatedChanged)] = value; } }
        public float HeatLossPerSecond { get { return this[nameof(HeatLossPerSecond)].GetValue<float>(); } set { this[nameof(HeatLossPerSecond)].SetValue<float>(value); } }
        public float OverheatedDuration { get { return this[nameof(OverheatedDuration)].GetValue<float>(); } set { this[nameof(OverheatedDuration)].SetValue<float>(value); } }
        public bool bIsOverheated { get { return this[nameof(bIsOverheated)].Flag; } set { this[nameof(bIsOverheated)].Flag = value; } }
        public float temperature { get { return this[nameof(temperature)].GetValue<float>(); } set { this[nameof(temperature)].SetValue<float>(value); } }
        public void Server_SetTemperature(float NewTemperature) { Invoke(nameof(Server_SetTemperature), NewTemperature); }
        public void Server_SetIsOverheated(bool NewOverheated) { Invoke(nameof(Server_SetIsOverheated), NewOverheated); }
        public void OverheatingProgressChanged__DelegateSignature(float Progress) { Invoke(nameof(OverheatingProgressChanged__DelegateSignature), Progress); }
        public void OverheatedChanged__DelegateSignature(bool overheated) { Invoke(nameof(OverheatedChanged__DelegateSignature), overheated); }
        public void OnRep_Temperature() { Invoke(nameof(OnRep_Temperature)); }
        public void OnRep_IsOverheated() { Invoke(nameof(OnRep_IsOverheated)); }
        public float GetTemperature() { return Invoke<float>(nameof(GetTemperature)); }
        public float GetOverheatingProgress() { return Invoke<float>(nameof(GetOverheatingProgress)); }
        public bool GetIsOverheated() { return Invoke<bool>(nameof(GetIsOverheated)); }
    }
    public class ParalyzedStateComponent : CharacterStateComponent
    {
        public ParalyzedStateComponent(nint addr) : base(addr) { }
        public Object CaveLeechClass { get { return this[nameof(CaveLeechClass)]; } set { this[nameof(CaveLeechClass)] = value; } }
        public float CameraArmHeightOffset { get { return this[nameof(CameraArmHeightOffset)].GetValue<float>(); } set { this[nameof(CameraArmHeightOffset)].SetValue<float>(value); } }
        public float CameraArmSpeed { get { return this[nameof(CameraArmSpeed)].GetValue<float>(); } set { this[nameof(CameraArmSpeed)].SetValue<float>(value); } }
    }
    public class ParasiteEnemy : EnemyPawn
    {
        public ParasiteEnemy(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public StaticMeshComponent Tentacles1 { get { return this[nameof(Tentacles1)].As<StaticMeshComponent>(); } set { this["Tentacles1"] = value; } }
        public StaticMeshComponent Tentacles2 { get { return this[nameof(Tentacles2)].As<StaticMeshComponent>(); } set { this["Tentacles2"] = value; } }
        public OutlineComponent outline { get { return this[nameof(outline)].As<OutlineComponent>(); } set { this["outline"] = value; } }
        public ParticleSystem deathParticles { get { return this[nameof(deathParticles)].As<ParticleSystem>(); } set { this["deathParticles"] = value; } }
        public SoundBase deathSound { get { return this[nameof(deathSound)].As<SoundBase>(); } set { this["deathSound"] = value; } }
        public void OnSelfDeath(HealthComponentBase aHealthComponent) { Invoke(nameof(OnSelfDeath), aHealthComponent); }
    }
    public class PassedOutStateComponent : CharacterStateComponent
    {
        public PassedOutStateComponent(nint addr) : base(addr) { }
        public DialogDataAsset ReviveShout { get { return this[nameof(ReviveShout)].As<DialogDataAsset>(); } set { this["ReviveShout"] = value; } }
        public bool bAllPlayersPassedOut { get { return this[nameof(bAllPlayersPassedOut)].Flag; } set { this[nameof(bAllPlayersPassedOut)].Flag = value; } }
        public void ReceiveTeamPassedOut() { Invoke(nameof(ReceiveTeamPassedOut)); }
    }
    public class PathfinderCollisionComponent : StaticMeshComponent
    {
        public PathfinderCollisionComponent(nint addr) : base(addr) { }
        public bool ActivatePFCollisionAtInit { get { return this[nameof(ActivatePFCollisionAtInit)].Flag; } set { this[nameof(ActivatePFCollisionAtInit)].Flag = value; } }
        public PFCollisionType PFColiType { get { return (PFCollisionType)this[nameof(PFColiType)].GetValue<int>(); } set { this[nameof(PFColiType)].SetValue<int>((int)value); } }
        public void DisablePFCollision() { Invoke(nameof(DisablePFCollision)); }
        public void ActivatePFCollision() { Invoke(nameof(ActivatePFCollision)); }
    }
    public class PathfinderSplineSegmentCollisionComponent : ActorComponent
    {
        public PathfinderSplineSegmentCollisionComponent(nint addr) : base(addr) { }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public PFCollisionType CollisionType { get { return (PFCollisionType)this[nameof(CollisionType)].GetValue<int>(); } set { this[nameof(CollisionType)].SetValue<int>((int)value); } }
        public void UpdateFromSpline(SplineComponent SplineComponent, int StartIndex) { Invoke(nameof(UpdateFromSpline), SplineComponent, StartIndex); }
        public void Update(Vector SplineStart, Vector SplineStartTangent, Vector SplineEnd, Vector SplineEndTangent) { Invoke(nameof(Update), SplineStart, SplineStartTangent, SplineEnd, SplineEndTangent); }
        public void Clear() { Invoke(nameof(Clear)); }
    }
    public class PathfinderDebugProbe : Actor
    {
        public PathfinderDebugProbe(nint addr) : base(addr) { }
        public Actor Dest { get { return this[nameof(Dest)].As<Actor>(); } set { this["Dest"] = value; } }
    }
    public class RaycastDebugProbe : Actor
    {
        public RaycastDebugProbe(nint addr) : base(addr) { }
        public TerrainType TerrainType { get { return this[nameof(TerrainType)].As<TerrainType>(); } set { this["TerrainType"] = value; } }
    }
    public class FindPointKeepingDistanceProbe : Actor
    {
        public FindPointKeepingDistanceProbe(nint addr) : base(addr) { }
        public float MinDistance { get { return this[nameof(MinDistance)].GetValue<float>(); } set { this[nameof(MinDistance)].SetValue<float>(value); } }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public float IdealTargetDist { get { return this[nameof(IdealTargetDist)].GetValue<float>(); } set { this[nameof(IdealTargetDist)].SetValue<float>(value); } }
    }
    public class DistanceTestProbe : Actor
    {
        public DistanceTestProbe(nint addr) : base(addr) { }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public int NumX { get { return this[nameof(NumX)].GetValue<int>(); } set { this[nameof(NumX)].SetValue<int>(value); } }
        public int NumY { get { return this[nameof(NumY)].GetValue<int>(); } set { this[nameof(NumY)].SetValue<int>(value); } }
        public float DeltaX { get { return this[nameof(DeltaX)].GetValue<float>(); } set { this[nameof(DeltaX)].SetValue<float>(value); } }
        public float DeltaY { get { return this[nameof(DeltaY)].GetValue<float>(); } set { this[nameof(DeltaY)].SetValue<float>(value); } }
    }
    public class PathfinderFunctionLibrary : BlueprintFunctionLibrary
    {
        public PathfinderFunctionLibrary(nint addr) : base(addr) { }
        public Vector SnapToGrid(Object WorldContextObject, Vector Origin, DeepPathFinderType PathType, DeepPathFinderSize PathSize, bool success, float maxSnapDistance) { return Invoke<Vector>(nameof(SnapToGrid), WorldContextObject, Origin, PathType, PathSize, success, maxSnapDistance); }
        public bool IsPathfinderReady(Object WorldContextObject) { return Invoke<bool>(nameof(IsPathfinderReady), WorldContextObject); }
        public Vector FindRandomPositionOnNavmeshAtDistance(Object WorldContextObject, Vector Origin, float atDistance) { return Invoke<Vector>(nameof(FindRandomPositionOnNavmeshAtDistance), WorldContextObject, Origin, atDistance); }
        public Vector FindRandomNearbyPositionOnNavmesh(Object WorldContextObject, Vector Origin, float Radius) { return Invoke<Vector>(nameof(FindRandomNearbyPositionOnNavmesh), WorldContextObject, Origin, Radius); }
        public Vector FindPointAlongPathTo(Object WorldContextObject, Vector Origin, Vector Destination, float atDistance) { return Invoke<Vector>(nameof(FindPointAlongPathTo), WorldContextObject, Origin, Destination, atDistance); }
    }
    public class PathfinderVehicle : Pawn
    {
        public PathfinderVehicle(nint addr) : base(addr) { }
        public DeepPathfinderMovement PathfinderMovement { get { return this[nameof(PathfinderMovement)].As<DeepPathfinderMovement>(); } set { this["PathfinderMovement"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public HealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<HealthComponent>(); } set { this["HealthComponent"] = value; } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
    }
    public class PatrolBot : EnemyDeepPathfinderCharacter
    {
        public PatrolBot(nint addr) : base(addr) { }
        public HackingUsableComponent HackingUsable { get { return this[nameof(HackingUsable)].As<HackingUsableComponent>(); } set { this["HackingUsable"] = value; } }
        public PawnSensingComponent PawnSensing { get { return this[nameof(PawnSensing)].As<PawnSensingComponent>(); } set { this["PawnSensing"] = value; } }
        public SphereComponent CollisionSphere { get { return this[nameof(CollisionSphere)].As<SphereComponent>(); } set { this["CollisionSphere"] = value; } }
        public SphereComponent NearTargetSphere { get { return this[nameof(NearTargetSphere)].As<SphereComponent>(); } set { this["NearTargetSphere"] = value; } }
        public ParticleSystemComponent LaserBeam { get { return this[nameof(LaserBeam)].As<ParticleSystemComponent>(); } set { this["LaserBeam"] = value; } }
        public ParticleSystemComponent TearingGroundParticles { get { return this[nameof(TearingGroundParticles)].As<ParticleSystemComponent>(); } set { this["TearingGroundParticles"] = value; } }
        public EnemyComponent EnemyComponent { get { return this[nameof(EnemyComponent)].As<EnemyComponent>(); } set { this["EnemyComponent"] = value; } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public DamageComponent BumpDamage { get { return this[nameof(BumpDamage)].As<DamageComponent>(); } set { this["BumpDamage"] = value; } }
        public PawnAlertComponent Alert { get { return this[nameof(Alert)].As<PawnAlertComponent>(); } set { this["Alert"] = value; } }
        public PlayerImpactCooldownComponent ImpactCooldown { get { return this[nameof(ImpactCooldown)].As<PlayerImpactCooldownComponent>(); } set { this["ImpactCooldown"] = value; } }
        public AvoidCeilingComponent CeilingAvoidance { get { return this[nameof(CeilingAvoidance)].As<AvoidCeilingComponent>(); } set { this["CeilingAvoidance"] = value; } }
        public AudioComponent RollingAudio { get { return this[nameof(RollingAudio)].As<AudioComponent>(); } set { this["RollingAudio"] = value; } }
        public AudioComponent FlyingAudio { get { return this[nameof(FlyingAudio)].As<AudioComponent>(); } set { this["FlyingAudio"] = value; } }
        public ProjectileAttackComponent RollingRangedAttack { get { return this[nameof(RollingRangedAttack)].As<ProjectileAttackComponent>(); } set { this["RollingRangedAttack"] = value; } }
        public ProjectileAttackComponent FlyingRangedAttack { get { return this[nameof(FlyingRangedAttack)].As<ProjectileAttackComponent>(); } set { this["FlyingRangedAttack"] = value; } }
        public ProjectileAttackComponent MissileAttack { get { return this[nameof(MissileAttack)].As<ProjectileAttackComponent>(); } set { this["MissileAttack"] = value; } }
        public float MaxMotionSoundVelThresholdFlying { get { return this[nameof(MaxMotionSoundVelThresholdFlying)].GetValue<float>(); } set { this[nameof(MaxMotionSoundVelThresholdFlying)].SetValue<float>(value); } }
        public float MaxMotionSoundVelThreshold { get { return this[nameof(MaxMotionSoundVelThreshold)].GetValue<float>(); } set { this[nameof(MaxMotionSoundVelThreshold)].SetValue<float>(value); } }
        public float MaxTurningMotionSoundVelThreshold { get { return this[nameof(MaxTurningMotionSoundVelThreshold)].GetValue<float>(); } set { this[nameof(MaxTurningMotionSoundVelThreshold)].SetValue<float>(value); } }
        public bool DebugAudio { get { return this[nameof(DebugAudio)].Flag; } set { this[nameof(DebugAudio)].Flag = value; } }
        public float HackedAttackMultiplier { get { return this[nameof(HackedAttackMultiplier)].GetValue<float>(); } set { this[nameof(HackedAttackMultiplier)].SetValue<float>(value); } }
        public bool IsLockedOn { get { return this[nameof(IsLockedOn)].Flag; } set { this[nameof(IsLockedOn)].Flag = value; } }
        public float DelayAfterLockOn { get { return this[nameof(DelayAfterLockOn)].GetValue<float>(); } set { this[nameof(DelayAfterLockOn)].SetValue<float>(value); } }
        public SoundCue ImpactCue { get { return this[nameof(ImpactCue)].As<SoundCue>(); } set { this["ImpactCue"] = value; } }
        public SoundCue JumpSound { get { return this[nameof(JumpSound)].As<SoundCue>(); } set { this["JumpSound"] = value; } }
        public SoundCue StartupAccelerationSound { get { return this[nameof(StartupAccelerationSound)].As<SoundCue>(); } set { this["StartupAccelerationSound"] = value; } }
        public float LaunchPower { get { return this[nameof(LaunchPower)].GetValue<float>(); } set { this[nameof(LaunchPower)].SetValue<float>(value); } }
        public float SpawnRocketsTime { get { return this[nameof(SpawnRocketsTime)].GetValue<float>(); } set { this[nameof(SpawnRocketsTime)].SetValue<float>(value); } }
        public EPatrolBotState State { get { return (EPatrolBotState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public EPatrolBotControlState ControlState { get { return (EPatrolBotControlState)this[nameof(ControlState)].GetValue<int>(); } set { this[nameof(ControlState)].SetValue<int>((int)value); } }
        public float HackedAttackSpeedMultiplier { get { return this[nameof(HackedAttackSpeedMultiplier)].GetValue<float>(); } set { this[nameof(HackedAttackSpeedMultiplier)].SetValue<float>(value); } }
        public float LaserPenetrationDistance { get { return this[nameof(LaserPenetrationDistance)].GetValue<float>(); } set { this[nameof(LaserPenetrationDistance)].SetValue<float>(value); } }
        public float MinTurretAngle { get { return this[nameof(MinTurretAngle)].GetValue<float>(); } set { this[nameof(MinTurretAngle)].SetValue<float>(value); } }
        public float MaxTurretAngle { get { return this[nameof(MaxTurretAngle)].GetValue<float>(); } set { this[nameof(MaxTurretAngle)].SetValue<float>(value); } }
        public float SpawnRocketsChance { get { return this[nameof(SpawnRocketsChance)].GetValue<float>(); } set { this[nameof(SpawnRocketsChance)].SetValue<float>(value); } }
        public float GunRange { get { return this[nameof(GunRange)].GetValue<float>(); } set { this[nameof(GunRange)].SetValue<float>(value); } }
        public float RollingAttackCooldown { get { return this[nameof(RollingAttackCooldown)].GetValue<float>(); } set { this[nameof(RollingAttackCooldown)].SetValue<float>(value); } }
        public float FlyingAttackCooldown { get { return this[nameof(FlyingAttackCooldown)].GetValue<float>(); } set { this[nameof(FlyingAttackCooldown)].SetValue<float>(value); } }
        public float TurretLerpSpeed { get { return this[nameof(TurretLerpSpeed)].GetValue<float>(); } set { this[nameof(TurretLerpSpeed)].SetValue<float>(value); } }
        public float AimDownwardsOffset { get { return this[nameof(AimDownwardsOffset)].GetValue<float>(); } set { this[nameof(AimDownwardsOffset)].SetValue<float>(value); } }
        public float AccelerationThreshold { get { return this[nameof(AccelerationThreshold)].GetValue<float>(); } set { this[nameof(AccelerationThreshold)].SetValue<float>(value); } }
        public float LowSpeedThreshold { get { return this[nameof(LowSpeedThreshold)].GetValue<float>(); } set { this[nameof(LowSpeedThreshold)].SetValue<float>(value); } }
        public RuntimeFloatCurve SpeedTiltCurve { get { return this[nameof(SpeedTiltCurve)].As<RuntimeFloatCurve>(); } set { this["SpeedTiltCurve"] = value; } }
        public FakeMoverSettings RollSettings { get { return this[nameof(RollSettings)].As<FakeMoverSettings>(); } set { this["RollSettings"] = value; } }
        public FakeMoverSettings JumpSettings { get { return this[nameof(JumpSettings)].As<FakeMoverSettings>(); } set { this["JumpSettings"] = value; } }
        public FakeMoverSettings SpawnRocketsSettings { get { return this[nameof(SpawnRocketsSettings)].As<FakeMoverSettings>(); } set { this["SpawnRocketsSettings"] = value; } }
        public bool CanJump { get { return this[nameof(CanJump)].Flag; } set { this[nameof(CanJump)].Flag = value; } }
        public float JumpForce { get { return this[nameof(JumpForce)].GetValue<float>(); } set { this[nameof(JumpForce)].SetValue<float>(value); } }
        public float StartFlyingTimer { get { return this[nameof(StartFlyingTimer)].GetValue<float>(); } set { this[nameof(StartFlyingTimer)].SetValue<float>(value); } }
        public float MinRollingTime { get { return this[nameof(MinRollingTime)].GetValue<float>(); } set { this[nameof(MinRollingTime)].SetValue<float>(value); } }
        public float MaxRollingTime { get { return this[nameof(MaxRollingTime)].GetValue<float>(); } set { this[nameof(MaxRollingTime)].SetValue<float>(value); } }
        public float MinFlyingTime { get { return this[nameof(MinFlyingTime)].GetValue<float>(); } set { this[nameof(MinFlyingTime)].SetValue<float>(value); } }
        public float MaxFlyingTime { get { return this[nameof(MaxFlyingTime)].GetValue<float>(); } set { this[nameof(MaxFlyingTime)].SetValue<float>(value); } }
        public float SinSpeed { get { return this[nameof(SinSpeed)].GetValue<float>(); } set { this[nameof(SinSpeed)].SetValue<float>(value); } }
        public float SinSize { get { return this[nameof(SinSize)].GetValue<float>(); } set { this[nameof(SinSize)].SetValue<float>(value); } }
        public float FlyingDampOmega { get { return this[nameof(FlyingDampOmega)].GetValue<float>(); } set { this[nameof(FlyingDampOmega)].SetValue<float>(value); } }
        public float RollingDampOmega { get { return this[nameof(RollingDampOmega)].GetValue<float>(); } set { this[nameof(RollingDampOmega)].SetValue<float>(value); } }
        public bool FiringRockets { get { return this[nameof(FiringRockets)].Flag; } set { this[nameof(FiringRockets)].Flag = value; } }
        public bool Alerted { get { return this[nameof(Alerted)].Flag; } set { this[nameof(Alerted)].Flag = value; } }
        public Actor CurrentTarget { get { return this[nameof(CurrentTarget)].As<Actor>(); } set { this["CurrentTarget"] = value; } }
        public void SetIsPatrolling(bool patroling) { Invoke(nameof(SetIsPatrolling), patroling); }
        public void SetHacked() { Invoke(nameof(SetHacked)); }
        public void SetFiringRockets(bool firing) { Invoke(nameof(SetFiringRockets), firing); }
        public void ReviveDrone() { Invoke(nameof(ReviveDrone)); }
        public void OnStateChangedEvent(EPatrolBotState CurrentState) { Invoke(nameof(OnStateChangedEvent), CurrentState); }
        public void OnSpawnRocketsEvent() { Invoke(nameof(OnSpawnRocketsEvent)); }
        public void OnRocketsEnded() { Invoke(nameof(OnRocketsEnded)); }
        public void OnRevived() { Invoke(nameof(OnRevived)); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_IsLockedOn() { Invoke(nameof(OnRep_IsLockedOn)); }
        public void OnRep_FiringRockets() { Invoke(nameof(OnRep_FiringRockets)); }
        public void OnRep_ControlState(EPatrolBotControlState oldState) { Invoke(nameof(OnRep_ControlState), oldState); }
        public void OnProjectileSpawned() { Invoke(nameof(OnProjectileSpawned)); }
        public void OnMovementStateChanged(EDeepMovementState State) { Invoke(nameof(OnMovementStateChanged), State); }
        public void OnLockedOn() { Invoke(nameof(OnLockedOn)); }
        public void OnLandedEvent() { Invoke(nameof(OnLandedEvent)); }
        public void OnJumpEvent() { Invoke(nameof(OnJumpEvent)); }
        public void OnFireRockets() { Invoke(nameof(OnFireRockets)); }
        public void OnDroneHacked() { Invoke(nameof(OnDroneHacked)); }
        public void OnDroneAlerted() { Invoke(nameof(OnDroneAlerted)); }
        public void OnDisabled() { Invoke(nameof(OnDisabled)); }
        public void OnDeath(HealthComponentBase aHealthComponent) { Invoke(nameof(OnDeath), aHealthComponent); }
        public void OnControlStateChanged(EPatrolBotControlState ControlState) { Invoke(nameof(OnControlStateChanged), ControlState); }
        public void OnCollided(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnCollided), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void Jumped() { Invoke(nameof(Jumped)); }
        public bool IsHacked() { return Invoke<bool>(nameof(IsHacked)); }
        public void ImpactSound() { Invoke(nameof(ImpactSound)); }
        public void EndFireRockets() { Invoke(nameof(EndFireRockets)); }
        public void DisableDrone() { Invoke(nameof(DisableDrone)); }
        public void All_SetLaserBeamActive(bool Active) { Invoke(nameof(All_SetLaserBeamActive), Active); }
    }
    public class PatrolBotAnimInstance : SpiderAnimInstance
    {
        public PatrolBotAnimInstance(nint addr) : base(addr) { }
        public PatrolBot PatrolBot { get { return this[nameof(PatrolBot)].As<PatrolBot>(); } set { this["PatrolBot"] = value; } }
        public Rotator TurretRotation { get { return this[nameof(TurretRotation)].As<Rotator>(); } set { this["TurretRotation"] = value; } }
        public float Tilt { get { return this[nameof(Tilt)].GetValue<float>(); } set { this[nameof(Tilt)].SetValue<float>(value); } }
        public bool Rolling { get { return this[nameof(Rolling)].Flag; } set { this[nameof(Rolling)].Flag = value; } }
        public bool NotRolling { get { return this[nameof(NotRolling)].Flag; } set { this[nameof(NotRolling)].Flag = value; } }
        public bool Disabled { get { return this[nameof(Disabled)].Flag; } set { this[nameof(Disabled)].Flag = value; } }
        public bool FlyingDisable { get { return this[nameof(FlyingDisable)].Flag; } set { this[nameof(FlyingDisable)].Flag = value; } }
        public Rotator WheelRotation { get { return this[nameof(WheelRotation)].As<Rotator>(); } set { this["WheelRotation"] = value; } }
        public Rotator WheelCenterRotation { get { return this[nameof(WheelCenterRotation)].As<Rotator>(); } set { this["WheelCenterRotation"] = value; } }
        public Rotator FloatCenterRotation { get { return this[nameof(FloatCenterRotation)].As<Rotator>(); } set { this["FloatCenterRotation"] = value; } }
        public float CurrentTilt { get { return this[nameof(CurrentTilt)].GetValue<float>(); } set { this[nameof(CurrentTilt)].SetValue<float>(value); } }
        public float TiltSpeed { get { return this[nameof(TiltSpeed)].GetValue<float>(); } set { this[nameof(TiltSpeed)].SetValue<float>(value); } }
        public float WheelSpeedModifier { get { return this[nameof(WheelSpeedModifier)].GetValue<float>(); } set { this[nameof(WheelSpeedModifier)].SetValue<float>(value); } }
    }
    public class PawnAffliction : DataAsset
    {
        public PawnAffliction(nint addr) : base(addr) { }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Color IconColor { get { return this[nameof(IconColor)].As<Color>(); } set { this["IconColor"] = value; } }
        public Color IconColorBG { get { return this[nameof(IconColorBG)].As<Color>(); } set { this["IconColorBG"] = value; } }
        public bool bShowPlayerIcon { get { return this[nameof(bShowPlayerIcon)].Flag; } set { this[nameof(bShowPlayerIcon)].Flag = value; } }
        public bool bShowOnEnemyHealthbar { get { return this[nameof(bShowOnEnemyHealthbar)].Flag; } set { this[nameof(bShowOnEnemyHealthbar)].Flag = value; } }
        public PlayerAfflictionOverlay AfflictionOverlay { get { return this[nameof(AfflictionOverlay)].As<PlayerAfflictionOverlay>(); } set { this["AfflictionOverlay"] = value; } }
        public UArray<Object> EnemyEffects { get { return new UArray<Object>(this[nameof(EnemyEffects)].Address); } }
        public UArray<Object> PlayerFirstPersonEffects { get { return new UArray<Object>(this[nameof(PlayerFirstPersonEffects)].Address); } }
        public UArray<Object> PlayerThirdPersonEffects { get { return new UArray<Object>(this[nameof(PlayerThirdPersonEffects)].Address); } }
        public DialogDataAsset PlayerShoutOnBegin { get { return this[nameof(PlayerShoutOnBegin)].As<DialogDataAsset>(); } set { this["PlayerShoutOnBegin"] = value; } }
    }
    public class PawnAfflictionComponent : ActorComponent
    {
        public PawnAfflictionComponent(nint addr) : base(addr) { }
        public Object OnAfflictionActivatedEvent { get { return this[nameof(OnAfflictionActivatedEvent)]; } set { this[nameof(OnAfflictionActivatedEvent)] = value; } }
        public Object OnAfflictionDeactivatedEvent { get { return this[nameof(OnAfflictionDeactivatedEvent)]; } set { this[nameof(OnAfflictionDeactivatedEvent)] = value; } }
        public Object ActiveAfflictions { get { return this[nameof(ActiveAfflictions)]; } set { this[nameof(ActiveAfflictions)] = value; } }
        public AfflictionEntriesArray NetworkedAfflictions { get { return this[nameof(NetworkedAfflictions)].As<AfflictionEntriesArray>(); } set { this["NetworkedAfflictions"] = value; } }
        public Object FrozenEffect { get { return this[nameof(FrozenEffect)]; } set { this[nameof(FrozenEffect)] = value; } }
        public Object BurningEffect { get { return this[nameof(BurningEffect)]; } set { this[nameof(BurningEffect)] = value; } }
        public EFrozenBitsSize EffectSize { get { return (EFrozenBitsSize)this[nameof(EffectSize)].GetValue<int>(); } set { this[nameof(EffectSize)].SetValue<int>((int)value); } }
        public float BaseEffectScale { get { return this[nameof(BaseEffectScale)].GetValue<float>(); } set { this[nameof(BaseEffectScale)].SetValue<float>(value); } }
        public bool UseDormancy { get { return this[nameof(UseDormancy)].Flag; } set { this[nameof(UseDormancy)].Flag = value; } }
        public void PushAffliction(PawnAffliction Affliction, bool onlyIfNotActive) { Invoke(nameof(PushAffliction), Affliction, onlyIfNotActive); }
        public void PopAffliction(PawnAffliction Affliction) { Invoke(nameof(PopAffliction), Affliction); }
        public void OnDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnDeath), HealthComponent); }
        public bool IsAfflictedBy(PawnAffliction Affliction) { return Invoke<bool>(nameof(IsAfflictedBy), Affliction); }
        public UArray<PawnAffliction> GetActiveAfflictions() { return Invoke<UArray<PawnAffliction>>(nameof(GetActiveAfflictions)); }
    }
    public class PawnAlertComponent : ActorComponent
    {
        public PawnAlertComponent(nint addr) : base(addr) { }
        public Object OnAlertedFromDamage { get { return this[nameof(OnAlertedFromDamage)]; } set { this[nameof(OnAlertedFromDamage)] = value; } }
        public bool AutoAlertAI { get { return this[nameof(AutoAlertAI)].Flag; } set { this[nameof(AutoAlertAI)].Flag = value; } }
        public bool ShouldAlertNearby { get { return this[nameof(ShouldAlertNearby)].Flag; } set { this[nameof(ShouldAlertNearby)].Flag = value; } }
        public float AlertRadius { get { return this[nameof(AlertRadius)].GetValue<float>(); } set { this[nameof(AlertRadius)].SetValue<float>(value); } }
        public void StopAutoAlerting() { Invoke(nameof(StopAutoAlerting)); }
        public void OnPawnSeen(Pawn Pawn) { Invoke(nameof(OnPawnSeen), Pawn); }
        public void OnHit(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnHit), Damage, DamageData, anyHealthLost); }
        public void OnAlerted() { Invoke(nameof(OnAlerted)); }
        public void AleartNearby() { Invoke(nameof(AleartNearby)); }
    }
    public class PawnStat : DataAsset
    {
        public PawnStat(nint addr) : base(addr) { }
        public float StartingValue { get { return this[nameof(StartingValue)].GetValue<float>(); } set { this[nameof(StartingValue)].SetValue<float>(value); } }
        public EPawnStatType PawnStatType { get { return (EPawnStatType)this[nameof(PawnStatType)].GetValue<int>(); } set { this[nameof(PawnStatType)].SetValue<int>((int)value); } }
        public EPawnStatType ValueModificationType { get { return (EPawnStatType)this[nameof(ValueModificationType)].GetValue<int>(); } set { this[nameof(ValueModificationType)].SetValue<int>((int)value); } }
    }
    public class PawnStatsComponent : ActorComponent
    {
        public PawnStatsComponent(nint addr) : base(addr) { }
        public PawnStatEntriesArray Stats { get { return this[nameof(Stats)].As<PawnStatEntriesArray>(); } set { this["Stats"] = value; } }
        public bool UseDormancy { get { return this[nameof(UseDormancy)].Flag; } set { this[nameof(UseDormancy)].Flag = value; } }
        public void RemoveModifier(PawnStat Stat, float Value) { Invoke(nameof(RemoveModifier), Stat, Value); }
        public float GetStatValue(PawnStat Stat) { return Invoke<float>(nameof(GetStatValue), Stat); }
        public void ChangeModifier(PawnStat Stat, float CurrentValue, float NewValue) { Invoke(nameof(ChangeModifier), Stat, CurrentValue, NewValue); }
        public int AddModifier(PawnStat Stat, float Value) { return Invoke<int>(nameof(AddModifier), Stat, Value); }
    }
    public class PerkLogic : ActorComponent
    {
        public PerkLogic(nint addr) : base(addr) { }
        public void StartLogic(int Rank) { Invoke(nameof(StartLogic), Rank); }
        public PlayerCharacter GetCharacter() { return Invoke<PlayerCharacter>(nameof(GetCharacter)); }
        public Object GetAdditionalText(int Rank) { return Invoke<Object>(nameof(GetAdditionalText), Rank); }
    }
    public class PerkDelegateItem : Object
    {
        public PerkDelegateItem(nint addr) : base(addr) { }
        public Object OnPerkClaimed { get { return this[nameof(OnPerkClaimed)]; } set { this[nameof(OnPerkClaimed)] = value; } }
        public Object OnPerkEquipped { get { return this[nameof(OnPerkEquipped)]; } set { this[nameof(OnPerkEquipped)] = value; } }
        public Object OnPerkUnequipped { get { return this[nameof(OnPerkUnequipped)]; } set { this[nameof(OnPerkUnequipped)] = value; } }
        public Object OnPerkHighlighted { get { return this[nameof(OnPerkHighlighted)]; } set { this[nameof(OnPerkHighlighted)] = value; } }
        public Object OnChargesUsedChanged { get { return this[nameof(OnChargesUsedChanged)]; } set { this[nameof(OnChargesUsedChanged)] = value; } }
    }
    public class PerkSubsystem : WorldSubsystem
    {
        public PerkSubsystem(nint addr) : base(addr) { }
        public Object PerkDelegates { get { return this[nameof(PerkDelegates)]; } set { this[nameof(PerkDelegates)] = value; } }
        public PerkDelegateItem GetPerkDelegates(PerkAsset Perk) { return Invoke<PerkDelegateItem>(nameof(GetPerkDelegates), Perk); }
    }
    public class PerkHUDWidget : UserWidget
    {
        public PerkHUDWidget(nint addr) : base(addr) { }
        public PerkAsset PerkAsset { get { return this[nameof(PerkAsset)].As<PerkAsset>(); } set { this["PerkAsset"] = value; } }
        public void SetPerkAsset(PerkAsset InPerk) { Invoke(nameof(SetPerkAsset), InPerk); }
        public void ReceivePerkAssetChanged() { Invoke(nameof(ReceivePerkAssetChanged)); }
        public FSDPlayerState GetFSDPlayerState() { return Invoke<FSDPlayerState>(nameof(GetFSDPlayerState)); }
        public PlayerCharacter GetCharacter() { return Invoke<PlayerCharacter>(nameof(GetCharacter)); }
    }
    public class PerkHUDIconWidget : PerkHUDWidget
    {
        public PerkHUDIconWidget(nint addr) : base(addr) { }
        public float CoolDownProgress { get { return this[nameof(CoolDownProgress)].GetValue<float>(); } set { this[nameof(CoolDownProgress)].SetValue<float>(value); } }
    }
    public class PerkHUDActivationWidget : PerkHUDWidget
    {
        public PerkHUDActivationWidget(nint addr) : base(addr) { }
        public EPerkHUDActivationLocation Location { get { return (EPerkHUDActivationLocation)this[nameof(Location)].GetValue<int>(); } set { this[nameof(Location)].SetValue<int>((int)value); } }
    }
    public class PerkFunctionLibrary : BlueprintFunctionLibrary
    {
        public PerkFunctionLibrary(nint addr) : base(addr) { }
        public void SplitPerksByUsage(UArray<PerkAsset> perks, UArray<PerkAsset> OutPassivePerks, UArray<PerkAsset> OutActivePerks) { Invoke(nameof(SplitPerksByUsage), perks, OutPassivePerks, OutActivePerks); }
        public UArray<PerkAsset> SortPerksByUsage(UArray<PerkAsset> perks) { return Invoke<UArray<PerkAsset>>(nameof(SortPerksByUsage), perks); }
        public void RandomizePerkLoadout(Object WorldContext, PlayerCharacterID characterID) { Invoke(nameof(RandomizePerkLoadout), WorldContext, characterID); }
        public bool IsPerkTierUnLocked(Object WorldContext, int Tier) { return Invoke<bool>(nameof(IsPerkTierUnLocked), WorldContext, Tier); }
        public int GetRequiredPerkClaimsForTier(int Tier) { return Invoke<int>(nameof(GetRequiredPerkClaimsForTier), Tier); }
        public void GetPerkTierState(Object WorldContext, int Tier, bool TierUnLocked, int NextRequiredCount, int NextProgressCount) { Invoke(nameof(GetPerkTierState), WorldContext, Tier, TierUnLocked, NextRequiredCount, NextProgressCount); }
        public void GetPerkEquipSlots(Object WorldContext, EPerkUsageType InType, Object InCharacterClass, int OutAvailableSlots, int OutUnavailableSlots, int OutPromotionLockedSlots) { Invoke(nameof(GetPerkEquipSlots), WorldContext, InType, InCharacterClass, OutAvailableSlots, OutUnavailableSlots, OutPromotionLockedSlots); }
        public UArray<EPerkSlotType> GetPerkEquipSlotLayout(Object WorldContext, EPerkUsageType InType, Object InCharacterClass) { return Invoke<UArray<EPerkSlotType>>(nameof(GetPerkEquipSlotLayout), WorldContext, InType, InCharacterClass); }
        public UArray<PerkAsset> GetOwnedPerksByType(Object WorldContext, EPerkUsageType InType) { return Invoke<UArray<PerkAsset>>(nameof(GetOwnedPerksByType), WorldContext, InType); }
        public UArray<PerkAsset> GetOwnedPerks(Object WorldContext) { return Invoke<UArray<PerkAsset>>(nameof(GetOwnedPerks), WorldContext); }
        public int GetHighestPerkTier() { return Invoke<int>(nameof(GetHighestPerkTier)); }
        public UArray<PerkAsset> GetCharacterNonEquippedPerks(Object WorldContext, PlayerCharacterID characterID) { return Invoke<UArray<PerkAsset>>(nameof(GetCharacterNonEquippedPerks), WorldContext, characterID); }
        public UArray<PerkAsset> GetCharacterEquippedPerks(Object WorldContext, PlayerCharacterID characterID) { return Invoke<UArray<PerkAsset>>(nameof(GetCharacterEquippedPerks), WorldContext, characterID); }
        public UArray<PerkAsset> GetAvailablePerks() { return Invoke<UArray<PerkAsset>>(nameof(GetAvailablePerks)); }
        public int GetAmountOfPurchasedPerks(Object WorldContext) { return Invoke<int>(nameof(GetAmountOfPurchasedPerks), WorldContext); }
        public Object FormatRichText(Object SourceText, bool UpperCase, Object CharTagMap) { return Invoke<Object>(nameof(FormatRichText), SourceText, UpperCase, CharTagMap); }
        public int CalculateClaimablePerkPoints(Object WorldContext) { return Invoke<int>(nameof(CalculateClaimablePerkPoints), WorldContext); }
    }
    public class PerkUsageComponent : ActorComponent
    {
        public PerkUsageComponent(nint addr) : base(addr) { }
        public UArray<PerkUsage> PerkUsageReplicated { get { return new UArray<PerkUsage>(this[nameof(PerkUsageReplicated)].Address); } }
        public void Server_MarkPerkUsed(PerkAsset Perk) { Invoke(nameof(Server_MarkPerkUsed), Perk); }
        public void Server_CheatReset() { Invoke(nameof(Server_CheatReset)); }
        public void OnRep_PerkUsageReplicated() { Invoke(nameof(OnRep_PerkUsageReplicated)); }
    }
    public class PhotographyStateComponent : CharacterStateComponent
    {
        public PhotographyStateComponent(nint addr) : base(addr) { }
    }
    public class PickaxeFunctionLibrary : BlueprintFunctionLibrary
    {
        public PickaxeFunctionLibrary(nint addr) : base(addr) { }
        public bool RemovePickaxePartFromOwned(Object WorldContextObject, PickaxePart part) { return Invoke<bool>(nameof(RemovePickaxePartFromOwned), WorldContextObject, part); }
        public void RandomizePickaxe(Object WorldContextObject, PlayerCharacterID PlayerId) { Invoke(nameof(RandomizePickaxe), WorldContextObject, PlayerId); }
        public bool IsPickaxePartEquipped(Object WorldContextObject, EPickaxePartLocation Location, PickaxePart part, ItemID pickaxeID) { return Invoke<bool>(nameof(IsPickaxePartEquipped), WorldContextObject, Location, part, pickaxeID); }
        public void GivePickaxePart(Object WorldContextObject, PickaxePart part) { Invoke(nameof(GivePickaxePart), WorldContextObject, part); }
        public UArray<PickaxePart> GetUnlockedPickaxeParts(Object WorldContextObject, EPickaxePartLocation Category) { return Invoke<UArray<PickaxePart>>(nameof(GetUnlockedPickaxeParts), WorldContextObject, Category); }
        public UArray<PickaxePart> GetPickaxeParts(Object WorldContextObject, EPickaxePartLocation Category) { return Invoke<UArray<PickaxePart>>(nameof(GetPickaxeParts), WorldContextObject, Category); }
        public bool GetIsPickAxePartAcquired(Object WorldContextObject, PickaxePart InPickaxePart) { return Invoke<bool>(nameof(GetIsPickAxePartAcquired), WorldContextObject, InPickaxePart); }
        public PickaxeSet GetEquippedPickaxeSet(Object WorldContextObject, ItemID pickaxeID) { return Invoke<PickaxeSet>(nameof(GetEquippedPickaxeSet), WorldContextObject, pickaxeID); }
        public PickaxePart GetEquippedPickaxePart(Object WorldContextObject, EPickaxePartLocation partLocation, ItemID pickaxeID) { return Invoke<PickaxePart>(nameof(GetEquippedPickaxePart), WorldContextObject, partLocation, pickaxeID); }
        public void EquipPickaxePart(Object WorldContextObject, PickaxePart part, EPickaxePartLocation partLocation, ItemID pickaxeID) { Invoke(nameof(EquipPickaxePart), WorldContextObject, part, partLocation, pickaxeID); }
        public void CopyPastePickaxeLoadout(Object WorldContextObject, PlayerCharacterID PlayerId, int fromIndex, int toIndex) { Invoke(nameof(CopyPastePickaxeLoadout), WorldContextObject, PlayerId, fromIndex, toIndex); }
    }
    public class PickaxeItem : Item
    {
        public PickaxeItem(nint addr) : base(addr) { }
        public bool QuadDamageCarving { get { return this[nameof(QuadDamageCarving)].Flag; } set { this[nameof(QuadDamageCarving)].Flag = value; } }
        public SceneComponent FP_Root { get { return this[nameof(FP_Root)].As<SceneComponent>(); } set { this["FP_Root"] = value; } }
        public SceneComponent TP_Root { get { return this[nameof(TP_Root)].As<SceneComponent>(); } set { this["TP_Root"] = value; } }
        public SceneComponent FP_Scale { get { return this[nameof(FP_Scale)].As<SceneComponent>(); } set { this["FP_Scale"] = value; } }
        public SceneComponent TP_Scale { get { return this[nameof(TP_Scale)].As<SceneComponent>(); } set { this["TP_Scale"] = value; } }
        public PlayerAnimInstance FPAnimInstance { get { return this[nameof(FPAnimInstance)].As<PlayerAnimInstance>(); } set { this["FPAnimInstance"] = value; } }
        public PlayerAnimInstance TPAnimInstance { get { return this[nameof(TPAnimInstance)].As<PlayerAnimInstance>(); } set { this["TPAnimInstance"] = value; } }
        public AnimMontage FP_EquipAnimation { get { return this[nameof(FP_EquipAnimation)].As<AnimMontage>(); } set { this["FP_EquipAnimation"] = value; } }
        public AnimMontage TP_EquipAnimation { get { return this[nameof(TP_EquipAnimation)].As<AnimMontage>(); } set { this["TP_EquipAnimation"] = value; } }
        public float EquipDuration { get { return this[nameof(EquipDuration)].GetValue<float>(); } set { this[nameof(EquipDuration)].SetValue<float>(value); } }
        public ItemCharacterAnimationSet CharacterAnimationSet { get { return this[nameof(CharacterAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["CharacterAnimationSet"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public DamageComponent SpecialDamageComponent { get { return this[nameof(SpecialDamageComponent)].As<DamageComponent>(); } set { this["SpecialDamageComponent"] = value; } }
        public float SpecialCooldown { get { return this[nameof(SpecialCooldown)].GetValue<float>(); } set { this[nameof(SpecialCooldown)].SetValue<float>(value); } }
        public float SpecialCooldownRemaining { get { return this[nameof(SpecialCooldownRemaining)].GetValue<float>(); } set { this[nameof(SpecialCooldownRemaining)].SetValue<float>(value); } }
        public CoolDownProgressStyle SpecialCooldownUI { get { return this[nameof(SpecialCooldownUI)].As<CoolDownProgressStyle>(); } set { this["SpecialCooldownUI"] = value; } }
        public int RockMiningBonus { get { return this[nameof(RockMiningBonus)].GetValue<int>(); } set { this[nameof(RockMiningBonus)].SetValue<int>(value); } }
        public int DirtMiningBonus { get { return this[nameof(DirtMiningBonus)].GetValue<int>(); } set { this[nameof(DirtMiningBonus)].SetValue<int>(value); } }
        public float DamageRange { get { return this[nameof(DamageRange)].GetValue<float>(); } set { this[nameof(DamageRange)].SetValue<float>(value); } }
        public float MiningRange { get { return this[nameof(MiningRange)].GetValue<float>(); } set { this[nameof(MiningRange)].SetValue<float>(value); } }
        public float DamageRadius { get { return this[nameof(DamageRadius)].GetValue<float>(); } set { this[nameof(DamageRadius)].SetValue<float>(value); } }
        public Object OnDamageEnemySlowdownEffect { get { return this[nameof(OnDamageEnemySlowdownEffect)]; } set { this[nameof(OnDamageEnemySlowdownEffect)] = value; } }
        public GameplayTagContainer WideDamageTrackingTags { get { return this[nameof(WideDamageTrackingTags)].As<GameplayTagContainer>(); } set { this["WideDamageTrackingTags"] = value; } }
        public SoundCue MiningSound { get { return this[nameof(MiningSound)].As<SoundCue>(); } set { this["MiningSound"] = value; } }
        public ForceFeedbackEffect MineRumble { get { return this[nameof(MineRumble)].As<ForceFeedbackEffect>(); } set { this["MineRumble"] = value; } }
        public ForceFeedbackEffect PartialMineRumble { get { return this[nameof(PartialMineRumble)].As<ForceFeedbackEffect>(); } set { this["PartialMineRumble"] = value; } }
        public ForceFeedbackEffect DamageRumble { get { return this[nameof(DamageRumble)].As<ForceFeedbackEffect>(); } set { this["DamageRumble"] = value; } }
        public float GeneralImpactAudioVolume { get { return this[nameof(GeneralImpactAudioVolume)].GetValue<float>(); } set { this[nameof(GeneralImpactAudioVolume)].SetValue<float>(value); } }
        public float HitCooldown { get { return this[nameof(HitCooldown)].GetValue<float>(); } set { this[nameof(HitCooldown)].SetValue<float>(value); } }
        public float MiningDuration { get { return this[nameof(MiningDuration)].GetValue<float>(); } set { this[nameof(MiningDuration)].SetValue<float>(value); } }
        public float DistanceConsideredSameHit { get { return this[nameof(DistanceConsideredSameHit)].GetValue<float>(); } set { this[nameof(DistanceConsideredSameHit)].SetValue<float>(value); } }
        public float BlockParticlesScaleFP { get { return this[nameof(BlockParticlesScaleFP)].GetValue<float>(); } set { this[nameof(BlockParticlesScaleFP)].SetValue<float>(value); } }
        public float BlockParticlesScaleTP { get { return this[nameof(BlockParticlesScaleTP)].GetValue<float>(); } set { this[nameof(BlockParticlesScaleTP)].SetValue<float>(value); } }
        public EPickaxeState State { get { return (EPickaxeState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public SoundCue PowerAttackRefreshedSound { get { return this[nameof(PowerAttackRefreshedSound)].As<SoundCue>(); } set { this["PowerAttackRefreshedSound"] = value; } }
        public bool PreventQMining { get { return this[nameof(PreventQMining)].Flag; } set { this[nameof(PreventQMining)].Flag = value; } }
        public float QMiningExpectedDelay { get { return this[nameof(QMiningExpectedDelay)].GetValue<float>(); } set { this[nameof(QMiningExpectedDelay)].SetValue<float>(value); } }
        public float QMiningInitialDelay { get { return this[nameof(QMiningInitialDelay)].GetValue<float>(); } set { this[nameof(QMiningInitialDelay)].SetValue<float>(value); } }
        public float QMiningReducedPlayRatePct { get { return this[nameof(QMiningReducedPlayRatePct)].GetValue<float>(); } set { this[nameof(QMiningReducedPlayRatePct)].SetValue<float>(value); } }
        public double QMiningLastHitTime { get { return this[nameof(QMiningLastHitTime)].GetValue<double>(); } set { this[nameof(QMiningLastHitTime)].SetValue<double>(value); } }
        public bool CanBezerk { get { return this[nameof(CanBezerk)].Flag; } set { this[nameof(CanBezerk)].Flag = value; } }
        public Object BezerkStatusEffect { get { return this[nameof(BezerkStatusEffect)]; } set { this[nameof(BezerkStatusEffect)] = value; } }
        public bool PowerAttackEnabled { get { return this[nameof(PowerAttackEnabled)].Flag; } set { this[nameof(PowerAttackEnabled)].Flag = value; } }
        public Object EquippedParts { get { return this[nameof(EquippedParts)]; } set { this[nameof(EquippedParts)] = value; } }
        public MaterialInterface EquippedMaterial { get { return this[nameof(EquippedMaterial)].As<MaterialInterface>(); } set { this["EquippedMaterial"] = value; } }
        public void SpecialTargetDamageEffects(Vector ImpactPoint, Vector ImpactNormal) { Invoke(nameof(SpecialTargetDamageEffects), ImpactPoint, ImpactNormal); }
        public void SetSpecialCoolDownDuration(float newCooldownDuration) { Invoke(nameof(SetSpecialCoolDownDuration), newCooldownDuration); }
        public void Server_TriggerBezerk() { Invoke(nameof(Server_TriggerBezerk)); }
        public void Server_SetState(EPickaxeState NewState) { Invoke(nameof(Server_SetState), NewState); }
        public void Server_RemoveDebrisInstance(Vector_NetQuantize HitPos, int DebrisIndex, int remappedIndex) { Invoke(nameof(Server_RemoveDebrisInstance), HitPos, DebrisIndex, remappedIndex); }
        public void Server_HitBlock(Vector_NetQuantize Position, int Material, bool removeDebris, bool isSpecial) { Invoke(nameof(Server_HitBlock), Position, Material, removeDebris, isSpecial); }
        public void Server_DoPowerAttack() { Invoke(nameof(Server_DoPowerAttack)); }
        public void Server_DigBlock(Vector carvePos, Vector carveDirection, int TerrainMaterial, bool isSpecial) { Invoke(nameof(Server_DigBlock), carvePos, carveDirection, TerrainMaterial, isSpecial); }
        public void Server_DamageTarget(PrimitiveComponent TargetComponent, bool isSpecial, Vector_NetQuantize ImpactPoint, Vector_NetQuantizeNormal ImpactNormal, FSDPhysicalMaterial PhysMaterial, byte BoneIndex) { Invoke(nameof(Server_DamageTarget), TargetComponent, isSpecial, ImpactPoint, ImpactNormal, PhysMaterial, BoneIndex); }
        public void RefreshSpecialCooldown() { Invoke(nameof(RefreshSpecialCooldown)); }
        public void OnRep_State(EPickaxeState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnLoadoutChanged() { Invoke(nameof(OnLoadoutChanged)); }
        public float GetSpecialCooldownProgress() { return Invoke<float>(nameof(GetSpecialCooldownProgress)); }
        public void All_SimulateHitBlock(Vector_NetQuantize Position, int materia, bool removeDebris, bool isSpecial) { Invoke(nameof(All_SimulateHitBlock), Position, materia, removeDebris, isSpecial); }
        public void All_SimulateDigDebris(Vector_NetQuantize Position, FXSystemAsset Particles, SoundCue cue) { Invoke(nameof(All_SimulateDigDebris), Position, Particles, cue); }
        public void All_SimulateDigBlock(Vector_NetQuantize Position, bool SpawnParticles, int Material, float Density, bool isSpecial) { Invoke(nameof(All_SimulateDigBlock), Position, SpawnParticles, Material, Density, isSpecial); }
        public void All_SimulateDamageTarget(PrimitiveComponent TargetComponent, bool isSpecial, Vector_NetQuantize ImpactPoint, Vector_NetQuantizeNormal ImpactNormal, FSDPhysicalMaterial PhysMaterial, byte BoneIndex) { Invoke(nameof(All_SimulateDamageTarget), TargetComponent, isSpecial, ImpactPoint, ImpactNormal, PhysMaterial, BoneIndex); }
        public void All_DoPowerAttack() { Invoke(nameof(All_DoPowerAttack)); }
    }
    public class PickaxePreviewActor : Actor
    {
        public PickaxePreviewActor(nint addr) : base(addr) { }
        public SceneComponent TP_Root { get { return this[nameof(TP_Root)].As<SceneComponent>(); } set { this["TP_Root"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public Object EquippedParts { get { return this[nameof(EquippedParts)]; } set { this[nameof(EquippedParts)] = value; } }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public MaterialInterface EquippedMaterial { get { return this[nameof(EquippedMaterial)].As<MaterialInterface>(); } set { this["EquippedMaterial"] = value; } }
        public void PreviewParts(EPickaxePartLocation PreviewLocation, PickaxePart PreviewPart) { Invoke(nameof(PreviewParts), PreviewLocation, PreviewPart); }
        public void EquipParts() { Invoke(nameof(EquipParts)); }
    }
    public class PickaxePart : SavablePrimaryDataAsset
    {
        public PickaxePart(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public ItemAquisitionBase Aquisition { get { return this[nameof(Aquisition)].As<ItemAquisitionBase>(); } set { this["Aquisition"] = value; } }
        public PickaxePartItem Item { get { return this[nameof(Item)].As<PickaxePartItem>(); } set { this["Item"] = value; } }
        public bool GetUnlockedFromStart() { return Invoke<bool>(nameof(GetUnlockedFromStart)); }
        public EPickaxePartLocation GetPrefferedLocation() { return Invoke<EPickaxePartLocation>(nameof(GetPrefferedLocation)); }
    }
    public class PickaxePartItem : Object
    {
        public PickaxePartItem(nint addr) : base(addr) { }
    }
    public class PickaxeMaterialPart : PickaxePartItem
    {
        public PickaxeMaterialPart(nint addr) : base(addr) { }
        public Object Material { get { return this[nameof(Material)]; } set { this[nameof(Material)] = value; } }
        public DynamicIcon DynamicIcon { get { return this[nameof(DynamicIcon)].As<DynamicIcon>(); } set { this["DynamicIcon"] = value; } }
        public MaterialInstanceDynamic CreateIcon(Object Owner) { return Invoke<MaterialInstanceDynamic>(nameof(CreateIcon), Owner); }
    }
    public class PickaxeMeshPart : PickaxePartItem
    {
        public PickaxeMeshPart(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
    }
    public class PickaxeHeadPart : PickaxeMeshPart
    {
        public PickaxeHeadPart(nint addr) : base(addr) { }
    }
    public class PickaxeBladePart : PickaxeMeshPart
    {
        public PickaxeBladePart(nint addr) : base(addr) { }
        public bool RestrictedToBackside { get { return this[nameof(RestrictedToBackside)].Flag; } set { this[nameof(RestrictedToBackside)].Flag = value; } }
    }
    public class PickaxeShaftPart : PickaxeMeshPart
    {
        public PickaxeShaftPart(nint addr) : base(addr) { }
    }
    public class PickaxeHandlePart : PickaxeMeshPart
    {
        public PickaxeHandlePart(nint addr) : base(addr) { }
    }
    public class PickaxePommelPart : PickaxeMeshPart
    {
        public PickaxePommelPart(nint addr) : base(addr) { }
    }
    public class PickaxeSettings : DataAsset
    {
        public PickaxeSettings(nint addr) : base(addr) { }
        public Object PickaxePreviewActors { get { return this[nameof(PickaxePreviewActors)]; } set { this[nameof(PickaxePreviewActors)] = value; } }
        public AnimMontage Salute_FP { get { return this[nameof(Salute_FP)].As<AnimMontage>(); } set { this["Salute_FP"] = value; } }
        public AnimMontage Salute_TP { get { return this[nameof(Salute_TP)].As<AnimMontage>(); } set { this["Salute_TP"] = value; } }
        public UArray<PickaxePart> Parts { get { return new UArray<PickaxePart>(this[nameof(Parts)].Address); } }
        public Object DefaultParts { get { return this[nameof(DefaultParts)]; } set { this[nameof(DefaultParts)] = value; } }
    }
    public class PickaxePartEquip : Interface
    {
        public PickaxePartEquip(nint addr) : base(addr) { }
    }
    public class PillarSettings : DataAsset
    {
        public PillarSettings(nint addr) : base(addr) { }
        public UArray<PillarSegment> PillarSegments { get { return new UArray<PillarSegment>(this[nameof(PillarSegments)].Address); } }
        public RandRange PointRange { get { return this[nameof(PointRange)].As<RandRange>(); } set { this["PointRange"] = value; } }
        public RandRange PointNoiseRange { get { return this[nameof(PointNoiseRange)].As<RandRange>(); } set { this["PointNoiseRange"] = value; } }
        public RandRange PillarRangeScale { get { return this[nameof(PillarRangeScale)].As<RandRange>(); } set { this["PillarRangeScale"] = value; } }
        public RandRange PillarNoiseRangeScale { get { return this[nameof(PillarNoiseRangeScale)].As<RandRange>(); } set { this["PillarNoiseRangeScale"] = value; } }
        public FloodFillSettings Noise { get { return this[nameof(Noise)].As<FloodFillSettings>(); } set { this["Noise"] = value; } }
    }
    public class PillarGenerationComponent : GenerationComponent
    {
        public PillarGenerationComponent(nint addr) : base(addr) { }
        public UArray<Vector> Points { get { return new UArray<Vector>(this[nameof(Points)].Address); } }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
        public PillarSettings PillarSettings { get { return this[nameof(PillarSettings)].As<PillarSettings>(); } set { this["PillarSettings"] = value; } }
    }
    public class PillarGenerationItem : GenerationItem
    {
        public PillarGenerationItem(nint addr) : base(addr) { }
        public PillarGenerationComponent PillarComponent { get { return this[nameof(PillarComponent)].As<PillarGenerationComponent>(); } set { this["PillarComponent"] = value; } }
    }
    public class PilotingStateComponent : CharacterStateComponent
    {
        public PilotingStateComponent(nint addr) : base(addr) { }
        public Actor Vehicle { get { return this[nameof(Vehicle)].As<Actor>(); } set { this["Vehicle"] = value; } }
        public void Server_MoveRight(float Value) { Invoke(nameof(Server_MoveRight), Value); }
        public void Server_MoveForward(float Value) { Invoke(nameof(Server_MoveForward), Value); }
        public void OnRep_Vehicle() { Invoke(nameof(OnRep_Vehicle)); }
    }
    public class PipelineBuilderItem : TrackBuilderItem
    {
        public PipelineBuilderItem(nint addr) : base(addr) { }
        public ItemPlacerAggregator SegmentPlacer { get { return this[nameof(SegmentPlacer)].As<ItemPlacerAggregator>(); } set { this["SegmentPlacer"] = value; } }
    }
    public class PipelineFinish : Actor
    {
        public PipelineFinish(nint addr) : base(addr) { }
        public TrackBuilderConnectPoint PipelineEndConnection { get { return this[nameof(PipelineEndConnection)].As<TrackBuilderConnectPoint>(); } set { this["PipelineEndConnection"] = value; } }
        public SingleUsableComponent UsableOrderExtractor { get { return this[nameof(UsableOrderExtractor)].As<SingleUsableComponent>(); } set { this["UsableOrderExtractor"] = value; } }
        public Object ExtractPodClass { get { return this[nameof(ExtractPodClass)]; } set { this[nameof(ExtractPodClass)] = value; } }
        public PipelineExtractorPod ExtractorPod { get { return this[nameof(ExtractorPod)].As<PipelineExtractorPod>(); } set { this["ExtractorPod"] = value; } }
        public bool bPipelineCompleted { get { return this[nameof(bPipelineCompleted)].Flag; } set { this[nameof(bPipelineCompleted)].Flag = value; } }
        public void ReceivePipelineCompleted() { Invoke(nameof(ReceivePipelineCompleted)); }
        public void ReceiveExtractorPodSpawned(PipelineExtractorPod InExtractorPod) { Invoke(nameof(ReceiveExtractorPodSpawned), InExtractorPod); }
        public void OnRep_PipelineCompleted() { Invoke(nameof(OnRep_PipelineCompleted)); }
        public void OnRep_ExtractorPod() { Invoke(nameof(OnRep_ExtractorPod)); }
        public void OnExtractorPodStateChanged(RessuplyPod InExtractorPod, ERessuplyPodState InState) { Invoke(nameof(OnExtractorPodStateChanged), InExtractorPod, InState); }
        public void OnExtractorPodOrdered(PlayerCharacter InUser, EInputKeys Key) { Invoke(nameof(OnExtractorPodOrdered), InUser, Key); }
        public void OnConnectedWithSegment(TrackBuilderConnectPoint InConnectPoint, TrackBuilderSegment InSegment) { Invoke(nameof(OnConnectedWithSegment), InConnectPoint, InSegment); }
        public void OnConnectedSegmentActivated(PipelineSegment InSegment) { Invoke(nameof(OnConnectedSegmentActivated), InSegment); }
        public Vector GetLandingOffset() { return Invoke<Vector>(nameof(GetLandingOffset)); }
    }
    public class PipelineExtractorPod : RessuplyPod
    {
        public PipelineExtractorPod(nint addr) : base(addr) { }
        public Object ConnectedSegment { get { return this[nameof(ConnectedSegment)]; } set { this[nameof(ConnectedSegment)] = value; } }
        public float TargetRotation { get { return this[nameof(TargetRotation)].GetValue<float>(); } set { this[nameof(TargetRotation)].SetValue<float>(value); } }
        public void SetTargetRotation(PipelineSegment InPipelineSegment) { Invoke(nameof(SetTargetRotation), InPipelineSegment); }
        public void ReceiveConnectedToSegment(PipelineSegment InConnectedSegment) { Invoke(nameof(ReceiveConnectedToSegment), InConnectedSegment); }
        public void OnRep_ConnectedSegment() { Invoke(nameof(OnRep_ConnectedSegment)); }
        public void ExtractorPodOrderedEvent(PlayerCharacter InUser) { Invoke(nameof(ExtractorPodOrderedEvent), InUser); }
    }
    public class PipelineExtractorPodAnimInstance : AnimInstance
    {
        public PipelineExtractorPodAnimInstance(nint addr) : base(addr) { }
        public float ConnectionRotation { get { return this[nameof(ConnectionRotation)].GetValue<float>(); } set { this[nameof(ConnectionRotation)].SetValue<float>(value); } }
        public EPipelineExtractorPodAnimState AnimState { get { return (EPipelineExtractorPodAnimState)this[nameof(AnimState)].GetValue<int>(); } set { this[nameof(AnimState)].SetValue<int>((int)value); } }
        public ERessuplyPodState PodState { get { return (ERessuplyPodState)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
        public EPipelineBuildState PipelineState { get { return (EPipelineBuildState)this[nameof(PipelineState)].GetValue<int>(); } set { this[nameof(PipelineState)].SetValue<int>((int)value); } }
        public ERefineryState RefineryState { get { return (ERefineryState)this[nameof(RefineryState)].GetValue<int>(); } set { this[nameof(RefineryState)].SetValue<int>((int)value); } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public Object pod { get { return this[nameof(pod)]; } set { this[nameof(pod)] = value; } }
        public Object ConnectedSegment { get { return this[nameof(ConnectedSegment)]; } set { this[nameof(ConnectedSegment)] = value; } }
        public Object PipelineStart { get { return this[nameof(PipelineStart)]; } set { this[nameof(PipelineStart)] = value; } }
        public Object Refinery { get { return this[nameof(Refinery)]; } set { this[nameof(Refinery)] = value; } }
    }
    public class PipelineSegment : TrackBuilderSegment
    {
        public PipelineSegment(nint addr) : base(addr) { }
        public Object OnPipelineBroken { get { return this[nameof(OnPipelineBroken)]; } set { this[nameof(OnPipelineBroken)] = value; } }
        public Object OnPipelineRepaired { get { return this[nameof(OnPipelineRepaired)]; } set { this[nameof(OnPipelineRepaired)] = value; } }
        public Object OnPipelineActivated { get { return this[nameof(OnPipelineActivated)]; } set { this[nameof(OnPipelineActivated)] = value; } }
        public Object OnPipelineStateChanged { get { return this[nameof(OnPipelineStateChanged)]; } set { this[nameof(OnPipelineStateChanged)] = value; } }
        public StaticMesh StaticMeshUnassembled { get { return this[nameof(StaticMeshUnassembled)].As<StaticMesh>(); } set { this["StaticMeshUnassembled"] = value; } }
        public StaticMesh StaticMeshAssembled { get { return this[nameof(StaticMeshAssembled)].As<StaticMesh>(); } set { this["StaticMeshAssembled"] = value; } }
        public StaticMesh StaticMeshFinal { get { return this[nameof(StaticMeshFinal)].As<StaticMesh>(); } set { this["StaticMeshFinal"] = value; } }
        public Vector EditorEndLocation { get { return this[nameof(EditorEndLocation)].As<Vector>(); } set { this["EditorEndLocation"] = value; } }
        public byte CarvingTraceType { get { return this[nameof(CarvingTraceType)].GetValue<byte>(); } set { this[nameof(CarvingTraceType)].SetValue<byte>(value); } }
        public MaterialInterface NumberMaterial { get { return this[nameof(NumberMaterial)].As<MaterialInterface>(); } set { this["NumberMaterial"] = value; } }
        public SingleUsableComponent RepairSegmentUsable { get { return this[nameof(RepairSegmentUsable)].As<SingleUsableComponent>(); } set { this["RepairSegmentUsable"] = value; } }
        public SingleUsableComponent ActivateSegmentUsable { get { return this[nameof(ActivateSegmentUsable)].As<SingleUsableComponent>(); } set { this["ActivateSegmentUsable"] = value; } }
        public DroneUseComponent DroneUsable { get { return this[nameof(DroneUsable)].As<DroneUseComponent>(); } set { this["DroneUsable"] = value; } }
        public SimpleHealthComponent SegmentHealthComponent { get { return this[nameof(SegmentHealthComponent)].As<SimpleHealthComponent>(); } set { this["SegmentHealthComponent"] = value; } }
        public SplineComponent MovementSpline { get { return this[nameof(MovementSpline)].As<SplineComponent>(); } set { this["MovementSpline"] = value; } }
        public SplineComponent MovementSplineRight { get { return this[nameof(MovementSplineRight)].As<SplineComponent>(); } set { this["MovementSplineRight"] = value; } }
        public SplineComponent MovementSplineLeft { get { return this[nameof(MovementSplineLeft)].As<SplineComponent>(); } set { this["MovementSplineLeft"] = value; } }
        public SplineMeshComponent PipelineMesh { get { return this[nameof(PipelineMesh)].As<SplineMeshComponent>(); } set { this["PipelineMesh"] = value; } }
        public SplineMeshComponent PipelineOuterMesh { get { return this[nameof(PipelineOuterMesh)].As<SplineMeshComponent>(); } set { this["PipelineOuterMesh"] = value; } }
        public SkeletalMeshComponent PipelineCapMesh { get { return this[nameof(PipelineCapMesh)].As<SkeletalMeshComponent>(); } set { this["PipelineCapMesh"] = value; } }
        public SkeletalMeshComponent EndPostMesh { get { return this[nameof(EndPostMesh)].As<SkeletalMeshComponent>(); } set { this["EndPostMesh"] = value; } }
        public StaticMeshComponent EndPostMeshStatic { get { return this[nameof(EndPostMeshStatic)].As<StaticMeshComponent>(); } set { this["EndPostMeshStatic"] = value; } }
        public PathfinderSplineSegmentCollisionComponent PathfinderComponent { get { return this[nameof(PathfinderComponent)].As<PathfinderSplineSegmentCollisionComponent>(); } set { this["PathfinderComponent"] = value; } }
        public bool bSegmentBroken { get { return this[nameof(bSegmentBroken)].Flag; } set { this[nameof(bSegmentBroken)].Flag = value; } }
        public float SegmentActivatedProgress { get { return this[nameof(SegmentActivatedProgress)].GetValue<float>(); } set { this[nameof(SegmentActivatedProgress)].SetValue<float>(value); } }
        public EPipelineBuildState PipelineState { get { return (EPipelineBuildState)this[nameof(PipelineState)].GetValue<int>(); } set { this[nameof(PipelineState)].SetValue<int>((int)value); } }
        public Object PipelineStart { get { return this[nameof(PipelineStart)]; } set { this[nameof(PipelineStart)] = value; } }
        public float MinValidLength { get { return this[nameof(MinValidLength)].GetValue<float>(); } set { this[nameof(MinValidLength)].SetValue<float>(value); } }
        public float MaxValidLength { get { return this[nameof(MaxValidLength)].GetValue<float>(); } set { this[nameof(MaxValidLength)].SetValue<float>(value); } }
        public float TooSharpExtraLength { get { return this[nameof(TooSharpExtraLength)].GetValue<float>(); } set { this[nameof(TooSharpExtraLength)].SetValue<float>(value); } }
        public float TooSteepExtraLength { get { return this[nameof(TooSteepExtraLength)].GetValue<float>(); } set { this[nameof(TooSteepExtraLength)].SetValue<float>(value); } }
        public float BlockedSphereSize { get { return this[nameof(BlockedSphereSize)].GetValue<float>(); } set { this[nameof(BlockedSphereSize)].SetValue<float>(value); } }
        public int BlockedExtraRaytraceRotationOffset { get { return this[nameof(BlockedExtraRaytraceRotationOffset)].GetValue<int>(); } set { this[nameof(BlockedExtraRaytraceRotationOffset)].SetValue<int>(value); } }
        public float BlockedExtraRaytraces { get { return this[nameof(BlockedExtraRaytraces)].GetValue<float>(); } set { this[nameof(BlockedExtraRaytraces)].SetValue<float>(value); } }
        public float BlockedExtraRaytraceDist { get { return this[nameof(BlockedExtraRaytraceDist)].GetValue<float>(); } set { this[nameof(BlockedExtraRaytraceDist)].SetValue<float>(value); } }
        public float BlockedRayTraceSuccesses { get { return this[nameof(BlockedRayTraceSuccesses)].GetValue<float>(); } set { this[nameof(BlockedRayTraceSuccesses)].SetValue<float>(value); } }
        public void UpdateSplineMesh(SplineMeshComponent InMesh, float InProgress, bool InMoveEndCap) { Invoke(nameof(UpdateSplineMesh), InMesh, InProgress, InMoveEndCap); }
        public void SetSegmentBroken(PlayerCharacter InUser, bool InSegmentBroken) { Invoke(nameof(SetSegmentBroken), InUser, InSegmentBroken); }
        public void SetPipelineNumberMaterial(MaterialInterface InNumberMaterial) { Invoke(nameof(SetPipelineNumberMaterial), InNumberMaterial); }
        public void SetEndPostVisible(bool InVisible) { Invoke(nameof(SetEndPostVisible), InVisible); }
        public void ReceiveSegmentBrokenChanged(bool InSegmentBroken) { Invoke(nameof(ReceiveSegmentBrokenChanged), InSegmentBroken); }
        public void ReceiveSegmentActivatedProgress(float InProgress) { Invoke(nameof(ReceiveSegmentActivatedProgress), InProgress); }
        public void ReceiveSegmentActivated() { Invoke(nameof(ReceiveSegmentActivated)); }
        public void ReceivePlacementFinished() { Invoke(nameof(ReceivePlacementFinished)); }
        public void ReceivePlacementBegin() { Invoke(nameof(ReceivePlacementBegin)); }
        public void PipelineStateDelegate__DelegateSignature(EPipelineBuildState InPipelineState) { Invoke(nameof(PipelineStateDelegate__DelegateSignature), InPipelineState); }
        public void PipelineSegmentDelegate__DelegateSignature(PipelineSegment InPipelineSegment) { Invoke(nameof(PipelineSegmentDelegate__DelegateSignature), InPipelineSegment); }
        public void OnRepaired(PlayerCharacter InUser) { Invoke(nameof(OnRepaired), InUser); }
        public void OnRep_SegmentBroken() { Invoke(nameof(OnRep_SegmentBroken)); }
        public void OnRep_SegmentActivatedProgress() { Invoke(nameof(OnRep_SegmentActivatedProgress)); }
        public PipelineStart GetPipelineStart() { return Invoke<PipelineStart>(nameof(GetPipelineStart)); }
        public PipelineSegment GetNextPipelineSegment(bool bForward) { return Invoke<PipelineSegment>(nameof(GetNextPipelineSegment), bForward); }
        public bool GetIsSegmentActivated() { return Invoke<bool>(nameof(GetIsSegmentActivated)); }
        public void CallbackSegmentRepaired(PlayerCharacter InUser, EInputKeys Key) { Invoke(nameof(CallbackSegmentRepaired), InUser, Key); }
        public void CallbackSegmentDestroyed(HealthComponentBase InHealth) { Invoke(nameof(CallbackSegmentDestroyed), InHealth); }
        public void CallbackSegmentActivatedProgress(float InProgress) { Invoke(nameof(CallbackSegmentActivatedProgress), InProgress); }
        public void CallbackSegmentActivated(PlayerCharacter InUser, EInputKeys Key) { Invoke(nameof(CallbackSegmentActivated), InUser, Key); }
        public void CallbackPipelineStateChanged(PipelineStart InPipelineStart, EPipelineBuildState InState) { Invoke(nameof(CallbackPipelineStateChanged), InPipelineStart, InState); }
        public void CallbackNextSegmentChanged(TrackBuilderUsable InUsable, TrackBuilderSegment InSegment) { Invoke(nameof(CallbackNextSegmentChanged), InUsable, InSegment); }
        public void CallbackDroneUsed(int TimesUsed) { Invoke(nameof(CallbackDroneUsed), TimesUsed); }
    }
    public class PipelineSegmentEndPostAnimInstance : AnimInstance
    {
        public PipelineSegmentEndPostAnimInstance(nint addr) : base(addr) { }
        public float AssemblyAnimLength { get { return this[nameof(AssemblyAnimLength)].GetValue<float>(); } set { this[nameof(AssemblyAnimLength)].SetValue<float>(value); } }
        public float AssemblyTimeTarget { get { return this[nameof(AssemblyTimeTarget)].GetValue<float>(); } set { this[nameof(AssemblyTimeTarget)].SetValue<float>(value); } }
        public float AssemblyTime { get { return this[nameof(AssemblyTime)].GetValue<float>(); } set { this[nameof(AssemblyTime)].SetValue<float>(value); } }
        public bool bAssembling { get { return this[nameof(bAssembling)].Flag; } set { this[nameof(bAssembling)].Flag = value; } }
    }
    public class PipelineStart : Actor
    {
        public PipelineStart(nint addr) : base(addr) { }
        public Object OnBuildStateChanged { get { return this[nameof(OnBuildStateChanged)]; } set { this[nameof(OnBuildStateChanged)] = value; } }
        public int PipelineID { get { return this[nameof(PipelineID)].GetValue<int>(); } set { this[nameof(PipelineID)].SetValue<int>(value); } }
        public TrackBuilderUsable PipelineStartUsable { get { return this[nameof(PipelineStartUsable)].As<TrackBuilderUsable>(); } set { this["PipelineStartUsable"] = value; } }
        public EPipelineBuildState BuildState { get { return (EPipelineBuildState)this[nameof(BuildState)].GetValue<int>(); } set { this[nameof(BuildState)].SetValue<int>((int)value); } }
        public PipelineFinish PipelineFinish { get { return this[nameof(PipelineFinish)].As<PipelineFinish>(); } set { this["PipelineFinish"] = value; } }
        public FSDRefinery Refinery { get { return this[nameof(Refinery)].As<FSDRefinery>(); } set { this["Refinery"] = value; } }
        public UArray<Object> BrokenSegments { get { return new UArray<Object>(this[nameof(BrokenSegments)].Address); } }
        public void ReceiveBuildStateChanged(EPipelineBuildState InBuildState) { Invoke(nameof(ReceiveBuildStateChanged), InBuildState); }
        public void PipelineStartStateDelegate__DelegateSignature(PipelineStart InPipelineStart, EPipelineBuildState InPipelineState) { Invoke(nameof(PipelineStartStateDelegate__DelegateSignature), InPipelineStart, InPipelineState); }
        public void PipelineCompleted(PipelineFinish InPipelineFinish) { Invoke(nameof(PipelineCompleted), InPipelineFinish); }
        public void OnRep_BuildState() { Invoke(nameof(OnRep_BuildState)); }
        public void OnNextSegmentChanged(TrackBuilderUsable InUsable, TrackBuilderSegment InSegment) { Invoke(nameof(OnNextSegmentChanged), InUsable, InSegment); }
        public UArray<PipelineSegment> GetAllPipelineSegments() { return Invoke<UArray<PipelineSegment>>(nameof(GetAllPipelineSegments)); }
    }
    public class PlaceableInterface : Interface
    {
        public PlaceableInterface(nint addr) : base(addr) { }
    }
    public class PlaceableItem : AnimatedItem
    {
        public PlaceableItem(nint addr) : base(addr) { }
        public CapacityHoldingItemAggregator Capacity { get { return this[nameof(Capacity)].As<CapacityHoldingItemAggregator>(); } set { this["Capacity"] = value; } }
        public ItemPlacerAggregator ItemPlacer { get { return this[nameof(ItemPlacer)].As<ItemPlacerAggregator>(); } set { this["ItemPlacer"] = value; } }
        public Object PlacableClass { get { return this[nameof(PlacableClass)]; } set { this[nameof(PlacableClass)] = value; } }
        public void Server_SpawnItem(Vector Location) { Invoke(nameof(Server_SpawnItem), Location); }
        public void ReceiveItemSpawned(Actor SpawnedActor) { Invoke(nameof(ReceiveItemSpawned), SpawnedActor); }
        public void OnCarriedAmountChanged(int newAmount) { Invoke(nameof(OnCarriedAmountChanged), newAmount); }
    }
    public class PlagueCleaning : Interface
    {
        public PlagueCleaning(nint addr) : base(addr) { }
        public InfectionPointCleaningComponent GetCleaningPoints(Vector fromLocation) { return Invoke<InfectionPointCleaningComponent>(nameof(GetCleaningPoints), fromLocation); }
    }
    public class PlagueCleanupItem : AnimatedItem
    {
        public PlagueCleanupItem(nint addr) : base(addr) { }
        public BoxComponent DroppedCollider { get { return this[nameof(DroppedCollider)].As<BoxComponent>(); } set { this["DroppedCollider"] = value; } }
        public InstantUsable PickupUsable { get { return this[nameof(PickupUsable)].As<InstantUsable>(); } set { this["PickupUsable"] = value; } }
        public SphereComponent UseSphere { get { return this[nameof(UseSphere)].As<SphereComponent>(); } set { this["UseSphere"] = value; } }
        public CrosshairAggregator CrosshairAggregator { get { return this[nameof(CrosshairAggregator)].As<CrosshairAggregator>(); } set { this["CrosshairAggregator"] = value; } }
        public AnimMontage FP_FireAnimation { get { return this[nameof(FP_FireAnimation)].As<AnimMontage>(); } set { this["FP_FireAnimation"] = value; } }
        public AnimMontage TP_FireAnimation { get { return this[nameof(TP_FireAnimation)].As<AnimMontage>(); } set { this["TP_FireAnimation"] = value; } }
        public AnimMontage FP_Gunsling { get { return this[nameof(FP_Gunsling)].As<AnimMontage>(); } set { this["FP_Gunsling"] = value; } }
        public AnimMontage TP_Gunsling { get { return this[nameof(TP_Gunsling)].As<AnimMontage>(); } set { this["TP_Gunsling"] = value; } }
        public AnimMontage Item_Gunsling { get { return this[nameof(Item_Gunsling)].As<AnimMontage>(); } set { this["Item_Gunsling"] = value; } }
        public SoundCue UsingSound { get { return this[nameof(UsingSound)].As<SoundCue>(); } set { this["UsingSound"] = value; } }
        public float UsingSoundFadeout { get { return this[nameof(UsingSoundFadeout)].GetValue<float>(); } set { this[nameof(UsingSoundFadeout)].SetValue<float>(value); } }
        public SoundCue UsingSoundTail { get { return this[nameof(UsingSoundTail)].As<SoundCue>(); } set { this["UsingSoundTail"] = value; } }
        public KeepInsideWorld KeepInsideWorld { get { return this[nameof(KeepInsideWorld)].As<KeepInsideWorld>(); } set { this["KeepInsideWorld"] = value; } }
        public AudioComponent UsingSoundInstance { get { return this[nameof(UsingSoundInstance)].As<AudioComponent>(); } set { this["UsingSoundInstance"] = value; } }
        public float FireRate { get { return this[nameof(FireRate)].GetValue<float>(); } set { this[nameof(FireRate)].SetValue<float>(value); } }
        public void Server_Gunsling() { Invoke(nameof(Server_Gunsling)); }
        public void Server_EnablePhysics(Vector_NetQuantize Direction) { Invoke(nameof(Server_EnablePhysics), Direction); }
        public void OnPickupUsed(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnPickupUsed), User, Key); }
        public void OnObjectiveChanged(Objective Objective) { Invoke(nameof(OnObjectiveChanged), Objective); }
        public void OnInRangeChanged(bool InRange) { Invoke(nameof(OnInRangeChanged), InRange); }
        public void All_Gunsling() { Invoke(nameof(All_Gunsling)); }
        public void All_EnablePhysics(Vector_NetQuantize Direction) { Invoke(nameof(All_EnablePhysics), Direction); }
    }
    public class CleanupToolAnimInstance : AnimInstance
    {
        public CleanupToolAnimInstance(nint addr) : base(addr) { }
        public bool isUsing { get { return this[nameof(isUsing)].Flag; } set { this[nameof(isUsing)].Flag = value; } }
        public PlagueCleanupItem CleaningTool { get { return this[nameof(CleaningTool)].As<PlagueCleanupItem>(); } set { this["CleaningTool"] = value; } }
    }
    public class PlagueControlActor : Actor
    {
        public PlagueControlActor(nint addr) : base(addr) { }
        public UArray<PlacementObstruction> Obstructions { get { return new UArray<PlacementObstruction>(this[nameof(Obstructions)].Address); } }
        public NiagaraComponent DebrisLightSystem { get { return this[nameof(DebrisLightSystem)].As<NiagaraComponent>(); } set { this["DebrisLightSystem"] = value; } }
        public PlagueUsable CallWeaponPodUsable { get { return this[nameof(CallWeaponPodUsable)].As<PlagueUsable>(); } set { this["CallWeaponPodUsable"] = value; } }
        public TerrainMaterial TargetPlagueMaterial { get { return this[nameof(TargetPlagueMaterial)].As<TerrainMaterial>(); } set { this["TargetPlagueMaterial"] = value; } }
        public Object CleanupPodItem { get { return this[nameof(CleanupPodItem)]; } set { this[nameof(CleanupPodItem)] = value; } }
        public float MinTimeBetweenWeaponPods { get { return this[nameof(MinTimeBetweenWeaponPods)].GetValue<float>(); } set { this[nameof(MinTimeBetweenWeaponPods)].SetValue<float>(value); } }
        public float MinDistBetweenPods { get { return this[nameof(MinDistBetweenPods)].GetValue<float>(); } set { this[nameof(MinDistBetweenPods)].SetValue<float>(value); } }
        public float MaxDistFromCenter { get { return this[nameof(MaxDistFromCenter)].GetValue<float>(); } set { this[nameof(MaxDistFromCenter)].SetValue<float>(value); } }
        public float CanCallPodDistance { get { return this[nameof(CanCallPodDistance)].GetValue<float>(); } set { this[nameof(CanCallPodDistance)].SetValue<float>(value); } }
        public float IgnoreDebrisLightSphere { get { return this[nameof(IgnoreDebrisLightSphere)].GetValue<float>(); } set { this[nameof(IgnoreDebrisLightSphere)].SetValue<float>(value); } }
        public float DebrisLightDistanceFromGround { get { return this[nameof(DebrisLightDistanceFromGround)].GetValue<float>(); } set { this[nameof(DebrisLightDistanceFromGround)].SetValue<float>(value); } }
        public float RemoveDebrisLightUpdateRate { get { return this[nameof(RemoveDebrisLightUpdateRate)].GetValue<float>(); } set { this[nameof(RemoveDebrisLightUpdateRate)].SetValue<float>(value); } }
        public bool DebugDrawDebrisLight { get { return this[nameof(DebugDrawDebrisLight)].Flag; } set { this[nameof(DebugDrawDebrisLight)].Flag = value; } }
        public Object TargetedPlagueNode { get { return this[nameof(TargetedPlagueNode)]; } set { this[nameof(TargetedPlagueNode)] = value; } }
        public void SpawnPodHack(PlayerCharacter Player) { Invoke(nameof(SpawnPodHack), Player); }
        public void SetCanUseWeaponPod(bool Value) { Invoke(nameof(SetCanUseWeaponPod), Value); }
        public void PushDebrisLights() { Invoke(nameof(PushDebrisLights)); }
        public void EquipPlaguePod(PlayerCharacter Player) { Invoke(nameof(EquipPlaguePod), Player); }
        public bool CanDropWeaponPod(float TimeLeft) { return Invoke<bool>(nameof(CanDropWeaponPod), TimeLeft); }
    }
    public class PlagueInfectionNode : Actor
    {
        public PlagueInfectionNode(nint addr) : base(addr) { }
        public Object OnFirstPlayerNearCenter { get { return this[nameof(OnFirstPlayerNearCenter)]; } set { this[nameof(OnFirstPlayerNearCenter)] = value; } }
        public Object OnPlagueCenterKilled { get { return this[nameof(OnPlagueCenterKilled)]; } set { this[nameof(OnPlagueCenterKilled)] = value; } }
        public SimpleHealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<SimpleHealthComponent>(); } set { this["HealthComponent"] = value; } }
        public Object TriggerCleanupTutorial { get { return this[nameof(TriggerCleanupTutorial)]; } set { this[nameof(TriggerCleanupTutorial)] = value; } }
        public TerrainMaterial PlagueTerrainMaterial { get { return this[nameof(PlagueTerrainMaterial)].As<TerrainMaterial>(); } set { this["PlagueTerrainMaterial"] = value; } }
        public float NodeInfluenceRadius { get { return this[nameof(NodeInfluenceRadius)].GetValue<float>(); } set { this[nameof(NodeInfluenceRadius)].SetValue<float>(value); } }
        public int NumberOfDeathEffectParticles { get { return this[nameof(NumberOfDeathEffectParticles)].GetValue<int>(); } set { this[nameof(NumberOfDeathEffectParticles)].SetValue<int>(value); } }
        public float HealthPercentageToKill { get { return this[nameof(HealthPercentageToKill)].GetValue<float>(); } set { this[nameof(HealthPercentageToKill)].SetValue<float>(value); } }
        public Object WormPodClass { get { return this[nameof(WormPodClass)]; } set { this[nameof(WormPodClass)] = value; } }
        public float ImportantLocationRadius { get { return this[nameof(ImportantLocationRadius)].GetValue<float>(); } set { this[nameof(ImportantLocationRadius)].SetValue<float>(value); } }
        public UArray<Actor> ActiveWorms { get { return new UArray<Actor>(this[nameof(ActiveWorms)].Address); } }
        public UArray<Actor> ActivePods { get { return new UArray<Actor>(this[nameof(ActivePods)].Address); } }
        public int MaxWormCount { get { return this[nameof(MaxWormCount)].GetValue<int>(); } set { this[nameof(MaxWormCount)].SetValue<int>(value); } }
        public float WormPodInterval { get { return this[nameof(WormPodInterval)].GetValue<float>(); } set { this[nameof(WormPodInterval)].SetValue<float>(value); } }
        public int MinWormPodWave { get { return this[nameof(MinWormPodWave)].GetValue<int>(); } set { this[nameof(MinWormPodWave)].SetValue<int>(value); } }
        public int MaxWormPodWave { get { return this[nameof(MaxWormPodWave)].GetValue<int>(); } set { this[nameof(MaxWormPodWave)].SetValue<int>(value); } }
        public DebrisPositioning WormPodPositioning { get { return this[nameof(WormPodPositioning)].As<DebrisPositioning>(); } set { this["WormPodPositioning"] = value; } }
        public CurveFloat AvoidCost { get { return this[nameof(AvoidCost)].As<CurveFloat>(); } set { this["AvoidCost"] = value; } }
        public float WormSpawnTimeDeviation { get { return this[nameof(WormSpawnTimeDeviation)].GetValue<float>(); } set { this[nameof(WormSpawnTimeDeviation)].SetValue<float>(value); } }
        public float PassiveWormSpawnTime { get { return this[nameof(PassiveWormSpawnTime)].GetValue<float>(); } set { this[nameof(PassiveWormSpawnTime)].SetValue<float>(value); } }
        public float ActiveWormSpawnTime { get { return this[nameof(ActiveWormSpawnTime)].GetValue<float>(); } set { this[nameof(ActiveWormSpawnTime)].SetValue<float>(value); } }
        public float WormSpawnRange { get { return this[nameof(WormSpawnRange)].GetValue<float>(); } set { this[nameof(WormSpawnRange)].SetValue<float>(value); } }
        public float ActivationRange { get { return this[nameof(ActivationRange)].GetValue<float>(); } set { this[nameof(ActivationRange)].SetValue<float>(value); } }
        public bool HasCleanPodBeenSpawned { get { return this[nameof(HasCleanPodBeenSpawned)].Flag; } set { this[nameof(HasCleanPodBeenSpawned)].Flag = value; } }
        public void OnWormSpawned(Actor worm) { Invoke(nameof(OnWormSpawned), worm); }
        public void OnWormDestroyed(Actor DestroyedActor) { Invoke(nameof(OnWormDestroyed), DestroyedActor); }
        public void OnPodDestroyed(Actor DestroyedActor) { Invoke(nameof(OnPodDestroyed), DestroyedActor); }
        public void OnDeath(HealthComponentBase Health) { Invoke(nameof(OnDeath), Health); }
        public void CountNodePlague() { Invoke(nameof(CountNodePlague)); }
    }
    public class ImpactIndicator : Actor
    {
        public ImpactIndicator(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SceneComponent InnerScaler { get { return this[nameof(InnerScaler)].As<SceneComponent>(); } set { this["InnerScaler"] = value; } }
        public SceneComponent OuterScaler { get { return this[nameof(OuterScaler)].As<SceneComponent>(); } set { this["OuterScaler"] = value; } }
        public RuntimeFloatCurve OuterGrowthCurve { get { return this[nameof(OuterGrowthCurve)].As<RuntimeFloatCurve>(); } set { this["OuterGrowthCurve"] = value; } }
        public RuntimeFloatCurve InnerGrowthCurve { get { return this[nameof(InnerGrowthCurve)].As<RuntimeFloatCurve>(); } set { this["InnerGrowthCurve"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public void SetRadius(float Radius) { Invoke(nameof(SetRadius), Radius); }
    }
    public class PlagueMeteor : Actor
    {
        public PlagueMeteor(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public StaticMeshComponent MeteorMesh { get { return this[nameof(MeteorMesh)].As<StaticMeshComponent>(); } set { this["MeteorMesh"] = value; } }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public DamageComponent ImpactDamage { get { return this[nameof(ImpactDamage)].As<DamageComponent>(); } set { this["ImpactDamage"] = value; } }
        public bool ManuallyTargeted { get { return this[nameof(ManuallyTargeted)].Flag; } set { this[nameof(ManuallyTargeted)].Flag = value; } }
        public UArray<StaticMesh> stages { get { return new UArray<StaticMesh>(this[nameof(stages)].Address); } }
        public int CrackStage { get { return this[nameof(CrackStage)].GetValue<int>(); } set { this[nameof(CrackStage)].SetValue<int>(value); } }
        public DropInfo DropInfo { get { return this[nameof(DropInfo)].As<DropInfo>(); } set { this["DropInfo"] = value; } }
        public Object DropzoneIndicatorClass { get { return this[nameof(DropzoneIndicatorClass)]; } set { this[nameof(DropzoneIndicatorClass)] = value; } }
        public ImpactIndicator DropZoneIndicator { get { return this[nameof(DropZoneIndicator)].As<ImpactIndicator>(); } set { this["DropZoneIndicator"] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public Vector DropDirection { get { return this[nameof(DropDirection)].As<Vector>(); } set { this["DropDirection"] = value; } }
        public float IndicatorTime { get { return this[nameof(IndicatorTime)].GetValue<float>(); } set { this[nameof(IndicatorTime)].SetValue<float>(value); } }
        public float VisualsTime { get { return this[nameof(VisualsTime)].GetValue<float>(); } set { this[nameof(VisualsTime)].SetValue<float>(value); } }
        public float NearImpactTime { get { return this[nameof(NearImpactTime)].GetValue<float>(); } set { this[nameof(NearImpactTime)].SetValue<float>(value); } }
        public float LastAudioTime { get { return this[nameof(LastAudioTime)].GetValue<float>(); } set { this[nameof(LastAudioTime)].SetValue<float>(value); } }
        public float LocationVariance { get { return this[nameof(LocationVariance)].GetValue<float>(); } set { this[nameof(LocationVariance)].SetValue<float>(value); } }
        public RuntimeFloatCurve DropImpactCurve { get { return this[nameof(DropImpactCurve)].As<RuntimeFloatCurve>(); } set { this["DropImpactCurve"] = value; } }
        public Object RockCrackerPod { get { return this[nameof(RockCrackerPod)]; } set { this[nameof(RockCrackerPod)] = value; } }
        public Object RockCrackerIndicator { get { return this[nameof(RockCrackerIndicator)]; } set { this[nameof(RockCrackerIndicator)] = value; } }
        public DebrisPositioning RockCrackerPodPositioning { get { return this[nameof(RockCrackerPodPositioning)].As<DebrisPositioning>(); } set { this["RockCrackerPodPositioning"] = value; } }
        public UArray<RockCrackerPod> SpawnedPods { get { return new UArray<RockCrackerPod>(this[nameof(SpawnedPods)].Address); } }
        public float SpawnedTime { get { return this[nameof(SpawnedTime)].GetValue<float>(); } set { this[nameof(SpawnedTime)].SetValue<float>(value); } }
        public void SignalEventStarted() { Invoke(nameof(SignalEventStarted)); }
        public void SignalEventEnded(bool wasSuccess) { Invoke(nameof(SignalEventEnded), wasSuccess); }
        public void SetStage(int Stage) { Invoke(nameof(SetStage), Stage); }
        public void SetDropTarget(Vector Location) { Invoke(nameof(SetDropTarget), Location); }
        public void ResetStage() { Invoke(nameof(ResetStage)); }
        public void RegressStage() { Invoke(nameof(RegressStage)); }
        public void OnStageAdvanced(int Stage) { Invoke(nameof(OnStageAdvanced), Stage); }
        public void OnRep_DropInfo() { Invoke(nameof(OnRep_DropInfo)); }
        public void OnRep_CrackStage() { Invoke(nameof(OnRep_CrackStage)); }
        public void NearImpact() { Invoke(nameof(NearImpact)); }
        public void LastaudioSignal() { Invoke(nameof(LastaudioSignal)); }
        public void Impacted_Latejoin() { Invoke(nameof(Impacted_Latejoin)); }
        public void Impacted() { Invoke(nameof(Impacted)); }
        public bool HasLandedOnTopOfRefineryPipes(float minDistanceToPipes) { return Invoke<bool>(nameof(HasLandedOnTopOfRefineryPipes), minDistanceToPipes); }
        public UArray<RockCrackerPod> GetPods() { return Invoke<UArray<RockCrackerPod>>(nameof(GetPods)); }
        public RockCrackerPod GetPodAtIndex(int Index) { return Invoke<RockCrackerPod>(nameof(GetPodAtIndex), Index); }
        public int GetNumActivePods() { return Invoke<int>(nameof(GetNumActivePods)); }
        public void EnableVisuals() { Invoke(nameof(EnableVisuals)); }
        public void DropStarted() { Invoke(nameof(DropStarted)); }
        public void DropRockCrackerPods(int amount, float MinRadius, float maRadius, ProceduralSetup Setup) { Invoke(nameof(DropRockCrackerPods), amount, MinRadius, maRadius, Setup); }
        public void DestroyAndSpawnHearts_FailSafe() { Invoke(nameof(DestroyAndSpawnHearts_FailSafe)); }
        public void AdvanceStage() { Invoke(nameof(AdvanceStage)); }
    }
    public class PlagueObjective : Objective
    {
        public PlagueObjective(nint addr) : base(addr) { }
        public int StartPlagueAmount { get { return this[nameof(StartPlagueAmount)].GetValue<int>(); } set { this[nameof(StartPlagueAmount)].SetValue<int>(value); } }
        public int CurrentPlagueAmount { get { return this[nameof(CurrentPlagueAmount)].GetValue<int>(); } set { this[nameof(CurrentPlagueAmount)].SetValue<int>(value); } }
        public int TargetPlagueAmount { get { return this[nameof(TargetPlagueAmount)].GetValue<int>(); } set { this[nameof(TargetPlagueAmount)].SetValue<int>(value); } }
        public float PercentageRequiredForCompletion { get { return this[nameof(PercentageRequiredForCompletion)].GetValue<float>(); } set { this[nameof(PercentageRequiredForCompletion)].SetValue<float>(value); } }
        public int SpawningTowersCount { get { return this[nameof(SpawningTowersCount)].GetValue<int>(); } set { this[nameof(SpawningTowersCount)].SetValue<int>(value); } }
        public DialogDataAsset NodeKilledShout { get { return this[nameof(NodeKilledShout)].As<DialogDataAsset>(); } set { this["NodeKilledShout"] = value; } }
        public DialogDataAsset LastNodeKilledShout { get { return this[nameof(LastNodeKilledShout)].As<DialogDataAsset>(); } set { this["LastNodeKilledShout"] = value; } }
        public DialogDataAsset OverridePrimaryObjCompletedShout_SelfCompleted { get { return this[nameof(OverridePrimaryObjCompletedShout_SelfCompleted)].As<DialogDataAsset>(); } set { this["OverridePrimaryObjCompletedShout_SelfCompleted"] = value; } }
        public DialogDataAsset OverridePrimaryObjCompletedShout_SelfNotCompleted { get { return this[nameof(OverridePrimaryObjCompletedShout_SelfNotCompleted)].As<DialogDataAsset>(); } set { this["OverridePrimaryObjCompletedShout_SelfNotCompleted"] = value; } }
        public bool AllPlagueCleaned { get { return this[nameof(AllPlagueCleaned)].Flag; } set { this[nameof(AllPlagueCleaned)].Flag = value; } }
        public PlagueControlActor PlagueController { get { return this[nameof(PlagueController)].As<PlagueControlActor>(); } set { this["PlagueController"] = value; } }
        public Object PlagueControllerClass { get { return this[nameof(PlagueControllerClass)]; } set { this[nameof(PlagueControllerClass)] = value; } }
        public UArray<PlagueInfectionNode> ActivePlagueCenters { get { return new UArray<PlagueInfectionNode>(this[nameof(ActivePlagueCenters)].Address); } }
        public Object ScriptedPlagueWave { get { return this[nameof(ScriptedPlagueWave)]; } set { this[nameof(ScriptedPlagueWave)] = value; } }
        public float ScriptedPlagueWaveWeight { get { return this[nameof(ScriptedPlagueWaveWeight)].GetValue<float>(); } set { this[nameof(ScriptedPlagueWaveWeight)].SetValue<float>(value); } }
        public void OnRep_CurrentPlagueAmount(int OldAmount) { Invoke(nameof(OnRep_CurrentPlagueAmount), OldAmount); }
        public UArray<PlagueInfectionNode> GetPlagueCenters() { return Invoke<UArray<PlagueInfectionNode>>(nameof(GetPlagueCenters)); }
    }
    public class PlaguePuddle : AdicPuddle
    {
        public PlaguePuddle(nint addr) : base(addr) { }
        public ushort MaxPlaguePiles { get { return this[nameof(MaxPlaguePiles)].GetValue<ushort>(); } set { this[nameof(MaxPlaguePiles)].SetValue<ushort>(value); } }
        public void Receive_OnVacuumed() { Invoke(nameof(Receive_OnVacuumed)); }
    }
    public class PlagueUsable : InstantUsable
    {
        public PlagueUsable(nint addr) : base(addr) { }
        public Object CanDropText { get { return this[nameof(CanDropText)]; } set { this[nameof(CanDropText)] = value; } }
        public Object CannotDropText { get { return this[nameof(CannotDropText)]; } set { this[nameof(CannotDropText)] = value; } }
    }
    public class PlagueWorm : EnemyDeepPathfinderCharacter
    {
        public PlagueWorm(nint addr) : base(addr) { }
    }
    public class PlanetZoneSetup : DataAsset
    {
        public PlanetZoneSetup(nint addr) : base(addr) { }
        public UArray<PlanetZone> PlanetZones { get { return new UArray<PlanetZone>(this[nameof(PlanetZones)].Address); } }
        public PlanetZone GetPlanetZoneForBiome(Biome Biome, int zoneIndex) { return Invoke<PlanetZone>(nameof(GetPlanetZoneForBiome), Biome, zoneIndex); }
    }
    public class PlanetZone : DataAsset
    {
        public PlanetZone(nint addr) : base(addr) { }
        public UArray<Biome> Biomes { get { return new UArray<Biome>(this[nameof(Biomes)].Address); } }
        public UArray<RequiredMissionItem> RequiredMissions { get { return new UArray<RequiredMissionItem>(this[nameof(RequiredMissions)].Address); } }
        public bool MustBeUnlocked { get { return this[nameof(MustBeUnlocked)].Flag; } set { this[nameof(MustBeUnlocked)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public bool IsUnlocked(FSDSaveGame SaveGame) { return Invoke<bool>(nameof(IsUnlocked), SaveGame); }
        public Guid GetSavegameID() { return Invoke<Guid>(nameof(GetSavegameID)); }
        public UArray<Biome> GetBiomes() { return Invoke<UArray<Biome>>(nameof(GetBiomes)); }
    }
    public class PlasmaBoomerang : Grenade
    {
        public PlasmaBoomerang(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public BoxComponent Collision { get { return this[nameof(Collision)].As<BoxComponent>(); } set { this["Collision"] = value; } }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public StaticMeshComponent Mesh { get { return this[nameof(Mesh)].As<StaticMeshComponent>(); } set { this["Mesh"] = value; } }
        public SceneComponent MeshPivot { get { return this[nameof(MeshPivot)].As<SceneComponent>(); } set { this["MeshPivot"] = value; } }
        public CurveVector ArcCurve { get { return this[nameof(ArcCurve)].As<CurveVector>(); } set { this["ArcCurve"] = value; } }
        public float StartSmoothTime { get { return this[nameof(StartSmoothTime)].GetValue<float>(); } set { this[nameof(StartSmoothTime)].SetValue<float>(value); } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public float ArcSpeed { get { return this[nameof(ArcSpeed)].GetValue<float>(); } set { this[nameof(ArcSpeed)].SetValue<float>(value); } }
        public float HomingAcceleration { get { return this[nameof(HomingAcceleration)].GetValue<float>(); } set { this[nameof(HomingAcceleration)].SetValue<float>(value); } }
        public bool IsHoming { get { return this[nameof(IsHoming)].Flag; } set { this[nameof(IsHoming)].Flag = value; } }
        public void BeginOverlap(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(BeginOverlap), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
    }
    public class PlasmaCarbine : AmmoDrivenWeapon
    {
        public PlasmaCarbine(nint addr) : base(addr) { }
        public float RateOfFireBoostOnFullShield { get { return this[nameof(RateOfFireBoostOnFullShield)].GetValue<float>(); } set { this[nameof(RateOfFireBoostOnFullShield)].SetValue<float>(value); } }
        public bool RemoveShieldOnOverheat { get { return this[nameof(RemoveShieldOnOverheat)].Flag; } set { this[nameof(RemoveShieldOnOverheat)].Flag = value; } }
        public bool RemoveShieldOnReload { get { return this[nameof(RemoveShieldOnReload)].Flag; } set { this[nameof(RemoveShieldOnReload)].Flag = value; } }
        public float HeatEffectsThreshold { get { return this[nameof(HeatEffectsThreshold)].GetValue<float>(); } set { this[nameof(HeatEffectsThreshold)].SetValue<float>(value); } }
        public AnimMontage FP_CharacterOverheatEndMontage { get { return this[nameof(FP_CharacterOverheatEndMontage)].As<AnimMontage>(); } set { this["FP_CharacterOverheatEndMontage"] = value; } }
        public AnimMontage TP_CharacterOverheatEndMontage { get { return this[nameof(TP_CharacterOverheatEndMontage)].As<AnimMontage>(); } set { this["TP_CharacterOverheatEndMontage"] = value; } }
        public AnimMontage WPN_ItemOverheatEndMontage { get { return this[nameof(WPN_ItemOverheatEndMontage)].As<AnimMontage>(); } set { this["WPN_ItemOverheatEndMontage"] = value; } }
        public AnimMontage FP_CharacterReloadEndMontage { get { return this[nameof(FP_CharacterReloadEndMontage)].As<AnimMontage>(); } set { this["FP_CharacterReloadEndMontage"] = value; } }
        public AnimMontage TP_CharacterReloadEndMontage { get { return this[nameof(TP_CharacterReloadEndMontage)].As<AnimMontage>(); } set { this["TP_CharacterReloadEndMontage"] = value; } }
        public AnimMontage WPN_ItemReloadEndMontage { get { return this[nameof(WPN_ItemReloadEndMontage)].As<AnimMontage>(); } set { this["WPN_ItemReloadEndMontage"] = value; } }
        public Object OnReloadPressed { get { return this[nameof(OnReloadPressed)]; } set { this[nameof(OnReloadPressed)] = value; } }
        public void Server_ReloadPressed() { Invoke(nameof(Server_ReloadPressed)); }
        public void ApplyShieldDamage() { Invoke(nameof(ApplyShieldDamage)); }
    }
    public class PlatformProjectile : Projectile
    {
        public PlatformProjectile(nint addr) : base(addr) { }
        public void MeltPlatformAroundPlayers(Vector platformLocation) { Invoke(nameof(MeltPlatformAroundPlayers), platformLocation); }
    }
    public class PlayerAfflictionOverlay : DataAsset
    {
        public PlayerAfflictionOverlay(nint addr) : base(addr) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public LinearColor TextureTint { get { return this[nameof(TextureTint)].As<LinearColor>(); } set { this["TextureTint"] = value; } }
        public Object WidgetOverride { get { return this[nameof(WidgetOverride)]; } set { this[nameof(WidgetOverride)] = value; } }
        public int ZOrder { get { return this[nameof(ZOrder)].GetValue<int>(); } set { this[nameof(ZOrder)].SetValue<int>(value); } }
        public Object Audio2D_OnBegin { get { return this[nameof(Audio2D_OnBegin)]; } set { this[nameof(Audio2D_OnBegin)] = value; } }
    }
    public class PlayerAfflictionOverlayWidget : UserWidget
    {
        public PlayerAfflictionOverlayWidget(nint addr) : base(addr) { }
        public bool bOverlayActive { get { return this[nameof(bOverlayActive)].Flag; } set { this[nameof(bOverlayActive)].Flag = value; } }
        public PlayerAfflictionOverlay Overlay { get { return this[nameof(Overlay)].As<PlayerAfflictionOverlay>(); } set { this["Overlay"] = value; } }
        public void ReceiveEndOverlay() { Invoke(nameof(ReceiveEndOverlay)); }
        public void ReceiveBeginOverlay(Texture2D InTexture, LinearColor InTint) { Invoke(nameof(ReceiveBeginOverlay), InTexture, InTint); }
        public void EndOverlay() { Invoke(nameof(EndOverlay)); }
        public void BeginOverlay(PlayerAfflictionOverlay InOverlay) { Invoke(nameof(BeginOverlay), InOverlay); }
    }
    public class PlayerAfflictionComponent : PawnAfflictionComponent
    {
        public PlayerAfflictionComponent(nint addr) : base(addr) { }
        public Object OnShowOverlay { get { return this[nameof(OnShowOverlay)]; } set { this[nameof(OnShowOverlay)] = value; } }
        public Object OnHideOverlay { get { return this[nameof(OnHideOverlay)]; } set { this[nameof(OnHideOverlay)] = value; } }
        public Object ActiveOverlays { get { return this[nameof(ActiveOverlays)]; } set { this[nameof(ActiveOverlays)] = value; } }
        public Object Character { get { return this[nameof(Character)]; } set { this[nameof(Character)] = value; } }
        public void ShowPlayerOverlay(PlayerAfflictionOverlay Overlay) { Invoke(nameof(ShowPlayerOverlay), Overlay); }
        public void OverlayDelegate__DelegateSignature(PlayerAfflictionOverlay Overlay) { Invoke(nameof(OverlayDelegate__DelegateSignature), Overlay); }
        public void HidePlayerOverlay(PlayerAfflictionOverlay Overlay) { Invoke(nameof(HidePlayerOverlay), Overlay); }
    }
    public class EnemyPawnAfflictionComponent : PawnAfflictionComponent
    {
        public EnemyPawnAfflictionComponent(nint addr) : base(addr) { }
    }
    public class DeepPatherFinderCharacterAfflictionComponent : PawnAfflictionComponent
    {
        public DeepPatherFinderCharacterAfflictionComponent(nint addr) : base(addr) { }
        public DeepPathfinderCharacter Character { get { return this[nameof(Character)].As<DeepPathfinderCharacter>(); } set { this["Character"] = value; } }
    }
    public class StaticObjectAfflictionComponent : PawnAfflictionComponent
    {
        public StaticObjectAfflictionComponent(nint addr) : base(addr) { }
        public StaticMeshComponent Mesh { get { return this[nameof(Mesh)].As<StaticMeshComponent>(); } set { this["Mesh"] = value; } }
    }
    public class AnimatedObjectAfflictionComponent : PawnAfflictionComponent
    {
        public AnimatedObjectAfflictionComponent(nint addr) : base(addr) { }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
    }
    public class PlayerAnimInstance : AnimInstance
    {
        public PlayerAnimInstance(nint addr) : base(addr) { }
        public bool IsFirstPerson { get { return this[nameof(IsFirstPerson)].Flag; } set { this[nameof(IsFirstPerson)].Flag = value; } }
        public float WalkTreshhold { get { return this[nameof(WalkTreshhold)].GetValue<float>(); } set { this[nameof(WalkTreshhold)].SetValue<float>(value); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public ParticleSystem DefaultFootstepParticle { get { return this[nameof(DefaultFootstepParticle)].As<ParticleSystem>(); } set { this["DefaultFootstepParticle"] = value; } }
        public SoundCue DefaultFootStepSound { get { return this[nameof(DefaultFootStepSound)].As<SoundCue>(); } set { this["DefaultFootStepSound"] = value; } }
        public ItemCharacterAnimationSet AnimationSetA { get { return this[nameof(AnimationSetA)].As<ItemCharacterAnimationSet>(); } set { this["AnimationSetA"] = value; } }
        public ItemCharacterAnimationSet AnimationSetB { get { return this[nameof(AnimationSetB)].As<ItemCharacterAnimationSet>(); } set { this["AnimationSetB"] = value; } }
        public bool AnimationSetAIsPrimary { get { return this[nameof(AnimationSetAIsPrimary)].Flag; } set { this[nameof(AnimationSetAIsPrimary)].Flag = value; } }
        public ECharacterState CharacterState { get { return (ECharacterState)this[nameof(CharacterState)].GetValue<int>(); } set { this[nameof(CharacterState)].SetValue<int>((int)value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float WalkAnimationSpeed { get { return this[nameof(WalkAnimationSpeed)].GetValue<float>(); } set { this[nameof(WalkAnimationSpeed)].SetValue<float>(value); } }
        public float RunAnimationSpeed { get { return this[nameof(RunAnimationSpeed)].GetValue<float>(); } set { this[nameof(RunAnimationSpeed)].SetValue<float>(value); } }
        public float WalkRate { get { return this[nameof(WalkRate)].GetValue<float>(); } set { this[nameof(WalkRate)].SetValue<float>(value); } }
        public float RunRate { get { return this[nameof(RunRate)].GetValue<float>(); } set { this[nameof(RunRate)].SetValue<float>(value); } }
        public float Direction { get { return this[nameof(Direction)].GetValue<float>(); } set { this[nameof(Direction)].SetValue<float>(value); } }
        public Rotator AimRotation { get { return this[nameof(AimRotation)].As<Rotator>(); } set { this["AimRotation"] = value; } }
        public bool IsInitialized { get { return this[nameof(IsInitialized)].Flag; } set { this[nameof(IsInitialized)].Flag = value; } }
        public float Pitch { get { return this[nameof(Pitch)].GetValue<float>(); } set { this[nameof(Pitch)].SetValue<float>(value); } }
        public bool IsStandingDown { get { return this[nameof(IsStandingDown)].Flag; } set { this[nameof(IsStandingDown)].Flag = value; } }
        public bool IsInAir { get { return this[nameof(IsInAir)].Flag; } set { this[nameof(IsInAir)].Flag = value; } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public bool IsWalking { get { return this[nameof(IsWalking)].Flag; } set { this[nameof(IsWalking)].Flag = value; } }
        public bool IsSprinting { get { return this[nameof(IsSprinting)].Flag; } set { this[nameof(IsSprinting)].Flag = value; } }
        public bool IsAiming { get { return this[nameof(IsAiming)].Flag; } set { this[nameof(IsAiming)].Flag = value; } }
        public bool IsAlive { get { return this[nameof(IsAlive)].Flag; } set { this[nameof(IsAlive)].Flag = value; } }
        public bool IsLyingDown { get { return this[nameof(IsLyingDown)].Flag; } set { this[nameof(IsLyingDown)].Flag = value; } }
        public bool OnZipline { get { return this[nameof(OnZipline)].Flag; } set { this[nameof(OnZipline)].Flag = value; } }
        public bool IsGrinding { get { return this[nameof(IsGrinding)].Flag; } set { this[nameof(IsGrinding)].Flag = value; } }
        public bool IsParalyzed { get { return this[nameof(IsParalyzed)].Flag; } set { this[nameof(IsParalyzed)].Flag = value; } }
        public bool IsGrabbed { get { return this[nameof(IsGrabbed)].Flag; } set { this[nameof(IsGrabbed)].Flag = value; } }
        public bool IsAttached { get { return this[nameof(IsAttached)].Flag; } set { this[nameof(IsAttached)].Flag = value; } }
        public bool BeingRevived { get { return this[nameof(BeingRevived)].Flag; } set { this[nameof(BeingRevived)].Flag = value; } }
        public bool IsLookingAtMap { get { return this[nameof(IsLookingAtMap)].Flag; } set { this[nameof(IsLookingAtMap)].Flag = value; } }
        public bool IsControllingEnemy { get { return this[nameof(IsControllingEnemy)].Flag; } set { this[nameof(IsControllingEnemy)].Flag = value; } }
        public bool IsUsingJetBoots { get { return this[nameof(IsUsingJetBoots)].Flag; } set { this[nameof(IsUsingJetBoots)].Flag = value; } }
        public bool IsUsingTraversalTool { get { return this[nameof(IsUsingTraversalTool)].Flag; } set { this[nameof(IsUsingTraversalTool)].Flag = value; } }
        public float TraversalToolTargetHorizontalOffset { get { return this[nameof(TraversalToolTargetHorizontalOffset)].GetValue<float>(); } set { this[nameof(TraversalToolTargetHorizontalOffset)].SetValue<float>(value); } }
        public float TraversalToolTargetVerticalOffset { get { return this[nameof(TraversalToolTargetVerticalOffset)].GetValue<float>(); } set { this[nameof(TraversalToolTargetVerticalOffset)].SetValue<float>(value); } }
        public float TraversalToolSpeedRate { get { return this[nameof(TraversalToolSpeedRate)].GetValue<float>(); } set { this[nameof(TraversalToolSpeedRate)].SetValue<float>(value); } }
        public Vector ControllingEnemyRootOffset { get { return this[nameof(ControllingEnemyRootOffset)].As<Vector>(); } set { this["ControllingEnemyRootOffset"] = value; } }
        public Vector ControllingEnemyDirectionAlpha { get { return this[nameof(ControllingEnemyDirectionAlpha)].As<Vector>(); } set { this["ControllingEnemyDirectionAlpha"] = value; } }
        public float GliderAnimationLength { get { return this[nameof(GliderAnimationLength)].GetValue<float>(); } set { this[nameof(GliderAnimationLength)].SetValue<float>(value); } }
        public GliderAnimSync GliderAnimSync { get { return this[nameof(GliderAnimSync)].As<GliderAnimSync>(); } set { this["GliderAnimSync"] = value; } }
        public bool IsAllowedToPlayMovementAnim { get { return this[nameof(IsAllowedToPlayMovementAnim)].Flag; } set { this[nameof(IsAllowedToPlayMovementAnim)].Flag = value; } }
        public float CropBeard { get { return this[nameof(CropBeard)].GetValue<float>(); } set { this[nameof(CropBeard)].SetValue<float>(value); } }
        public AnimMontage ActiveUseMontage { get { return this[nameof(ActiveUseMontage)].As<AnimMontage>(); } set { this["ActiveUseMontage"] = value; } }
        public UseAnimationSetting CurrentUseSetting { get { return this[nameof(CurrentUseSetting)].As<UseAnimationSetting>(); } set { this["CurrentUseSetting"] = value; } }
        public AnimMontage EndUseMontageToPlay { get { return this[nameof(EndUseMontageToPlay)].As<AnimMontage>(); } set { this["EndUseMontageToPlay"] = value; } }
        public float AimDuration { get { return this[nameof(AimDuration)].GetValue<float>(); } set { this[nameof(AimDuration)].SetValue<float>(value); } }
        public float ReviveProgress { get { return this[nameof(ReviveProgress)].GetValue<float>(); } set { this[nameof(ReviveProgress)].SetValue<float>(value); } }
        public float ReviveExplicitTime { get { return this[nameof(ReviveExplicitTime)].GetValue<float>(); } set { this[nameof(ReviveExplicitTime)].SetValue<float>(value); } }
        public float IdleTimeForInspect { get { return this[nameof(IdleTimeForInspect)].GetValue<float>(); } set { this[nameof(IdleTimeForInspect)].SetValue<float>(value); } }
        public float RepeatDealayForInspect { get { return this[nameof(RepeatDealayForInspect)].GetValue<float>(); } set { this[nameof(RepeatDealayForInspect)].SetValue<float>(value); } }
        public ECharacterMoveDirection CharacterMoveDirection { get { return (ECharacterMoveDirection)this[nameof(CharacterMoveDirection)].GetValue<int>(); } set { this[nameof(CharacterMoveDirection)].SetValue<int>((int)value); } }
        public float MoveAdjustmentAngle { get { return this[nameof(MoveAdjustmentAngle)].GetValue<float>(); } set { this[nameof(MoveAdjustmentAngle)].SetValue<float>(value); } }
        public ItemCharacterAnimationSet CarryAnimationSet { get { return this[nameof(CarryAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["CarryAnimationSet"] = value; } }
        public ItemCharacterAnimationSet DefaultAnimationSet { get { return this[nameof(DefaultAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["DefaultAnimationSet"] = value; } }
        public bool StopUseMontage(bool stopImmediately) { return Invoke<bool>(nameof(StopUseMontage), stopImmediately); }
        public void StopInspectWeapon() { Invoke(nameof(StopInspectWeapon)); }
        public void StartInspectWeapon() { Invoke(nameof(StartInspectWeapon)); }
        public void SetAiming() { Invoke(nameof(SetAiming)); }
        public void PlayUseMontages(UseAnimationSetting useSetting) { Invoke(nameof(PlayUseMontages), useSetting); }
        public bool IsPlayingMontageInGroup(Object GroupName) { return Invoke<bool>(nameof(IsPlayingMontageInGroup), GroupName); }
        public ItemCharacterAnimationSet GetAnimationSet() { return Invoke<ItemCharacterAnimationSet>(nameof(GetAnimationSet)); }
        public float CalculateDirectionVertical(Vector TargetDirection, Rotator BaseRotation) { return Invoke<float>(nameof(CalculateDirectionVertical), TargetDirection, BaseRotation); }
    }
    public class PlayerFPAnimInstance : PlayerAnimInstance
    {
        public PlayerFPAnimInstance(nint addr) : base(addr) { }
        public Rotator WeaponRecoil { get { return this[nameof(WeaponRecoil)].As<Rotator>(); } set { this["WeaponRecoil"] = value; } }
        public float HeadBobScale { get { return this[nameof(HeadBobScale)].GetValue<float>(); } set { this[nameof(HeadBobScale)].SetValue<float>(value); } }
        public float WeaponSwayRecoverySpeed { get { return this[nameof(WeaponSwayRecoverySpeed)].GetValue<float>(); } set { this[nameof(WeaponSwayRecoverySpeed)].SetValue<float>(value); } }
        public float WeaponSwayAlphaRecoverySpeed { get { return this[nameof(WeaponSwayAlphaRecoverySpeed)].GetValue<float>(); } set { this[nameof(WeaponSwayAlphaRecoverySpeed)].SetValue<float>(value); } }
        public Rotator WeaponSwayAngle { get { return this[nameof(WeaponSwayAngle)].As<Rotator>(); } set { this["WeaponSwayAngle"] = value; } }
        public float WeaponSwayMaxAngle { get { return this[nameof(WeaponSwayMaxAngle)].GetValue<float>(); } set { this[nameof(WeaponSwayMaxAngle)].SetValue<float>(value); } }
        public Rotator CameraAntiSwayAngle { get { return this[nameof(CameraAntiSwayAngle)].As<Rotator>(); } set { this["CameraAntiSwayAngle"] = value; } }
        public float WeaponSwayAlpha { get { return this[nameof(WeaponSwayAlpha)].GetValue<float>(); } set { this[nameof(WeaponSwayAlpha)].SetValue<float>(value); } }
        public float WeaponSwayToApply { get { return this[nameof(WeaponSwayToApply)].GetValue<float>(); } set { this[nameof(WeaponSwayToApply)].SetValue<float>(value); } }
        public Vector CameraOffset { get { return this[nameof(CameraOffset)].As<Vector>(); } set { this["CameraOffset"] = value; } }
        public Vector NegativeCameraOffset { get { return this[nameof(NegativeCameraOffset)].As<Vector>(); } set { this["NegativeCameraOffset"] = value; } }
        public bool HeadOnlyMode { get { return this[nameof(HeadOnlyMode)].Flag; } set { this[nameof(HeadOnlyMode)].Flag = value; } }
        public Rotator HeadRotation { get { return this[nameof(HeadRotation)].As<Rotator>(); } set { this["HeadRotation"] = value; } }
        public AnimSequence FP_Idle { get { return this[nameof(FP_Idle)].As<AnimSequence>(); } set { this["FP_Idle"] = value; } }
        public AnimSequence FP_Walk { get { return this[nameof(FP_Walk)].As<AnimSequence>(); } set { this["FP_Walk"] = value; } }
        public AnimSequence FP_Sprint { get { return this[nameof(FP_Sprint)].As<AnimSequence>(); } set { this["FP_Sprint"] = value; } }
        public AnimSequence FP_JumpStart { get { return this[nameof(FP_JumpStart)].As<AnimSequence>(); } set { this["FP_JumpStart"] = value; } }
        public AnimSequence FP_JumpLoop { get { return this[nameof(FP_JumpLoop)].As<AnimSequence>(); } set { this["FP_JumpLoop"] = value; } }
        public AnimSequence FP_JumpLand { get { return this[nameof(FP_JumpLand)].As<AnimSequence>(); } set { this["FP_JumpLand"] = value; } }
        public AnimSequence FP_JumpLand_Aim { get { return this[nameof(FP_JumpLand_Aim)].As<AnimSequence>(); } set { this["FP_JumpLand_Aim"] = value; } }
        public AnimSequence FP_Downed { get { return this[nameof(FP_Downed)].As<AnimSequence>(); } set { this["FP_Downed"] = value; } }
    }
    public class PlayerTPAnimInstance : PlayerAnimInstance
    {
        public PlayerTPAnimInstance(nint addr) : base(addr) { }
        public float RigidBodyBlend { get { return this[nameof(RigidBodyBlend)].GetValue<float>(); } set { this[nameof(RigidBodyBlend)].SetValue<float>(value); } }
        public bool RigidBodyOn { get { return this[nameof(RigidBodyOn)].Flag; } set { this[nameof(RigidBodyOn)].Flag = value; } }
        public float UpperBodyBlend { get { return this[nameof(UpperBodyBlend)].GetValue<float>(); } set { this[nameof(UpperBodyBlend)].SetValue<float>(value); } }
        public float AimingValue { get { return this[nameof(AimingValue)].GetValue<float>(); } set { this[nameof(AimingValue)].SetValue<float>(value); } }
        public Rotator CounerMoveadjustmentAngleRotator { get { return this[nameof(CounerMoveadjustmentAngleRotator)].As<Rotator>(); } set { this["CounerMoveadjustmentAngleRotator"] = value; } }
        public bool FullBodyAnimActive { get { return this[nameof(FullBodyAnimActive)].Flag; } set { this[nameof(FullBodyAnimActive)].Flag = value; } }
        public float FullBodyBlendTime { get { return this[nameof(FullBodyBlendTime)].GetValue<float>(); } set { this[nameof(FullBodyBlendTime)].SetValue<float>(value); } }
        public float BodyTurnRecoverySpeed { get { return this[nameof(BodyTurnRecoverySpeed)].GetValue<float>(); } set { this[nameof(BodyTurnRecoverySpeed)].SetValue<float>(value); } }
        public float BodyTurnMaxAngle { get { return this[nameof(BodyTurnMaxAngle)].GetValue<float>(); } set { this[nameof(BodyTurnMaxAngle)].SetValue<float>(value); } }
        public float BodyTurnLerpEXP { get { return this[nameof(BodyTurnLerpEXP)].GetValue<float>(); } set { this[nameof(BodyTurnLerpEXP)].SetValue<float>(value); } }
        public float TurnAnimationDuration { get { return this[nameof(TurnAnimationDuration)].GetValue<float>(); } set { this[nameof(TurnAnimationDuration)].SetValue<float>(value); } }
        public bool bCaveLeechBiting { get { return this[nameof(bCaveLeechBiting)].Flag; } set { this[nameof(bCaveLeechBiting)].Flag = value; } }
        public float CaveLeechBiteReactDelay { get { return this[nameof(CaveLeechBiteReactDelay)].GetValue<float>(); } set { this[nameof(CaveLeechBiteReactDelay)].SetValue<float>(value); } }
        public bool IsResettingBodyTurn { get { return this[nameof(IsResettingBodyTurn)].Flag; } set { this[nameof(IsResettingBodyTurn)].Flag = value; } }
        public Rotator BodyTurn { get { return this[nameof(BodyTurn)].As<Rotator>(); } set { this["BodyTurn"] = value; } }
        public Rotator CounterBodyTurn { get { return this[nameof(CounterBodyTurn)].As<Rotator>(); } set { this["CounterBodyTurn"] = value; } }
        public bool TurningLeft { get { return this[nameof(TurningLeft)].Flag; } set { this[nameof(TurningLeft)].Flag = value; } }
        public bool TurningRight { get { return this[nameof(TurningRight)].Flag; } set { this[nameof(TurningRight)].Flag = value; } }
        public float TurnProgress { get { return this[nameof(TurnProgress)].GetValue<float>(); } set { this[nameof(TurnProgress)].SetValue<float>(value); } }
        public bool HasPickedUpItem { get { return this[nameof(HasPickedUpItem)].Flag; } set { this[nameof(HasPickedUpItem)].Flag = value; } }
        public bool IsLyingDownNoTransition { get { return this[nameof(IsLyingDownNoTransition)].Flag; } set { this[nameof(IsLyingDownNoTransition)].Flag = value; } }
        public int danceMove { get { return this[nameof(danceMove)].GetValue<int>(); } set { this[nameof(danceMove)].SetValue<int>(value); } }
        public AnimSequence DanceSequence { get { return this[nameof(DanceSequence)].As<AnimSequence>(); } set { this["DanceSequence"] = value; } }
        public bool isDancing { get { return this[nameof(isDancing)].Flag; } set { this[nameof(isDancing)].Flag = value; } }
        public float PickedUpItemBlend { get { return this[nameof(PickedUpItemBlend)].GetValue<float>(); } set { this[nameof(PickedUpItemBlend)].SetValue<float>(value); } }
        public float AttachedBodyTurnFactor { get { return this[nameof(AttachedBodyTurnFactor)].GetValue<float>(); } set { this[nameof(AttachedBodyTurnFactor)].SetValue<float>(value); } }
        public float AttachedHeadTurnFactor { get { return this[nameof(AttachedHeadTurnFactor)].GetValue<float>(); } set { this[nameof(AttachedHeadTurnFactor)].SetValue<float>(value); } }
        public Rotator AttachedBodyRotation { get { return this[nameof(AttachedBodyRotation)].As<Rotator>(); } set { this["AttachedBodyRotation"] = value; } }
        public Rotator AttachedHeadRotation { get { return this[nameof(AttachedHeadRotation)].As<Rotator>(); } set { this["AttachedHeadRotation"] = value; } }
        public BlendSpace1D TP_LookUpDown { get { return this[nameof(TP_LookUpDown)].As<BlendSpace1D>(); } set { this["TP_LookUpDown"] = value; } }
        public BlendSpace1D TP_LookUpDown_Aim { get { return this[nameof(TP_LookUpDown_Aim)].As<BlendSpace1D>(); } set { this["TP_LookUpDown_Aim"] = value; } }
        public BlendSpace1D A_TP_LookUpDown_Aim { get { return this[nameof(A_TP_LookUpDown_Aim)].As<BlendSpace1D>(); } set { this["A_TP_LookUpDown_Aim"] = value; } }
        public BlendSpace1D B_TP_LookUpDown_Aim { get { return this[nameof(B_TP_LookUpDown_Aim)].As<BlendSpace1D>(); } set { this["B_TP_LookUpDown_Aim"] = value; } }
        public AnimSequence TP_JumpLoop { get { return this[nameof(TP_JumpLoop)].As<AnimSequence>(); } set { this["TP_JumpLoop"] = value; } }
        public AnimSequence TP_JumpLoop_Aim { get { return this[nameof(TP_JumpLoop_Aim)].As<AnimSequence>(); } set { this["TP_JumpLoop_Aim"] = value; } }
        public AnimSequence TP_JumpStart { get { return this[nameof(TP_JumpStart)].As<AnimSequence>(); } set { this["TP_JumpStart"] = value; } }
        public AnimSequence TP_JumpStart_Aim { get { return this[nameof(TP_JumpStart_Aim)].As<AnimSequence>(); } set { this["TP_JumpStart_Aim"] = value; } }
        public AnimSequence TP_Sprint { get { return this[nameof(TP_Sprint)].As<AnimSequence>(); } set { this["TP_Sprint"] = value; } }
        public AnimSequence A_TP_Idle { get { return this[nameof(A_TP_Idle)].As<AnimSequence>(); } set { this["A_TP_Idle"] = value; } }
        public AnimSequence B_TP_Idle { get { return this[nameof(B_TP_Idle)].As<AnimSequence>(); } set { this["B_TP_Idle"] = value; } }
        public AnimSequence A_TP_Idle_Aim { get { return this[nameof(A_TP_Idle_Aim)].As<AnimSequence>(); } set { this["A_TP_Idle_Aim"] = value; } }
        public AnimSequence B_TP_Idle_Aim { get { return this[nameof(B_TP_Idle_Aim)].As<AnimSequence>(); } set { this["B_TP_Idle_Aim"] = value; } }
        public AnimSequence TP_LookForward { get { return this[nameof(TP_LookForward)].As<AnimSequence>(); } set { this["TP_LookForward"] = value; } }
        public AnimSequence A_TP_LookForward { get { return this[nameof(A_TP_LookForward)].As<AnimSequence>(); } set { this["A_TP_LookForward"] = value; } }
        public AnimSequence B_TP_LookForward { get { return this[nameof(B_TP_LookForward)].As<AnimSequence>(); } set { this["B_TP_LookForward"] = value; } }
        public AnimSequence A_TP_LookForward_Aim { get { return this[nameof(A_TP_LookForward_Aim)].As<AnimSequence>(); } set { this["A_TP_LookForward_Aim"] = value; } }
        public AnimSequence B_TP_LookForward_Aim { get { return this[nameof(B_TP_LookForward_Aim)].As<AnimSequence>(); } set { this["B_TP_LookForward_Aim"] = value; } }
        public AnimSequence A_TP_Walk_Forward { get { return this[nameof(A_TP_Walk_Forward)].As<AnimSequence>(); } set { this["A_TP_Walk_Forward"] = value; } }
        public AnimSequence B_TP_Walk_Forward { get { return this[nameof(B_TP_Walk_Forward)].As<AnimSequence>(); } set { this["B_TP_Walk_Forward"] = value; } }
        public AnimSequence A_TP_Run_Forward { get { return this[nameof(A_TP_Run_Forward)].As<AnimSequence>(); } set { this["A_TP_Run_Forward"] = value; } }
        public AnimSequence B_TP_Run_Forward { get { return this[nameof(B_TP_Run_Forward)].As<AnimSequence>(); } set { this["B_TP_Run_Forward"] = value; } }
        public AnimSequence A_TP_Walk_Forward_Aim { get { return this[nameof(A_TP_Walk_Forward_Aim)].As<AnimSequence>(); } set { this["A_TP_Walk_Forward_Aim"] = value; } }
        public AnimSequence B_TP_Walk_Forward_Aim { get { return this[nameof(B_TP_Walk_Forward_Aim)].As<AnimSequence>(); } set { this["B_TP_Walk_Forward_Aim"] = value; } }
        public AnimSequence A_TP_Run_Forward_Aim { get { return this[nameof(A_TP_Run_Forward_Aim)].As<AnimSequence>(); } set { this["A_TP_Run_Forward_Aim"] = value; } }
        public AnimSequence B_TP_Run_Forward_Aim { get { return this[nameof(B_TP_Run_Forward_Aim)].As<AnimSequence>(); } set { this["B_TP_Run_Forward_Aim"] = value; } }
        public AnimSequence A_TP_Walk_Right { get { return this[nameof(A_TP_Walk_Right)].As<AnimSequence>(); } set { this["A_TP_Walk_Right"] = value; } }
        public AnimSequence B_TP_Walk_Right { get { return this[nameof(B_TP_Walk_Right)].As<AnimSequence>(); } set { this["B_TP_Walk_Right"] = value; } }
        public AnimSequence A_TP_Run_Right { get { return this[nameof(A_TP_Run_Right)].As<AnimSequence>(); } set { this["A_TP_Run_Right"] = value; } }
        public AnimSequence B_TP_Run_Right { get { return this[nameof(B_TP_Run_Right)].As<AnimSequence>(); } set { this["B_TP_Run_Right"] = value; } }
        public AnimSequence A_TP_Walk_Right_Aim { get { return this[nameof(A_TP_Walk_Right_Aim)].As<AnimSequence>(); } set { this["A_TP_Walk_Right_Aim"] = value; } }
        public AnimSequence B_TP_Walk_Right_Aim { get { return this[nameof(B_TP_Walk_Right_Aim)].As<AnimSequence>(); } set { this["B_TP_Walk_Right_Aim"] = value; } }
        public AnimSequence A_TP_Run_Right_Aim { get { return this[nameof(A_TP_Run_Right_Aim)].As<AnimSequence>(); } set { this["A_TP_Run_Right_Aim"] = value; } }
        public AnimSequence B_TP_Run_Right_Aim { get { return this[nameof(B_TP_Run_Right_Aim)].As<AnimSequence>(); } set { this["B_TP_Run_Right_Aim"] = value; } }
        public AnimSequence A_TP_Walk_Left { get { return this[nameof(A_TP_Walk_Left)].As<AnimSequence>(); } set { this["A_TP_Walk_Left"] = value; } }
        public AnimSequence B_TP_Walk_Left { get { return this[nameof(B_TP_Walk_Left)].As<AnimSequence>(); } set { this["B_TP_Walk_Left"] = value; } }
        public AnimSequence A_TP_Run_Left { get { return this[nameof(A_TP_Run_Left)].As<AnimSequence>(); } set { this["A_TP_Run_Left"] = value; } }
        public AnimSequence B_TP_Run_Left { get { return this[nameof(B_TP_Run_Left)].As<AnimSequence>(); } set { this["B_TP_Run_Left"] = value; } }
        public AnimSequence A_TP_Walk_Left_Aim { get { return this[nameof(A_TP_Walk_Left_Aim)].As<AnimSequence>(); } set { this["A_TP_Walk_Left_Aim"] = value; } }
        public AnimSequence B_TP_Walk_Left_Aim { get { return this[nameof(B_TP_Walk_Left_Aim)].As<AnimSequence>(); } set { this["B_TP_Walk_Left_Aim"] = value; } }
        public AnimSequence A_TP_Run_Left_Aim { get { return this[nameof(A_TP_Run_Left_Aim)].As<AnimSequence>(); } set { this["A_TP_Run_Left_Aim"] = value; } }
        public AnimSequence B_TP_Run_Left_Aim { get { return this[nameof(B_TP_Run_Left_Aim)].As<AnimSequence>(); } set { this["B_TP_Run_Left_Aim"] = value; } }
        public AnimSequence A_TP_Walk_Back { get { return this[nameof(A_TP_Walk_Back)].As<AnimSequence>(); } set { this["A_TP_Walk_Back"] = value; } }
        public AnimSequence B_TP_Walk_Back { get { return this[nameof(B_TP_Walk_Back)].As<AnimSequence>(); } set { this["B_TP_Walk_Back"] = value; } }
        public AnimSequence A_TP_Run_Back { get { return this[nameof(A_TP_Run_Back)].As<AnimSequence>(); } set { this["A_TP_Run_Back"] = value; } }
        public AnimSequence B_TP_Run_Back { get { return this[nameof(B_TP_Run_Back)].As<AnimSequence>(); } set { this["B_TP_Run_Back"] = value; } }
        public AnimSequence A_TP_Walk_Back_Aim { get { return this[nameof(A_TP_Walk_Back_Aim)].As<AnimSequence>(); } set { this["A_TP_Walk_Back_Aim"] = value; } }
        public AnimSequence B_TP_Walk_Back_Aim { get { return this[nameof(B_TP_Walk_Back_Aim)].As<AnimSequence>(); } set { this["B_TP_Walk_Back_Aim"] = value; } }
        public AnimSequence A_TP_Run_Back_Aim { get { return this[nameof(A_TP_Run_Back_Aim)].As<AnimSequence>(); } set { this["A_TP_Run_Back_Aim"] = value; } }
        public AnimSequence B_TP_Run_Back_Aim { get { return this[nameof(B_TP_Run_Back_Aim)].As<AnimSequence>(); } set { this["B_TP_Run_Back_Aim"] = value; } }
        public AnimSequence TP_Revived { get { return this[nameof(TP_Revived)].As<AnimSequence>(); } set { this["TP_Revived"] = value; } }
        public AnimSequence TP_Downed { get { return this[nameof(TP_Downed)].As<AnimSequence>(); } set { this["TP_Downed"] = value; } }
        public AnimSequence TP_Downed_Loop { get { return this[nameof(TP_Downed_Loop)].As<AnimSequence>(); } set { this["TP_Downed_Loop"] = value; } }
        public void SetOverrideFullBody(bool overrideEnabled) { Invoke(nameof(SetOverrideFullBody), overrideEnabled); }
    }
    public class PlayerBufferComponent : ActorComponent
    {
        public PlayerBufferComponent(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public MeshComponent ManualMeshReference { get { return this[nameof(ManualMeshReference)].As<MeshComponent>(); } set { this["ManualMeshReference"] = value; } }
        public Object BufferParticleSocket { get { return this[nameof(BufferParticleSocket)]; } set { this[nameof(BufferParticleSocket)] = value; } }
        public ParticleSystem Particles { get { return this[nameof(Particles)].As<ParticleSystem>(); } set { this["Particles"] = value; } }
        public float ParticleTangentSize { get { return this[nameof(ParticleTangentSize)].GetValue<float>(); } set { this[nameof(ParticleTangentSize)].SetValue<float>(value); } }
        public Object OnBuffingChangedEvent { get { return this[nameof(OnBuffingChangedEvent)]; } set { this[nameof(OnBuffingChangedEvent)] = value; } }
        public float BuffRadius { get { return this[nameof(BuffRadius)].GetValue<float>(); } set { this[nameof(BuffRadius)].SetValue<float>(value); } }
        public int MaxBuffedTargets { get { return this[nameof(MaxBuffedTargets)].GetValue<int>(); } set { this[nameof(MaxBuffedTargets)].SetValue<int>(value); } }
        public int PushAmount { get { return this[nameof(PushAmount)].GetValue<int>(); } set { this[nameof(PushAmount)].SetValue<int>(value); } }
        public UArray<PlayerCharacter> BuffTargets { get { return new UArray<PlayerCharacter>(this[nameof(BuffTargets)].Address); } }
        public UArray<ParticleSystemComponent> ParticleInstances { get { return new UArray<ParticleSystemComponent>(this[nameof(ParticleInstances)].Address); } }
        public void SetBuffingEnabled(bool Enabled) { Invoke(nameof(SetBuffingEnabled), Enabled); }
        public void ReducePushAmount() { Invoke(nameof(ReducePushAmount)); }
        public void OnPawnDied(HealthComponentBase Health) { Invoke(nameof(OnPawnDied), Health); }
        public void OnOwnerDied(HealthComponentBase Health) { Invoke(nameof(OnOwnerDied), Health); }
    }
    public class PlayerCameraDrone : Pawn
    {
        public PlayerCameraDrone(nint addr) : base(addr) { }
        public Object OnMarkerPlaced { get { return this[nameof(OnMarkerPlaced)]; } set { this[nameof(OnMarkerPlaced)] = value; } }
        public PawnMovementComponent Movement { get { return this[nameof(Movement)].As<PawnMovementComponent>(); } set { this["Movement"] = value; } }
        public int MenuTab { get { return this[nameof(MenuTab)].GetValue<int>(); } set { this[nameof(MenuTab)].SetValue<int>(value); } }
        public bool SplineMeshIsVisible { get { return this[nameof(SplineMeshIsVisible)].Flag; } set { this[nameof(SplineMeshIsVisible)].Flag = value; } }
        public float SplineSpeed { get { return this[nameof(SplineSpeed)].GetValue<float>(); } set { this[nameof(SplineSpeed)].SetValue<float>(value); } }
        public float MouseSensitivity { get { return this[nameof(MouseSensitivity)].GetValue<float>(); } set { this[nameof(MouseSensitivity)].SetValue<float>(value); } }
        public float CameraRoll { get { return this[nameof(CameraRoll)].GetValue<float>(); } set { this[nameof(CameraRoll)].SetValue<float>(value); } }
        public bool CameraDoesShake { get { return this[nameof(CameraDoesShake)].Flag; } set { this[nameof(CameraDoesShake)].Flag = value; } }
        public bool IsFollowingPlayerRotation { get { return this[nameof(IsFollowingPlayerRotation)].Flag; } set { this[nameof(IsFollowingPlayerRotation)].Flag = value; } }
        public Vector FollowPositionOffset { get { return this[nameof(FollowPositionOffset)].As<Vector>(); } set { this["FollowPositionOffset"] = value; } }
        public bool UseFreeRotation { get { return this[nameof(UseFreeRotation)].Flag; } set { this[nameof(UseFreeRotation)].Flag = value; } }
        public bool UseDOF { get { return this[nameof(UseDOF)].Flag; } set { this[nameof(UseDOF)].Flag = value; } }
        public Object VanitySpawnable { get { return this[nameof(VanitySpawnable)]; } set { this[nameof(VanitySpawnable)] = value; } }
        public Object VanityWeaponSpawnable { get { return this[nameof(VanityWeaponSpawnable)]; } set { this[nameof(VanityWeaponSpawnable)] = value; } }
        public UArray<Object> VanityCharacterAnimations { get { return new UArray<Object>(this[nameof(VanityCharacterAnimations)].Address); } }
        public int SelectedVanityClassIndex { get { return this[nameof(SelectedVanityClassIndex)].GetValue<int>(); } set { this[nameof(SelectedVanityClassIndex)].SetValue<int>(value); } }
        public int SelectedVanityAnimation { get { return this[nameof(SelectedVanityAnimation)].GetValue<int>(); } set { this[nameof(SelectedVanityAnimation)].SetValue<int>(value); } }
        public UArray<VanityCharacter> VanityCharacterInstances { get { return new UArray<VanityCharacter>(this[nameof(VanityCharacterInstances)].Address); } }
        public UArray<VanityCharacter> StaticVanityCharacterInstances { get { return new UArray<VanityCharacter>(this[nameof(StaticVanityCharacterInstances)].Address); } }
        public Object DroneMarker { get { return this[nameof(DroneMarker)]; } set { this[nameof(DroneMarker)] = value; } }
        public LaserPointerMarker ActiveMarker { get { return this[nameof(ActiveMarker)].As<LaserPointerMarker>(); } set { this["ActiveMarker"] = value; } }
        public Object Flare { get { return this[nameof(Flare)]; } set { this[nameof(Flare)] = value; } }
        public UArray<Actor> FlareInstances { get { return new UArray<Actor>(this[nameof(FlareInstances)].Address); } }
        public Object BounceFlare { get { return this[nameof(BounceFlare)]; } set { this[nameof(BounceFlare)] = value; } }
        public UArray<Actor> BounceFlareInstances { get { return new UArray<Actor>(this[nameof(BounceFlareInstances)].Address); } }
        public Actor SplineInstance { get { return this[nameof(SplineInstance)].As<Actor>(); } set { this["SplineInstance"] = value; } }
        public UArray<Actor> SplineMeshInstances { get { return new UArray<Actor>(this[nameof(SplineMeshInstances)].Address); } }
        public Object Spline { get { return this[nameof(Spline)]; } set { this[nameof(Spline)] = value; } }
        public Object SplineMesh { get { return this[nameof(SplineMesh)]; } set { this[nameof(SplineMesh)] = value; } }
        public Actor PlayerFollowed { get { return this[nameof(PlayerFollowed)].As<Actor>(); } set { this["PlayerFollowed"] = value; } }
        public Actor WeaponTrackActor { get { return this[nameof(WeaponTrackActor)].As<Actor>(); } set { this["WeaponTrackActor"] = value; } }
        public bool ToggleSplineMeshVisibility() { return Invoke<bool>(nameof(ToggleSplineMeshVisibility)); }
        public void SetRotationalPivotToPlayer() { Invoke(nameof(SetRotationalPivotToPlayer)); }
        public void SetFlareLightSettings(float Intensity, float range, float Color) { Invoke(nameof(SetFlareLightSettings), Intensity, range, Color); }
        public bool SetCameraShakeAmount(float Value) { return Invoke<bool>(nameof(SetCameraShakeAmount), Value); }
        public void SetBounceFlareLightSettings(float Intensity, float range, float Color) { Invoke(nameof(SetBounceFlareLightSettings), Intensity, range, Color); }
        public void SaveLightConfig() { Invoke(nameof(SaveLightConfig)); }
        public void ResetFollowVariables() { Invoke(nameof(ResetFollowVariables)); }
        public void ResetAllLights() { Invoke(nameof(ResetAllLights)); }
        public void OnFlareHit(PrimitiveComponent HitComponent, Actor OtherActor, PrimitiveComponent OtherComponent, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(OnFlareHit), HitComponent, OtherActor, OtherComponent, NormalImpulse, Hit); }
        public void LoadLightConfig() { Invoke(nameof(LoadLightConfig)); }
        public Vector GetFlareLightSettings() { return Invoke<Vector>(nameof(GetFlareLightSettings)); }
        public Vector GetBounceFlareLightSettings() { return Invoke<Vector>(nameof(GetBounceFlareLightSettings)); }
        public void CreateHUD() { Invoke(nameof(CreateHUD)); }
        public void ClearFocusPoint() { Invoke(nameof(ClearFocusPoint)); }
        public void All_BeginCountdown() { Invoke(nameof(All_BeginCountdown)); }
    }
    public class PlayerCharacter : Character
    {
        public PlayerCharacter(nint addr) : base(addr) { }
        public Object OnStartedUsingItem { get { return this[nameof(OnStartedUsingItem)]; } set { this[nameof(OnStartedUsingItem)] = value; } }
        public Object OnStoppedUsingItem { get { return this[nameof(OnStoppedUsingItem)]; } set { this[nameof(OnStoppedUsingItem)] = value; } }
        public Object OnFirePressed { get { return this[nameof(OnFirePressed)]; } set { this[nameof(OnFirePressed)] = value; } }
        public Object OnFireReleased { get { return this[nameof(OnFireReleased)]; } set { this[nameof(OnFireReleased)] = value; } }
        public Object OnGrenadePressed { get { return this[nameof(OnGrenadePressed)]; } set { this[nameof(OnGrenadePressed)] = value; } }
        public Object OnPerkInitialized { get { return this[nameof(OnPerkInitialized)]; } set { this[nameof(OnPerkInitialized)] = value; } }
        public Object OnInstantRevivePossibleEvent { get { return this[nameof(OnInstantRevivePossibleEvent)]; } set { this[nameof(OnInstantRevivePossibleEvent)] = value; } }
        public Object OnGenericAnimNotify { get { return this[nameof(OnGenericAnimNotify)]; } set { this[nameof(OnGenericAnimNotify)] = value; } }
        public HeightenedSenseComponent HeightenedSenseComponent { get { return this[nameof(HeightenedSenseComponent)].As<HeightenedSenseComponent>(); } set { this["HeightenedSenseComponent"] = value; } }
        public Object OnCollectedEverything { get { return this[nameof(OnCollectedEverything)]; } set { this[nameof(OnCollectedEverything)] = value; } }
        public Object OnCollectedSchematic { get { return this[nameof(OnCollectedSchematic)]; } set { this[nameof(OnCollectedSchematic)] = value; } }
        public Object OnCollectedSkin { get { return this[nameof(OnCollectedSkin)]; } set { this[nameof(OnCollectedSkin)] = value; } }
        public Object OnCollectedDrink { get { return this[nameof(OnCollectedDrink)]; } set { this[nameof(OnCollectedDrink)] = value; } }
        public Object OnCollectedVictoryPose { get { return this[nameof(OnCollectedVictoryPose)]; } set { this[nameof(OnCollectedVictoryPose)] = value; } }
        public Object OnCollectedPickaxePart { get { return this[nameof(OnCollectedPickaxePart)]; } set { this[nameof(OnCollectedPickaxePart)] = value; } }
        public Object OnCollectedVanityItem { get { return this[nameof(OnCollectedVanityItem)]; } set { this[nameof(OnCollectedVanityItem)] = value; } }
        public Object OnCameraModeChanged { get { return this[nameof(OnCameraModeChanged)]; } set { this[nameof(OnCameraModeChanged)] = value; } }
        public Object OnDownCameraTargetChanged { get { return this[nameof(OnDownCameraTargetChanged)]; } set { this[nameof(OnDownCameraTargetChanged)] = value; } }
        public Object OnActionHoldProgress { get { return this[nameof(OnActionHoldProgress)]; } set { this[nameof(OnActionHoldProgress)] = value; } }
        public Object OnThrowCarriableProgress { get { return this[nameof(OnThrowCarriableProgress)]; } set { this[nameof(OnThrowCarriableProgress)] = value; } }
        public Object OnJumpPressed { get { return this[nameof(OnJumpPressed)]; } set { this[nameof(OnJumpPressed)] = value; } }
        public Object OnJumpReleased { get { return this[nameof(OnJumpReleased)]; } set { this[nameof(OnJumpReleased)] = value; } }
        public Object OnSecondaryFirePressed { get { return this[nameof(OnSecondaryFirePressed)]; } set { this[nameof(OnSecondaryFirePressed)] = value; } }
        public Object OnSecondaryFireReleased { get { return this[nameof(OnSecondaryFireReleased)]; } set { this[nameof(OnSecondaryFireReleased)] = value; } }
        public Object OnManualMiningBegin { get { return this[nameof(OnManualMiningBegin)]; } set { this[nameof(OnManualMiningBegin)] = value; } }
        public Object OnManualMiningEnd { get { return this[nameof(OnManualMiningEnd)]; } set { this[nameof(OnManualMiningEnd)] = value; } }
        public Object OnLaserPointerPressed { get { return this[nameof(OnLaserPointerPressed)]; } set { this[nameof(OnLaserPointerPressed)] = value; } }
        public Object OnLaserPointerReleased { get { return this[nameof(OnLaserPointerReleased)]; } set { this[nameof(OnLaserPointerReleased)] = value; } }
        public Object OnTerrainScannerPressed { get { return this[nameof(OnTerrainScannerPressed)]; } set { this[nameof(OnTerrainScannerPressed)] = value; } }
        public Object OnTerrainScannerReleased { get { return this[nameof(OnTerrainScannerReleased)]; } set { this[nameof(OnTerrainScannerReleased)] = value; } }
        public Object OnFlareThrown { get { return this[nameof(OnFlareThrown)]; } set { this[nameof(OnFlareThrown)] = value; } }
        public Object OnUpdateMeshes { get { return this[nameof(OnUpdateMeshes)]; } set { this[nameof(OnUpdateMeshes)] = value; } }
        public Object OnOpenChat { get { return this[nameof(OnOpenChat)]; } set { this[nameof(OnOpenChat)] = value; } }
        public Object OnAcceptInvite { get { return this[nameof(OnAcceptInvite)]; } set { this[nameof(OnAcceptInvite)] = value; } }
        public Object OnRejectInvite { get { return this[nameof(OnRejectInvite)]; } set { this[nameof(OnRejectInvite)] = value; } }
        public Object OnIgnoreInvite { get { return this[nameof(OnIgnoreInvite)]; } set { this[nameof(OnIgnoreInvite)] = value; } }
        public Object OnToggleMapTool { get { return this[nameof(OnToggleMapTool)]; } set { this[nameof(OnToggleMapTool)] = value; } }
        public Object OnToggleScanTool { get { return this[nameof(OnToggleScanTool)]; } set { this[nameof(OnToggleScanTool)] = value; } }
        public Object OnDepthChanged { get { return this[nameof(OnDepthChanged)]; } set { this[nameof(OnDepthChanged)] = value; } }
        public Object OnCharacterStateChanged { get { return this[nameof(OnCharacterStateChanged)]; } set { this[nameof(OnCharacterStateChanged)] = value; } }
        public Object OnCharacterDeathChange { get { return this[nameof(OnCharacterDeathChange)]; } set { this[nameof(OnCharacterDeathChange)] = value; } }
        public Object OnDamagedEnemy { get { return this[nameof(OnDamagedEnemy)]; } set { this[nameof(OnDamagedEnemy)] = value; } }
        public Object OnLaserPointerEvent { get { return this[nameof(OnLaserPointerEvent)]; } set { this[nameof(OnLaserPointerEvent)] = value; } }
        public Object OnSecondaryLaserPointerEvent { get { return this[nameof(OnSecondaryLaserPointerEvent)]; } set { this[nameof(OnSecondaryLaserPointerEvent)] = value; } }
        public Object OnSaluteEvent { get { return this[nameof(OnSaluteEvent)]; } set { this[nameof(OnSaluteEvent)] = value; } }
        public Object OnPlayerShout { get { return this[nameof(OnPlayerShout)]; } set { this[nameof(OnPlayerShout)] = value; } }
        public Object OnBoscoSalute { get { return this[nameof(OnBoscoSalute)]; } set { this[nameof(OnBoscoSalute)] = value; } }
        public Object OnRevivedEvent { get { return this[nameof(OnRevivedEvent)]; } set { this[nameof(OnRevivedEvent)] = value; } }
        public Object OnReviveCallEvent { get { return this[nameof(OnReviveCallEvent)]; } set { this[nameof(OnReviveCallEvent)] = value; } }
        public Object OnRevivedOtherCharacter { get { return this[nameof(OnRevivedOtherCharacter)]; } set { this[nameof(OnRevivedOtherCharacter)] = value; } }
        public Object OnHeadlightOnChanged { get { return this[nameof(OnHeadlightOnChanged)]; } set { this[nameof(OnHeadlightOnChanged)] = value; } }
        public Object OnCallDonkey { get { return this[nameof(OnCallDonkey)]; } set { this[nameof(OnCallDonkey)] = value; } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public DialogDataAsset AttentionShoutOverride { get { return this[nameof(AttentionShoutOverride)].As<DialogDataAsset>(); } set { this["AttentionShoutOverride"] = value; } }
        public Object JetBootsComponentSpawnable { get { return this[nameof(JetBootsComponentSpawnable)]; } set { this[nameof(JetBootsComponentSpawnable)] = value; } }
        public Object JetBootsComponentMK2Spawnable { get { return this[nameof(JetBootsComponentMK2Spawnable)]; } set { this[nameof(JetBootsComponentMK2Spawnable)] = value; } }
        public ZipLineStateComponent ZipLineStateComponent { get { return this[nameof(ZipLineStateComponent)].As<ZipLineStateComponent>(); } set { this["ZipLineStateComponent"] = value; } }
        public UArray<Object> EscapableGrabberEnemies { get { return new UArray<Object>(this[nameof(EscapableGrabberEnemies)].Address); } }
        public Object OnKilledGrabber { get { return this[nameof(OnKilledGrabber)]; } set { this[nameof(OnKilledGrabber)] = value; } }
        public Object OnPerkActivationTimerFinished { get { return this[nameof(OnPerkActivationTimerFinished)]; } set { this[nameof(OnPerkActivationTimerFinished)] = value; } }
        public PerkHUDActivationWidget BoundPerkActivationW { get { return this[nameof(BoundPerkActivationW)].As<PerkHUDActivationWidget>(); } set { this["BoundPerkActivationW"] = value; } }
        public float PerkActivationTimer { get { return this[nameof(PerkActivationTimer)].GetValue<float>(); } set { this[nameof(PerkActivationTimer)].SetValue<float>(value); } }
        public Object OnCanEscapeGrabberChanged { get { return this[nameof(OnCanEscapeGrabberChanged)]; } set { this[nameof(OnCanEscapeGrabberChanged)] = value; } }
        public Object GrabbedByClass { get { return this[nameof(GrabbedByClass)]; } set { this[nameof(GrabbedByClass)] = value; } }
        public Object OnCoolDownProgress { get { return this[nameof(OnCoolDownProgress)]; } set { this[nameof(OnCoolDownProgress)] = value; } }
        public bool bIsBeingBittenByCaveLeech { get { return this[nameof(bIsBeingBittenByCaveLeech)].Flag; } set { this[nameof(bIsBeingBittenByCaveLeech)].Flag = value; } }
        public WidgetInteractionComponent WidgetInteraction { get { return this[nameof(WidgetInteraction)].As<WidgetInteractionComponent>(); } set { this["WidgetInteraction"] = value; } }
        public UArray<PlatformComponent> PlatformComponentClasses { get { return new UArray<PlatformComponent>(this[nameof(PlatformComponentClasses)].Address); } }
        public DownCameraSettings DownCameraSettings { get { return this[nameof(DownCameraSettings)].As<DownCameraSettings>(); } set { this["DownCameraSettings"] = value; } }
        public UArray<Object> ActiveShieldGenerators { get { return new UArray<Object>(this[nameof(ActiveShieldGenerators)].Address); } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public Vector EstimatedVelocity { get { return this[nameof(EstimatedVelocity)].As<Vector>(); } set { this["EstimatedVelocity"] = value; } }
        public HoldButton FlareHeadlightButton { get { return this[nameof(FlareHeadlightButton)].As<HoldButton>(); } set { this["FlareHeadlightButton"] = value; } }
        public HoldButton CycleItemButton { get { return this[nameof(CycleItemButton)].As<HoldButton>(); } set { this["CycleItemButton"] = value; } }
        public HoldButton ToggleHUDButton { get { return this[nameof(ToggleHUDButton)].As<HoldButton>(); } set { this["ToggleHUDButton"] = value; } }
        public float EquipLaserpointerHoldDuration { get { return this[nameof(EquipLaserpointerHoldDuration)].GetValue<float>(); } set { this[nameof(EquipLaserpointerHoldDuration)].SetValue<float>(value); } }
        public bool IsPressingMovementInputKey { get { return this[nameof(IsPressingMovementInputKey)].Flag; } set { this[nameof(IsPressingMovementInputKey)].Flag = value; } }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
        public Object TutorialManagerType { get { return this[nameof(TutorialManagerType)]; } set { this[nameof(TutorialManagerType)] = value; } }
        public Object TutorialManagerSpacerig { get { return this[nameof(TutorialManagerSpacerig)]; } set { this[nameof(TutorialManagerSpacerig)] = value; } }
        public SkeletalMeshComponent FPMesh { get { return this[nameof(FPMesh)].As<SkeletalMeshComponent>(); } set { this["FPMesh"] = value; } }
        public CameraComponent FirstPersonCamera { get { return this[nameof(FirstPersonCamera)].As<CameraComponent>(); } set { this["FirstPersonCamera"] = value; } }
        public SceneComponent FirstPersonRoot { get { return this[nameof(FirstPersonRoot)].As<SceneComponent>(); } set { this["FirstPersonRoot"] = value; } }
        public ActorTrackingComponent ActorTracking { get { return this[nameof(ActorTracking)].As<ActorTrackingComponent>(); } set { this["ActorTracking"] = value; } }
        public CharacterIntoxicationComponent IntoxicationComponent { get { return this[nameof(IntoxicationComponent)].As<CharacterIntoxicationComponent>(); } set { this["IntoxicationComponent"] = value; } }
        public MissionStatsCollector MissionStatsCollector { get { return this[nameof(MissionStatsCollector)].As<MissionStatsCollector>(); } set { this["MissionStatsCollector"] = value; } }
        public SpringArmComponent ThirdPersonSpringArm { get { return this[nameof(ThirdPersonSpringArm)].As<SpringArmComponent>(); } set { this["ThirdPersonSpringArm"] = value; } }
        public CameraComponent ThirdPersonCamera { get { return this[nameof(ThirdPersonCamera)].As<CameraComponent>(); } set { this["ThirdPersonCamera"] = value; } }
        public PointLightComponent ThirdPersonLight { get { return this[nameof(ThirdPersonLight)].As<PointLightComponent>(); } set { this["ThirdPersonLight"] = value; } }
        public SpringArmComponent FollowSpringArm { get { return this[nameof(FollowSpringArm)].As<SpringArmComponent>(); } set { this["FollowSpringArm"] = value; } }
        public CameraComponent FollowCamera { get { return this[nameof(FollowCamera)].As<CameraComponent>(); } set { this["FollowCamera"] = value; } }
        public CameraComponent DownCamera { get { return this[nameof(DownCamera)].As<CameraComponent>(); } set { this["DownCamera"] = value; } }
        public CharacterCameraController CameraController { get { return this[nameof(CameraController)].As<CharacterCameraController>(); } set { this["CameraController"] = value; } }
        public PlayerHealthComponent HealthComponent { get { return this[nameof(HealthComponent)].As<PlayerHealthComponent>(); } set { this["HealthComponent"] = value; } }
        public CharacterSightComponent SightComponent { get { return this[nameof(SightComponent)].As<CharacterSightComponent>(); } set { this["SightComponent"] = value; } }
        public InventoryComponent InventoryComponent { get { return this[nameof(InventoryComponent)].As<InventoryComponent>(); } set { this["InventoryComponent"] = value; } }
        public CharacterUseComponent UseComponentNew { get { return this[nameof(UseComponentNew)].As<CharacterUseComponent>(); } set { this["UseComponentNew"] = value; } }
        public SingleUsableComponent UsableComponent { get { return this[nameof(UsableComponent)].As<SingleUsableComponent>(); } set { this["UsableComponent"] = value; } }
        public OutlineComponent OutlineComponent { get { return this[nameof(OutlineComponent)].As<OutlineComponent>(); } set { this["OutlineComponent"] = value; } }
        public CharacterRecoilComponent RecoilComponent { get { return this[nameof(RecoilComponent)].As<CharacterRecoilComponent>(); } set { this["RecoilComponent"] = value; } }
        public StatusEffectsComponent StatusEffectsComponent { get { return this[nameof(StatusEffectsComponent)].As<StatusEffectsComponent>(); } set { this["StatusEffectsComponent"] = value; } }
        public PawnStatsComponent PawnStatsComponent { get { return this[nameof(PawnStatsComponent)].As<PawnStatsComponent>(); } set { this["PawnStatsComponent"] = value; } }
        public PlayerAfflictionComponent PawnAfflictionComponent { get { return this[nameof(PawnAfflictionComponent)].As<PlayerAfflictionComponent>(); } set { this["PawnAfflictionComponent"] = value; } }
        public PlayerInfoComponent PlayerInfoComponent { get { return this[nameof(PlayerInfoComponent)].As<PlayerInfoComponent>(); } set { this["PlayerInfoComponent"] = value; } }
        public PlayerAttackPositionComponent AttackerPositioningComponent { get { return this[nameof(AttackerPositioningComponent)].As<PlayerAttackPositionComponent>(); } set { this["AttackerPositioningComponent"] = value; } }
        public CommunicationComponent CommunicationComponent { get { return this[nameof(CommunicationComponent)].As<CommunicationComponent>(); } set { this["CommunicationComponent"] = value; } }
        public PlayerTemperatureComponent TemperatureComponent { get { return this[nameof(TemperatureComponent)].As<PlayerTemperatureComponent>(); } set { this["TemperatureComponent"] = value; } }
        public PlayerInfectionComponent InfectionComponent { get { return this[nameof(InfectionComponent)].As<PlayerInfectionComponent>(); } set { this["InfectionComponent"] = value; } }
        public PlayerReactiveTerrainTrackerComponent ReactiveTerrainTracker { get { return this[nameof(ReactiveTerrainTracker)].As<PlayerReactiveTerrainTrackerComponent>(); } set { this["ReactiveTerrainTracker"] = value; } }
        public InstantUsable TrackGrindUsableComponent { get { return this[nameof(TrackGrindUsableComponent)].As<InstantUsable>(); } set { this["TrackGrindUsableComponent"] = value; } }
        public float RunningSpeed { get { return this[nameof(RunningSpeed)].GetValue<float>(); } set { this[nameof(RunningSpeed)].SetValue<float>(value); } }
        public float RunBoost { get { return this[nameof(RunBoost)].GetValue<float>(); } set { this[nameof(RunBoost)].SetValue<float>(value); } }
        public float RunBoostChargeTime { get { return this[nameof(RunBoostChargeTime)].GetValue<float>(); } set { this[nameof(RunBoostChargeTime)].SetValue<float>(value); } }
        public SoundCue RunBoostActivationSound { get { return this[nameof(RunBoostActivationSound)].As<SoundCue>(); } set { this["RunBoostActivationSound"] = value; } }
        public ParticleSystem RunBoostParticles { get { return this[nameof(RunBoostParticles)].As<ParticleSystem>(); } set { this["RunBoostParticles"] = value; } }
        public PawnAffliction RunBoostAffliction { get { return this[nameof(RunBoostAffliction)].As<PawnAffliction>(); } set { this["RunBoostAffliction"] = value; } }
        public PhysicsAsset HangingPhysicsAsset { get { return this[nameof(HangingPhysicsAsset)].As<PhysicsAsset>(); } set { this["HangingPhysicsAsset"] = value; } }
        public float HangingSimulationBlend { get { return this[nameof(HangingSimulationBlend)].GetValue<float>(); } set { this[nameof(HangingSimulationBlend)].SetValue<float>(value); } }
        public bool IsPlayableCharacter { get { return this[nameof(IsPlayableCharacter)].Flag; } set { this[nameof(IsPlayableCharacter)].Flag = value; } }
        public AudioComponent SprintSoundComponent { get { return this[nameof(SprintSoundComponent)].As<AudioComponent>(); } set { this["SprintSoundComponent"] = value; } }
        public SoundCue SpringSound { get { return this[nameof(SpringSound)].As<SoundCue>(); } set { this["SpringSound"] = value; } }
        public AnalogAimSettings AimSettings { get { return this[nameof(AimSettings)].As<AnalogAimSettings>(); } set { this["AimSettings"] = value; } }
        public float DownedCameraMinPitch { get { return this[nameof(DownedCameraMinPitch)].GetValue<float>(); } set { this[nameof(DownedCameraMinPitch)].SetValue<float>(value); } }
        public float DownedCameraMaxPitch { get { return this[nameof(DownedCameraMaxPitch)].GetValue<float>(); } set { this[nameof(DownedCameraMaxPitch)].SetValue<float>(value); } }
        public float TurnToFaceScannerAngularSpeed { get { return this[nameof(TurnToFaceScannerAngularSpeed)].GetValue<float>(); } set { this[nameof(TurnToFaceScannerAngularSpeed)].SetValue<float>(value); } }
        public float Turn180Time { get { return this[nameof(Turn180Time)].GetValue<float>(); } set { this[nameof(Turn180Time)].SetValue<float>(value); } }
        public float CarryingMovementSpeedPenalty { get { return this[nameof(CarryingMovementSpeedPenalty)].GetValue<float>(); } set { this[nameof(CarryingMovementSpeedPenalty)].SetValue<float>(value); } }
        public float CarryingMaxFallVelocity { get { return this[nameof(CarryingMaxFallVelocity)].GetValue<float>(); } set { this[nameof(CarryingMaxFallVelocity)].SetValue<float>(value); } }
        public float MaxThrowProgress { get { return this[nameof(MaxThrowProgress)].GetValue<float>(); } set { this[nameof(MaxThrowProgress)].SetValue<float>(value); } }
        public float MaxThrowHoldDuration { get { return this[nameof(MaxThrowHoldDuration)].GetValue<float>(); } set { this[nameof(MaxThrowHoldDuration)].SetValue<float>(value); } }
        public float CarryingThrowMinForce { get { return this[nameof(CarryingThrowMinForce)].GetValue<float>(); } set { this[nameof(CarryingThrowMinForce)].SetValue<float>(value); } }
        public float CarryingThrowMaxForce { get { return this[nameof(CarryingThrowMaxForce)].GetValue<float>(); } set { this[nameof(CarryingThrowMaxForce)].SetValue<float>(value); } }
        public float PlayerVelocityToThrowFactor { get { return this[nameof(PlayerVelocityToThrowFactor)].GetValue<float>(); } set { this[nameof(PlayerVelocityToThrowFactor)].SetValue<float>(value); } }
        public Object CarryingThrowingStatusEffect { get { return this[nameof(CarryingThrowingStatusEffect)]; } set { this[nameof(CarryingThrowingStatusEffect)] = value; } }
        public float ThrowCarriableProgress { get { return this[nameof(ThrowCarriableProgress)].GetValue<float>(); } set { this[nameof(ThrowCarriableProgress)].SetValue<float>(value); } }
        public Object CharacterStates { get { return this[nameof(CharacterStates)]; } set { this[nameof(CharacterStates)] = value; } }
        public Object TutorialManager { get { return this[nameof(TutorialManager)]; } set { this[nameof(TutorialManager)] = value; } }
        public CharacterStateComponent ActiveCharacterState { get { return this[nameof(ActiveCharacterState)].As<CharacterStateComponent>(); } set { this["ActiveCharacterState"] = value; } }
        public bool IsInDropPod { get { return this[nameof(IsInDropPod)].Flag; } set { this[nameof(IsInDropPod)].Flag = value; } }
        public bool IsInEscapePod { get { return this[nameof(IsInEscapePod)].Flag; } set { this[nameof(IsInEscapePod)].Flag = value; } }
        public float ButtonMemoryDuration { get { return this[nameof(ButtonMemoryDuration)].GetValue<float>(); } set { this[nameof(ButtonMemoryDuration)].SetValue<float>(value); } }
        public bool IsRunning { get { return this[nameof(IsRunning)].Flag; } set { this[nameof(IsRunning)].Flag = value; } }
        public bool CanDash { get { return this[nameof(CanDash)].Flag; } set { this[nameof(CanDash)].Flag = value; } }
        public float DashInputWindow { get { return this[nameof(DashInputWindow)].GetValue<float>(); } set { this[nameof(DashInputWindow)].SetValue<float>(value); } }
        public float DashFowardMovementMinRequirement { get { return this[nameof(DashFowardMovementMinRequirement)].GetValue<float>(); } set { this[nameof(DashFowardMovementMinRequirement)].SetValue<float>(value); } }
        public float DashRightMovementMaxRequirement { get { return this[nameof(DashRightMovementMaxRequirement)].GetValue<float>(); } set { this[nameof(DashRightMovementMaxRequirement)].SetValue<float>(value); } }
        public float DashControllerMinValueRequired { get { return this[nameof(DashControllerMinValueRequired)].GetValue<float>(); } set { this[nameof(DashControllerMinValueRequired)].SetValue<float>(value); } }
        public float DashCooldown { get { return this[nameof(DashCooldown)].GetValue<float>(); } set { this[nameof(DashCooldown)].SetValue<float>(value); } }
        public Object DashStatusEffect { get { return this[nameof(DashStatusEffect)]; } set { this[nameof(DashStatusEffect)] = value; } }
        public float ForwardInput { get { return this[nameof(ForwardInput)].GetValue<float>(); } set { this[nameof(ForwardInput)].SetValue<float>(value); } }
        public float RightInput { get { return this[nameof(RightInput)].GetValue<float>(); } set { this[nameof(RightInput)].SetValue<float>(value); } }
        public float ControllerForwardInput { get { return this[nameof(ControllerForwardInput)].GetValue<float>(); } set { this[nameof(ControllerForwardInput)].SetValue<float>(value); } }
        public float ControllerRightInput { get { return this[nameof(ControllerRightInput)].GetValue<float>(); } set { this[nameof(ControllerRightInput)].SetValue<float>(value); } }
        public float StoppedRunningTime { get { return this[nameof(StoppedRunningTime)].GetValue<float>(); } set { this[nameof(StoppedRunningTime)].SetValue<float>(value); } }
        public float ShoutPressedTime { get { return this[nameof(ShoutPressedTime)].GetValue<float>(); } set { this[nameof(ShoutPressedTime)].SetValue<float>(value); } }
        public bool bIsUsingItemPressed { get { return this[nameof(bIsUsingItemPressed)].Flag; } set { this[nameof(bIsUsingItemPressed)].Flag = value; } }
        public bool bIsUsingPressed { get { return this[nameof(bIsUsingPressed)].Flag; } set { this[nameof(bIsUsingPressed)].Flag = value; } }
        public float UsingDelay { get { return this[nameof(UsingDelay)].GetValue<float>(); } set { this[nameof(UsingDelay)].SetValue<float>(value); } }
        public bool HeadLightOn { get { return this[nameof(HeadLightOn)].Flag; } set { this[nameof(HeadLightOn)].Flag = value; } }
        public bool isUsing { get { return this[nameof(isUsing)].Flag; } set { this[nameof(isUsing)].Flag = value; } }
        public float JumpPressedTime { get { return this[nameof(JumpPressedTime)].GetValue<float>(); } set { this[nameof(JumpPressedTime)].SetValue<float>(value); } }
        public bool CanMove { get { return this[nameof(CanMove)].Flag; } set { this[nameof(CanMove)].Flag = value; } }
        public bool CanAim { get { return this[nameof(CanAim)].Flag; } set { this[nameof(CanAim)].Flag = value; } }
        public bool CanUseItem { get { return this[nameof(CanUseItem)].Flag; } set { this[nameof(CanUseItem)].Flag = value; } }
        public bool CanUseLaserpointer { get { return this[nameof(CanUseLaserpointer)].Flag; } set { this[nameof(CanUseLaserpointer)].Flag = value; } }
        public bool CanChangeItems { get { return this[nameof(CanChangeItems)].Flag; } set { this[nameof(CanChangeItems)].Flag = value; } }
        public bool CanMine { get { return this[nameof(CanMine)].Flag; } set { this[nameof(CanMine)].Flag = value; } }
        public bool CanSalute { get { return this[nameof(CanSalute)].Flag; } set { this[nameof(CanSalute)].Flag = value; } }
        public bool IsStandingDown { get { return this[nameof(IsStandingDown)].Flag; } set { this[nameof(IsStandingDown)].Flag = value; } }
        public bool InDanceRange { get { return this[nameof(InDanceRange)].Flag; } set { this[nameof(InDanceRange)].Flag = value; } }
        public bool isDancing { get { return this[nameof(isDancing)].Flag; } set { this[nameof(isDancing)].Flag = value; } }
        public float DanceStartTime { get { return this[nameof(DanceStartTime)].GetValue<float>(); } set { this[nameof(DanceStartTime)].SetValue<float>(value); } }
        public FSDAchievement HappyFeetAchievement { get { return this[nameof(HappyFeetAchievement)].As<FSDAchievement>(); } set { this["HappyFeetAchievement"] = value; } }
        public int danceMove { get { return this[nameof(danceMove)].GetValue<int>(); } set { this[nameof(danceMove)].SetValue<int>(value); } }
        public ECharacterCameraMode CameraMode { get { return (ECharacterCameraMode)this[nameof(CameraMode)].GetValue<int>(); } set { this[nameof(CameraMode)].SetValue<int>((int)value); } }
        public bool IsInCharacterSelectionWorld { get { return this[nameof(IsInCharacterSelectionWorld)].Flag; } set { this[nameof(IsInCharacterSelectionWorld)].Flag = value; } }
        public bool bShouldSpawnAnimEffects { get { return this[nameof(bShouldSpawnAnimEffects)].Flag; } set { this[nameof(bShouldSpawnAnimEffects)].Flag = value; } }
        public float IdleTime { get { return this[nameof(IdleTime)].GetValue<float>(); } set { this[nameof(IdleTime)].SetValue<float>(value); } }
        public AnimMontage FPDrinkSalute { get { return this[nameof(FPDrinkSalute)].As<AnimMontage>(); } set { this["FPDrinkSalute"] = value; } }
        public AnimMontage TPDrinkSalute { get { return this[nameof(TPDrinkSalute)].As<AnimMontage>(); } set { this["TPDrinkSalute"] = value; } }
        public AnimMontage CurrentSaluteMontage { get { return this[nameof(CurrentSaluteMontage)].As<AnimMontage>(); } set { this["CurrentSaluteMontage"] = value; } }
        public UArray<MaterialInterface> CachedMaterials { get { return new UArray<MaterialInterface>(this[nameof(CachedMaterials)].Address); } }
        public bool BlockTrackGrindOnLanded { get { return this[nameof(BlockTrackGrindOnLanded)].Flag; } set { this[nameof(BlockTrackGrindOnLanded)].Flag = value; } }
        public Object SteamClassID { get { return this[nameof(SteamClassID)]; } set { this[nameof(SteamClassID)] = value; } }
        public MaterialInstanceDynamic RadarMaterialInstance { get { return this[nameof(RadarMaterialInstance)].As<MaterialInstanceDynamic>(); } set { this["RadarMaterialInstance"] = value; } }
        public int RadarMaterialAngleParameterIndex { get { return this[nameof(RadarMaterialAngleParameterIndex)].GetValue<int>(); } set { this[nameof(RadarMaterialAngleParameterIndex)].SetValue<int>(value); } }
        public Vector LastUpdateVisibiltyPos { get { return this[nameof(LastUpdateVisibiltyPos)].As<Vector>(); } set { this["LastUpdateVisibiltyPos"] = value; } }
        public Vector SpawnLocation { get { return this[nameof(SpawnLocation)].As<Vector>(); } set { this["SpawnLocation"] = value; } }
        public FSDPhysicalMaterial FallbackPhysicalMaterial { get { return this[nameof(FallbackPhysicalMaterial)].As<FSDPhysicalMaterial>(); } set { this["FallbackPhysicalMaterial"] = value; } }
        public bool ClientReady { get { return this[nameof(ClientReady)].Flag; } set { this[nameof(ClientReady)].Flag = value; } }
        public CharacterStateComponent NextCharacterState { get { return this[nameof(NextCharacterState)].As<CharacterStateComponent>(); } set { this["NextCharacterState"] = value; } }
        public bool PlayerIsLeavingInDroppod { get { return this[nameof(PlayerIsLeavingInDroppod)].Flag; } set { this[nameof(PlayerIsLeavingInDroppod)].Flag = value; } }
        public bool CanInstantRevive { get { return this[nameof(CanInstantRevive)].Flag; } set { this[nameof(CanInstantRevive)].Flag = value; } }
        public bool HasInitializedPerks { get { return this[nameof(HasInitializedPerks)].Flag; } set { this[nameof(HasInitializedPerks)].Flag = value; } }
        public CharacterVanityComponent CharacterVanity { get { return this[nameof(CharacterVanity)].As<CharacterVanityComponent>(); } set { this["CharacterVanity"] = value; } }
        public CameraSpringSettings CameraSpringSettings { get { return this[nameof(CameraSpringSettings)].As<CameraSpringSettings>(); } set { this["CameraSpringSettings"] = value; } }
        public void UseZipLine(ZipLineProjectile ZipLine, Vector Start, Vector End) { Invoke(nameof(UseZipLine), ZipLine, Start, End); }
        public void Unparalyze() { Invoke(nameof(Unparalyze)); }
        public void ToggleScanTool(bool Visible) { Invoke(nameof(ToggleScanTool), Visible); }
        public void ToggleHUDReleased() { Invoke(nameof(ToggleHUDReleased)); }
        public void ToggleHUDPressed() { Invoke(nameof(ToggleHUDPressed)); }
        public void ToggleHeadLight() { Invoke(nameof(ToggleHeadLight)); }
        public void ThrowFlareReleased() { Invoke(nameof(ThrowFlareReleased)); }
        public void ThrowFlarePressed() { Invoke(nameof(ThrowFlarePressed)); }
        public void ThrowFlare() { Invoke(nameof(ThrowFlare)); }
        public void StopUsingItem() { Invoke(nameof(StopUsingItem)); }
        public void StartTutorials(bool ResetTutorials) { Invoke(nameof(StartTutorials), ResetTutorials); }
        public void StartPerkActivation(PerkHUDActivationWidget PerkActivationWidget, float HoldTime) { Invoke(nameof(StartPerkActivation), PerkActivationWidget, HoldTime); }
        public AudioComponent SpawnSoundAttached(SoundBase Sound, SceneComponent AttachToComponent, float PriorityOverride, Object AttachPointName, Vector Location, Rotator Rotation, byte LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, bool bAutoDestroy, bool SendVibration) { return Invoke<AudioComponent>(nameof(SpawnSoundAttached), Sound, AttachToComponent, PriorityOverride, AttachPointName, Location, Rotation, LocationType, bStopWhenAttachedToDestroyed, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy, SendVibration); }
        public AudioComponent SpawnSoundAtLocation(SoundBase Sound, Vector Location, Rotator Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundAttenuation AttenuationSettings, SoundConcurrency ConcurrencySettings, bool bAutoDestroy, bool SendVibration) { return Invoke<AudioComponent>(nameof(SpawnSoundAtLocation), Sound, Location, Rotation, VolumeMultiplier, PitchMultiplier, StartTime, AttenuationSettings, ConcurrencySettings, bAutoDestroy, SendVibration); }
        public AudioComponent SpawnSound2D(SoundBase Sound, float PriorityOverride, float VolumeMultiplier, float PitchMultiplier, float StartTime, SoundConcurrency ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy, bool SendVibration) { return Invoke<AudioComponent>(nameof(SpawnSound2D), Sound, PriorityOverride, VolumeMultiplier, PitchMultiplier, StartTime, ConcurrencySettings, bPersistAcrossLevelTransition, bAutoDestroy, SendVibration); }
        public void ShowSimpleHoldProgress(PlayerController PlayerController, Object InDescription, float InProgress) { Invoke(nameof(ShowSimpleHoldProgress), PlayerController, InDescription, InProgress); }
        public void SetStandingDown(bool standingDown) { Invoke(nameof(SetStandingDown), standingDown); }
        public void SetRadarMaterialInstance(MaterialInstanceDynamic matInstance) { Invoke(nameof(SetRadarMaterialInstance), matInstance); }
        public void SetOutsideShieldGenerator(ShieldGeneratorActor Shield) { Invoke(nameof(SetOutsideShieldGenerator), Shield); }
        public void SetIsCharacterSelectionModel() { Invoke(nameof(SetIsCharacterSelectionModel)); }
        public void SetInstantUsables(bool Value) { Invoke(nameof(SetInstantUsables), Value); }
        public void SetInsideShieldGenerator(ShieldGeneratorActor Shield) { Invoke(nameof(SetInsideShieldGenerator), Shield); }
        public void SetInCharacterSelectionWorld() { Invoke(nameof(SetInCharacterSelectionWorld)); }
        public void SetHeadLight(bool On) { Invoke(nameof(SetHeadLight), On); }
        public void SetFallbackPhysicalMaterial(FSDPhysicalMaterial PhysMat) { Invoke(nameof(SetFallbackPhysicalMaterial), PhysMat); }
        public void SetCameraMode(ECharacterCameraMode NewCameraMode) { Invoke(nameof(SetCameraMode), NewCameraMode); }
        public void SetAttached(SceneComponent AttachTo, bool DelayUntilLanded) { Invoke(nameof(SetAttached), AttachTo, DelayUntilLanded); }
        public void Server_TriggerDash() { Invoke(nameof(Server_TriggerDash)); }
        public void Server_TeleportToPlayer(PlayerCharacter InPlayerToTeleport, int InTarget) { Invoke(nameof(Server_TeleportToPlayer), InPlayerToTeleport, InTarget); }
        public void Server_TeleportPlayerTo(int InPlayerIndexToTeleport, PlayerCharacter InTarget) { Invoke(nameof(Server_TeleportPlayerTo), InPlayerIndexToTeleport, InTarget); }
        public void Server_StartSalute(AnimMontage startSalute) { Invoke(nameof(Server_StartSalute), startSalute); }
        public void Server_SpawnEnemies(EnemyDescriptor descriptor, int Count) { Invoke(nameof(Server_SpawnEnemies), descriptor, Count); }
        public void Server_SpawnCritters(BaseCritterDescriptor descriptor, int Count) { Invoke(nameof(Server_SpawnCritters), descriptor, Count); }
        public void Server_Shouted() { Invoke(nameof(Server_Shouted)); }
        public void Server_SetUsing(bool characterIsUsing) { Invoke(nameof(Server_SetUsing), characterIsUsing); }
        public void Server_SetStandingDown(bool standingDown) { Invoke(nameof(Server_SetStandingDown), standingDown); }
        public void Server_SetRunning(bool characterIsRunning) { Invoke(nameof(Server_SetRunning), characterIsRunning); }
        public void Server_SetRunBoostActive(bool IsActive) { Invoke(nameof(Server_SetRunBoostActive), IsActive); }
        public void Server_SetIsThrowingCarriable(bool isThrowing) { Invoke(nameof(Server_SetIsThrowingCarriable), isThrowing); }
        public void Server_SetIsPressingMovementInput(bool aIsPushingInput) { Invoke(nameof(Server_SetIsPressingMovementInput), aIsPushingInput); }
        public void Server_SetIsJumpPressed(bool InJumpPressed) { Invoke(nameof(Server_SetIsJumpPressed), InJumpPressed); }
        public void Server_SetIsDancing(bool isDancing, int danceMove) { Invoke(nameof(Server_SetIsDancing), isDancing, danceMove); }
        public void Server_SetHeadLight(bool On) { Invoke(nameof(Server_SetHeadLight), On); }
        public void Server_SetDispenserReward(EventRewardDispenser Dispenser, Schematic Reward) { Invoke(nameof(Server_SetDispenserReward), Dispenser, Reward); }
        public void Server_SetClientReady() { Invoke(nameof(Server_SetClientReady)); }
        public void Server_InstantRevive(PlayerCharacter ReviveTarget, EInputKeys Key) { Invoke(nameof(Server_InstantRevive), ReviveTarget, Key); }
        public void Server_EscapeFromGrabber() { Invoke(nameof(Server_EscapeFromGrabber)); }
        public void Server_ClearBiomeEffects() { Invoke(nameof(Server_ClearBiomeEffects)); }
        public void Server_CheatStartCountDown() { Invoke(nameof(Server_CheatStartCountDown)); }
        public void Server_CheatSpawnDropPodOnSelf(float Delay) { Invoke(nameof(Server_CheatSpawnDropPodOnSelf), Delay); }
        public void Server_CheatRevive() { Invoke(nameof(Server_CheatRevive)); }
        public void Server_CheatPreventMeteors() { Invoke(nameof(Server_CheatPreventMeteors)); }
        public void Server_CheatKillAllNeutral() { Invoke(nameof(Server_CheatKillAllNeutral)); }
        public void Server_CheatKillAllFriendly() { Invoke(nameof(Server_CheatKillAllFriendly)); }
        public void Server_CheatKillAll() { Invoke(nameof(Server_CheatKillAll)); }
        public void Server_CheatJetBoots_MK2() { Invoke(nameof(Server_CheatJetBoots_MK2)); }
        public void Server_CheatJetBoots() { Invoke(nameof(Server_CheatJetBoots)); }
        public void Server_CheatGodMode() { Invoke(nameof(Server_CheatGodMode)); }
        public void Server_CheatFlyMode(bool Active) { Invoke(nameof(Server_CheatFlyMode), Active); }
        public void Server_CheatFlareInfiniteDuration(bool Enabled) { Invoke(nameof(Server_CheatFlareInfiniteDuration), Enabled); }
        public void Server_CheatDestroyAllVanityCharacters() { Invoke(nameof(Server_CheatDestroyAllVanityCharacters)); }
        public void Server_CheatDebugFastMode(bool fast) { Invoke(nameof(Server_CheatDebugFastMode), fast); }
        public void Server_CheatDancingCharacterOnSelf(int InDanceIndex) { Invoke(nameof(Server_CheatDancingCharacterOnSelf), InDanceIndex); }
        public void Server_CheatClearAllDecalsAll() { Invoke(nameof(Server_CheatClearAllDecalsAll)); }
        public void Server_CheatBreakAllEnemyArmor() { Invoke(nameof(Server_CheatBreakAllEnemyArmor)); }
        public void Server_CheatAddAllResourcesToInventory(float amount) { Invoke(nameof(Server_CheatAddAllResourcesToInventory), amount); }
        public void Server_CancelThrowingCarriable() { Invoke(nameof(Server_CancelThrowingCarriable)); }
        public void Server_CallDonkey() { Invoke(nameof(Server_CallDonkey)); }
        public void Server_AddToTraceQueue(DamageEnhancer Target, EnhancedTrace Item) { Invoke(nameof(Server_AddToTraceQueue), Target, Item); }
        public void Server_AddImpulseToActor(FSDPhysicsActor Target, Vector_NetQuantize Impulse, Vector_NetQuantize Location, Vector_NetQuantize AngularImpulse) { Invoke(nameof(Server_AddImpulseToActor), Target, Impulse, Location, AngularImpulse); }
        public void Server_AddImpulse(Vector_NetQuantizeNormal Direction, float force) { Invoke(nameof(Server_AddImpulse), Direction, force); }
        public void Server_ActivateTemporaryBuff(TemporaryBuff buff) { Invoke(nameof(Server_ActivateTemporaryBuff), buff); }
        public void SendLevelUpStatistics(int currentRank) { Invoke(nameof(SendLevelUpStatistics), currentRank); }
        public void ReviveProgress(float Progress) { Invoke(nameof(ReviveProgress), Progress); }
        public void RequestChangeInGravityScale(float newGravityScale) { Invoke(nameof(RequestChangeInGravityScale), newGravityScale); }
        public void RejectInvite() { Invoke(nameof(RejectInvite)); }
        public void ReceiveOnHeadlightOn() { Invoke(nameof(ReceiveOnHeadlightOn)); }
        public void ReceiveEscapedFromGrabber() { Invoke(nameof(ReceiveEscapedFromGrabber)); }
        public void Receive_ShowFieldMedicInstantReviveEffects() { Invoke(nameof(Receive_ShowFieldMedicInstantReviveEffects)); }
        public void PrepareForEndScreen() { Invoke(nameof(PrepareForEndScreen)); }
        public void PilotVehicle(Actor Vehicle) { Invoke(nameof(PilotVehicle), Vehicle); }
        public void Paralyze(Actor ParalyzedBy) { Invoke(nameof(Paralyze), ParalyzedBy); }
        public void OpenChat() { Invoke(nameof(OpenChat)); }
        public void OnResourceFull(CappedResource Resource) { Invoke(nameof(OnResourceFull), Resource); }
        public void OnRep_IsStandingDown() { Invoke(nameof(OnRep_IsStandingDown)); }
        public void OnRep_IsDancing() { Invoke(nameof(OnRep_IsDancing)); }
        public void OnRep_HeadLightOn() { Invoke(nameof(OnRep_HeadLightOn)); }
        public void OnRep_DanceMove() { Invoke(nameof(OnRep_DanceMove)); }
        public void OnRep_CharacterState(CharacterStateComponent oldState) { Invoke(nameof(OnRep_CharacterState), oldState); }
        public void OnPerkActivationFinished() { Invoke(nameof(OnPerkActivationFinished)); }
        public void OnItemEquipped(Item Item) { Invoke(nameof(OnItemEquipped), Item); }
        public void OnCharacterUsed(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnCharacterUsed), User, Key); }
        public void OnCharacterBeginUse(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnCharacterBeginUse), User, Key); }
        public void MouseWheelUp() { Invoke(nameof(MouseWheelUp)); }
        public void MouseWheelDown() { Invoke(nameof(MouseWheelDown)); }
        public bool LockIfState(ECharacterState LockIf, ECharacterState LockTo, bool canMoveAndAim) { return Invoke<bool>(nameof(LockIfState), LockIf, LockTo, canMoveAndAim); }
        public void KilledGrabber__DelegateSignature(Actor Grabber) { Invoke(nameof(KilledGrabber__DelegateSignature), Grabber); }
        public void JumpRelease() { Invoke(nameof(JumpRelease)); }
        public void JumpPress() { Invoke(nameof(JumpPress)); }
        public void ItemUseDelegate__DelegateSignature(Item Item) { Invoke(nameof(ItemUseDelegate__DelegateSignature), Item); }
        public bool IsWithinDistance(Actor Source, float Distance) { return Invoke<bool>(nameof(IsWithinDistance), Source, Distance); }
        public bool IsWalking() { return Invoke<bool>(nameof(IsWalking)); }
        public bool IsUsingPressed() { return Invoke<bool>(nameof(IsUsingPressed)); }
        public bool IsUsingItemPressed() { return Invoke<bool>(nameof(IsUsingItemPressed)); }
        public bool IsStateActive(ECharacterState State) { return Invoke<bool>(nameof(IsStateActive), State); }
        public bool IsSaluting() { return Invoke<bool>(nameof(IsSaluting)); }
        public bool IsParalyzed() { return Invoke<bool>(nameof(IsParalyzed)); }
        public bool IsMovementInputPressed() { return Invoke<bool>(nameof(IsMovementInputPressed)); }
        public bool IsMining() { return Invoke<bool>(nameof(IsMining)); }
        public bool IsLyingDown() { return Invoke<bool>(nameof(IsLyingDown)); }
        public bool IsJumpPressed() { return Invoke<bool>(nameof(IsJumpPressed)); }
        public bool IsInState(ECharacterState aState) { return Invoke<bool>(nameof(IsInState), aState); }
        public bool IsFrozen() { return Invoke<bool>(nameof(IsFrozen)); }
        public bool IsFirstPerson() { return Invoke<bool>(nameof(IsFirstPerson)); }
        public bool IsEquipepdActor(Actor Actor) { return Invoke<bool>(nameof(IsEquipepdActor), Actor); }
        public bool IsDown() { return Invoke<bool>(nameof(IsDown)); }
        public bool IsAlive() { return Invoke<bool>(nameof(IsAlive)); }
        public void InstantRevive(PlayerCharacter ReviveTarget, EInputKeys Key) { Invoke(nameof(InstantRevive), ReviveTarget, Key); }
        public void IgnoreInvite() { Invoke(nameof(IgnoreInvite)); }
        public bool HasBeenRevived() { return Invoke<bool>(nameof(HasBeenRevived)); }
        public CharacterUseComponent GetUseComponent() { return Invoke<CharacterUseComponent>(nameof(GetUseComponent)); }
        public PlayerTPAnimInstance GetTPAnimInstance() { return Invoke<PlayerTPAnimInstance>(nameof(GetTPAnimInstance)); }
        public float GetTimeSinceLastRevival() { return Invoke<float>(nameof(GetTimeSinceLastRevival)); }
        public bool GetSuperRapidFireActive() { return Invoke<bool>(nameof(GetSuperRapidFireActive)); }
        public ECharacterState GetPreviousState() { return Invoke<ECharacterState>(nameof(GetPreviousState)); }
        public FSDPlayerState GetPlayerState() { return Invoke<FSDPlayerState>(nameof(GetPlayerState)); }
        public Object GetPlayerName() { return Invoke<Object>(nameof(GetPlayerName)); }
        public FSDPlayerController GetPlayerController() { return Invoke<FSDPlayerController>(nameof(GetPlayerController)); }
        public InventoryList GetInventoryList() { return Invoke<InventoryList>(nameof(GetInventoryList)); }
        public Object GetHeroSwitchToMessage() { return Invoke<Object>(nameof(GetHeroSwitchToMessage)); }
        public Object GetHeroName() { return Invoke<Object>(nameof(GetHeroName)); }
        public HeroInfo GetHeroInfo() { return Invoke<HeroInfo>(nameof(GetHeroInfo)); }
        public Texture2D GetHeroIcon() { return Invoke<Texture2D>(nameof(GetHeroIcon)); }
        public LinearColor GetHeroColor() { return Invoke<LinearColor>(nameof(GetHeroColor)); }
        public PlayerFPAnimInstance GetFPAnimInstance() { return Invoke<PlayerFPAnimInstance>(nameof(GetFPAnimInstance)); }
        public Item GetEquippedItem() { return Invoke<Item>(nameof(GetEquippedItem)); }
        public float GetDownTime() { return Invoke<float>(nameof(GetDownTime)); }
        public PlayerCharacter GetDownCameraTarget() { return Invoke<PlayerCharacter>(nameof(GetDownCameraTarget)); }
        public SceneComponent GetDownCameraRotationPoint() { return Invoke<SceneComponent>(nameof(GetDownCameraRotationPoint)); }
        public SceneComponent GetDownCameraAttachPoint() { return Invoke<SceneComponent>(nameof(GetDownCameraAttachPoint)); }
        public LightComponent GetDebugPointLightComponent() { return Invoke<LightComponent>(nameof(GetDebugPointLightComponent)); }
        public ECharacterState GetCurrentState() { return Invoke<ECharacterState>(nameof(GetCurrentState)); }
        public CommunicationComponent GetCommunicationComponent() { return Invoke<CommunicationComponent>(nameof(GetCommunicationComponent)); }
        public float GetClassXP() { return Invoke<float>(nameof(GetClassXP)); }
        public CharacterVanityComponent GetCharacterVanity() { return Invoke<CharacterVanityComponent>(nameof(GetCharacterVanity)); }
        public CharacterStateComponent GetCharacterStateComponent(ECharacterState State) { return Invoke<CharacterStateComponent>(nameof(GetCharacterStateComponent), State); }
        public float GetBeginRevivedProgress() { return Invoke<float>(nameof(GetBeginRevivedProgress)); }
        public UsableComponent GetBeastMasterUsableComponent() { return Invoke<UsableComponent>(nameof(GetBeastMasterUsableComponent)); }
        public Object GetAnalyticsClass() { return Invoke<Object>(nameof(GetAnalyticsClass)); }
        public Rotator GetAimRotation() { return Invoke<Rotator>(nameof(GetAimRotation)); }
        public Vector GetActorGroundLocation() { return Invoke<Vector>(nameof(GetActorGroundLocation)); }
        public UArray<ShieldGeneratorActor> GetActiveShieldGenerators() { return Invoke<UArray<ShieldGeneratorActor>>(nameof(GetActiveShieldGenerators)); }
        public PlayerAnimInstance GetActiveAnimInstance() { return Invoke<PlayerAnimInstance>(nameof(GetActiveAnimInstance)); }
        public void GenericAnimNotifyDelegate__DelegateSignature(PlayerCharacter Player) { Invoke(nameof(GenericAnimNotifyDelegate__DelegateSignature), Player); }
        public void ForceIsPressingMovementInputKey() { Invoke(nameof(ForceIsPressingMovementInputKey)); }
        public void FirePressedDelegate__DelegateSignature() { Invoke(nameof(FirePressedDelegate__DelegateSignature)); }
        public void ExitVehicle() { Invoke(nameof(ExitVehicle)); }
        public void CycleItemUp() { Invoke(nameof(CycleItemUp)); }
        public void CycleItemReleased() { Invoke(nameof(CycleItemReleased)); }
        public void CycleItemPressed() { Invoke(nameof(CycleItemPressed)); }
        public void CycleItemDown() { Invoke(nameof(CycleItemDown)); }
        public void ConsumeCycleItemButton() { Invoke(nameof(ConsumeCycleItemButton)); }
        public void Client_TargetDamaged(Object Health, float Damage, float DamageModifier, bool IsWeakPoint, bool IsRadial) { Invoke(nameof(Client_TargetDamaged), Health, Damage, DamageModifier, IsWeakPoint, IsRadial); }
        public void Client_OpenMinersManual() { Invoke(nameof(Client_OpenMinersManual)); }
        public void Client_AddImpulse(Vector_NetQuantizeNormal Direction, float force) { Invoke(nameof(Client_AddImpulse), Direction, force); }
        public void Client_ActivateTemporaryBuff(TemporaryBuff buff) { Invoke(nameof(Client_ActivateTemporaryBuff), buff); }
        public void CheckWithoutAPaddleAchievement() { Invoke(nameof(CheckWithoutAPaddleAchievement)); }
        public void Cheat_CreateCountdownHUD() { Invoke(nameof(Cheat_CreateCountdownHUD)); }
        public void ChangeState(ECharacterState NewState) { Invoke(nameof(ChangeState), NewState); }
        public void ChangeIfDifferentState(ECharacterState NewState) { Invoke(nameof(ChangeIfDifferentState), NewState); }
        public void CanEscapeGrabberDelegate__DelegateSignature(bool bCanEscape) { Invoke(nameof(CanEscapeGrabberDelegate__DelegateSignature), bCanEscape); }
        public bool CanEscapeFromGrabber() { return Invoke<bool>(nameof(CanEscapeFromGrabber)); }
        public void CallDonkeyReleased() { Invoke(nameof(CallDonkeyReleased)); }
        public void CallDonkeyPressed() { Invoke(nameof(CallDonkeyPressed)); }
        public void BP_OnUpdateMeshes() { Invoke(nameof(BP_OnUpdateMeshes)); }
        public void BP_OnControllerReady() { Invoke(nameof(BP_OnControllerReady)); }
        public void AnnounceSchematicCollected(Schematic InSchematic) { Invoke(nameof(AnnounceSchematicCollected), InSchematic); }
        public void All_StartSalute(AnimMontage saluteMontage) { Invoke(nameof(All_StartSalute), saluteMontage); }
        public void All_ShowImpactEffects(ParticleSystem Particles, Vector_NetQuantize Location, Vector_NetQuantizeNormal Orientation) { Invoke(nameof(All_ShowImpactEffects), Particles, Location, Orientation); }
        public void All_ShowFieldMedicInstantReviveEffects() { Invoke(nameof(All_ShowFieldMedicInstantReviveEffects)); }
        public void All_CheatStartCountDown() { Invoke(nameof(All_CheatStartCountDown)); }
        public void All_CheatSetDanceForVanityCharacter(int InDanceIndex) { Invoke(nameof(All_CheatSetDanceForVanityCharacter), InDanceIndex); }
        public void All_CheatDestroyAllVanityCharacters() { Invoke(nameof(All_CheatDestroyAllVanityCharacters)); }
        public void All_CheatClearAllDecalsAll() { Invoke(nameof(All_CheatClearAllDecalsAll)); }
        public void AddImpulseToActor(FSDPhysicsActor Target, Vector_NetQuantize Impulse, Vector_NetQuantize Location, Vector_NetQuantize AngularImpulse) { Invoke(nameof(AddImpulseToActor), Target, Impulse, Location, AngularImpulse); }
        public void AddImpulseFromVector(Vector Vector) { Invoke(nameof(AddImpulseFromVector), Vector); }
        public void AddImpulseFromDirectionAndForce(Vector Direction, float force) { Invoke(nameof(AddImpulseFromDirectionAndForce), Direction, force); }
        public void AcknowledgeCharacterState(ECharacterState eState) { Invoke(nameof(AcknowledgeCharacterState), eState); }
        public void AcceptInvite() { Invoke(nameof(AcceptInvite)); }
    }
    public class PlayerCharacterFunctionLibrary : BlueprintFunctionLibrary
    {
        public PlayerCharacterFunctionLibrary(nint addr) : base(addr) { }
        public bool SetPlayerVoiceMuted(Object WorldContextObject, FSDPlayerState PlayerState, bool Mute, bool TrySystemWide, int localUserNum) { return Invoke<bool>(nameof(SetPlayerVoiceMuted), WorldContextObject, PlayerState, Mute, TrySystemWide, localUserNum); }
        public bool IsPlayerVoiceMuted(Object WorldContextObject, FSDPlayerState PlayerState, int localUserNum) { return Invoke<bool>(nameof(IsPlayerVoiceMuted), WorldContextObject, PlayerState, localUserNum); }
        public PlayerCharacter GetRandomPlayer(Object WorldContextObject, bool MustBeAlive, bool MustNotBeParalyzed) { return Invoke<PlayerCharacter>(nameof(GetRandomPlayer), WorldContextObject, MustBeAlive, MustNotBeParalyzed); }
        public PlayerCharacter GetNearestVisiblePlayer(Actor from, float MaxDistance, bool MustBeAlive, bool MustNotBeParalyzed) { return Invoke<PlayerCharacter>(nameof(GetNearestVisiblePlayer), from, MaxDistance, MustBeAlive, MustNotBeParalyzed); }
        public PlayerCharacter GetNearestPlayerToPosition(Object WorldContextObject, Vector Position, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly) { return Invoke<PlayerCharacter>(nameof(GetNearestPlayerToPosition), WorldContextObject, Position, MaxDistance, MustBeAlive, MustBeUnparalyzed, XYOnly); }
        public PlayerCharacter GetNearestPlayerFrom(Object WorldContext, Vector from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly) { return Invoke<PlayerCharacter>(nameof(GetNearestPlayerFrom), WorldContext, from, MaxDistance, MustBeAlive, MustBeUnparalyzed, XYOnly); }
        public PlayerCharacter GetNearestPlayer(Actor from, float MaxDistance, bool MustBeAlive, bool MustBeUnparalyzed, bool XYOnly) { return Invoke<PlayerCharacter>(nameof(GetNearestPlayer), from, MaxDistance, MustBeAlive, MustBeUnparalyzed, XYOnly); }
    }
    public class PlayerHealthComponent : HealthComponent
    {
        public PlayerHealthComponent(nint addr) : base(addr) { }
        public Object OnFullHealthCannotHeal { get { return this[nameof(OnFullHealthCannotHeal)]; } set { this[nameof(OnFullHealthCannotHeal)] = value; } }
        public Object OnHealedFromCrystalEvent { get { return this[nameof(OnHealedFromCrystalEvent)]; } set { this[nameof(OnHealedFromCrystalEvent)] = value; } }
        public Object OnHealthRegeneratingChanged { get { return this[nameof(OnHealthRegeneratingChanged)]; } set { this[nameof(OnHealthRegeneratingChanged)] = value; } }
        public Object OnPlayerHit { get { return this[nameof(OnPlayerHit)]; } set { this[nameof(OnPlayerHit)] = value; } }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public float MaxArmor { get { return this[nameof(MaxArmor)].GetValue<float>(); } set { this[nameof(MaxArmor)].SetValue<float>(value); } }
        public float ArmorDamage { get { return this[nameof(ArmorDamage)].GetValue<float>(); } set { this[nameof(ArmorDamage)].SetValue<float>(value); } }
        public float ReviveHealthReturnRatio { get { return this[nameof(ReviveHealthReturnRatio)].GetValue<float>(); } set { this[nameof(ReviveHealthReturnRatio)].SetValue<float>(value); } }
        public float ReviveArmorReturnRatio { get { return this[nameof(ReviveArmorReturnRatio)].GetValue<float>(); } set { this[nameof(ReviveArmorReturnRatio)].SetValue<float>(value); } }
        public float HealthPerCrystalVolume { get { return this[nameof(HealthPerCrystalVolume)].GetValue<float>(); } set { this[nameof(HealthPerCrystalVolume)].SetValue<float>(value); } }
        public HealthRegenerationParams HealthRegeneration { get { return this[nameof(HealthRegeneration)].As<HealthRegenerationParams>(); } set { this["HealthRegeneration"] = value; } }
        public CurveFloat ArmorRegenCurve { get { return this[nameof(ArmorRegenCurve)].As<CurveFloat>(); } set { this["ArmorRegenCurve"] = value; } }
        public float ShieldRegenDelay { get { return this[nameof(ShieldRegenDelay)].GetValue<float>(); } set { this[nameof(ShieldRegenDelay)].SetValue<float>(value); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public ParticleSystem GenericImpactParticles { get { return this[nameof(GenericImpactParticles)].As<ParticleSystem>(); } set { this["GenericImpactParticles"] = value; } }
        public ParticleSystem ShieldLinkEffect { get { return this[nameof(ShieldLinkEffect)].As<ParticleSystem>(); } set { this["ShieldLinkEffect"] = value; } }
        public AudioWithCooldown AudioFriendlyFire { get { return this[nameof(AudioFriendlyFire)].As<AudioWithCooldown>(); } set { this["AudioFriendlyFire"] = value; } }
        public ParticleSystemComponent ShieldLinkInstance { get { return this[nameof(ShieldLinkInstance)].As<ParticleSystemComponent>(); } set { this["ShieldLinkInstance"] = value; } }
        public float InvulnerabilityDuration { get { return this[nameof(InvulnerabilityDuration)].GetValue<float>(); } set { this[nameof(InvulnerabilityDuration)].SetValue<float>(value); } }
        public float ReviveInvulnerabilityTime { get { return this[nameof(ReviveInvulnerabilityTime)].GetValue<float>(); } set { this[nameof(ReviveInvulnerabilityTime)].SetValue<float>(value); } }
        public PlayerDamageTakenMutator DamageTakenMutator { get { return this[nameof(DamageTakenMutator)].As<PlayerDamageTakenMutator>(); } set { this["DamageTakenMutator"] = value; } }
        public Object IronWillStatusEffectClass { get { return this[nameof(IronWillStatusEffectClass)]; } set { this[nameof(IronWillStatusEffectClass)] = value; } }
        public StatusEffect IronWillStatusEffect { get { return this[nameof(IronWillStatusEffect)].As<StatusEffect>(); } set { this["IronWillStatusEffect"] = value; } }
        public bool IronWillActive { get { return this[nameof(IronWillActive)].Flag; } set { this[nameof(IronWillActive)].Flag = value; } }
        public float IronWillTimeToActivate { get { return this[nameof(IronWillTimeToActivate)].GetValue<float>(); } set { this[nameof(IronWillTimeToActivate)].SetValue<float>(value); } }
        public SharedHealthMutator SharedHealthMutator { get { return this[nameof(SharedHealthMutator)].As<SharedHealthMutator>(); } set { this["SharedHealthMutator"] = value; } }
        public StatusEffect SetIronWillStatusEffect(Object steClass) { return Invoke<StatusEffect>(nameof(SetIronWillStatusEffect), steClass); }
        public void Server_TryActivateIronWill() { Invoke(nameof(Server_TryActivateIronWill)); }
        public void OnRep_MaxHealth() { Invoke(nameof(OnRep_MaxHealth)); }
        public void OnRep_MaxArmor() { Invoke(nameof(OnRep_MaxArmor)); }
        public void OnRep_ArmorDamage(float oldDamage) { Invoke(nameof(OnRep_ArmorDamage), oldDamage); }
        public bool IsLowHealth() { return Invoke<bool>(nameof(IsLowHealth)); }
        public float GetRemainingIronWillActivationTime() { return Invoke<float>(nameof(GetRemainingIronWillActivationTime)); }
        public bool GetIsHealthRegenerating() { return Invoke<bool>(nameof(GetIsHealthRegenerating)); }
        public bool GetIronWillActive() { return Invoke<bool>(nameof(GetIronWillActive)); }
        public float GetHealthRegeneratingTargetRatio() { return Invoke<float>(nameof(GetHealthRegeneratingTargetRatio)); }
        public void Client_SetHealthRegenerating(bool isRegenerating) { Invoke(nameof(Client_SetHealthRegenerating), isRegenerating); }
        public void Client_OnFriendlyFire(Controller EventInstigator, Actor DamageCauser) { Invoke(nameof(Client_OnFriendlyFire), EventInstigator, DamageCauser); }
        public void Client_HealthFullCannotHeal() { Invoke(nameof(Client_HealthFullCannotHeal)); }
        public bool CanActivateIronWill() { return Invoke<bool>(nameof(CanActivateIronWill)); }
    }
    public class PlayerImpactCooldownComponent : ActorComponent
    {
        public PlayerImpactCooldownComponent(nint addr) : base(addr) { }
        public float CoolDownTime { get { return this[nameof(CoolDownTime)].GetValue<float>(); } set { this[nameof(CoolDownTime)].SetValue<float>(value); } }
        public bool CheckCanImpact(Actor Actor) { return Invoke<bool>(nameof(CheckCanImpact), Actor); }
    }
    public class PlayerInfectionComponent : ActorComponent
    {
        public PlayerInfectionComponent(nint addr) : base(addr) { }
        public Object OnInfectionLevelChangedEvent { get { return this[nameof(OnInfectionLevelChangedEvent)]; } set { this[nameof(OnInfectionLevelChangedEvent)] = value; } }
        public Object OnBreakoutPercentageChanged { get { return this[nameof(OnBreakoutPercentageChanged)]; } set { this[nameof(OnBreakoutPercentageChanged)] = value; } }
        public Object OnInfectionStateChangedEvent { get { return this[nameof(OnInfectionStateChangedEvent)]; } set { this[nameof(OnInfectionStateChangedEvent)] = value; } }
        public EInfectionState InfectionState { get { return (EInfectionState)this[nameof(InfectionState)].GetValue<int>(); } set { this[nameof(InfectionState)].SetValue<int>((int)value); } }
        public float ReductionCooldown { get { return this[nameof(ReductionCooldown)].GetValue<float>(); } set { this[nameof(ReductionCooldown)].SetValue<float>(value); } }
        public float InfectionImmunityAfterFullInfection { get { return this[nameof(InfectionImmunityAfterFullInfection)].GetValue<float>(); } set { this[nameof(InfectionImmunityAfterFullInfection)].SetValue<float>(value); } }
        public float InfectionLevel { get { return this[nameof(InfectionLevel)].GetValue<float>(); } set { this[nameof(InfectionLevel)].SetValue<float>(value); } }
        public float BreakoutPercentage { get { return this[nameof(BreakoutPercentage)].GetValue<float>(); } set { this[nameof(BreakoutPercentage)].SetValue<float>(value); } }
        public float InfectionDecreaseOverTimer { get { return this[nameof(InfectionDecreaseOverTimer)].GetValue<float>(); } set { this[nameof(InfectionDecreaseOverTimer)].SetValue<float>(value); } }
        public void Server_ClearInfection() { Invoke(nameof(Server_ClearInfection)); }
        public void OnRep_InfectionLevel(float oldLevel) { Invoke(nameof(OnRep_InfectionLevel), oldLevel); }
        public void IncreaseInfection(float amount, Actor Source) { Invoke(nameof(IncreaseInfection), amount, Source); }
    }
    public class PlayerMovementComponent : CharacterMovementComponent
    {
        public PlayerMovementComponent(nint addr) : base(addr) { }
        public bool DebugFastMove { get { return this[nameof(DebugFastMove)].Flag; } set { this[nameof(DebugFastMove)].Flag = value; } }
        public SoundBase SlidingOnIceSound { get { return this[nameof(SlidingOnIceSound)].As<SoundBase>(); } set { this["SlidingOnIceSound"] = value; } }
        public float LedgeClimbZVelocity { get { return this[nameof(LedgeClimbZVelocity)].GetValue<float>(); } set { this[nameof(LedgeClimbZVelocity)].SetValue<float>(value); } }
        public float MovementPenalty { get { return this[nameof(MovementPenalty)].GetValue<float>(); } set { this[nameof(MovementPenalty)].SetValue<float>(value); } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public Object CurrentPhysUpdateState { get { return this[nameof(CurrentPhysUpdateState)]; } set { this[nameof(CurrentPhysUpdateState)] = value; } }
        public void RemoveGravityModifier(Actor SourceActor) { Invoke(nameof(RemoveGravityModifier), SourceActor); }
        public void AddGravityModifier(Actor SourceActor, float Effect) { Invoke(nameof(AddGravityModifier), SourceActor, Effect); }
    }
    public class PlayerProximity : ActorComponent
    {
        public PlayerProximity(nint addr) : base(addr) { }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public Object OnPlayerProximity { get { return this[nameof(OnPlayerProximity)]; } set { this[nameof(OnPlayerProximity)] = value; } }
    }
    public class PlayerProximityTracker : ActorComponent
    {
        public PlayerProximityTracker(nint addr) : base(addr) { }
        public float MaxDistanceBetweenPlayers { get { return this[nameof(MaxDistanceBetweenPlayers)].GetValue<float>(); } set { this[nameof(MaxDistanceBetweenPlayers)].SetValue<float>(value); } }
        public float PlayerSpheresUpdateRatePerSecond { get { return this[nameof(PlayerSpheresUpdateRatePerSecond)].GetValue<float>(); } set { this[nameof(PlayerSpheresUpdateRatePerSecond)].SetValue<float>(value); } }
        public UArray<PlayerSphere> PlayerSpheres { get { return new UArray<PlayerSphere>(this[nameof(PlayerSpheres)].Address); } }
        public UArray<ProximityTriggerItem> LocalPlayerProximityTriggers { get { return new UArray<ProximityTriggerItem>(this[nameof(LocalPlayerProximityTriggers)].Address); } }
        public UArray<ProximityTriggerItem> AnyPlayerProximityTriggers { get { return new UArray<ProximityTriggerItem>(this[nameof(AnyPlayerProximityTriggers)].Address); } }
        public void Receive_RegisterForLocalPlayerProximity(Object WorldContextObject, Vector Location, float Distance, Object proximityCallback, bool triggerOnlyOnce) { Invoke(nameof(Receive_RegisterForLocalPlayerProximity), WorldContextObject, Location, Distance, proximityCallback, triggerOnlyOnce); }
        public void Receive_RegisterForAnyPlayerProximity(Object WorldContextObject, Vector Location, float Distance, Object proximityCallback, bool triggerOnlyOnce) { Invoke(nameof(Receive_RegisterForAnyPlayerProximity), WorldContextObject, Location, Distance, proximityCallback, triggerOnlyOnce); }
        public PlayerSphere GetPrimarySphere() { return Invoke<PlayerSphere>(nameof(GetPrimarySphere)); }
        public UArray<PlayerSphere> GetPlayerSpheres() { return Invoke<UArray<PlayerSphere>>(nameof(GetPlayerSpheres)); }
    }
    public class PlayerRejoinState : ActorComponent
    {
        public PlayerRejoinState(nint addr) : base(addr) { }
        public void Server_Reset() { Invoke(nameof(Server_Reset)); }
        public void Server_AddIntValue_Internal(Guid ItemKey, Object ValueKey, int Value) { Invoke(nameof(Server_AddIntValue_Internal), ItemKey, ValueKey, Value); }
        public void Server_AddFloatValue_Internal(Guid ItemKey, Object ValueKey, float Value) { Invoke(nameof(Server_AddFloatValue_Internal), ItemKey, ValueKey, Value); }
        public void Client_SetValues(UArray<RejoinFloat> floatValues, UArray<RejoinInt> intValues) { Invoke(nameof(Client_SetValues), floatValues, intValues); }
    }
    public class ResourcesComponent : ActorComponent
    {
        public ResourcesComponent(nint addr) : base(addr) { }
        public Object OnResourceChanged { get { return this[nameof(OnResourceChanged)]; } set { this[nameof(OnResourceChanged)] = value; } }
        public Object OnResourceIncreased { get { return this[nameof(OnResourceIncreased)]; } set { this[nameof(OnResourceIncreased)] = value; } }
        public Object OnResourceFull { get { return this[nameof(OnResourceFull)]; } set { this[nameof(OnResourceFull)] = value; } }
        public Object OnResourceAdded { get { return this[nameof(OnResourceAdded)]; } set { this[nameof(OnResourceAdded)] = value; } }
        public UArray<CappedResource> Resources { get { return new UArray<CappedResource>(this[nameof(Resources)].Address); } }
        public float ResourceCap { get { return this[nameof(ResourceCap)].GetValue<float>(); } set { this[nameof(ResourceCap)].SetValue<float>(value); } }
        public void ResourceIncreased(CappedResource Resource, float Delta) { Invoke(nameof(ResourceIncreased), Resource, Delta); }
        public void ResourceFull(CappedResource Resource) { Invoke(nameof(ResourceFull), Resource); }
        public void ResourceChanged(CappedResource Resource, float currentAmount) { Invoke(nameof(ResourceChanged), Resource, currentAmount); }
        public void OnRep_Resources() { Invoke(nameof(OnRep_Resources)); }
        public int GetXPFromResourceMap(Object Resources) { return Invoke<int>(nameof(GetXPFromResourceMap), Resources); }
        public int GetXpFromMining() { return Invoke<int>(nameof(GetXpFromMining)); }
        public Object GetSeparateResourcesFromMap(Object Resources) { return Invoke<Object>(nameof(GetSeparateResourcesFromMap), Resources); }
        public CappedResource GetResource(ResourceData Data, bool createIfAmountIsZero) { return Invoke<CappedResource>(nameof(GetResource), Data, createIfAmountIsZero); }
        public float GetCapacityPct() { return Invoke<float>(nameof(GetCapacityPct)); }
        public UArray<CappedResource> GetAllResources() { return Invoke<UArray<CappedResource>>(nameof(GetAllResources)); }
    }
    public class PlayerResourceComponent : ResourcesComponent
    {
        public PlayerResourceComponent(nint addr) : base(addr) { }
        public PlayerResourceComponent GetFromPlayer(PlayerCharacter PlayerCharacter) { return Invoke<PlayerResourceComponent>(nameof(GetFromPlayer), PlayerCharacter); }
    }
    public class PlayerStatsComponent : ActorComponent
    {
        public PlayerStatsComponent(nint addr) : base(addr) { }
        public Object OnKillAdded { get { return this[nameof(OnKillAdded)]; } set { this[nameof(OnKillAdded)] = value; } }
        public int TotalKills { get { return this[nameof(TotalKills)].GetValue<int>(); } set { this[nameof(TotalKills)].SetValue<int>(value); } }
        public int TotalRevived { get { return this[nameof(TotalRevived)].GetValue<int>(); } set { this[nameof(TotalRevived)].SetValue<int>(value); } }
        public int TotalDeaths { get { return this[nameof(TotalDeaths)].GetValue<int>(); } set { this[nameof(TotalDeaths)].SetValue<int>(value); } }
        public int TotalSupplypodsRequested { get { return this[nameof(TotalSupplypodsRequested)].GetValue<int>(); } set { this[nameof(TotalSupplypodsRequested)].SetValue<int>(value); } }
        public float TotalGoldMined { get { return this[nameof(TotalGoldMined)].GetValue<float>(); } set { this[nameof(TotalGoldMined)].SetValue<float>(value); } }
        public float TotalMOMsMined { get { return this[nameof(TotalMOMsMined)].GetValue<float>(); } set { this[nameof(TotalMOMsMined)].SetValue<float>(value); } }
        public float TotalMineralsMined { get { return this[nameof(TotalMineralsMined)].GetValue<float>(); } set { this[nameof(TotalMineralsMined)].SetValue<float>(value); } }
        public float TotalXPGained { get { return this[nameof(TotalXPGained)].GetValue<float>(); } set { this[nameof(TotalXPGained)].SetValue<float>(value); } }
        public bool EscapedInPod { get { return this[nameof(EscapedInPod)].Flag; } set { this[nameof(EscapedInPod)].Flag = value; } }
        public Object LastPlayedClass { get { return this[nameof(LastPlayedClass)]; } set { this[nameof(LastPlayedClass)] = value; } }
        public EndMissionResult EndMissionResult { get { return this[nameof(EndMissionResult)].As<EndMissionResult>(); } set { this["EndMissionResult"] = value; } }
        public Object OnEndMissionResultReady { get { return this[nameof(OnEndMissionResultReady)]; } set { this[nameof(OnEndMissionResultReady)] = value; } }
        public void SendMissionAnalytics(bool trackMorkite) { Invoke(nameof(SendMissionAnalytics), trackMorkite); }
        public void SendEndMissionResult(EndMissionResult Result) { Invoke(nameof(SendEndMissionResult), Result); }
        public void OnResourceMined(CappedResource Resource, float amount) { Invoke(nameof(OnResourceMined), Resource, amount); }
        public void OnRep_EndMissionResult() { Invoke(nameof(OnRep_EndMissionResult)); }
        public bool IsEndMissionResultReady() { return Invoke<bool>(nameof(IsEndMissionResultReady)); }
        public bool GetSurvivedInPod() { return Invoke<bool>(nameof(GetSurvivedInPod)); }
        public void EndMissionResultDelegate__DelegateSignature(EndMissionResult Result) { Invoke(nameof(EndMissionResultDelegate__DelegateSignature), Result); }
    }
    public class PlayerTemperatureComponent : TemperatureComponent
    {
        public PlayerTemperatureComponent(nint addr) : base(addr) { }
        public Object OnTemperatureChanged { get { return this[nameof(OnTemperatureChanged)]; } set { this[nameof(OnTemperatureChanged)] = value; } }
        public Object OnTemperatureStateChanged { get { return this[nameof(OnTemperatureStateChanged)]; } set { this[nameof(OnTemperatureStateChanged)] = value; } }
        public Object OnTemperatureChangeRate { get { return this[nameof(OnTemperatureChangeRate)]; } set { this[nameof(OnTemperatureChangeRate)] = value; } }
        public Object OnDefrosting { get { return this[nameof(OnDefrosting)]; } set { this[nameof(OnDefrosting)] = value; } }
        public Object OnBarVisibilityChanged { get { return this[nameof(OnBarVisibilityChanged)]; } set { this[nameof(OnBarVisibilityChanged)] = value; } }
        public float MinimumTemperature { get { return this[nameof(MinimumTemperature)].GetValue<float>(); } set { this[nameof(MinimumTemperature)].SetValue<float>(value); } }
        public float MaximumTemperature { get { return this[nameof(MaximumTemperature)].GetValue<float>(); } set { this[nameof(MaximumTemperature)].SetValue<float>(value); } }
        public float DefrostTemperature { get { return this[nameof(DefrostTemperature)].GetValue<float>(); } set { this[nameof(DefrostTemperature)].SetValue<float>(value); } }
        public float BurnTemperature { get { return this[nameof(BurnTemperature)].GetValue<float>(); } set { this[nameof(BurnTemperature)].SetValue<float>(value); } }
        public float DouseFireTemperature { get { return this[nameof(DouseFireTemperature)].GetValue<float>(); } set { this[nameof(DouseFireTemperature)].SetValue<float>(value); } }
        public float TemperaturRegainSpeed { get { return this[nameof(TemperaturRegainSpeed)].GetValue<float>(); } set { this[nameof(TemperaturRegainSpeed)].SetValue<float>(value); } }
        public float DefrostingRequired { get { return this[nameof(DefrostingRequired)].GetValue<float>(); } set { this[nameof(DefrostingRequired)].SetValue<float>(value); } }
        public Object OnDefrostedStatusEffect { get { return this[nameof(OnDefrostedStatusEffect)]; } set { this[nameof(OnDefrostedStatusEffect)] = value; } }
        public float NormalTemperature { get { return this[nameof(NormalTemperature)].GetValue<float>(); } set { this[nameof(NormalTemperature)].SetValue<float>(value); } }
        public float CurrentTemperature { get { return this[nameof(CurrentTemperature)].GetValue<float>(); } set { this[nameof(CurrentTemperature)].SetValue<float>(value); } }
        public float TargetTemperature { get { return this[nameof(TargetTemperature)].GetValue<float>(); } set { this[nameof(TargetTemperature)].SetValue<float>(value); } }
        public byte TemperatureChangeSpeed { get { return this[nameof(TemperatureChangeSpeed)].GetValue<byte>(); } set { this[nameof(TemperatureChangeSpeed)].SetValue<byte>(value); } }
        public float DefrostProgress { get { return this[nameof(DefrostProgress)].GetValue<float>(); } set { this[nameof(DefrostProgress)].SetValue<float>(value); } }
        public bool barVisible { get { return this[nameof(barVisible)].Flag; } set { this[nameof(barVisible)].Flag = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
        public EPlayerTemperatureState TemperatureState { get { return (EPlayerTemperatureState)this[nameof(TemperatureState)].GetValue<int>(); } set { this[nameof(TemperatureState)].SetValue<int>((int)value); } }
        public void SetNormalTemperature() { Invoke(nameof(SetNormalTemperature)); }
        public void SetFrozenTemperature() { Invoke(nameof(SetFrozenTemperature)); }
        public void OnRep_TemperatureState(EPlayerTemperatureState oldState) { Invoke(nameof(OnRep_TemperatureState), oldState); }
        public void OnRep_TemperatureChangeSpeed(byte OldSpeed) { Invoke(nameof(OnRep_TemperatureChangeSpeed), OldSpeed); }
        public void OnRep_DefrostProgress() { Invoke(nameof(OnRep_DefrostProgress)); }
        public void OnRep_CurrentTemperature(float OldTemperature) { Invoke(nameof(OnRep_CurrentTemperature), OldTemperature); }
        public void OnDeath(HealthComponentBase Health) { Invoke(nameof(OnDeath), Health); }
        public int GetTemperatureChangedSpeed() { return Invoke<int>(nameof(GetTemperatureChangedSpeed)); }
        public float GetDefrostProgress() { return Invoke<float>(nameof(GetDefrostProgress)); }
        public float GetCurrentTemperatureNormalized() { return Invoke<float>(nameof(GetCurrentTemperatureNormalized)); }
        public void Defrost(float amount) { Invoke(nameof(Defrost), amount); }
    }
    public class PLSEncounterComponent : ActorComponent
    {
        public PLSEncounterComponent(nint addr) : base(addr) { }
    }
    public class PLSTester : Actor
    {
        public PLSTester(nint addr) : base(addr) { }
        public Object FullSeedString { get { return this[nameof(FullSeedString)]; } set { this[nameof(FullSeedString)] = value; } }
        public int PLSSeed { get { return this[nameof(PLSSeed)].GetValue<int>(); } set { this[nameof(PLSSeed)].SetValue<int>(value); } }
        public int MissionSeed { get { return this[nameof(MissionSeed)].GetValue<int>(); } set { this[nameof(MissionSeed)].SetValue<int>(value); } }
        public GlobalMissionSeed GlobalSeed { get { return this[nameof(GlobalSeed)].As<GlobalMissionSeed>(); } set { this["GlobalSeed"] = value; } }
        public int GlobalMissionIndex { get { return this[nameof(GlobalMissionIndex)].GetValue<int>(); } set { this[nameof(GlobalMissionIndex)].SetValue<int>(value); } }
        public MissionComplexity limitComplexity { get { return this[nameof(limitComplexity)].As<MissionComplexity>(); } set { this["limitComplexity"] = value; } }
        public MissionDuration limitDuration { get { return this[nameof(limitDuration)].As<MissionDuration>(); } set { this["limitDuration"] = value; } }
        public MissionMutator Mutator { get { return this[nameof(Mutator)].As<MissionMutator>(); } set { this["Mutator"] = value; } }
        public UArray<MissionWarning> Warnings { get { return new UArray<MissionWarning>(this[nameof(Warnings)].Address); } }
        public MissionChallenge Challenge { get { return this[nameof(Challenge)].As<MissionChallenge>(); } set { this["Challenge"] = value; } }
        public UArray<Object> SecondaryObjectives { get { return new UArray<Object>(this[nameof(SecondaryObjectives)].Address); } }
        public SpecialEvent SpecialEvent { get { return this[nameof(SpecialEvent)].As<SpecialEvent>(); } set { this["SpecialEvent"] = value; } }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public MissionTemplate MissionTemplate { get { return this[nameof(MissionTemplate)].As<MissionTemplate>(); } set { this["MissionTemplate"] = value; } }
        public MissionTemplate CustomMissionTemplate { get { return this[nameof(CustomMissionTemplate)].As<MissionTemplate>(); } set { this["CustomMissionTemplate"] = value; } }
        public DifficultySetting OverrideDifficulty { get { return this[nameof(OverrideDifficulty)].As<DifficultySetting>(); } set { this["OverrideDifficulty"] = value; } }
        public Object Haz5Mutators { get { return this[nameof(Haz5Mutators)]; } set { this[nameof(Haz5Mutators)] = value; } }
        public int SimulatePlayerCount { get { return this[nameof(SimulatePlayerCount)].GetValue<int>(); } set { this[nameof(SimulatePlayerCount)].SetValue<int>(value); } }
        public Object CustomMissionName { get { return this[nameof(CustomMissionName)]; } set { this[nameof(CustomMissionName)] = value; } }
    }
    public class DeepDiveTester : Actor
    {
        public DeepDiveTester(nint addr) : base(addr) { }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public EMissionStructure MissionStructure { get { return (EMissionStructure)this[nameof(MissionStructure)].GetValue<int>(); } set { this[nameof(MissionStructure)].SetValue<int>((int)value); } }
        public UArray<DeepDiveTesterItem> stages { get { return new UArray<DeepDiveTesterItem>(this[nameof(stages)].Address); } }
    }
    public class PoseCorrectionComponent : ActorComponent
    {
        public PoseCorrectionComponent(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public float FrontX { get { return this[nameof(FrontX)].GetValue<float>(); } set { this[nameof(FrontX)].SetValue<float>(value); } }
        public float SideY { get { return this[nameof(SideY)].GetValue<float>(); } set { this[nameof(SideY)].SetValue<float>(value); } }
        public float BackX { get { return this[nameof(BackX)].GetValue<float>(); } set { this[nameof(BackX)].SetValue<float>(value); } }
    }
    public class PostProcessingManager : Actor
    {
        public PostProcessingManager(nint addr) : base(addr) { }
        public UArray<Object> RegisteredActors { get { return new UArray<Object>(this[nameof(RegisteredActors)].Address); } }
        public UArray<PostProcessingBlendable> CurrentBlendables { get { return new UArray<PostProcessingBlendable>(this[nameof(CurrentBlendables)].Address); } }
        public UArray<MaterialInstanceDynamic> Materials { get { return new UArray<MaterialInstanceDynamic>(this[nameof(Materials)].Address); } }
    }
    public class PresenceSubSystem : GameInstanceSubsystem
    {
        public PresenceSubSystem(nint addr) : base(addr) { }
        public DiscordWrapper DiscordWI { get { return this[nameof(DiscordWI)].As<DiscordWrapper>(); } set { this["DiscordWI"] = value; } }
        public CommunityGoalWrapper CommunityWI { get { return this[nameof(CommunityWI)].As<CommunityGoalWrapper>(); } set { this["CommunityWI"] = value; } }
    }
    public class ProceduralController : ActorComponent
    {
        public ProceduralController(nint addr) : base(addr) { }
        public void Server_RequestTunnelData() { Invoke(nameof(Server_RequestTunnelData)); }
        public void SendTunnelData() { Invoke(nameof(SendTunnelData)); }
        public void SendRoomData() { Invoke(nameof(SendRoomData)); }
        public void SendRequestedPLSData() { Invoke(nameof(SendRequestedPLSData)); }
        public void SendRequestedCarverData(EDebrisItemPass pass) { Invoke(nameof(SendRequestedCarverData), pass); }
        public void RequestPLSData() { Invoke(nameof(RequestPLSData)); }
        public void RequestCarverData(EDebrisItemPass pass) { Invoke(nameof(RequestCarverData), pass); }
        public void ReceivedTunnelData(UArray<TunnelNode> tunnels) { Invoke(nameof(ReceivedTunnelData), tunnels); }
        public void ReceivedRoomData(int Seed, UArray<RoomNode> Rooms, UArray<PathObstacle> Obstacles) { Invoke(nameof(ReceivedRoomData), Seed, Rooms, Obstacles); }
        public void Client_SendTunnelData(UArray<TunnelNode> tunnels) { Invoke(nameof(Client_SendTunnelData), tunnels); }
        public void Client_SendRoomData(int Seed, UArray<RoomNode> Rooms, UArray<PathObstacle> Obstacles) { Invoke(nameof(Client_SendRoomData), Seed, Rooms, Obstacles); }
        public void Client_RecieveCarverSizes(int pass, int carverCount) { Invoke(nameof(Client_RecieveCarverSizes), pass, carverCount); }
        public void Client_ReceivePLSLevelCarver(int pass, LevelGenerationCarverLists levelCarvers) { Invoke(nameof(Client_ReceivePLSLevelCarver), pass, levelCarvers); }
        public void Client_ReceivePLSInfluencers(GeneratedInfluenceSets influenceSet) { Invoke(nameof(Client_ReceivePLSInfluencers), influenceSet); }
        public void Client_ReceivePLSDebris(UArray<GeneratedDebrisItem> levelDebris) { Invoke(nameof(Client_ReceivePLSDebris), levelDebris); }
    }
    public class ProceduralObjectColliders : ActorComponent
    {
        public ProceduralObjectColliders(nint addr) : base(addr) { }
    }
    public class ProceduralResources : ActorComponent
    {
        public ProceduralResources(nint addr) : base(addr) { }
        public void GenerateResources() { Invoke(nameof(GenerateResources)); }
        public void GenerateMissingCarvedResources_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateMissingCarvedResources_Async), Setup, LatentInfo); }
        public void GenerateMissingCarvedResources() { Invoke(nameof(GenerateMissingCarvedResources)); }
        public void GenerateCarvedResources_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateCarvedResources_Async), Setup, LatentInfo); }
        public void GenerateCarvedResources() { Invoke(nameof(GenerateCarvedResources)); }
        public void CreateResourcesFromObjectives() { Invoke(nameof(CreateResourcesFromObjectives)); }
        public void CountGeneratedCarvedResources() { Invoke(nameof(CountGeneratedCarvedResources)); }
        public void CountFinalGeneratedCarvedResources() { Invoke(nameof(CountFinalGeneratedCarvedResources)); }
    }
    public class ProceduralSettings : DataAsset
    {
        public ProceduralSettings(nint addr) : base(addr) { }
        public RoomDecorationObject MiningpodCalldownLocationDecoration { get { return this[nameof(MiningpodCalldownLocationDecoration)].As<RoomDecorationObject>(); } set { this["MiningpodCalldownLocationDecoration"] = value; } }
        public UArray<MissionTemplate> TestMissions { get { return new UArray<MissionTemplate>(this[nameof(TestMissions)].Address); } }
        public Object TestBiome { get { return this[nameof(TestBiome)]; } set { this[nameof(TestBiome)] = value; } }
        public Biome DefaultBiome { get { return this[nameof(DefaultBiome)].As<Biome>(); } set { this["DefaultBiome"] = value; } }
        public UArray<Object> GenericBiomeQuotes { get { return new UArray<Object>(this[nameof(GenericBiomeQuotes)].Address); } }
        public MissionTemplate DefaultMission { get { return this[nameof(DefaultMission)].As<MissionTemplate>(); } set { this["DefaultMission"] = value; } }
        public Object CaveGeneratorPLSClass { get { return this[nameof(CaveGeneratorPLSClass)]; } set { this[nameof(CaveGeneratorPLSClass)] = value; } }
    }
    public class ProceduralSetup : Actor
    {
        public ProceduralSetup(nint addr) : base(addr) { }
        public bool ShowItemNoisePattern { get { return this[nameof(ShowItemNoisePattern)].Flag; } set { this[nameof(ShowItemNoisePattern)].Flag = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public bool UseRandomSeed { get { return this[nameof(UseRandomSeed)].Flag; } set { this[nameof(UseRandomSeed)].Flag = value; } }
        public RandomStream RandomStream { get { return this[nameof(RandomStream)].As<RandomStream>(); } set { this["RandomStream"] = value; } }
        public RandomStream RandomStreamServer { get { return this[nameof(RandomStreamServer)].As<RandomStream>(); } set { this["RandomStreamServer"] = value; } }
        public RandomStream RandomStreamAsync { get { return this[nameof(RandomStreamAsync)].As<RandomStream>(); } set { this["RandomStreamAsync"] = value; } }
        public RandomStream RandomStreamAsyncServer { get { return this[nameof(RandomStreamAsyncServer)].As<RandomStream>(); } set { this["RandomStreamAsyncServer"] = value; } }
        public Object OnEncounterSpawnedEvent { get { return this[nameof(OnEncounterSpawnedEvent)]; } set { this[nameof(OnEncounterSpawnedEvent)] = value; } }
        public UArray<EncounterSpecialItem> SpecialEncountersToSpawn { get { return new UArray<EncounterSpecialItem>(this[nameof(SpecialEncountersToSpawn)].Address); } }
        public SpecialEvent ForcedMachineEvent { get { return this[nameof(ForcedMachineEvent)].As<SpecialEvent>(); } set { this["ForcedMachineEvent"] = value; } }
        public SpecialEvent ForcedTreasure { get { return this[nameof(ForcedTreasure)].As<SpecialEvent>(); } set { this["ForcedTreasure"] = value; } }
        public SpecialEvent ForcedOtherEvent { get { return this[nameof(ForcedOtherEvent)].As<SpecialEvent>(); } set { this["ForcedOtherEvent"] = value; } }
        public NoisyPathfinderComponent NoisyPathfinder { get { return this[nameof(NoisyPathfinder)].As<NoisyPathfinderComponent>(); } set { this["NoisyPathfinder"] = value; } }
        public ProceduralTunnelComponent ProceduralTunnel { get { return this[nameof(ProceduralTunnel)].As<ProceduralTunnelComponent>(); } set { this["ProceduralTunnel"] = value; } }
        public PLSEncounterComponent Encounters { get { return this[nameof(Encounters)].As<PLSEncounterComponent>(); } set { this["Encounters"] = value; } }
        public ProceduralVeinsComponent Veins { get { return this[nameof(Veins)].As<ProceduralVeinsComponent>(); } set { this["Veins"] = value; } }
        public ProceduralResources Resources { get { return this[nameof(Resources)].As<ProceduralResources>(); } set { this["Resources"] = value; } }
        public ProceduralObjectColliders ObjectColliders { get { return this[nameof(ObjectColliders)].As<ProceduralObjectColliders>(); } set { this["ObjectColliders"] = value; } }
        public DeepCSGWorld CSGWorld { get { return this[nameof(CSGWorld)].As<DeepCSGWorld>(); } set { this["CSGWorld"] = value; } }
        public FloodFillSettings PathfinderNoise { get { return this[nameof(PathfinderNoise)].As<FloodFillSettings>(); } set { this["PathfinderNoise"] = value; } }
        public UArray<CarvedResource> CarvedResources { get { return new UArray<CarvedResource>(this[nameof(CarvedResources)].Address); } }
        public Object MissionDNA { get { return this[nameof(MissionDNA)]; } set { this[nameof(MissionDNA)] = value; } }
        public UArray<GemResourceAmount> GemResourcesToGenerate { get { return new UArray<GemResourceAmount>(this[nameof(GemResourcesToGenerate)].Address); } }
        public UArray<CollectableSpawnableItem> CollectablesToGenerate { get { return new UArray<CollectableSpawnableItem>(this[nameof(CollectablesToGenerate)].Address); } }
        public ESpawnSettings SpawnSettings { get { return (ESpawnSettings)this[nameof(SpawnSettings)].GetValue<int>(); } set { this[nameof(SpawnSettings)].SetValue<int>((int)value); } }
        public bool CanSpawnSpecialEvents { get { return this[nameof(CanSpawnSpecialEvents)].Flag; } set { this[nameof(CanSpawnSpecialEvents)].Flag = value; } }
        public bool ShouldCarveTunnels { get { return this[nameof(ShouldCarveTunnels)].Flag; } set { this[nameof(ShouldCarveTunnels)].Flag = value; } }
        public UArray<RoomNode> Rooms { get { return new UArray<RoomNode>(this[nameof(Rooms)].Address); } }
        public UArray<RoomNode> RoomsInitialState { get { return new UArray<RoomNode>(this[nameof(RoomsInitialState)].Address); } }
        public UArray<TunnelNode> tunnels { get { return new UArray<TunnelNode>(this[nameof(tunnels)].Address); } }
        public GeneratedInfluenceSets GeneratedInfluenceSets { get { return this[nameof(GeneratedInfluenceSets)].As<GeneratedInfluenceSets>(); } set { this["GeneratedInfluenceSets"] = value; } }
        public GeneratedInstantCarvers GeneratedInstantCarvers { get { return this[nameof(GeneratedInstantCarvers)].As<GeneratedInstantCarvers>(); } set { this["GeneratedInstantCarvers"] = value; } }
        public GeneratedDebris GeneratedDebris { get { return this[nameof(GeneratedDebris)].As<GeneratedDebris>(); } set { this["GeneratedDebris"] = value; } }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public float missionLength { get { return this[nameof(missionLength)].GetValue<float>(); } set { this[nameof(missionLength)].SetValue<float>(value); } }
        public UArray<PathObstacle> PathObstacles { get { return new UArray<PathObstacle>(this[nameof(PathObstacles)].Address); } }
        public InfluenceMap InfluenceMap { get { return this[nameof(InfluenceMap)].As<InfluenceMap>(); } set { this["InfluenceMap"] = value; } }
        public UArray<ResourceData> SpawnedResources { get { return new UArray<ResourceData>(this[nameof(SpawnedResources)].Address); } }
        public float CaveDepth { get { return this[nameof(CaveDepth)].GetValue<float>(); } set { this[nameof(CaveDepth)].SetValue<float>(value); } }
        public Actor PostProcessActor { get { return this[nameof(PostProcessActor)].As<Actor>(); } set { this["PostProcessActor"] = value; } }
        public SpecialEvent SpecialEvent { get { return this[nameof(SpecialEvent)].As<SpecialEvent>(); } set { this["SpecialEvent"] = value; } }
        public bool IsInitialized { get { return this[nameof(IsInitialized)].Flag; } set { this[nameof(IsInitialized)].Flag = value; } }
        public int CurrentRoomPass { get { return this[nameof(CurrentRoomPass)].GetValue<int>(); } set { this[nameof(CurrentRoomPass)].SetValue<int>(value); } }
        public bool Pass1Completed { get { return this[nameof(Pass1Completed)].Flag; } set { this[nameof(Pass1Completed)].Flag = value; } }
        public bool UsePerLevelCritterSpawning { get { return this[nameof(UsePerLevelCritterSpawning)].Flag; } set { this[nameof(UsePerLevelCritterSpawning)].Flag = value; } }
        public Object LastCompletedPLSPass { get { return this[nameof(LastCompletedPLSPass)]; } set { this[nameof(LastCompletedPLSPass)] = value; } }
        public void StartMusicAndAmbient(int Music) { Invoke(nameof(StartMusicAndAmbient), Music); }
        public void StartGenerationOnClient(FSDPlayerController client) { Invoke(nameof(StartGenerationOnClient), client); }
        public void SpawnSpecialEvents() { Invoke(nameof(SpawnSpecialEvents)); }
        public void SpawnObjectiveEncounter() { Invoke(nameof(SpawnObjectiveEncounter)); }
        public void SpawnObjectiveCriticalItems(ECriticalItemPass pass) { Invoke(nameof(SpawnObjectiveCriticalItems), pass); }
        public void SpawnItems_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo) { Invoke(nameof(SpawnItems_Async), Setup, LatentInfo); }
        public void SpawnItems() { Invoke(nameof(SpawnItems)); }
        public void SpawnEncounters() { Invoke(nameof(SpawnEncounters)); }
        public void SpawnDebrisItems_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo, EDebrisItemPass pass, int Depth) { Invoke(nameof(SpawnDebrisItems_Async), Setup, LatentInfo, pass, Depth); }
        public void SpawnDebrisItems(EDebrisItemPass pass) { Invoke(nameof(SpawnDebrisItems), pass); }
        public void SetSeed(int Seed) { Invoke(nameof(SetSeed), Seed); }
        public void ResetData() { Invoke(nameof(ResetData)); }
        public void RemoveBLockedEntrances() { Invoke(nameof(RemoveBLockedEntrances)); }
        public void OnPLSDataRecieved() { Invoke(nameof(OnPLSDataRecieved)); }
        public void OnObjectivesCompleted() { Invoke(nameof(OnObjectivesCompleted)); }
        public void OnCarverDataRecieved(EDebrisItemPass pass) { Invoke(nameof(OnCarverDataRecieved), pass); }
        public bool IsGeneratedDataReady() { return Invoke<bool>(nameof(IsGeneratedDataReady)); }
        public bool IsCarverDataReady(EDebrisItemPass pass) { return Invoke<bool>(nameof(IsCarverDataReady), pass); }
        public void InitializeObjectives() { Invoke(nameof(InitializeObjectives)); }
        public MissionDNA GetMissionDNA() { return Invoke<MissionDNA>(nameof(GetMissionDNA)); }
        public Object GetGemsResourceAmounts() { return Invoke<Object>(nameof(GetGemsResourceAmounts)); }
        public DeepCSGWorld GetCSGWorld() { return Invoke<DeepCSGWorld>(nameof(GetCSGWorld)); }
        public Object GetCollectablesResourceAmounts() { return Invoke<Object>(nameof(GetCollectablesResourceAmounts)); }
        public void GenerateRoomsFromGraph_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo, int CarvePass) { Invoke(nameof(GenerateRoomsFromGraph_Async), Setup, LatentInfo, CarvePass); }
        public void GenerateRoomsFromGraph(int CarvePass) { Invoke(nameof(GenerateRoomsFromGraph), CarvePass); }
        public void GenerateLandscapeFromData(int Seed, UArray<RoomNode> Rooms, UArray<PathObstacle> Obstacles) { Invoke(nameof(GenerateLandscapeFromData), Seed, Rooms, Obstacles); }
        public void GenerateLandscape() { Invoke(nameof(GenerateLandscape)); }
        public Vector FindLocationInDirection(Vector Origin, Vector Direction, float horizontalDeviation, float verticalDeviation, RandRange Distance, float additionalDistance) { return Invoke<Vector>(nameof(FindLocationInDirection), Origin, Direction, horizontalDeviation, verticalDeviation, Distance, additionalDistance); }
        public void FindEntrancesForAllConnections() { Invoke(nameof(FindEntrancesForAllConnections)); }
        public void FillTunnels_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo) { Invoke(nameof(FillTunnels_Async), Setup, LatentInfo); }
        public void FillTunnels() { Invoke(nameof(FillTunnels)); }
        public void DoneCarving() { Invoke(nameof(DoneCarving)); }
        public bool DoAsyncThreadGeneration() { return Invoke<bool>(nameof(DoAsyncThreadGeneration)); }
        public void CreateTunnelPaths() { Invoke(nameof(CreateTunnelPaths)); }
        public int CreateItemDepths() { return Invoke<int>(nameof(CreateItemDepths)); }
        public void CreateGeneratedInfluenceSet() { Invoke(nameof(CreateGeneratedInfluenceSet)); }
        public int ConnectRooms(RoomNode from, RoomNode to, bool hasDirt, TunnelParameters tunnelParameterOverride) { return Invoke<int>(nameof(ConnectRooms), from, to, hasDirt, tunnelParameterOverride); }
        public int ConnectRoomIds(int fromID, int toID, bool hasDirt, TunnelParameters tunnelParameterOverride) { return Invoke<int>(nameof(ConnectRoomIds), fromID, toID, hasDirt, tunnelParameterOverride); }
        public void CommitCarving(bool finalCommit, bool generateMesh) { Invoke(nameof(CommitCarving), finalCommit, generateMesh); }
        public void CarveWithGeneratedInstantCarvers() { Invoke(nameof(CarveWithGeneratedInstantCarvers)); }
        public void CarveTunnels() { Invoke(nameof(CarveTunnels)); }
        public void BeginLiveGeneration() { Invoke(nameof(BeginLiveGeneration)); }
        public void BeginGenerating() { Invoke(nameof(BeginGenerating)); }
        public void AddRoomToInitialState(RoomNode RoomNode) { Invoke(nameof(AddRoomToInitialState), RoomNode); }
        public int AddRoom(Vector Location, bool CanHaveEnemies, RoomGeneratorBase RoomGenerator, bool canBeRotated, Vector outCenter, RoomNode outRoom, float ResourceMultiplier) { return Invoke<int>(nameof(AddRoom), Location, CanHaveEnemies, RoomGenerator, canBeRotated, outCenter, outRoom, ResourceMultiplier); }
        public void AddInfluenceToTunnelEntrances(CaveInfluencer Influencer, float range) { Invoke(nameof(AddInfluenceToTunnelEntrances), Influencer, range); }
        public void AddImportantLocation(Vector Location, float Radius) { Invoke(nameof(AddImportantLocation), Location, Radius); }
        public void AddEnemyDebris() { Invoke(nameof(AddEnemyDebris)); }
        public int AddDebrisCollider(DebrisCapsule Capsule) { return Invoke<int>(nameof(AddDebrisCollider), Capsule); }
        public void AddCaveInfluence(CaveInfluencer Influencer, Vector Location, float range) { Invoke(nameof(AddCaveInfluence), Influencer, Location, range); }
        public int AddAirParticlesCollider(DebrisCapsule Capsule) { return Invoke<int>(nameof(AddAirParticlesCollider), Capsule); }
    }
    public class CaveInfluencer : DataAsset
    {
        public CaveInfluencer(nint addr) : base(addr) { }
    }
    public class ProceduralTunnelComponent : ActorComponent
    {
        public ProceduralTunnelComponent(nint addr) : base(addr) { }
        public TunnelParameters TunnelParameters { get { return this[nameof(TunnelParameters)].As<TunnelParameters>(); } set { this["TunnelParameters"] = value; } }
        public bool CreateDirt { get { return this[nameof(CreateDirt)].Flag; } set { this[nameof(CreateDirt)].Flag = value; } }
        public CaveInfluencer DirtInfluencer { get { return this[nameof(DirtInfluencer)].As<CaveInfluencer>(); } set { this["DirtInfluencer"] = value; } }
        public float DirtInfluencerRange { get { return this[nameof(DirtInfluencerRange)].GetValue<float>(); } set { this[nameof(DirtInfluencerRange)].SetValue<float>(value); } }
    }
    public class ProceduralVeinsComponent : ActorComponent
    {
        public ProceduralVeinsComponent(nint addr) : base(addr) { }
        public UArray<VeinResource> VeinResources { get { return new UArray<VeinResource>(this[nameof(VeinResources)].Address); } }
        public void GenerateResourceVeins_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateResourceVeins_Async), Setup, LatentInfo); }
        public void GenerateResourceVeins() { Invoke(nameof(GenerateResourceVeins)); }
        public void GenerateMissingResourceVeins_Async(ProceduralSetup Setup, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateMissingResourceVeins_Async), Setup, LatentInfo); }
        public void GenerateMissingResourceVeins() { Invoke(nameof(GenerateMissingResourceVeins)); }
        public void GenerateDebrisVeins_Async(ProceduralSetup Setup, EDebrisCarvedType CarverType, LatentActionInfo LatentInfo) { Invoke(nameof(GenerateDebrisVeins_Async), Setup, CarverType, LatentInfo); }
        public void GenerateDebrisVeins(EDebrisCarvedType CarverType) { Invoke(nameof(GenerateDebrisVeins), CarverType); }
        public void CountGeneratedResourcesInVeins() { Invoke(nameof(CountGeneratedResourcesInVeins)); }
        public void CountFinalGeneratedResourcesInVeins() { Invoke(nameof(CountFinalGeneratedResourcesInVeins)); }
        public void CalculateResourceDistribution() { Invoke(nameof(CalculateResourceDistribution)); }
    }
    public class ProfilingSubSystem : WorldSubsystem
    {
        public ProfilingSubSystem(nint addr) : base(addr) { }
        public UArray<ProfileEntry> Entries { get { return new UArray<ProfileEntry>(this[nameof(Entries)].Address); } }
        public float GetTotalTime() { return Invoke<float>(nameof(GetTotalTime)); }
        public UArray<ProfileEntry> GetEntries() { return Invoke<UArray<ProfileEntry>>(nameof(GetEntries)); }
        public UArray<ProfileCategoryTiming> GetCategoryTimings() { return Invoke<UArray<ProfileCategoryTiming>>(nameof(GetCategoryTimings)); }
    }
    public class FakePhysicsProjectile : ProjectileBase
    {
        public FakePhysicsProjectile(nint addr) : base(addr) { }
        public FakeMoverState MoverState { get { return this[nameof(MoverState)].As<FakeMoverState>(); } set { this["MoverState"] = value; } }
        public FakeMoveState PosVel { get { return this[nameof(PosVel)].As<FakeMoveState>(); } set { this["PosVel"] = value; } }
        public FakeMoverSettings MoveSettings { get { return this[nameof(MoveSettings)].As<FakeMoverSettings>(); } set { this["MoveSettings"] = value; } }
        public float InitialSpeed { get { return this[nameof(InitialSpeed)].GetValue<float>(); } set { this[nameof(InitialSpeed)].SetValue<float>(value); } }
        public float DampOmega { get { return this[nameof(DampOmega)].GetValue<float>(); } set { this[nameof(DampOmega)].SetValue<float>(value); } }
        public float SyncTime { get { return this[nameof(SyncTime)].GetValue<float>(); } set { this[nameof(SyncTime)].SetValue<float>(value); } }
        public void SphereBeginOverlap(PrimitiveComponent OverlappedComp, Actor Other, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(SphereBeginOverlap), OverlappedComp, Other, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void OnRep_PosVel(FakeMoveState PosVel) { Invoke(nameof(OnRep_PosVel), PosVel); }
    }
    public class ProjectileAttack : Object
    {
        public ProjectileAttack(nint addr) : base(addr) { }
        public FloatInterval Delay { get { return this[nameof(Delay)].As<FloatInterval>(); } set { this["Delay"] = value; } }
        public bool TriggerOnEvent { get { return this[nameof(TriggerOnEvent)].Flag; } set { this[nameof(TriggerOnEvent)].Flag = value; } }
        public FloatInterval HorizontalAngleOffset { get { return this[nameof(HorizontalAngleOffset)].As<FloatInterval>(); } set { this["HorizontalAngleOffset"] = value; } }
        public FloatInterval VerticalAngleOffset { get { return this[nameof(VerticalAngleOffset)].As<FloatInterval>(); } set { this["VerticalAngleOffset"] = value; } }
        public Object OverrideSocketName { get { return this[nameof(OverrideSocketName)]; } set { this[nameof(OverrideSocketName)] = value; } }
    }
    public class NormalProjectileAttack : ProjectileAttack
    {
        public NormalProjectileAttack(nint addr) : base(addr) { }
        public Object Projectile { get { return this[nameof(Projectile)]; } set { this[nameof(Projectile)] = value; } }
        public float RandomAngle { get { return this[nameof(RandomAngle)].GetValue<float>(); } set { this[nameof(RandomAngle)].SetValue<float>(value); } }
    }
    public class BallisticProjectileAttack : ProjectileAttack
    {
        public BallisticProjectileAttack(nint addr) : base(addr) { }
        public Object Projectile { get { return this[nameof(Projectile)]; } set { this[nameof(Projectile)] = value; } }
        public float ProjectileArc { get { return this[nameof(ProjectileArc)].GetValue<float>(); } set { this[nameof(ProjectileArc)].SetValue<float>(value); } }
        public float Gravity { get { return this[nameof(Gravity)].GetValue<float>(); } set { this[nameof(Gravity)].SetValue<float>(value); } }
    }
    public class ProjectileAttackBaseComponent : AttackBaseComponent
    {
        public ProjectileAttackBaseComponent(nint addr) : base(addr) { }
        public UArray<ProjectileAttack> Projectiles { get { return new UArray<ProjectileAttack>(this[nameof(Projectiles)].Address); } }
        public UArray<AnimMontage> Montages { get { return new UArray<AnimMontage>(this[nameof(Montages)].Address); } }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public EProjectileAttackRotationType RotationHandling { get { return (EProjectileAttackRotationType)this[nameof(RotationHandling)].GetValue<int>(); } set { this[nameof(RotationHandling)].SetValue<int>((int)value); } }
        public TargetValidator FinalValidationCheck { get { return this[nameof(FinalValidationCheck)].As<TargetValidator>(); } set { this["FinalValidationCheck"] = value; } }
        public bool ProjectilesIgnoreEachOther { get { return this[nameof(ProjectilesIgnoreEachOther)].Flag; } set { this[nameof(ProjectilesIgnoreEachOther)].Flag = value; } }
        public Object OnAttackStartedEvent { get { return this[nameof(OnAttackStartedEvent)]; } set { this[nameof(OnAttackStartedEvent)] = value; } }
        public Object OnProjectileFiredEvent { get { return this[nameof(OnProjectileFiredEvent)]; } set { this[nameof(OnProjectileFiredEvent)] = value; } }
        public Object OnAttackEndedEvent { get { return this[nameof(OnAttackEndedEvent)]; } set { this[nameof(OnAttackEndedEvent)] = value; } }
        public Object OnProjectileSpawnedEvent { get { return this[nameof(OnProjectileSpawnedEvent)]; } set { this[nameof(OnProjectileSpawnedEvent)] = value; } }
        public bool TriggerMontage(Actor Target) { return Invoke<bool>(nameof(TriggerMontage), Target); }
        public AnimMontage SelectMontage() { return Invoke<AnimMontage>(nameof(SelectMontage)); }
        public void OnPerformAttack() { Invoke(nameof(OnPerformAttack)); }
        public void OnMontageEnded(AnimMontage Montage, bool interrupted) { Invoke(nameof(OnMontageEnded), Montage, interrupted); }
        public void MulticastProjectileFired() { Invoke(nameof(MulticastProjectileFired)); }
        public void CancelMontage() { Invoke(nameof(CancelMontage)); }
    }
    public class ProjectileAttackComponent : ProjectileAttackBaseComponent
    {
        public ProjectileAttackComponent(nint addr) : base(addr) { }
        public bool ManualyComplete { get { return this[nameof(ManualyComplete)].Flag; } set { this[nameof(ManualyComplete)].Flag = value; } }
        public void AddAttackMontage(AnimMontage attackMontage) { Invoke(nameof(AddAttackMontage), attackMontage); }
    }
    public class ExplosionBaseComponent : ActorComponent
    {
        public ExplosionBaseComponent(nint addr) : base(addr) { }
        public float CarveDiameterCM { get { return this[nameof(CarveDiameterCM)].GetValue<float>(); } set { this[nameof(CarveDiameterCM)].SetValue<float>(value); } }
        public float CarveNoiseCM { get { return this[nameof(CarveNoiseCM)].GetValue<float>(); } set { this[nameof(CarveNoiseCM)].SetValue<float>(value); } }
        public float CarveBurnThicknessCM { get { return this[nameof(CarveBurnThicknessCM)].GetValue<float>(); } set { this[nameof(CarveBurnThicknessCM)].SetValue<float>(value); } }
        public float CarveNormalOffsetCM { get { return this[nameof(CarveNormalOffsetCM)].GetValue<float>(); } set { this[nameof(CarveNormalOffsetCM)].SetValue<float>(value); } }
        public float CarveNormalSqueeze { get { return this[nameof(CarveNormalSqueeze)].GetValue<float>(); } set { this[nameof(CarveNormalSqueeze)].SetValue<float>(value); } }
        public void DamageOnlyFromHit(HitResult HitResult, DamageComponent DamageComponent) { Invoke(nameof(DamageOnlyFromHit), HitResult, DamageComponent); }
        public void DamageOnly(Vector Location, Object BoneName, PrimitiveComponent Target, PhysicalMaterial PhysicalMaterial, DamageComponent DamageComponent) { Invoke(nameof(DamageOnly), Location, BoneName, Target, PhysicalMaterial, DamageComponent); }
        public void DamageArmorClients(HitResult HitResult, DamageComponent DamageComponent) { Invoke(nameof(DamageArmorClients), HitResult, DamageComponent); }
        public void DamageAndCarveFromHit(HitResult HitResult, DamageComponent DamageComponent) { Invoke(nameof(DamageAndCarveFromHit), HitResult, DamageComponent); }
        public void DamageAndCarve(Vector Location, Vector ImpactNormal, Object BoneName, PrimitiveComponent Target, PhysicalMaterial PhysicalMaterial, DamageComponent DamageComponent) { Invoke(nameof(DamageAndCarve), Location, ImpactNormal, BoneName, Target, PhysicalMaterial, DamageComponent); }
        public void CarveOnly(Vector Location, Vector ImpactNormal) { Invoke(nameof(CarveOnly), Location, ImpactNormal); }
    }
    public class ExplosionComponent : ExplosionBaseComponent
    {
        public ExplosionComponent(nint addr) : base(addr) { }
    }
    public class ProjectileExplosion : ExplosionBaseComponent
    {
        public ProjectileExplosion(nint addr) : base(addr) { }
        public ScaledEffect ExplosionEffect { get { return this[nameof(ExplosionEffect)].As<ScaledEffect>(); } set { this["ExplosionEffect"] = value; } }
        public SoundCue ExplosionSound { get { return this[nameof(ExplosionSound)].As<SoundCue>(); } set { this["ExplosionSound"] = value; } }
        public ForceFeedbackEffect ForceFeedbackEffect { get { return this[nameof(ForceFeedbackEffect)].As<ForceFeedbackEffect>(); } set { this["ForceFeedbackEffect"] = value; } }
        public ForceFeedbackAttenuation ForceFeedbackAttanuation { get { return this[nameof(ForceFeedbackAttanuation)].As<ForceFeedbackAttenuation>(); } set { this["ForceFeedbackAttanuation"] = value; } }
        public void SpawnEffectsFromHit(HitResult Hit) { Invoke(nameof(SpawnEffectsFromHit), Hit); }
        public void SpawnEffects(Vector Location, Vector Normal) { Invoke(nameof(SpawnEffects), Location, Normal); }
    }
    public class ProjectileLauncherBaseComponent : WeaponFireComponent
    {
        public ProjectileLauncherBaseComponent(nint addr) : base(addr) { }
        public bool IgnoreCollisionWithSelf { get { return this[nameof(IgnoreCollisionWithSelf)].Flag; } set { this[nameof(IgnoreCollisionWithSelf)].Flag = value; } }
        public bool UseProjectileUpgrades { get { return this[nameof(UseProjectileUpgrades)].Flag; } set { this[nameof(UseProjectileUpgrades)].Flag = value; } }
        public bool UseSpread { get { return this[nameof(UseSpread)].Flag; } set { this[nameof(UseSpread)].Flag = value; } }
        public float VerticalSpread { get { return this[nameof(VerticalSpread)].GetValue<float>(); } set { this[nameof(VerticalSpread)].SetValue<float>(value); } }
        public float HorizontalSpread { get { return this[nameof(HorizontalSpread)].GetValue<float>(); } set { this[nameof(HorizontalSpread)].SetValue<float>(value); } }
        public Object OnProjectileSpawned { get { return this[nameof(OnProjectileSpawned)]; } set { this[nameof(OnProjectileSpawned)] = value; } }
        public UArray<ItemUpgrade> ProjectileUpgrades { get { return new UArray<ItemUpgrade>(this[nameof(ProjectileUpgrades)].Address); } }
        public float ArcStartAngle { get { return this[nameof(ArcStartAngle)].GetValue<float>(); } set { this[nameof(ArcStartAngle)].SetValue<float>(value); } }
        public bool TransferCharacterVelocityToProjectile { get { return this[nameof(TransferCharacterVelocityToProjectile)].Flag; } set { this[nameof(TransferCharacterVelocityToProjectile)].Flag = value; } }
        public bool CameraToMuzzleFireCheck { get { return this[nameof(CameraToMuzzleFireCheck)].Flag; } set { this[nameof(CameraToMuzzleFireCheck)].Flag = value; } }
        public void Server_StopFire() { Invoke(nameof(Server_StopFire)); }
        public void Server_Fire(Transform Transform, Vector_NetQuantizeNormal initialBonusVelocity, ProjectileBase DormentProjectile, bool notifyClients) { Invoke(nameof(Server_Fire), Transform, initialBonusVelocity, DormentProjectile, notifyClients); }
        public void ProjectileSpawned__DelegateSignature(ProjectileBase Projectile) { Invoke(nameof(ProjectileSpawned__DelegateSignature), Projectile); }
        public void All_ShowHit() { Invoke(nameof(All_ShowHit)); }
    }
    public class ProjectileLauncherComponent : ProjectileLauncherBaseComponent
    {
        public ProjectileLauncherComponent(nint addr) : base(addr) { }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public void SetProjectileClass(Object NewProjectileClass) { Invoke(nameof(SetProjectileClass), NewProjectileClass); }
    }
    public class ChargedProjectileLauncherComponent : ProjectileLauncherBaseComponent
    {
        public ChargedProjectileLauncherComponent(nint addr) : base(addr) { }
        public Object NormalProjectileClass { get { return this[nameof(NormalProjectileClass)]; } set { this[nameof(NormalProjectileClass)] = value; } }
        public Object ChargedProjectileClass { get { return this[nameof(ChargedProjectileClass)]; } set { this[nameof(ChargedProjectileClass)] = value; } }
        public float ProjectileChangeChargeValue { get { return this[nameof(ProjectileChangeChargeValue)].GetValue<float>(); } set { this[nameof(ProjectileChangeChargeValue)].SetValue<float>(value); } }
        public void SetProjectileClassCharged(Object NewProjectileClass) { Invoke(nameof(SetProjectileClassCharged), NewProjectileClass); }
        public void SetProjectileClass(Object NewProjectileClass) { Invoke(nameof(SetProjectileClass), NewProjectileClass); }
    }
    public class ProjectileThrowerAttack : ProjectileAttackComponent
    {
        public ProjectileThrowerAttack(nint addr) : base(addr) { }
        public SkeletalMesh ThrowerMesh { get { return this[nameof(ThrowerMesh)].As<SkeletalMesh>(); } set { this["ThrowerMesh"] = value; } }
        public Object ThrowerAnimInstance { get { return this[nameof(ThrowerAnimInstance)]; } set { this[nameof(ThrowerAnimInstance)] = value; } }
        public UArray<AnimMontage> ThrowerMontages { get { return new UArray<AnimMontage>(this[nameof(ThrowerMontages)].Address); } }
        public Object ThrowerAttachPoint { get { return this[nameof(ThrowerAttachPoint)]; } set { this[nameof(ThrowerAttachPoint)] = value; } }
        public bool RotateToTarget { get { return this[nameof(RotateToTarget)].Flag; } set { this[nameof(RotateToTarget)].Flag = value; } }
        public Rotator ThrowerRotation { get { return this[nameof(ThrowerRotation)].As<Rotator>(); } set { this["ThrowerRotation"] = value; } }
        public Vector ThrowerOffset { get { return this[nameof(ThrowerOffset)].As<Vector>(); } set { this["ThrowerOffset"] = value; } }
        public void OnThrowerMontageEnded(AnimMontage Montage, bool bInterrupted) { Invoke(nameof(OnThrowerMontageEnded), Montage, bInterrupted); }
        public void All_ShowThrowerAnimation() { Invoke(nameof(All_ShowThrowerAnimation)); }
    }
    public class PromotionRewardsSettings : DataAsset
    {
        public PromotionRewardsSettings(nint addr) : base(addr) { }
        public UArray<ClaimableRewardEntry> FirstPromotionRewards { get { return new UArray<ClaimableRewardEntry>(this[nameof(FirstPromotionRewards)].Address); } }
        public UArray<ClaimableRewardEntry> SubsequentPromotionRewards { get { return new UArray<ClaimableRewardEntry>(this[nameof(SubsequentPromotionRewards)].Address); } }
    }
    public class PromotionRewardsLibrary : BlueprintFunctionLibrary
    {
        public PromotionRewardsLibrary(nint addr) : base(addr) { }
        public bool HasPendingPromotionRewards(Object WorldContext) { return Invoke<bool>(nameof(HasPendingPromotionRewards), WorldContext); }
        public bool ClaimPromotionRewards(Object WorldContext, PlayerController PlayerController, UArray<ClaimableRewardEntry> OutRewards, bool OutFirstPromotion) { return Invoke<bool>(nameof(ClaimPromotionRewards), WorldContext, PlayerController, OutRewards, OutFirstPromotion); }
    }
    public class PropHuntContestant : ActorComponent
    {
        public PropHuntContestant(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public PropHuntContestantState State { get { return this[nameof(State)].As<PropHuntContestantState>(); } set { this["State"] = value; } }
        public PropHuntContestantState previousState { get { return this[nameof(previousState)].As<PropHuntContestantState>(); } set { this["previousState"] = value; } }
        public Object DisguiseActor { get { return this[nameof(DisguiseActor)]; } set { this[nameof(DisguiseActor)] = value; } }
        public Object OverlayWidget { get { return this[nameof(OverlayWidget)]; } set { this[nameof(OverlayWidget)] = value; } }
        public PropHuntContestantState CurrentState { get { return this[nameof(CurrentState)].As<PropHuntContestantState>(); } set { this["CurrentState"] = value; } }
        public void PropHuntDelegate__DelegateSignature(PropHuntContestant ContestantComponent) { Invoke(nameof(PropHuntDelegate__DelegateSignature), ContestantComponent); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnPlayerStateChanged(ECharacterState InState) { Invoke(nameof(OnPlayerStateChanged), InState); }
        public void OnPlayerPassedOut(PlayerCharacter InPlayer) { Invoke(nameof(OnPlayerPassedOut), InPlayer); }
        public void OnPlayerDestroyed(Actor InActor) { Invoke(nameof(OnPlayerDestroyed), InActor); }
        public void OnPlayerCameraChanged(ECharacterCameraMode OldMode, ECharacterCameraMode NewMode) { Invoke(nameof(OnPlayerCameraChanged), OldMode, NewMode); }
        public void OnItemUnequipped(Item InItem) { Invoke(nameof(OnItemUnequipped), InItem); }
        public int GetRemainingLives() { return Invoke<int>(nameof(GetRemainingLives)); }
        public EPropHuntRole GetPropHuntRole() { return Invoke<EPropHuntRole>(nameof(GetPropHuntRole)); }
        public int GetMaxLives() { return Invoke<int>(nameof(GetMaxLives)); }
        public void Client_ShowEndScreen(EPropHuntEndScreen EndScreenType, bool GameWon) { Invoke(nameof(Client_ShowEndScreen), EndScreenType, GameWon); }
    }
    public class PropHuntOverlayWidget : UserWidget
    {
        public PropHuntOverlayWidget(nint addr) : base(addr) { }
        public Object PropHuntManager { get { return this[nameof(PropHuntManager)]; } set { this[nameof(PropHuntManager)] = value; } }
        public Object ContestantComponent { get { return this[nameof(ContestantComponent)]; } set { this[nameof(ContestantComponent)] = value; } }
        public Object PlayerCharacter { get { return this[nameof(PlayerCharacter)]; } set { this[nameof(PlayerCharacter)] = value; } }
        public void ShowMe() { Invoke(nameof(ShowMe)); }
        public void HideMe() { Invoke(nameof(HideMe)); }
    }
    public class PropHuntEndScreenWidget : UserWidget
    {
        public PropHuntEndScreenWidget(nint addr) : base(addr) { }
        public EPropHuntEndScreen EndScreenType { get { return (EPropHuntEndScreen)this[nameof(EndScreenType)].GetValue<int>(); } set { this[nameof(EndScreenType)].SetValue<int>((int)value); } }
        public bool GameWon { get { return this[nameof(GameWon)].Flag; } set { this[nameof(GameWon)].Flag = value; } }
    }
    public class PropHuntDisguiseActor : Actor
    {
        public PropHuntDisguiseActor(nint addr) : base(addr) { }
        public DialogDataAsset ShoutDrinkOverride { get { return this[nameof(ShoutDrinkOverride)].As<DialogDataAsset>(); } set { this["ShoutDrinkOverride"] = value; } }
        public CapsuleComponent CapsuleComponent { get { return this[nameof(CapsuleComponent)].As<CapsuleComponent>(); } set { this["CapsuleComponent"] = value; } }
        public SceneComponent ContentComponent { get { return this[nameof(ContentComponent)].As<SceneComponent>(); } set { this["ContentComponent"] = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public void ReceiveRefresh(RandomStream InRandom) { Invoke(nameof(ReceiveRefresh), InRandom); }
    }
    public class PropHuntDrinkEffect : DrinkEffectComponent
    {
        public PropHuntDrinkEffect(nint addr) : base(addr) { }
        public int BarSlotIndex { get { return this[nameof(BarSlotIndex)].GetValue<int>(); } set { this[nameof(BarSlotIndex)].SetValue<int>(value); } }
    }
    public class PropHuntHunterItem : ThrowableItem
    {
        public PropHuntHunterItem(nint addr) : base(addr) { }
        public Object ContestantComponent { get { return this[nameof(ContestantComponent)]; } set { this[nameof(ContestantComponent)] = value; } }
        public void CameraModeUpdated(ECharacterCameraMode NewCameraMode, ECharacterCameraMode OldCameraMode) { Invoke(nameof(CameraModeUpdated), NewCameraMode, OldCameraMode); }
    }
    public class PropHuntManager : ActorComponent
    {
        public PropHuntManager(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public PropHuntManagerState State { get { return this[nameof(State)].As<PropHuntManagerState>(); } set { this["State"] = value; } }
        public UArray<Object> Contestants { get { return new UArray<Object>(this[nameof(Contestants)].Address); } }
        public void StateChangedDelegate__DelegateSignature() { Invoke(nameof(StateChangedDelegate__DelegateSignature)); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public int GetActiveProps() { return Invoke<int>(nameof(GetActiveProps)); }
        public int GetActiveHunters() { return Invoke<int>(nameof(GetActiveHunters)); }
    }
    public class PropHuntSettings : DataAsset
    {
        public PropHuntSettings(nint addr) : base(addr) { }
        public int MaxAmmo { get { return this[nameof(MaxAmmo)].GetValue<int>(); } set { this[nameof(MaxAmmo)].SetValue<int>(value); } }
        public int BonusAmmoOnHit { get { return this[nameof(BonusAmmoOnHit)].GetValue<int>(); } set { this[nameof(BonusAmmoOnHit)].SetValue<int>(value); } }
        public PropHuntSettingsShouts Shouts { get { return this[nameof(Shouts)].As<PropHuntSettingsShouts>(); } set { this["Shouts"] = value; } }
        public Object OverlayWidget { get { return this[nameof(OverlayWidget)]; } set { this[nameof(OverlayWidget)] = value; } }
        public Object EndScreenWidget { get { return this[nameof(EndScreenWidget)]; } set { this[nameof(EndScreenWidget)] = value; } }
        public Object HunterItem { get { return this[nameof(HunterItem)]; } set { this[nameof(HunterItem)] = value; } }
        public Object DisguiseActors { get { return this[nameof(DisguiseActors)]; } set { this[nameof(DisguiseActors)] = value; } }
        public Object HolidayDisguiseActors { get { return this[nameof(HolidayDisguiseActors)]; } set { this[nameof(HolidayDisguiseActors)] = value; } }
        public Object ParticlesOnPropSpawn { get { return this[nameof(ParticlesOnPropSpawn)]; } set { this[nameof(ParticlesOnPropSpawn)] = value; } }
        public Object ParticlesOnPropHit { get { return this[nameof(ParticlesOnPropHit)]; } set { this[nameof(ParticlesOnPropHit)] = value; } }
        public Object ParticlesOnPropMiss { get { return this[nameof(ParticlesOnPropMiss)]; } set { this[nameof(ParticlesOnPropMiss)] = value; } }
        public Object AudioHunterBegin { get { return this[nameof(AudioHunterBegin)]; } set { this[nameof(AudioHunterBegin)] = value; } }
        public Object AudioHunterThrowableMiss { get { return this[nameof(AudioHunterThrowableMiss)]; } set { this[nameof(AudioHunterThrowableMiss)] = value; } }
        public Object AudioHunterThrowableHit { get { return this[nameof(AudioHunterThrowableHit)]; } set { this[nameof(AudioHunterThrowableHit)] = value; } }
        public Object AudioPropBegin { get { return this[nameof(AudioPropBegin)]; } set { this[nameof(AudioPropBegin)] = value; } }
        public Object AudioPropEnd { get { return this[nameof(AudioPropEnd)]; } set { this[nameof(AudioPropEnd)] = value; } }
        public Object AudioGameWon { get { return this[nameof(AudioGameWon)]; } set { this[nameof(AudioGameWon)] = value; } }
        public Object AudioGameLost { get { return this[nameof(AudioGameLost)]; } set { this[nameof(AudioGameLost)] = value; } }
        public void PlayEventAudio(Pawn InCharacter, byte InEvent, bool InPlay2D) { Invoke(nameof(PlayEventAudio), InCharacter, InEvent, InPlay2D); }
        public void GetHunterThrowableImpactFX(Object WorldContext, Actor InHitActor, SoundCue OutSound, NiagaraSystem OutParticles) { Invoke(nameof(GetHunterThrowableImpactFX), WorldContext, InHitActor, OutSound, OutParticles); }
    }
    public class PropHuntInitializerComponent : ActorComponent
    {
        public PropHuntInitializerComponent(nint addr) : base(addr) { }
    }
    public class ProspectorObjective : Objective
    {
        public ProspectorObjective(nint addr) : base(addr) { }
        public Object ProspectorClass { get { return this[nameof(ProspectorClass)]; } set { this[nameof(ProspectorClass)] = value; } }
        public DebrisPositioning DebrisPositioning { get { return this[nameof(DebrisPositioning)].As<DebrisPositioning>(); } set { this["DebrisPositioning"] = value; } }
        public Object ActiveProspector { get { return this[nameof(ActiveProspector)]; } set { this[nameof(ActiveProspector)] = value; } }
        public void OnRep_ActiveProspector() { Invoke(nameof(OnRep_ActiveProspector)); }
        public void OnProspectorDeath(HealthComponentBase Health) { Invoke(nameof(OnProspectorDeath), Health); }
        public bool IsProspectorDead() { return Invoke<bool>(nameof(IsProspectorDead)); }
    }
    public class ProspectorRobot : EnemyDeepPathfinderCharacter
    {
        public ProspectorRobot(nint addr) : base(addr) { }
        public float WorkingArmSpeed { get { return this[nameof(WorkingArmSpeed)].GetValue<float>(); } set { this[nameof(WorkingArmSpeed)].SetValue<float>(value); } }
        public float EnginePowerMultiplier { get { return this[nameof(EnginePowerMultiplier)].GetValue<float>(); } set { this[nameof(EnginePowerMultiplier)].SetValue<float>(value); } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public float HeadResponsiveness { get { return this[nameof(HeadResponsiveness)].GetValue<float>(); } set { this[nameof(HeadResponsiveness)].SetValue<float>(value); } }
        public float HeadSearchSpeed { get { return this[nameof(HeadSearchSpeed)].GetValue<float>(); } set { this[nameof(HeadSearchSpeed)].SetValue<float>(value); } }
        public float HeadSearchMaxAngle { get { return this[nameof(HeadSearchMaxAngle)].GetValue<float>(); } set { this[nameof(HeadSearchMaxAngle)].SetValue<float>(value); } }
        public MaterialInstanceDynamic EngineMaterial { get { return this[nameof(EngineMaterial)].As<MaterialInstanceDynamic>(); } set { this["EngineMaterial"] = value; } }
        public EProspectorRobotState ProspectorState { get { return (EProspectorRobotState)this[nameof(ProspectorState)].GetValue<int>(); } set { this[nameof(ProspectorState)].SetValue<int>((int)value); } }
        public void SetTarget(Actor Target) { Invoke(nameof(SetTarget), Target); }
        public void SetArmSpeed(float Speed) { Invoke(nameof(SetArmSpeed), Speed); }
        public void OnStateEnd(EProspectorRobotState oldState) { Invoke(nameof(OnStateEnd), oldState); }
        public void OnStateBegin(EProspectorRobotState NewState) { Invoke(nameof(OnStateBegin), NewState); }
        public void OnRep_ProspectorState(EProspectorRobotState oldState) { Invoke(nameof(OnRep_ProspectorState), oldState); }
        public bool IsStateActive(EProspectorRobotState State) { return Invoke<bool>(nameof(IsStateActive), State); }
        public void ChangeState(EProspectorRobotState NewState) { Invoke(nameof(ChangeState), NewState); }
    }
    public class ProspectorAnimInstance : EnemyAnimInstance
    {
        public ProspectorAnimInstance(nint addr) : base(addr) { }
        public Vector2D TiltResult { get { return this[nameof(TiltResult)].As<Vector2D>(); } set { this["TiltResult"] = value; } }
        public Vector2D LookingResult { get { return this[nameof(LookingResult)].As<Vector2D>(); } set { this["LookingResult"] = value; } }
        public EProspectorRobotState ProspectorState { get { return (EProspectorRobotState)this[nameof(ProspectorState)].GetValue<int>(); } set { this[nameof(ProspectorState)].SetValue<int>((int)value); } }
        public float ArmBusyness { get { return this[nameof(ArmBusyness)].GetValue<float>(); } set { this[nameof(ArmBusyness)].SetValue<float>(value); } }
    }
    public class PushingState : CharacterStateComponent
    {
        public PushingState(nint addr) : base(addr) { }
        public UseAnimationSetting PushingAnimation { get { return this[nameof(PushingAnimation)].As<UseAnimationSetting>(); } set { this["PushingAnimation"] = value; } }
    }
    public class RadarPointComponent : ActorComponent
    {
        public RadarPointComponent(nint addr) : base(addr) { }
        public Object OnRemove { get { return this[nameof(OnRemove)]; } set { this[nameof(OnRemove)] = value; } }
        public float PointPriority { get { return this[nameof(PointPriority)].GetValue<float>(); } set { this[nameof(PointPriority)].SetValue<float>(value); } }
        public Object WidgetClass { get { return this[nameof(WidgetClass)]; } set { this[nameof(WidgetClass)] = value; } }
        public void MapToRadarPosition(Vector playerPos, Vector playerForward, Vector Pos, bool snap, Vector radarPos, float alpha) { Invoke(nameof(MapToRadarPosition), playerPos, playerForward, Pos, snap, radarPos, alpha); }
    }
    public class NetworkedRadarPointComponent : RadarPointComponent
    {
        public NetworkedRadarPointComponent(nint addr) : base(addr) { }
    }
    public class RagdollManager : ActorComponent
    {
        public RagdollManager(nint addr) : base(addr) { }
        public UArray<RagdollItem> Items { get { return new UArray<RagdollItem>(this[nameof(Items)].Address); } }
        public void StartRagdoll(Actor Actor, UArray<MaterialInstanceDynamic> Materials, float desiredDuration) { Invoke(nameof(StartRagdoll), Actor, Materials, desiredDuration); }
    }
    public class RagdollEliminationComponent : SceneComponent
    {
        public RagdollEliminationComponent(nint addr) : base(addr) { }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public UArray<EnemyDeepPathfinderCharacter> EnemiesTracked { get { return new UArray<EnemyDeepPathfinderCharacter>(this[nameof(EnemiesTracked)].Address); } }
        public void OnEnemyKilled(GameplayTagContainer GameplayTags, Actor killedEnemy) { Invoke(nameof(OnEnemyKilled), GameplayTags, killedEnemy); }
    }
    public class RandomSelectorItem : GenerationItem
    {
        public RandomSelectorItem(nint addr) : base(addr) { }
        public int Min { get { return this[nameof(Min)].GetValue<int>(); } set { this[nameof(Min)].SetValue<int>(value); } }
        public int Max { get { return this[nameof(Max)].GetValue<int>(); } set { this[nameof(Max)].SetValue<int>(value); } }
    }
    public class RandRangeFunctionLibrary : BlueprintFunctionLibrary
    {
        public RandRangeFunctionLibrary(nint addr) : base(addr) { }
        public bool TryPickRandomText(UArray<Object> TextArray, RandomStream RandomStream, Object OutResult) { return Invoke<bool>(nameof(TryPickRandomText), TextArray, RandomStream, OutResult); }
        public Object PickRandomText(UArray<Object> TextArray, RandomStream RandomStream) { return Invoke<Object>(nameof(PickRandomText), TextArray, RandomStream); }
        public int GetValueFromStream(IRandRange RandRange, RandomStream RandomStream) { return Invoke<int>(nameof(GetValueFromStream), RandRange, RandomStream); }
        public float GetFloatValue(RandRange RandRange) { return Invoke<float>(nameof(GetFloatValue), RandRange); }
        public float GetFloatFromStream(RandRange RandRange, RandomStream RandomStream) { return Invoke<float>(nameof(GetFloatFromStream), RandRange, RandomStream); }
    }
    public class RandIntervalFunctionLibrary : BlueprintFunctionLibrary
    {
        public RandIntervalFunctionLibrary(nint addr) : base(addr) { }
        public float GetFloatValue(RandInterval RandInterval) { return Invoke<float>(nameof(GetFloatValue), RandInterval); }
    }
    public class RDGComponent : ActorComponent
    {
        public RDGComponent(nint addr) : base(addr) { }
        public Object OnDetonated { get { return this[nameof(OnDetonated)]; } set { this[nameof(OnDetonated)] = value; } }
    }
    public class RDGLauncher : AmmoDrivenWeapon
    {
        public RDGLauncher(nint addr) : base(addr) { }
        public UArray<RDGComponent> ActiveGrenades { get { return new UArray<RDGComponent>(this[nameof(ActiveGrenades)].Address); } }
        public void Server_DetonateAll() { Invoke(nameof(Server_DetonateAll)); }
        public void RegisterGrenade(RDGComponent Grenade) { Invoke(nameof(RegisterGrenade), Grenade); }
    }
    public class ReactiveTerrain : Object
    {
        public ReactiveTerrain(nint addr) : base(addr) { }
        public void Receive_OnActorLeft(StatusEffectsComponent StatusEffects) { Invoke(nameof(Receive_OnActorLeft), StatusEffects); }
        public void Receive_OnActorEntered(StatusEffectsComponent StatusEffects) { Invoke(nameof(Receive_OnActorEntered), StatusEffects); }
    }
    public class StatusEffectReactiveTerrain : ReactiveTerrain
    {
        public StatusEffectReactiveTerrain(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
    }
    public class ReactiveTerrainTrackerComponent : ActorComponent
    {
        public ReactiveTerrainTrackerComponent(nint addr) : base(addr) { }
    }
    public class PlayerReactiveTerrainTrackerComponent : ReactiveTerrainTrackerComponent
    {
        public PlayerReactiveTerrainTrackerComponent(nint addr) : base(addr) { }
        public FSDPhysicalMaterial CurrentPhysicalMaterial { get { return this[nameof(CurrentPhysicalMaterial)].As<FSDPhysicalMaterial>(); } set { this["CurrentPhysicalMaterial"] = value; } }
    }
    public class PathfinderReactiveTerrainTrackerComponent : ReactiveTerrainTrackerComponent
    {
        public PathfinderReactiveTerrainTrackerComponent(nint addr) : base(addr) { }
        public RandRange CheckInterval { get { return this[nameof(CheckInterval)].As<RandRange>(); } set { this["CheckInterval"] = value; } }
        public FSDPhysicalMaterial CurrentPhysicalMaterial { get { return this[nameof(CurrentPhysicalMaterial)].As<FSDPhysicalMaterial>(); } set { this["CurrentPhysicalMaterial"] = value; } }
        public StatusEffectsComponent StatusEffectsComponent { get { return this[nameof(StatusEffectsComponent)].As<StatusEffectsComponent>(); } set { this["StatusEffectsComponent"] = value; } }
    }
    public class RecallableActor : DeepPathfinderCharacter
    {
        public RecallableActor(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public Object OnReturnFinish { get { return this[nameof(OnReturnFinish)]; } set { this[nameof(OnReturnFinish)] = value; } }
        public Object OnRelocateFinished { get { return this[nameof(OnRelocateFinished)]; } set { this[nameof(OnRelocateFinished)] = value; } }
        public float AcceptanceRadius { get { return this[nameof(AcceptanceRadius)].GetValue<float>(); } set { this[nameof(AcceptanceRadius)].SetValue<float>(value); } }
        public float AutoRecallDistance { get { return this[nameof(AutoRecallDistance)].GetValue<float>(); } set { this[nameof(AutoRecallDistance)].SetValue<float>(value); } }
        public float RelocateLandingHeight { get { return this[nameof(RelocateLandingHeight)].GetValue<float>(); } set { this[nameof(RelocateLandingHeight)].SetValue<float>(value); } }
        public Object RelocationMarkerType { get { return this[nameof(RelocationMarkerType)]; } set { this[nameof(RelocationMarkerType)] = value; } }
        public Object RecallTarget { get { return this[nameof(RecallTarget)]; } set { this[nameof(RecallTarget)] = value; } }
        public ERecallableActorState State { get { return (ERecallableActorState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public bool RelocateLanding { get { return this[nameof(RelocateLanding)].Flag; } set { this[nameof(RelocateLanding)].Flag = value; } }
        public Object RelocationMarker { get { return this[nameof(RelocationMarker)]; } set { this[nameof(RelocationMarker)] = value; } }
        public bool bInitialized { get { return this[nameof(bInitialized)].Flag; } set { this[nameof(bInitialized)].Flag = value; } }
        public void SetRecallTarget(Actor NewTarget) { Invoke(nameof(SetRecallTarget), NewTarget); }
        public void Relocate(Vector NewLocation, Rotator NewRotation, Actor NewAttachToActor, PrimitiveComponent NewAttachToComponent, Object NewAttachToBone) { Invoke(nameof(Relocate), NewLocation, NewRotation, NewAttachToActor, NewAttachToComponent, NewAttachToBone); }
        public void ReceiveOnStateChanged() { Invoke(nameof(ReceiveOnStateChanged)); }
        public void RecallableActorStateChanged__DelegateSignature(RecallableActor Sender, ERecallableActorState State) { Invoke(nameof(RecallableActorStateChanged__DelegateSignature), Sender, State); }
        public void Recall() { Invoke(nameof(Recall)); }
        public void OnReturnSucceeded() { Invoke(nameof(OnReturnSucceeded)); }
        public void OnReturnFailed() { Invoke(nameof(OnReturnFailed)); }
        public void OnRep_State(ERecallableActorState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnRep_RecallTarget() { Invoke(nameof(OnRep_RecallTarget)); }
        public void OnRelocated() { Invoke(nameof(OnRelocated)); }
        public void OnRecallTargetChanged(Actor NewTarget) { Invoke(nameof(OnRecallTargetChanged), NewTarget); }
        public void OnPathFinished(bool success) { Invoke(nameof(OnPathFinished), success); }
        public void OnMoving() { Invoke(nameof(OnMoving)); }
        public void OnMoveRequested() { Invoke(nameof(OnMoveRequested)); }
        public void OnMoveFinished(bool returnedHome) { Invoke(nameof(OnMoveFinished), returnedHome); }
        public bool GetIsReturning() { return Invoke<bool>(nameof(GetIsReturning)); }
        public bool GetIsMovingOrMoveRequested() { return Invoke<bool>(nameof(GetIsMovingOrMoveRequested)); }
        public bool GetIsMoving() { return Invoke<bool>(nameof(GetIsMoving)); }
        public bool GetIsMoveRequested() { return Invoke<bool>(nameof(GetIsMoveRequested)); }
        public void BeginMove() { Invoke(nameof(BeginMove)); }
    }
    public class RecallableItem : AnimatedItem
    {
        public RecallableItem(nint addr) : base(addr) { }
        public Object ItemType { get { return this[nameof(ItemType)]; } set { this[nameof(ItemType)] = value; } }
        public UArray<Object> ActiveItems { get { return new UArray<Object>(this[nameof(ActiveItems)].Address); } }
        public void ServerSpawnItemAttached(Actor InAttachActor, PrimitiveComponent InAttachComponent, Object InAttachBoneName, Vector LocalLocation, Rotator LocalRotation) { Invoke(nameof(ServerSpawnItemAttached), InAttachActor, InAttachComponent, InAttachBoneName, LocalLocation, LocalRotation); }
        public void ServerSpawnItem(Vector WorldLocation, Rotator WorldRotation) { Invoke(nameof(ServerSpawnItem), WorldLocation, WorldRotation); }
        public void ReceiveOnItemSpawned(RecallableActor Item) { Invoke(nameof(ReceiveOnItemSpawned), Item); }
        public void OnRep_ActiveItems() { Invoke(nameof(OnRep_ActiveItems)); }
        public void ItemReturnFinished(Actor Item, bool success) { Invoke(nameof(ItemReturnFinished), Item, success); }
        public bool CanSpawnItem(Vector Location, Rotator Rotation) { return Invoke<bool>(nameof(CanSpawnItem), Location, Rotation); }
    }
    public class SentryGun : Actor
    {
        public SentryGun(nint addr) : base(addr) { }
        public Object OnEnabledChanged { get { return this[nameof(OnEnabledChanged)]; } set { this[nameof(OnEnabledChanged)] = value; } }
        public Object OnAmmoCountChanged { get { return this[nameof(OnAmmoCountChanged)]; } set { this[nameof(OnAmmoCountChanged)] = value; } }
        public Object OnMaxAmmoCountChanged { get { return this[nameof(OnMaxAmmoCountChanged)]; } set { this[nameof(OnMaxAmmoCountChanged)] = value; } }
        public SkeletalMeshComponent SentryGunMesh { get { return this[nameof(SentryGunMesh)].As<SkeletalMeshComponent>(); } set { this["SentryGunMesh"] = value; } }
        public UArray<SentryGunMuzzleSetup> SentryGunMuzzels { get { return new UArray<SentryGunMuzzleSetup>(this[nameof(SentryGunMuzzels)].Address); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public SoundCue ShootingSound { get { return this[nameof(ShootingSound)].As<SoundCue>(); } set { this["ShootingSound"] = value; } }
        public ParticleSystem MuzzleFlash { get { return this[nameof(MuzzleFlash)].As<ParticleSystem>(); } set { this["MuzzleFlash"] = value; } }
        public TracerData TracerData { get { return this[nameof(TracerData)].As<TracerData>(); } set { this["TracerData"] = value; } }
        public bool UsePriorityTargetTracerData { get { return this[nameof(UsePriorityTargetTracerData)].Flag; } set { this[nameof(UsePriorityTargetTracerData)].Flag = value; } }
        public TracerData PriorityTargetTracerData { get { return this[nameof(PriorityTargetTracerData)].As<TracerData>(); } set { this["PriorityTargetTracerData"] = value; } }
        public ParticleSystem Tracer { get { return this[nameof(Tracer)].As<ParticleSystem>(); } set { this["Tracer"] = value; } }
        public float MinTracerDistance { get { return this[nameof(MinTracerDistance)].GetValue<float>(); } set { this[nameof(MinTracerDistance)].SetValue<float>(value); } }
        public float AngleRestriction { get { return this[nameof(AngleRestriction)].GetValue<float>(); } set { this[nameof(AngleRestriction)].SetValue<float>(value); } }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public UArray<OverlapResult> OverlapCache { get { return new UArray<OverlapResult>(this[nameof(OverlapCache)].Address); } }
        public Rotator MinRotation { get { return this[nameof(MinRotation)].As<Rotator>(); } set { this["MinRotation"] = value; } }
        public Rotator MaxRotation { get { return this[nameof(MaxRotation)].As<Rotator>(); } set { this["MaxRotation"] = value; } }
        public float AquisitionRange { get { return this[nameof(AquisitionRange)].GetValue<float>(); } set { this[nameof(AquisitionRange)].SetValue<float>(value); } }
        public float RotationSpeed { get { return this[nameof(RotationSpeed)].GetValue<float>(); } set { this[nameof(RotationSpeed)].SetValue<float>(value); } }
        public float ShotCoolDown { get { return this[nameof(ShotCoolDown)].GetValue<float>(); } set { this[nameof(ShotCoolDown)].SetValue<float>(value); } }
        public float TargetLeading { get { return this[nameof(TargetLeading)].GetValue<float>(); } set { this[nameof(TargetLeading)].SetValue<float>(value); } }
        public int BurstCount { get { return this[nameof(BurstCount)].GetValue<int>(); } set { this[nameof(BurstCount)].SetValue<int>(value); } }
        public float BurstShotCoolDown { get { return this[nameof(BurstShotCoolDown)].GetValue<float>(); } set { this[nameof(BurstShotCoolDown)].SetValue<float>(value); } }
        public float IdleScanAngle { get { return this[nameof(IdleScanAngle)].GetValue<float>(); } set { this[nameof(IdleScanAngle)].SetValue<float>(value); } }
        public float IdleScanSpeed { get { return this[nameof(IdleScanSpeed)].GetValue<float>(); } set { this[nameof(IdleScanSpeed)].SetValue<float>(value); } }
        public float FinalShotFadeOut { get { return this[nameof(FinalShotFadeOut)].GetValue<float>(); } set { this[nameof(FinalShotFadeOut)].SetValue<float>(value); } }
        public SoundBase AudioOnTurn { get { return this[nameof(AudioOnTurn)].As<SoundBase>(); } set { this["AudioOnTurn"] = value; } }
        public GameplayTagContainer DissallowedTargetTags { get { return this[nameof(DissallowedTargetTags)].As<GameplayTagContainer>(); } set { this["DissallowedTargetTags"] = value; } }
        public int AmmoCount { get { return this[nameof(AmmoCount)].GetValue<int>(); } set { this[nameof(AmmoCount)].SetValue<int>(value); } }
        public int MaxAmmoCount { get { return this[nameof(MaxAmmoCount)].GetValue<int>(); } set { this[nameof(MaxAmmoCount)].SetValue<int>(value); } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float TargetYaw { get { return this[nameof(TargetYaw)].GetValue<float>(); } set { this[nameof(TargetYaw)].SetValue<float>(value); } }
        public float TargetPitch { get { return this[nameof(TargetPitch)].GetValue<float>(); } set { this[nameof(TargetPitch)].SetValue<float>(value); } }
        public Object LastTarget { get { return this[nameof(LastTarget)]; } set { this[nameof(LastTarget)] = value; } }
        public Object PrioritizedTarget { get { return this[nameof(PrioritizedTarget)]; } set { this[nameof(PrioritizedTarget)] = value; } }
        public WeaponFireComponent WeaponFire { get { return this[nameof(WeaponFire)].As<WeaponFireComponent>(); } set { this["WeaponFire"] = value; } }
        public AudioComponent ShootingAudioComponent { get { return this[nameof(ShootingAudioComponent)].As<AudioComponent>(); } set { this["ShootingAudioComponent"] = value; } }
        public void UseAmmo(int amount) { Invoke(nameof(UseAmmo), amount); }
        public void ReceiveAmmoChanged(int Delta, int currentAmount) { Invoke(nameof(ReceiveAmmoChanged), Delta, currentAmount); }
        public void OnRep_MaxAmmoCount(int OldCount) { Invoke(nameof(OnRep_MaxAmmoCount), OldCount); }
        public void OnRep_LastTarget() { Invoke(nameof(OnRep_LastTarget)); }
        public void OnRep_AmmoCount(int OldCount) { Invoke(nameof(OnRep_AmmoCount), OldCount); }
        public void OnProjectileFired(Vector Location) { Invoke(nameof(OnProjectileFired), Location); }
        public void OnNewTargetRequested(LaserPointerTarget HitInfo) { Invoke(nameof(OnNewTargetRequested), HitInfo); }
        public Transform GetMuzzleTransform() { return Invoke<Transform>(nameof(GetMuzzleTransform)); }
        public Object GetMuzzleName() { return Invoke<Object>(nameof(GetMuzzleName)); }
        public int GetMaxAmmoCount() { return Invoke<int>(nameof(GetMaxAmmoCount)); }
        public float GetDeployProgress() { return Invoke<float>(nameof(GetDeployProgress)); }
        public float GetAmmoLeftPct() { return Invoke<float>(nameof(GetAmmoLeftPct)); }
        public int GetAmmoLeft() { return Invoke<int>(nameof(GetAmmoLeft)); }
        public void Force_Fire(Actor Target) { Invoke(nameof(Force_Fire), Target); }
        public void EnabledChanged__DelegateSignature(bool IsEnabled) { Invoke(nameof(EnabledChanged__DelegateSignature), IsEnabled); }
        public void AmmoSpent() { Invoke(nameof(AmmoSpent)); }
    }
    public class RedeployableSentryGun : SentryGun
    {
        public RedeployableSentryGun(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public Object OnDeployFinished { get { return this[nameof(OnDeployFinished)]; } set { this[nameof(OnDeployFinished)] = value; } }
        public Object OnDismantleFinished { get { return this[nameof(OnDismantleFinished)]; } set { this[nameof(OnDismantleFinished)] = value; } }
        public Object OnDeployProgressEvent { get { return this[nameof(OnDeployProgressEvent)]; } set { this[nameof(OnDeployProgressEvent)] = value; } }
        public ActorTrackingComponent ActorTrackingIcon { get { return this[nameof(ActorTrackingIcon)].As<ActorTrackingComponent>(); } set { this["ActorTrackingIcon"] = value; } }
        public OutlineComponent outline { get { return this[nameof(outline)].As<OutlineComponent>(); } set { this["outline"] = value; } }
        public Object SentryGunOwner { get { return this[nameof(SentryGunOwner)]; } set { this[nameof(SentryGunOwner)] = value; } }
        public bool bOutlineAndIconVisible { get { return this[nameof(bOutlineAndIconVisible)].Flag; } set { this[nameof(bOutlineAndIconVisible)].Flag = value; } }
        public ERedeployableSentryGunState State { get { return (ERedeployableSentryGunState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public float PlasmaLineMaxRange { get { return this[nameof(PlasmaLineMaxRange)].GetValue<float>(); } set { this[nameof(PlasmaLineMaxRange)].SetValue<float>(value); } }
        public UArray<SentryElectroBeam> PlasmaLines { get { return new UArray<SentryElectroBeam>(this[nameof(PlasmaLines)].Address); } }
        public Object PlasmaBeamClass { get { return this[nameof(PlasmaBeamClass)]; } set { this[nameof(PlasmaBeamClass)] = value; } }
        public Object ElectrocutionActorClass { get { return this[nameof(ElectrocutionActorClass)]; } set { this[nameof(ElectrocutionActorClass)] = value; } }
        public Actor ElectrocutionActor { get { return this[nameof(ElectrocutionActor)].As<Actor>(); } set { this["ElectrocutionActor"] = value; } }
        public Object EMPDischargeActorClass { get { return this[nameof(EMPDischargeActorClass)]; } set { this[nameof(EMPDischargeActorClass)] = value; } }
        public float EMPDiscargeCooldown { get { return this[nameof(EMPDiscargeCooldown)].GetValue<float>(); } set { this[nameof(EMPDiscargeCooldown)].SetValue<float>(value); } }
        public void ToggleOutlineAndIcon(bool Visible) { Invoke(nameof(ToggleOutlineAndIcon), Visible); }
        public void SetSentryGunOwner(PlayerCharacter Character) { Invoke(nameof(SetSentryGunOwner), Character); }
        public void SetArcIndicatorActive(bool Active) { Invoke(nameof(SetArcIndicatorActive), Active); }
        public void ReceiveOnStateChanged() { Invoke(nameof(ReceiveOnStateChanged)); }
        public void ReceiveOnSentryGunOwnerChanged() { Invoke(nameof(ReceiveOnSentryGunOwnerChanged)); }
        public void ReceiveOnDismantled() { Invoke(nameof(ReceiveOnDismantled)); }
        public void ReceiveOnDismantle() { Invoke(nameof(ReceiveOnDismantle)); }
        public void ReceiveOnDeployed() { Invoke(nameof(ReceiveOnDeployed)); }
        public void ReceiveOnDeploy() { Invoke(nameof(ReceiveOnDeploy)); }
        public void OnStateChanged__DelegateSignature(RedeployableSentryGun Sender, ERedeployableSentryGunState NewState) { Invoke(nameof(OnStateChanged__DelegateSignature), Sender, NewState); }
        public void OnRep_State(ERedeployableSentryGunState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnRep_SentryGunOwner() { Invoke(nameof(OnRep_SentryGunOwner)); }
        public void OnElectrocutionActorDestroyed(Actor Actor) { Invoke(nameof(OnElectrocutionActorDestroyed), Actor); }
        public void OnDismantleFinished__DelegateSignature() { Invoke(nameof(OnDismantleFinished__DelegateSignature)); }
        public void OnDeployProgress__DelegateSignature(float Progress) { Invoke(nameof(OnDeployProgress__DelegateSignature), Progress); }
        public void OnDeployFinished__DelegateSignature() { Invoke(nameof(OnDeployFinished__DelegateSignature)); }
        public bool GetIsDismantled() { return Invoke<bool>(nameof(GetIsDismantled)); }
        public bool GetIsDeployed() { return Invoke<bool>(nameof(GetIsDeployed)); }
        public float GetAnimDuration(SkeletalMeshComponent Mesh) { return Invoke<float>(nameof(GetAnimDuration), Mesh); }
        public void DismantleFinished() { Invoke(nameof(DismantleFinished)); }
        public void Dismantle() { Invoke(nameof(Dismantle)); }
        public void DeployFinished() { Invoke(nameof(DeployFinished)); }
        public void Deploy() { Invoke(nameof(Deploy)); }
        public void ActivateSpecialAttack() { Invoke(nameof(ActivateSpecialAttack)); }
    }
    public class TutorialComponent : ActorComponent
    {
        public TutorialComponent(nint addr) : base(addr) { }
        public bool bTutorialEnabled { get { return this[nameof(bTutorialEnabled)].Flag; } set { this[nameof(bTutorialEnabled)].Flag = value; } }
        public int Priority { get { return this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>(value); } }
        public float MaxDuration { get { return this[nameof(MaxDuration)].GetValue<float>(); } set { this[nameof(MaxDuration)].SetValue<float>(value); } }
        public int MaxViewCount { get { return this[nameof(MaxViewCount)].GetValue<int>(); } set { this[nameof(MaxViewCount)].SetValue<int>(value); } }
        public bool ShowInTutorialLevel { get { return this[nameof(ShowInTutorialLevel)].Flag; } set { this[nameof(ShowInTutorialLevel)].Flag = value; } }
        public bool bAutoRegisterWithManager { get { return this[nameof(bAutoRegisterWithManager)].Flag; } set { this[nameof(bAutoRegisterWithManager)].Flag = value; } }
        public bool bDebugAlwaysShow { get { return this[nameof(bDebugAlwaysShow)].Flag; } set { this[nameof(bDebugAlwaysShow)].Flag = value; } }
        public bool ManuallyMarkViews { get { return this[nameof(ManuallyMarkViews)].Flag; } set { this[nameof(ManuallyMarkViews)].Flag = value; } }
        public Object PlayerCharacter { get { return this[nameof(PlayerCharacter)]; } set { this[nameof(PlayerCharacter)] = value; } }
        public Object PlayerState { get { return this[nameof(PlayerState)]; } set { this[nameof(PlayerState)] = value; } }
        public Object PlayerController { get { return this[nameof(PlayerController)]; } set { this[nameof(PlayerController)] = value; } }
        public Object SaveGame { get { return this[nameof(SaveGame)]; } set { this[nameof(SaveGame)] = value; } }
        public Object TutorialManager { get { return this[nameof(TutorialManager)]; } set { this[nameof(TutorialManager)] = value; } }
        public bool bTutorialInitialized { get { return this[nameof(bTutorialInitialized)].Flag; } set { this[nameof(bTutorialInitialized)].Flag = value; } }
        public bool bTutorialReady { get { return this[nameof(bTutorialReady)].Flag; } set { this[nameof(bTutorialReady)].Flag = value; } }
        public bool bTutorialVisible { get { return this[nameof(bTutorialVisible)].Flag; } set { this[nameof(bTutorialVisible)].Flag = value; } }
        public bool bTutorialActive { get { return this[nameof(bTutorialActive)].Flag; } set { this[nameof(bTutorialActive)].Flag = value; } }
        public void RegisterTutorial() { Invoke(nameof(RegisterTutorial)); }
        public void ReceiveOnShown() { Invoke(nameof(ReceiveOnShown)); }
        public void ReceiveOnInitialized() { Invoke(nameof(ReceiveOnInitialized)); }
        public void ReceiveOnHidden() { Invoke(nameof(ReceiveOnHidden)); }
        public void OnTutorialsReset() { Invoke(nameof(OnTutorialsReset)); }
        public void OnManagerReady(TutorialManager Manager) { Invoke(nameof(OnManagerReady), Manager); }
        public void MarkTutorialWatched() { Invoke(nameof(MarkTutorialWatched)); }
        public void MarkTutorialReadyNow() { Invoke(nameof(MarkTutorialReadyNow)); }
        public void MarkTutorialReadyInSeconds(float Delay) { Invoke(nameof(MarkTutorialReadyInSeconds), Delay); }
        public bool HasTutorialBeenShown() { return Invoke<bool>(nameof(HasTutorialBeenShown)); }
        public Object GetTutorialName() { return Invoke<Object>(nameof(GetTutorialName)); }
        public void CancelTutorial(bool CountAsViewed) { Invoke(nameof(CancelTutorial), CountAsViewed); }
    }
    public class TutorialHintComponent : TutorialComponent
    {
        public TutorialHintComponent(nint addr) : base(addr) { }
        public TutorialHint Hint { get { return this[nameof(Hint)].As<TutorialHint>(); } set { this["Hint"] = value; } }
        public void SetRemainingVisibleTime(float remainingTime) { Invoke(nameof(SetRemainingVisibleTime), remainingTime); }
        public bool IsSingleplayer(Object WorldContext) { return Invoke<bool>(nameof(IsSingleplayer), WorldContext); }
        public void ChangeHint(TutorialHint NewHint) { Invoke(nameof(ChangeHint), NewHint); }
    }
    public class RefineryHintComponent : TutorialHintComponent
    {
        public RefineryHintComponent(nint addr) : base(addr) { }
        public Object Refinery { get { return this[nameof(Refinery)]; } set { this[nameof(Refinery)] = value; } }
        public void ReceiveRefinerySpawned(FSDRefinery InRefinery) { Invoke(nameof(ReceiveRefinerySpawned), InRefinery); }
        public void ReceivePipelineSegmentPlaced(PipelineSegment InSegment) { Invoke(nameof(ReceivePipelineSegmentPlaced), InSegment); }
        public void ReceiveExtractorPodSpawned(PipelineExtractorPod InExtractorPod) { Invoke(nameof(ReceiveExtractorPodSpawned), InExtractorPod); }
        public void OnRefinerySpawned(FSDRefinery InRefinery) { Invoke(nameof(OnRefinerySpawned), InRefinery); }
    }
    public class RefineryObjective : Objective
    {
        public RefineryObjective(nint addr) : base(addr) { }
        public Object OnRefinerySpawned { get { return this[nameof(OnRefinerySpawned)]; } set { this[nameof(OnRefinerySpawned)] = value; } }
        public Object refineryClass { get { return this[nameof(refineryClass)]; } set { this[nameof(refineryClass)] = value; } }
        public Object Refinery { get { return this[nameof(Refinery)]; } set { this[nameof(Refinery)] = value; } }
        public ERefineryState RefineryState { get { return (ERefineryState)this[nameof(RefineryState)].GetValue<int>(); } set { this[nameof(RefineryState)].SetValue<int>((int)value); } }
        public DebrisPositioning RefineryPlacement { get { return this[nameof(RefineryPlacement)].As<DebrisPositioning>(); } set { this["RefineryPlacement"] = value; } }
        public Object RawMaterialClass { get { return this[nameof(RawMaterialClass)]; } set { this[nameof(RawMaterialClass)] = value; } }
        public DebrisPositioning RawMaterialPlacement { get { return this[nameof(RawMaterialPlacement)].As<DebrisPositioning>(); } set { this["RawMaterialPlacement"] = value; } }
        public int RawMaterialCount { get { return this[nameof(RawMaterialCount)].GetValue<int>(); } set { this[nameof(RawMaterialCount)].SetValue<int>(value); } }
        public bool bMissionCompleted { get { return this[nameof(bMissionCompleted)].Flag; } set { this[nameof(bMissionCompleted)].Flag = value; } }
        public bool bIsFinalBattle { get { return this[nameof(bIsFinalBattle)].Flag; } set { this[nameof(bIsFinalBattle)].Flag = value; } }
        public int OptionalTunnelRoomID { get { return this[nameof(OptionalTunnelRoomID)].GetValue<int>(); } set { this[nameof(OptionalTunnelRoomID)].SetValue<int>(value); } }
        public void SpawnWells(ProceduralSetup Setup, Vector rigLocation, float minDistanceBetween, UArray<Vector2D> minMaxDistancesToRig) { Invoke(nameof(SpawnWells), Setup, rigLocation, minDistanceBetween, minMaxDistancesToRig); }
        public void RefineryDelegate__DelegateSignature(FSDRefinery InRefinery) { Invoke(nameof(RefineryDelegate__DelegateSignature), InRefinery); }
        public void ReceiveRefinerySpawned(FSDRefinery InRefinery) { Invoke(nameof(ReceiveRefinerySpawned), InRefinery); }
        public void OnRep_Refinery() { Invoke(nameof(OnRep_Refinery)); }
        public void OnRefineryStateChanged(ERefineryState InRefineryState) { Invoke(nameof(OnRefineryStateChanged), InRefineryState); }
        public Vector GetRefinerySpawnLocation(Object refineryClass) { return Invoke<Vector>(nameof(GetRefinerySpawnLocation), refineryClass); }
        public void AddMissionCriticalItems(ProceduralSetup Setup) { Invoke(nameof(AddMissionCriticalItems), Setup); }
    }
    public class RefinerySecondaryObjective : Objective
    {
        public RefinerySecondaryObjective(nint addr) : base(addr) { }
        public Object RawMaterialClass { get { return this[nameof(RawMaterialClass)]; } set { this[nameof(RawMaterialClass)] = value; } }
        public DebrisPositioning RawMaterialPlacement { get { return this[nameof(RawMaterialPlacement)].As<DebrisPositioning>(); } set { this["RawMaterialPlacement"] = value; } }
        public float RawmaterialMinDistanceToDropPod { get { return this[nameof(RawmaterialMinDistanceToDropPod)].GetValue<float>(); } set { this[nameof(RawmaterialMinDistanceToDropPod)].SetValue<float>(value); } }
        public Object DropPodMaterialExtractor { get { return this[nameof(DropPodMaterialExtractor)]; } set { this[nameof(DropPodMaterialExtractor)] = value; } }
        public Object DropPodMaterialExtractor_Marker { get { return this[nameof(DropPodMaterialExtractor_Marker)]; } set { this[nameof(DropPodMaterialExtractor_Marker)] = value; } }
        public DebrisPositioning ExtractorPositioning { get { return this[nameof(ExtractorPositioning)].As<DebrisPositioning>(); } set { this["ExtractorPositioning"] = value; } }
        public float ExtractorLandingDistance { get { return this[nameof(ExtractorLandingDistance)].GetValue<float>(); } set { this[nameof(ExtractorLandingDistance)].SetValue<float>(value); } }
        public float ExtractMinZDistanceToRawMaterial { get { return this[nameof(ExtractMinZDistanceToRawMaterial)].GetValue<float>(); } set { this[nameof(ExtractMinZDistanceToRawMaterial)].SetValue<float>(value); } }
        public ERefinerySecondaryState State { get { return (ERefinerySecondaryState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public int ExtractionProgress { get { return this[nameof(ExtractionProgress)].GetValue<int>(); } set { this[nameof(ExtractionProgress)].SetValue<int>(value); } }
        public float ExtractionDuration { get { return this[nameof(ExtractionDuration)].GetValue<float>(); } set { this[nameof(ExtractionDuration)].SetValue<float>(value); } }
        public RefineryExtractorPod ExtractorPodInstance { get { return this[nameof(ExtractorPodInstance)].As<RefineryExtractorPod>(); } set { this["ExtractorPodInstance"] = value; } }
        public Actor RefineryWellInstance { get { return this[nameof(RefineryWellInstance)].As<Actor>(); } set { this["RefineryWellInstance"] = value; } }
        public void StartExtraction() { Invoke(nameof(StartExtraction)); }
        public void SetWellHasSpawned(Actor extractor) { Invoke(nameof(SetWellHasSpawned), extractor); }
        public void SetWellAndExtractorConnected() { Invoke(nameof(SetWellAndExtractorConnected)); }
        public void SetPipelineBuild() { Invoke(nameof(SetPipelineBuild)); }
        public void OnStateChanged(ERefinerySecondaryState NewState) { Invoke(nameof(OnStateChanged), NewState); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_ExtractorPodInstance() { Invoke(nameof(OnRep_ExtractorPodInstance)); }
        public void OnRep_ExtractionProgress() { Invoke(nameof(OnRep_ExtractionProgress)); }
    }
    public class RefineryExtractorPodAnimInstance : AnimInstance
    {
        public RefineryExtractorPodAnimInstance(nint addr) : base(addr) { }
        public bool IsOpen { get { return this[nameof(IsOpen)].Flag; } set { this[nameof(IsOpen)].Flag = value; } }
        public bool IsPumping { get { return this[nameof(IsPumping)].Flag; } set { this[nameof(IsPumping)].Flag = value; } }
        public bool IsReturning { get { return this[nameof(IsReturning)].Flag; } set { this[nameof(IsReturning)].Flag = value; } }
        public void OnReturningChanged() { Invoke(nameof(OnReturningChanged)); }
    }
    public class RefineryExtractorPod : RessuplyPod
    {
        public RefineryExtractorPod(nint addr) : base(addr) { }
        public WidgetComponent ProgressWidget { get { return this[nameof(ProgressWidget)].As<WidgetComponent>(); } set { this["ProgressWidget"] = value; } }
        public SkeletalMeshComponent SkeletalMesh_Base { get { return this[nameof(SkeletalMesh_Base)].As<SkeletalMeshComponent>(); } set { this["SkeletalMesh_Base"] = value; } }
        public Object ScreenSocketName { get { return this[nameof(ScreenSocketName)]; } set { this[nameof(ScreenSocketName)] = value; } }
        public ERefineryExtractorPodState ExtractorState { get { return (ERefineryExtractorPodState)this[nameof(ExtractorState)].GetValue<int>(); } set { this[nameof(ExtractorState)].SetValue<int>((int)value); } }
        public UArray<RefineryExtractorPodAnimInstance> AnimBlueprints { get { return new UArray<RefineryExtractorPodAnimInstance>(this[nameof(AnimBlueprints)].Address); } }
        public void TakeOff() { Invoke(nameof(TakeOff)); }
        public void StartExtraction() { Invoke(nameof(StartExtraction)); }
        public void SetIsReturning(bool InIsReturning) { Invoke(nameof(SetIsReturning), InIsReturning); }
        public void SetIsPumping(bool InIsPumping) { Invoke(nameof(SetIsPumping), InIsPumping); }
        public void SetIsOpen(bool InIsOpen) { Invoke(nameof(SetIsOpen), InIsOpen); }
        public void OnRep_ExtractorState() { Invoke(nameof(OnRep_ExtractorState)); }
        public void OnPipeLineCompleted() { Invoke(nameof(OnPipeLineCompleted)); }
        public void OnExtractorStateChanged(ERefineryExtractorPodState NewState) { Invoke(nameof(OnExtractorStateChanged), NewState); }
        public void ChangeExtractorState(ERefineryExtractorPodState NewState) { Invoke(nameof(ChangeExtractorState), NewState); }
    }
    public class RefineryExtractorPodWidget : UserWidget
    {
        public RefineryExtractorPodWidget(nint addr) : base(addr) { }
        public void SetProgress(float InProgress) { Invoke(nameof(SetProgress), InProgress); }
        public void OnObjectiveUpdated(Objective Objective) { Invoke(nameof(OnObjectiveUpdated), Objective); }
    }
    public class ReflectionHitscanComponent : HitscanBaseComponent
    {
        public ReflectionHitscanComponent(nint addr) : base(addr) { }
        public TerrainType PlatformTerrainType { get { return this[nameof(PlatformTerrainType)].As<TerrainType>(); } set { this["PlatformTerrainType"] = value; } }
        public bool bPlayImpactSound { get { return this[nameof(bPlayImpactSound)].Flag; } set { this[nameof(bPlayImpactSound)].Flag = value; } }
        public bool bShowImpactOnReflections { get { return this[nameof(bShowImpactOnReflections)].Flag; } set { this[nameof(bShowImpactOnReflections)].Flag = value; } }
        public bool bDamageOnReflections { get { return this[nameof(bDamageOnReflections)].Flag; } set { this[nameof(bDamageOnReflections)].Flag = value; } }
        public float StraightenReflectionFactor { get { return this[nameof(StraightenReflectionFactor)].GetValue<float>(); } set { this[nameof(StraightenReflectionFactor)].SetValue<float>(value); } }
        public int ReflectionCount { get { return this[nameof(ReflectionCount)].GetValue<int>(); } set { this[nameof(ReflectionCount)].SetValue<int>(value); } }
        public void Server_RegisterHit_Reflection(ReflectiveHitscanHit Hit) { Invoke(nameof(Server_RegisterHit_Reflection), Hit); }
        public void Server_RegisterHit(ReflectiveHitscanHit Hit) { Invoke(nameof(Server_RegisterHit), Hit); }
        public void All_ShowHit(ReflectiveHitscanHit Hit) { Invoke(nameof(All_ShowHit), Hit); }
    }
    public class RegisterInviteNotificationBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public RegisterInviteNotificationBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnInviteReceived { get { return this[nameof(OnInviteReceived)]; } set { this[nameof(OnInviteReceived)] = value; } }
        public Object OnInviteAccepted { get { return this[nameof(OnInviteAccepted)]; } set { this[nameof(OnInviteAccepted)] = value; } }
        public Object OnInviteRejected { get { return this[nameof(OnInviteRejected)]; } set { this[nameof(OnInviteRejected)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public RegisterInviteNotificationBlueprintCallProxy RegisterInvitiNotification(Object WorldContextObject) { return Invoke<RegisterInviteNotificationBlueprintCallProxy>(nameof(RegisterInvitiNotification), WorldContextObject); }
    }
    public class RegisterSessionInviteNotificationBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public RegisterSessionInviteNotificationBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSessionUserInviteAccepted { get { return this[nameof(OnSessionUserInviteAccepted)]; } set { this[nameof(OnSessionUserInviteAccepted)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public RegisterSessionInviteNotificationBlueprintCallProxy RegisterSessionInviteNotification(Object WorldContextObject) { return Invoke<RegisterSessionInviteNotificationBlueprintCallProxy>(nameof(RegisterSessionInviteNotification), WorldContextObject); }
    }
    public class RejectInviteBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public RejectInviteBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public RejectInviteBlueprintCallProxy RejectInvite(Object WorldContextObject, Object ListName, Object UserId) { return Invoke<RejectInviteBlueprintCallProxy>(nameof(RejectInvite), WorldContextObject, ListName, UserId); }
    }
    public class RepairableComponent : ActorComponent
    {
        public RepairableComponent(nint addr) : base(addr) { }
        public Object OnFullyRepairedEvent { get { return this[nameof(OnFullyRepairedEvent)]; } set { this[nameof(OnFullyRepairedEvent)] = value; } }
        public Object OnAllResourcesAquiredEvent { get { return this[nameof(OnAllResourcesAquiredEvent)]; } set { this[nameof(OnAllResourcesAquiredEvent)] = value; } }
        public Object OnRepairedEvent { get { return this[nameof(OnRepairedEvent)]; } set { this[nameof(OnRepairedEvent)] = value; } }
        public GemResourceData RequiresCarriedResource { get { return this[nameof(RequiresCarriedResource)].As<GemResourceData>(); } set { this["RequiresCarriedResource"] = value; } }
        public int ResourcesRequired { get { return this[nameof(ResourcesRequired)].GetValue<int>(); } set { this[nameof(ResourcesRequired)].SetValue<int>(value); } }
        public bool IsFullyRepaired { get { return this[nameof(IsFullyRepaired)].Flag; } set { this[nameof(IsFullyRepaired)].Flag = value; } }
        public bool TryRepair(PlayerCharacter User) { return Invoke<bool>(nameof(TryRepair), User); }
        public void OnRep_ResourcesRequired() { Invoke(nameof(OnRep_ResourcesRequired)); }
        public int GetResourcesRequired() { return Invoke<int>(nameof(GetResourcesRequired)); }
        public void Cheat_Repair() { Invoke(nameof(Cheat_Repair)); }
    }
    public class RepairObjective : Objective
    {
        public RepairObjective(nint addr) : base(addr) { }
        public int RepairedObjectives { get { return this[nameof(RepairedObjectives)].GetValue<int>(); } set { this[nameof(RepairedObjectives)].SetValue<int>(value); } }
        public int ObjectivesToRepair { get { return this[nameof(ObjectivesToRepair)].GetValue<int>(); } set { this[nameof(ObjectivesToRepair)].SetValue<int>(value); } }
        public Object RepairObjectiveClass { get { return this[nameof(RepairObjectiveClass)]; } set { this[nameof(RepairObjectiveClass)] = value; } }
        public GemResourceData RepairObjectiveResource { get { return this[nameof(RepairObjectiveResource)].As<GemResourceData>(); } set { this["RepairObjectiveResource"] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public int RepairResourcesPerActor { get { return this[nameof(RepairResourcesPerActor)].GetValue<int>(); } set { this[nameof(RepairResourcesPerActor)].SetValue<int>(value); } }
        public float RepairResourceDistanceFromActor { get { return this[nameof(RepairResourceDistanceFromActor)].GetValue<float>(); } set { this[nameof(RepairResourceDistanceFromActor)].SetValue<float>(value); } }
        public float MinRepairObjectiveDistanceToLandingZone { get { return this[nameof(MinRepairObjectiveDistanceToLandingZone)].GetValue<float>(); } set { this[nameof(MinRepairObjectiveDistanceToLandingZone)].SetValue<float>(value); } }
        public UArray<Actor> RepairedObjectivesList { get { return new UArray<Actor>(this[nameof(RepairedObjectivesList)].Address); } }
        public void OnRep_RepairedObjectives() { Invoke(nameof(OnRep_RepairedObjectives)); }
        public void OnRep_ObjectivesToRepair() { Invoke(nameof(OnRep_ObjectivesToRepair)); }
        public void OnObjectiveRepaired(RepairableComponent repairable) { Invoke(nameof(OnObjectiveRepaired), repairable); }
        public void AllObjectivesRepaired() { Invoke(nameof(AllObjectivesRepaired)); }
    }
    public class ResonanceScannerPod : RessuplyPod
    {
        public ResonanceScannerPod(nint addr) : base(addr) { }
        public void OnConnectedToTarget() { Invoke(nameof(OnConnectedToTarget)); }
    }
    public class ResourceFilter : DataAsset
    {
        public ResourceFilter(nint addr) : base(addr) { }
        public UArray<ResourceData> Resources { get { return new UArray<ResourceData>(this[nameof(Resources)].Address); } }
        public byte FilterType { get { return this[nameof(FilterType)].GetValue<byte>(); } set { this[nameof(FilterType)].SetValue<byte>(value); } }
    }
    public class ResourceBank : UsableComponentBase
    {
        public ResourceBank(nint addr) : base(addr) { }
        public Object OnBeginDeposite { get { return this[nameof(OnBeginDeposite)]; } set { this[nameof(OnBeginDeposite)] = value; } }
        public Object OnDepositing { get { return this[nameof(OnDepositing)]; } set { this[nameof(OnDepositing)] = value; } }
        public Object OnEndDeposite { get { return this[nameof(OnEndDeposite)]; } set { this[nameof(OnEndDeposite)] = value; } }
        public bool OpenForDeposit { get { return this[nameof(OpenForDeposit)].Flag; } set { this[nameof(OpenForDeposit)].Flag = value; } }
        public Object OnResourceDeposited { get { return this[nameof(OnResourceDeposited)]; } set { this[nameof(OnResourceDeposited)] = value; } }
        public ResourceFilter Filter { get { return this[nameof(Filter)].As<ResourceFilter>(); } set { this["Filter"] = value; } }
        public FSDGameState GameState { get { return this[nameof(GameState)].As<FSDGameState>(); } set { this["GameState"] = value; } }
        public float DepositesPerSecond { get { return this[nameof(DepositesPerSecond)].GetValue<float>(); } set { this[nameof(DepositesPerSecond)].SetValue<float>(value); } }
        public float DepositeAmount { get { return this[nameof(DepositeAmount)].GetValue<float>(); } set { this[nameof(DepositeAmount)].SetValue<float>(value); } }
        public bool CanGetStrict { get { return this[nameof(CanGetStrict)].Flag; } set { this[nameof(CanGetStrict)].Flag = value; } }
        public bool AddToTeamInventory { get { return this[nameof(AddToTeamInventory)].Flag; } set { this[nameof(AddToTeamInventory)].Flag = value; } }
        public bool PlayDepositShout { get { return this[nameof(PlayDepositShout)].Flag; } set { this[nameof(PlayDepositShout)].Flag = value; } }
        public SoundBase AudioBeginDepositing { get { return this[nameof(AudioBeginDepositing)].As<SoundBase>(); } set { this["AudioBeginDepositing"] = value; } }
        public SoundBase AudioDepositing { get { return this[nameof(AudioDepositing)].As<SoundBase>(); } set { this["AudioDepositing"] = value; } }
        public SoundBase AudioEndDepositing { get { return this[nameof(AudioEndDepositing)].As<SoundBase>(); } set { this["AudioEndDepositing"] = value; } }
        public void ResourceBankEvent__DelegateSignature(PlayerCharacter User) { Invoke(nameof(ResourceBankEvent__DelegateSignature), User); }
        public void All_Depositing(PlayerCharacter Character) { Invoke(nameof(All_Depositing), Character); }
    }
    public class RestrictedResourceBank : ResourceBank
    {
        public RestrictedResourceBank(nint addr) : base(addr) { }
        public ResourceData RequiredResource { get { return this[nameof(RequiredResource)].As<ResourceData>(); } set { this["RequiredResource"] = value; } }
    }
    public class ResourceChunk : FSDPhysicsActor
    {
        public ResourceChunk(nint addr) : base(addr) { }
        public float CollectDuration { get { return this[nameof(CollectDuration)].GetValue<float>(); } set { this[nameof(CollectDuration)].SetValue<float>(value); } }
        public bool CanBeCollectedNormally { get { return this[nameof(CanBeCollectedNormally)].Flag; } set { this[nameof(CanBeCollectedNormally)].Flag = value; } }
        public bool CanBeCollected { get { return this[nameof(CanBeCollected)].Flag; } set { this[nameof(CanBeCollected)].Flag = value; } }
        public SimpleObjectInfoComponent InfoComponent { get { return this[nameof(InfoComponent)].As<SimpleObjectInfoComponent>(); } set { this["InfoComponent"] = value; } }
        public float ResourceAmount { get { return this[nameof(ResourceAmount)].GetValue<float>(); } set { this[nameof(ResourceAmount)].SetValue<float>(value); } }
        public SoundCue PickupSound { get { return this[nameof(PickupSound)].As<SoundCue>(); } set { this["PickupSound"] = value; } }
        public ResourceData ResourceData { get { return this[nameof(ResourceData)].As<ResourceData>(); } set { this["ResourceData"] = value; } }
        public UArray<PlayerCharacter> OverlappingPlayers { get { return new UArray<PlayerCharacter>(this[nameof(OverlappingPlayers)].Address); } }
        public Object CollectedBy { get { return this[nameof(CollectedBy)]; } set { this[nameof(CollectedBy)] = value; } }
        public void SetCollectOpen() { Invoke(nameof(SetCollectOpen)); }
        public void OnRep_CollectedBy() { Invoke(nameof(OnRep_CollectedBy)); }
        public ResourceData GetResourceData() { return Invoke<ResourceData>(nameof(GetResourceData)); }
        public float GetResourceAmount() { return Invoke<float>(nameof(GetResourceAmount)); }
        public void CalcMovement(float InProgress, Vector InVector, Vector OutVelocity, Vector OutAngularVelocity) { Invoke(nameof(CalcMovement), InProgress, InVector, OutVelocity, OutAngularVelocity); }
    }
    public class ResourceObjective : ResourceBasedObjective
    {
        public ResourceObjective(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float ResourcesRequired { get { return this[nameof(ResourcesRequired)].GetValue<float>(); } set { this[nameof(ResourcesRequired)].SetValue<float>(value); } }
        public float ResourcesCollected { get { return this[nameof(ResourcesCollected)].GetValue<float>(); } set { this[nameof(ResourcesCollected)].SetValue<float>(value); } }
        public float ResourceBuffer { get { return this[nameof(ResourceBuffer)].GetValue<float>(); } set { this[nameof(ResourceBuffer)].SetValue<float>(value); } }
        public float RoundToNearest { get { return this[nameof(RoundToNearest)].GetValue<float>(); } set { this[nameof(RoundToNearest)].SetValue<float>(value); } }
        public Object ObjectivesText { get { return this[nameof(ObjectivesText)]; } set { this[nameof(ObjectivesText)] = value; } }
        public Object CreditsRewardText { get { return this[nameof(CreditsRewardText)]; } set { this[nameof(CreditsRewardText)] = value; } }
        public void OnResourceChanged(CappedResource CappedResource, float amount) { Invoke(nameof(OnResourceChanged), CappedResource, amount); }
        public void OnRep_ResourcesCollected(float prevAmount) { Invoke(nameof(OnRep_ResourcesCollected), prevAmount); }
        public float GetRequiredAmount(float missionScaling) { return Invoke<float>(nameof(GetRequiredAmount), missionScaling); }
    }
    public class ResourcePouch : CarriableItem
    {
        public ResourcePouch(nint addr) : base(addr) { }
        public CarriableInstantUsable Usable { get { return this[nameof(Usable)].As<CarriableInstantUsable>(); } set { this["Usable"] = value; } }
        public SoundCue ImpactGroundSound { get { return this[nameof(ImpactGroundSound)].As<SoundCue>(); } set { this["ImpactGroundSound"] = value; } }
        public void SetResources(ResourcesComponent Resources) { Invoke(nameof(SetResources), Resources); }
        public void ActorWasHit(Actor SelfActor, Actor OtherActor, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(ActorWasHit), SelfActor, OtherActor, NormalImpulse, Hit); }
    }
    public class RessuplyPodSpawn : RessuplyPod
    {
        public RessuplyPodSpawn(nint addr) : base(addr) { }
        public void SetController(FSDPlayerController Controller) { Invoke(nameof(SetController), Controller); }
        public void SetCharacter(PlayerCharacter Character) { Invoke(nameof(SetCharacter), Character); }
    }
    public class UnlockReward : Reward
    {
        public UnlockReward(nint addr) : base(addr) { }
    }
    public class UnlockPlanetZoneReward : UnlockReward
    {
        public UnlockPlanetZoneReward(nint addr) : base(addr) { }
        public PlanetZone ZoneToUnlock { get { return this[nameof(ZoneToUnlock)].As<PlanetZone>(); } set { this["ZoneToUnlock"] = value; } }
    }
    public class UnlockMissionTypeReward : UnlockReward
    {
        public UnlockMissionTypeReward(nint addr) : base(addr) { }
        public MissionTemplate MissionToUnlock { get { return this[nameof(MissionToUnlock)].As<MissionTemplate>(); } set { this["MissionToUnlock"] = value; } }
    }
    public class UnlockComplexityReward : UnlockReward
    {
        public UnlockComplexityReward(nint addr) : base(addr) { }
        public MissionTemplate mission { get { return this[nameof(mission)].As<MissionTemplate>(); } set { this["mission"] = value; } }
        public MissionComplexity Complexity { get { return this[nameof(Complexity)].As<MissionComplexity>(); } set { this["Complexity"] = value; } }
    }
    public class UnlockDurationReward : UnlockReward
    {
        public UnlockDurationReward(nint addr) : base(addr) { }
        public MissionTemplate mission { get { return this[nameof(mission)].As<MissionTemplate>(); } set { this["mission"] = value; } }
        public MissionDuration Duration { get { return this[nameof(Duration)].As<MissionDuration>(); } set { this["Duration"] = value; } }
    }
    public class UnlockDifficultyReward : UnlockReward
    {
        public UnlockDifficultyReward(nint addr) : base(addr) { }
        public DifficultySetting Difficulty { get { return this[nameof(Difficulty)].As<DifficultySetting>(); } set { this["Difficulty"] = value; } }
    }
    public class ResourceReward : Reward
    {
        public ResourceReward(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class WeeklyResourceReward : Reward
    {
        public WeeklyResourceReward(nint addr) : base(addr) { }
        public int ResourceCount { get { return this[nameof(ResourceCount)].GetValue<int>(); } set { this[nameof(ResourceCount)].SetValue<int>(value); } }
        public IRandRange amount { get { return this[nameof(amount)].As<IRandRange>(); } set { this["amount"] = value; } }
        public Object GetRewards(FSDPlayerController Player) { return Invoke<Object>(nameof(GetRewards), Player); }
    }
    public class RetirementReward : UnlockReward
    {
        public RetirementReward(nint addr) : base(addr) { }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
    }
    public class ItemBlueprintReward : UnlockReward
    {
        public ItemBlueprintReward(nint addr) : base(addr) { }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
    }
    public class SchematicReward : UnlockReward
    {
        public SchematicReward(nint addr) : base(addr) { }
        public ESchematicType SchematicType { get { return (ESchematicType)this[nameof(SchematicType)].GetValue<int>(); } set { this[nameof(SchematicType)].SetValue<int>((int)value); } }
        public Schematic RewardedSchematic { get { return this[nameof(RewardedSchematic)].As<Schematic>(); } set { this["RewardedSchematic"] = value; } }
    }
    public class SkinUnlock : UnlockReward
    {
        public SkinUnlock(nint addr) : base(addr) { }
        public ItemID OptionalItemID { get { return this[nameof(OptionalItemID)].As<ItemID>(); } set { this["OptionalItemID"] = value; } }
        public PlayerCharacterID OptionalCharacterID { get { return this[nameof(OptionalCharacterID)].As<PlayerCharacterID>(); } set { this["OptionalCharacterID"] = value; } }
        public ItemSkin Skin { get { return this[nameof(Skin)].As<ItemSkin>(); } set { this["Skin"] = value; } }
    }
    public class PermanentItemUpgradeReward : UnlockReward
    {
        public PermanentItemUpgradeReward(nint addr) : base(addr) { }
        public Object Item { get { return this[nameof(Item)]; } set { this[nameof(Item)] = value; } }
        public ItemUpgrade Upgrade { get { return this[nameof(Upgrade)].As<ItemUpgrade>(); } set { this["Upgrade"] = value; } }
    }
    public class PureTextReward : UnlockReward
    {
        public PureTextReward(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
    }
    public class VanityReward : UnlockReward
    {
        public VanityReward(nint addr) : base(addr) { }
        public VanityItem VanityItem { get { return this[nameof(VanityItem)].As<VanityItem>(); } set { this["VanityItem"] = value; } }
        public PlayerCharacterID OptionalCharacterID { get { return this[nameof(OptionalCharacterID)].As<PlayerCharacterID>(); } set { this["OptionalCharacterID"] = value; } }
        public bool UseContextAsTargetCharacter { get { return this[nameof(UseContextAsTargetCharacter)].Flag; } set { this[nameof(UseContextAsTargetCharacter)].Flag = value; } }
    }
    public class VanityCollectionReward : UnlockReward
    {
        public VanityCollectionReward(nint addr) : base(addr) { }
        public UArray<VanityItem> VanityItems { get { return new UArray<VanityItem>(this[nameof(VanityItems)].Address); } }
        public PlayerCharacterID OptionalCharacterID { get { return this[nameof(OptionalCharacterID)].As<PlayerCharacterID>(); } set { this["OptionalCharacterID"] = value; } }
        public bool UseContextAsTargetCharacter { get { return this[nameof(UseContextAsTargetCharacter)].Flag; } set { this[nameof(UseContextAsTargetCharacter)].Flag = value; } }
    }
    public class VictoryPoseReward : UnlockReward
    {
        public VictoryPoseReward(nint addr) : base(addr) { }
        public VictoryPose VictoryPose { get { return this[nameof(VictoryPose)].As<VictoryPose>(); } set { this["VictoryPose"] = value; } }
        public PlayerCharacterID OptionalCharacterID { get { return this[nameof(OptionalCharacterID)].As<PlayerCharacterID>(); } set { this["OptionalCharacterID"] = value; } }
    }
    public class PickaxePartReward : UnlockReward
    {
        public PickaxePartReward(nint addr) : base(addr) { }
        public PickaxePart PicaxePart { get { return this[nameof(PicaxePart)].As<PickaxePart>(); } set { this["PicaxePart"] = value; } }
    }
    public class PickaxeSetReward : UnlockReward
    {
        public PickaxeSetReward(nint addr) : base(addr) { }
        public PickaxePart BladeFront { get { return this[nameof(BladeFront)].As<PickaxePart>(); } set { this["BladeFront"] = value; } }
        public PickaxePart OptionalBladeBack { get { return this[nameof(OptionalBladeBack)].As<PickaxePart>(); } set { this["OptionalBladeBack"] = value; } }
        public PickaxePart Pommel { get { return this[nameof(Pommel)].As<PickaxePart>(); } set { this["Pommel"] = value; } }
        public PickaxePart Handle { get { return this[nameof(Handle)].As<PickaxePart>(); } set { this["Handle"] = value; } }
        public PickaxePart Shaft { get { return this[nameof(Shaft)].As<PickaxePart>(); } set { this["Shaft"] = value; } }
        public PickaxePart Head { get { return this[nameof(Head)].As<PickaxePart>(); } set { this["Head"] = value; } }
        public PickaxePart Material { get { return this[nameof(Material)].As<PickaxePart>(); } set { this["Material"] = value; } }
    }
    public class SeasonTokenReward : Reward
    {
        public SeasonTokenReward(nint addr) : base(addr) { }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class SeasonXPReward : Reward
    {
        public SeasonXPReward(nint addr) : base(addr) { }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class RewardsSubSystem : GameInstanceSubsystem
    {
        public RewardsSubSystem(nint addr) : base(addr) { }
        public PendingRewards PendingMissionRewards { get { return this[nameof(PendingMissionRewards)].As<PendingRewards>(); } set { this["PendingMissionRewards"] = value; } }
        public UArray<ClaimableRewardEntry> PendingPromotionRewards { get { return new UArray<ClaimableRewardEntry>(this[nameof(PendingPromotionRewards)].Address); } }
        public bool ShouldPendingRewardsBeShown() { return Invoke<bool>(nameof(ShouldPendingRewardsBeShown)); }
        public bool ShouldPendingRewardsBeGiven() { return Invoke<bool>(nameof(ShouldPendingRewardsBeGiven)); }
        public bool Receive_GetPendingRewards(Object WorldContext, PendingRewardsStats OutStats, PendingRewards OutRewards) { return Invoke<bool>(nameof(Receive_GetPendingRewards), WorldContext, OutStats, OutRewards); }
        public bool HasPendingRewards() { return Invoke<bool>(nameof(HasPendingRewards)); }
        public bool GetPendingRewards(PendingRewardsStats OutStats, PendingRewards OutRewards) { return Invoke<bool>(nameof(GetPendingRewards), OutStats, OutRewards); }
        public void ClearPendingRewards() { Invoke(nameof(ClearPendingRewards)); }
        public void ApplyPendingRewards(FSDPlayerController Controller) { Invoke(nameof(ApplyPendingRewards), Controller); }
    }
    public class RewardWidget : UserWidget
    {
        public RewardWidget(nint addr) : base(addr) { }
        public Reward Reward { get { return this[nameof(Reward)].As<Reward>(); } set { this["Reward"] = value; } }
        public void PlayReceiveAnim() { Invoke(nameof(PlayReceiveAnim)); }
    }
    public class RichTextInputDecorator : CustomRichTextDecorator
    {
        public RichTextInputDecorator(nint addr) : base(addr) { }
        public Object DecoratorWidgetClass { get { return this[nameof(DecoratorWidgetClass)]; } set { this[nameof(DecoratorWidgetClass)] = value; } }
    }
    public class RichTextInputWidget : UserWidget
    {
        public RichTextInputWidget(nint addr) : base(addr) { }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public Object MetaData { get { return this[nameof(MetaData)]; } set { this[nameof(MetaData)] = value; } }
        public Object Content { get { return this[nameof(Content)]; } set { this[nameof(Content)] = value; } }
        public TextBlockStyle TextStyle { get { return this[nameof(TextStyle)].As<TextBlockStyle>(); } set { this["TextStyle"] = value; } }
        public EFSDInputSource InputSource { get { return (EFSDInputSource)this[nameof(InputSource)].GetValue<int>(); } set { this[nameof(InputSource)].SetValue<int>((int)value); } }
        public RichTextBlock RichTextBlock { get { return this[nameof(RichTextBlock)].As<RichTextBlock>(); } set { this["RichTextBlock"] = value; } }
        public void ScaleTextBlockToHeight(TextBlock InTextBlock, float LineHeight) { Invoke(nameof(ScaleTextBlockToHeight), InTextBlock, LineHeight); }
        public void ReceiveInputUnknown() { Invoke(nameof(ReceiveInputUnknown)); }
        public void ReceiveInputDetails(InputDisplay InDisplay) { Invoke(nameof(ReceiveInputDetails), InDisplay); }
        public void OnInputSourceChanged(EFSDInputSource InSource) { Invoke(nameof(OnInputSourceChanged), InSource); }
        public void OnCustomKeyBindsChanged() { Invoke(nameof(OnCustomKeyBindsChanged)); }
        public Vector2D MeasureTextSize(Object Text, float Scale) { return Invoke<Vector2D>(nameof(MeasureTextSize), Text, Scale); }
        public float GetLineHeight() { return Invoke<float>(nameof(GetLineHeight)); }
        public void ApplyTextStyle(TextBlock InTextBlock, TextBlockStyle InTextStyle) { Invoke(nameof(ApplyTextStyle), InTextBlock, InTextStyle); }
    }
    public class RichTextStylable : RichTextBlock
    {
        public RichTextStylable(nint addr) : base(addr) { }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public SlateColor FontColor { get { return this[nameof(FontColor)].As<SlateColor>(); } set { this["FontColor"] = value; } }
        public Object Styles { get { return this[nameof(Styles)]; } set { this[nameof(Styles)] = value; } }
    }
    public class RichTextSizable : RichTextBlock
    {
        public RichTextSizable(nint addr) : base(addr) { }
        public bool bOverrideDefaultSize { get { return this[nameof(bOverrideDefaultSize)].Flag; } set { this[nameof(bOverrideDefaultSize)].Flag = value; } }
        public int OverrideDefaultFontSize { get { return this[nameof(OverrideDefaultFontSize)].GetValue<int>(); } set { this[nameof(OverrideDefaultFontSize)].SetValue<int>(value); } }
        public bool bOverrideDefaultColor { get { return this[nameof(bOverrideDefaultColor)].Flag; } set { this[nameof(bOverrideDefaultColor)].Flag = value; } }
        public SlateColor OverrideDefaultFontColor { get { return this[nameof(OverrideDefaultFontColor)].As<SlateColor>(); } set { this["OverrideDefaultFontColor"] = value; } }
        public void SetDefaultFontSize(int inFontSize) { Invoke(nameof(SetDefaultFontSize), inFontSize); }
        public void SetDefaultFontColor(LinearColor InColor) { Invoke(nameof(SetDefaultFontColor), InColor); }
    }
    public class FSDRichTextFunctionlibrary : BlueprintFunctionLibrary
    {
        public FSDRichTextFunctionlibrary(nint addr) : base(addr) { }
        public void SplitRichText(RichTextParseResult Parser, int SplitIndex, bool bKeepLeftFormatting, bool bKeepRightFormatting, Object OutLeftText, Object OutRightText) { Invoke(nameof(SplitRichText), Parser, SplitIndex, bKeepLeftFormatting, bKeepRightFormatting, OutLeftText, OutRightText); }
        public RichTextParseResult ParseRichText(Object InText) { return Invoke<RichTextParseResult>(nameof(ParseRichText), InText); }
        public Object MidRichText(RichTextParseResult Parser, int StartIndex, int Count, bool bKeepFormatting) { return Invoke<Object>(nameof(MidRichText), Parser, StartIndex, Count, bKeepFormatting); }
    }
    public class RiftCrystal : Pawn
    {
        public RiftCrystal(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SceneComponent FlightRoot { get { return this[nameof(FlightRoot)].As<SceneComponent>(); } set { this["FlightRoot"] = value; } }
        public RotatingSceneComponent Bobber { get { return this[nameof(Bobber)].As<RotatingSceneComponent>(); } set { this["Bobber"] = value; } }
        public RotatingSceneComponent Rotator { get { return this[nameof(Rotator)].As<RotatingSceneComponent>(); } set { this["Rotator"] = value; } }
        public SkeletalMeshComponent CrystalMesh { get { return this[nameof(CrystalMesh)].As<SkeletalMeshComponent>(); } set { this["CrystalMesh"] = value; } }
        public CapsuleComponent WeakpointCollision { get { return this[nameof(WeakpointCollision)].As<CapsuleComponent>(); } set { this["WeakpointCollision"] = value; } }
        public PointLightComponent Light { get { return this[nameof(Light)].As<PointLightComponent>(); } set { this["Light"] = value; } }
        public PointLightComponent LargeLight { get { return this[nameof(LargeLight)].As<PointLightComponent>(); } set { this["LargeLight"] = value; } }
        public CapsuleComponent KnockBackCapsule { get { return this[nameof(KnockBackCapsule)].As<CapsuleComponent>(); } set { this["KnockBackCapsule"] = value; } }
        public MeshCarverComponent SpaceCarver { get { return this[nameof(SpaceCarver)].As<MeshCarverComponent>(); } set { this["SpaceCarver"] = value; } }
        public UArray<TerrainDetectComponent> TerrainDetectors { get { return new UArray<TerrainDetectComponent>(this[nameof(TerrainDetectors)].Address); } }
        public NiagaraComponent EnergyParticles { get { return this[nameof(EnergyParticles)].As<NiagaraComponent>(); } set { this["EnergyParticles"] = value; } }
        public NiagaraComponent PillarParticles { get { return this[nameof(PillarParticles)].As<NiagaraComponent>(); } set { this["PillarParticles"] = value; } }
        public AudioComponent RockIdleSound { get { return this[nameof(RockIdleSound)].As<AudioComponent>(); } set { this["RockIdleSound"] = value; } }
        public AudioComponent CrystalIdleSound { get { return this[nameof(CrystalIdleSound)].As<AudioComponent>(); } set { this["CrystalIdleSound"] = value; } }
        public NiagaraComponent InvulnerableParticles { get { return this[nameof(InvulnerableParticles)].As<NiagaraComponent>(); } set { this["InvulnerableParticles"] = value; } }
        public PathfinderCollisionComponent EscortBlocker { get { return this[nameof(EscortBlocker)].As<PathfinderCollisionComponent>(); } set { this["EscortBlocker"] = value; } }
        public SpawnActorWithDebrisPosComponent DebrisSpawner { get { return this[nameof(DebrisSpawner)].As<SpawnActorWithDebrisPosComponent>(); } set { this["DebrisSpawner"] = value; } }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public RiftSpawnerComponent RiftSpawner { get { return this[nameof(RiftSpawner)].As<RiftSpawnerComponent>(); } set { this["RiftSpawner"] = value; } }
        public EnemyComponent enemy { get { return this[nameof(enemy)].As<EnemyComponent>(); } set { this["enemy"] = value; } }
        public DamageComponent KnockBackDamge { get { return this[nameof(KnockBackDamge)].As<DamageComponent>(); } set { this["KnockBackDamge"] = value; } }
        public DamageComponent EndExplosionDamage { get { return this[nameof(EndExplosionDamage)].As<DamageComponent>(); } set { this["EndExplosionDamage"] = value; } }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public Object BeamTargetParamName { get { return this[nameof(BeamTargetParamName)]; } set { this[nameof(BeamTargetParamName)] = value; } }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
        public Rotator SpawnedRotation { get { return this[nameof(SpawnedRotation)].As<Rotator>(); } set { this["SpawnedRotation"] = value; } }
        public UArray<RiftBeam> Beams { get { return new UArray<RiftBeam>(this[nameof(Beams)].Address); } }
        public UArray<Actor> KnockbackTargets { get { return new UArray<Actor>(this[nameof(KnockbackTargets)].Address); } }
        public CurveVector DeathRattle { get { return this[nameof(DeathRattle)].As<CurveVector>(); } set { this["DeathRattle"] = value; } }
        public RuntimeFloatCurve KnockBackCurve { get { return this[nameof(KnockBackCurve)].As<RuntimeFloatCurve>(); } set { this["KnockBackCurve"] = value; } }
        public Object DroppedActorClass { get { return this[nameof(DroppedActorClass)]; } set { this[nameof(DroppedActorClass)] = value; } }
        public Object ExtractionPodClass { get { return this[nameof(ExtractionPodClass)]; } set { this[nameof(ExtractionPodClass)] = value; } }
        public DebrisPositioning ExtractionPodPositioning { get { return this[nameof(ExtractionPodPositioning)].As<DebrisPositioning>(); } set { this["ExtractionPodPositioning"] = value; } }
        public CurveFloat ExtractionPodCostCurve { get { return this[nameof(ExtractionPodCostCurve)].As<CurveFloat>(); } set { this["ExtractionPodCostCurve"] = value; } }
        public PhysicalMaterial InvulnerableOverride { get { return this[nameof(InvulnerableOverride)].As<PhysicalMaterial>(); } set { this["InvulnerableOverride"] = value; } }
        public PhysicalMaterial WeakPointMaterial { get { return this[nameof(WeakPointMaterial)].As<PhysicalMaterial>(); } set { this["WeakPointMaterial"] = value; } }
        public SoundCue InitialBreakFreeSound { get { return this[nameof(InitialBreakFreeSound)].As<SoundCue>(); } set { this["InitialBreakFreeSound"] = value; } }
        public SoundCue BreakFreeSound { get { return this[nameof(BreakFreeSound)].As<SoundCue>(); } set { this["BreakFreeSound"] = value; } }
        public SoundCue ActivatedWarningSound { get { return this[nameof(ActivatedWarningSound)].As<SoundCue>(); } set { this["ActivatedWarningSound"] = value; } }
        public SoundCue BeamShootSound { get { return this[nameof(BeamShootSound)].As<SoundCue>(); } set { this["BeamShootSound"] = value; } }
        public SoundCue BeamImpactSound { get { return this[nameof(BeamImpactSound)].As<SoundCue>(); } set { this["BeamImpactSound"] = value; } }
        public SoundCue EmbeddedSound { get { return this[nameof(EmbeddedSound)].As<SoundCue>(); } set { this["EmbeddedSound"] = value; } }
        public SoundCue PushBackSound { get { return this[nameof(PushBackSound)].As<SoundCue>(); } set { this["PushBackSound"] = value; } }
        public NiagaraSystem PushBackEffect { get { return this[nameof(PushBackEffect)].As<NiagaraSystem>(); } set { this["PushBackEffect"] = value; } }
        public NiagaraSystem BeamEffect { get { return this[nameof(BeamEffect)].As<NiagaraSystem>(); } set { this["BeamEffect"] = value; } }
        public NiagaraSystem BeamImpactEffect { get { return this[nameof(BeamImpactEffect)].As<NiagaraSystem>(); } set { this["BeamImpactEffect"] = value; } }
        public float DeathDisplayTime { get { return this[nameof(DeathDisplayTime)].GetValue<float>(); } set { this[nameof(DeathDisplayTime)].SetValue<float>(value); } }
        public float SafetyDistance { get { return this[nameof(SafetyDistance)].GetValue<float>(); } set { this[nameof(SafetyDistance)].SetValue<float>(value); } }
        public float TargetFlightHeight { get { return this[nameof(TargetFlightHeight)].GetValue<float>(); } set { this[nameof(TargetFlightHeight)].SetValue<float>(value); } }
        public float KnockBackInterval { get { return this[nameof(KnockBackInterval)].GetValue<float>(); } set { this[nameof(KnockBackInterval)].SetValue<float>(value); } }
        public float MaxFallSpeed { get { return this[nameof(MaxFallSpeed)].GetValue<float>(); } set { this[nameof(MaxFallSpeed)].SetValue<float>(value); } }
        public float FallAcceleration { get { return this[nameof(FallAcceleration)].GetValue<float>(); } set { this[nameof(FallAcceleration)].SetValue<float>(value); } }
        public float CheckPathsInterval { get { return this[nameof(CheckPathsInterval)].GetValue<float>(); } set { this[nameof(CheckPathsInterval)].SetValue<float>(value); } }
        public float ReinforcementCooldown { get { return this[nameof(ReinforcementCooldown)].GetValue<float>(); } set { this[nameof(ReinforcementCooldown)].SetValue<float>(value); } }
        public float BossHealthBarDelay { get { return this[nameof(BossHealthBarDelay)].GetValue<float>(); } set { this[nameof(BossHealthBarDelay)].SetValue<float>(value); } }
        public bool InitialCarvingDone { get { return this[nameof(InitialCarvingDone)].Flag; } set { this[nameof(InitialCarvingDone)].Flag = value; } }
        public bool RotateBeamComponents { get { return this[nameof(RotateBeamComponents)].Flag; } set { this[nameof(RotateBeamComponents)].Flag = value; } }
        public RuntimeFloatCurve FlightCurve { get { return this[nameof(FlightCurve)].As<RuntimeFloatCurve>(); } set { this["FlightCurve"] = value; } }
        public RuntimeFloatCurve FallCurve { get { return this[nameof(FallCurve)].As<RuntimeFloatCurve>(); } set { this["FallCurve"] = value; } }
        public byte State { get { return this[nameof(State)].GetValue<byte>(); } set { this[nameof(State)].SetValue<byte>(value); } }
        public void StopWave() { Invoke(nameof(StopWave)); }
        public void StopRumble() { Invoke(nameof(StopRumble)); }
        public void StartWave() { Invoke(nameof(StartWave)); }
        public void StartRumble() { Invoke(nameof(StartRumble)); }
        public void SpawnReinforcements() { Invoke(nameof(SpawnReinforcements)); }
        public void SpawnExtractionPod(Vector locaiton) { Invoke(nameof(SpawnExtractionPod), locaiton); }
        public void ShowHeathBar() { Invoke(nameof(ShowHeathBar)); }
        public void ShowCallingEffects() { Invoke(nameof(ShowCallingEffects)); }
        public void SetState(byte State) { Invoke(nameof(SetState), State); }
        public void ReplaceCrystal(Transform SpawnTransform) { Invoke(nameof(ReplaceCrystal), SpawnTransform); }
        public void Receive_ExitedState(byte State) { Invoke(nameof(Receive_ExitedState), State); }
        public void Receive_EnteredState(byte State) { Invoke(nameof(Receive_EnteredState), State); }
        public void OnTerrainPointRemoved(SceneComponent Point) { Invoke(nameof(OnTerrainPointRemoved), Point); }
        public void OnRiftSpawned(Actor Rift) { Invoke(nameof(OnRiftSpawned), Rift); }
        public void OnRep_State(byte oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnNewHealthSegment(int currentSegment, int prevSegment) { Invoke(nameof(OnNewHealthSegment), currentSegment, prevSegment); }
        public void OnExitedKnockbackZone(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnExitedKnockbackZone), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnEnteredKnockbackZone(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnEnteredKnockbackZone), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void OnDeath(HealthComponent HealthComponent, float damageAmount, DamageData DamageData, UArray<DamageTag> damageTags) { Invoke(nameof(OnDeath), HealthComponent, damageAmount, DamageData, damageTags); }
        public void OnDamaged(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnDamaged), Damage, DamageData, anyHealthLost); }
        public void OnAllRiftsOpened() { Invoke(nameof(OnAllRiftsOpened)); }
        public void EnableTerrainDetection() { Invoke(nameof(EnableTerrainDetection)); }
        public void DisableTerrainDetection() { Invoke(nameof(DisableTerrainDetection)); }
        public void DestroyPillar() { Invoke(nameof(DestroyPillar)); }
        public void CarvePillar(bool showEffects) { Invoke(nameof(CarvePillar), showEffects); }
        public void All_ShowRiftSpawnEffects(Vector_NetQuantize riftLocation) { Invoke(nameof(All_ShowRiftSpawnEffects), riftLocation); }
        public void All_AddKnockBack(Vector_NetQuantize Direction, float force) { Invoke(nameof(All_AddKnockBack), Direction, force); }
    }
    public class RiftSpawnerComponent : ActorComponent
    {
        public RiftSpawnerComponent(nint addr) : base(addr) { }
        public Object OnRiftSpawned { get { return this[nameof(OnRiftSpawned)]; } set { this[nameof(OnRiftSpawned)] = value; } }
        public Object OnFinishedSpawningRifts { get { return this[nameof(OnFinishedSpawningRifts)]; } set { this[nameof(OnFinishedSpawningRifts)] = value; } }
        public Object OnAllRiftsOpened { get { return this[nameof(OnAllRiftsOpened)]; } set { this[nameof(OnAllRiftsOpened)] = value; } }
        public UArray<Actor> spawned { get { return new UArray<Actor>(this[nameof(spawned)].Address); } }
        public Object AmountByDifficulty { get { return this[nameof(AmountByDifficulty)]; } set { this[nameof(AmountByDifficulty)] = value; } }
        public Object RiftClass { get { return this[nameof(RiftClass)]; } set { this[nameof(RiftClass)] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public float SpawnInterval { get { return this[nameof(SpawnInterval)].GetValue<float>(); } set { this[nameof(SpawnInterval)].SetValue<float>(value); } }
        public float SpawnDeviation { get { return this[nameof(SpawnDeviation)].GetValue<float>(); } set { this[nameof(SpawnDeviation)].SetValue<float>(value); } }
        public float InitialSpawnDelay { get { return this[nameof(InitialSpawnDelay)].GetValue<float>(); } set { this[nameof(InitialSpawnDelay)].SetValue<float>(value); } }
        public int AmountToSpawn { get { return this[nameof(AmountToSpawn)].GetValue<int>(); } set { this[nameof(AmountToSpawn)].SetValue<int>(value); } }
        public bool SpawnOneAtATime { get { return this[nameof(SpawnOneAtATime)].Flag; } set { this[nameof(SpawnOneAtATime)].Flag = value; } }
        public bool DisallowSpawning { get { return this[nameof(DisallowSpawning)].Flag; } set { this[nameof(DisallowSpawning)].Flag = value; } }
        public void StopSpawning() { Invoke(nameof(StopSpawning)); }
        public void StartSpawning() { Invoke(nameof(StartSpawning)); }
        public void SpawnRift() { Invoke(nameof(SpawnRift)); }
        public void ReportRiftOpened(Actor Rift) { Invoke(nameof(ReportRiftOpened), Rift); }
        public void PreFetchSpawnLocations(Vector Origin) { Invoke(nameof(PreFetchSpawnLocations), Origin); }
        public void OnRep_Spawned() { Invoke(nameof(OnRep_Spawned)); }
        public UArray<Actor> GetRifts() { return Invoke<UArray<Actor>>(nameof(GetRifts)); }
        public bool CollectSpawnLocations(Vector Origin) { return Invoke<bool>(nameof(CollectSpawnLocations), Origin); }
    }
    public class RivalBomb : GameEvent
    {
        public RivalBomb(nint addr) : base(addr) { }
        public UArray<RivalBombNode> ActiveNodeInstances { get { return new UArray<RivalBombNode>(this[nameof(ActiveNodeInstances)].Address); } }
        public float NodeHackTime { get { return this[nameof(NodeHackTime)].GetValue<float>(); } set { this[nameof(NodeHackTime)].SetValue<float>(value); } }
        public int NumNodesToHack { get { return this[nameof(NumNodesToHack)].GetValue<int>(); } set { this[nameof(NumNodesToHack)].SetValue<int>(value); } }
        public bool bDataCellPickedUp { get { return this[nameof(bDataCellPickedUp)].Flag; } set { this[nameof(bDataCellPickedUp)].Flag = value; } }
        public Object DataCell { get { return this[nameof(DataCell)]; } set { this[nameof(DataCell)] = value; } }
        public Object RivalBomb_value { get { return this[nameof(RivalBomb)]; } set { this[nameof(RivalBomb)] = value; } }
        public DebrisPositioning NodePositioning { get { return this[nameof(NodePositioning)].As<DebrisPositioning>(); } set { this["NodePositioning"] = value; } }
        public CurveFloat NodeCostCurve { get { return this[nameof(NodeCostCurve)].As<CurveFloat>(); } set { this["NodeCostCurve"] = value; } }
        public void UpdateNodesOnStart() { Invoke(nameof(UpdateNodesOnStart)); }
        public void SpawnDataCell() { Invoke(nameof(SpawnDataCell)); }
        public void ReceiveDataCellPickedUp() { Invoke(nameof(ReceiveDataCellPickedUp)); }
        public void OnRep_DataCellPickedUp() { Invoke(nameof(OnRep_DataCellPickedUp)); }
        public void OnMatchStarted() { Invoke(nameof(OnMatchStarted)); }
        public void OnDataCellPickedUp(bool Attached, Vector PrevScale) { Invoke(nameof(OnDataCellPickedUp), Attached, PrevScale); }
        public void DeactivateAllNodes(bool failed) { Invoke(nameof(DeactivateAllNodes), failed); }
        public void ActivateNewNode() { Invoke(nameof(ActivateNewNode)); }
    }
    public class RivalBombNode : Actor
    {
        public RivalBombNode(nint addr) : base(addr) { }
        public Object OnStateChanged { get { return this[nameof(OnStateChanged)]; } set { this[nameof(OnStateChanged)] = value; } }
        public Object RivalBombCable { get { return this[nameof(RivalBombCable)]; } set { this[nameof(RivalBombCable)] = value; } }
        public HackingUsableComponent HackingUsable { get { return this[nameof(HackingUsable)].As<HackingUsableComponent>(); } set { this["HackingUsable"] = value; } }
        public ERivalBombNodeState State { get { return (ERivalBombNodeState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public SplineCableActor BombCable { get { return this[nameof(BombCable)].As<SplineCableActor>(); } set { this["BombCable"] = value; } }
        public RivalBomb RivalBomb { get { return this[nameof(RivalBomb)].As<RivalBomb>(); } set { this["RivalBomb"] = value; } }
        public float RemainingHackTime { get { return this[nameof(RemainingHackTime)].GetValue<float>(); } set { this[nameof(RemainingHackTime)].SetValue<float>(value); } }
        public float HackStartTime { get { return this[nameof(HackStartTime)].GetValue<float>(); } set { this[nameof(HackStartTime)].SetValue<float>(value); } }
        public int BombIndex { get { return this[nameof(BombIndex)].GetValue<int>(); } set { this[nameof(BombIndex)].SetValue<int>(value); } }
        public void StateChangedDelegate__DelegateSignature(RivalBombNode InBombNode, ERivalBombNodeState InState) { Invoke(nameof(StateChangedDelegate__DelegateSignature), InBombNode, InState); }
        public void ReceiveStateUpdated() { Invoke(nameof(ReceiveStateUpdated)); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_RemainingHackTime() { Invoke(nameof(OnRep_RemainingHackTime)); }
        public void OnNodeHackedByUser(PlayerCharacter Player) { Invoke(nameof(OnNodeHackedByUser), Player); }
        public void OnHackTimerTick() { Invoke(nameof(OnHackTimerTick)); }
        public float GetRemainingTimePct() { return Invoke<float>(nameof(GetRemainingTimePct)); }
    }
    public class RivalBombNodeAniminstance : AnimInstance
    {
        public RivalBombNodeAniminstance(nint addr) : base(addr) { }
        public bool IsActive { get { return this[nameof(IsActive)].Flag; } set { this[nameof(IsActive)].Flag = value; } }
        public bool IsFailed { get { return this[nameof(IsFailed)].Flag; } set { this[nameof(IsFailed)].Flag = value; } }
        public bool isDone { get { return this[nameof(isDone)].Flag; } set { this[nameof(isDone)].Flag = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float StartOffset { get { return this[nameof(StartOffset)].GetValue<float>(); } set { this[nameof(StartOffset)].SetValue<float>(value); } }
        public void SetRivalBombNodeState(ERivalBombNodeState NewState) { Invoke(nameof(SetRivalBombNodeState), NewState); }
    }
    public class RockCrackerPod : RessuplyPod
    {
        public RockCrackerPod(nint addr) : base(addr) { }
        public FriendlyHealthComponent Health { get { return this[nameof(Health)].As<FriendlyHealthComponent>(); } set { this["Health"] = value; } }
        public ContinuousUsableComponent RepairUsable { get { return this[nameof(RepairUsable)].As<ContinuousUsableComponent>(); } set { this["RepairUsable"] = value; } }
        public Object OnRockCrackerStateChanged { get { return this[nameof(OnRockCrackerStateChanged)]; } set { this[nameof(OnRockCrackerStateChanged)] = value; } }
        public float DrainPerSecond { get { return this[nameof(DrainPerSecond)].GetValue<float>(); } set { this[nameof(DrainPerSecond)].SetValue<float>(value); } }
        public ERockCrackerstate PodState { get { return (ERockCrackerstate)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
        public RockCrackerPod EndPointDrill { get { return this[nameof(EndPointDrill)].As<RockCrackerPod>(); } set { this["EndPointDrill"] = value; } }
        public DialogDataAsset InDangerDialogue { get { return this[nameof(InDangerDialogue)].As<DialogDataAsset>(); } set { this["InDangerDialogue"] = value; } }
        public bool LightsAreGreen { get { return this[nameof(LightsAreGreen)].Flag; } set { this[nameof(LightsAreGreen)].Flag = value; } }
        public float DrainImmunityTime { get { return this[nameof(DrainImmunityTime)].GetValue<float>(); } set { this[nameof(DrainImmunityTime)].SetValue<float>(value); } }
        public float YellowLightsThreshold { get { return this[nameof(YellowLightsThreshold)].GetValue<float>(); } set { this[nameof(YellowLightsThreshold)].SetValue<float>(value); } }
        public float HealPerTick { get { return this[nameof(HealPerTick)].GetValue<float>(); } set { this[nameof(HealPerTick)].SetValue<float>(value); } }
        public void SwitchYellowLights(bool isGreen) { Invoke(nameof(SwitchYellowLights), isGreen); }
        public void SetPodState(ERockCrackerstate PodState) { Invoke(nameof(SetPodState), PodState); }
        public void OnRepairTick(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnRepairTick), User, Key); }
        public void OnRep_PodState(ERockCrackerstate oldState) { Invoke(nameof(OnRep_PodState), oldState); }
        public void OnRep_LightsAreGreen() { Invoke(nameof(OnRep_LightsAreGreen)); }
        public void OnPodDamaged(float damageInfliced, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnPodDamaged), damageInfliced, DamageData, anyHealthLost); }
        public void OnExitState(ERockCrackerstate PodState) { Invoke(nameof(OnExitState), PodState); }
        public void OnEventStarted() { Invoke(nameof(OnEventStarted)); }
        public void OnEventEnded(bool wasSuccess) { Invoke(nameof(OnEventEnded), wasSuccess); }
        public void OnEnterState(ERockCrackerstate PodState) { Invoke(nameof(OnEnterState), PodState); }
        public bool IsBroken() { return Invoke<bool>(nameof(IsBroken)); }
        public ERockCrackerstate GetPodState() { return Invoke<ERockCrackerstate>(nameof(GetPodState)); }
        public void All_SwitchYellowLights(bool isGreen) { Invoke(nameof(All_SwitchYellowLights), isGreen); }
    }
    public class RockCrackerDrill : FuelLineEndPoint
    {
        public RockCrackerDrill(nint addr) : base(addr) { }
        public SingleUsableComponent ConstructUsable { get { return this[nameof(ConstructUsable)].As<SingleUsableComponent>(); } set { this["ConstructUsable"] = value; } }
        public void SetIsDrilling(bool isDrilling) { Invoke(nameof(SetIsDrilling), isDrilling); }
        public bool GetIsDrilling() { return Invoke<bool>(nameof(GetIsDrilling)); }
    }
    public class RockCrackedAnimInstance : AnimInstance
    {
        public RockCrackedAnimInstance(nint addr) : base(addr) { }
        public RockCrackerPod pod { get { return this[nameof(pod)].As<RockCrackerPod>(); } set { this["pod"] = value; } }
        public ERockCrackerstate PodState { get { return (ERockCrackerstate)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
        public bool IsActive { get { return this[nameof(IsActive)].Flag; } set { this[nameof(IsActive)].Flag = value; } }
        public bool IsBroken { get { return this[nameof(IsBroken)].Flag; } set { this[nameof(IsBroken)].Flag = value; } }
    }
    public class DrillAnimInstance : AnimInstance
    {
        public DrillAnimInstance(nint addr) : base(addr) { }
        public RockCrackerDrill Drill { get { return this[nameof(Drill)].As<RockCrackerDrill>(); } set { this["Drill"] = value; } }
        public float BuildProgress { get { return this[nameof(BuildProgress)].GetValue<float>(); } set { this[nameof(BuildProgress)].SetValue<float>(value); } }
        public bool Drilling { get { return this[nameof(Drilling)].Flag; } set { this[nameof(Drilling)].Flag = value; } }
    }
    public class RockEnemiesEvent : GameEvent
    {
        public RockEnemiesEvent(nint addr) : base(addr) { }
        public Object PowerUpClass { get { return this[nameof(PowerUpClass)]; } set { this[nameof(PowerUpClass)] = value; } }
        public float PowerUpGenerationTime { get { return this[nameof(PowerUpGenerationTime)].GetValue<float>(); } set { this[nameof(PowerUpGenerationTime)].SetValue<float>(value); } }
        public UArray<int> KillAmountPerPlayer { get { return new UArray<int>(this[nameof(KillAmountPerPlayer)].Address); } }
        public UArray<int> MaxEnemyCountPerPlayer { get { return new UArray<int>(this[nameof(MaxEnemyCountPerPlayer)].Address); } }
        public UArray<Pawn> SpawnedRockEnemies { get { return new UArray<Pawn>(this[nameof(SpawnedRockEnemies)].Address); } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public ParticleSystem MuzzleEffect { get { return this[nameof(MuzzleEffect)].As<ParticleSystem>(); } set { this["MuzzleEffect"] = value; } }
        public int PowerUpsPerGeneration { get { return this[nameof(PowerUpsPerGeneration)].GetValue<int>(); } set { this[nameof(PowerUpsPerGeneration)].SetValue<int>(value); } }
        public int GruntPointsAward { get { return this[nameof(GruntPointsAward)].GetValue<int>(); } set { this[nameof(GruntPointsAward)].SetValue<int>(value); } }
        public int TankPointsAward { get { return this[nameof(TankPointsAward)].GetValue<int>(); } set { this[nameof(TankPointsAward)].SetValue<int>(value); } }
        public EnemyGroupDescriptor RockEnemies { get { return this[nameof(RockEnemies)].As<EnemyGroupDescriptor>(); } set { this["RockEnemies"] = value; } }
        public void StopPowerupGeneration() { Invoke(nameof(StopPowerupGeneration)); }
        public void StartPowerupGeneration() { Invoke(nameof(StartPowerupGeneration)); }
        public void SpawnRockEnemies(float Difficulty, UArray<Vector> Locations) { Invoke(nameof(SpawnRockEnemies), Difficulty, Locations); }
        public void ShowFireEffects(int selectedBone) { Invoke(nameof(ShowFireEffects), selectedBone); }
        public void RockEnemySpawned(Pawn spawnedEnemy) { Invoke(nameof(RockEnemySpawned), spawnedEnemy); }
        public void RockEnemyDied(HealthComponentBase Health) { Invoke(nameof(RockEnemyDied), Health); }
        public void OnShoot() { Invoke(nameof(OnShoot)); }
        public void EnemySpawnedAfterComplete(Pawn spawnedEnemy) { Invoke(nameof(EnemySpawnedAfterComplete), spawnedEnemy); }
    }
    public class RoomCarverComponent : SceneComponent
    {
        public RoomCarverComponent(nint addr) : base(addr) { }
        public RoomGenerator RoomGenerator { get { return this[nameof(RoomGenerator)].As<RoomGenerator>(); } set { this["RoomGenerator"] = value; } }
    }
    public class RoomDecorationObject : DataAsset
    {
        public RoomDecorationObject(nint addr) : base(addr) { }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
    }
    public class RoomFeature : Object
    {
        public RoomFeature(nint addr) : base(addr) { }
        public UArray<RoomFeature> RoomFeatures { get { return new UArray<RoomFeature>(this[nameof(RoomFeatures)].Address); } }
    }
    public class RandomSelector : RoomFeature
    {
        public RandomSelector(nint addr) : base(addr) { }
        public int Min { get { return this[nameof(Min)].GetValue<int>(); } set { this[nameof(Min)].SetValue<int>(value); } }
        public int Max { get { return this[nameof(Max)].GetValue<int>(); } set { this[nameof(Max)].SetValue<int>(value); } }
    }
    public class FloodFillLine : RoomFeature
    {
        public FloodFillLine(nint addr) : base(addr) { }
        public FloodFillSettings WallNoiseOverride { get { return this[nameof(WallNoiseOverride)].As<FloodFillSettings>(); } set { this["WallNoiseOverride"] = value; } }
        public FloodFillSettings CeilingNoiseOverride { get { return this[nameof(CeilingNoiseOverride)].As<FloodFillSettings>(); } set { this["CeilingNoiseOverride"] = value; } }
        public FloodFillSettings FloorNoiseOverride { get { return this[nameof(FloorNoiseOverride)].As<FloodFillSettings>(); } set { this["FloorNoiseOverride"] = value; } }
        public bool UseDetailNoise { get { return this[nameof(UseDetailNoise)].Flag; } set { this[nameof(UseDetailNoise)].Flag = value; } }
        public UArray<RoomLinePoint> Points { get { return new UArray<RoomLinePoint>(this[nameof(Points)].Address); } }
    }
    public class FloodFillPillar : RoomFeature
    {
        public FloodFillPillar(nint addr) : base(addr) { }
        public FloodFillSettings NoiseOverride { get { return this[nameof(NoiseOverride)].As<FloodFillSettings>(); } set { this["NoiseOverride"] = value; } }
        public UArray<RandLinePoint> Points { get { return new UArray<RandLinePoint>(this[nameof(Points)].Address); } }
        public RandRange RangeScale { get { return this[nameof(RangeScale)].As<RandRange>(); } set { this["RangeScale"] = value; } }
        public RandRange NoiseRangeScale { get { return this[nameof(NoiseRangeScale)].As<RandRange>(); } set { this["NoiseRangeScale"] = value; } }
        public RandRange EndcapScale { get { return this[nameof(EndcapScale)].As<RandRange>(); } set { this["EndcapScale"] = value; } }
    }
    public class FloodFillProceduralPillar : RoomFeature
    {
        public FloodFillProceduralPillar(nint addr) : base(addr) { }
        public UArray<Vector> Points { get { return new UArray<Vector>(this[nameof(Points)].Address); } }
        public PillarSettings PillarSettings { get { return this[nameof(PillarSettings)].As<PillarSettings>(); } set { this["PillarSettings"] = value; } }
    }
    public class FloodFillBox : RoomFeature
    {
        public FloodFillBox(nint addr) : base(addr) { }
        public FloodFillSettings Noise { get { return this[nameof(Noise)].As<FloodFillSettings>(); } set { this["Noise"] = value; } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector Extends { get { return this[nameof(Extends)].As<Vector>(); } set { this["Extends"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public bool IsCarver { get { return this[nameof(IsCarver)].Flag; } set { this[nameof(IsCarver)].Flag = value; } }
        public float NoiseRange { get { return this[nameof(NoiseRange)].GetValue<float>(); } set { this[nameof(NoiseRange)].SetValue<float>(value); } }
    }
    public class EntranceFeature : RoomFeature
    {
        public EntranceFeature(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Direction { get { return this[nameof(Direction)].As<Rotator>(); } set { this["Direction"] = value; } }
        public ECaveEntranceType EntranceType { get { return (ECaveEntranceType)this[nameof(EntranceType)].GetValue<int>(); } set { this[nameof(EntranceType)].SetValue<int>((int)value); } }
        public ECaveEntrancePriority Priority { get { return (ECaveEntrancePriority)this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>((int)value); } }
    }
    public class ResourceFeature : RoomFeature
    {
        public ResourceFeature(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float BaseAmount { get { return this[nameof(BaseAmount)].GetValue<float>(); } set { this[nameof(BaseAmount)].SetValue<float>(value); } }
    }
    public class SpawnActorFeature : RoomFeature
    {
        public SpawnActorFeature(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Object ActorToSpawn { get { return this[nameof(ActorToSpawn)]; } set { this[nameof(ActorToSpawn)] = value; } }
        public Vector AdjustmentDirection { get { return this[nameof(AdjustmentDirection)].As<Vector>(); } set { this["AdjustmentDirection"] = value; } }
        public EItemAdjustmentType Adjustment { get { return (EItemAdjustmentType)this[nameof(Adjustment)].GetValue<int>(); } set { this[nameof(Adjustment)].SetValue<int>((int)value); } }
        public Vector ScaleMin { get { return this[nameof(ScaleMin)].As<Vector>(); } set { this["ScaleMin"] = value; } }
        public Vector ScaleMax { get { return this[nameof(ScaleMax)].As<Vector>(); } set { this["ScaleMax"] = value; } }
        public Rotator RotationDelta { get { return this[nameof(RotationDelta)].As<Rotator>(); } set { this["RotationDelta"] = value; } }
    }
    public class SpawnTriggerFeature : RoomFeature
    {
        public SpawnTriggerFeature(nint addr) : base(addr) { }
        public Object TriggerClass { get { return this[nameof(TriggerClass)]; } set { this[nameof(TriggerClass)] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
    }
    public class SpawnTrigger : Actor
    {
        public SpawnTrigger(nint addr) : base(addr) { }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
    }
    public class SubRoomFeature : RoomFeature
    {
        public SubRoomFeature(nint addr) : base(addr) { }
        public RoomGenerator RoomGenerator { get { return this[nameof(RoomGenerator)].As<RoomGenerator>(); } set { this["RoomGenerator"] = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
    }
    public class RandomSubRoomFeature : RoomFeature
    {
        public RandomSubRoomFeature(nint addr) : base(addr) { }
        public RoomGeneratorGroup RoomGroup { get { return this[nameof(RoomGroup)].As<RoomGeneratorGroup>(); } set { this["RoomGroup"] = value; } }
        public GameplayTagQuery tagQuery { get { return this[nameof(tagQuery)].As<GameplayTagQuery>(); } set { this["tagQuery"] = value; } }
        public int Layer { get { return this[nameof(Layer)].GetValue<int>(); } set { this[nameof(Layer)].SetValue<int>(value); } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
    }
    public class DropPodCalldownLocationFeature : RoomFeature
    {
        public DropPodCalldownLocationFeature(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Object CalldownClass { get { return this[nameof(CalldownClass)]; } set { this[nameof(CalldownClass)] = value; } }
    }
    public class RoomGeneratorBase : DataAsset
    {
        public RoomGeneratorBase(nint addr) : base(addr) { }
        public float Bounds { get { return this[nameof(Bounds)].GetValue<float>(); } set { this[nameof(Bounds)].SetValue<float>(value); } }
        public bool CanOnlyBeUsedOnce { get { return this[nameof(CanOnlyBeUsedOnce)].Flag; } set { this[nameof(CanOnlyBeUsedOnce)].Flag = value; } }
        public ERoomMirroringSupport MirrorSupport { get { return (ERoomMirroringSupport)this[nameof(MirrorSupport)].GetValue<int>(); } set { this[nameof(MirrorSupport)].SetValue<int>((int)value); } }
        public GameplayTagContainer RoomTags { get { return this[nameof(RoomTags)].As<GameplayTagContainer>(); } set { this["RoomTags"] = value; } }
    }
    public class RoomGenerator : RoomGeneratorBase
    {
        public RoomGenerator(nint addr) : base(addr) { }
        public UArray<RoomFeature> RoomFeatures { get { return new UArray<RoomFeature>(this[nameof(RoomFeatures)].Address); } }
        public UArray<RoomFeature> GetAllRoomFeatures() { return Invoke<UArray<RoomFeature>>(nameof(GetAllRoomFeatures)); }
    }
    public class RoomGeneratorGroup : DataAsset
    {
        public RoomGeneratorGroup(nint addr) : base(addr) { }
        public UArray<RoomGenerator> Rooms { get { return new UArray<RoomGenerator>(this[nameof(Rooms)].Address); } }
        public RoomGenerator GetRandomRoomWithTags(RoomGeneratorGroupInstance groupInstance, GameplayTagQuery queury, RandomStream RandomStream) { return Invoke<RoomGenerator>(nameof(GetRandomRoomWithTags), groupInstance, queury, RandomStream); }
        public RoomGenerator GetRandomRoom(RandomStream RandomStream) { return Invoke<RoomGenerator>(nameof(GetRandomRoom), RandomStream); }
        public RoomGeneratorGroupInstance CreateGroupInstance() { return Invoke<RoomGeneratorGroupInstance>(nameof(CreateGroupInstance)); }
    }
    public class RotateToFace : SceneComponent
    {
        public RotateToFace(nint addr) : base(addr) { }
        public Vector TargetOffset { get { return this[nameof(TargetOffset)].As<Vector>(); } set { this["TargetOffset"] = value; } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public int Face { get { return this[nameof(Face)].GetValue<int>(); } set { this[nameof(Face)].SetValue<int>(value); } }
        public void SetTarget(Actor Target) { Invoke(nameof(SetTarget), Target); }
        public void SetShouldFaceAway(bool FaceAway) { Invoke(nameof(SetShouldFaceAway), FaceAway); }
    }
    public class RotatingSceneComponent : SceneComponent
    {
        public RotatingSceneComponent(nint addr) : base(addr) { }
        public Rotator DeltaRotaion { get { return this[nameof(DeltaRotaion)].As<Rotator>(); } set { this["DeltaRotaion"] = value; } }
        public float BobbingSpeed { get { return this[nameof(BobbingSpeed)].GetValue<float>(); } set { this[nameof(BobbingSpeed)].SetValue<float>(value); } }
        public float BobbingSize { get { return this[nameof(BobbingSize)].GetValue<float>(); } set { this[nameof(BobbingSize)].SetValue<float>(value); } }
        public bool Sweep { get { return this[nameof(Sweep)].Flag; } set { this[nameof(Sweep)].Flag = value; } }
        public bool ForceParentUp { get { return this[nameof(ForceParentUp)].Flag; } set { this[nameof(ForceParentUp)].Flag = value; } }
        public ETeleportType TeleportMode { get { return (ETeleportType)this[nameof(TeleportMode)].GetValue<int>(); } set { this[nameof(TeleportMode)].SetValue<int>((int)value); } }
        public void Stop() { Invoke(nameof(Stop)); }
        public void Start() { Invoke(nameof(Start)); }
    }
    public class SalvageObjective : Objective
    {
        public SalvageObjective(nint addr) : base(addr) { }
        public int SalvageActorCount { get { return this[nameof(SalvageActorCount)].GetValue<int>(); } set { this[nameof(SalvageActorCount)].SetValue<int>(value); } }
        public GemResourceData LegResource { get { return this[nameof(LegResource)].As<GemResourceData>(); } set { this["LegResource"] = value; } }
        public int LegCountPerActor { get { return this[nameof(LegCountPerActor)].GetValue<int>(); } set { this[nameof(LegCountPerActor)].SetValue<int>(value); } }
        public float LegDistanceToActor { get { return this[nameof(LegDistanceToActor)].GetValue<float>(); } set { this[nameof(LegDistanceToActor)].SetValue<float>(value); } }
        public Object OnDisableLegSpheres { get { return this[nameof(OnDisableLegSpheres)]; } set { this[nameof(OnDisableLegSpheres)] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public UArray<Object> Debris { get { return new UArray<Object>(this[nameof(Debris)].Address); } }
        public Object SalvageActor { get { return this[nameof(SalvageActor)]; } set { this[nameof(SalvageActor)] = value; } }
        public Object DamagedPodClass { get { return this[nameof(DamagedPodClass)]; } set { this[nameof(DamagedPodClass)] = value; } }
        public DebrisPositioning DamagedPodPositioning { get { return this[nameof(DamagedPodPositioning)].As<DebrisPositioning>(); } set { this["DamagedPodPositioning"] = value; } }
        public float DamagedPodMinDistanceToDropZone { get { return this[nameof(DamagedPodMinDistanceToDropZone)].GetValue<float>(); } set { this[nameof(DamagedPodMinDistanceToDropZone)].SetValue<float>(value); } }
        public DropPod DamagedPod { get { return this[nameof(DamagedPod)].As<DropPod>(); } set { this["DamagedPod"] = value; } }
        public int ActorsToSalvage { get { return this[nameof(ActorsToSalvage)].GetValue<int>(); } set { this[nameof(ActorsToSalvage)].SetValue<int>(value); } }
        public int ActorsSalvaged { get { return this[nameof(ActorsSalvaged)].GetValue<int>(); } set { this[nameof(ActorsSalvaged)].SetValue<int>(value); } }
        public int RepairPoints { get { return this[nameof(RepairPoints)].GetValue<int>(); } set { this[nameof(RepairPoints)].SetValue<int>(value); } }
        public int PointsRepaired { get { return this[nameof(PointsRepaired)].GetValue<int>(); } set { this[nameof(PointsRepaired)].SetValue<int>(value); } }
        public float MinSalvageActorDistanceToLandingZone { get { return this[nameof(MinSalvageActorDistanceToLandingZone)].GetValue<float>(); } set { this[nameof(MinSalvageActorDistanceToLandingZone)].SetValue<float>(value); } }
        public bool HasMuleReturnedToPod { get { return this[nameof(HasMuleReturnedToPod)].Flag; } set { this[nameof(HasMuleReturnedToPod)].Flag = value; } }
        public UArray<MiniMule> AllSalvageActors { get { return new UArray<MiniMule>(this[nameof(AllSalvageActors)].Address); } }
        public UArray<MiniMule> SalvagedActors { get { return new UArray<MiniMule>(this[nameof(SalvagedActors)].Address); } }
        public void PointRepaired() { Invoke(nameof(PointRepaired)); }
        public void OnRep_PointsRepaired() { Invoke(nameof(OnRep_PointsRepaired)); }
        public void OnRep_ActorsToSalvage(int prevAmount) { Invoke(nameof(OnRep_ActorsToSalvage), prevAmount); }
        public void OnRep_ActorsSalvaged(int prevAmount) { Invoke(nameof(OnRep_ActorsSalvaged), prevAmount); }
        public void OnActorRepaired(RepairableComponent repairable) { Invoke(nameof(OnActorRepaired), repairable); }
        public Transform FindRepairPointLocation(ProceduralSetup Setup, Vector podLocation, float Radius, float maxVerticalDistance, DebrisPositioning DebrisPositioning, Object terrainPlacement, UArray<Vector> locationsToAvoid, CurveFloat AvoidCostCurve) { return Invoke<Transform>(nameof(FindRepairPointLocation), Setup, podLocation, Radius, maxVerticalDistance, DebrisPositioning, terrainPlacement, locationsToAvoid, AvoidCostCurve); }
        public void AllActorsSalvaged() { Invoke(nameof(AllActorsSalvaged)); }
    }
    public class SalvageFuelPod : RessuplyPod
    {
        public SalvageFuelPod(nint addr) : base(addr) { }
    }
    public class SavableObject : Object
    {
        public SavableObject(nint addr) : base(addr) { }
        public bool EnableDangerousSaveGameIDEditing { get { return this[nameof(EnableDangerousSaveGameIDEditing)].Flag; } set { this[nameof(EnableDangerousSaveGameIDEditing)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
    }
    public class SavableActor : Actor
    {
        public SavableActor(nint addr) : base(addr) { }
        public bool EnableDangerousSaveGameIDEditing { get { return this[nameof(EnableDangerousSaveGameIDEditing)].Flag; } set { this[nameof(EnableDangerousSaveGameIDEditing)].Flag = value; } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
    }
    public class SaveGameIDInterface : Interface
    {
        public SaveGameIDInterface(nint addr) : base(addr) { }
    }
    public class RefundableInterface : SaveGameIDInterface
    {
        public RefundableInterface(nint addr) : base(addr) { }
    }
    public class ItemIDInterface : Interface
    {
        public ItemIDInterface(nint addr) : base(addr) { }
    }
    public class SaveGameLibrary : BlueprintFunctionLibrary
    {
        public SaveGameLibrary(nint addr) : base(addr) { }
        public bool TryGetSaveGameSnapShot(Object WorldContext, Object Filename, int userIdx, SaveGameSnapShot OutSnapShot) { return Invoke<bool>(nameof(TryGetSaveGameSnapShot), WorldContext, Filename, userIdx, OutSnapShot); }
        public Object GetUserSaveGameSlots(Object UserId) { return Invoke<Object>(nameof(GetUserSaveGameSlots), UserId); }
        public Object GetAllSaveGameSlots() { return Invoke<Object>(nameof(GetAllSaveGameSlots)); }
    }
    public class SaveGameSettings : DataAsset
    {
        public SaveGameSettings(nint addr) : base(addr) { }
        public Object CampaignVanityFixupList { get { return this[nameof(CampaignVanityFixupList)]; } set { this[nameof(CampaignVanityFixupList)] = value; } }
    }
    public class SaveGameStateComponent : ActorComponent
    {
        public SaveGameStateComponent(nint addr) : base(addr) { }
        public Object OnEquippedPerksChanged { get { return this[nameof(OnEquippedPerksChanged)]; } set { this[nameof(OnEquippedPerksChanged)] = value; } }
        public Object OnItemUpgradeCrafted { get { return this[nameof(OnItemUpgradeCrafted)]; } set { this[nameof(OnItemUpgradeCrafted)] = value; } }
        public Object OnItemUpgradeUnequipped { get { return this[nameof(OnItemUpgradeUnequipped)]; } set { this[nameof(OnItemUpgradeUnequipped)] = value; } }
        public Object OnPlayerProgressChanged { get { return this[nameof(OnPlayerProgressChanged)]; } set { this[nameof(OnPlayerProgressChanged)] = value; } }
        public Object OnLoadoutChangedEvent { get { return this[nameof(OnLoadoutChangedEvent)]; } set { this[nameof(OnLoadoutChangedEvent)] = value; } }
        public Object OnCharacterStatsChanged { get { return this[nameof(OnCharacterStatsChanged)]; } set { this[nameof(OnCharacterStatsChanged)] = value; } }
        public Object OnCreditsChanged { get { return this[nameof(OnCreditsChanged)]; } set { this[nameof(OnCreditsChanged)] = value; } }
        public int Credits { get { return this[nameof(Credits)].GetValue<int>(); } set { this[nameof(Credits)].SetValue<int>(value); } }
        public UArray<SaveGameStatePerkItem> EquippedPerks { get { return new UArray<SaveGameStatePerkItem>(this[nameof(EquippedPerks)].Address); } }
        public VictoryPose VictoryPose { get { return this[nameof(VictoryPose)].As<VictoryPose>(); } set { this["VictoryPose"] = value; } }
        public ItemLoadout EquippedLoadout { get { return this[nameof(EquippedLoadout)].As<ItemLoadout>(); } set { this["EquippedLoadout"] = value; } }
        public ActiveCampaingMission ActiveCampaignMission { get { return this[nameof(ActiveCampaignMission)].As<ActiveCampaingMission>(); } set { this["ActiveCampaignMission"] = value; } }
        public UArray<ItemUpgradeSelection> ItemUpgradeSelections { get { return new UArray<ItemUpgradeSelection>(this[nameof(ItemUpgradeSelections)].Address); } }
        public PlayerProgress PlayerProgress { get { return this[nameof(PlayerProgress)].As<PlayerProgress>(); } set { this["PlayerProgress"] = value; } }
        public UArray<CharacterProgress> CharacterStats { get { return new UArray<CharacterProgress>(this[nameof(CharacterStats)].Address); } }
        public void SetCampaign() { Invoke(nameof(SetCampaign)); }
        public void Server_SetVictoryPose(VictoryPose pose) { Invoke(nameof(Server_SetVictoryPose), pose); }
        public void Server_SetPlayerProgress(PlayerProgress Progress) { Invoke(nameof(Server_SetPlayerProgress), Progress); }
        public void Server_SetLoadout(ItemLoadout Loadout, UArray<ItemUpgradeSelection> weaponLoadouts) { Invoke(nameof(Server_SetLoadout), Loadout, weaponLoadouts); }
        public void Server_SetEquippedPerks(UArray<SaveGameStatePerkItem> perks) { Invoke(nameof(Server_SetEquippedPerks), perks); }
        public void Server_SetCredits(int amount) { Invoke(nameof(Server_SetCredits), amount); }
        public void Server_SetCharacterStats(UArray<CharacterProgress> Stats) { Invoke(nameof(Server_SetCharacterStats), Stats); }
        public void Server_SetActiveCampaignMission(ActiveCampaingMission Data) { Invoke(nameof(Server_SetActiveCampaignMission), Data); }
        public void RefreshLoadoutFromSave(PlayerCharacterID characterID) { Invoke(nameof(RefreshLoadoutFromSave), characterID); }
        public void OnRep_PlayerProgress() { Invoke(nameof(OnRep_PlayerProgress)); }
        public void OnRep_ItemUpgradeSelections() { Invoke(nameof(OnRep_ItemUpgradeSelections)); }
        public void OnRep_Credits() { Invoke(nameof(OnRep_Credits)); }
        public void OnRep_CharacterStats() { Invoke(nameof(OnRep_CharacterStats)); }
        public void OnRep_ActiveCampaignMission() { Invoke(nameof(OnRep_ActiveCampaignMission)); }
        public void ItemUpgradeEquipSignature__DelegateSignature(Object itemClass, ItemUpgrade Upgrade) { Invoke(nameof(ItemUpgradeEquipSignature__DelegateSignature), itemClass, Upgrade); }
        public void ItemUpgradeCraftSignature__DelegateSignature(ItemUpgrade Upgrade) { Invoke(nameof(ItemUpgradeCraftSignature__DelegateSignature), Upgrade); }
        public bool IsActiveCampaignMission(GeneratedMission mission) { return Invoke<bool>(nameof(IsActiveCampaignMission), mission); }
        public CharacterProgress GetCharacterStat(PlayerCharacterID characterID) { return Invoke<CharacterProgress>(nameof(GetCharacterStat), characterID); }
        public void CreditsChangedDelegate__DelegateSignature() { Invoke(nameof(CreditsChangedDelegate__DelegateSignature)); }
    }
    public class SchematicRarity : DataAsset
    {
        public SchematicRarity(nint addr) : base(addr) { }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
    }
    public class Schematic : SavableDataAsset
    {
        public Schematic(nint addr) : base(addr) { }
        public Object OnSchematicAddedToInventory { get { return this[nameof(OnSchematicAddedToInventory)]; } set { this[nameof(OnSchematicAddedToInventory)] = value; } }
        public Object OnSchematicReset { get { return this[nameof(OnSchematicReset)]; } set { this[nameof(OnSchematicReset)] = value; } }
        public Object OnSchematicBuilt { get { return this[nameof(OnSchematicBuilt)]; } set { this[nameof(OnSchematicBuilt)] = value; } }
        public SchematicCategory Category { get { return this[nameof(Category)].As<SchematicCategory>(); } set { this["Category"] = value; } }
        public SchematicPricingTier PricingTier { get { return this[nameof(PricingTier)].As<SchematicPricingTier>(); } set { this["PricingTier"] = value; } }
        public SchematicRarity Rarity { get { return this[nameof(Rarity)].As<SchematicRarity>(); } set { this["Rarity"] = value; } }
        public PlayerCharacterID UsedByCharacter { get { return this[nameof(UsedByCharacter)].As<PlayerCharacterID>(); } set { this["UsedByCharacter"] = value; } }
        public SchematicItem Item { get { return this[nameof(Item)].As<SchematicItem>(); } set { this["Item"] = value; } }
        public Object CraftingCost { get { return this[nameof(CraftingCost)]; } set { this[nameof(CraftingCost)] = value; } }
        public bool CostIsLocked { get { return this[nameof(CostIsLocked)].Flag; } set { this[nameof(CostIsLocked)].Flag = value; } }
        public void SetCraftingMaterialCost() { Invoke(nameof(SetCraftingMaterialCost)); }
        public void SetCostLocked(bool IsLocked) { Invoke(nameof(SetCostLocked), IsLocked); }
        public void SchematicDelegate__DelegateSignature(Schematic Schematic) { Invoke(nameof(SchematicDelegate__DelegateSignature), Schematic); }
        public void ResetGivenReward(FSDSaveGame SaveGame) { Invoke(nameof(ResetGivenReward), SaveGame); }
        public void RemoveSchematicFromPlayerInventory(Object WorldContext) { Invoke(nameof(RemoveSchematicFromPlayerInventory), WorldContext); }
        public void GiveRewardForFree(FSDSaveGame SaveGame) { Invoke(nameof(GiveRewardForFree), SaveGame); }
        public Object GetTitle() { return Invoke<Object>(nameof(GetTitle)); }
        public ESchematicState GetSchematicState(Object WorldContext) { return Invoke<ESchematicState>(nameof(GetSchematicState), WorldContext); }
        public SchematicItem GetSchematicItem() { return Invoke<SchematicItem>(nameof(GetSchematicItem)); }
        public Object GetResourceCost() { return Invoke<Object>(nameof(GetResourceCost)); }
        public Color GetIconTint() { return Invoke<Color>(nameof(GetIconTint)); }
        public Texture GetIcon(Object WorldContextObject) { return Invoke<Texture>(nameof(GetIcon), WorldContextObject); }
        public Object GetDescription() { return Invoke<Object>(nameof(GetDescription)); }
        public bool CanAffordSchematic(Object WorldContext) { return Invoke<bool>(nameof(CanAffordSchematic), WorldContext); }
        public void BuildSchematic(Object WorldContext) { Invoke(nameof(BuildSchematic), WorldContext); }
        public void AddSchematicToPlayerInventory(Object WorldContext) { Invoke(nameof(AddSchematicToPlayerInventory), WorldContext); }
    }
    public class SchematicBankBase : DataAsset
    {
        public SchematicBankBase(nint addr) : base(addr) { }
    }
    public class SchematicBank : SchematicBankBase
    {
        public SchematicBank(nint addr) : base(addr) { }
        public Object Schematics { get { return this[nameof(Schematics)]; } set { this[nameof(Schematics)] = value; } }
        public void AddSchematic(Schematic Schematic) { Invoke(nameof(AddSchematic), Schematic); }
    }
    public class SchematicBankInterface : Interface
    {
        public SchematicBankInterface(nint addr) : base(addr) { }
    }
    public class SchematicCategory : SavableDataAsset
    {
        public SchematicCategory(nint addr) : base(addr) { }
        public Object CategoryName { get { return this[nameof(CategoryName)]; } set { this[nameof(CategoryName)] = value; } }
        public Object FrameTexture { get { return this[nameof(FrameTexture)]; } set { this[nameof(FrameTexture)] = value; } }
        public LinearColor FrameTint { get { return this[nameof(FrameTint)].As<LinearColor>(); } set { this["FrameTint"] = value; } }
        public LinearColor BackgroundTint { get { return this[nameof(BackgroundTint)].As<LinearColor>(); } set { this["BackgroundTint"] = value; } }
        public ESchematicType SchematicType { get { return (ESchematicType)this[nameof(SchematicType)].GetValue<int>(); } set { this[nameof(SchematicType)].SetValue<int>((int)value); } }
        public Object ShoutForging { get { return this[nameof(ShoutForging)]; } set { this[nameof(ShoutForging)] = value; } }
        public EventRewardType RewardType { get { return this[nameof(RewardType)].As<EventRewardType>(); } set { this["RewardType"] = value; } }
        public int SortOrder { get { return this[nameof(SortOrder)].GetValue<int>(); } set { this[nameof(SortOrder)].SetValue<int>(value); } }
    }
    public class SchematicBlueprintLibrary : BlueprintFunctionLibrary
    {
        public SchematicBlueprintLibrary(nint addr) : base(addr) { }
        public void PriceSchematics(Object Schematics) { Invoke(nameof(PriceSchematics), Schematics); }
        public void PriceAllSchematics(bool lockPrices) { Invoke(nameof(PriceAllSchematics), lockPrices); }
        public void LockSchematics(Object Schematics) { Invoke(nameof(LockSchematics), Schematics); }
        public bool HasAnyUnlockableSchematics(Object WorldContextObject, PlayerCharacterID characterID, Object Categories) { return Invoke<bool>(nameof(HasAnyUnlockableSchematics), WorldContextObject, characterID, Categories); }
        public SchematicCategory FindItemUpgradeSchematicCategory(ItemUpgrade Upgrade) { return Invoke<SchematicCategory>(nameof(FindItemUpgradeSchematicCategory), Upgrade); }
    }
    public class SchematicItem : Object
    {
        public SchematicItem(nint addr) : base(addr) { }
        public Object GetTitle() { return Invoke<Object>(nameof(GetTitle)); }
        public Color GetIconTint() { return Invoke<Color>(nameof(GetIconTint)); }
        public Texture GetIcon(Object WorldContextObject) { return Invoke<Texture>(nameof(GetIcon), WorldContextObject); }
        public Object GetDescription() { return Invoke<Object>(nameof(GetDescription)); }
    }
    public class OverclockShematicItem : SchematicItem
    {
        public OverclockShematicItem(nint addr) : base(addr) { }
        public ItemID OwningItem { get { return this[nameof(OwningItem)].As<ItemID>(); } set { this["OwningItem"] = value; } }
        public ItemUpgrade Overclock { get { return this[nameof(Overclock)].As<ItemUpgrade>(); } set { this["Overclock"] = value; } }
        public UpgradableGearComponent GetOwningGearComponent() { return Invoke<UpgradableGearComponent>(nameof(GetOwningGearComponent)); }
    }
    public class VanitySchematicItem : SchematicItem
    {
        public VanitySchematicItem(nint addr) : base(addr) { }
        public VanityItem Item { get { return this[nameof(Item)].As<VanityItem>(); } set { this["Item"] = value; } }
        public VanityItem GetVanityItem() { return Invoke<VanityItem>(nameof(GetVanityItem)); }
    }
    public class VictoryPoseSchematicItem : SchematicItem
    {
        public VictoryPoseSchematicItem(nint addr) : base(addr) { }
        public VictoryPose VictoryPose { get { return this[nameof(VictoryPose)].As<VictoryPose>(); } set { this["VictoryPose"] = value; } }
    }
    public class SkinSchematicItem : SchematicItem
    {
        public SkinSchematicItem(nint addr) : base(addr) { }
        public ItemID ItemID { get { return this[nameof(ItemID)].As<ItemID>(); } set { this["ItemID"] = value; } }
        public ItemSkin Skin { get { return this[nameof(Skin)].As<ItemSkin>(); } set { this["Skin"] = value; } }
    }
    public class ResourceSchematicItem : SchematicItem
    {
        public ResourceSchematicItem(nint addr) : base(addr) { }
        public int Credits { get { return this[nameof(Credits)].GetValue<int>(); } set { this[nameof(Credits)].SetValue<int>(value); } }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public int ResourceAmount { get { return this[nameof(ResourceAmount)].GetValue<int>(); } set { this[nameof(ResourceAmount)].SetValue<int>(value); } }
    }
    public class BlankSchematicItem : SchematicItem
    {
        public BlankSchematicItem(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
    }
    public class SchematicSettings : DataAsset
    {
        public SchematicSettings(nint addr) : base(addr) { }
        public DataTable PricingTable { get { return this[nameof(PricingTable)].As<DataTable>(); } set { this["PricingTable"] = value; } }
        public Schematic BlankSchematic { get { return this[nameof(BlankSchematic)].As<Schematic>(); } set { this["BlankSchematic"] = value; } }
        public Object SchematicBanks { get { return this[nameof(SchematicBanks)]; } set { this[nameof(SchematicBanks)] = value; } }
        public Object OverclockBanks { get { return this[nameof(OverclockBanks)]; } set { this[nameof(OverclockBanks)] = value; } }
        public Object VanitySchematicBanks { get { return this[nameof(VanitySchematicBanks)]; } set { this[nameof(VanitySchematicBanks)] = value; } }
        public Object SchematicTypes { get { return this[nameof(SchematicTypes)]; } set { this[nameof(SchematicTypes)] = value; } }
        public SchematicBank EndlessSchematics { get { return this[nameof(EndlessSchematics)].As<SchematicBank>(); } set { this["EndlessSchematics"] = value; } }
        public Object Categories { get { return this[nameof(Categories)]; } set { this[nameof(Categories)] = value; } }
        public UArray<SchematicCategory> OverclockCategories { get { return new UArray<SchematicCategory>(this[nameof(OverclockCategories)].Address); } }
        public UArray<SchematicCategory> VanityCategories { get { return new UArray<SchematicCategory>(this[nameof(VanityCategories)].Address); } }
        public UArray<SchematicCategory> EndlessCategories { get { return new UArray<SchematicCategory>(this[nameof(EndlessCategories)].Address); } }
        public SchematicPricingTier OverclockPricingTier { get { return this[nameof(OverclockPricingTier)].As<SchematicPricingTier>(); } set { this["OverclockPricingTier"] = value; } }
        public UArray<SchematicPricingTier> VanityPricingTiers { get { return new UArray<SchematicPricingTier>(this[nameof(VanityPricingTiers)].Address); } }
        public UArray<SchematicRarity> VanityRarity { get { return new UArray<SchematicRarity>(this[nameof(VanityRarity)].Address); } }
        public UArray<SchematicRarity> OverclockRarity { get { return new UArray<SchematicRarity>(this[nameof(OverclockRarity)].Address); } }
        public UArray<SchematicRarity> EndlessRarity { get { return new UArray<SchematicRarity>(this[nameof(EndlessRarity)].Address); } }
        public SchematicCategory VanityCatHeadWear { get { return this[nameof(VanityCatHeadWear)].As<SchematicCategory>(); } set { this["VanityCatHeadWear"] = value; } }
        public SchematicCategory VanityCatMoustache { get { return this[nameof(VanityCatMoustache)].As<SchematicCategory>(); } set { this["VanityCatMoustache"] = value; } }
        public SchematicCategory VanityCatBeard { get { return this[nameof(VanityCatBeard)].As<SchematicCategory>(); } set { this["VanityCatBeard"] = value; } }
        public SchematicCategory VanityCatArmor { get { return this[nameof(VanityCatArmor)].As<SchematicCategory>(); } set { this["VanityCatArmor"] = value; } }
        public SchematicCategory VanityCatEyebrow { get { return this[nameof(VanityCatEyebrow)].As<SchematicCategory>(); } set { this["VanityCatEyebrow"] = value; } }
        public SchematicCategory VanityCatHairColor { get { return this[nameof(VanityCatHairColor)].As<SchematicCategory>(); } set { this["VanityCatHairColor"] = value; } }
        public SchematicCategory VanityCatSideburn { get { return this[nameof(VanityCatSideburn)].As<SchematicCategory>(); } set { this["VanityCatSideburn"] = value; } }
        public SchematicCategory VanityCatSkinColor { get { return this[nameof(VanityCatSkinColor)].As<SchematicCategory>(); } set { this["VanityCatSkinColor"] = value; } }
        public SchematicCategory VanityCatVictoryPose { get { return this[nameof(VanityCatVictoryPose)].As<SchematicCategory>(); } set { this["VanityCatVictoryPose"] = value; } }
        public SchematicCategory WeaponPaintJob { get { return this[nameof(WeaponPaintJob)].As<SchematicCategory>(); } set { this["WeaponPaintJob"] = value; } }
        public DataTable SchematicGATable { get { return this[nameof(SchematicGATable)].As<DataTable>(); } set { this["SchematicGATable"] = value; } }
        public Object VanitySchematicIDsFromOldSeasons { get { return this[nameof(VanitySchematicIDsFromOldSeasons)]; } set { this[nameof(VanitySchematicIDsFromOldSeasons)] = value; } }
        public Object AllSchematicsMap { get { return this[nameof(AllSchematicsMap)]; } set { this[nameof(AllSchematicsMap)] = value; } }
        public Object AllSchematics { get { return this[nameof(AllSchematics)]; } set { this[nameof(AllSchematics)] = value; } }
        public bool ValidateVanitySchematics() { return Invoke<bool>(nameof(ValidateVanitySchematics)); }
        public SchematicType GetSchematicTypeData(ESchematicType InType) { return Invoke<SchematicType>(nameof(GetSchematicTypeData), InType); }
        public Object GetSchematics() { return Invoke<Object>(nameof(GetSchematics)); }
        public OverclockBank GetOverclocksForItem(ItemID Item) { return Invoke<OverclockBank>(nameof(GetOverclocksForItem), Item); }
    }
    public class ForginSettings : DataAsset
    {
        public ForginSettings(nint addr) : base(addr) { }
        public int XPRequiredPerLevel { get { return this[nameof(XPRequiredPerLevel)].GetValue<int>(); } set { this[nameof(XPRequiredPerLevel)].SetValue<int>(value); } }
        public UArray<ESchematicType> MasteryRewardCycle { get { return new UArray<ESchematicType>(this[nameof(MasteryRewardCycle)].Address); } }
    }
    public class SeamlessTravelEventActivator : ActorComponent
    {
        public SeamlessTravelEventActivator(nint addr) : base(addr) { }
        public SeamlessTravelEventKey EventKey { get { return this[nameof(EventKey)].As<SeamlessTravelEventKey>(); } set { this["EventKey"] = value; } }
    }
    public class SeamlessTravelEventKey : DataAsset
    {
        public SeamlessTravelEventKey(nint addr) : base(addr) { }
    }
    public class SeamlessTravelStorage : GameInstanceSubsystem
    {
        public SeamlessTravelStorage(nint addr) : base(addr) { }
        public GameDifficulty ChosenDifficulty { get { return this[nameof(ChosenDifficulty)].As<GameDifficulty>(); } set { this["ChosenDifficulty"] = value; } }
        public Object PlayerShouldStartInMedbay { get { return this[nameof(PlayerShouldStartInMedbay)]; } set { this[nameof(PlayerShouldStartInMedbay)] = value; } }
        public Object Resources { get { return this[nameof(Resources)]; } set { this[nameof(Resources)] = value; } }
        public float MissionTime { get { return this[nameof(MissionTime)].GetValue<float>(); } set { this[nameof(MissionTime)].SetValue<float>(value); } }
        public Object StoredFloatValues { get { return this[nameof(StoredFloatValues)]; } set { this[nameof(StoredFloatValues)] = value; } }
        public Object StoredIntValues { get { return this[nameof(StoredIntValues)]; } set { this[nameof(StoredIntValues)] = value; } }
        public Object EventKeys { get { return this[nameof(EventKeys)]; } set { this[nameof(EventKeys)] = value; } }
        public void ClearGameStateSeamlessTravelStorage() { Invoke(nameof(ClearGameStateSeamlessTravelStorage)); }
    }
    public class Season : SavableDataAsset
    {
        public Season(nint addr) : base(addr) { }
        public Object SeasonName { get { return this[nameof(SeasonName)]; } set { this[nameof(SeasonName)] = value; } }
        public int SeasonNumber { get { return this[nameof(SeasonNumber)].GetValue<int>(); } set { this[nameof(SeasonNumber)].SetValue<int>(value); } }
        public Object SeasonInfoText { get { return this[nameof(SeasonInfoText)]; } set { this[nameof(SeasonInfoText)] = value; } }
        public int MapKey { get { return this[nameof(MapKey)].GetValue<int>(); } set { this[nameof(MapKey)].SetValue<int>(value); } }
        public Object SeasonTitleCover { get { return this[nameof(SeasonTitleCover)]; } set { this[nameof(SeasonTitleCover)] = value; } }
        public LinearColor SeasonTitleBannerTint { get { return this[nameof(SeasonTitleBannerTint)].As<LinearColor>(); } set { this["SeasonTitleBannerTint"] = value; } }
        public Object SeasonIcon { get { return this[nameof(SeasonIcon)]; } set { this[nameof(SeasonIcon)] = value; } }
        public Object SeasonLogo { get { return this[nameof(SeasonLogo)]; } set { this[nameof(SeasonLogo)] = value; } }
        public Object SeasonFrontCover { get { return this[nameof(SeasonFrontCover)]; } set { this[nameof(SeasonFrontCover)] = value; } }
        public Object SeasonTerminalCover { get { return this[nameof(SeasonTerminalCover)]; } set { this[nameof(SeasonTerminalCover)] = value; } }
        public Object SeasonSelectionIcon { get { return this[nameof(SeasonSelectionIcon)]; } set { this[nameof(SeasonSelectionIcon)] = value; } }
        public Object SeaonDisableIcon { get { return this[nameof(SeaonDisableIcon)]; } set { this[nameof(SeaonDisableIcon)] = value; } }
        public Object TokenSingle { get { return this[nameof(TokenSingle)]; } set { this[nameof(TokenSingle)] = value; } }
        public Object TokensSignleNoEffect { get { return this[nameof(TokensSignleNoEffect)]; } set { this[nameof(TokensSignleNoEffect)] = value; } }
        public Object TokenPack { get { return this[nameof(TokenPack)]; } set { this[nameof(TokenPack)] = value; } }
        public Object TokenPackNoEffect { get { return this[nameof(TokenPackNoEffect)]; } set { this[nameof(TokenPackNoEffect)] = value; } }
        public Object SeasonMenuBGWidget { get { return this[nameof(SeasonMenuBGWidget)]; } set { this[nameof(SeasonMenuBGWidget)] = value; } }
        public Object SeasonMenuEventBonusWidget { get { return this[nameof(SeasonMenuEventBonusWidget)]; } set { this[nameof(SeasonMenuEventBonusWidget)] = value; } }
        public Object SeasonBriefingShowroomItem { get { return this[nameof(SeasonBriefingShowroomItem)]; } set { this[nameof(SeasonBriefingShowroomItem)] = value; } }
        public Object SeasonBriefingAudio { get { return this[nameof(SeasonBriefingAudio)]; } set { this[nameof(SeasonBriefingAudio)] = value; } }
        public Object SeasonBriefingText { get { return this[nameof(SeasonBriefingText)]; } set { this[nameof(SeasonBriefingText)] = value; } }
        public UArray<SeasonLevel> Levels { get { return new UArray<SeasonLevel>(this[nameof(Levels)].Address); } }
        public SeasonLevel RewardAfterAllLevels { get { return this[nameof(RewardAfterAllLevels)].As<SeasonLevel>(); } set { this["RewardAfterAllLevels"] = value; } }
        public SeasonLevel RewardIfAlreadyOwned { get { return this[nameof(RewardIfAlreadyOwned)].As<SeasonLevel>(); } set { this["RewardIfAlreadyOwned"] = value; } }
        public UArray<UnassignedReward> UnassignedRewards { get { return new UArray<UnassignedReward>(this[nameof(UnassignedRewards)].Address); } }
        public TreeOfVanity TreeOfVanity { get { return this[nameof(TreeOfVanity)].As<TreeOfVanity>(); } set { this["TreeOfVanity"] = value; } }
        public GameDLC SeasonDLC { get { return this[nameof(SeasonDLC)].As<GameDLC>(); } set { this["SeasonDLC"] = value; } }
        public ESeasonMissionMapOverlayType MissionMapEventZoneType { get { return (ESeasonMissionMapOverlayType)this[nameof(MissionMapEventZoneType)].GetValue<int>(); } set { this[nameof(MissionMapEventZoneType)].SetValue<int>((int)value); } }
        public RuntimeFloatCurve SpawnChanceByMissionLength { get { return this[nameof(SpawnChanceByMissionLength)].As<RuntimeFloatCurve>(); } set { this["SpawnChanceByMissionLength"] = value; } }
        public RuntimeFloatCurve MinorSpawnChanceByMissionLenght { get { return this[nameof(MinorSpawnChanceByMissionLenght)].As<RuntimeFloatCurve>(); } set { this["MinorSpawnChanceByMissionLenght"] = value; } }
        public UArray<SeasonalEventEntry> SeasonalEvents { get { return new UArray<SeasonalEventEntry>(this[nameof(SeasonalEvents)].Address); } }
        public UArray<SeasonalEventEntry> MinorSeasonalEvents { get { return new UArray<SeasonalEventEntry>(this[nameof(MinorSeasonalEvents)].Address); } }
        public UArray<SeasonChallenge> SeasonChallenges { get { return new UArray<SeasonChallenge>(this[nameof(SeasonChallenges)].Address); } }
        public int NumberOfScripChallenges { get { return this[nameof(NumberOfScripChallenges)].GetValue<int>(); } set { this[nameof(NumberOfScripChallenges)].SetValue<int>(value); } }
        public MissionStat ScripChallenge { get { return this[nameof(ScripChallenge)].As<MissionStat>(); } set { this["ScripChallenge"] = value; } }
        public UArray<WaveEntry> SeasonSpecificWaves { get { return new UArray<WaveEntry>(this[nameof(SeasonSpecificWaves)].Address); } }
        public float SeasonWaveInMissionChance { get { return this[nameof(SeasonWaveInMissionChance)].GetValue<float>(); } set { this[nameof(SeasonWaveInMissionChance)].SetValue<float>(value); } }
        public MissionWarning SeasonWarning { get { return this[nameof(SeasonWarning)].As<MissionWarning>(); } set { this["SeasonWarning"] = value; } }
        public Object SpacerigSeasonLevel { get { return this[nameof(SpacerigSeasonLevel)]; } set { this[nameof(SpacerigSeasonLevel)] = value; } }
        public float CaveDepthMultiplier { get { return this[nameof(CaveDepthMultiplier)].GetValue<float>(); } set { this[nameof(CaveDepthMultiplier)].SetValue<float>(value); } }
        public MissionStat HeartsColledtedStat { get { return this[nameof(HeartsColledtedStat)].As<MissionStat>(); } set { this["HeartsColledtedStat"] = value; } }
        public PropHuntEventSettings PropHuntSettings { get { return this[nameof(PropHuntSettings)].As<PropHuntEventSettings>(); } set { this["PropHuntSettings"] = value; } }
        public Texture2D GetTokenTexture(int tokenCount, bool hasEffect) { return Invoke<Texture2D>(nameof(GetTokenTexture), tokenCount, hasEffect); }
        public void AddUnassignedReward(int Index, Reward Reward) { Invoke(nameof(AddUnassignedReward), Index, Reward); }
        public void AddLevel(int Index, Reward Reward, Reward specialReward) { Invoke(nameof(AddLevel), Index, Reward, specialReward); }
    }
    public class SeasonChallenge : SavableDataAsset
    {
        public SeasonChallenge(nint addr) : base(addr) { }
        public Object ChallengeText { get { return this[nameof(ChallengeText)]; } set { this[nameof(ChallengeText)] = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public Object IconOutlined { get { return this[nameof(IconOutlined)]; } set { this[nameof(IconOutlined)] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public UArray<TrackedStatInfo> TrackedStats { get { return new UArray<TrackedStatInfo>(this[nameof(TrackedStats)].Address); } }
        public UArray<ChallengeVariation> Variations { get { return new UArray<ChallengeVariation>(this[nameof(Variations)].Address); } }
        public int NumberOfChoices { get { return this[nameof(NumberOfChoices)].GetValue<int>(); } set { this[nameof(NumberOfChoices)].SetValue<int>(value); } }
        public float ChallengeWeight { get { return this[nameof(ChallengeWeight)].GetValue<float>(); } set { this[nameof(ChallengeWeight)].SetValue<float>(value); } }
        public bool bIsSpecialChallenge { get { return this[nameof(bIsSpecialChallenge)].Flag; } set { this[nameof(bIsSpecialChallenge)].Flag = value; } }
        public int MaxOccurences { get { return this[nameof(MaxOccurences)].GetValue<int>(); } set { this[nameof(MaxOccurences)].SetValue<int>(value); } }
        public SeasonChallenge ChallengeAfterMaxOccurences { get { return this[nameof(ChallengeAfterMaxOccurences)].As<SeasonChallenge>(); } set { this["ChallengeAfterMaxOccurences"] = value; } }
        public UArray<Object> RequiredCampaigns { get { return new UArray<Object>(this[nameof(RequiredCampaigns)].Address); } }
        public Texture2D GetIconOutlined() { return Invoke<Texture2D>(nameof(GetIconOutlined)); }
        public Texture2D GetIcon() { return Invoke<Texture2D>(nameof(GetIcon)); }
    }
    public class SeasonEditorRewardWidget : UserWidget
    {
        public SeasonEditorRewardWidget(nint addr) : base(addr) { }
        public Reward Reward { get { return this[nameof(Reward)].As<Reward>(); } set { this["Reward"] = value; } }
    }
    public class SeasonLevelWidget : UserWidget
    {
        public SeasonLevelWidget(nint addr) : base(addr) { }
        public Object OnRewardClaimed { get { return this[nameof(OnRewardClaimed)]; } set { this[nameof(OnRewardClaimed)] = value; } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int SeasonLevel { get { return this[nameof(SeasonLevel)].GetValue<int>(); } set { this[nameof(SeasonLevel)].SetValue<int>(value); } }
        public bool IsNormalClaimed { get { return this[nameof(IsNormalClaimed)].Flag; } set { this[nameof(IsNormalClaimed)].Flag = value; } }
        public bool IsSpecialClaimed { get { return this[nameof(IsSpecialClaimed)].Flag; } set { this[nameof(IsSpecialClaimed)].Flag = value; } }
        public bool IsUnlocked { get { return this[nameof(IsUnlocked)].Flag; } set { this[nameof(IsUnlocked)].Flag = value; } }
        public bool IsLastInRow { get { return this[nameof(IsLastInRow)].Flag; } set { this[nameof(IsLastInRow)].Flag = value; } }
        public SeasonLevel LevelInfo { get { return this[nameof(LevelInfo)].As<SeasonLevel>(); } set { this["LevelInfo"] = value; } }
        public bool TryClaimReward(bool isNormalReward) { return Invoke<bool>(nameof(TryClaimReward), isNormalReward); }
        public void SetData(int InLevel, bool inLastInRow) { Invoke(nameof(SetData), InLevel, inLastInRow); }
        public void RefreshState() { Invoke(nameof(RefreshState)); }
        public void OnDataSet() { Invoke(nameof(OnDataSet)); }
    }
    public class SeasonInfinityLevelWidget : SeasonLevelWidget
    {
        public SeasonInfinityLevelWidget(nint addr) : base(addr) { }
        public int InfinityStartLevel { get { return this[nameof(InfinityStartLevel)].GetValue<int>(); } set { this[nameof(InfinityStartLevel)].SetValue<int>(value); } }
    }
    public class SeasonSettings : DataAsset
    {
        public SeasonSettings(nint addr) : base(addr) { }
        public UArray<Season> Seasons { get { return new UArray<Season>(this[nameof(Seasons)].Address); } }
        public int CurrentSeasonIndex { get { return this[nameof(CurrentSeasonIndex)].GetValue<int>(); } set { this[nameof(CurrentSeasonIndex)].SetValue<int>(value); } }
        public int MaxActiveChallenges { get { return this[nameof(MaxActiveChallenges)].GetValue<int>(); } set { this[nameof(MaxActiveChallenges)].SetValue<int>(value); } }
        public int XPPerLevel { get { return this[nameof(XPPerLevel)].GetValue<int>(); } set { this[nameof(XPPerLevel)].SetValue<int>(value); } }
        public CurveFloat XPToPerforcemancePointsCurve { get { return this[nameof(XPToPerforcemancePointsCurve)].As<CurveFloat>(); } set { this["XPToPerforcemancePointsCurve"] = value; } }
        public int TreeOfVanitySnapSize { get { return this[nameof(TreeOfVanitySnapSize)].GetValue<int>(); } set { this[nameof(TreeOfVanitySnapSize)].SetValue<int>(value); } }
        public float SpecialChallengeChange { get { return this[nameof(SpecialChallengeChange)].GetValue<float>(); } set { this[nameof(SpecialChallengeChange)].SetValue<float>(value); } }
        public MissionStat HeartsColledtedStat { get { return this[nameof(HeartsColledtedStat)].As<MissionStat>(); } set { this["HeartsColledtedStat"] = value; } }
        public IntPoint SporeTowerPlagueGainRange { get { return this[nameof(SporeTowerPlagueGainRange)].As<IntPoint>(); } set { this["SporeTowerPlagueGainRange"] = value; } }
        public int HeartsPerScrip { get { return this[nameof(HeartsPerScrip)].GetValue<int>(); } set { this[nameof(HeartsPerScrip)].SetValue<int>(value); } }
        public int NumberOfScriptsFromPlague { get { return this[nameof(NumberOfScriptsFromPlague)].GetValue<int>(); } set { this[nameof(NumberOfScriptsFromPlague)].SetValue<int>(value); } }
        public Season GetSeason(int Season) { return Invoke<Season>(nameof(GetSeason), Season); }
    }
    public class SeasonReplicatorComponent : ActorComponent
    {
        public SeasonReplicatorComponent(nint addr) : base(addr) { }
        public Object OnHostSeasonSetEvent { get { return this[nameof(OnHostSeasonSetEvent)]; } set { this[nameof(OnHostSeasonSetEvent)] = value; } }
        public Season HostActiveSeason { get { return this[nameof(HostActiveSeason)].As<Season>(); } set { this["HostActiveSeason"] = value; } }
        public void OnRep_HostActiveSeason() { Invoke(nameof(OnRep_HostActiveSeason)); }
        public void CompleteSeasonEvent(SeasonEventData InEvent) { Invoke(nameof(CompleteSeasonEvent), InEvent); }
    }
    public class SeasonsSubsystem : GameInstanceSubsystem
    {
        public SeasonsSubsystem(nint addr) : base(addr) { }
        public Object OnXPChanged { get { return this[nameof(OnXPChanged)]; } set { this[nameof(OnXPChanged)] = value; } }
        public Object OnTokensChanged { get { return this[nameof(OnTokensChanged)]; } set { this[nameof(OnTokensChanged)] = value; } }
        public Object OnVanityTreeReset { get { return this[nameof(OnVanityTreeReset)]; } set { this[nameof(OnVanityTreeReset)] = value; } }
        public Object OnScripChallengeUpdated { get { return this[nameof(OnScripChallengeUpdated)]; } set { this[nameof(OnScripChallengeUpdated)] = value; } }
        public Object OnClaimStatusChanged { get { return this[nameof(OnClaimStatusChanged)]; } set { this[nameof(OnClaimStatusChanged)] = value; } }
        public Object forcedSeasonEvent { get { return this[nameof(forcedSeasonEvent)]; } set { this[nameof(forcedSeasonEvent)] = value; } }
        public Timespan NewChallengeTimeSpan { get { return this[nameof(NewChallengeTimeSpan)].As<Timespan>(); } set { this["NewChallengeTimeSpan"] = value; } }
        public int DesiredSeason { get { return this[nameof(DesiredSeason)].GetValue<int>(); } set { this[nameof(DesiredSeason)].SetValue<int>(value); } }
        public int ActiveSeason { get { return this[nameof(ActiveSeason)].GetValue<int>(); } set { this[nameof(ActiveSeason)].SetValue<int>(value); } }
        public SeasonMissionResult TempSeasonMissionResult { get { return this[nameof(TempSeasonMissionResult)].As<SeasonMissionResult>(); } set { this["TempSeasonMissionResult"] = value; } }
        public SeasonMissionResult LatestMissionSeasonResult { get { return this[nameof(LatestMissionSeasonResult)].As<SeasonMissionResult>(); } set { this["LatestMissionSeasonResult"] = value; } }
        public MissionStat TrackedScripChallenge { get { return this[nameof(TrackedScripChallenge)].As<MissionStat>(); } set { this["TrackedScripChallenge"] = value; } }
        public Timespan TimeToNewChallenge() { return Invoke<Timespan>(nameof(TimeToNewChallenge)); }
        public void SetSeasonCompletedAnnounced(bool IsAnnounced) { Invoke(nameof(SetSeasonCompletedAnnounced), IsAnnounced); }
        public void SetActiveSeason(Season Season) { Invoke(nameof(SetActiveSeason), Season); }
        public void RerollChallenge(int Index) { Invoke(nameof(RerollChallenge), Index); }
        public void OnStatChanged(Object WorldContext, MissionStat Stat, float Value) { Invoke(nameof(OnStatChanged), WorldContext, Stat, Value); }
        public void OnScripChallengeCompleted(Object WorldContext, MissionStat Stat, float Value) { Invoke(nameof(OnScripChallengeCompleted), WorldContext, Stat, Value); }
        public void IsRewardClaimed(int Level, bool IsNormalClaimed, bool IsSpecialClaimed) { Invoke(nameof(IsRewardClaimed), Level, IsNormalClaimed, IsSpecialClaimed); }
        public bool IsNodeUnlocked(int TreeOfVanityNodeID) { return Invoke<bool>(nameof(IsNodeUnlocked), TreeOfVanityNodeID); }
        public bool IsNodeBought(int TreeOfVanityNodeID) { return Invoke<bool>(nameof(IsNodeBought), TreeOfVanityNodeID); }
        public void InitializeStatsAndChallenges() { Invoke(nameof(InitializeStatsAndChallenges)); }
        public bool HasUnclaimedRewards(int Level) { return Invoke<bool>(nameof(HasUnclaimedRewards), Level); }
        public bool HasClaimedLevelRewards(int startLevel, int numberOfLevels) { return Invoke<bool>(nameof(HasClaimedLevelRewards), startLevel, numberOfLevels); }
        public bool HasClaimedAllRewards() { return Invoke<bool>(nameof(HasClaimedAllRewards)); }
        public int GetUnusedHearts() { return Invoke<int>(nameof(GetUnusedHearts)); }
        public Reward GetTreeOfVanityReward(Reward currentReward) { return Invoke<Reward>(nameof(GetTreeOfVanityReward), currentReward); }
        public GameDLC GetStoreSeasonDLC(Object WorldContext) { return Invoke<GameDLC>(nameof(GetStoreSeasonDLC), WorldContext); }
        public int GetSeasonXPFromMissionXP(FSDPlayerState PlayerState) { return Invoke<int>(nameof(GetSeasonXPFromMissionXP), PlayerState); }
        public int GetSeasonXP() { return Invoke<int>(nameof(GetSeasonXP)); }
        public int GetSeasonNumber() { return Invoke<int>(nameof(GetSeasonNumber)); }
        public Object GetSeasonName() { return Invoke<Object>(nameof(GetSeasonName)); }
        public SeasonMissionResult GetSeasonMissionResult() { return Invoke<SeasonMissionResult>(nameof(GetSeasonMissionResult)); }
        public void GetSeasonLevelFromXP(int XP, int Level, float currentLevelPercent, int currentLevelXP, int LevelXPTotal) { Invoke(nameof(GetSeasonLevelFromXP), XP, Level, currentLevelPercent, currentLevelXP, LevelXPTotal); }
        public void GetSeasonLevel(int Level, float currentLevelPercent, int currentLevelXP, int LevelXPTotal) { Invoke(nameof(GetSeasonLevel), Level, currentLevelPercent, currentLevelXP, LevelXPTotal); }
        public bool GetSeasonExpiryDate(DateTime ExpiryDate) { return Invoke<bool>(nameof(GetSeasonExpiryDate), ExpiryDate); }
        public bool GetSeasonCompletedAnnounced() { return Invoke<bool>(nameof(GetSeasonCompletedAnnounced)); }
        public void GetSeasonBought(bool isBought) { Invoke(nameof(GetSeasonBought), isBought); }
        public void GetScriptChallengeInfo(int Completed, int claimed, int Total) { Invoke(nameof(GetScriptChallengeInfo), Completed, claimed, Total); }
        public int GetNumberOfTokens(Object WorldContextObject) { return Invoke<int>(nameof(GetNumberOfTokens), WorldContextObject); }
        public int GetNumberOfSeasonLevels() { return Invoke<int>(nameof(GetNumberOfSeasonLevels)); }
        public int GetNumberOfClaimedPlagueHeartScrips() { return Invoke<int>(nameof(GetNumberOfClaimedPlagueHeartScrips)); }
        public SeasonLevel GetNextReward() { return Invoke<SeasonLevel>(nameof(GetNextReward)); }
        public int GetLevelXP(int Level) { return Invoke<int>(nameof(GetLevelXP), Level); }
        public SeasonLevel GetLevelReward(int Level) { return Invoke<SeasonLevel>(nameof(GetLevelReward), Level); }
        public void GetLevelProgress(int Level, float levelPercent) { Invoke(nameof(GetLevelProgress), Level, levelPercent); }
        public Season GetCurrentSeason() { return Invoke<Season>(nameof(GetCurrentSeason)); }
        public UArray<DataAsset> GetAssetReferences(int ChallengeIndex, SeasonChallenge outChallenge) { return Invoke<UArray<DataAsset>>(nameof(GetAssetReferences), ChallengeIndex, outChallenge); }
        public UArray<ChallengeInfo> GetActiveChallenges(bool canGenerateNewChallenge) { return Invoke<UArray<ChallengeInfo>>(nameof(GetActiveChallenges), canGenerateNewChallenge); }
        public bool ConvertHeartsToScrip(int scripGained) { return Invoke<bool>(nameof(ConvertHeartsToScrip), scripGained); }
        public void CompleteSeasonEvent_Server(SeasonEventData InEvent) { Invoke(nameof(CompleteSeasonEvent_Server), InEvent); }
        public bool ClaimScripChallenge() { return Invoke<bool>(nameof(ClaimScripChallenge)); }
        public bool ClaimReward(Object WorldContext, FSDPlayerController Player, int Level, bool isNormalReward) { return Invoke<bool>(nameof(ClaimReward), WorldContext, Player, Level, isNormalReward); }
        public void CHEAT_SetSeasonMissionResult(int XPFromMission, int numberOfChallenges, SeasonEventData Event) { Invoke(nameof(CHEAT_SetSeasonMissionResult), XPFromMission, numberOfChallenges, Event); }
        public void CHEAT_ResetTimeToNewChallenge() { Invoke(nameof(CHEAT_ResetTimeToNewChallenge)); }
        public void CHEAT_ResetReroll() { Invoke(nameof(CHEAT_ResetReroll)); }
        public void CHEAT_AddChallenge() { Invoke(nameof(CHEAT_AddChallenge)); }
        public bool CanRerollChallenge() { return Invoke<bool>(nameof(CanRerollChallenge)); }
        public bool BuyTreeNode(Object WorldContextObject, FSDPlayerController Player, int TreeOfVanityNodeID) { return Invoke<bool>(nameof(BuyTreeNode), WorldContextObject, Player, TreeOfVanityNodeID); }
    }
    public class SeasonEventData : SavableDataAsset
    {
        public SeasonEventData(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public int PerformancePoints { get { return this[nameof(PerformancePoints)].GetValue<int>(); } set { this[nameof(PerformancePoints)].SetValue<int>(value); } }
        public int PerformancePointsOnFail { get { return this[nameof(PerformancePointsOnFail)].GetValue<int>(); } set { this[nameof(PerformancePointsOnFail)].SetValue<int>(value); } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
    }
    public class SendInviteBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public SendInviteBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public SendInviteBlueprintCallProxy SendInvite(Object WorldContextObject, Object ListName, Object UserId) { return Invoke<SendInviteBlueprintCallProxy>(nameof(SendInvite), WorldContextObject, ListName, UserId); }
    }
    public class SendSessionInviteToFriendBlueprintCallProxy : OnlineBlueprintCallProxyBase
    {
        public SendSessionInviteToFriendBlueprintCallProxy(nint addr) : base(addr) { }
        public Object OnSuccess { get { return this[nameof(OnSuccess)]; } set { this[nameof(OnSuccess)] = value; } }
        public Object OnFailure { get { return this[nameof(OnFailure)]; } set { this[nameof(OnFailure)] = value; } }
        public Object WorldContextObject { get { return this[nameof(WorldContextObject)].As<Object>(); } set { this["WorldContextObject"] = value; } }
        public SendSessionInviteToFriendBlueprintCallProxy SendSessionInviteToFriend(Object WorldContextObject, Object FriendId) { return Invoke<SendSessionInviteToFriendBlueprintCallProxy>(nameof(SendSessionInviteToFriend), WorldContextObject, FriendId); }
    }
    public class SentryAttachment : Actor
    {
        public SentryAttachment(nint addr) : base(addr) { }
    }
    public class SentryGunAnimInstance : AnimInstance
    {
        public SentryGunAnimInstance(nint addr) : base(addr) { }
        public SentryGun SentryGun { get { return this[nameof(SentryGun)].As<SentryGun>(); } set { this["SentryGun"] = value; } }
        public RedeployableSentryGun RedeployableSentryGun { get { return this[nameof(RedeployableSentryGun)].As<RedeployableSentryGun>(); } set { this["RedeployableSentryGun"] = value; } }
        public Rotator TurretRotation { get { return this[nameof(TurretRotation)].As<Rotator>(); } set { this["TurretRotation"] = value; } }
        public float YawOffset { get { return this[nameof(YawOffset)].GetValue<float>(); } set { this[nameof(YawOffset)].SetValue<float>(value); } }
        public float BuildProgress { get { return this[nameof(BuildProgress)].GetValue<float>(); } set { this[nameof(BuildProgress)].SetValue<float>(value); } }
    }
    public class RecallableSentryGun : RecallableActor
    {
        public RecallableSentryGun(nint addr) : base(addr) { }
        public Object OnSentryIndexChanged { get { return this[nameof(OnSentryIndexChanged)]; } set { this[nameof(OnSentryIndexChanged)] = value; } }
        public int SentryIndex { get { return this[nameof(SentryIndex)].GetValue<int>(); } set { this[nameof(SentryIndex)].SetValue<int>(value); } }
        public void SentryIndexChanged__DelegateSignature(int Index) { Invoke(nameof(SentryIndexChanged__DelegateSignature), Index); }
        public void ReceiveOnSentryReady(SentryGun SentryGun, PlayerCharacter PlayerCharacter) { Invoke(nameof(ReceiveOnSentryReady), SentryGun, PlayerCharacter); }
        public void OnRep_SentryIndex() { Invoke(nameof(OnRep_SentryIndex)); }
        public void GetStateDescription(Object Description) { Invoke(nameof(GetStateDescription), Description); }
        public Object GetSentryGunClass() { return Invoke<Object>(nameof(GetSentryGunClass)); }
        public SentryGun GetSentryGun() { return Invoke<SentryGun>(nameof(GetSentryGun)); }
    }
    public class ReloadSentryUsableComponent : UsableComponent
    {
        public ReloadSentryUsableComponent(nint addr) : base(addr) { }
        public Object OutOfAmmoText { get { return this[nameof(OutOfAmmoText)]; } set { this[nameof(OutOfAmmoText)] = value; } }
        public Object AmmoFullText { get { return this[nameof(AmmoFullText)]; } set { this[nameof(AmmoFullText)] = value; } }
        public SoundBase AudioOutOfAmmo { get { return this[nameof(AudioOutOfAmmo)].As<SoundBase>(); } set { this["AudioOutOfAmmo"] = value; } }
        public SoundBase AudioReloading { get { return this[nameof(AudioReloading)].As<SoundBase>(); } set { this["AudioReloading"] = value; } }
        public AudioComponent ReloadingAudioComponent { get { return this[nameof(ReloadingAudioComponent)].As<AudioComponent>(); } set { this["ReloadingAudioComponent"] = value; } }
        public bool Usable { get { return this[nameof(Usable)].Flag; } set { this[nameof(Usable)].Flag = value; } }
        public bool bReloading { get { return this[nameof(bReloading)].Flag; } set { this[nameof(bReloading)].Flag = value; } }
        public AudioComponent ReloadAudioComponent { get { return this[nameof(ReloadAudioComponent)].As<AudioComponent>(); } set { this["ReloadAudioComponent"] = value; } }
        public float AmmoPerSec { get { return this[nameof(AmmoPerSec)].GetValue<float>(); } set { this[nameof(AmmoPerSec)].SetValue<float>(value); } }
        public Object OwningPlayerCharacter { get { return this[nameof(OwningPlayerCharacter)]; } set { this[nameof(OwningPlayerCharacter)] = value; } }
        public SentryGun SentryGun { get { return this[nameof(SentryGun)].As<SentryGun>(); } set { this["SentryGun"] = value; } }
        public void SetOwningPlayerCharacter(PlayerCharacter Player) { Invoke(nameof(SetOwningPlayerCharacter), Player); }
        public void SetCanUse(bool isUsable) { Invoke(nameof(SetCanUse), isUsable); }
        public void OnRep_Reloading() { Invoke(nameof(OnRep_Reloading)); }
        public void OnReloadAudioFinished() { Invoke(nameof(OnReloadAudioFinished)); }
    }
    public class SentryGunItem : PlaceableItem
    {
        public SentryGunItem(nint addr) : base(addr) { }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
    }
    public class RecallableSentryGunItem : RecallableItem
    {
        public RecallableSentryGunItem(nint addr) : base(addr) { }
        public Object OnActiveItemsChanged { get { return this[nameof(OnActiveItemsChanged)]; } set { this[nameof(OnActiveItemsChanged)] = value; } }
        public Object OnSelectedItemChanged { get { return this[nameof(OnSelectedItemChanged)]; } set { this[nameof(OnSelectedItemChanged)] = value; } }
        public UArray<Object> SentriesWithActiveIndicators { get { return new UArray<Object>(this[nameof(SentriesWithActiveIndicators)].Address); } }
        public int MaxSentryCount { get { return this[nameof(MaxSentryCount)].GetValue<int>(); } set { this[nameof(MaxSentryCount)].SetValue<int>(value); } }
        public float MinDistanceBetweenSentries { get { return this[nameof(MinDistanceBetweenSentries)].GetValue<float>(); } set { this[nameof(MinDistanceBetweenSentries)].SetValue<float>(value); } }
        public Object RecallHoldDescription { get { return this[nameof(RecallHoldDescription)]; } set { this[nameof(RecallHoldDescription)] = value; } }
        public float RecallHoldDuration { get { return this[nameof(RecallHoldDuration)].GetValue<float>(); } set { this[nameof(RecallHoldDuration)].SetValue<float>(value); } }
        public CapacityHoldingItemAggregator AmmoCapacity { get { return this[nameof(AmmoCapacity)].As<CapacityHoldingItemAggregator>(); } set { this["AmmoCapacity"] = value; } }
        public ItemPlacerAggregator ItemPlacer { get { return this[nameof(ItemPlacer)].As<ItemPlacerAggregator>(); } set { this["ItemPlacer"] = value; } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public Object LoadoutClass { get { return this[nameof(LoadoutClass)]; } set { this[nameof(LoadoutClass)] = value; } }
        public Object SentryGunObjectClass { get { return this[nameof(SentryGunObjectClass)]; } set { this[nameof(SentryGunObjectClass)] = value; } }
        public float SupplyStatusWeight { get { return this[nameof(SupplyStatusWeight)].GetValue<float>(); } set { this[nameof(SupplyStatusWeight)].SetValue<float>(value); } }
        public float SentryAngleRestriction { get { return this[nameof(SentryAngleRestriction)].GetValue<float>(); } set { this[nameof(SentryAngleRestriction)].SetValue<float>(value); } }
        public bool bIsUpgraded { get { return this[nameof(bIsUpgraded)].Flag; } set { this[nameof(bIsUpgraded)].Flag = value; } }
        public void SetArcIndicatorActive(bool Active) { Invoke(nameof(SetArcIndicatorActive), Active); }
        public void ReceiveItemUpgraded() { Invoke(nameof(ReceiveItemUpgraded)); }
        public void RecallableSentryGunSignature__DelegateSignature(RecallableSentryGun SentryGun) { Invoke(nameof(RecallableSentryGunSignature__DelegateSignature), SentryGun); }
        public void RecallableSentryGunItemSignature__DelegateSignature(RecallableSentryGunItem Item) { Invoke(nameof(RecallableSentryGunItemSignature__DelegateSignature), Item); }
        public bool HasAmmoLeft() { return Invoke<bool>(nameof(HasAmmoLeft)); }
        public RecallableSentryGun GetSelectedSentryGun() { return Invoke<RecallableSentryGun>(nameof(GetSelectedSentryGun)); }
        public UArray<RecallableSentryGun> GetActiveSentryGuns() { return Invoke<UArray<RecallableSentryGun>>(nameof(GetActiveSentryGuns)); }
        public bool AreAllSentriesPlaced() { return Invoke<bool>(nameof(AreAllSentriesPlaced)); }
    }
    public class SessionHandling : BlueprintFunctionLibrary
    {
        public SessionHandling(nint addr) : base(addr) { }
        public void StopVoice(Object WorldContextObject) { Invoke(nameof(StopVoice), WorldContextObject); }
        public void StartVoice(Object WorldContextObject) { Invoke(nameof(StartVoice), WorldContextObject); }
        public bool StartSearchForFriends(int localUserNum, FSDGameInstance GameInstance) { return Invoke<bool>(nameof(StartSearchForFriends), localUserNum, GameInstance); }
        public bool StartSearchForBlockedUsers(int localUserNum) { return Invoke<bool>(nameof(StartSearchForBlockedUsers), localUserNum); }
        public void StartCheckForInstalledDLC(Object WorldContextObject) { Invoke(nameof(StartCheckForInstalledDLC), WorldContextObject); }
        public void SortServerList(Object WorldContextObject, EServerSortOrder order, bool Reverse, bool sortByFriends, UArray<BlueprintSessionResult> servers) { Invoke(nameof(SortServerList), WorldContextObject, order, Reverse, sortByFriends, servers); }
        public void ShowStoreUI(Object WorldContextObject) { Invoke(nameof(ShowStoreUI), WorldContextObject); }
        public void ShowInviteUI(Object WorldContextObject) { Invoke(nameof(ShowInviteUI), WorldContextObject); }
        public void JoinOfficialXboxClub(Object WorldContextObject) { Invoke(nameof(JoinOfficialXboxClub), WorldContextObject); }
        public bool IsVoiceChatting() { return Invoke<bool>(nameof(IsVoiceChatting)); }
        public bool IsInActiveSession() { return Invoke<bool>(nameof(IsInActiveSession)); }
        public bool IsDisconnectReasonAKick(EDisconnectReason reason) { return Invoke<bool>(nameof(IsDisconnectReasonAKick), reason); }
        public Object GetVoiceStatus() { return Invoke<Object>(nameof(GetVoiceStatus)); }
        public Object GetSessionJoinError(Object WorldContextObject) { return Invoke<Object>(nameof(GetSessionJoinError), WorldContextObject); }
        public bool GetOnlinePlayerName(int localUserNum, Object Name) { return Invoke<bool>(nameof(GetOnlinePlayerName), localUserNum, Name); }
        public EFSDNATType GetNATType(Object WorldContextObject) { return Invoke<EFSDNATType>(nameof(GetNATType), WorldContextObject); }
        public EMissionStructure GetMissionStructure(BlueprintSessionResult Result) { return Invoke<EMissionStructure>(nameof(GetMissionStructure), Result); }
        public Object GetLoginStatus(int localUserNum) { return Invoke<Object>(nameof(GetLoginStatus), localUserNum); }
        public Object GetHostUsername(Object WorldContextObject) { return Invoke<Object>(nameof(GetHostUsername), WorldContextObject); }
        public Object GetHostUniqueId(Object WorldContextObject) { return Invoke<Object>(nameof(GetHostUniqueId), WorldContextObject); }
        public bool GetFriendsList(int localUserNum, UArray<FriendInfo> Players) { return Invoke<bool>(nameof(GetFriendsList), localUserNum, Players); }
        public Object GetFriendlyServerNameSanitized(Object WorldContextObject) { return Invoke<Object>(nameof(GetFriendlyServerNameSanitized), WorldContextObject); }
        public Object GetFriendlyServerName(Object WorldContextObject) { return Invoke<Object>(nameof(GetFriendlyServerName), WorldContextObject); }
        public bool GetCurrentSessionState(Object sessionState, Object ID) { return Invoke<bool>(nameof(GetCurrentSessionState), sessionState, ID); }
        public bool FSDUpdateSessionInfo(Object WorldContextObject) { return Invoke<bool>(nameof(FSDUpdateSessionInfo), WorldContextObject); }
        public EFSDMissionStatus FSDMissionStatus(BlueprintSessionResult Result) { return Invoke<EFSDMissionStatus>(nameof(FSDMissionStatus), Result); }
        public void FSDListen(Object WorldContextObject) { Invoke(nameof(FSDListen), WorldContextObject); }
        public bool FSDIsSessionValid(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsSessionValid), Result); }
        public bool FSDIsPrivateServer(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsPrivateServer), Result); }
        public bool FSDIsPasswordRequired(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsPasswordRequired), Result); }
        public bool FSDIsModdedServer(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsModdedServer), Result); }
        public bool FSDIsModdedSandboxServer(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsModdedSandboxServer), Result); }
        public bool FSDIsFullServer(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsFullServer), Result); }
        public bool FSDIsEliteDeepDive(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsEliteDeepDive), Result); }
        public bool FSDIsClassLocked(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDIsClassLocked), Result); }
        public bool FSDHasHiddenModsNotInstalledOnClient(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDHasHiddenModsNotInstalledOnClient), Result); }
        public bool FSDHasGameStarted(BlueprintSessionResult Result) { return Invoke<bool>(nameof(FSDHasGameStarted), Result); }
        public bool FSDGetServerStartTime(BlueprintSessionResult Result, DateTime StartTime) { return Invoke<bool>(nameof(FSDGetServerStartTime), Result, StartTime); }
        public Object FSDGetServerNameSanitized(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetServerNameSanitized), Result); }
        public Object FSDGetServerName(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetServerName), Result); }
        public Object FSDGetServerID(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetServerID), Result); }
        public int FSDGetSeason(BlueprintSessionResult Result) { return Invoke<int>(nameof(FSDGetSeason), Result); }
        public UArray<Object> FSDGetRequiredModsToDownload(BlueprintSessionResult Result) { return Invoke<UArray<Object>>(nameof(FSDGetRequiredModsToDownload), Result); }
        public Object FSDGetRegion(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetRegion), Result); }
        public UArray<PlayerCharacterID> FSDGetPlayerClassIDs(BlueprintSessionResult Result) { return Invoke<UArray<PlayerCharacterID>>(nameof(FSDGetPlayerClassIDs), Result); }
        public UArray<Object> FSDGetPlayerClasses(BlueprintSessionResult Result) { return Invoke<UArray<Object>>(nameof(FSDGetPlayerClasses), Result); }
        public UArray<Object> FSDGetOptionalModsInstalled(BlueprintSessionResult Result, bool ExcludeVerifiedMods) { return Invoke<UArray<Object>>(nameof(FSDGetOptionalModsInstalled), Result, ExcludeVerifiedMods); }
        public int FSDGetNumPlayers(BlueprintSessionResult Result) { return Invoke<int>(nameof(FSDGetNumPlayers), Result); }
        public UArray<Object> FSDGetModsInstalled(BlueprintSessionResult Result, bool ExcludeVerifiedMods) { return Invoke<UArray<Object>>(nameof(FSDGetModsInstalled), Result, ExcludeVerifiedMods); }
        public int FSDGetMissionSeed(BlueprintSessionResult Result) { return Invoke<int>(nameof(FSDGetMissionSeed), Result); }
        public Object FSDGetMapName(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetMapName), Result); }
        public Object FSDGetHostUserID(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetHostUserID), Result); }
        public GlobalMissionSeed FSDGetGlobalMissionSeed(BlueprintSessionResult Result) { return Invoke<GlobalMissionSeed>(nameof(FSDGetGlobalMissionSeed), Result); }
        public float FSDGetDistanceFloat(BlueprintSessionResult Result) { return Invoke<float>(nameof(FSDGetDistanceFloat), Result); }
        public EServerDistance FSDGetDistance(BlueprintSessionResult Result) { return Invoke<EServerDistance>(nameof(FSDGetDistance), Result); }
        public UArray<DifficultyMutatorItem> FSDGetDifficultyModifiers(BlueprintSessionResult Result) { return Invoke<UArray<DifficultyMutatorItem>>(nameof(FSDGetDifficultyModifiers), Result); }
        public DifficultySetting FSDGetDifficulty(BlueprintSessionResult Result) { return Invoke<DifficultySetting>(nameof(FSDGetDifficulty), Result); }
        public Object FSDGetBuildId(BlueprintSessionResult Result) { return Invoke<Object>(nameof(FSDGetBuildId), Result); }
        public bool FSDCancelFindSessions(Object WorldContextObject) { return Invoke<bool>(nameof(FSDCancelFindSessions), WorldContextObject); }
        public bool FindBestQuickJoinServer(Object WorldContextObject, UArray<BlueprintSessionResult> sessions, DifficultySetting Difficulty, Biome Biome, MissionTemplate MissionTemplate, BlueprintSessionResult OutResult) { return Invoke<bool>(nameof(FindBestQuickJoinServer), WorldContextObject, sessions, Difficulty, Biome, MissionTemplate, OutResult); }
        public bool AllowLinkToExternalFeedback(Object WorldContextObject) { return Invoke<bool>(nameof(AllowLinkToExternalFeedback), WorldContextObject); }
    }
    public class SharkEnemy : EnemyDeepPathfinderCharacter
    {
        public SharkEnemy(nint addr) : base(addr) { }
        public PawnSensingComponent PawnSensing { get { return this[nameof(PawnSensing)].As<PawnSensingComponent>(); } set { this["PawnSensing"] = value; } }
        public SphereComponent CollisionSphere { get { return this[nameof(CollisionSphere)].As<SphereComponent>(); } set { this["CollisionSphere"] = value; } }
        public SphereComponent NearTargetSphere { get { return this[nameof(NearTargetSphere)].As<SphereComponent>(); } set { this["NearTargetSphere"] = value; } }
        public ParticleSystemComponent TearingGroundParticles { get { return this[nameof(TearingGroundParticles)].As<ParticleSystemComponent>(); } set { this["TearingGroundParticles"] = value; } }
        public ParticleSystemComponent AirTrailParticles { get { return this[nameof(AirTrailParticles)].As<ParticleSystemComponent>(); } set { this["AirTrailParticles"] = value; } }
        public InDangerComponent Danger { get { return this[nameof(Danger)].As<InDangerComponent>(); } set { this["Danger"] = value; } }
        public EnemyComponent EnemyComponent { get { return this[nameof(EnemyComponent)].As<EnemyComponent>(); } set { this["EnemyComponent"] = value; } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public DamageComponent BumpDamage { get { return this[nameof(BumpDamage)].As<DamageComponent>(); } set { this["BumpDamage"] = value; } }
        public FakePhysGrabberComponent RestrictedGrabberComponent { get { return this[nameof(RestrictedGrabberComponent)].As<FakePhysGrabberComponent>(); } set { this["RestrictedGrabberComponent"] = value; } }
        public SoundCue ImpactCue { get { return this[nameof(ImpactCue)].As<SoundCue>(); } set { this["ImpactCue"] = value; } }
        public SoundCue JumpSound { get { return this[nameof(JumpSound)].As<SoundCue>(); } set { this["JumpSound"] = value; } }
        public float DiveForSeconds { get { return this[nameof(DiveForSeconds)].GetValue<float>(); } set { this[nameof(DiveForSeconds)].SetValue<float>(value); } }
        public float LaunchPower { get { return this[nameof(LaunchPower)].GetValue<float>(); } set { this[nameof(LaunchPower)].SetValue<float>(value); } }
        public float GrabTime { get { return this[nameof(GrabTime)].GetValue<float>(); } set { this[nameof(GrabTime)].SetValue<float>(value); } }
        public float RagdollSpeedFactor { get { return this[nameof(RagdollSpeedFactor)].GetValue<float>(); } set { this[nameof(RagdollSpeedFactor)].SetValue<float>(value); } }
        public float UpsideDownTime { get { return this[nameof(UpsideDownTime)].GetValue<float>(); } set { this[nameof(UpsideDownTime)].SetValue<float>(value); } }
        public float TiltOutSpeed { get { return this[nameof(TiltOutSpeed)].GetValue<float>(); } set { this[nameof(TiltOutSpeed)].SetValue<float>(value); } }
        public float SafeTimeAfterVounerable { get { return this[nameof(SafeTimeAfterVounerable)].GetValue<float>(); } set { this[nameof(SafeTimeAfterVounerable)].SetValue<float>(value); } }
        public float RaiseHeight { get { return this[nameof(RaiseHeight)].GetValue<float>(); } set { this[nameof(RaiseHeight)].SetValue<float>(value); } }
        public float AttackDuration { get { return this[nameof(AttackDuration)].GetValue<float>(); } set { this[nameof(AttackDuration)].SetValue<float>(value); } }
        public float ChanceToGrab { get { return this[nameof(ChanceToGrab)].GetValue<float>(); } set { this[nameof(ChanceToGrab)].SetValue<float>(value); } }
        public float MinTimeBetweenBumps { get { return this[nameof(MinTimeBetweenBumps)].GetValue<float>(); } set { this[nameof(MinTimeBetweenBumps)].SetValue<float>(value); } }
        public float ChanceForJump { get { return this[nameof(ChanceForJump)].GetValue<float>(); } set { this[nameof(ChanceForJump)].SetValue<float>(value); } }
        public float MinJumpCooldown { get { return this[nameof(MinJumpCooldown)].GetValue<float>(); } set { this[nameof(MinJumpCooldown)].SetValue<float>(value); } }
        public float MaxJumpCooldown { get { return this[nameof(MaxJumpCooldown)].GetValue<float>(); } set { this[nameof(MaxJumpCooldown)].SetValue<float>(value); } }
        public float JumpForce { get { return this[nameof(JumpForce)].GetValue<float>(); } set { this[nameof(JumpForce)].SetValue<float>(value); } }
        public float NormalHeight { get { return this[nameof(NormalHeight)].GetValue<float>(); } set { this[nameof(NormalHeight)].SetValue<float>(value); } }
        public float DiveHeight { get { return this[nameof(DiveHeight)].GetValue<float>(); } set { this[nameof(DiveHeight)].SetValue<float>(value); } }
        public float MinCirclingTime { get { return this[nameof(MinCirclingTime)].GetValue<float>(); } set { this[nameof(MinCirclingTime)].SetValue<float>(value); } }
        public float MaxCirclingTime { get { return this[nameof(MaxCirclingTime)].GetValue<float>(); } set { this[nameof(MaxCirclingTime)].SetValue<float>(value); } }
        public FakeMoverSettings CircleSetttings { get { return this[nameof(CircleSetttings)].As<FakeMoverSettings>(); } set { this["CircleSetttings"] = value; } }
        public FakeMoverSettings AttackSettings { get { return this[nameof(AttackSettings)].As<FakeMoverSettings>(); } set { this["AttackSettings"] = value; } }
        public FakeMoverSettings PostHitSettings { get { return this[nameof(PostHitSettings)].As<FakeMoverSettings>(); } set { this["PostHitSettings"] = value; } }
        public FakeMoverSettings JumpSettings { get { return this[nameof(JumpSettings)].As<FakeMoverSettings>(); } set { this["JumpSettings"] = value; } }
        public FakeMoverSettings VulnerableSettings { get { return this[nameof(VulnerableSettings)].As<FakeMoverSettings>(); } set { this["VulnerableSettings"] = value; } }
        public float MaxInGroundTime { get { return this[nameof(MaxInGroundTime)].GetValue<float>(); } set { this[nameof(MaxInGroundTime)].SetValue<float>(value); } }
        public float MinInGroundTime { get { return this[nameof(MinInGroundTime)].GetValue<float>(); } set { this[nameof(MinInGroundTime)].SetValue<float>(value); } }
        public float StartParticleTime { get { return this[nameof(StartParticleTime)].GetValue<float>(); } set { this[nameof(StartParticleTime)].SetValue<float>(value); } }
        public float EndParticleTime { get { return this[nameof(EndParticleTime)].GetValue<float>(); } set { this[nameof(EndParticleTime)].SetValue<float>(value); } }
        public ParticleSystem DiveParticles { get { return this[nameof(DiveParticles)].As<ParticleSystem>(); } set { this["DiveParticles"] = value; } }
        public ESharkEnemyState State { get { return (ESharkEnemyState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public void SetVulnerable() { Invoke(nameof(SetVulnerable)); }
        public void ReleasePlayer(Actor playerchar, bool fullGrabElapsed) { Invoke(nameof(ReleasePlayer), playerchar, fullGrabElapsed); }
        public void PopRecentlyBumpedPlayer() { Invoke(nameof(PopRecentlyBumpedPlayer)); }
        public void OnStateChangedEvent(ESharkEnemyState CurrentState) { Invoke(nameof(OnStateChangedEvent), CurrentState); }
        public void OnSeePawn(Pawn APawn) { Invoke(nameof(OnSeePawn), APawn); }
        public void OnRep_State(ESharkEnemyState oldState) { Invoke(nameof(OnRep_State), oldState); }
        public void OnRep_DiveTime() { Invoke(nameof(OnRep_DiveTime)); }
        public void OnNearTarget(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnNearTarget), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void OnLandedEvent() { Invoke(nameof(OnLandedEvent)); }
        public void OnJumpEvent() { Invoke(nameof(OnJumpEvent)); }
        public void OnHit(float HitDamage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnHit), HitDamage, DamageData, anyHealthLost); }
        public void OnExitState(ESharkEnemyState State) { Invoke(nameof(OnExitState), State); }
        public void OnEnterState(ESharkEnemyState State) { Invoke(nameof(OnEnterState), State); }
        public void OnDeathDetailed(HealthComponent aHealthComponent, float damageAmount, DamageData DamageData, UArray<DamageTag> dTags) { Invoke(nameof(OnDeathDetailed), aHealthComponent, damageAmount, DamageData, dTags); }
        public void OnDeath(HealthComponentBase aHealthComponent) { Invoke(nameof(OnDeath), aHealthComponent); }
        public void OnCollided(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnCollided), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void Jumped() { Invoke(nameof(Jumped)); }
        public void ImpactSound() { Invoke(nameof(ImpactSound)); }
        public void DiveShow() { Invoke(nameof(DiveShow)); }
        public void DiveHide() { Invoke(nameof(DiveHide)); }
        public void All_DoRagdollImpact(Vector_NetQuantize Direction) { Invoke(nameof(All_DoRagdollImpact), Direction); }
        public void ActivateDanger() { Invoke(nameof(ActivateDanger)); }
    }
    public class SharkAnimInstance : SpiderAnimInstance
    {
        public SharkAnimInstance(nint addr) : base(addr) { }
        public ESharkEnemyState SharkState { get { return (ESharkEnemyState)this[nameof(SharkState)].GetValue<int>(); } set { this[nameof(SharkState)].SetValue<int>((int)value); } }
        public bool IsCloseToGround { get { return this[nameof(IsCloseToGround)].Flag; } set { this[nameof(IsCloseToGround)].Flag = value; } }
        public bool AttackConnected { get { return this[nameof(AttackConnected)].Flag; } set { this[nameof(AttackConnected)].Flag = value; } }
        public bool IsAttackingAndAttackNotConnected { get { return this[nameof(IsAttackingAndAttackNotConnected)].Flag; } set { this[nameof(IsAttackingAndAttackNotConnected)].Flag = value; } }
        public bool IsNotAttackingOrAttackConnected { get { return this[nameof(IsNotAttackingOrAttackConnected)].Flag; } set { this[nameof(IsNotAttackingOrAttackConnected)].Flag = value; } }
        public bool IsFalling { get { return this[nameof(IsFalling)].Flag; } set { this[nameof(IsFalling)].Flag = value; } }
        public bool IsVulnerable { get { return this[nameof(IsVulnerable)].Flag; } set { this[nameof(IsVulnerable)].Flag = value; } }
        public float BendValue { get { return this[nameof(BendValue)].GetValue<float>(); } set { this[nameof(BendValue)].SetValue<float>(value); } }
        public bool IsTurning { get { return this[nameof(IsTurning)].Flag; } set { this[nameof(IsTurning)].Flag = value; } }
        public float TurnSpeed { get { return this[nameof(TurnSpeed)].GetValue<float>(); } set { this[nameof(TurnSpeed)].SetValue<float>(value); } }
        public float IdleSpeed { get { return this[nameof(IdleSpeed)].GetValue<float>(); } set { this[nameof(IdleSpeed)].SetValue<float>(value); } }
    }
    public class ShieldGeneratorItem : ThrowableItem
    {
        public ShieldGeneratorItem(nint addr) : base(addr) { }
        public CapacityHoldingItemAggregator ChargeCapacity { get { return this[nameof(ChargeCapacity)].As<CapacityHoldingItemAggregator>(); } set { this["ChargeCapacity"] = value; } }
        public CapacityHoldingItemAggregator CarryCapacity { get { return this[nameof(CarryCapacity)].As<CapacityHoldingItemAggregator>(); } set { this["CarryCapacity"] = value; } }
        public float RechargeDuration { get { return this[nameof(RechargeDuration)].GetValue<float>(); } set { this[nameof(RechargeDuration)].SetValue<float>(value); } }
        public int UnchargedCount { get { return this[nameof(UnchargedCount)].GetValue<int>(); } set { this[nameof(UnchargedCount)].SetValue<int>(value); } }
        public float RechargeProgress { get { return this[nameof(RechargeProgress)].GetValue<float>(); } set { this[nameof(RechargeProgress)].SetValue<float>(value); } }
        public float SupplyStatusWeight { get { return this[nameof(SupplyStatusWeight)].GetValue<float>(); } set { this[nameof(SupplyStatusWeight)].SetValue<float>(value); } }
        public DialogDataAsset ShoutRecarged { get { return this[nameof(ShoutRecarged)].As<DialogDataAsset>(); } set { this["ShoutRecarged"] = value; } }
        public CoolDownProgressStyle RechargeProgressUI { get { return this[nameof(RechargeProgressUI)].As<CoolDownProgressStyle>(); } set { this["RechargeProgressUI"] = value; } }
        public void ReceiveGeneratorReturned() { Invoke(nameof(ReceiveGeneratorReturned)); }
        public void ReceiveGeneratorRechargeProgress(float Progress) { Invoke(nameof(ReceiveGeneratorRechargeProgress), Progress); }
        public void ReceiveGeneratorRecharged() { Invoke(nameof(ReceiveGeneratorRecharged)); }
        public void OnRep_UnchargedCount(int OldCount) { Invoke(nameof(OnRep_UnchargedCount), OldCount); }
        public bool GetIsRecharging() { return Invoke<bool>(nameof(GetIsRecharging)); }
        public void GeneratorReturned() { Invoke(nameof(GeneratorReturned)); }
    }
    public class ThrowableActor : Actor
    {
        public ThrowableActor(nint addr) : base(addr) { }
        public ProjectileMovementComponent Movement { get { return this[nameof(Movement)].As<ProjectileMovementComponent>(); } set { this["Movement"] = value; } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public GameplayTagContainer AttachToTags { get { return this[nameof(AttachToTags)].As<GameplayTagContainer>(); } set { this["AttachToTags"] = value; } }
        public bool IgnoreFellOutOfWorld { get { return this[nameof(IgnoreFellOutOfWorld)].Flag; } set { this[nameof(IgnoreFellOutOfWorld)].Flag = value; } }
        public bool IgnoreOwnersCollision { get { return this[nameof(IgnoreOwnersCollision)].Flag; } set { this[nameof(IgnoreOwnersCollision)].Flag = value; } }
        public void ReceiveIgnoreCharacter(PlayerCharacter Character) { Invoke(nameof(ReceiveIgnoreCharacter), Character); }
        public void ReceiveHitObject() { Invoke(nameof(ReceiveHitObject)); }
        public void OnRep_IsMoving() { Invoke(nameof(OnRep_IsMoving)); }
    }
    public class ShieldGeneratorActor : ThrowableActor
    {
        public ShieldGeneratorActor(nint addr) : base(addr) { }
        public float GeneratorRadius { get { return this[nameof(GeneratorRadius)].GetValue<float>(); } set { this[nameof(GeneratorRadius)].SetValue<float>(value); } }
        public float DeployDelay { get { return this[nameof(DeployDelay)].GetValue<float>(); } set { this[nameof(DeployDelay)].SetValue<float>(value); } }
        public bool bPushStatusEffectOnExit { get { return this[nameof(bPushStatusEffectOnExit)].Flag; } set { this[nameof(bPushStatusEffectOnExit)].Flag = value; } }
        public float GeneratorLifetime { get { return this[nameof(GeneratorLifetime)].GetValue<float>(); } set { this[nameof(GeneratorLifetime)].SetValue<float>(value); } }
    }
    public class StationaryEnemyAnimInstance : EnemyAnimInstance
    {
        public StationaryEnemyAnimInstance(nint addr) : base(addr) { }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public float Yaw { get { return this[nameof(Yaw)].GetValue<float>(); } set { this[nameof(Yaw)].SetValue<float>(value); } }
        public float MappedYaw { get { return this[nameof(MappedYaw)].GetValue<float>(); } set { this[nameof(MappedYaw)].SetValue<float>(value); } }
        public float Pitch { get { return this[nameof(Pitch)].GetValue<float>(); } set { this[nameof(Pitch)].SetValue<float>(value); } }
        public float YawSpeed { get { return this[nameof(YawSpeed)].GetValue<float>(); } set { this[nameof(YawSpeed)].SetValue<float>(value); } }
        public float PitchSpeed { get { return this[nameof(PitchSpeed)].GetValue<float>(); } set { this[nameof(PitchSpeed)].SetValue<float>(value); } }
        public bool LookingLeft { get { return this[nameof(LookingLeft)].Flag; } set { this[nameof(LookingLeft)].Flag = value; } }
        public bool LookingRight { get { return this[nameof(LookingRight)].Flag; } set { this[nameof(LookingRight)].Flag = value; } }
        public bool IsVisible { get { return this[nameof(IsVisible)].Flag; } set { this[nameof(IsVisible)].Flag = value; } }
        public bool InvertPitch { get { return this[nameof(InvertPitch)].Flag; } set { this[nameof(InvertPitch)].Flag = value; } }
        public void SetIsVisible(bool InIsVisible) { Invoke(nameof(SetIsVisible), InIsVisible); }
    }
    public class ShootingPlantAnimInstance : StationaryEnemyAnimInstance
    {
        public ShootingPlantAnimInstance(nint addr) : base(addr) { }
    }
    public class ShowroomItem : Actor
    {
        public ShowroomItem(nint addr) : base(addr) { }
        public Object ShowroomStage { get { return this[nameof(ShowroomStage)]; } set { this[nameof(ShowroomStage)] = value; } }
    }
    public class EnemyShowroomItem : ShowroomItem
    {
        public EnemyShowroomItem(nint addr) : base(addr) { }
        public EShowroomScaling Scaling { get { return (EShowroomScaling)this[nameof(Scaling)].GetValue<int>(); } set { this[nameof(Scaling)].SetValue<int>((int)value); } }
    }
    public class ShowroomController : ActorComponent
    {
        public ShowroomController(nint addr) : base(addr) { }
        public ShowroomStage Stage { get { return this[nameof(Stage)].As<ShowroomStage>(); } set { this["Stage"] = value; } }
        public void SetLightChannels(Actor Actor) { Invoke(nameof(SetLightChannels), Actor); }
        public void RotateShowroom(float Pitch, float Yaw) { Invoke(nameof(RotateShowroom), Pitch, Yaw); }
        public void ResetShowroomRotation() { Invoke(nameof(ResetShowroomRotation)); }
        public Rotator GetShowroomRotation() { return Invoke<Rotator>(nameof(GetShowroomRotation)); }
    }
    public class EnemyShowroomController : ShowroomController
    {
        public EnemyShowroomController(nint addr) : base(addr) { }
        public EnemyShowroomItem EnemyInstance { get { return this[nameof(EnemyInstance)].As<EnemyShowroomItem>(); } set { this["EnemyInstance"] = value; } }
        public void Receive_PlayAttack(AnimSequenceBase attackAnimation) { Invoke(nameof(Receive_PlayAttack), attackAnimation); }
        public void PlayAttack(AnimSequenceBase Animation) { Invoke(nameof(PlayAttack), Animation); }
        public EnemyShowroomController DisplayEnemy(Object WorldContextObject, Object EnemyPreviewActor) { return Invoke<EnemyShowroomController>(nameof(DisplayEnemy), WorldContextObject, EnemyPreviewActor); }
    }
    public class ShowroomCameraKey : DataAsset
    {
        public ShowroomCameraKey(nint addr) : base(addr) { }
    }
    public class ShowroomSceneCaptureComponent : SceneCaptureComponent2D
    {
        public ShowroomSceneCaptureComponent(nint addr) : base(addr) { }
        public ShowroomCameraKey CameraKey { get { return this[nameof(CameraKey)].As<ShowroomCameraKey>(); } set { this["CameraKey"] = value; } }
    }
    public class CharacterShowroomController : ShowroomController
    {
        public CharacterShowroomController(nint addr) : base(addr) { }
        public PlayerCharacter CharacterInstance { get { return this[nameof(CharacterInstance)].As<PlayerCharacter>(); } set { this["CharacterInstance"] = value; } }
        public void Receive_CharacterShown() { Invoke(nameof(Receive_CharacterShown)); }
        public void EquipWeapon(EItemCategory Category) { Invoke(nameof(EquipWeapon), Category); }
        public CharacterShowroomController DisplayCharacter(Object WorldContextObject, PlayerCharacterID characterID, ShowroomCameraKey Key) { return Invoke<CharacterShowroomController>(nameof(DisplayCharacter), WorldContextObject, characterID, Key); }
    }
    public class ShowroomManager : ActorComponent
    {
        public ShowroomManager(nint addr) : base(addr) { }
        public Vector ShowroomLocation { get { return this[nameof(ShowroomLocation)].As<Vector>(); } set { this["ShowroomLocation"] = value; } }
        public Object CurrentStage { get { return this[nameof(CurrentStage)]; } set { this[nameof(CurrentStage)] = value; } }
        public ShowroomStage StageInstance { get { return this[nameof(StageInstance)].As<ShowroomStage>(); } set { this["StageInstance"] = value; } }
        public TextureRenderTarget2D RenderTarget { get { return this[nameof(RenderTarget)].As<TextureRenderTarget2D>(); } set { this["RenderTarget"] = value; } }
        public ShowroomController GetController() { return Invoke<ShowroomController>(nameof(GetController)); }
        public void ClearShowroom() { Invoke(nameof(ClearShowroom)); }
    }
    public class ShowroomSettings : DataAsset
    {
        public ShowroomSettings(nint addr) : base(addr) { }
        public Object EnemyShowroomController { get { return this[nameof(EnemyShowroomController)]; } set { this[nameof(EnemyShowroomController)] = value; } }
        public Object CharacterShowroomController { get { return this[nameof(CharacterShowroomController)]; } set { this[nameof(CharacterShowroomController)] = value; } }
        public Object CharacterStage { get { return this[nameof(CharacterStage)]; } set { this[nameof(CharacterStage)] = value; } }
    }
    public class ShowroomStage : Actor
    {
        public ShowroomStage(nint addr) : base(addr) { }
        public SceneCaptureComponent2D SceneCapure { get { return this[nameof(SceneCapure)].As<SceneCaptureComponent2D>(); } set { this["SceneCapure"] = value; } }
        public SceneCaptureComponent2D ActiveCaptureComponent { get { return this[nameof(ActiveCaptureComponent)].As<SceneCaptureComponent2D>(); } set { this["ActiveCaptureComponent"] = value; } }
        public Object ControllerClass { get { return this[nameof(ControllerClass)]; } set { this[nameof(ControllerClass)] = value; } }
        public ShowroomController ControllerInstance { get { return this[nameof(ControllerInstance)].As<ShowroomController>(); } set { this["ControllerInstance"] = value; } }
        public SceneCaptureComponent2D SceneCapture { get { return this[nameof(SceneCapture)].As<SceneCaptureComponent2D>(); } set { this["SceneCapture"] = value; } }
        public float MinPitch { get { return this[nameof(MinPitch)].GetValue<float>(); } set { this[nameof(MinPitch)].SetValue<float>(value); } }
        public float MaxPitch { get { return this[nameof(MaxPitch)].GetValue<float>(); } set { this[nameof(MaxPitch)].SetValue<float>(value); } }
        public SceneComponent CameraFocusPoint { get { return this[nameof(CameraFocusPoint)].As<SceneComponent>(); } set { this["CameraFocusPoint"] = value; } }
        public void ReceiveInitialize(TextureRenderTarget2D RenderTarget) { Invoke(nameof(ReceiveInitialize), RenderTarget); }
        public SceneCaptureComponent2D GetActiveCaptureComponent() { return Invoke<SceneCaptureComponent2D>(nameof(GetActiveCaptureComponent)); }
        public TextureRenderTarget2D CreateRenderTarget() { return Invoke<TextureRenderTarget2D>(nameof(CreateRenderTarget)); }
    }
    public class Shredder : EnemyDeepPathfinderCharacter
    {
        public Shredder(nint addr) : base(addr) { }
        public float FoldoutRange { get { return this[nameof(FoldoutRange)].GetValue<float>(); } set { this[nameof(FoldoutRange)].SetValue<float>(value); } }
        public float SpinRange { get { return this[nameof(SpinRange)].GetValue<float>(); } set { this[nameof(SpinRange)].SetValue<float>(value); } }
        public Actor CurrentTarget { get { return this[nameof(CurrentTarget)].As<Actor>(); } set { this["CurrentTarget"] = value; } }
    }
    public class ShredderAnimInstance : EnemyAnimInstance
    {
        public ShredderAnimInstance(nint addr) : base(addr) { }
        public bool InFoldoutRange { get { return this[nameof(InFoldoutRange)].Flag; } set { this[nameof(InFoldoutRange)].Flag = value; } }
        public bool InSpinRange { get { return this[nameof(InSpinRange)].Flag; } set { this[nameof(InSpinRange)].Flag = value; } }
    }
    public class SideburnsVanityItem : VanityItem
    {
        public SideburnsVanityItem(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object AnimInstance { get { return this[nameof(AnimInstance)]; } set { this[nameof(AnimInstance)] = value; } }
        public bool RequiresSlimArmor { get { return this[nameof(RequiresSlimArmor)].Flag; } set { this[nameof(RequiresSlimArmor)].Flag = value; } }
        public Object VanityTags { get { return this[nameof(VanityTags)]; } set { this[nameof(VanityTags)] = value; } }
    }
    public class SimpleHealthComponent : HealthComponentBase
    {
        public SimpleHealthComponent(nint addr) : base(addr) { }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public bool InvulnerableToNonDefinedResistances { get { return this[nameof(InvulnerableToNonDefinedResistances)].Flag; } set { this[nameof(InvulnerableToNonDefinedResistances)].Flag = value; } }
        public float EnvironmentalDamageResistance { get { return this[nameof(EnvironmentalDamageResistance)].GetValue<float>(); } set { this[nameof(EnvironmentalDamageResistance)].SetValue<float>(value); } }
        public bool bShowHealthBar { get { return this[nameof(bShowHealthBar)].Flag; } set { this[nameof(bShowHealthBar)].Flag = value; } }
        public Vector HealthBarOffsetWorld { get { return this[nameof(HealthBarOffsetWorld)].As<Vector>(); } set { this["HealthBarOffsetWorld"] = value; } }
        public Object EnemyComponent { get { return this[nameof(EnemyComponent)]; } set { this[nameof(EnemyComponent)] = value; } }
        public Object Resistances { get { return this[nameof(Resistances)]; } set { this[nameof(Resistances)] = value; } }
        public UArray<DamageTag> RequiredDamageTags { get { return new UArray<DamageTag>(this[nameof(RequiredDamageTags)].Address); } }
        public bool AutomaticFlushNetDormancy { get { return this[nameof(AutomaticFlushNetDormancy)].Flag; } set { this[nameof(AutomaticFlushNetDormancy)].Flag = value; } }
        public void OnRep_Damage(float oldDamage) { Invoke(nameof(OnRep_Damage), oldDamage); }
        public float HealFromDeath(float amount) { return Invoke<float>(nameof(HealFromDeath), amount); }
    }
    public class MaggotAnimationSharingStateProcessor : AnimationSharingStateProcessor
    {
        public MaggotAnimationSharingStateProcessor(nint addr) : base(addr) { }
    }
    public class PipelineAnimationSharingProcessor : AnimationSharingStateProcessor
    {
        public PipelineAnimationSharingProcessor(nint addr) : base(addr) { }
    }
    public class SkinColorVanityItem : VanityItem
    {
        public SkinColorVanityItem(nint addr) : base(addr) { }
        public Object Material { get { return this[nameof(Material)]; } set { this[nameof(Material)] = value; } }
    }
    public class SkinEffect : Object
    {
        public SkinEffect(nint addr) : base(addr) { }
        public void Receive_AddToItem(MeshComponent Mesh, Actor Skinnable, bool IsFirstPerson) { Invoke(nameof(Receive_AddToItem), Mesh, Skinnable, IsFirstPerson); }
        public EItemSkinType GetSkinType() { return Invoke<EItemSkinType>(nameof(GetSkinType)); }
    }
    public class MaterialSkinEffect : SkinEffect
    {
        public MaterialSkinEffect(nint addr) : base(addr) { }
        public UArray<Object> Materials { get { return new UArray<Object>(this[nameof(Materials)].Address); } }
    }
    public class SkeletalMeshSkinEffect : SkinEffect
    {
        public SkeletalMeshSkinEffect(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public UArray<AttachMesh> AttachMeshes { get { return new UArray<AttachMesh>(this[nameof(AttachMeshes)].Address); } }
    }
    public class SkeletalMeshSkinEffectSpawnable : SkeletalMeshComponent
    {
        public SkeletalMeshSkinEffectSpawnable(nint addr) : base(addr) { }
    }
    public class FPSkeletalMeshSkinEffectSpawnable : FirstPersonSkeletalMeshComponent
    {
        public FPSkeletalMeshSkinEffectSpawnable(nint addr) : base(addr) { }
    }
    public class Skinnable : Interface
    {
        public Skinnable(nint addr) : base(addr) { }
    }
    public class SkinnableComponent : ActorComponent
    {
        public SkinnableComponent(nint addr) : base(addr) { }
        public ItemSkin EquippedSkinColor { get { return this[nameof(EquippedSkinColor)].As<ItemSkin>(); } set { this["EquippedSkinColor"] = value; } }
        public ItemSkin EquippedSkinMesh { get { return this[nameof(EquippedSkinMesh)].As<ItemSkin>(); } set { this["EquippedSkinMesh"] = value; } }
        public void UpdateSkin(FSDPlayerState Player) { Invoke(nameof(UpdateSkin), Player); }
        public void OnLoadoutChanged() { Invoke(nameof(OnLoadoutChanged)); }
        public UArray<ItemSkin> GetSkinsForItem(ItemID ItemID, EItemSkinType skinType) { return Invoke<UArray<ItemSkin>>(nameof(GetSkinsForItem), ItemID, skinType); }
        public ItemSkin GetEquippedSkinMesh(ItemID ItemID, FSDPlayerState Player) { return Invoke<ItemSkin>(nameof(GetEquippedSkinMesh), ItemID, Player); }
        public ItemSkin GetEquippedSkinColor(ItemID ItemID, FSDPlayerState Player) { return Invoke<ItemSkin>(nameof(GetEquippedSkinColor), ItemID, Player); }
        public ItemSkin GetEquippedSkin(ItemID ItemID, EItemSkinType skinType, FSDPlayerState Player) { return Invoke<ItemSkin>(nameof(GetEquippedSkin), ItemID, skinType, Player); }
        public UArray<ItemSkin> GetEquippableColorSkins(ItemID ItemID, FSDPlayerState Player) { return Invoke<UArray<ItemSkin>>(nameof(GetEquippableColorSkins), ItemID, Player); }
        public ItemSkin GetDefaultItemSkin(ItemID ItemID, EItemSkinType itemSkinType) { return Invoke<ItemSkin>(nameof(GetDefaultItemSkin), ItemID, itemSkinType); }
        public ItemSkin GetBaseColorSkinForMeshSkin(ItemID ItemID, ItemSkin meshSkin) { return Invoke<ItemSkin>(nameof(GetBaseColorSkinForMeshSkin), ItemID, meshSkin); }
        public void EquipSkin(ItemSkin Skin, ItemID ItemID, FSDPlayerState Player) { Invoke(nameof(EquipSkin), Skin, ItemID, Player); }
    }
    public class DroneSkinnableComponent : SkinnableComponent
    {
        public DroneSkinnableComponent(nint addr) : base(addr) { }
    }
    public class PlagueSoaperItem : PlagueCleanupItem
    {
        public PlagueSoaperItem(nint addr) : base(addr) { }
        public ProjectileLauncherComponent projectileLauncher { get { return this[nameof(projectileLauncher)].As<ProjectileLauncherComponent>(); } set { this["projectileLauncher"] = value; } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public Object OnAmmoChanged { get { return this[nameof(OnAmmoChanged)]; } set { this[nameof(OnAmmoChanged)] = value; } }
        public void OnWeaponFired(Vector Location) { Invoke(nameof(OnWeaponFired), Location); }
    }
    public class SocketAttacherComponent : ActorComponent
    {
        public SocketAttacherComponent(nint addr) : base(addr) { }
        public int MaxSocketAttachments { get { return this[nameof(MaxSocketAttachments)].GetValue<int>(); } set { this[nameof(MaxSocketAttachments)].SetValue<int>(value); } }
        public void DetachFromSocket() { Invoke(nameof(DetachFromSocket)); }
        public bool AttachToSocket(Actor aTarget, Object SocketName, bool ShouldAttach) { return Invoke<bool>(nameof(AttachToSocket), aTarget, SocketName, ShouldAttach); }
    }
    public class SoftReferenceProvider : Interface
    {
        public SoftReferenceProvider(nint addr) : base(addr) { }
    }
    public class SoundClassManager : GameInstanceSubsystem
    {
        public SoundClassManager(nint addr) : base(addr) { }
    }
    public class SoundMixManagerComponent : ActorComponent
    {
        public SoundMixManagerComponent(nint addr) : base(addr) { }
        public UArray<SoundMixManagerItem> SoundMixes { get { return new UArray<SoundMixManagerItem>(this[nameof(SoundMixes)].Address); } }
    }
    public class SpaceBall : CarriableItem
    {
        public SpaceBall(nint addr) : base(addr) { }
    }
    public class PatrolBotDecorative : FSDPhysicsActor
    {
        public PatrolBotDecorative(nint addr) : base(addr) { }
    }
    public class SpaceRigBar : Actor
    {
        public SpaceRigBar(nint addr) : base(addr) { }
        public Object OnNewDrinkableSpecial { get { return this[nameof(OnNewDrinkableSpecial)]; } set { this[nameof(OnNewDrinkableSpecial)] = value; } }
        public InstantUsable BarUsable { get { return this[nameof(BarUsable)].As<InstantUsable>(); } set { this["BarUsable"] = value; } }
        public BoxComponent BarUsableCollider { get { return this[nameof(BarUsableCollider)].As<BoxComponent>(); } set { this["BarUsableCollider"] = value; } }
        public Object BarMenuWidget { get { return this[nameof(BarMenuWidget)]; } set { this[nameof(BarMenuWidget)] = value; } }
        public UArray<Vector> DrinkServingLocations { get { return new UArray<Vector>(this[nameof(DrinkServingLocations)].Address); } }
        public UArray<DrinkableBarSlot> DrinkableBarSlots { get { return new UArray<DrinkableBarSlot>(this[nameof(DrinkableBarSlots)].Address); } }
        public DrinkableDataAsset DrinkableSpecial { get { return this[nameof(DrinkableSpecial)].As<DrinkableDataAsset>(); } set { this["DrinkableSpecial"] = value; } }
        public Object HolidayComponentMap { get { return this[nameof(HolidayComponentMap)]; } set { this[nameof(HolidayComponentMap)] = value; } }
        public void SpawnDrinkables(DrinkableDataAsset Drinkable, PlayerCharacter User) { Invoke(nameof(SpawnDrinkables), Drinkable, User); }
        public void SetVisibilityOfHolidayMeshes() { Invoke(nameof(SetVisibilityOfHolidayMeshes)); }
        public void ReceiveFinishedSpawningDrinkables(DrinkableDataAsset DrinkableData, PlayerCharacter Customer) { Invoke(nameof(ReceiveFinishedSpawningDrinkables), DrinkableData, Customer); }
        public void ReceiveDrinkableSpawned(DrinkableActor Drinkable, PlayerCharacter Customer, int LocationIndex) { Invoke(nameof(ReceiveDrinkableSpawned), Drinkable, Customer, LocationIndex); }
        public void ReceiveBeginSpawningDrinkables(DrinkableDataAsset DrinkableData, PlayerCharacter Customer) { Invoke(nameof(ReceiveBeginSpawningDrinkables), DrinkableData, Customer); }
        public void PlayBartenderTip(PlayerCharacter User) { Invoke(nameof(PlayBartenderTip), User); }
        public void PayTip(PlayerCharacter Character, int Credits) { Invoke(nameof(PayTip), Character, Credits); }
        public void OnRep_DrinkableSpecial() { Invoke(nameof(OnRep_DrinkableSpecial)); }
        public bool HasUnclaimedDrinkables() { return Invoke<bool>(nameof(HasUnclaimedDrinkables)); }
        public bool HasSpaceForMoreDrinkables() { return Invoke<bool>(nameof(HasSpaceForMoreDrinkables)); }
        public int GetAvailableDrinkableSlots() { return Invoke<int>(nameof(GetAvailableDrinkableSlots)); }
        public void DrinkableSignature__DelegateSignature(DrinkableDataAsset Drinkable) { Invoke(nameof(DrinkableSignature__DelegateSignature), Drinkable); }
    }
    public class SpaceRigBarMenuItem : FSDUserWidget
    {
        public SpaceRigBarMenuItem(nint addr) : base(addr) { }
        public DrinkableDataAsset Drink { get { return this[nameof(Drink)].As<DrinkableDataAsset>(); } set { this["Drink"] = value; } }
        public bool SpecialEditionSelected { get { return this[nameof(SpecialEditionSelected)].Flag; } set { this[nameof(SpecialEditionSelected)].Flag = value; } }
        public void Unselect() { Invoke(nameof(Unselect)); }
        public void Select() { Invoke(nameof(Select)); }
        public DrinkableDataAsset GetSelectedDrinkableType() { return Invoke<DrinkableDataAsset>(nameof(GetSelectedDrinkableType)); }
    }
    public class SpawnActorWithDebrisPosComponent : ActorComponent
    {
        public SpawnActorWithDebrisPosComponent(nint addr) : base(addr) { }
        public float MinDistanceBetweenSpwans { get { return this[nameof(MinDistanceBetweenSpwans)].GetValue<float>(); } set { this[nameof(MinDistanceBetweenSpwans)].SetValue<float>(value); } }
        public bool AddTerrainPlacementBlockers { get { return this[nameof(AddTerrainPlacementBlockers)].Flag; } set { this[nameof(AddTerrainPlacementBlockers)].Flag = value; } }
        public bool AvoidImportantLocations { get { return this[nameof(AvoidImportantLocations)].Flag; } set { this[nameof(AvoidImportantLocations)].Flag = value; } }
        public float MinDistanceToImportantLocations { get { return this[nameof(MinDistanceToImportantLocations)].GetValue<float>(); } set { this[nameof(MinDistanceToImportantLocations)].SetValue<float>(value); } }
        public bool PlaceActorsWithCallback(int NumToSpawn, int NumToSpawnMin, int NumAllowedChecks, Object SpawnedActorClass, ProceduralSetup Setup, float Radius, DebrisPositioning DebrisPositioning, UArray<Vector> locationsToAvoid, CurveFloat AvoidCostCurve, Object OnSpawned, Vector CustomLocation) { return Invoke<bool>(nameof(PlaceActorsWithCallback), NumToSpawn, NumToSpawnMin, NumAllowedChecks, SpawnedActorClass, Setup, Radius, DebrisPositioning, locationsToAvoid, AvoidCostCurve, OnSpawned, CustomLocation); }
        public bool PlaceActors(int NumToSpawn, int NumToSpawnMin, int NumAllowedChecks, Object SpawnedActorClass, ProceduralSetup Setup, float Radius, DebrisPositioning DebrisPositioning, UArray<Vector> locationsToAvoid, CurveFloat AvoidCostCurve, UArray<Actor> OutSpawnedActors, Vector CustomLocation) { return Invoke<bool>(nameof(PlaceActors), NumToSpawn, NumToSpawnMin, NumAllowedChecks, SpawnedActorClass, Setup, Radius, DebrisPositioning, locationsToAvoid, AvoidCostCurve, OutSpawnedActors, CustomLocation); }
        public bool GetLocations(int NumToSpawn, int NumToSpawnMin, int NumAllowedChecks, Object SpawnedActorClass, ProceduralSetup Setup, float Radius, DebrisPositioning DebrisPositioning, UArray<Vector> locationsToAvoid, CurveFloat AvoidCostCurve, UArray<Transform> OutLocations, Vector CustomLocation) { return Invoke<bool>(nameof(GetLocations), NumToSpawn, NumToSpawnMin, NumAllowedChecks, SpawnedActorClass, Setup, Radius, DebrisPositioning, locationsToAvoid, AvoidCostCurve, OutLocations, CustomLocation); }
        public void AddTerrainPlacement(Actor Actor, ProceduralSetup Setup) { Invoke(nameof(AddTerrainPlacement), Actor, Setup); }
    }
    public class SpawningBlueprintLibrary : BlueprintFunctionLibrary
    {
        public SpawningBlueprintLibrary(nint addr) : base(addr) { }
        public void SpawnEnemyGroupDescriptorWithCallbackSpreadOut(Object WorldContextObject, EnemyGroupDescriptor descriptor, float Difficulty, UArray<Vector> Locations, bool Alert, DeepPathFinderSize pfSize, Object Callback) { Invoke(nameof(SpawnEnemyGroupDescriptorWithCallbackSpreadOut), WorldContextObject, descriptor, Difficulty, Locations, Alert, pfSize, Callback); }
        public void SpawnEnemyGroupDescriptorSpreadOut(Object WorldContextObject, EnemyGroupDescriptor descriptor, float Difficulty, UArray<Vector> Locations, bool Alert, DeepPathFinderSize pfSize) { Invoke(nameof(SpawnEnemyGroupDescriptorSpreadOut), WorldContextObject, descriptor, Difficulty, Locations, Alert, pfSize); }
        public void SpawnEnemyGroupDescriptor(Object WorldContextObject, EnemyGroupDescriptor descriptor, float Difficulty, Vector Location, bool Alert, DeepPathFinderSize pfSize) { Invoke(nameof(SpawnEnemyGroupDescriptor), WorldContextObject, descriptor, Difficulty, Location, Alert, pfSize); }
        public void SpawnEnemiesFromPool(Object WorldContextObject, float Difficulty, UArray<Vector> Locations, UArray<EnemyDescriptor> BannedEnemies, bool Alert, bool isConstantPreassure) { Invoke(nameof(SpawnEnemiesFromPool), WorldContextObject, Difficulty, Locations, BannedEnemies, Alert, isConstantPreassure); }
        public void SpawnEnemiesAtLocationWithCallback(Object WorldContextObject, EnemyDescriptor EnemyDescriptor, int Count, Vector Location, Object Callback, bool Alert, bool scaleToDifficulty, DeepPathFinderSize pfSize) { Invoke(nameof(SpawnEnemiesAtLocationWithCallback), WorldContextObject, EnemyDescriptor, Count, Location, Callback, Alert, scaleToDifficulty, pfSize); }
        public void SpawnEnemiesAtLocation(Object WorldContextObject, EnemyDescriptor EnemyDescriptor, int Count, Vector Location, bool Alert, bool scaleToDifficulty, DeepPathFinderSize pfSize) { Invoke(nameof(SpawnEnemiesAtLocation), WorldContextObject, EnemyDescriptor, Count, Location, Alert, scaleToDifficulty, pfSize); }
        public void SpawnEnemiesAtEachLocation(Object WorldContextObject, EnemyDescriptor EnemyDescriptor, UArray<Vector> Locations, DeepPathFinderSize pfSize) { Invoke(nameof(SpawnEnemiesAtEachLocation), WorldContextObject, EnemyDescriptor, Locations, pfSize); }
        public UArray<Vector> GetSpawnPointsInRange(Object WorldContextObject, float distanceToPlayers, int spawnPointCount, DeepPathFinderSize pfSize) { return Invoke<UArray<Vector>>(nameof(GetSpawnPointsInRange), WorldContextObject, distanceToPlayers, spawnPointCount, pfSize); }
        public UArray<Vector> GetSpawnPointsInCircle(Object WorldContextObject, Vector Location, float Radius, int Count, bool scaleToDificulty, float maxSpawnAngle, DeepPathFinderSize pfSize) { return Invoke<UArray<Vector>>(nameof(GetSpawnPointsInCircle), WorldContextObject, Location, Radius, Count, scaleToDificulty, maxSpawnAngle, pfSize); }
        public UArray<Vector> GetSpawnPointsFromLocation(Object WorldContextObject, Vector Location, float Distance, int spawnPointCount, DeepPathFinderSize pfSize) { return Invoke<UArray<Vector>>(nameof(GetSpawnPointsFromLocation), WorldContextObject, Location, Distance, spawnPointCount, pfSize); }
        public UArray<Vector> GetSpawnPointsAroundLocation(Object WorldContextObject, Vector Location, float Distance, int spawnPointCount, DeepPathFinderSize pfSize) { return Invoke<UArray<Vector>>(nameof(GetSpawnPointsAroundLocation), WorldContextObject, Location, Distance, spawnPointCount, pfSize); }
        public Vector GetSpawnPointInRange(Object WorldContextObject, float distanceToPlayers, DeepPathFinderSize pfSize) { return Invoke<Vector>(nameof(GetSpawnPointInRange), WorldContextObject, distanceToPlayers, pfSize); }
        public Vector GetSpawnPointFromLocation(Object WorldContextObject, Vector Location, float Distance, DeepPathFinderSize pfSize) { return Invoke<Vector>(nameof(GetSpawnPointFromLocation), WorldContextObject, Location, Distance, pfSize); }
    }
    public class SpawnSettings : DataAsset
    {
        public SpawnSettings(nint addr) : base(addr) { }
        public UArray<Object> SpawnEffects { get { return new UArray<Object>(this[nameof(SpawnEffects)].Address); } }
        public UArray<Object> SpawnSounds { get { return new UArray<Object>(this[nameof(SpawnSounds)].Address); } }
        public RandRange SpawnDuration { get { return this[nameof(SpawnDuration)].As<RandRange>(); } set { this["SpawnDuration"] = value; } }
    }
    public class SpecialEvent : DataAsset
    {
        public SpecialEvent(nint addr) : base(addr) { }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public UArray<MissionTemplate> BannedMissions { get { return new UArray<MissionTemplate>(this[nameof(BannedMissions)].Address); } }
        public UArray<Mutator> BannedMutators { get { return new UArray<Mutator>(this[nameof(BannedMutators)].Address); } }
        public SpecialEventSpawner EventSpawner { get { return this[nameof(EventSpawner)].As<SpecialEventSpawner>(); } set { this["EventSpawner"] = value; } }
        public UArray<Season> PartOfSeasons { get { return new UArray<Season>(this[nameof(PartOfSeasons)].Address); } }
    }
    public class SpecialDamageAttackComponent : SpecialAttackComponent
    {
        public SpecialDamageAttackComponent(nint addr) : base(addr) { }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
    }
    public class SpecialEventBlueprintLibrary : BlueprintFunctionLibrary
    {
        public SpecialEventBlueprintLibrary(nint addr) : base(addr) { }
        public Schematic TryGivePendingReward(Object WorldContextObject) { return Invoke<Schematic>(nameof(TryGivePendingReward), WorldContextObject); }
        public void StorePendingReward(Object WorldContextObject, UArray<Schematic> schematicsToChooseFrom) { Invoke(nameof(StorePendingReward), WorldContextObject, schematicsToChooseFrom); }
        public void SpawnEventRewardFrame(Object WorldContextObject, Vector Location) { Invoke(nameof(SpawnEventRewardFrame), WorldContextObject, Location); }
        public bool HasPendingReward(Object WorldContextObject) { return Invoke<bool>(nameof(HasPendingReward), WorldContextObject); }
        public UArray<Schematic> GetSpecialEventsRewardSchematics(Object WorldContextObject) { return Invoke<UArray<Schematic>>(nameof(GetSpecialEventsRewardSchematics), WorldContextObject); }
        public Schematic FindRandomSchematicForCharacter(Object WorldContextObject, PlayerCharacterID characterID, ESchematicType SchematicType) { return Invoke<Schematic>(nameof(FindRandomSchematicForCharacter), WorldContextObject, characterID, SchematicType); }
        public void ClearPendingReward(Object WorldContextObject) { Invoke(nameof(ClearPendingReward), WorldContextObject); }
    }
    public class SpecialEventSettings : DataAsset
    {
        public SpecialEventSettings(nint addr) : base(addr) { }
        public UArray<SpecialEvent> MachineEvents { get { return new UArray<SpecialEvent>(this[nameof(MachineEvents)].Address); } }
        public RuntimeFloatCurve ME_SpawnChanceMissionLengthCurve { get { return this[nameof(ME_SpawnChanceMissionLengthCurve)].As<RuntimeFloatCurve>(); } set { this["ME_SpawnChanceMissionLengthCurve"] = value; } }
        public UArray<SpecialEvent> OtherSpecialEvents { get { return new UArray<SpecialEvent>(this[nameof(OtherSpecialEvents)].Address); } }
        public RuntimeFloatCurve Other_SpawnChanceMissionLengthCurve { get { return this[nameof(Other_SpawnChanceMissionLengthCurve)].As<RuntimeFloatCurve>(); } set { this["Other_SpawnChanceMissionLengthCurve"] = value; } }
        public Object EventRewardFrameClass { get { return this[nameof(EventRewardFrameClass)]; } set { this[nameof(EventRewardFrameClass)] = value; } }
        public DebrisPositioning EventRewardFramePositioning { get { return this[nameof(EventRewardFramePositioning)].As<DebrisPositioning>(); } set { this["EventRewardFramePositioning"] = value; } }
        public float EventRewardRadius { get { return this[nameof(EventRewardRadius)].GetValue<float>(); } set { this[nameof(EventRewardRadius)].SetValue<float>(value); } }
        public float CreditsReward { get { return this[nameof(CreditsReward)].GetValue<float>(); } set { this[nameof(CreditsReward)].SetValue<float>(value); } }
        public float XPReward { get { return this[nameof(XPReward)].GetValue<float>(); } set { this[nameof(XPReward)].SetValue<float>(value); } }
    }
    public class SpecialEventSpawner : Object
    {
        public SpecialEventSpawner(nint addr) : base(addr) { }
    }
    public class SimpleSpecialEventSpawner : SpecialEventSpawner
    {
        public SimpleSpecialEventSpawner(nint addr) : base(addr) { }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public Object EventActor { get { return this[nameof(EventActor)]; } set { this[nameof(EventActor)] = value; } }
        public float EventAvoidanceRadius { get { return this[nameof(EventAvoidanceRadius)].GetValue<float>(); } set { this[nameof(EventAvoidanceRadius)].SetValue<float>(value); } }
    }
    public class EncounterSpecialEventSpawner : SpecialEventSpawner
    {
        public EncounterSpecialEventSpawner(nint addr) : base(addr) { }
        public EncounterSpecialItem Encounter { get { return this[nameof(Encounter)].As<EncounterSpecialItem>(); } set { this["Encounter"] = value; } }
    }
    public class TimedSpecialEventSpawner : SpecialEventSpawner
    {
        public TimedSpecialEventSpawner(nint addr) : base(addr) { }
        public UArray<Object> BlockStack { get { return new UArray<Object>(this[nameof(BlockStack)].Address); } }
        public Object EventActor { get { return this[nameof(EventActor)]; } set { this[nameof(EventActor)] = value; } }
        public float MinTime { get { return this[nameof(MinTime)].GetValue<float>(); } set { this[nameof(MinTime)].SetValue<float>(value); } }
        public float MaxTime { get { return this[nameof(MaxTime)].GetValue<float>(); } set { this[nameof(MaxTime)].SetValue<float>(value); } }
        public void UnblockEventSpawn(Object blocker) { Invoke(nameof(UnblockEventSpawn), blocker); }
        public void SpawnEvent() { Invoke(nameof(SpawnEvent)); }
        public void BlockEventSpawn(Object blocker) { Invoke(nameof(BlockEventSpawn), blocker); }
        public bool AreEventSpawnsBlocked() { return Invoke<bool>(nameof(AreEventSpawnsBlocked)); }
    }
    public class ShootingSpiderAnimInstance : SpiderAnimInstance
    {
        public ShootingSpiderAnimInstance(nint addr) : base(addr) { }
        public float LookAtBlend { get { return this[nameof(LookAtBlend)].GetValue<float>(); } set { this[nameof(LookAtBlend)].SetValue<float>(value); } }
        public bool CheckCurve { get { return this[nameof(CheckCurve)].Flag; } set { this[nameof(CheckCurve)].Flag = value; } }
        public Object TargetActor { get { return this[nameof(TargetActor)]; } set { this[nameof(TargetActor)] = value; } }
        public Vector LookAtLocation { get { return this[nameof(LookAtLocation)].As<Vector>(); } set { this["LookAtLocation"] = value; } }
    }
    public class SpiderLobberAnimInstance : ShootingSpiderAnimInstance
    {
        public SpiderLobberAnimInstance(nint addr) : base(addr) { }
        public Vector EffectiveLiquidInBum { get { return this[nameof(EffectiveLiquidInBum)].As<Vector>(); } set { this["EffectiveLiquidInBum"] = value; } }
        public FloatInterval LiquidInBumRange { get { return this[nameof(LiquidInBumRange)].As<FloatInterval>(); } set { this["LiquidInBumRange"] = value; } }
        public float LiquidInBumEaseInExp { get { return this[nameof(LiquidInBumEaseInExp)].GetValue<float>(); } set { this[nameof(LiquidInBumEaseInExp)].SetValue<float>(value); } }
        public float LiquidInBumTimeToMax { get { return this[nameof(LiquidInBumTimeToMax)].GetValue<float>(); } set { this[nameof(LiquidInBumTimeToMax)].SetValue<float>(value); } }
        public float LiquidInBumTimeToMaxShort { get { return this[nameof(LiquidInBumTimeToMaxShort)].GetValue<float>(); } set { this[nameof(LiquidInBumTimeToMaxShort)].SetValue<float>(value); } }
        public void SetAttackIndex(int Index) { Invoke(nameof(SetAttackIndex), Index); }
        public void ResetLiquidInBum() { Invoke(nameof(ResetLiquidInBum)); }
        public void OnDeath(HealthComponentBase InHealthComponent) { Invoke(nameof(OnDeath), InHealthComponent); }
    }
    public class SpiderEnemy : EnemyDeepPathfinderCharacter
    {
        public SpiderEnemy(nint addr) : base(addr) { }
        public PawnStatsComponent PawnStats { get { return this[nameof(PawnStats)].As<PawnStatsComponent>(); } set { this["PawnStats"] = value; } }
        public HitReactionComponent HitReactions { get { return this[nameof(HitReactions)].As<HitReactionComponent>(); } set { this["HitReactions"] = value; } }
        public StaticMesh GoreMesh { get { return this[nameof(GoreMesh)].As<StaticMesh>(); } set { this["GoreMesh"] = value; } }
        public bool ApplyDifficultySpeedModifier { get { return this[nameof(ApplyDifficultySpeedModifier)].Flag; } set { this[nameof(ApplyDifficultySpeedModifier)].Flag = value; } }
        public float AttackDamageModifier { get { return this[nameof(AttackDamageModifier)].GetValue<float>(); } set { this[nameof(AttackDamageModifier)].SetValue<float>(value); } }
        public bool LimitRagdollSpeed { get { return this[nameof(LimitRagdollSpeed)].Flag; } set { this[nameof(LimitRagdollSpeed)].Flag = value; } }
        public float MaxRagdollSpeed { get { return this[nameof(MaxRagdollSpeed)].GetValue<float>(); } set { this[nameof(MaxRagdollSpeed)].SetValue<float>(value); } }
        public Actor LookAtTarget { get { return this[nameof(LookAtTarget)].As<Actor>(); } set { this["LookAtTarget"] = value; } }
        public void SetLookAtTarget(Actor Target) { Invoke(nameof(SetLookAtTarget), Target); }
        public void OnRep_LookAtTarget() { Invoke(nameof(OnRep_LookAtTarget)); }
        public StaticMeshComponent CreateHeadGore() { return Invoke<StaticMeshComponent>(nameof(CreateHeadGore)); }
        public void AlertNearbyEnemies() { Invoke(nameof(AlertNearbyEnemies)); }
    }
    public class SplineCableActor : Actor
    {
        public SplineCableActor(nint addr) : base(addr) { }
        public Object OnPathCompleted { get { return this[nameof(OnPathCompleted)]; } set { this[nameof(OnPathCompleted)] = value; } }
        public SplineComponent PathSplineComponent { get { return this[nameof(PathSplineComponent)].As<SplineComponent>(); } set { this["PathSplineComponent"] = value; } }
        public CablePathSettings PathSettings { get { return this[nameof(PathSettings)].As<CablePathSettings>(); } set { this["PathSettings"] = value; } }
        public Object CableMesh { get { return this[nameof(CableMesh)]; } set { this[nameof(CableMesh)] = value; } }
        public byte MeshForwardAxis { get { return this[nameof(MeshForwardAxis)].GetValue<byte>(); } set { this[nameof(MeshForwardAxis)].SetValue<byte>(value); } }
        public float CableThickness { get { return this[nameof(CableThickness)].GetValue<float>(); } set { this[nameof(CableThickness)].SetValue<float>(value); } }
        public int CarveRadius { get { return this[nameof(CarveRadius)].GetValue<int>(); } set { this[nameof(CarveRadius)].SetValue<int>(value); } }
        public float CarveSurfaceOffset { get { return this[nameof(CarveSurfaceOffset)].GetValue<float>(); } set { this[nameof(CarveSurfaceOffset)].SetValue<float>(value); } }
        public float MaxAllowedPathDistance { get { return this[nameof(MaxAllowedPathDistance)].GetValue<float>(); } set { this[nameof(MaxAllowedPathDistance)].SetValue<float>(value); } }
        public Object MaterialConnected { get { return this[nameof(MaterialConnected)]; } set { this[nameof(MaterialConnected)] = value; } }
        public Object MaterialUnconnected { get { return this[nameof(MaterialUnconnected)]; } set { this[nameof(MaterialUnconnected)] = value; } }
        public int MaterialIndex { get { return this[nameof(MaterialIndex)].GetValue<int>(); } set { this[nameof(MaterialIndex)].SetValue<int>(value); } }
        public StaticMesh CableMeshInstance { get { return this[nameof(CableMeshInstance)].As<StaticMesh>(); } set { this["CableMeshInstance"] = value; } }
        public Transform StartTransform { get { return this[nameof(StartTransform)].As<Transform>(); } set { this["StartTransform"] = value; } }
        public Transform EndTransform { get { return this[nameof(EndTransform)].As<Transform>(); } set { this["EndTransform"] = value; } }
        public UArray<Vector> ReplicatedPath { get { return new UArray<Vector>(this[nameof(ReplicatedPath)].Address); } }
        public bool bConnected { get { return this[nameof(bConnected)].Flag; } set { this[nameof(bConnected)].Flag = value; } }
        public bool ClearPointsWhenDone { get { return this[nameof(ClearPointsWhenDone)].Flag; } set { this[nameof(ClearPointsWhenDone)].Flag = value; } }
        public UArray<SplineMeshComponent> MeshComponents { get { return new UArray<SplineMeshComponent>(this[nameof(MeshComponents)].Address); } }
        public void SpawnBetweenTransforms(Transform InStart, Transform InEnd) { Invoke(nameof(SpawnBetweenTransforms), InStart, InEnd); }
        public void SetConnected(bool InConnected) { Invoke(nameof(SetConnected), InConnected); }
        public void ReceiveSegmentCreated(SplineMeshComponent InSegment, int InIndex, int InTotal) { Invoke(nameof(ReceiveSegmentCreated), InSegment, InIndex, InTotal); }
        public void ReceiveAllSegmentsCreated() { Invoke(nameof(ReceiveAllSegmentsCreated)); }
        public void OnUpdateMaterials() { Invoke(nameof(OnUpdateMaterials)); }
        public void OnRep_Path() { Invoke(nameof(OnRep_Path)); }
        public void OnRep_Connected() { Invoke(nameof(OnRep_Connected)); }
    }
    public class SplineDecoratorComponent : InstancedStaticMeshComponent
    {
        public SplineDecoratorComponent(nint addr) : base(addr) { }
        public float DistanceBetweenInstances { get { return this[nameof(DistanceBetweenInstances)].GetValue<float>(); } set { this[nameof(DistanceBetweenInstances)].SetValue<float>(value); } }
        public int StartIndex { get { return this[nameof(StartIndex)].GetValue<int>(); } set { this[nameof(StartIndex)].SetValue<int>(value); } }
        public int EndIndex { get { return this[nameof(EndIndex)].GetValue<int>(); } set { this[nameof(EndIndex)].SetValue<int>(value); } }
        public bool bUpdateContinuously { get { return this[nameof(bUpdateContinuously)].Flag; } set { this[nameof(bUpdateContinuously)].Flag = value; } }
        public Vector VerticalOffset { get { return this[nameof(VerticalOffset)].As<Vector>(); } set { this["VerticalOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public float DistanceProgress { get { return this[nameof(DistanceProgress)].GetValue<float>(); } set { this[nameof(DistanceProgress)].SetValue<float>(value); } }
        public SplineComponent SplineComponent { get { return this[nameof(SplineComponent)].As<SplineComponent>(); } set { this["SplineComponent"] = value; } }
        public UArray<Transform> NewInstancesTransforms { get { return new UArray<Transform>(this[nameof(NewInstancesTransforms)].Address); } }
        public float Phase { get { return this[nameof(Phase)].GetValue<float>(); } set { this[nameof(Phase)].SetValue<float>(value); } }
        public void Update(float DeltaTime) { Invoke(nameof(Update), DeltaTime); }
        public void SetUpdateContinuously(bool InContinuously) { Invoke(nameof(SetUpdateContinuously), InContinuously); }
        public void SetSplineComponentAndMaterial(SplineComponent InSplineComponent, int ElementIndex, MaterialInterface Material) { Invoke(nameof(SetSplineComponentAndMaterial), InSplineComponent, ElementIndex, Material); }
        public void SetSplineComponent(SplineComponent InSplineComponent) { Invoke(nameof(SetSplineComponent), InSplineComponent); }
    }
    public class SplineHookAttack : SpecialAttackComponent
    {
        public SplineHookAttack(nint addr) : base(addr) { }
        public SplineMeshComponent Spline { get { return this[nameof(Spline)].As<SplineMeshComponent>(); } set { this["Spline"] = value; } }
        public SkeletalMeshComponent HeadMesh { get { return this[nameof(HeadMesh)].As<SkeletalMeshComponent>(); } set { this["HeadMesh"] = value; } }
        public SkeletalMeshComponent TailMesh { get { return this[nameof(TailMesh)].As<SkeletalMeshComponent>(); } set { this["TailMesh"] = value; } }
        public HitReactionComponent HitReacts { get { return this[nameof(HitReacts)].As<HitReactionComponent>(); } set { this["HitReacts"] = value; } }
        public RuntimeFloatCurve MovementCurve { get { return this[nameof(MovementCurve)].As<RuntimeFloatCurve>(); } set { this["MovementCurve"] = value; } }
        public Object SyncedTarget { get { return this[nameof(SyncedTarget)]; } set { this[nameof(SyncedTarget)] = value; } }
        public Object TailSocket { get { return this[nameof(TailSocket)]; } set { this[nameof(TailSocket)] = value; } }
        public Object HeadSocket { get { return this[nameof(HeadSocket)]; } set { this[nameof(HeadSocket)] = value; } }
        public PointLightComponent GrabLight { get { return this[nameof(GrabLight)].As<PointLightComponent>(); } set { this["GrabLight"] = value; } }
        public SoundCue GrabbedIndicationSound { get { return this[nameof(GrabbedIndicationSound)].As<SoundCue>(); } set { this["GrabbedIndicationSound"] = value; } }
        public AnimMontage HeadAnimation { get { return this[nameof(HeadAnimation)].As<AnimMontage>(); } set { this["HeadAnimation"] = value; } }
        public DamageComponent Damage { get { return this[nameof(Damage)].As<DamageComponent>(); } set { this["Damage"] = value; } }
        public float ForwardPlacement { get { return this[nameof(ForwardPlacement)].GetValue<float>(); } set { this[nameof(ForwardPlacement)].SetValue<float>(value); } }
        public float DesiredLaunchAngle { get { return this[nameof(DesiredLaunchAngle)].GetValue<float>(); } set { this[nameof(DesiredLaunchAngle)].SetValue<float>(value); } }
        public float MaxAngledForce { get { return this[nameof(MaxAngledForce)].GetValue<float>(); } set { this[nameof(MaxAngledForce)].SetValue<float>(value); } }
        public float AdjustmentStartDistance { get { return this[nameof(AdjustmentStartDistance)].GetValue<float>(); } set { this[nameof(AdjustmentStartDistance)].SetValue<float>(value); } }
        public float AttackDuration { get { return this[nameof(AttackDuration)].GetValue<float>(); } set { this[nameof(AttackDuration)].SetValue<float>(value); } }
        public float MaxAngle { get { return this[nameof(MaxAngle)].GetValue<float>(); } set { this[nameof(MaxAngle)].SetValue<float>(value); } }
        public float AttackOnProgress { get { return this[nameof(AttackOnProgress)].GetValue<float>(); } set { this[nameof(AttackOnProgress)].SetValue<float>(value); } }
        public float AttackDelay { get { return this[nameof(AttackDelay)].GetValue<float>(); } set { this[nameof(AttackDelay)].SetValue<float>(value); } }
        public float LeadMultiplier { get { return this[nameof(LeadMultiplier)].GetValue<float>(); } set { this[nameof(LeadMultiplier)].SetValue<float>(value); } }
        public float AquireLocationTime { get { return this[nameof(AquireLocationTime)].GetValue<float>(); } set { this[nameof(AquireLocationTime)].SetValue<float>(value); } }
        public float OnSuccessCooldown { get { return this[nameof(OnSuccessCooldown)].GetValue<float>(); } set { this[nameof(OnSuccessCooldown)].SetValue<float>(value); } }
        public bool ShowGrabArea { get { return this[nameof(ShowGrabArea)].Flag; } set { this[nameof(ShowGrabArea)].Flag = value; } }
        public bool Lead { get { return this[nameof(Lead)].Flag; } set { this[nameof(Lead)].Flag = value; } }
        public bool Using { get { return this[nameof(Using)].Flag; } set { this[nameof(Using)].Flag = value; } }
        public void SetTailLight(PointLightComponent Light) { Invoke(nameof(SetTailLight), Light); }
        public void OnRep_Using() { Invoke(nameof(OnRep_Using)); }
        public void OnDamagedTarget(HealthComponentBase Health, float amount, PrimitiveComponent Component, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnDamagedTarget), Health, amount, Component, PhysicalMaterial); }
        public Vector GetTargetLocation() { return Invoke<Vector>(nameof(GetTargetLocation)); }
        public Vector GetTargetDirection() { return Invoke<Vector>(nameof(GetTargetDirection)); }
        public bool GetHasAquiredTarget() { return Invoke<bool>(nameof(GetHasAquiredTarget)); }
        public void ClearSuccessCooldown() { Invoke(nameof(ClearSuccessCooldown)); }
    }
    public class SplinePlant : Actor
    {
        public SplinePlant(nint addr) : base(addr) { }
        public SplineComponent PlantSpline { get { return this[nameof(PlantSpline)].As<SplineComponent>(); } set { this["PlantSpline"] = value; } }
        public SceneComponent PlantEndPoint { get { return this[nameof(PlantEndPoint)].As<SceneComponent>(); } set { this["PlantEndPoint"] = value; } }
        public AudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponent>(); } set { this["AudioComponent"] = value; } }
        public Object CueExtending { get { return this[nameof(CueExtending)]; } set { this[nameof(CueExtending)] = value; } }
        public Object CueRetracting { get { return this[nameof(CueRetracting)]; } set { this[nameof(CueRetracting)] = value; } }
        public SoundCue AudioExtending { get { return this[nameof(AudioExtending)].As<SoundCue>(); } set { this["AudioExtending"] = value; } }
        public SoundCue AudioRetracting { get { return this[nameof(AudioRetracting)].As<SoundCue>(); } set { this["AudioRetracting"] = value; } }
        public bool bEnabledSegmentCollision { get { return this[nameof(bEnabledSegmentCollision)].Flag; } set { this[nameof(bEnabledSegmentCollision)].Flag = value; } }
        public float CarveRadius { get { return this[nameof(CarveRadius)].GetValue<float>(); } set { this[nameof(CarveRadius)].SetValue<float>(value); } }
        public Object SegmentMeshPtr { get { return this[nameof(SegmentMeshPtr)]; } set { this[nameof(SegmentMeshPtr)] = value; } }
        public byte SegmentForwardAxis { get { return this[nameof(SegmentForwardAxis)].GetValue<byte>(); } set { this[nameof(SegmentForwardAxis)].SetValue<byte>(value); } }
        public float SegmentLength { get { return this[nameof(SegmentLength)].GetValue<float>(); } set { this[nameof(SegmentLength)].SetValue<float>(value); } }
        public RuntimeFloatCurve SegmentWidthCurve { get { return this[nameof(SegmentWidthCurve)].As<RuntimeFloatCurve>(); } set { this["SegmentWidthCurve"] = value; } }
        public float SegmentWidthScale { get { return this[nameof(SegmentWidthScale)].GetValue<float>(); } set { this[nameof(SegmentWidthScale)].SetValue<float>(value); } }
        public RuntimeFloatCurve SegmentHeightCurve { get { return this[nameof(SegmentHeightCurve)].As<RuntimeFloatCurve>(); } set { this["SegmentHeightCurve"] = value; } }
        public float SegmentHeightScale { get { return this[nameof(SegmentHeightScale)].GetValue<float>(); } set { this[nameof(SegmentHeightScale)].SetValue<float>(value); } }
        public float PreviewLengthPercent { get { return this[nameof(PreviewLengthPercent)].GetValue<float>(); } set { this[nameof(PreviewLengthPercent)].SetValue<float>(value); } }
        public int PreviewSeed { get { return this[nameof(PreviewSeed)].GetValue<int>(); } set { this[nameof(PreviewSeed)].SetValue<int>(value); } }
        public UArray<SplineMeshComponent> SegmentMeshCache { get { return new UArray<SplineMeshComponent>(this[nameof(SegmentMeshCache)].Address); } }
        public UArray<SplineMeshComponent> CollisionMeshCache { get { return new UArray<SplineMeshComponent>(this[nameof(CollisionMeshCache)].Address); } }
        public SplineComponent SplineInstance { get { return this[nameof(SplineInstance)].As<SplineComponent>(); } set { this["SplineInstance"] = value; } }
        public StaticMesh SegmentMesh { get { return this[nameof(SegmentMesh)].As<StaticMesh>(); } set { this["SegmentMesh"] = value; } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public void SetTargetPlantLengthPercent(float InTargetPercent, float InPercentPerSecond, float InEaseExp) { Invoke(nameof(SetTargetPlantLengthPercent), InTargetPercent, InPercentPerSecond, InEaseExp); }
        public void SetTargetPlantLength(float InTargetLength, float InDistancePerSecond, float InEaseExp) { Invoke(nameof(SetTargetPlantLength), InTargetLength, InDistancePerSecond, InEaseExp); }
        public void SetPlantLengthPercent(float InPercent) { Invoke(nameof(SetPlantLengthPercent), InPercent); }
        public void ResetSpline() { Invoke(nameof(ResetSpline)); }
        public void ResetScale() { Invoke(nameof(ResetScale)); }
        public void ReceivePrepareSpline(SplineComponent InSplineComponent, int InSeed) { Invoke(nameof(ReceivePrepareSpline), InSplineComponent, InSeed); }
        public void ReceiveMovementUpdated(float InDistanceProgress) { Invoke(nameof(ReceiveMovementUpdated), InDistanceProgress); }
        public void ReceiveMovementStarted(float InTargetDistance) { Invoke(nameof(ReceiveMovementStarted), InTargetDistance); }
        public void ReceiveMovementFinished(float InDistanceProgress) { Invoke(nameof(ReceiveMovementFinished), InDistanceProgress); }
        public float GetPlantTargetLengthPercent() { return Invoke<float>(nameof(GetPlantTargetLengthPercent)); }
        public float GetPlantLengthPercent() { return Invoke<float>(nameof(GetPlantLengthPercent)); }
        public Transform GetNearestLocationToLocalPlayer() { return Invoke<Transform>(nameof(GetNearestLocationToLocalPlayer)); }
        public float GetFullPlantLength() { return Invoke<float>(nameof(GetFullPlantLength)); }
    }
    public class SplineTrailComponent : SceneComponent
    {
        public SplineTrailComponent(nint addr) : base(addr) { }
        public Object StaticMesh { get { return this[nameof(StaticMesh)]; } set { this[nameof(StaticMesh)] = value; } }
        public UArray<SplineTrailMaterial> MaterialSettings { get { return new UArray<SplineTrailMaterial>(this[nameof(MaterialSettings)].Address); } }
        public byte ForwardAxis { get { return this[nameof(ForwardAxis)].GetValue<byte>(); } set { this[nameof(ForwardAxis)].SetValue<byte>(value); } }
        public Object CollisionMaterial { get { return this[nameof(CollisionMaterial)]; } set { this[nameof(CollisionMaterial)] = value; } }
        public float CollisionCapsuleRadius { get { return this[nameof(CollisionCapsuleRadius)].GetValue<float>(); } set { this[nameof(CollisionCapsuleRadius)].SetValue<float>(value); } }
        public float TrailLength { get { return this[nameof(TrailLength)].GetValue<float>(); } set { this[nameof(TrailLength)].SetValue<float>(value); } }
        public int TrailSubSegments { get { return this[nameof(TrailSubSegments)].GetValue<int>(); } set { this[nameof(TrailSubSegments)].SetValue<int>(value); } }
        public float TrailSegmentOverlap { get { return this[nameof(TrailSegmentOverlap)].GetValue<float>(); } set { this[nameof(TrailSegmentOverlap)].SetValue<float>(value); } }
        public Vector2D Scale { get { return this[nameof(Scale)].As<Vector2D>(); } set { this["Scale"] = value; } }
        public float VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<float>(); } set { this[nameof(VerticalOffset)].SetValue<float>(value); } }
        public float HeadBobbingLength { get { return this[nameof(HeadBobbingLength)].GetValue<float>(); } set { this[nameof(HeadBobbingLength)].SetValue<float>(value); } }
        public float HeadBobbingSpeed { get { return this[nameof(HeadBobbingSpeed)].GetValue<float>(); } set { this[nameof(HeadBobbingSpeed)].SetValue<float>(value); } }
        public RuntimeFloatCurve ScaleCurve { get { return this[nameof(ScaleCurve)].As<RuntimeFloatCurve>(); } set { this["ScaleCurve"] = value; } }
        public UArray<CapsuleComponent> CapsuleColliders { get { return new UArray<CapsuleComponent>(this[nameof(CapsuleColliders)].Address); } }
        public SplineComponent Spline { get { return this[nameof(Spline)].As<SplineComponent>(); } set { this["Spline"] = value; } }
        public UArray<SplineMeshComponent> MeshComponents { get { return new UArray<SplineMeshComponent>(this[nameof(MeshComponents)].Address); } }
        public UArray<Vector> LocationHistory { get { return new UArray<Vector>(this[nameof(LocationHistory)].Address); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
    }
    public class StabberVineRoot : EnemyPawn
    {
        public StabberVineRoot(nint addr) : base(addr) { }
        public void RemoveVine(StabberVine vine) { Invoke(nameof(RemoveVine), vine); }
    }
    public class StabberVine : TentacleBase
    {
        public StabberVine(nint addr) : base(addr) { }
        public TentacleTarget DesiredTarget { get { return this[nameof(DesiredTarget)].As<TentacleTarget>(); } set { this["DesiredTarget"] = value; } }
        public void OnRep_DesiredTarget() { Invoke(nameof(OnRep_DesiredTarget)); }
    }
    public class StatHat : GameInstanceSubsystem
    {
        public StatHat(nint addr) : base(addr) { }
        public void AddStatValue(Object Key, float Value) { Invoke(nameof(AddStatValue), Key, Value); }
        public void AddStatCount(Object Key, int Count) { Invoke(nameof(AddStatCount), Key, Count); }
    }
    public class StatusAddedComponent : Interface
    {
        public StatusAddedComponent(nint addr) : base(addr) { }
        public void InitializeEffect(StatusEffect Effect, Actor EffectOwner) { Invoke(nameof(InitializeEffect), Effect, EffectOwner); }
    }
    public class StatusEffectEnemies : RunningMissionBP
    {
        public StatusEffectEnemies(nint addr) : base(addr) { }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
        public GameplayTagContainer AllowedFilter { get { return this[nameof(AllowedFilter)].As<GameplayTagContainer>(); } set { this["AllowedFilter"] = value; } }
        public GameplayTagQuery AllowedQuery { get { return this[nameof(AllowedQuery)].As<GameplayTagQuery>(); } set { this["AllowedQuery"] = value; } }
        public float ChanceToApply { get { return this[nameof(ChanceToApply)].GetValue<float>(); } set { this[nameof(ChanceToApply)].SetValue<float>(value); } }
        public bool OverrideReplacesDefault { get { return this[nameof(OverrideReplacesDefault)].Flag; } set { this[nameof(OverrideReplacesDefault)].Flag = value; } }
        public Object Overrides { get { return this[nameof(Overrides)]; } set { this[nameof(Overrides)] = value; } }
        public void OnEnemySpawned(Pawn enemy, EnemyDescriptor descriptor) { Invoke(nameof(OnEnemySpawned), enemy, descriptor); }
    }
    public class StatusEffectExclusiveKey : DataAsset
    {
        public StatusEffectExclusiveKey(nint addr) : base(addr) { }
    }
    public class StatusEffect : Object
    {
        public StatusEffect(nint addr) : base(addr) { }
        public PawnAffliction PawnAffliction { get { return this[nameof(PawnAffliction)].As<PawnAffliction>(); } set { this["PawnAffliction"] = value; } }
        public UArray<StatusEffectItem> StatusEffects { get { return new UArray<StatusEffectItem>(this[nameof(StatusEffects)].Address); } }
        public float MaxResistance { get { return this[nameof(MaxResistance)].GetValue<float>(); } set { this[nameof(MaxResistance)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public StatusEffectExclusiveKey ExclusiveKey { get { return this[nameof(ExclusiveKey)].As<StatusEffectExclusiveKey>(); } set { this["ExclusiveKey"] = value; } }
        public bool TriggerTwiceOnPush { get { return this[nameof(TriggerTwiceOnPush)].Flag; } set { this[nameof(TriggerTwiceOnPush)].Flag = value; } }
        public RandRange ApplyEffectsInterval { get { return this[nameof(ApplyEffectsInterval)].As<RandRange>(); } set { this["ApplyEffectsInterval"] = value; } }
        public bool CanStack { get { return this[nameof(CanStack)].Flag; } set { this[nameof(CanStack)].Flag = value; } }
        public int MaxStack { get { return this[nameof(MaxStack)].GetValue<int>(); } set { this[nameof(MaxStack)].SetValue<int>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public bool ApplyDurationAfterPop { get { return this[nameof(ApplyDurationAfterPop)].Flag; } set { this[nameof(ApplyDurationAfterPop)].Flag = value; } }
        public bool RemoveOnDeath { get { return this[nameof(RemoveOnDeath)].Flag; } set { this[nameof(RemoveOnDeath)].Flag = value; } }
        public bool RemoveOnTemperatureStateChange { get { return this[nameof(RemoveOnTemperatureStateChange)].Flag; } set { this[nameof(RemoveOnTemperatureStateChange)].Flag = value; } }
        public bool AllowExternalSread { get { return this[nameof(AllowExternalSread)].Flag; } set { this[nameof(AllowExternalSread)].Flag = value; } }
        public bool RefreshDurationOnApplication { get { return this[nameof(RefreshDurationOnApplication)].Flag; } set { this[nameof(RefreshDurationOnApplication)].Flag = value; } }
        public GameplayTagQuery GameplayTagQuery { get { return this[nameof(GameplayTagQuery)].As<GameplayTagQuery>(); } set { this["GameplayTagQuery"] = value; } }
        public GameplayTagContainer ExcludeTargetsWithTags { get { return this[nameof(ExcludeTargetsWithTags)].As<GameplayTagContainer>(); } set { this["ExcludeTargetsWithTags"] = value; } }
        public GameplayTagContainer TargetRequiredTags { get { return this[nameof(TargetRequiredTags)].As<GameplayTagContainer>(); } set { this["TargetRequiredTags"] = value; } }
        public bool ShouldInstantiate() { return Invoke<bool>(nameof(ShouldInstantiate)); }
        public float GetStatusEffectDuration(Object StatusEffect) { return Invoke<float>(nameof(GetStatusEffectDuration), StatusEffect); }
        public bool CanTrigger(Actor Target) { return Invoke<bool>(nameof(CanTrigger), Target); }
    }
    public class StatusEffectItem : Object
    {
        public StatusEffectItem(nint addr) : base(addr) { }
    }
    public class DotStatusEffectItem : StatusEffectItem
    {
        public DotStatusEffectItem(nint addr) : base(addr) { }
        public RandRange damageAmount { get { return this[nameof(damageAmount)].As<RandRange>(); } set { this["damageAmount"] = value; } }
        public bool OverrideDamageImpulse { get { return this[nameof(OverrideDamageImpulse)].Flag; } set { this[nameof(OverrideDamageImpulse)].Flag = value; } }
        public DamageImpulse DamageImpulseOverride { get { return this[nameof(DamageImpulseOverride)].As<DamageImpulse>(); } set { this["DamageImpulseOverride"] = value; } }
    }
    public class DotEnemyArmorStatusEffectItem : StatusEffectItem
    {
        public DotEnemyArmorStatusEffectItem(nint addr) : base(addr) { }
        public RandRange damageAmount { get { return this[nameof(damageAmount)].As<RandRange>(); } set { this["damageAmount"] = value; } }
    }
    public class PlayerArmorStatusEffectItem : StatusEffectItem
    {
        public PlayerArmorStatusEffectItem(nint addr) : base(addr) { }
        public RandRange ChangeAmount { get { return this[nameof(ChangeAmount)].As<RandRange>(); } set { this["ChangeAmount"] = value; } }
    }
    public class HealingStatusEffectItem : StatusEffectItem
    {
        public HealingStatusEffectItem(nint addr) : base(addr) { }
        public bool HealPercentage { get { return this[nameof(HealPercentage)].Flag; } set { this[nameof(HealPercentage)].Flag = value; } }
        public float NoDamageTimeRequired { get { return this[nameof(NoDamageTimeRequired)].GetValue<float>(); } set { this[nameof(NoDamageTimeRequired)].SetValue<float>(value); } }
        public PawnAffliction PawnAffliction { get { return this[nameof(PawnAffliction)].As<PawnAffliction>(); } set { this["PawnAffliction"] = value; } }
        public RandRange amount { get { return this[nameof(amount)].As<RandRange>(); } set { this["amount"] = value; } }
        public bool IgnoreCanTakeDamage { get { return this[nameof(IgnoreCanTakeDamage)].Flag; } set { this[nameof(IgnoreCanTakeDamage)].Flag = value; } }
    }
    public class StatChangeStatusEffectItem : StatusEffectItem
    {
        public StatChangeStatusEffectItem(nint addr) : base(addr) { }
        public PawnStat Stat { get { return this[nameof(Stat)].As<PawnStat>(); } set { this["Stat"] = value; } }
        public float StatChange { get { return this[nameof(StatChange)].GetValue<float>(); } set { this[nameof(StatChange)].SetValue<float>(value); } }
        public bool AffectedByResistances { get { return this[nameof(AffectedByResistances)].Flag; } set { this[nameof(AffectedByResistances)].Flag = value; } }
    }
    public class TemperatureStatusEffectItem : StatusEffectItem
    {
        public TemperatureStatusEffectItem(nint addr) : base(addr) { }
        public RandRange TemperatureChangeAmount { get { return this[nameof(TemperatureChangeAmount)].As<RandRange>(); } set { this["TemperatureChangeAmount"] = value; } }
    }
    public class InfectionStatusEffectItem : StatusEffectItem
    {
        public InfectionStatusEffectItem(nint addr) : base(addr) { }
        public RandRange InfectionChangeAmount { get { return this[nameof(InfectionChangeAmount)].As<RandRange>(); } set { this["InfectionChangeAmount"] = value; } }
    }
    public class HeatSourceStatusEffectItem : StatusEffectItem
    {
        public HeatSourceStatusEffectItem(nint addr) : base(addr) { }
        public float temperature { get { return this[nameof(temperature)].GetValue<float>(); } set { this[nameof(temperature)].SetValue<float>(value); } }
        public ETemperatureIntensity Intensity { get { return (ETemperatureIntensity)this[nameof(Intensity)].GetValue<int>(); } set { this[nameof(Intensity)].SetValue<int>((int)value); } }
    }
    public class PheromoneStatusEffectItem : StatusEffectItem
    {
        public PheromoneStatusEffectItem(nint addr) : base(addr) { }
    }
    public class MakeAttackableStatusEffectItem : StatusEffectItem
    {
        public MakeAttackableStatusEffectItem(nint addr) : base(addr) { }
        public float AttackCostModifier { get { return this[nameof(AttackCostModifier)].GetValue<float>(); } set { this[nameof(AttackCostModifier)].SetValue<float>(value); } }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
    }
    public class FSDPawnStatusEffectItem : StatusEffectItem
    {
        public FSDPawnStatusEffectItem(nint addr) : base(addr) { }
        public float StaggerDurationMultiplier { get { return this[nameof(StaggerDurationMultiplier)].GetValue<float>(); } set { this[nameof(StaggerDurationMultiplier)].SetValue<float>(value); } }
        public float AttackSpeedModifier { get { return this[nameof(AttackSpeedModifier)].GetValue<float>(); } set { this[nameof(AttackSpeedModifier)].SetValue<float>(value); } }
    }
    public class ReplenishOxygenStatusEffectItem : StatusEffectItem
    {
        public ReplenishOxygenStatusEffectItem(nint addr) : base(addr) { }
    }
    public class EnemyTemperatureStatusEffectItem : StatusEffectItem
    {
        public EnemyTemperatureStatusEffectItem(nint addr) : base(addr) { }
        public float WarmingRate { get { return this[nameof(WarmingRate)].GetValue<float>(); } set { this[nameof(WarmingRate)].SetValue<float>(value); } }
        public float UnFreezeTemperature { get { return this[nameof(UnFreezeTemperature)].GetValue<float>(); } set { this[nameof(UnFreezeTemperature)].SetValue<float>(value); } }
        public float TemperatureChangeScaleModifier { get { return this[nameof(TemperatureChangeScaleModifier)].GetValue<float>(); } set { this[nameof(TemperatureChangeScaleModifier)].SetValue<float>(value); } }
    }
    public class EnemyTemperatureStatusEffectModifierItem : StatusEffectItem
    {
        public EnemyTemperatureStatusEffectModifierItem(nint addr) : base(addr) { }
        public float BurnTemperatureModifier { get { return this[nameof(BurnTemperatureModifier)].GetValue<float>(); } set { this[nameof(BurnTemperatureModifier)].SetValue<float>(value); } }
        public float DouseFireTemperatureModifier { get { return this[nameof(DouseFireTemperatureModifier)].GetValue<float>(); } set { this[nameof(DouseFireTemperatureModifier)].SetValue<float>(value); } }
        public float FreezeTemperatureModifier { get { return this[nameof(FreezeTemperatureModifier)].GetValue<float>(); } set { this[nameof(FreezeTemperatureModifier)].SetValue<float>(value); } }
        public float UnFreezeTemperatureModifier { get { return this[nameof(UnFreezeTemperatureModifier)].GetValue<float>(); } set { this[nameof(UnFreezeTemperatureModifier)].SetValue<float>(value); } }
    }
    public class EnemyDetonationStatusEffectItem : StatusEffectItem
    {
        public EnemyDetonationStatusEffectItem(nint addr) : base(addr) { }
        public bool FireDetonation { get { return this[nameof(FireDetonation)].Flag; } set { this[nameof(FireDetonation)].Flag = value; } }
        public bool IceDetonation { get { return this[nameof(IceDetonation)].Flag; } set { this[nameof(IceDetonation)].Flag = value; } }
    }
    public class ShoutStatusEffectItem : StatusEffectItem
    {
        public ShoutStatusEffectItem(nint addr) : base(addr) { }
        public DialogDataAsset BeginShout { get { return this[nameof(BeginShout)].As<DialogDataAsset>(); } set { this["BeginShout"] = value; } }
    }
    public class AddComponentStatusEffectItem : StatusEffectItem
    {
        public AddComponentStatusEffectItem(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
        public Object AddedComponent { get { return this[nameof(AddedComponent)]; } set { this[nameof(AddedComponent)] = value; } }
    }
    public class StatChangeStackedStatusEffectItem : StatusEffectItem
    {
        public StatChangeStackedStatusEffectItem(nint addr) : base(addr) { }
        public PawnStat Stat { get { return this[nameof(Stat)].As<PawnStat>(); } set { this["Stat"] = value; } }
        public float StatChange { get { return this[nameof(StatChange)].GetValue<float>(); } set { this[nameof(StatChange)].SetValue<float>(value); } }
        public bool AffectedByResistances { get { return this[nameof(AffectedByResistances)].Flag; } set { this[nameof(AffectedByResistances)].Flag = value; } }
    }
    public class StatusEffectMissionBP : RunningMissionBP
    {
        public StatusEffectMissionBP(nint addr) : base(addr) { }
        public GameplayTagQuery EnemyQuery { get { return this[nameof(EnemyQuery)].As<GameplayTagQuery>(); } set { this["EnemyQuery"] = value; } }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public void OnEnemySpawned(Pawn Pawn, EnemyDescriptor descriptor) { Invoke(nameof(OnEnemySpawned), Pawn, descriptor); }
    }
    public class StatusEffectsComponent : ActorComponent
    {
        public StatusEffectsComponent(nint addr) : base(addr) { }
        public UArray<ActiveStatusEffectBank> ActiveStatusEffects { get { return new UArray<ActiveStatusEffectBank>(this[nameof(ActiveStatusEffects)].Address); } }
        public HealthComponentBase OwnerHealth { get { return this[nameof(OwnerHealth)].As<HealthComponentBase>(); } set { this["OwnerHealth"] = value; } }
        public Object ActiveExclusiveKeys { get { return this[nameof(ActiveExclusiveKeys)]; } set { this[nameof(ActiveExclusiveKeys)] = value; } }
        public bool IgnoreAll { get { return this[nameof(IgnoreAll)].Flag; } set { this[nameof(IgnoreAll)].Flag = value; } }
        public bool TryPushActiveStatusEffect(Object StatusEffect, Actor Target, Actor Owner) { return Invoke<bool>(nameof(TryPushActiveStatusEffect), StatusEffect, Target, Owner); }
        public bool TryPopActiveStatusEffect(Object StatusEffect, Actor Target, Actor Owner) { return Invoke<bool>(nameof(TryPopActiveStatusEffect), StatusEffect, Target, Owner); }
        public bool PushActiveStatusEffectInstance(StatusEffect StatusEffect, Actor Owner) { return Invoke<bool>(nameof(PushActiveStatusEffectInstance), StatusEffect, Owner); }
        public bool PushActiveStatusEffect(Object StatusEffect, Actor Owner) { return Invoke<bool>(nameof(PushActiveStatusEffect), StatusEffect, Owner); }
        public void PopAllActiveStatusEffectsOfType(Object StatusEffect, Actor Owner) { Invoke(nameof(PopAllActiveStatusEffectsOfType), StatusEffect, Owner); }
        public void PopAllActiveStatusEffects(Actor Owner) { Invoke(nameof(PopAllActiveStatusEffects), Owner); }
        public bool PopActiveStatusEffectInstance(StatusEffect StatusEffect, Actor Owner) { return Invoke<bool>(nameof(PopActiveStatusEffectInstance), StatusEffect, Owner); }
        public bool PopActiveStatusEffect(Object StatusEffect, Actor Owner) { return Invoke<bool>(nameof(PopActiveStatusEffect), StatusEffect, Owner); }
        public void OnDeath(HealthComponentBase HealthComponent) { Invoke(nameof(OnDeath), HealthComponent); }
        public bool HasActiveEffect(Object StatusEffect) { return Invoke<bool>(nameof(HasActiveEffect), StatusEffect); }
        public int GetStackAmount(Object StatusEffect, Actor Owner) { return Invoke<int>(nameof(GetStackAmount), StatusEffect, Owner); }
        public int GetFullStackAmount(Object StatusEffect) { return Invoke<int>(nameof(GetFullStackAmount), StatusEffect); }
        public StatusEffect CreateStatusEffectInstance(Object StatusEffect, Object Owner) { return Invoke<StatusEffect>(nameof(CreateStatusEffectInstance), StatusEffect, Owner); }
    }
    public class StatusEffectSettings : DataAsset
    {
        public StatusEffectSettings(nint addr) : base(addr) { }
        public Object EnemyOnFire { get { return this[nameof(EnemyOnFire)]; } set { this[nameof(EnemyOnFire)] = value; } }
        public Object frozen { get { return this[nameof(frozen)]; } set { this[nameof(frozen)] = value; } }
    }
    public class StatusEffectsFunctionLibrary : BlueprintFunctionLibrary
    {
        public StatusEffectsFunctionLibrary(nint addr) : base(addr) { }
        public float GetMaxResistance(Object StatusEffect) { return Invoke<float>(nameof(GetMaxResistance), StatusEffect); }
        public DamageClass GetDamageClass(Object StatusEffect) { return Invoke<DamageClass>(nameof(GetDamageClass), StatusEffect); }
        public bool CanTrigger(Object StatusEffect, Actor OtherActor) { return Invoke<bool>(nameof(CanTrigger), StatusEffect, OtherActor); }
    }
    public class StatusEffectTriggerComponent : ActorComponent
    {
        public StatusEffectTriggerComponent(nint addr) : base(addr) { }
        public Object OnEffectTriggered { get { return this[nameof(OnEffectTriggered)]; } set { this[nameof(OnEffectTriggered)] = value; } }
        public Object OnActorEnterLeave { get { return this[nameof(OnActorEnterLeave)]; } set { this[nameof(OnActorEnterLeave)] = value; } }
        public UArray<Object> StatusEffects { get { return new UArray<Object>(this[nameof(StatusEffects)].Address); } }
        public UArray<Object> LeaveTriggerEffects { get { return new UArray<Object>(this[nameof(LeaveTriggerEffects)].Address); } }
        public PrimitiveComponent collider { get { return this[nameof(collider)].As<PrimitiveComponent>(); } set { this["collider"] = value; } }
        public bool RemoveStatusEffectOnEndOverlap { get { return this[nameof(RemoveStatusEffectOnEndOverlap)].Flag; } set { this[nameof(RemoveStatusEffectOnEndOverlap)].Flag = value; } }
        public void OnOverlapEnd(Actor MyActor, Actor OtherActor) { Invoke(nameof(OnOverlapEnd), MyActor, OtherActor); }
        public void OnOverlapBegin(Actor MyActor, Actor OtherActor) { Invoke(nameof(OnOverlapBegin), MyActor, OtherActor); }
        public void OnComponentOverlapEnd(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnComponentOverlapEnd), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnComponentOverlapBegin(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnComponentOverlapBegin), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void AddActorToIgnoreList(Actor Actor) { Invoke(nameof(AddActorToIgnoreList), Actor); }
    }
    public class StayAwayFromWallsComponent : SceneComponent
    {
        public StayAwayFromWallsComponent(nint addr) : base(addr) { }
        public FSDGameState GameState { get { return this[nameof(GameState)].As<FSDGameState>(); } set { this["GameState"] = value; } }
        public float MaxSpeed { get { return this[nameof(MaxSpeed)].GetValue<float>(); } set { this[nameof(MaxSpeed)].SetValue<float>(value); } }
        public float Acceleration { get { return this[nameof(Acceleration)].GetValue<float>(); } set { this[nameof(Acceleration)].SetValue<float>(value); } }
        public float BackAcceleration { get { return this[nameof(BackAcceleration)].GetValue<float>(); } set { this[nameof(BackAcceleration)].SetValue<float>(value); } }
        public float PointOffset { get { return this[nameof(PointOffset)].GetValue<float>(); } set { this[nameof(PointOffset)].SetValue<float>(value); } }
        public float AvoidSpeed { get { return this[nameof(AvoidSpeed)].GetValue<float>(); } set { this[nameof(AvoidSpeed)].SetValue<float>(value); } }
        public float GoBackSpeed { get { return this[nameof(GoBackSpeed)].GetValue<float>(); } set { this[nameof(GoBackSpeed)].SetValue<float>(value); } }
        public bool Active { get { return this[nameof(Active)].Flag; } set { this[nameof(Active)].Flag = value; } }
        public void SetIsActive(bool IsActive) { Invoke(nameof(SetIsActive), IsActive); }
    }
    public class Steerable : Interface
    {
        public Steerable(nint addr) : base(addr) { }
    }
    public class StickyFlame : Actor
    {
        public StickyFlame(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public ParticleSystemComponent FlameParticles { get { return this[nameof(FlameParticles)].As<ParticleSystemComponent>(); } set { this["FlameParticles"] = value; } }
        public AudioComponent Audio { get { return this[nameof(Audio)].As<AudioComponent>(); } set { this["Audio"] = value; } }
        public StatusEffectTriggerComponent StatusTriggerComponent { get { return this[nameof(StatusTriggerComponent)].As<StatusEffectTriggerComponent>(); } set { this["StatusTriggerComponent"] = value; } }
        public DecalData Decal { get { return this[nameof(Decal)].As<DecalData>(); } set { this["Decal"] = value; } }
        public float FlameLifetime { get { return this[nameof(FlameLifetime)].GetValue<float>(); } set { this[nameof(FlameLifetime)].SetValue<float>(value); } }
        public float FlameExtinguishTime { get { return this[nameof(FlameExtinguishTime)].GetValue<float>(); } set { this[nameof(FlameExtinguishTime)].SetValue<float>(value); } }
        public Vector2D RandomTimeRangeFactor { get { return this[nameof(RandomTimeRangeFactor)].As<Vector2D>(); } set { this["RandomTimeRangeFactor"] = value; } }
        public float AudioFadeOutTime { get { return this[nameof(AudioFadeOutTime)].GetValue<float>(); } set { this[nameof(AudioFadeOutTime)].SetValue<float>(value); } }
        public bool IsActive { get { return this[nameof(IsActive)].Flag; } set { this[nameof(IsActive)].Flag = value; } }
        public void OnRep_IsActive() { Invoke(nameof(OnRep_IsActive)); }
        public void OnExtinguisFlame() { Invoke(nameof(OnExtinguisFlame)); }
    }
    public class StickyFlameSpawner : ActorComponent
    {
        public StickyFlameSpawner(nint addr) : base(addr) { }
        public Object OnStickyFlameSpawned { get { return this[nameof(OnStickyFlameSpawned)]; } set { this[nameof(OnStickyFlameSpawned)] = value; } }
        public Object StickyFlameActor { get { return this[nameof(StickyFlameActor)]; } set { this[nameof(StickyFlameActor)] = value; } }
        public float FlameLifetime { get { return this[nameof(FlameLifetime)].GetValue<float>(); } set { this[nameof(FlameLifetime)].SetValue<float>(value); } }
        public float StickyFlameIntervals { get { return this[nameof(StickyFlameIntervals)].GetValue<float>(); } set { this[nameof(StickyFlameIntervals)].SetValue<float>(value); } }
        public float StickyMaxSpawnPerSecond { get { return this[nameof(StickyMaxSpawnPerSecond)].GetValue<float>(); } set { this[nameof(StickyMaxSpawnPerSecond)].SetValue<float>(value); } }
        public float StickyFlameMinDistance { get { return this[nameof(StickyFlameMinDistance)].GetValue<float>(); } set { this[nameof(StickyFlameMinDistance)].SetValue<float>(value); } }
        public float StickyFlameLastTime { get { return this[nameof(StickyFlameLastTime)].GetValue<float>(); } set { this[nameof(StickyFlameLastTime)].SetValue<float>(value); } }
        public Vector StickyFlameLastLocation { get { return this[nameof(StickyFlameLastLocation)].As<Vector>(); } set { this["StickyFlameLastLocation"] = value; } }
        public bool TrySpawnStickyFlameHit(HitResult Hit) { return Invoke<bool>(nameof(TrySpawnStickyFlameHit), Hit); }
        public bool TrySpawnStickyFlame(Vector Location, Vector Normal) { return Invoke<bool>(nameof(TrySpawnStickyFlame), Location, Normal); }
        public void StickyFlameSignature__DelegateSignature(StickyFlame StickyFlame) { Invoke(nameof(StickyFlameSignature__DelegateSignature), StickyFlame); }
        public void ServerSpawnStickyFlame(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal) { Invoke(nameof(ServerSpawnStickyFlame), Location, Normal); }
    }
    public class StickyIce : StickyFlame
    {
        public StickyIce(nint addr) : base(addr) { }
        public SceneComponent VisualRoot { get { return this[nameof(VisualRoot)].As<SceneComponent>(); } set { this["VisualRoot"] = value; } }
        public SimpleHealthComponent Health { get { return this[nameof(Health)].As<SimpleHealthComponent>(); } set { this["Health"] = value; } }
        public float MaxIntegrity { get { return this[nameof(MaxIntegrity)].GetValue<float>(); } set { this[nameof(MaxIntegrity)].SetValue<float>(value); } }
        public float HeatDamageModifier { get { return this[nameof(HeatDamageModifier)].GetValue<float>(); } set { this[nameof(HeatDamageModifier)].SetValue<float>(value); } }
        public float IntegrityLossOnSTETrigger { get { return this[nameof(IntegrityLossOnSTETrigger)].GetValue<float>(); } set { this[nameof(IntegrityLossOnSTETrigger)].SetValue<float>(value); } }
        public float Integrity { get { return this[nameof(Integrity)].GetValue<float>(); } set { this[nameof(Integrity)].SetValue<float>(value); } }
        public float IntegrityModifier { get { return this[nameof(IntegrityModifier)].GetValue<float>(); } set { this[nameof(IntegrityModifier)].SetValue<float>(value); } }
        public TimerHandle Handle_Melting { get { return this[nameof(Handle_Melting)].As<TimerHandle>(); } set { this["Handle_Melting"] = value; } }
        public void StartMelting() { Invoke(nameof(StartMelting)); }
        public void OnSTETriggered(Actor target_actor, bool entered) { Invoke(nameof(OnSTETriggered), target_actor, entered); }
        public void OnRep_IntegrityModifier() { Invoke(nameof(OnRep_IntegrityModifier)); }
        public void OnIceExpire() { Invoke(nameof(OnIceExpire)); }
        public void OnHit(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnHit), Damage, DamageData, anyHealthLost); }
        public void AddToCurrentIntegrity(float Value, bool predictable) { Invoke(nameof(AddToCurrentIntegrity), Value, predictable); }
    }
    public class StingerIdleAudioComponent : ActorComponent
    {
        public StingerIdleAudioComponent(nint addr) : base(addr) { }
        public Object AudioComponent { get { return this[nameof(AudioComponent)]; } set { this[nameof(AudioComponent)] = value; } }
        public Object HealthComponent { get { return this[nameof(HealthComponent)]; } set { this[nameof(HealthComponent)] = value; } }
        public float FadeInTime { get { return this[nameof(FadeInTime)].GetValue<float>(); } set { this[nameof(FadeInTime)].SetValue<float>(value); } }
        public float FadeOutTime { get { return this[nameof(FadeOutTime)].GetValue<float>(); } set { this[nameof(FadeOutTime)].SetValue<float>(value); } }
    }
    public class STLMeshCarver : Object
    {
        public STLMeshCarver(nint addr) : base(addr) { }
        public Box AABB { get { return this[nameof(AABB)].As<Box>(); } set { this["AABB"] = value; } }
        public DeepCSGFloatTree BSPTree { get { return this[nameof(BSPTree)].As<DeepCSGFloatTree>(); } set { this["BSPTree"] = value; } }
        public UArray<Vector> Vertices { get { return new UArray<Vector>(this[nameof(Vertices)].Address); } }
    }
    public class SubHealthComponent : ActorComponent
    {
        public SubHealthComponent(nint addr) : base(addr) { }
        public Object OnDamageTaken { get { return this[nameof(OnDamageTaken)]; } set { this[nameof(OnDamageTaken)] = value; } }
        public Object OnHealthChanged { get { return this[nameof(OnHealthChanged)]; } set { this[nameof(OnHealthChanged)] = value; } }
        public Object OnCanTakeDamageChanged { get { return this[nameof(OnCanTakeDamageChanged)]; } set { this[nameof(OnCanTakeDamageChanged)] = value; } }
        public EHealthbarType HealthbarType { get { return (EHealthbarType)this[nameof(HealthbarType)].GetValue<int>(); } set { this[nameof(HealthbarType)].SetValue<int>((int)value); } }
        public bool PassthroughDamageWhenDisabled { get { return this[nameof(PassthroughDamageWhenDisabled)].Flag; } set { this[nameof(PassthroughDamageWhenDisabled)].Flag = value; } }
        public EEnemyHealthScaling EnemyHealthScaling { get { return (EEnemyHealthScaling)this[nameof(EnemyHealthScaling)].GetValue<int>(); } set { this[nameof(EnemyHealthScaling)].SetValue<int>((int)value); } }
        public void SetCanTakeDamage(bool canTakeDamage) { Invoke(nameof(SetCanTakeDamage), canTakeDamage); }
        public bool IsDead() { return Invoke<bool>(nameof(IsDead)); }
        public bool IsAlive() { return Invoke<bool>(nameof(IsAlive)); }
        public float GetHealthPct() { return Invoke<float>(nameof(GetHealthPct)); }
        public float GetHealth() { return Invoke<float>(nameof(GetHealth)); }
        public bool GetCanTakeDamage() { return Invoke<bool>(nameof(GetCanTakeDamage)); }
    }
    public class DestructibleSubHealthComponent : SubHealthComponent
    {
        public DestructibleSubHealthComponent(nint addr) : base(addr) { }
        public float MaxHealth { get { return this[nameof(MaxHealth)].GetValue<float>(); } set { this[nameof(MaxHealth)].SetValue<float>(value); } }
        public float RadialDamageResistance { get { return this[nameof(RadialDamageResistance)].GetValue<float>(); } set { this[nameof(RadialDamageResistance)].SetValue<float>(value); } }
        public bool AllowInderectDamage { get { return this[nameof(AllowInderectDamage)].Flag; } set { this[nameof(AllowInderectDamage)].Flag = value; } }
        public float Damage { get { return this[nameof(Damage)].GetValue<float>(); } set { this[nameof(Damage)].SetValue<float>(value); } }
        public SceneComponent ArmorComponent { get { return this[nameof(ArmorComponent)].As<SceneComponent>(); } set { this["ArmorComponent"] = value; } }
        public Object OnDestroyed { get { return this[nameof(OnDestroyed)]; } set { this[nameof(OnDestroyed)] = value; } }
        public void SubHealthDestroyed__DelegateSignature(DestructibleSubHealthComponent subHealth) { Invoke(nameof(SubHealthDestroyed__DelegateSignature), subHealth); }
        public void ResetHealth() { Invoke(nameof(ResetHealth)); }
        public void OnRep_Damage(float oldDamage) { Invoke(nameof(OnRep_Damage), oldDamage); }
    }
    public class PassthroughSubHealthComponent : SubHealthComponent
    {
        public PassthroughSubHealthComponent(nint addr) : base(addr) { }
        public SceneComponent ArmorComponent { get { return this[nameof(ArmorComponent)].As<SceneComponent>(); } set { this["ArmorComponent"] = value; } }
    }
    public class SubsystemLoader : Object
    {
        public SubsystemLoader(nint addr) : base(addr) { }
        public UArray<Object> BlueprintSubSystems { get { return new UArray<Object>(this[nameof(BlueprintSubSystems)].Address); } }
    }
    public class TargetDummyPawn : Actor
    {
        public TargetDummyPawn(nint addr) : base(addr) { }
        public GameplayTagContainer GameplayTags { get { return this[nameof(GameplayTags)].As<GameplayTagContainer>(); } set { this["GameplayTags"] = value; } }
    }
    public class TargetValidator : Object
    {
        public TargetValidator(nint addr) : base(addr) { }
        public bool ReceiveIsTargetValid(Actor Owner, Actor Target) { return Invoke<bool>(nameof(ReceiveIsTargetValid), Owner, Target); }
    }
    public class CompositeTargetValidator : TargetValidator
    {
        public CompositeTargetValidator(nint addr) : base(addr) { }
        public UArray<TargetValidator> TargetValidators { get { return new UArray<TargetValidator>(this[nameof(TargetValidators)].Address); } }
    }
    public class GrabTargetValidator : TargetValidator
    {
        public GrabTargetValidator(nint addr) : base(addr) { }
    }
    public class LineOfSightValidator : TargetValidator
    {
        public LineOfSightValidator(nint addr) : base(addr) { }
    }
    public class WithinAngleValidator : TargetValidator
    {
        public WithinAngleValidator(nint addr) : base(addr) { }
        public float MaxAngle { get { return this[nameof(MaxAngle)].GetValue<float>(); } set { this[nameof(MaxAngle)].SetValue<float>(value); } }
    }
    public class TeamResourcesComponent : ResourcesComponent
    {
        public TeamResourcesComponent(nint addr) : base(addr) { }
    }
    public class MiningPodCalldownLocation : Actor
    {
        public MiningPodCalldownLocation(nint addr) : base(addr) { }
    }
    public class MiningPodAnimInstance : AnimInstance
    {
        public MiningPodAnimInstance(nint addr) : base(addr) { }
        public EMiningPodRampState rampState { get { return (EMiningPodRampState)this[nameof(rampState)].GetValue<int>(); } set { this[nameof(rampState)].SetValue<int>((int)value); } }
        public EMiningPodState PodState { get { return (EMiningPodState)this[nameof(PodState)].GetValue<int>(); } set { this[nameof(PodState)].SetValue<int>((int)value); } }
    }
    public class TemporaryBuff : DataAsset
    {
        public TemporaryBuff(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public bool ActivatesOnlyOnceWhenDrinking { get { return this[nameof(ActivatesOnlyOnceWhenDrinking)].Flag; } set { this[nameof(ActivatesOnlyOnceWhenDrinking)].Flag = value; } }
        public bool IsTodaysSpecialBuff { get { return this[nameof(IsTodaysSpecialBuff)].Flag; } set { this[nameof(IsTodaysSpecialBuff)].Flag = value; } }
        public bool GetActivateOnlyWhenDrinking() { return Invoke<bool>(nameof(GetActivateOnlyWhenDrinking)); }
        public void DeActivateBuff(PlayerCharacter Player) { Invoke(nameof(DeActivateBuff), Player); }
        public void ActivateBuff(PlayerCharacter Player) { Invoke(nameof(ActivateBuff), Player); }
    }
    public class StatTemporaryBuff : TemporaryBuff
    {
        public StatTemporaryBuff(nint addr) : base(addr) { }
        public Object ModifiedStats { get { return this[nameof(ModifiedStats)]; } set { this[nameof(ModifiedStats)] = value; } }
    }
    public class RandomLoadoutBuff : TemporaryBuff
    {
        public RandomLoadoutBuff(nint addr) : base(addr) { }
    }
    public class TentacleAnimInstance : AnimInstance
    {
        public TentacleAnimInstance(nint addr) : base(addr) { }
        public TentacleAnimInstanceProxy AnimInstanceProxy { get { return this[nameof(AnimInstanceProxy)].As<TentacleAnimInstanceProxy>(); } set { this["AnimInstanceProxy"] = value; } }
        public bool UseActorRotationDuringExtension { get { return this[nameof(UseActorRotationDuringExtension)].Flag; } set { this[nameof(UseActorRotationDuringExtension)].Flag = value; } }
    }
    public class TentacleGrabAttack : AttackBaseComponent
    {
        public TentacleGrabAttack(nint addr) : base(addr) { }
        public MeshComponent HeadMesh { get { return this[nameof(HeadMesh)].As<MeshComponent>(); } set { this["HeadMesh"] = value; } }
        public Object TerrainCheckSocket { get { return this[nameof(TerrainCheckSocket)]; } set { this[nameof(TerrainCheckSocket)] = value; } }
        public Vector TerrainCheckBox { get { return this[nameof(TerrainCheckBox)].As<Vector>(); } set { this["TerrainCheckBox"] = value; } }
        public bool IsHeadNearTerrain() { return Invoke<bool>(nameof(IsHeadNearTerrain)); }
    }
    public class TentaclePlant : ShootingPlant
    {
        public TentaclePlant(nint addr) : base(addr) { }
        public bool IsVulnerable { get { return this[nameof(IsVulnerable)].Flag; } set { this[nameof(IsVulnerable)].Flag = value; } }
        public int AmountOfNodes { get { return this[nameof(AmountOfNodes)].GetValue<int>(); } set { this[nameof(AmountOfNodes)].SetValue<int>(value); } }
        public float MinimumDistance { get { return this[nameof(MinimumDistance)].GetValue<float>(); } set { this[nameof(MinimumDistance)].SetValue<float>(value); } }
        public float MinDistanceBetweenNodes { get { return this[nameof(MinDistanceBetweenNodes)].GetValue<float>(); } set { this[nameof(MinDistanceBetweenNodes)].SetValue<float>(value); } }
        public Object NodeType { get { return this[nameof(NodeType)]; } set { this[nameof(NodeType)] = value; } }
        public DebrisPositioning NodePositioning { get { return this[nameof(NodePositioning)].As<DebrisPositioning>(); } set { this["NodePositioning"] = value; } }
        public UArray<TentaclePlantNode> NodeInstances { get { return new UArray<TentaclePlantNode>(this[nameof(NodeInstances)].Address); } }
        public void OnRep_IsVulnerable() { Invoke(nameof(OnRep_IsVulnerable)); }
        public void OnNodeDestroyed(TentaclePlantNode InNode) { Invoke(nameof(OnNodeDestroyed), InNode); }
        public void OnNodeDamaged(TentaclePlantNode InNode) { Invoke(nameof(OnNodeDamaged), InNode); }
        public void OnIsVulnerable() { Invoke(nameof(OnIsVulnerable)); }
        public void DestroyNode(TentaclePlantNode Node) { Invoke(nameof(DestroyNode), Node); }
    }
    public class TentaclePlantNode : EnemyPawn
    {
        public TentaclePlantNode(nint addr) : base(addr) { }
        public StaticMeshComponent Mesh { get { return this[nameof(Mesh)].As<StaticMeshComponent>(); } set { this["Mesh"] = value; } }
        public Object TentacleCableType { get { return this[nameof(TentacleCableType)]; } set { this[nameof(TentacleCableType)] = value; } }
        public SplineCableActor TentacleCable { get { return this[nameof(TentacleCable)].As<SplineCableActor>(); } set { this["TentacleCable"] = value; } }
        public TentaclePlant TentaclePlant { get { return this[nameof(TentaclePlant)].As<TentaclePlant>(); } set { this["TentaclePlant"] = value; } }
        public int TentacleIndex { get { return this[nameof(TentacleIndex)].GetValue<int>(); } set { this[nameof(TentacleIndex)].SetValue<int>(value); } }
        public void OnPathCompleted(bool WasCompleted) { Invoke(nameof(OnPathCompleted), WasCompleted); }
    }
    public class TentaclePlantCable : SplineCableActor
    {
        public TentaclePlantCable(nint addr) : base(addr) { }
    }
    public class TerminatorShoutComponent : ActorComponent
    {
        public TerminatorShoutComponent(nint addr) : base(addr) { }
        public UArray<TerminatorShoutState> States { get { return new UArray<TerminatorShoutState>(this[nameof(States)].Address); } }
        public Object OnShoutStarted { get { return this[nameof(OnShoutStarted)]; } set { this[nameof(OnShoutStarted)] = value; } }
        public Object OnShoutEnded { get { return this[nameof(OnShoutEnded)]; } set { this[nameof(OnShoutEnded)] = value; } }
        public UArray<TerminatorTalkMaterial> TalkMaterials { get { return new UArray<TerminatorTalkMaterial>(this[nameof(TalkMaterials)].Address); } }
        public PointLightComponent TalkLight { get { return this[nameof(TalkLight)].As<PointLightComponent>(); } set { this["TalkLight"] = value; } }
        public float MaxRadius { get { return this[nameof(MaxRadius)].GetValue<float>(); } set { this[nameof(MaxRadius)].SetValue<float>(value); } }
        public float MaxIntensity { get { return this[nameof(MaxIntensity)].GetValue<float>(); } set { this[nameof(MaxIntensity)].SetValue<float>(value); } }
        public Object SoundOriginSocket { get { return this[nameof(SoundOriginSocket)]; } set { this[nameof(SoundOriginSocket)] = value; } }
        public MeshComponent OwnerMesh { get { return this[nameof(OwnerMesh)].As<MeshComponent>(); } set { this["OwnerMesh"] = value; } }
        public AudioComponent ShoutInstance { get { return this[nameof(ShoutInstance)].As<AudioComponent>(); } set { this["ShoutInstance"] = value; } }
        public void SetShoutState(ETerminatorShoutState State, float delayShout) { Invoke(nameof(SetShoutState), State, delayShout); }
        public void OnShoutStart() { Invoke(nameof(OnShoutStart)); }
        public void OnShoutInstancePlayStateChanged(EAudioComponentPlayState PlayState) { Invoke(nameof(OnShoutInstancePlayStateChanged), PlayState); }
        public void OnShoutEnd() { Invoke(nameof(OnShoutEnd)); }
        public void All_PlayShout(SoundCue Shout) { Invoke(nameof(All_PlayShout), Shout); }
    }
    public class TerminatorEnemy : EnemyDeepPathfinderCharacter
    {
        public TerminatorEnemy(nint addr) : base(addr) { }
        public AnimMontage FlairAnimation { get { return this[nameof(FlairAnimation)].As<AnimMontage>(); } set { this["FlairAnimation"] = value; } }
        public float MinFlairAnimCooldown { get { return this[nameof(MinFlairAnimCooldown)].GetValue<float>(); } set { this[nameof(MinFlairAnimCooldown)].SetValue<float>(value); } }
        public float MaxFlairAnimationCooldown { get { return this[nameof(MaxFlairAnimationCooldown)].GetValue<float>(); } set { this[nameof(MaxFlairAnimationCooldown)].SetValue<float>(value); } }
        public HitReactionComponent HitReactions { get { return this[nameof(HitReactions)].As<HitReactionComponent>(); } set { this["HitReactions"] = value; } }
        public Object CurrentTargets { get { return this[nameof(CurrentTargets)]; } set { this[nameof(CurrentTargets)] = value; } }
        public void All_PlayFlairAnimation() { Invoke(nameof(All_PlayFlairAnimation)); }
    }
    public class TerminatorTentacle : TentacleBase
    {
        public TerminatorTentacle(nint addr) : base(addr) { }
        public Object OnTentacleStateChangedEvent { get { return this[nameof(OnTentacleStateChangedEvent)]; } set { this[nameof(OnTentacleStateChangedEvent)] = value; } }
        public AnimSequenceBase FlairAnimation { get { return this[nameof(FlairAnimation)].As<AnimSequenceBase>(); } set { this["FlairAnimation"] = value; } }
        public float MinFlairAnimCooldown { get { return this[nameof(MinFlairAnimCooldown)].GetValue<float>(); } set { this[nameof(MinFlairAnimCooldown)].SetValue<float>(value); } }
        public float MaxFlairAnimationCooldown { get { return this[nameof(MaxFlairAnimationCooldown)].GetValue<float>(); } set { this[nameof(MaxFlairAnimationCooldown)].SetValue<float>(value); } }
        public float SwaySpeed { get { return this[nameof(SwaySpeed)].GetValue<float>(); } set { this[nameof(SwaySpeed)].SetValue<float>(value); } }
        public bool Extended { get { return this[nameof(Extended)].Flag; } set { this[nameof(Extended)].Flag = value; } }
        public UArray<AnimMontage> HitReactions { get { return new UArray<AnimMontage>(this[nameof(HitReactions)].Address); } }
        public ETerminatorTentacleState TentacleState { get { return (ETerminatorTentacleState)this[nameof(TentacleState)].GetValue<int>(); } set { this[nameof(TentacleState)].SetValue<int>((int)value); } }
        public SkeletalMeshComponent HeadMesh { get { return this[nameof(HeadMesh)].As<SkeletalMeshComponent>(); } set { this["HeadMesh"] = value; } }
        public GrabberComponent GrabberComponent { get { return this[nameof(GrabberComponent)].As<GrabberComponent>(); } set { this["GrabberComponent"] = value; } }
        public TerminatorTarget DesiredTarget { get { return this[nameof(DesiredTarget)].As<TerminatorTarget>(); } set { this["DesiredTarget"] = value; } }
        public void PlayHitReaction(float amount) { Invoke(nameof(PlayHitReaction), amount); }
        public void OnStateChanged(ETerminatorTentacleState NewState) { Invoke(nameof(OnStateChanged), NewState); }
        public void OnRep_TentacleState() { Invoke(nameof(OnRep_TentacleState)); }
        public void OnRep_DesiredTarget() { Invoke(nameof(OnRep_DesiredTarget)); }
        public void OnHeadExitedTerrain() { Invoke(nameof(OnHeadExitedTerrain)); }
        public void OnHeadEnteredTerrain() { Invoke(nameof(OnHeadEnteredTerrain)); }
        public void OnGrabbedActorReleased(Actor Actor, bool fullGrabElapsed) { Invoke(nameof(OnGrabbedActorReleased), Actor, fullGrabElapsed); }
        public void OnDeathEvent(HealthComponentBase EnemyHealth) { Invoke(nameof(OnDeathEvent), EnemyHealth); }
        public void MoveToGrabTarget(Actor Target, float grabDuration) { Invoke(nameof(MoveToGrabTarget), Target, grabDuration); }
        public void ChangeTentacleState(ETerminatorTentacleState NewState) { Invoke(nameof(ChangeTentacleState), NewState); }
        public void All_PlayFlairAnimation() { Invoke(nameof(All_PlayFlairAnimation)); }
    }
    public class TentacleBusyComponent : EnemyLineOfSightComponent
    {
        public TentacleBusyComponent(nint addr) : base(addr) { }
        public void ReleasedActor(Actor Escape, bool fullGrab) { Invoke(nameof(ReleasedActor), Escape, fullGrab); }
        public void GrabbedActor(Actor victim) { Invoke(nameof(GrabbedActor), victim); }
        public bool GetIsBusy() { return Invoke<bool>(nameof(GetIsBusy)); }
    }
    public class TerminatorAnimInstance : EnemyAnimInstance
    {
        public TerminatorAnimInstance(nint addr) : base(addr) { }
        public Rotator Lean { get { return this[nameof(Lean)].As<Rotator>(); } set { this["Lean"] = value; } }
        public float ForwardLean { get { return this[nameof(ForwardLean)].GetValue<float>(); } set { this[nameof(ForwardLean)].SetValue<float>(value); } }
    }
    public class TerminatorTentacleHeadAnimInstance : EnemyAnimInstance
    {
        public TerminatorTentacleHeadAnimInstance(nint addr) : base(addr) { }
        public bool Idle { get { return this[nameof(Idle)].Flag; } set { this[nameof(Idle)].Flag = value; } }
        public bool Grabbing { get { return this[nameof(Grabbing)].Flag; } set { this[nameof(Grabbing)].Flag = value; } }
        public bool Grabbed { get { return this[nameof(Grabbed)].Flag; } set { this[nameof(Grabbed)].Flag = value; } }
    }
    public class TerrainDetectComponent : SceneComponent
    {
        public TerrainDetectComponent(nint addr) : base(addr) { }
        public Object OnPointRemoved { get { return this[nameof(OnPointRemoved)]; } set { this[nameof(OnPointRemoved)] = value; } }
        public bool StartDetectOnBeginPlay { get { return this[nameof(StartDetectOnBeginPlay)].Flag; } set { this[nameof(StartDetectOnBeginPlay)].Flag = value; } }
        public bool OnlyDetectOnServer { get { return this[nameof(OnlyDetectOnServer)].Flag; } set { this[nameof(OnlyDetectOnServer)].Flag = value; } }
        public bool KillActorOnPointRemoved { get { return this[nameof(KillActorOnPointRemoved)].Flag; } set { this[nameof(KillActorOnPointRemoved)].Flag = value; } }
        public Vector ActiveDetectPos { get { return this[nameof(ActiveDetectPos)].As<Vector>(); } set { this["ActiveDetectPos"] = value; } }
        public int DetectorId { get { return this[nameof(DetectorId)].GetValue<int>(); } set { this[nameof(DetectorId)].SetValue<int>(value); } }
        public void UpdateDetectLocation() { Invoke(nameof(UpdateDetectLocation)); }
        public void StopDetect() { Invoke(nameof(StopDetect)); }
        public void StartDetect() { Invoke(nameof(StartDetect)); }
    }
    public class TerrainDetectBoxComponent : BoxComponent
    {
        public TerrainDetectBoxComponent(nint addr) : base(addr) { }
        public Object OnBoxExcavated { get { return this[nameof(OnBoxExcavated)]; } set { this[nameof(OnBoxExcavated)] = value; } }
        public bool StartDetectOnBeginPlay { get { return this[nameof(StartDetectOnBeginPlay)].Flag; } set { this[nameof(StartDetectOnBeginPlay)].Flag = value; } }
        public bool OnlyDetectOnServer { get { return this[nameof(OnlyDetectOnServer)].Flag; } set { this[nameof(OnlyDetectOnServer)].Flag = value; } }
        public int NumCornersToExcavate { get { return this[nameof(NumCornersToExcavate)].GetValue<int>(); } set { this[nameof(NumCornersToExcavate)].SetValue<int>(value); } }
        public int NumCornersExcavated { get { return this[nameof(NumCornersExcavated)].GetValue<int>(); } set { this[nameof(NumCornersExcavated)].SetValue<int>(value); } }
        public bool KillActorOnPointRemoved { get { return this[nameof(KillActorOnPointRemoved)].Flag; } set { this[nameof(KillActorOnPointRemoved)].Flag = value; } }
        public void StartDetect() { Invoke(nameof(StartDetect)); }
    }
    public class TerrainDetectInterface : Interface
    {
        public TerrainDetectInterface(nint addr) : base(addr) { }
    }
    public class TerrainFunctionLibrary : BlueprintFunctionLibrary
    {
        public TerrainFunctionLibrary(nint addr) : base(addr) { }
        public bool GetDebrisTransformsInSphere(Object WorldContextObject, UArray<Matrix> outPositions, Vector Location, float Radius, ESpecialDebrisType debrisType, float minDistToOther, bool calcPriority) { return Invoke<bool>(nameof(GetDebrisTransformsInSphere), WorldContextObject, outPositions, Location, Radius, debrisType, minDistToOther, calcPriority); }
        public UArray<Vector> GetAllNavPointsInSphere(Object WorldContextObject, Vector Origin, float Radius, DeepPathFinderSize pfSize, Vector searchNormal, float maxDegreesToSearchNormal) { return Invoke<UArray<Vector>>(nameof(GetAllNavPointsInSphere), WorldContextObject, Origin, Radius, pfSize, searchNormal, maxDegreesToSearchNormal); }
        public UArray<Vector> FindPath(Object WorldContextObject, Vector Origin, Vector Destination, DeepPathFinderSize pfSize, DeepPathFinderType pfType) { return Invoke<UArray<Vector>>(nameof(FindPath), WorldContextObject, Origin, Destination, pfSize, pfType); }
        public void FindNearestSurfacePoint(Object WorldContextObject, Vector inPoint, Vector outPoint, Vector Normal, bool IsBLocked) { Invoke(nameof(FindNearestSurfacePoint), WorldContextObject, inPoint, outPoint, Normal, IsBLocked); }
        public bool DoesPathExist(Object WorldContextObject, Vector Origin, Vector Destination, DeepPathFinderSize pfSize, DeepPathFinderType pfType) { return Invoke<bool>(nameof(DoesPathExist), WorldContextObject, Origin, Destination, pfSize, pfType); }
        public void CreateExplosionCrater2(Object WorldContextObject, Vector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, Vector Normal, float NormalOffset, float NormalSqueeze, bool allowCustomBurntMaterial, bool DissolvePlatforms, TerrainMaterial overrideBurnedMaterial) { Invoke(nameof(CreateExplosionCrater2), WorldContextObject, Location, CarveDiameter, carveNoiseSize, carveBurnThickness, Normal, NormalOffset, NormalSqueeze, allowCustomBurntMaterial, DissolvePlatforms, overrideBurnedMaterial); }
        public void CreateExplosionCrater(Object WorldContextObject, Vector Location, float CarveDiameter, float carveNoiseSize, float carveBurnThickness, bool allowCustomBurntMaterial, TerrainMaterial overrideBurnedMaterial) { Invoke(nameof(CreateExplosionCrater), WorldContextObject, Location, CarveDiameter, carveNoiseSize, carveBurnThickness, allowCustomBurntMaterial, overrideBurnedMaterial); }
        public int CountDebrisOfType(Object WorldContextObject, ESpecialDebrisType debrisType) { return Invoke<int>(nameof(CountDebrisOfType), WorldContextObject, debrisType); }
        public int CountDebrisInSphere(Object WorldContextObject, Vector Location, float Radius, ESpecialDebrisType debrisType) { return Invoke<int>(nameof(CountDebrisInSphere), WorldContextObject, Location, Radius, debrisType); }
    }
    public class ProceduralFunctionLibrary : BlueprintFunctionLibrary
    {
        public ProceduralFunctionLibrary(nint addr) : base(addr) { }
        public void SpawnTerrainImpact(Object WorldContextObject, FXSystemAsset particle, Vector Location, Rotator Rotation) { Invoke(nameof(SpawnTerrainImpact), WorldContextObject, particle, Location, Rotation); }
        public ProceduralSetup GetProceduralSetup(Object WorldContextObject) { return Invoke<ProceduralSetup>(nameof(GetProceduralSetup), WorldContextObject); }
        public int GetObjectiveXP(Object objectiveClass, float missionLength) { return Invoke<int>(nameof(GetObjectiveXP), objectiveClass, missionLength); }
        public int GetObjectiveCredits(Object objectiveClass, float missionLength) { return Invoke<int>(nameof(GetObjectiveCredits), objectiveClass, missionLength); }
        public Biome GetBiome(Object levelSetup) { return Invoke<Biome>(nameof(GetBiome), levelSetup); }
        public void CreateEntrances(ProceduralSetup pls, RoomNode Room, int exitCount, int entranceCount, DebrisPositioning exitPositioning, DebrisPositioning entrancePositioning) { Invoke(nameof(CreateEntrances), pls, Room, exitCount, entranceCount, exitPositioning, entrancePositioning); }
        public bool AllControllersFinishedTransitionToPlay(Object WorldContextObject) { return Invoke<bool>(nameof(AllControllersFinishedTransitionToPlay), WorldContextObject); }
    }
    public class TerrainLatejoinComponent : ActorComponent
    {
        public TerrainLatejoinComponent(nint addr) : base(addr) { }
        public void Server_TerrainLateJoinPartReceived() { Invoke(nameof(Server_TerrainLateJoinPartReceived)); }
        public void Client_TerrainLateJoinVisibleChunks(UArray<uint> VisibleChunks) { Invoke(nameof(Client_TerrainLateJoinVisibleChunks), VisibleChunks); }
        public void Client_TerrainLateJoinPart(UArray<GrenadeExplodeOperationData> Explosions, UArray<CarveWithColliderOperationData> ColliderCarves, UArray<CarveWithSTLMeshOperationData> MeshCarves, UArray<PickaxeDigOperationData> PickAxe, UArray<RemoveFloatingIslandOperationData> floating, UArray<DrillOperationData> Drills, UArray<MeltOperationData> Melts, UArray<SplineSegmentCarveOperationData> Splines, UArray<CSGBuildOperationData> CSGBuilds, UArray<TerrainSpawnDebrisOperationData> SpawnDebris) { Invoke(nameof(Client_TerrainLateJoinPart), Explosions, ColliderCarves, MeshCarves, PickAxe, floating, Drills, Melts, Splines, CSGBuilds, SpawnDebris); }
        public void Client_TerrainLateJoinDone() { Invoke(nameof(Client_TerrainLateJoinDone)); }
        public void Client_TerrainLateJoinDebris(UArray<int> instanceComponentPairs) { Invoke(nameof(Client_TerrainLateJoinDebris), instanceComponentPairs); }
    }
    public class SmartRockTerrainMaterial : TerrainMaterialBase
    {
        public SmartRockTerrainMaterial(nint addr) : base(addr) { }
    }
    public class TerrainMaterial : TerrainMaterialCore
    {
        public TerrainMaterial(nint addr) : base(addr) { }
        public bool Collide { get { return this[nameof(Collide)].Flag; } set { this[nameof(Collide)].Flag = value; } }
        public bool Diggable { get { return this[nameof(Diggable)].Flag; } set { this[nameof(Diggable)].Flag = value; } }
        public bool CanBeDrilled { get { return this[nameof(CanBeDrilled)].Flag; } set { this[nameof(CanBeDrilled)].Flag = value; } }
        public bool ExplosionProof { get { return this[nameof(ExplosionProof)].Flag; } set { this[nameof(ExplosionProof)].Flag = value; } }
        public bool MeltsInFire { get { return this[nameof(MeltsInFire)].Flag; } set { this[nameof(MeltsInFire)].Flag = value; } }
        public bool PlatformDissolvable { get { return this[nameof(PlatformDissolvable)].Flag; } set { this[nameof(PlatformDissolvable)].Flag = value; } }
        public bool Ephemeral { get { return this[nameof(Ephemeral)].Flag; } set { this[nameof(Ephemeral)].Flag = value; } }
        public ResourceData ResourceData { get { return this[nameof(ResourceData)].As<ResourceData>(); } set { this["ResourceData"] = value; } }
        public int HitsNeededToMine { get { return this[nameof(HitsNeededToMine)].GetValue<int>(); } set { this[nameof(HitsNeededToMine)].SetValue<int>(value); } }
        public float PickAxeDigSize { get { return this[nameof(PickAxeDigSize)].GetValue<float>(); } set { this[nameof(PickAxeDigSize)].SetValue<float>(value); } }
        public bool RemoveDebrisOnFirstHit { get { return this[nameof(RemoveDebrisOnFirstHit)].Flag; } set { this[nameof(RemoveDebrisOnFirstHit)].Flag = value; } }
        public DialogDataAsset ShoutLookAt { get { return this[nameof(ShoutLookAt)].As<DialogDataAsset>(); } set { this["ShoutLookAt"] = value; } }
        public DialogDataAsset ShoutOnDig { get { return this[nameof(ShoutOnDig)].As<DialogDataAsset>(); } set { this["ShoutOnDig"] = value; } }
        public TerrainType TerrainType { get { return this[nameof(TerrainType)].As<TerrainType>(); } set { this["TerrainType"] = value; } }
        public Object InGameName { get { return this[nameof(InGameName)]; } set { this[nameof(InGameName)] = value; } }
        public Object InGameDescription { get { return this[nameof(InGameDescription)]; } set { this[nameof(InGameDescription)] = value; } }
        public bool Precious { get { return this[nameof(Precious)].Flag; } set { this[nameof(Precious)].Flag = value; } }
        public Object DigParticles { get { return this[nameof(DigParticles)]; } set { this[nameof(DigParticles)] = value; } }
        public Object DigParticlesMaterialOverride { get { return this[nameof(DigParticlesMaterialOverride)]; } set { this[nameof(DigParticlesMaterialOverride)] = value; } }
        public Object PartialDigParticles { get { return this[nameof(PartialDigParticles)]; } set { this[nameof(PartialDigParticles)] = value; } }
        public Object CrumbleSound { get { return this[nameof(CrumbleSound)]; } set { this[nameof(CrumbleSound)] = value; } }
        public Object PartialMineSound { get { return this[nameof(PartialMineSound)]; } set { this[nameof(PartialMineSound)] = value; } }
        public void TestMaterialEffects(TerrainMaterial Material, UArray<TestTerrainMaterialItem> Items) { Invoke(nameof(TestMaterialEffects), Material, Items); }
        public void TestDecals(TerrainMaterial Material, UArray<TestTerrainMaterialDecalItem> Items) { Invoke(nameof(TestDecals), Material, Items); }
        public FXSystemComponent SpawnPartialDigParticles(Object WorldContextObject, Vector Location, Rotator Rotation) { return Invoke<FXSystemComponent>(nameof(SpawnPartialDigParticles), WorldContextObject, Location, Rotation); }
        public FXSystemComponent SpawnDigParticles(Object WorldContextObject, Vector Location, Rotator Rotation, float Density) { return Invoke<FXSystemComponent>(nameof(SpawnDigParticles), WorldContextObject, Location, Rotation, Density); }
        public bool IsPrecious() { return Invoke<bool>(nameof(IsPrecious)); }
        public Object GetInGameName() { return Invoke<Object>(nameof(GetInGameName)); }
        public MaterialInstance GetDigParticlesMaterialOverride() { return Invoke<MaterialInstance>(nameof(GetDigParticlesMaterialOverride)); }
    }
    public class TerrainType : DataAsset
    {
        public TerrainType(nint addr) : base(addr) { }
        public bool Collide { get { return this[nameof(Collide)].Flag; } set { this[nameof(Collide)].Flag = value; } }
        public bool Diggable { get { return this[nameof(Diggable)].Flag; } set { this[nameof(Diggable)].Flag = value; } }
        public bool Precious { get { return this[nameof(Precious)].Flag; } set { this[nameof(Precious)].Flag = value; } }
        public SoundCue DebrisStandardSoundCue { get { return this[nameof(DebrisStandardSoundCue)].As<SoundCue>(); } set { this["DebrisStandardSoundCue"] = value; } }
        public Object DebrisStandardParticles { get { return this[nameof(DebrisStandardParticles)]; } set { this[nameof(DebrisStandardParticles)] = value; } }
    }
    public class TerrainMaterialsCollection : DataAsset
    {
        public TerrainMaterialsCollection(nint addr) : base(addr) { }
        public UArray<TerrainMaterial> Materials { get { return new UArray<TerrainMaterial>(this[nameof(Materials)].Address); } }
        public UArray<TerrainType> TerrainTypes { get { return new UArray<TerrainType>(this[nameof(TerrainTypes)].Address); } }
    }
    public class TerrainMaterialSettings : DataAsset
    {
        public TerrainMaterialSettings(nint addr) : base(addr) { }
        public UArray<DecalData> TwoHits { get { return new UArray<DecalData>(this[nameof(TwoHits)].Address); } }
        public UArray<DecalData> ThreeHits { get { return new UArray<DecalData>(this[nameof(ThreeHits)].Address); } }
        public UArray<DecalData> FourHits { get { return new UArray<DecalData>(this[nameof(FourHits)].Address); } }
        public UArray<DecalData> FiveHits { get { return new UArray<DecalData>(this[nameof(FiveHits)].Address); } }
        public UArray<TerrainMaterial> PlagueMaterials { get { return new UArray<TerrainMaterial>(this[nameof(PlagueMaterials)].Address); } }
        public float InfectionIncreasePerPlagueHit { get { return this[nameof(InfectionIncreasePerPlagueHit)].GetValue<float>(); } set { this[nameof(InfectionIncreasePerPlagueHit)].SetValue<float>(value); } }
    }
    public class TerrainModifyingProjectile : Projectile
    {
        public TerrainModifyingProjectile(nint addr) : base(addr) { }
        public Object OnRevertToNormal { get { return this[nameof(OnRevertToNormal)]; } set { this[nameof(OnRevertToNormal)] = value; } }
        public TerrainMaterial Terrain { get { return this[nameof(Terrain)].As<TerrainMaterial>(); } set { this["Terrain"] = value; } }
        public TerrainMaterial OriginalGroundMaterial { get { return this[nameof(OriginalGroundMaterial)].As<TerrainMaterial>(); } set { this["OriginalGroundMaterial"] = value; } }
        public StaticMesh CarveMesh { get { return this[nameof(CarveMesh)].As<StaticMesh>(); } set { this["CarveMesh"] = value; } }
        public Vector CarveMeshScale { get { return this[nameof(CarveMeshScale)].As<Vector>(); } set { this["CarveMeshScale"] = value; } }
        public Vector LastHitLocation { get { return this[nameof(LastHitLocation)].As<Vector>(); } set { this["LastHitLocation"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public bool Revert { get { return this[nameof(Revert)].Flag; } set { this[nameof(Revert)].Flag = value; } }
        public float TimeOnGround { get { return this[nameof(TimeOnGround)].GetValue<float>(); } set { this[nameof(TimeOnGround)].SetValue<float>(value); } }
        public float ExpensiveCarveNoise { get { return this[nameof(ExpensiveCarveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveCarveNoise)].SetValue<float>(value); } }
        public void Tick(float DeltaSeconds) { Invoke(nameof(Tick), DeltaSeconds); }
        public float GetRadius() { return Invoke<float>(nameof(GetRadius)); }
        public void BeginPlay() { Invoke(nameof(BeginPlay)); }
    }
    public class AllPiercingHitscanComponent : HitscanComponent
    {
        public AllPiercingHitscanComponent(nint addr) : base(addr) { }
        public float PiercingDepth { get { return this[nameof(PiercingDepth)].GetValue<float>(); } set { this[nameof(PiercingDepth)].SetValue<float>(value); } }
        public int TracePartitions { get { return this[nameof(TracePartitions)].GetValue<int>(); } set { this[nameof(TracePartitions)].SetValue<int>(value); } }
    }
    public class TerrainPlacementComponent : SceneComponent
    {
        public TerrainPlacementComponent(nint addr) : base(addr) { }
        public UArray<TerrainPlacementBox> TerrainCheckers { get { return new UArray<TerrainPlacementBox>(this[nameof(TerrainCheckers)].Address); } }
        public EDebrisColliderType CapsuleType { get { return (EDebrisColliderType)this[nameof(CapsuleType)].GetValue<int>(); } set { this[nameof(CapsuleType)].SetValue<int>((int)value); } }
        public DebrisCapsule Capsule { get { return this[nameof(Capsule)].As<DebrisCapsule>(); } set { this["Capsule"] = value; } }
        public int BlockerIDHack { get { return this[nameof(BlockerIDHack)].GetValue<int>(); } set { this[nameof(BlockerIDHack)].SetValue<int>(value); } }
        public World BlockerWorld { get { return this[nameof(BlockerWorld)].As<World>(); } set { this["BlockerWorld"] = value; } }
        public bool RemoveBlockerOnBeingMatch { get { return this[nameof(RemoveBlockerOnBeingMatch)].Flag; } set { this[nameof(RemoveBlockerOnBeingMatch)].Flag = value; } }
        public bool RemoveBlockerOnDeath { get { return this[nameof(RemoveBlockerOnDeath)].Flag; } set { this[nameof(RemoveBlockerOnDeath)].Flag = value; } }
        public void RemoveBlockers() { Invoke(nameof(RemoveBlockers)); }
        public void OnActorDeath(HealthComponentBase Health) { Invoke(nameof(OnActorDeath), Health); }
        public void MatchStarted() { Invoke(nameof(MatchStarted)); }
        public void AddBlockers(ProceduralSetup ProceduralSetup, Transform Transform) { Invoke(nameof(AddBlockers), ProceduralSetup, Transform); }
    }
    public class TerrainScannerItem : AnimatedItem
    {
        public TerrainScannerItem(nint addr) : base(addr) { }
        public int TerrainScannerZoomDirection { get { return this[nameof(TerrainScannerZoomDirection)].GetValue<int>(); } set { this[nameof(TerrainScannerZoomDirection)].SetValue<int>(value); } }
        public Object ScannerAttachSocketName { get { return this[nameof(ScannerAttachSocketName)]; } set { this[nameof(ScannerAttachSocketName)] = value; } }
        public float TerrainScannerStartAngle { get { return this[nameof(TerrainScannerStartAngle)].GetValue<float>(); } set { this[nameof(TerrainScannerStartAngle)].SetValue<float>(value); } }
        public float TerrainScannerScale { get { return this[nameof(TerrainScannerScale)].GetValue<float>(); } set { this[nameof(TerrainScannerScale)].SetValue<float>(value); } }
        public float DelayedTerrainScannerScale { get { return this[nameof(DelayedTerrainScannerScale)].GetValue<float>(); } set { this[nameof(DelayedTerrainScannerScale)].SetValue<float>(value); } }
        public float DelayedTerrainScannerZoom { get { return this[nameof(DelayedTerrainScannerZoom)].GetValue<float>(); } set { this[nameof(DelayedTerrainScannerZoom)].SetValue<float>(value); } }
        public bool IsLookingAtMap { get { return this[nameof(IsLookingAtMap)].Flag; } set { this[nameof(IsLookingAtMap)].Flag = value; } }
        public bool UpdateMapToolActors { get { return this[nameof(UpdateMapToolActors)].Flag; } set { this[nameof(UpdateMapToolActors)].Flag = value; } }
        public UArray<AnimMontage> UseLoopsFP { get { return new UArray<AnimMontage>(this[nameof(UseLoopsFP)].Address); } }
        public AnimMontage EndFP { get { return this[nameof(EndFP)].As<AnimMontage>(); } set { this["EndFP"] = value; } }
        public UArray<AnimMontage> UseLoopsTP { get { return new UArray<AnimMontage>(this[nameof(UseLoopsTP)].Address); } }
        public AnimMontage EndTP { get { return this[nameof(EndTP)].As<AnimMontage>(); } set { this["EndTP"] = value; } }
        public SceneComponent TerrainScannerRoot { get { return this[nameof(TerrainScannerRoot)].As<SceneComponent>(); } set { this["TerrainScannerRoot"] = value; } }
        public SceneCaptureComponent2D TerrainScannerCapture { get { return this[nameof(TerrainScannerCapture)].As<SceneCaptureComponent2D>(); } set { this["TerrainScannerCapture"] = value; } }
        public void Server_SetIslookingAtMap(bool lookingAtMap) { Invoke(nameof(Server_SetIslookingAtMap), lookingAtMap); }
        public void OnRep_IsLookingAtMap() { Invoke(nameof(OnRep_IsLookingAtMap)); }
    }
    public class TerrainScannerStaticMesh : StaticMeshComponent
    {
        public TerrainScannerStaticMesh(nint addr) : base(addr) { }
        public bool bVisibleAtBeginPlay { get { return this[nameof(bVisibleAtBeginPlay)].Flag; } set { this[nameof(bVisibleAtBeginPlay)].Flag = value; } }
        public bool bHideOnDeath { get { return this[nameof(bHideOnDeath)].Flag; } set { this[nameof(bHideOnDeath)].Flag = value; } }
        public bool bUseFogOfWar { get { return this[nameof(bUseFogOfWar)].Flag; } set { this[nameof(bUseFogOfWar)].Flag = value; } }
        public bool bVisibleOnScanner { get { return this[nameof(bVisibleOnScanner)].Flag; } set { this[nameof(bVisibleOnScanner)].Flag = value; } }
        public void SetVisibleOnScanner(bool InShowOnScanner) { Invoke(nameof(SetVisibleOnScanner), InShowOnScanner); }
        public void OnOwnerDeath(HealthComponentBase InHealthComponent) { Invoke(nameof(OnOwnerDeath), InHealthComponent); }
    }
    public class TerrainScannerSplineMesh : SplineMeshComponent
    {
        public TerrainScannerSplineMesh(nint addr) : base(addr) { }
        public bool bVisibleAtBeginPlay { get { return this[nameof(bVisibleAtBeginPlay)].Flag; } set { this[nameof(bVisibleAtBeginPlay)].Flag = value; } }
        public bool bHideOnDeath { get { return this[nameof(bHideOnDeath)].Flag; } set { this[nameof(bHideOnDeath)].Flag = value; } }
        public bool bUseFogOfWar { get { return this[nameof(bUseFogOfWar)].Flag; } set { this[nameof(bUseFogOfWar)].Flag = value; } }
        public bool bVisibleOnScanner { get { return this[nameof(bVisibleOnScanner)].Flag; } set { this[nameof(bVisibleOnScanner)].Flag = value; } }
        public void SetVisibleOnScanner(bool InShowOnScanner) { Invoke(nameof(SetVisibleOnScanner), InShowOnScanner); }
        public void OnOwnerDeath(HealthComponentBase InHealthComponent) { Invoke(nameof(OnOwnerDeath), InHealthComponent); }
    }
    public class TetherComponent : ActorComponent
    {
        public TetherComponent(nint addr) : base(addr) { }
        public Object OnPowerChanged { get { return this[nameof(OnPowerChanged)]; } set { this[nameof(OnPowerChanged)] = value; } }
        public Object OnConnectionChanged { get { return this[nameof(OnConnectionChanged)]; } set { this[nameof(OnConnectionChanged)] = value; } }
        public Object OnTetherMessage { get { return this[nameof(OnTetherMessage)]; } set { this[nameof(OnTetherMessage)] = value; } }
        public Object OnConnectionRangeUpdated { get { return this[nameof(OnConnectionRangeUpdated)]; } set { this[nameof(OnConnectionRangeUpdated)] = value; } }
        public MeshComponent TetherMesh { get { return this[nameof(TetherMesh)].As<MeshComponent>(); } set { this["TetherMesh"] = value; } }
        public bool AutoSetup { get { return this[nameof(AutoSetup)].Flag; } set { this[nameof(AutoSetup)].Flag = value; } }
        public UArray<TetherComponent> ConnectionHistory { get { return new UArray<TetherComponent>(this[nameof(ConnectionHistory)].Address); } }
        public Object ConnectionPointName { get { return this[nameof(ConnectionPointName)]; } set { this[nameof(ConnectionPointName)] = value; } }
        public TetherComponent ForwardConnection { get { return this[nameof(ForwardConnection)].As<TetherComponent>(); } set { this["ForwardConnection"] = value; } }
        public TetherComponent backConnection { get { return this[nameof(backConnection)].As<TetherComponent>(); } set { this["backConnection"] = value; } }
        public float ConnectionDistance { get { return this[nameof(ConnectionDistance)].GetValue<float>(); } set { this[nameof(ConnectionDistance)].SetValue<float>(value); } }
        public ETetherConnectionMode ConnectionMode { get { return (ETetherConnectionMode)this[nameof(ConnectionMode)].GetValue<int>(); } set { this[nameof(ConnectionMode)].SetValue<int>((int)value); } }
        public int ConnectionPriority { get { return this[nameof(ConnectionPriority)].GetValue<int>(); } set { this[nameof(ConnectionPriority)].SetValue<int>(value); } }
        public int ConnectionHistorySize { get { return this[nameof(ConnectionHistorySize)].GetValue<int>(); } set { this[nameof(ConnectionHistorySize)].SetValue<int>(value); } }
        public bool GeneratesPower { get { return this[nameof(GeneratesPower)].Flag; } set { this[nameof(GeneratesPower)].Flag = value; } }
        public bool PeriodicConnectionValidation { get { return this[nameof(PeriodicConnectionValidation)].Flag; } set { this[nameof(PeriodicConnectionValidation)].Flag = value; } }
        public bool hasPower { get { return this[nameof(hasPower)].Flag; } set { this[nameof(hasPower)].Flag = value; } }
        public void ToggleConnectionValidation(bool Enabled, bool reactivate) { Invoke(nameof(ToggleConnectionValidation), Enabled, reactivate); }
        public void StopLoSTimer() { Invoke(nameof(StopLoSTimer)); }
        public void StartLoSTimer() { Invoke(nameof(StartLoSTimer)); }
        public void SetupConnectionpoint(MeshComponent Mesh, Object SocketName) { Invoke(nameof(SetupConnectionpoint), Mesh, SocketName); }
        public void SetConnectionRange(float range) { Invoke(nameof(SetConnectionRange), range); }
        public void ResetConnectionHistory() { Invoke(nameof(ResetConnectionHistory)); }
        public void OnRep_HasPower() { Invoke(nameof(OnRep_HasPower)); }
        public void OnRep_ForwardConnection() { Invoke(nameof(OnRep_ForwardConnection)); }
        public void OnRep_BackConnection() { Invoke(nameof(OnRep_BackConnection)); }
        public void MessageTetherLine(Object Message, float Delay, ETetherMessageDirection messageDirection) { Invoke(nameof(MessageTetherLine), Message, Delay, messageDirection); }
        public void MessageBody(TetherMessageSettings Message) { Invoke(nameof(MessageBody), Message); }
        public bool IsStartOfLine() { return Invoke<bool>(nameof(IsStartOfLine)); }
        public bool IsFullyConnected() { return Invoke<bool>(nameof(IsFullyConnected)); }
        public bool IsEndOfLine() { return Invoke<bool>(nameof(IsEndOfLine)); }
        public bool IsConnected() { return Invoke<bool>(nameof(IsConnected)); }
        public TetherComponent GetTetherlineEnd(bool front) { return Invoke<TetherComponent>(nameof(GetTetherlineEnd), front); }
        public bool GetHasPower() { return Invoke<bool>(nameof(GetHasPower)); }
        public TetherComponent GetForwardConnection() { return Invoke<TetherComponent>(nameof(GetForwardConnection)); }
        public float GetConnectionRange() { return Invoke<float>(nameof(GetConnectionRange)); }
        public Vector GetConnectionPoint() { return Invoke<Vector>(nameof(GetConnectionPoint)); }
        public UArray<TetherComponent> GetConnectionHistory() { return Invoke<UArray<TetherComponent>>(nameof(GetConnectionHistory)); }
        public TetherComponent GetBackConnection() { return Invoke<TetherComponent>(nameof(GetBackConnection)); }
        public void DisconnectFromTetherLine(bool Deactivate) { Invoke(nameof(DisconnectFromTetherLine), Deactivate); }
        public bool ConnectToTetherLine() { return Invoke<bool>(nameof(ConnectToTetherLine)); }
    }
    public class Tether : CarriableItem
    {
        public Tether(nint addr) : base(addr) { }
        public SkeletalMeshComponent BaseMesh { get { return this[nameof(BaseMesh)].As<SkeletalMeshComponent>(); } set { this["BaseMesh"] = value; } }
        public InstantUsable UsableComponent { get { return this[nameof(UsableComponent)].As<InstantUsable>(); } set { this["UsableComponent"] = value; } }
        public CarriableComponent Carry { get { return this[nameof(Carry)].As<CarriableComponent>(); } set { this["Carry"] = value; } }
        public SphereComponent UseTrigger { get { return this[nameof(UseTrigger)].As<SphereComponent>(); } set { this["UseTrigger"] = value; } }
        public NiagaraComponent TetherBeam { get { return this[nameof(TetherBeam)].As<NiagaraComponent>(); } set { this["TetherBeam"] = value; } }
        public SphereComponent PysicalCollision { get { return this[nameof(PysicalCollision)].As<SphereComponent>(); } set { this["PysicalCollision"] = value; } }
        public DamageComponent ExplosionDamage { get { return this[nameof(ExplosionDamage)].As<DamageComponent>(); } set { this["ExplosionDamage"] = value; } }
        public ParticleSystem ExplosionParticle { get { return this[nameof(ExplosionParticle)].As<ParticleSystem>(); } set { this["ExplosionParticle"] = value; } }
        public SoundCue ExplosionSound { get { return this[nameof(ExplosionSound)].As<SoundCue>(); } set { this["ExplosionSound"] = value; } }
        public bool IsOnGround { get { return this[nameof(IsOnGround)].Flag; } set { this[nameof(IsOnGround)].Flag = value; } }
        public float KnockBackForce { get { return this[nameof(KnockBackForce)].GetValue<float>(); } set { this[nameof(KnockBackForce)].SetValue<float>(value); } }
        public void SetIsOnGround(bool IsOnGround) { Invoke(nameof(SetIsOnGround), IsOnGround); }
        public void OnDronePickup() { Invoke(nameof(OnDronePickup)); }
        public void OnDroneDrop() { Invoke(nameof(OnDroneDrop)); }
        public void OnClosed() { Invoke(nameof(OnClosed)); }
        public void Explode() { Invoke(nameof(Explode)); }
    }
    public class TetherStation : Actor
    {
        public TetherStation(nint addr) : base(addr) { }
        public SceneComponent SceneRoot { get { return this[nameof(SceneRoot)].As<SceneComponent>(); } set { this["SceneRoot"] = value; } }
        public SkeletalMeshComponent BaseMesh { get { return this[nameof(BaseMesh)].As<SkeletalMeshComponent>(); } set { this["BaseMesh"] = value; } }
        public Object FacilityGeneratorLineType { get { return this[nameof(FacilityGeneratorLineType)]; } set { this[nameof(FacilityGeneratorLineType)] = value; } }
        public bool AreGeneratorsReady { get { return this[nameof(AreGeneratorsReady)].Flag; } set { this[nameof(AreGeneratorsReady)].Flag = value; } }
        public bool FacilityActive { get { return this[nameof(FacilityActive)].Flag; } set { this[nameof(FacilityActive)].Flag = value; } }
        public void SpawnGeneratorLines(Transform startL, Transform startR, UArray<Transform> endL, UArray<Transform> endR, FacilityGeneratorLine outLineL, FacilityGeneratorLine outLineR) { Invoke(nameof(SpawnGeneratorLines), startL, startR, endL, endR, outLineL, outLineR); }
        public void SetGeneratorsReady(bool ready) { Invoke(nameof(SetGeneratorsReady), ready); }
        public void Onrep_FacilityActive() { Invoke(nameof(Onrep_FacilityActive)); }
        public void OnRep_AreGeneratorsReady() { Invoke(nameof(OnRep_AreGeneratorsReady)); }
        public void OnGeneratorsReady() { Invoke(nameof(OnGeneratorsReady)); }
        public void OnActivated() { Invoke(nameof(OnActivated)); }
        public void DisableShields() { Invoke(nameof(DisableShields)); }
        public void ActivateFacility() { Invoke(nameof(ActivateFacility)); }
    }
    public class TetherAnimInstance : AnimInstance
    {
        public TetherAnimInstance(nint addr) : base(addr) { }
        public bool SearchingForConnection { get { return this[nameof(SearchingForConnection)].Flag; } set { this[nameof(SearchingForConnection)].Flag = value; } }
    }
    public class Throwable : Interface
    {
        public Throwable(nint addr) : base(addr) { }
    }
    public class ThrownGrenadeItem : Item
    {
        public ThrownGrenadeItem(nint addr) : base(addr) { }
        public Object OnGrenadeThrown { get { return this[nameof(OnGrenadeThrown)]; } set { this[nameof(OnGrenadeThrown)] = value; } }
        public PlayerAnimInstance FPAnimInstance { get { return this[nameof(FPAnimInstance)].As<PlayerAnimInstance>(); } set { this["FPAnimInstance"] = value; } }
        public PlayerAnimInstance TPAnimInstance { get { return this[nameof(TPAnimInstance)].As<PlayerAnimInstance>(); } set { this["TPAnimInstance"] = value; } }
        public ItemCharacterAnimationSet CharacterAnimationSet { get { return this[nameof(CharacterAnimationSet)].As<ItemCharacterAnimationSet>(); } set { this["CharacterAnimationSet"] = value; } }
        public Vector ThrowOffset { get { return this[nameof(ThrowOffset)].As<Vector>(); } set { this["ThrowOffset"] = value; } }
        public float ThrowAngle { get { return this[nameof(ThrowAngle)].GetValue<float>(); } set { this[nameof(ThrowAngle)].SetValue<float>(value); } }
        public int MaxGrenades { get { return this[nameof(MaxGrenades)].GetValue<int>(); } set { this[nameof(MaxGrenades)].SetValue<int>(value); } }
        public int Grenades { get { return this[nameof(Grenades)].GetValue<int>(); } set { this[nameof(Grenades)].SetValue<int>(value); } }
        public float GrenadeCooldownRemaining { get { return this[nameof(GrenadeCooldownRemaining)].GetValue<float>(); } set { this[nameof(GrenadeCooldownRemaining)].SetValue<float>(value); } }
        public EThrownGrenadeItemState State { get { return (EThrownGrenadeItemState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public Object GrenadeClass { get { return this[nameof(GrenadeClass)]; } set { this[nameof(GrenadeClass)] = value; } }
        public GrenadeAnimationSet DefaultGrenadeAnimationSet { get { return this[nameof(DefaultGrenadeAnimationSet)].As<GrenadeAnimationSet>(); } set { this["DefaultGrenadeAnimationSet"] = value; } }
        public StaticMeshComponent GrenadeMeshInstance { get { return this[nameof(GrenadeMeshInstance)].As<StaticMeshComponent>(); } set { this["GrenadeMeshInstance"] = value; } }
        public FSDAudioComponent CookSound { get { return this[nameof(CookSound)].As<FSDAudioComponent>(); } set { this["CookSound"] = value; } }
        public bool CooldownIsDone { get { return this[nameof(CooldownIsDone)].Flag; } set { this[nameof(CooldownIsDone)].Flag = value; } }
        public bool HasRejoinedInitialized { get { return this[nameof(HasRejoinedInitialized)].Flag; } set { this[nameof(HasRejoinedInitialized)].Flag = value; } }
        public void UpdateCookTime(float Time) { Invoke(nameof(UpdateCookTime), Time); }
        public void SetRemainingCooldown(float CoolDown) { Invoke(nameof(SetRemainingCooldown), CoolDown); }
        public void Server_ThrowGrenade(Vector StartLocation, float cookTime) { Invoke(nameof(Server_ThrowGrenade), StartLocation, cookTime); }
        public void Server_SetState(EThrownGrenadeItemState itemState) { Invoke(nameof(Server_SetState), itemState); }
        public void Server_Resupply(float percentage) { Invoke(nameof(Server_Resupply), percentage); }
        public void ResupplyGrenadesAmount(int amount) { Invoke(nameof(ResupplyGrenadesAmount), amount); }
        public void ResupplyGrenades(float percentage) { Invoke(nameof(ResupplyGrenades), percentage); }
        public UArray<Vector> PredictGrenadePath() { return Invoke<UArray<Vector>>(nameof(PredictGrenadePath)); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_GrenadeCount() { Invoke(nameof(OnRep_GrenadeCount)); }
        public void OnRep_GrenadeClass() { Invoke(nameof(OnRep_GrenadeClass)); }
        public void OnGrenadeThrown__DelegateSignature() { Invoke(nameof(OnGrenadeThrown__DelegateSignature)); }
        public void GrenadeThrowFinished() { Invoke(nameof(GrenadeThrowFinished)); }
        public void GetPredictedLastPosAndVelocity(Vector Pos, Vector Velocity) { Invoke(nameof(GetPredictedLastPosAndVelocity), Pos, Velocity); }
        public float GetGrenadeThrowVelocity() { return Invoke<float>(nameof(GetGrenadeThrowVelocity)); }
        public Rotator GetGrenadeThrowRotation() { return Invoke<Rotator>(nameof(GetGrenadeThrowRotation)); }
        public float GetGrenadeGravity() { return Invoke<float>(nameof(GetGrenadeGravity)); }
        public float GetGrenadeDuration() { return Invoke<float>(nameof(GetGrenadeDuration)); }
    }
    public class TickableActionBase : BlueprintAsyncActionBase
    {
        public TickableActionBase(nint addr) : base(addr) { }
    }
    public class MiniTimerAction : TickableActionBase
    {
        public MiniTimerAction(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public Object OnTick { get { return this[nameof(OnTick)]; } set { this[nameof(OnTick)] = value; } }
        public void TickDelegate__DelegateSignature(float DeltaTime, float NormalizedTime) { Invoke(nameof(TickDelegate__DelegateSignature), DeltaTime, NormalizedTime); }
        public MiniTimerAction MiniTimer(Object WorldContext, float InDuration) { return Invoke<MiniTimerAction>(nameof(MiniTimer), WorldContext, InDuration); }
    }
    public class MultiTextCounterAction : TickableActionBase
    {
        public MultiTextCounterAction(nint addr) : base(addr) { }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public Object OnTick { get { return this[nameof(OnTick)]; } set { this[nameof(OnTick)] = value; } }
        public TextBlock TotalBlock { get { return this[nameof(TotalBlock)].As<TextBlock>(); } set { this["TotalBlock"] = value; } }
        public Object TotalFormat { get { return this[nameof(TotalFormat)]; } set { this[nameof(TotalFormat)] = value; } }
        public UArray<TextCounterEntry> Entries { get { return new UArray<TextCounterEntry>(this[nameof(Entries)].Address); } }
        public float CountSpeed { get { return this[nameof(CountSpeed)].GetValue<float>(); } set { this[nameof(CountSpeed)].SetValue<float>(value); } }
        public SoundCue CountingSound { get { return this[nameof(CountingSound)].As<SoundCue>(); } set { this["CountingSound"] = value; } }
        public AudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponent>(); } set { this["AudioComponent"] = value; } }
        public Object WorldContext { get { return this[nameof(WorldContext)].As<Object>(); } set { this["WorldContext"] = value; } }
        public void TickDelegate__DelegateSignature() { Invoke(nameof(TickDelegate__DelegateSignature)); }
        public MultiTextCounterAction StartMultiTextCounter(Object InWorldContext, TextBlock InTotalBlock, Object InTotalFormat, float InCountSpeed, SoundCue InCountingSound, UArray<TextCounterEntry> InEntries) { return Invoke<MultiTextCounterAction>(nameof(StartMultiTextCounter), InWorldContext, InTotalBlock, InTotalFormat, InCountSpeed, InCountingSound, InEntries); }
    }
    public class PendingLatentActionLibrary : BlueprintFunctionLibrary
    {
        public PendingLatentActionLibrary(nint addr) : base(addr) { }
        public void WaitOneFrame(Object WorldContextObject, LatentActionInfo LatentInfo) { Invoke(nameof(WaitOneFrame), WorldContextObject, LatentInfo); }
    }
    public class MoveComponentToAction : TickableActionBase
    {
        public MoveComponentToAction(nint addr) : base(addr) { }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public Object Completed { get { return this[nameof(Completed)]; } set { this[nameof(Completed)] = value; } }
        public MoveComponentToAction EaseComponentTo(Object WorldContext, SceneComponent InComponent, Transform InEndTransform, byte InEasingMode, bool InWorldSpace, float InDuration) { return Invoke<MoveComponentToAction>(nameof(EaseComponentTo), WorldContext, InComponent, InEndTransform, InEasingMode, InWorldSpace, InDuration); }
        public void CompletedDelegate__DelegateSignature(SceneComponent Component) { Invoke(nameof(CompletedDelegate__DelegateSignature), Component); }
    }
    public class TowerEventModule : FSDPawn
    {
        public TowerEventModule(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public EnemyHealthComponent Health { get { return this[nameof(Health)].As<EnemyHealthComponent>(); } set { this["Health"] = value; } }
        public ArmorHealthDamageComponent ArmorDamage { get { return this[nameof(ArmorDamage)].As<ArmorHealthDamageComponent>(); } set { this["ArmorDamage"] = value; } }
        public WeakpointGlowComponent WeakpointGlow { get { return this[nameof(WeakpointGlow)].As<WeakpointGlowComponent>(); } set { this["WeakpointGlow"] = value; } }
        public ParticleSystemComponent SmokeParticles { get { return this[nameof(SmokeParticles)].As<ParticleSystemComponent>(); } set { this["SmokeParticles"] = value; } }
        public Rotator MainBodyRotation { get { return this[nameof(MainBodyRotation)].As<Rotator>(); } set { this["MainBodyRotation"] = value; } }
        public SkeletalMesh DestroyedMesh { get { return this[nameof(DestroyedMesh)].As<SkeletalMesh>(); } set { this["DestroyedMesh"] = value; } }
        public SoundCue ExplosionSound { get { return this[nameof(ExplosionSound)].As<SoundCue>(); } set { this["ExplosionSound"] = value; } }
        public ParticleSystem ExplosionEffect { get { return this[nameof(ExplosionEffect)].As<ParticleSystem>(); } set { this["ExplosionEffect"] = value; } }
        public TowerEventModule PreviousModule { get { return this[nameof(PreviousModule)].As<TowerEventModule>(); } set { this["PreviousModule"] = value; } }
        public TowerEventModule NextModule { get { return this[nameof(NextModule)].As<TowerEventModule>(); } set { this["NextModule"] = value; } }
        public StaticMesh ArmorMesh { get { return this[nameof(ArmorMesh)].As<StaticMesh>(); } set { this["ArmorMesh"] = value; } }
        public int ArmorPieces { get { return this[nameof(ArmorPieces)].GetValue<int>(); } set { this[nameof(ArmorPieces)].SetValue<int>(value); } }
        public float ArmorLifetime { get { return this[nameof(ArmorLifetime)].GetValue<float>(); } set { this[nameof(ArmorLifetime)].SetValue<float>(value); } }
        public float ArmorPopForce { get { return this[nameof(ArmorPopForce)].GetValue<float>(); } set { this[nameof(ArmorPopForce)].SetValue<float>(value); } }
        public float ArmorShedDelay { get { return this[nameof(ArmorShedDelay)].GetValue<float>(); } set { this[nameof(ArmorShedDelay)].SetValue<float>(value); } }
        public UArray<StaticMeshComponent> ArmorMeshes { get { return new UArray<StaticMeshComponent>(this[nameof(ArmorMeshes)].Address); } }
        public void OnAttack() { Invoke(nameof(OnAttack)); }
        public void HideArmorPlates() { Invoke(nameof(HideArmorPlates)); }
        public void DestroyArmor() { Invoke(nameof(DestroyArmor)); }
    }
    public class AimingTowerEventModule : TowerEventModule
    {
        public AimingTowerEventModule(nint addr) : base(addr) { }
        public Rotator AimRotation { get { return this[nameof(AimRotation)].As<Rotator>(); } set { this["AimRotation"] = value; } }
        public Actor CurrentTarget { get { return this[nameof(CurrentTarget)].As<Actor>(); } set { this["CurrentTarget"] = value; } }
    }
    public class TracerManager : WorldSubsystem
    {
        public TracerManager(nint addr) : base(addr) { }
        public float StartScale { get { return this[nameof(StartScale)].GetValue<float>(); } set { this[nameof(StartScale)].SetValue<float>(value); } }
        public float WhizByStartDistance { get { return this[nameof(WhizByStartDistance)].GetValue<float>(); } set { this[nameof(WhizByStartDistance)].SetValue<float>(value); } }
        public float WhizByMaxDistanceFromTrajectory { get { return this[nameof(WhizByMaxDistanceFromTrajectory)].GetValue<float>(); } set { this[nameof(WhizByMaxDistanceFromTrajectory)].SetValue<float>(value); } }
        public float WhizBySpeed { get { return this[nameof(WhizBySpeed)].GetValue<float>(); } set { this[nameof(WhizBySpeed)].SetValue<float>(value); } }
        public void AddTracer(Vector Origin, Vector Destination, float Speed, ParticleSystem particle, float MinDistance, float Offset, ParticleSystem Trail) { Invoke(nameof(AddTracer), Origin, Destination, Speed, particle, MinDistance, Offset, Trail); }
    }
    public class TrackBuilderMovement : ActorComponent
    {
        public TrackBuilderMovement(nint addr) : base(addr) { }
        public float MovementSpeed { get { return this[nameof(MovementSpeed)].GetValue<float>(); } set { this[nameof(MovementSpeed)].SetValue<float>(value); } }
    }
    public class TrackMovementStateComponent : CharacterStateComponent
    {
        public TrackMovementStateComponent(nint addr) : base(addr) { }
        public AudioComponent AudioStartComponent { get { return this[nameof(AudioStartComponent)].As<AudioComponent>(); } set { this["AudioStartComponent"] = value; } }
        public AudioComponent AudioDuringComponent { get { return this[nameof(AudioDuringComponent)].As<AudioComponent>(); } set { this["AudioDuringComponent"] = value; } }
        public AudioComponent AudioStopComponent { get { return this[nameof(AudioStopComponent)].As<AudioComponent>(); } set { this["AudioStopComponent"] = value; } }
        public Object AudioOnStart { get { return this[nameof(AudioOnStart)]; } set { this[nameof(AudioOnStart)] = value; } }
        public Object AudioOnDuring { get { return this[nameof(AudioOnDuring)]; } set { this[nameof(AudioOnDuring)] = value; } }
        public Object AudioOnStop { get { return this[nameof(AudioOnStop)]; } set { this[nameof(AudioOnStop)] = value; } }
        public float AudioOnFadeOut { get { return this[nameof(AudioOnFadeOut)].GetValue<float>(); } set { this[nameof(AudioOnFadeOut)].SetValue<float>(value); } }
        public DialogDataAsset StateUpdateShout { get { return this[nameof(StateUpdateShout)].As<DialogDataAsset>(); } set { this["StateUpdateShout"] = value; } }
        public float StateUpdateShoutFrequencySecsMin { get { return this[nameof(StateUpdateShoutFrequencySecsMin)].GetValue<float>(); } set { this[nameof(StateUpdateShoutFrequencySecsMin)].SetValue<float>(value); } }
        public float StateUpdateShoutFrequencySecsMax { get { return this[nameof(StateUpdateShoutFrequencySecsMax)].GetValue<float>(); } set { this[nameof(StateUpdateShoutFrequencySecsMax)].SetValue<float>(value); } }
        public float AudioDuringSlidingSpeedParam { get { return this[nameof(AudioDuringSlidingSpeedParam)].GetValue<float>(); } set { this[nameof(AudioDuringSlidingSpeedParam)].SetValue<float>(value); } }
        public float SpeedTarget { get { return this[nameof(SpeedTarget)].GetValue<float>(); } set { this[nameof(SpeedTarget)].SetValue<float>(value); } }
        public float SpeedMin { get { return this[nameof(SpeedMin)].GetValue<float>(); } set { this[nameof(SpeedMin)].SetValue<float>(value); } }
        public float SpeedMax { get { return this[nameof(SpeedMax)].GetValue<float>(); } set { this[nameof(SpeedMax)].SetValue<float>(value); } }
        public float AccelerationBase { get { return this[nameof(AccelerationBase)].GetValue<float>(); } set { this[nameof(AccelerationBase)].SetValue<float>(value); } }
        public float AccelerationMultiplier { get { return this[nameof(AccelerationMultiplier)].GetValue<float>(); } set { this[nameof(AccelerationMultiplier)].SetValue<float>(value); } }
        public float DecelerationMultiplier { get { return this[nameof(DecelerationMultiplier)].GetValue<float>(); } set { this[nameof(DecelerationMultiplier)].SetValue<float>(value); } }
        public float AccelerationOnSlopeMultiplier { get { return this[nameof(AccelerationOnSlopeMultiplier)].GetValue<float>(); } set { this[nameof(AccelerationOnSlopeMultiplier)].SetValue<float>(value); } }
        public float DecelerationOnSlopeMultiplier { get { return this[nameof(DecelerationOnSlopeMultiplier)].GetValue<float>(); } set { this[nameof(DecelerationOnSlopeMultiplier)].SetValue<float>(value); } }
        public float StoppingDeceleration { get { return this[nameof(StoppingDeceleration)].GetValue<float>(); } set { this[nameof(StoppingDeceleration)].SetValue<float>(value); } }
        public float StoppingDistance { get { return this[nameof(StoppingDistance)].GetValue<float>(); } set { this[nameof(StoppingDistance)].SetValue<float>(value); } }
        public Object ConnectorClass { get { return this[nameof(ConnectorClass)]; } set { this[nameof(ConnectorClass)] = value; } }
        public ZipLineConnector Connector { get { return this[nameof(Connector)].As<ZipLineConnector>(); } set { this["Connector"] = value; } }
        public EExitTrackMode ExitMode { get { return (EExitTrackMode)this[nameof(ExitMode)].GetValue<int>(); } set { this[nameof(ExitMode)].SetValue<int>((int)value); } }
        public PipelineMovementData TrackMovementData { get { return this[nameof(TrackMovementData)].As<PipelineMovementData>(); } set { this["TrackMovementData"] = value; } }
        public void ServerExitMode(EExitTrackMode eMode) { Invoke(nameof(ServerExitMode), eMode); }
        public void ServerAddTemporaryAcceration(float Acceleration, float Duration) { Invoke(nameof(ServerAddTemporaryAcceration), Acceleration, Duration); }
        public void OnRep_TrackMovementdata(PipelineMovementData oldState) { Invoke(nameof(OnRep_TrackMovementdata), oldState); }
        public void JumpPressed() { Invoke(nameof(JumpPressed)); }
    }
    public class TreasureBox : TreasureContainer
    {
        public TreasureBox(nint addr) : base(addr) { }
        public RepairableComponent repairable { get { return this[nameof(repairable)].As<RepairableComponent>(); } set { this["repairable"] = value; } }
        public RepairableUsable RepairUsable { get { return this[nameof(RepairUsable)].As<RepairableUsable>(); } set { this["RepairUsable"] = value; } }
        public SingleUsableComponent HammeringUsable { get { return this[nameof(HammeringUsable)].As<SingleUsableComponent>(); } set { this["HammeringUsable"] = value; } }
        public TerrainPlacementComponent terrainPlacement { get { return this[nameof(terrainPlacement)].As<TerrainPlacementComponent>(); } set { this["terrainPlacement"] = value; } }
        public StaticMeshComponent MiddlePlane { get { return this[nameof(MiddlePlane)].As<StaticMeshComponent>(); } set { this["MiddlePlane"] = value; } }
        public SkeletalMeshComponent BoxMesh { get { return this[nameof(BoxMesh)].As<SkeletalMeshComponent>(); } set { this["BoxMesh"] = value; } }
        public UArray<Actor> Batteries { get { return new UArray<Actor>(this[nameof(Batteries)].Address); } }
        public float CollectActivationDelay { get { return this[nameof(CollectActivationDelay)].GetValue<float>(); } set { this[nameof(CollectActivationDelay)].SetValue<float>(value); } }
        public AnimSequenceBase OpenBoxAnim { get { return this[nameof(OpenBoxAnim)].As<AnimSequenceBase>(); } set { this["OpenBoxAnim"] = value; } }
        public float DelayToOpenAfterRepair { get { return this[nameof(DelayToOpenAfterRepair)].GetValue<float>(); } set { this[nameof(DelayToOpenAfterRepair)].SetValue<float>(value); } }
        public Object ResourceClass { get { return this[nameof(ResourceClass)]; } set { this[nameof(ResourceClass)] = value; } }
        public TreasureRewarder boxRewarder { get { return this[nameof(boxRewarder)].As<TreasureRewarder>(); } set { this["boxRewarder"] = value; } }
        public float HologramRotationSpeed { get { return this[nameof(HologramRotationSpeed)].GetValue<float>(); } set { this[nameof(HologramRotationSpeed)].SetValue<float>(value); } }
        public int ItemsInserted { get { return this[nameof(ItemsInserted)].GetValue<int>(); } set { this[nameof(ItemsInserted)].SetValue<int>(value); } }
        public bool IsTreasureAvailable { get { return this[nameof(IsTreasureAvailable)].Flag; } set { this[nameof(IsTreasureAvailable)].Flag = value; } }
        public void PlaceResources(ProceduralSetup Setup, float Radius, DebrisPositioning DebrisPositioning, UArray<Vector> locationsToAvoid, CurveFloat AvoidCostCurve) { Invoke(nameof(PlaceResources), Setup, Radius, DebrisPositioning, locationsToAvoid, AvoidCostCurve); }
        public void OnUsedEvent(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnUsedEvent), User, Key); }
        public void OnRepairedEvent(RepairableComponent repaired) { Invoke(nameof(OnRepairedEvent), repaired); }
        public void OnHammerProgress(float Progress) { Invoke(nameof(OnHammerProgress), Progress); }
        public void OnHammered(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnHammered), User, Key); }
        public void OnFullyRepairedEvent(RepairableComponent repaired) { Invoke(nameof(OnFullyRepairedEvent), repaired); }
        public void OnAllResourcesCollectedEvent(RepairableComponent repaired) { Invoke(nameof(OnAllResourcesCollectedEvent), repaired); }
        public void BP_OnCollectedTreasure(PlayerCharacter collector) { Invoke(nameof(BP_OnCollectedTreasure), collector); }
        public void AfterRepairDelay() { Invoke(nameof(AfterRepairDelay)); }
        public void ActivateCollection() { Invoke(nameof(ActivateCollection)); }
    }
    public class TreasureBoxAnimInstance : AnimInstance
    {
        public TreasureBoxAnimInstance(nint addr) : base(addr) { }
        public float BuildProgress { get { return this[nameof(BuildProgress)].GetValue<float>(); } set { this[nameof(BuildProgress)].SetValue<float>(value); } }
        public float PhysicsAlpha { get { return this[nameof(PhysicsAlpha)].GetValue<float>(); } set { this[nameof(PhysicsAlpha)].SetValue<float>(value); } }
        public bool IsTreasureAvailable { get { return this[nameof(IsTreasureAvailable)].Flag; } set { this[nameof(IsTreasureAvailable)].Flag = value; } }
        public bool IsLeftInserted { get { return this[nameof(IsLeftInserted)].Flag; } set { this[nameof(IsLeftInserted)].Flag = value; } }
        public bool IsRightInserted { get { return this[nameof(IsRightInserted)].Flag; } set { this[nameof(IsRightInserted)].Flag = value; } }
    }
    public class TreasureFunctionLibrary : BlueprintFunctionLibrary
    {
        public TreasureFunctionLibrary(nint addr) : base(addr) { }
    }
    public class TreasureRewarder : ActorComponent
    {
        public TreasureRewarder(nint addr) : base(addr) { }
    }
    public class SkinTreasureRewarder : TreasureRewarder
    {
        public SkinTreasureRewarder(nint addr) : base(addr) { }
        public ItemAquisitionSource AquisitionSource { get { return this[nameof(AquisitionSource)].As<ItemAquisitionSource>(); } set { this["AquisitionSource"] = value; } }
        public ItemSkin GivenSkin { get { return this[nameof(GivenSkin)].As<ItemSkin>(); } set { this["GivenSkin"] = value; } }
        public ItemID GivenSkinID { get { return this[nameof(GivenSkinID)].As<ItemID>(); } set { this["GivenSkinID"] = value; } }
    }
    public class VictoryPoseRewarder : TreasureRewarder
    {
        public VictoryPoseRewarder(nint addr) : base(addr) { }
        public VictoryPose GivenPose { get { return this[nameof(GivenPose)].As<VictoryPose>(); } set { this["GivenPose"] = value; } }
        public PlayerCharacterID GivenCharacterID { get { return this[nameof(GivenCharacterID)].As<PlayerCharacterID>(); } set { this["GivenCharacterID"] = value; } }
    }
    public class PickaxePartRewarder : TreasureRewarder
    {
        public PickaxePartRewarder(nint addr) : base(addr) { }
        public PickaxePart PickaxePart { get { return this[nameof(PickaxePart)].As<PickaxePart>(); } set { this["PickaxePart"] = value; } }
    }
    public class VanityItemRewarder : TreasureRewarder
    {
        public VanityItemRewarder(nint addr) : base(addr) { }
        public VanityItem GivenVanityItem { get { return this[nameof(GivenVanityItem)].As<VanityItem>(); } set { this["GivenVanityItem"] = value; } }
        public PlayerCharacterID GivenCharacterID { get { return this[nameof(GivenCharacterID)].As<PlayerCharacterID>(); } set { this["GivenCharacterID"] = value; } }
    }
    public class TreasureSettings : DataAsset
    {
        public TreasureSettings(nint addr) : base(addr) { }
        public UArray<ETreasureType> CrateTreasureTypes { get { return new UArray<ETreasureType>(this[nameof(CrateTreasureTypes)].Address); } }
        public Object CrateTreasureEmptyMsg { get { return this[nameof(CrateTreasureEmptyMsg)]; } set { this[nameof(CrateTreasureEmptyMsg)] = value; } }
        public UArray<ETreasureType> LostPackTreasureTypes { get { return new UArray<ETreasureType>(this[nameof(LostPackTreasureTypes)].Address); } }
        public Object LostPackEmptyMsg { get { return this[nameof(LostPackEmptyMsg)]; } set { this[nameof(LostPackEmptyMsg)] = value; } }
        public ItemAquisitionSource CrateAquisitionSource { get { return this[nameof(CrateAquisitionSource)].As<ItemAquisitionSource>(); } set { this["CrateAquisitionSource"] = value; } }
        public ItemAquisitionSource LostPackAquisitionSource { get { return this[nameof(LostPackAquisitionSource)].As<ItemAquisitionSource>(); } set { this["LostPackAquisitionSource"] = value; } }
        public RuntimeFloatCurve TreasureChanceMissionLengthCurve { get { return this[nameof(TreasureChanceMissionLengthCurve)].As<RuntimeFloatCurve>(); } set { this["TreasureChanceMissionLengthCurve"] = value; } }
        public UArray<SpecialEvent> TreasureEvents { get { return new UArray<SpecialEvent>(this[nameof(TreasureEvents)].Address); } }
        public UArray<SpecialChanceEventItem> SpecialChancedEvent { get { return new UArray<SpecialChanceEventItem>(this[nameof(SpecialChancedEvent)].Address); } }
        public UArray<VictoryPose> VictoryPoses { get { return new UArray<VictoryPose>(this[nameof(VictoryPoses)].Address); } }
        public UArray<ItemSkinSet> SkinSets { get { return new UArray<ItemSkinSet>(this[nameof(SkinSets)].Address); } }
        public UArray<DrinkableDataAsset> Drinks { get { return new UArray<DrinkableDataAsset>(this[nameof(Drinks)].Address); } }
    }
    public class TreeOfVanity : SavableDataAsset
    {
        public TreeOfVanity(nint addr) : base(addr) { }
        public UArray<VanityNode> Nodes { get { return new UArray<VanityNode>(this[nameof(Nodes)].Address); } }
        public void ClearNodes() { Invoke(nameof(ClearNodes)); }
        public void AddNode(Reward Reward, int NodeID, UArray<int> ConnectedNodes, bool isStartingNode, bool isBig, Vector2D Position) { Invoke(nameof(AddNode), Reward, NodeID, ConnectedNodes, isStartingNode, isBig, Position); }
    }
    public class TreeOfVanityItemWidget : UserWidget
    {
        public TreeOfVanityItemWidget(nint addr) : base(addr) { }
        public Reward Reward { get { return this[nameof(Reward)].As<Reward>(); } set { this["Reward"] = value; } }
        public Reward actualReward { get { return this[nameof(actualReward)].As<Reward>(); } set { this["actualReward"] = value; } }
        public bool bIsPrimaryReward { get { return this[nameof(bIsPrimaryReward)].Flag; } set { this[nameof(bIsPrimaryReward)].Flag = value; } }
        public bool bIsStartingNode { get { return this[nameof(bIsStartingNode)].Flag; } set { this[nameof(bIsStartingNode)].Flag = value; } }
        public UArray<TreeOfVanityItemWidget> ConnectedNodes { get { return new UArray<TreeOfVanityItemWidget>(this[nameof(ConnectedNodes)].Address); } }
        public int NodeID { get { return this[nameof(NodeID)].GetValue<int>(); } set { this[nameof(NodeID)].SetValue<int>(value); } }
        public bool bIsClickable { get { return this[nameof(bIsClickable)].Flag; } set { this[nameof(bIsClickable)].Flag = value; } }
        public Reward DefaultReward { get { return this[nameof(DefaultReward)].As<Reward>(); } set { this["DefaultReward"] = value; } }
        public UArray<UserWidget> NodeConnections { get { return new UArray<UserWidget>(this[nameof(NodeConnections)].Address); } }
        public bool bIsBought { get { return this[nameof(bIsBought)].Flag; } set { this[nameof(bIsBought)].Flag = value; } }
        public void SetIsBought(bool inIsBought) { Invoke(nameof(SetIsBought), inIsBought); }
        public void SetData(Reward InReward, bool inIsPrimaryReward, bool inIsStartingNode, UArray<TreeOfVanityItemWidget> inConnectedNodes, int inNodeID) { Invoke(nameof(SetData), InReward, inIsPrimaryReward, inIsStartingNode, inConnectedNodes, inNodeID); }
        public void OnDataUpdated() { Invoke(nameof(OnDataUpdated)); }
        public bool GetIsBought() { return Invoke<bool>(nameof(GetIsBought)); }
    }
    public class TremorAttackComponent : SpecialDamageAttackComponent
    {
        public TremorAttackComponent(nint addr) : base(addr) { }
        public bool IsAttackActive { get { return this[nameof(IsAttackActive)].Flag; } set { this[nameof(IsAttackActive)].Flag = value; } }
        public BoxComponent CollisionComponent { get { return this[nameof(CollisionComponent)].As<BoxComponent>(); } set { this["CollisionComponent"] = value; } }
        public ParticleSystemComponent ParticlesComponent { get { return this[nameof(ParticlesComponent)].As<ParticleSystemComponent>(); } set { this["ParticlesComponent"] = value; } }
        public float InitialParticlesDelay { get { return this[nameof(InitialParticlesDelay)].GetValue<float>(); } set { this[nameof(InitialParticlesDelay)].SetValue<float>(value); } }
        public float PostParticleDelay { get { return this[nameof(PostParticleDelay)].GetValue<float>(); } set { this[nameof(PostParticleDelay)].SetValue<float>(value); } }
        public float TargetMaxDistanceFromGround { get { return this[nameof(TargetMaxDistanceFromGround)].GetValue<float>(); } set { this[nameof(TargetMaxDistanceFromGround)].SetValue<float>(value); } }
        public float TimeBetweenDamageTicks { get { return this[nameof(TimeBetweenDamageTicks)].GetValue<float>(); } set { this[nameof(TimeBetweenDamageTicks)].SetValue<float>(value); } }
        public float LaunchForce { get { return this[nameof(LaunchForce)].GetValue<float>(); } set { this[nameof(LaunchForce)].SetValue<float>(value); } }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public void StopParticles() { Invoke(nameof(StopParticles)); }
        public void StartParticles() { Invoke(nameof(StartParticles)); }
        public void OnTargetExitedTrigger(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex) { Invoke(nameof(OnTargetExitedTrigger), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex); }
        public void OnTargetEnteredTrigger(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(OnTargetEnteredTrigger), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public void OnRep_IsAttackActive() { Invoke(nameof(OnRep_IsAttackActive)); }
        public bool IsInited() { return Invoke<bool>(nameof(IsInited)); }
        public void InitTremorAttack(BoxComponent Box, ParticleSystemComponent Particles) { Invoke(nameof(InitTremorAttack), Box, Particles); }
    }
    public class TunnelParameters : DataAsset
    {
        public TunnelParameters(nint addr) : base(addr) { }
        public FloodFillSettings PathfinderNoise { get { return this[nameof(PathfinderNoise)].As<FloodFillSettings>(); } set { this["PathfinderNoise"] = value; } }
        public float PathZPenalty { get { return this[nameof(PathZPenalty)].GetValue<float>(); } set { this[nameof(PathZPenalty)].SetValue<float>(value); } }
        public float PathDirectionPenalty { get { return this[nameof(PathDirectionPenalty)].GetValue<float>(); } set { this[nameof(PathDirectionPenalty)].SetValue<float>(value); } }
        public float PathEntranceAnglePenalty { get { return this[nameof(PathEntranceAnglePenalty)].GetValue<float>(); } set { this[nameof(PathEntranceAnglePenalty)].SetValue<float>(value); } }
        public float ObstacleCostScale { get { return this[nameof(ObstacleCostScale)].GetValue<float>(); } set { this[nameof(ObstacleCostScale)].SetValue<float>(value); } }
        public bool AllowBlockedEntrances { get { return this[nameof(AllowBlockedEntrances)].Flag; } set { this[nameof(AllowBlockedEntrances)].Flag = value; } }
        public bool PickBestMatchingEntrance { get { return this[nameof(PickBestMatchingEntrance)].Flag; } set { this[nameof(PickBestMatchingEntrance)].Flag = value; } }
    }
    public class TunnelSegmentSetting : DataAsset
    {
        public TunnelSegmentSetting(nint addr) : base(addr) { }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public FloodFillSettings PathfinderNoise { get { return this[nameof(PathfinderNoise)].As<FloodFillSettings>(); } set { this["PathfinderNoise"] = value; } }
        public FloodFillSettings CielingNoise { get { return this[nameof(CielingNoise)].As<FloodFillSettings>(); } set { this["CielingNoise"] = value; } }
        public FloodFillSettings WallNoise { get { return this[nameof(WallNoise)].As<FloodFillSettings>(); } set { this["WallNoise"] = value; } }
        public FloodFillSettings FloorNoise { get { return this[nameof(FloorNoise)].As<FloodFillSettings>(); } set { this["FloorNoise"] = value; } }
        public Vector2D VRange { get { return this[nameof(VRange)].As<Vector2D>(); } set { this["VRange"] = value; } }
        public Vector2D HRange { get { return this[nameof(HRange)].As<Vector2D>(); } set { this["HRange"] = value; } }
        public Vector2D Cielingheight { get { return this[nameof(Cielingheight)].As<Vector2D>(); } set { this["Cielingheight"] = value; } }
        public Vector2D FloorHeight { get { return this[nameof(FloorHeight)].As<Vector2D>(); } set { this["FloorHeight"] = value; } }
        public Vector2D CielingNoiseRange { get { return this[nameof(CielingNoiseRange)].As<Vector2D>(); } set { this["CielingNoiseRange"] = value; } }
        public Vector2D WallNoiseRange { get { return this[nameof(WallNoiseRange)].As<Vector2D>(); } set { this["WallNoiseRange"] = value; } }
        public Vector2D FloorNoiseRange { get { return this[nameof(FloorNoiseRange)].As<Vector2D>(); } set { this["FloorNoiseRange"] = value; } }
    }
    public class TunnelSettings : DataAsset
    {
        public TunnelSettings(nint addr) : base(addr) { }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public FloodFillSettings PathfinderNoise { get { return this[nameof(PathfinderNoise)].As<FloodFillSettings>(); } set { this["PathfinderNoise"] = value; } }
        public FloodFillSettings CielingNoise { get { return this[nameof(CielingNoise)].As<FloodFillSettings>(); } set { this["CielingNoise"] = value; } }
        public FloodFillSettings WallNoise { get { return this[nameof(WallNoise)].As<FloodFillSettings>(); } set { this["WallNoise"] = value; } }
        public FloodFillSettings FloorNoise { get { return this[nameof(FloorNoise)].As<FloodFillSettings>(); } set { this["FloorNoise"] = value; } }
        public Vector2D VRange { get { return this[nameof(VRange)].As<Vector2D>(); } set { this["VRange"] = value; } }
        public Vector2D HRange { get { return this[nameof(HRange)].As<Vector2D>(); } set { this["HRange"] = value; } }
        public Vector2D Cielingheight { get { return this[nameof(Cielingheight)].As<Vector2D>(); } set { this["Cielingheight"] = value; } }
        public Vector2D FloorHeight { get { return this[nameof(FloorHeight)].As<Vector2D>(); } set { this["FloorHeight"] = value; } }
        public Vector2D CielingNoiseRange { get { return this[nameof(CielingNoiseRange)].As<Vector2D>(); } set { this["CielingNoiseRange"] = value; } }
        public Vector2D WallNoiseRange { get { return this[nameof(WallNoiseRange)].As<Vector2D>(); } set { this["WallNoiseRange"] = value; } }
        public Vector2D FloorNoiseRange { get { return this[nameof(FloorNoiseRange)].As<Vector2D>(); } set { this["FloorNoiseRange"] = value; } }
    }
    public class TunnelSetting : DataAsset
    {
        public TunnelSetting(nint addr) : base(addr) { }
        public FloodFillSettings PathfinderNoise { get { return this[nameof(PathfinderNoise)].As<FloodFillSettings>(); } set { this["PathfinderNoise"] = value; } }
        public TunnelSegmentSetting BaseSegmentSetting { get { return this[nameof(BaseSegmentSetting)].As<TunnelSegmentSetting>(); } set { this["BaseSegmentSetting"] = value; } }
        public TunnelSegmentSetting TightBendSegmentSetting { get { return this[nameof(TightBendSegmentSetting)].As<TunnelSegmentSetting>(); } set { this["TightBendSegmentSetting"] = value; } }
        public TunnelSegmentSetting DirtSegmentSetting { get { return this[nameof(DirtSegmentSetting)].As<TunnelSegmentSetting>(); } set { this["DirtSegmentSetting"] = value; } }
        public TunnelSegmentSetting DirtOffsetSetting { get { return this[nameof(DirtOffsetSetting)].As<TunnelSegmentSetting>(); } set { this["DirtOffsetSetting"] = value; } }
        public UArray<TunnelSettingItem> VariationSegments { get { return new UArray<TunnelSettingItem>(this[nameof(VariationSegments)].Address); } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
    }
    public class TutorialContentWidget : FSDUserWidget
    {
        public TutorialContentWidget(nint addr) : base(addr) { }
        public Object OnTutorialFinished { get { return this[nameof(OnTutorialFinished)]; } set { this[nameof(OnTutorialFinished)] = value; } }
        public void OnTutorialFinished__DelegateSignature(TutorialContentWidget TutorialWidget) { Invoke(nameof(OnTutorialFinished__DelegateSignature), TutorialWidget); }
        public void OnShown() { Invoke(nameof(OnShown)); }
        public void OnRemoveWidget() { Invoke(nameof(OnRemoveWidget)); }
    }
    public class TutorialLevelWidget : FSDUserWidget
    {
        public TutorialLevelWidget(nint addr) : base(addr) { }
        public float DelayBetweenTutorials { get { return this[nameof(DelayBetweenTutorials)].GetValue<float>(); } set { this[nameof(DelayBetweenTutorials)].SetValue<float>(value); } }
        public void ShowTutorialWidget(Object TutorialWidget, bool ignoreQueue) { Invoke(nameof(ShowTutorialWidget), TutorialWidget, ignoreQueue); }
        public void RemoveTutorialWidget(TutorialContentWidget TutorialWidget) { Invoke(nameof(RemoveTutorialWidget), TutorialWidget); }
        public void RemoveAllTutorials() { Invoke(nameof(RemoveAllTutorials)); }
        public void OnTutorialFinished(TutorialContentWidget TutorialWidget) { Invoke(nameof(OnTutorialFinished), TutorialWidget); }
        public void OnNewActiveTutorial(TutorialContentWidget Widget) { Invoke(nameof(OnNewActiveTutorial), Widget); }
    }
    public class TutorialManager : Actor
    {
        public TutorialManager(nint addr) : base(addr) { }
        public float MinimumTimeBetweenTutorials { get { return this[nameof(MinimumTimeBetweenTutorials)].GetValue<float>(); } set { this[nameof(MinimumTimeBetweenTutorials)].SetValue<float>(value); } }
        public bool ResetTutorialsOnStart { get { return this[nameof(ResetTutorialsOnStart)].Flag; } set { this[nameof(ResetTutorialsOnStart)].Flag = value; } }
        public bool ShowTutorialsDebug { get { return this[nameof(ShowTutorialsDebug)].Flag; } set { this[nameof(ShowTutorialsDebug)].Flag = value; } }
        public Object PlayerController { get { return this[nameof(PlayerController)]; } set { this[nameof(PlayerController)] = value; } }
        public Object PlayerCharacter { get { return this[nameof(PlayerCharacter)]; } set { this[nameof(PlayerCharacter)] = value; } }
        public Object SaveGame { get { return this[nameof(SaveGame)]; } set { this[nameof(SaveGame)] = value; } }
        public UArray<Object> Tutorials { get { return new UArray<Object>(this[nameof(Tutorials)].Address); } }
        public Object ActiveTutorial { get { return this[nameof(ActiveTutorial)]; } set { this[nameof(ActiveTutorial)] = value; } }
    }
    public class TutorialWidget : FSDUserWidget
    {
        public TutorialWidget(nint addr) : base(addr) { }
        public float RemainingVisibleTime { get { return this[nameof(RemainingVisibleTime)].GetValue<float>(); } set { this[nameof(RemainingVisibleTime)].SetValue<float>(value); } }
        public void Show(Object Text, Object Title, Object TaskText, Texture2D Image, float Duration) { Invoke(nameof(Show), Text, Title, TaskText, Image, Duration); }
        public void OnShow(Object Text, Object Title, Object TaskText, Texture2D Image) { Invoke(nameof(OnShow), Text, Title, TaskText, Image); }
        public void OnHide(bool watched) { Invoke(nameof(OnHide), watched); }
        public void Hide(bool watched) { Invoke(nameof(Hide), watched); }
        public void ChangeHintDuration(float NewDuration) { Invoke(nameof(ChangeHintDuration), NewDuration); }
    }
    public class BTTask_TunnelToTarget : BTTaskNode
    {
        public BTTask_TunnelToTarget(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public float BurrowSpeed { get { return this[nameof(BurrowSpeed)].GetValue<float>(); } set { this[nameof(BurrowSpeed)].SetValue<float>(value); } }
        public float BurrowDuration { get { return this[nameof(BurrowDuration)].GetValue<float>(); } set { this[nameof(BurrowDuration)].SetValue<float>(value); } }
        public FloatInterval DurationClamp { get { return this[nameof(DurationClamp)].As<FloatInterval>(); } set { this["DurationClamp"] = value; } }
    }
    public class DroneMiningState : DroneStateComponentBase
    {
        public DroneMiningState(nint addr) : base(addr) { }
        public DroneMiningToolBase DroneMiningTool { get { return this[nameof(DroneMiningTool)].As<DroneMiningToolBase>(); } set { this["DroneMiningTool"] = value; } }
        public TerrainMaterial HeartStoneMateiral { get { return this[nameof(HeartStoneMateiral)].As<TerrainMaterial>(); } set { this["HeartStoneMateiral"] = value; } }
        public float StartMiningRange { get { return this[nameof(StartMiningRange)].GetValue<float>(); } set { this[nameof(StartMiningRange)].SetValue<float>(value); } }
        public float MiningRange { get { return this[nameof(MiningRange)].GetValue<float>(); } set { this[nameof(MiningRange)].SetValue<float>(value); } }
        public float SameHitRadius { get { return this[nameof(SameHitRadius)].GetValue<float>(); } set { this[nameof(SameHitRadius)].SetValue<float>(value); } }
        public float MineRadius { get { return this[nameof(MineRadius)].GetValue<float>(); } set { this[nameof(MineRadius)].SetValue<float>(value); } }
        public int MiningStrength { get { return this[nameof(MiningStrength)].GetValue<int>(); } set { this[nameof(MiningStrength)].SetValue<int>(value); } }
        public float EmbeddedSearchRadius { get { return this[nameof(EmbeddedSearchRadius)].GetValue<float>(); } set { this[nameof(EmbeddedSearchRadius)].SetValue<float>(value); } }
    }
    public class HeightenedSenseComponent : FloatPerkComponent
    {
        public HeightenedSenseComponent(nint addr) : base(addr) { }
        public PawnAffliction HeightenSenseAffliction { get { return this[nameof(HeightenSenseAffliction)].As<PawnAffliction>(); } set { this["HeightenSenseAffliction"] = value; } }
        public float AlertDistance { get { return this[nameof(AlertDistance)].GetValue<float>(); } set { this[nameof(AlertDistance)].SetValue<float>(value); } }
        public UArray<HeightenedSenseTracker> ActiveTrackers { get { return new UArray<HeightenedSenseTracker>(this[nameof(ActiveTrackers)].Address); } }
        public bool bAfflictionActivated { get { return this[nameof(bAfflictionActivated)].Flag; } set { this[nameof(bAfflictionActivated)].Flag = value; } }
        public void RemoveTracker(Actor TrackerActor) { Invoke(nameof(RemoveTracker), TrackerActor); }
        public void AddTracker(Actor TrackerActor) { Invoke(nameof(AddTracker), TrackerActor); }
    }
    public class UIFunctionLibrary : BlueprintFunctionLibrary
    {
        public UIFunctionLibrary(nint addr) : base(addr) { }
        public void SetLoadoutIcon(Object WorldContextObject, PlayerCharacterID characterID, int loadoutIndex, int iconIndex) { Invoke(nameof(SetLoadoutIcon), WorldContextObject, characterID, loadoutIndex, iconIndex); }
        public void RemoveItemUINotification(Object WorldContextObject, UArray<Object> Item, bool MatchChildNotifications) { Invoke(nameof(RemoveItemUINotification), WorldContextObject, Item, MatchChildNotifications); }
        public bool IsInItemUINotificationSet(Object WorldContextObject, Object Item) { return Invoke<bool>(nameof(IsInItemUINotificationSet), WorldContextObject, Item); }
        public long GetUnixTimeStamp() { return Invoke<long>(nameof(GetUnixTimeStamp)); }
        public int GetLoadoutIcon(Object WorldContextObject, PlayerCharacterID characterID, int loadoutIndex) { return Invoke<int>(nameof(GetLoadoutIcon), WorldContextObject, characterID, loadoutIndex); }
        public UArray<Object> FormatNewsTexts(UArray<Object> texts, int RandomSeed, NewsTextLists wordList, MissionNameBank MissionNameBank) { return Invoke<UArray<Object>>(nameof(FormatNewsTexts), texts, RandomSeed, wordList, MissionNameBank); }
        public void ClearAllItemUINotifications(Object WorldContextObject) { Invoke(nameof(ClearAllItemUINotifications), WorldContextObject); }
        public void CheckItemUINotification(Object WorldContextObject, UArray<Object> Item, bool HasNotification, bool MatchChildNotifications) { Invoke(nameof(CheckItemUINotification), WorldContextObject, Item, HasNotification, MatchChildNotifications); }
        public void AddItemUINotification(Object WorldContextObject, UArray<Object> Item) { Invoke(nameof(AddItemUINotification), WorldContextObject, Item); }
    }
    public class InfectionPointCleaningComponent : ActorComponent
    {
        public InfectionPointCleaningComponent(nint addr) : base(addr) { }
        public Object OnPointVacuumed { get { return this[nameof(OnPointVacuumed)]; } set { this[nameof(OnPointVacuumed)] = value; } }
        public Object OnPointFoamed { get { return this[nameof(OnPointFoamed)]; } set { this[nameof(OnPointFoamed)] = value; } }
        public bool bIsInitialized { get { return this[nameof(bIsInitialized)].Flag; } set { this[nameof(bIsInitialized)].Flag = value; } }
        public bool bHasBeenReplicated { get { return this[nameof(bHasBeenReplicated)].Flag; } set { this[nameof(bHasBeenReplicated)].Flag = value; } }
        public Object DifficultyModifiers { get { return this[nameof(DifficultyModifiers)]; } set { this[nameof(DifficultyModifiers)] = value; } }
        public NiagaraSystem CleanedParticles { get { return this[nameof(CleanedParticles)].As<NiagaraSystem>(); } set { this["CleanedParticles"] = value; } }
        public float particleScale { get { return this[nameof(particleScale)].GetValue<float>(); } set { this[nameof(particleScale)].SetValue<float>(value); } }
        public bool outerLayerCleaned { get { return this[nameof(outerLayerCleaned)].Flag; } set { this[nameof(outerLayerCleaned)].Flag = value; } }
        public UArray<byte> InfectionPoints { get { return new UArray<byte>(this[nameof(InfectionPoints)].Address); } }
        public UArray<MeshComponent> OuterLayerMeshes { get { return new UArray<MeshComponent>(this[nameof(OuterLayerMeshes)].Address); } }
        public UArray<MeshComponent> InnerLayerMeshes { get { return new UArray<MeshComponent>(this[nameof(InnerLayerMeshes)].Address); } }
        public void Reset() { Invoke(nameof(Reset)); }
        public void OnRep_InfectionPoints(UArray<byte> oldInfectionPoints) { Invoke(nameof(OnRep_InfectionPoints), oldInfectionPoints); }
        public void InitInfectionPoints(UArray<MeshComponent> outerMeshes, UArray<MeshComponent> innerMeshes) { Invoke(nameof(InitInfectionPoints), outerMeshes, innerMeshes); }
        public int GetRequiredCleanCount() { return Invoke<int>(nameof(GetRequiredCleanCount)); }
        public int GetRemainingInfectedPoints() { return Invoke<int>(nameof(GetRemainingInfectedPoints)); }
        public int GetNumberOfInfectedPoints() { return Invoke<int>(nameof(GetNumberOfInfectedPoints)); }
    }
    public class UpdateIsTargetAimingAtSelf : BTService
    {
        public UpdateIsTargetAimingAtSelf(nint addr) : base(addr) { }
        public BlackboardKeySelector TargetKey { get { return this[nameof(TargetKey)].As<BlackboardKeySelector>(); } set { this["TargetKey"] = value; } }
        public BlackboardKeySelector IsTargetAimingAtSelfKey { get { return this[nameof(IsTargetAimingAtSelfKey)].As<BlackboardKeySelector>(); } set { this["IsTargetAimingAtSelfKey"] = value; } }
        public float AimPointRadius { get { return this[nameof(AimPointRadius)].GetValue<float>(); } set { this[nameof(AimPointRadius)].SetValue<float>(value); } }
        public Vector SelfOffset { get { return this[nameof(SelfOffset)].As<Vector>(); } set { this["SelfOffset"] = value; } }
    }
    public class UpgradableGearComponent : ActorComponent
    {
        public UpgradableGearComponent(nint addr) : base(addr) { }
        public Object OnUpgradesAddedToItem { get { return this[nameof(OnUpgradesAddedToItem)]; } set { this[nameof(OnUpgradesAddedToItem)] = value; } }
        public bool bUpgradesAddedToItem { get { return this[nameof(bUpgradesAddedToItem)].Flag; } set { this[nameof(bUpgradesAddedToItem)].Flag = value; } }
        public ItemData ItemData { get { return this[nameof(ItemData)].As<ItemData>(); } set { this["ItemData"] = value; } }
        public UArray<UpgradeTier> UpgradeTiers { get { return new UArray<UpgradeTier>(this[nameof(UpgradeTiers)].Address); } }
        public OverclockBank OverclockBank { get { return this[nameof(OverclockBank)].As<OverclockBank>(); } set { this["OverclockBank"] = value; } }
        public UArray<ItemUpgrade> AllOverclocks { get { return new UArray<ItemUpgrade>(this[nameof(AllOverclocks)].Address); } }
        public Texture2D IconLine { get { return this[nameof(IconLine)].As<Texture2D>(); } set { this["IconLine"] = value; } }
        public Texture2D IconBG { get { return this[nameof(IconBG)].As<Texture2D>(); } set { this["IconBG"] = value; } }
        public Texture2D IconDetailed { get { return this[nameof(IconDetailed)].As<Texture2D>(); } set { this["IconDetailed"] = value; } }
        public Object PreviewImage { get { return this[nameof(PreviewImage)]; } set { this[nameof(PreviewImage)] = value; } }
        public Object PreviewActor { get { return this[nameof(PreviewActor)]; } set { this[nameof(PreviewActor)] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int CreditCost { get { return this[nameof(CreditCost)].GetValue<int>(); } set { this[nameof(CreditCost)].SetValue<int>(value); } }
        public Object ResourceCost { get { return this[nameof(ResourceCost)]; } set { this[nameof(ResourceCost)] = value; } }
        public int RequiredCharacterLevel { get { return this[nameof(RequiredCharacterLevel)].GetValue<int>(); } set { this[nameof(RequiredCharacterLevel)].SetValue<int>(value); } }
        public UArray<MasteryItem> masteryLevels { get { return new UArray<MasteryItem>(this[nameof(masteryLevels)].Address); } }
        public void UpgradesAddedToItem__DelegateSignature() { Invoke(nameof(UpgradesAddedToItem__DelegateSignature)); }
        public void SetGearStatText(GearStatEntry entry, Object Text) { Invoke(nameof(SetGearStatText), entry, Text); }
        public bool PurchaseUpgrade(ItemID ItemID, ItemUpgrade Upgrade, FSDPlayerController PlayerController, Object previewedCharacter) { return Invoke<bool>(nameof(PurchaseUpgrade), ItemID, Upgrade, PlayerController, previewedCharacter); }
        public bool PurchaseItem(Object WorldContextObject, ItemID ItemID) { return Invoke<bool>(nameof(PurchaseItem), WorldContextObject, ItemID); }
        public bool PlayerOwnesUpgradeInAllTiers(Object itemClass, Object WorldContextObject) { return Invoke<bool>(nameof(PlayerOwnesUpgradeInAllTiers), itemClass, WorldContextObject); }
        public void MirrorUpgradePreviewStatus(GearStatEntry from, GearStatEntry to) { Invoke(nameof(MirrorUpgradePreviewStatus), from, to); }
        public bool IsUpgradeEquipped(Object itemClass, ItemUpgrade Upgrade, FSDPlayerState Player) { return Invoke<bool>(nameof(IsUpgradeEquipped), itemClass, Upgrade, Player); }
        public bool IsTierUnLocked(Object WorldContextObject, Object itemClass, int tierIndex, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsTierUnLocked), WorldContextObject, itemClass, tierIndex, characterID); }
        public bool IsOverclockingEnabled(Object WorldContextObject, PlayerCharacterID characterID, Object itemClass) { return Invoke<bool>(nameof(IsOverclockingEnabled), WorldContextObject, characterID, itemClass); }
        public bool IsItemUnlocked(Object WorldContextObject, ItemID Item) { return Invoke<bool>(nameof(IsItemUnlocked), WorldContextObject, Item); }
        public bool IsItemOwned(Object WorldContextObject, ItemID Item) { return Invoke<bool>(nameof(IsItemOwned), WorldContextObject, Item); }
        public bool IsItemEquipped(Object WorldContextObject, ItemID ItemID) { return Invoke<bool>(nameof(IsItemEquipped), WorldContextObject, ItemID); }
        public int GetUpgradeTier(Object itemClass, ItemUpgrade ItemUpgrade) { return Invoke<int>(nameof(GetUpgradeTier), itemClass, ItemUpgrade); }
        public Object GetSourceGearName() { return Invoke<Object>(nameof(GetSourceGearName)); }
        public Object GetResourceCost() { return Invoke<Object>(nameof(GetResourceCost)); }
        public int GetRequiredCharacterLevel() { return Invoke<int>(nameof(GetRequiredCharacterLevel)); }
        public Texture2D GetPreviewImage() { return Invoke<Texture2D>(nameof(GetPreviewImage)); }
        public Object GetPreviewActorClass() { return Invoke<Object>(nameof(GetPreviewActorClass)); }
        public UArray<ItemUpgrade> GetOverClocks() { return Invoke<UArray<ItemUpgrade>>(nameof(GetOverClocks)); }
        public int GetMasteryProgress(Object WorldContextObject, ItemID ItemID, int maxMastery) { return Invoke<int>(nameof(GetMasteryProgress), WorldContextObject, ItemID, maxMastery); }
        public UArray<MasteryItem> GetMasteryLevels(ItemID ItemID) { return Invoke<UArray<MasteryItem>>(nameof(GetMasteryLevels), ItemID); }
        public bool GetMasteryForLevel(UArray<MasteryItem> masteryLevels, int Level, MasteryItem outLevel) { return Invoke<bool>(nameof(GetMasteryForLevel), masteryLevels, Level, outLevel); }
        public UArray<UpgradeTier> GetItemUpgradeTiers(Object itemClass) { return Invoke<UArray<UpgradeTier>>(nameof(GetItemUpgradeTiers), itemClass); }
        public EItemUpgradeStatus GetItemUpgradeStatus(Object WorldContextObject, Object itemClass, ItemUpgrade ItemUpgrade, PlayerCharacterID characterID) { return Invoke<EItemUpgradeStatus>(nameof(GetItemUpgradeStatus), WorldContextObject, itemClass, ItemUpgrade, characterID); }
        public UArray<ItemUpgrade> GetItemUpgradesFromSave(Object itemClass, Object upgradeClass, FSDPlayerState Player, byte upgradeIndex) { return Invoke<UArray<ItemUpgrade>>(nameof(GetItemUpgradesFromSave), itemClass, upgradeClass, Player, upgradeIndex); }
        public Object GetItemPreviewClassFromActor(Object Actor) { return Invoke<Object>(nameof(GetItemPreviewClassFromActor), Actor); }
        public Object GetItemPreviewClass(ItemID ItemID) { return Invoke<Object>(nameof(GetItemPreviewClass), ItemID); }
        public bool GetItemMasteryForLevel(ItemID ItemID, int Level, MasteryItem outLevel) { return Invoke<bool>(nameof(GetItemMasteryForLevel), ItemID, Level, outLevel); }
        public bool GetIsItemUpgradeEquipped(FSDPlayerState Player, Object itemClass, ItemUpgrade ItemUpgrade, PlayerCharacterID characterID) { return Invoke<bool>(nameof(GetIsItemUpgradeEquipped), Player, itemClass, ItemUpgrade, characterID); }
        public Texture2D GetIconLine() { return Invoke<Texture2D>(nameof(GetIconLine)); }
        public Texture2D GetIconDetailed() { return Invoke<Texture2D>(nameof(GetIconDetailed)); }
        public Texture2D GetIconBG() { return Invoke<Texture2D>(nameof(GetIconBG)); }
        public Object GetGearStatValue(GearStatEntry entry) { return Invoke<Object>(nameof(GetGearStatValue), entry); }
        public UArray<GearStatEntry> GetGearStats(FSDPlayerState PlayerState, Object actorClass) { return Invoke<UArray<GearStatEntry>>(nameof(GetGearStats), PlayerState, actorClass); }
        public Object GetGearSourceName(ItemID ItemID) { return Invoke<Object>(nameof(GetGearSourceName), ItemID); }
        public Object GetGearName() { return Invoke<Object>(nameof(GetGearName)); }
        public Object GetGearDescription() { return Invoke<Object>(nameof(GetGearDescription)); }
        public Object GetGearCategory() { return Invoke<Object>(nameof(GetGearCategory)); }
        public UArray<ItemUpgrade> GetEquippedUpgrades(Object itemClass, FSDPlayerState Player) { return Invoke<UArray<ItemUpgrade>>(nameof(GetEquippedUpgrades), itemClass, Player); }
        public ItemUpgrade GetEquippedUpgradeAtTier(Object itemClass, int tierIndex, PlayerCharacterID characterID, FSDPlayerState Player) { return Invoke<ItemUpgrade>(nameof(GetEquippedUpgradeAtTier), itemClass, tierIndex, characterID, Player); }
        public ItemUpgrade GetEquippedOverclock(Object WorldContextObject, Object itemClass) { return Invoke<ItemUpgrade>(nameof(GetEquippedOverclock), WorldContextObject, itemClass); }
        public UArray<ItemUpgrade> GetEquippableOverclocks(Object WorldContextObject, Object itemClass, PlayerCharacterID characterID) { return Invoke<UArray<ItemUpgrade>>(nameof(GetEquippableOverclocks), WorldContextObject, itemClass, characterID); }
        public int GetCreditCost() { return Invoke<int>(nameof(GetCreditCost)); }
        public UArray<CraftingCost> GetCraftingCost() { return Invoke<UArray<CraftingCost>>(nameof(GetCraftingCost)); }
        public int GetCharacterLevelRequiredForItem(ItemID ItemID) { return Invoke<int>(nameof(GetCharacterLevelRequiredForItem), ItemID); }
        public UArray<ItemUpgrade> GetAllUpgrades() { return Invoke<UArray<ItemUpgrade>>(nameof(GetAllUpgrades)); }
        public void ClearEquippedUpgrade(Object itemClass, int tierIndex, FSDPlayerState Player) { Invoke(nameof(ClearEquippedUpgrade), itemClass, tierIndex, Player); }
        public void CheckMasteryUnlocks(ItemID ItemID, FSDPlayerController Player) { Invoke(nameof(CheckMasteryUnlocks), ItemID, Player); }
        public bool CanItemOverclock(Object WorldContextObject, Object itemClass) { return Invoke<bool>(nameof(CanItemOverclock), WorldContextObject, itemClass); }
        public bool CanAffordUpgrade(Object WorldContextObject, ItemUpgrade Upgrade) { return Invoke<bool>(nameof(CanAffordUpgrade), WorldContextObject, Upgrade); }
        public bool CanAffordItem(Object WorldContextObject, ItemID ItemID) { return Invoke<bool>(nameof(CanAffordItem), WorldContextObject, ItemID); }
    }
    public class UpgradableItemComponent : UpgradableGearComponent
    {
        public UpgradableItemComponent(nint addr) : base(addr) { }
    }
    public class UpgradableBoscoComponent : UpgradableGearComponent
    {
        public UpgradableBoscoComponent(nint addr) : base(addr) { }
    }
    public class UpgradeSettings : DataAsset
    {
        public UpgradeSettings(nint addr) : base(addr) { }
        public UArray<int> ClassAUpgradeCosts { get { return new UArray<int>(this[nameof(ClassAUpgradeCosts)].Address); } }
        public UArray<int> ClassBUpgradeCosts { get { return new UArray<int>(this[nameof(ClassBUpgradeCosts)].Address); } }
        public UArray<int> GearAUpgradeCosts { get { return new UArray<int>(this[nameof(GearAUpgradeCosts)].Address); } }
        public UArray<int> GearBUpgradeCosts { get { return new UArray<int>(this[nameof(GearBUpgradeCosts)].Address); } }
        public UArray<int> ArmorUpgradeCosts { get { return new UArray<int>(this[nameof(ArmorUpgradeCosts)].Address); } }
        public UArray<int> PickaxeUpgradeCosts { get { return new UArray<int>(this[nameof(PickaxeUpgradeCosts)].Address); } }
        public UArray<int> ClassBoscoUpgradeCosts { get { return new UArray<int>(this[nameof(ClassBoscoUpgradeCosts)].Address); } }
        public UArray<UpgradeCostItem> ClassAResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(ClassAResourceCosts)].Address); } }
        public UArray<UpgradeCostItem> ClassBResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(ClassBResourceCosts)].Address); } }
        public UArray<UpgradeCostItem> GearAResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(GearAResourceCosts)].Address); } }
        public UArray<UpgradeCostItem> GearBResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(GearBResourceCosts)].Address); } }
        public UArray<UpgradeCostItem> ArmorResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(ArmorResourceCosts)].Address); } }
        public UArray<UpgradeCostItem> PickaxeResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(PickaxeResourceCosts)].Address); } }
        public UArray<UpgradeCostItem> ClassBoscoResourceCosts { get { return new UArray<UpgradeCostItem>(this[nameof(ClassBoscoResourceCosts)].Address); } }
    }
    public class RackableItemComponent : ActorComponent
    {
        public RackableItemComponent(nint addr) : base(addr) { }
        public Object OnRacked { get { return this[nameof(OnRacked)]; } set { this[nameof(OnRacked)] = value; } }
        public Object OnTakenFromRack { get { return this[nameof(OnTakenFromRack)]; } set { this[nameof(OnTakenFromRack)] = value; } }
        public Object ItemRackedText { get { return this[nameof(ItemRackedText)]; } set { this[nameof(ItemRackedText)] = value; } }
        public Object ItemUnRackedText { get { return this[nameof(ItemUnRackedText)]; } set { this[nameof(ItemUnRackedText)] = value; } }
        public bool AddToCharacterInventory { get { return this[nameof(AddToCharacterInventory)].Flag; } set { this[nameof(AddToCharacterInventory)].Flag = value; } }
        public int RackKey { get { return this[nameof(RackKey)].GetValue<int>(); } set { this[nameof(RackKey)].SetValue<int>(value); } }
    }
    public class ItemRackComponent : SingleUsableComponent
    {
        public ItemRackComponent(nint addr) : base(addr) { }
        public Object OnHasItemChanged { get { return this[nameof(OnHasItemChanged)]; } set { this[nameof(OnHasItemChanged)] = value; } }
        public UsableComponent UsableComponent { get { return this[nameof(UsableComponent)].As<UsableComponent>(); } set { this["UsableComponent"] = value; } }
        public SceneComponent AttachToComponent { get { return this[nameof(AttachToComponent)].As<SceneComponent>(); } set { this["AttachToComponent"] = value; } }
        public Object AttachPointSocket { get { return this[nameof(AttachPointSocket)]; } set { this[nameof(AttachPointSocket)] = value; } }
        public bool AttachToSocket { get { return this[nameof(AttachToSocket)].Flag; } set { this[nameof(AttachToSocket)].Flag = value; } }
        public int RackKey { get { return this[nameof(RackKey)].GetValue<int>(); } set { this[nameof(RackKey)].SetValue<int>(value); } }
        public RackableItemComponent Item { get { return this[nameof(Item)].As<RackableItemComponent>(); } set { this["Item"] = value; } }
        public void RackItem(Actor Item, PlayerCharacter Character) { Invoke(nameof(RackItem), Item, Character); }
        public void OnRep_Item(RackableItemComponent oldItem) { Invoke(nameof(OnRep_Item), oldItem); }
        public void InitializeRackedItem(RackableItemComponent rackable) { Invoke(nameof(InitializeRackedItem), rackable); }
        public bool HasRackedItem() { return Invoke<bool>(nameof(HasRackedItem)); }
        public bool CanRackItem(Actor Item) { return Invoke<bool>(nameof(CanRackItem), Item); }
    }
    public class UseAnimationSetting : DataAsset
    {
        public UseAnimationSetting(nint addr) : base(addr) { }
        public AnimMontage BeginFP { get { return this[nameof(BeginFP)].As<AnimMontage>(); } set { this["BeginFP"] = value; } }
        public UArray<AnimMontage> LoopsFP { get { return new UArray<AnimMontage>(this[nameof(LoopsFP)].Address); } }
        public AnimMontage EndFP { get { return this[nameof(EndFP)].As<AnimMontage>(); } set { this["EndFP"] = value; } }
        public AnimMontage BeginTP { get { return this[nameof(BeginTP)].As<AnimMontage>(); } set { this["BeginTP"] = value; } }
        public UArray<AnimMontage> LoopsTP { get { return new UArray<AnimMontage>(this[nameof(LoopsTP)].Address); } }
        public AnimMontage EndTP { get { return this[nameof(EndTP)].As<AnimMontage>(); } set { this["EndTP"] = value; } }
        public bool IsManuallyControlled { get { return this[nameof(IsManuallyControlled)].Flag; } set { this[nameof(IsManuallyControlled)].Flag = value; } }
        public bool BlockUseWhileActive { get { return this[nameof(BlockUseWhileActive)].Flag; } set { this[nameof(BlockUseWhileActive)].Flag = value; } }
        public float BlockUseWhileActiveDuration { get { return this[nameof(BlockUseWhileActiveDuration)].GetValue<float>(); } set { this[nameof(BlockUseWhileActiveDuration)].SetValue<float>(value); } }
    }
    public class BPInstantUsable : InstantUsable
    {
        public BPInstantUsable(nint addr) : base(addr) { }
        public bool BPCanUse(PlayerCharacter User, SceneComponent useCollider) { return Invoke<bool>(nameof(BPCanUse), User, useCollider); }
    }
    public class ShieldBoostUsable : InstantUsable
    {
        public ShieldBoostUsable(nint addr) : base(addr) { }
        public void OnCharacterBoosted(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(OnCharacterBoosted), User, Key); }
    }
    public class RepairableUsable : InstantUsable
    {
        public RepairableUsable(nint addr) : base(addr) { }
    }
    public class ContinuousUsableComponent : UsableComponent
    {
        public ContinuousUsableComponent(nint addr) : base(addr) { }
        public Object UseTick { get { return this[nameof(UseTick)]; } set { this[nameof(UseTick)] = value; } }
        public float TimeBetweenTicks { get { return this[nameof(TimeBetweenTicks)].GetValue<float>(); } set { this[nameof(TimeBetweenTicks)].SetValue<float>(value); } }
        public int userCount { get { return this[nameof(userCount)].GetValue<int>(); } set { this[nameof(userCount)].SetValue<int>(value); } }
        public bool Usable { get { return this[nameof(Usable)].Flag; } set { this[nameof(Usable)].Flag = value; } }
        public void SetCanUse(bool CanUse) { Invoke(nameof(SetCanUse), CanUse); }
        public bool IsBeingUsed() { return Invoke<bool>(nameof(IsBeingUsed)); }
    }
    public class OncePerPlayerUsableComponent : InstantUsable
    {
        public OncePerPlayerUsableComponent(nint addr) : base(addr) { }
        public Object OnUsersChangedEvent { get { return this[nameof(OnUsersChangedEvent)]; } set { this[nameof(OnUsersChangedEvent)] = value; } }
        public UArray<UniqueNetIdRepl> Users { get { return new UArray<UniqueNetIdRepl>(this[nameof(Users)].Address); } }
        public void OnUsersChanged(UArray<UniqueNetIdRepl> userList) { Invoke(nameof(OnUsersChanged), userList); }
        public void OnRep_Users() { Invoke(nameof(OnRep_Users)); }
    }
    public class EventRewarderUsableComponent : SingleUsableComponent
    {
        public EventRewarderUsableComponent(nint addr) : base(addr) { }
        public Object RewardUseText { get { return this[nameof(RewardUseText)]; } set { this[nameof(RewardUseText)] = value; } }
        public Object CreateUseText(int blankSchematicCount) { return Invoke<Object>(nameof(CreateUseText), blankSchematicCount); }
    }
    public class SpecialEventUsableComponent : SingleUsableComponent
    {
        public SpecialEventUsableComponent(nint addr) : base(addr) { }
    }
    public class ControlEnemyUsable : InstantUsable
    {
        public ControlEnemyUsable(nint addr) : base(addr) { }
    }
    public class UsableAggregator : ItemAggregator
    {
        public UsableAggregator(nint addr) : base(addr) { }
        public Object OnVisibilityChanged { get { return this[nameof(OnVisibilityChanged)]; } set { this[nameof(OnVisibilityChanged)] = value; } }
        public Object UsingText { get { return this[nameof(UsingText)]; } set { this[nameof(UsingText)] = value; } }
        public float GetProgress() { return Invoke<float>(nameof(GetProgress)); }
    }
    public class UseConditionSet : DataAsset
    {
        public UseConditionSet(nint addr) : base(addr) { }
        public UArray<UseConditionBase> Conditions { get { return new UArray<UseConditionBase>(this[nameof(Conditions)].Address); } }
    }
    public class UseConditionCollection : DataAsset
    {
        public UseConditionCollection(nint addr) : base(addr) { }
        public UArray<UseConditionBase> Conditions { get { return new UArray<UseConditionBase>(this[nameof(Conditions)].Address); } }
    }
    public class UseConditionBase : Object
    {
        public UseConditionBase(nint addr) : base(addr) { }
    }
    public class UseConditionGroup : UseConditionBase
    {
        public UseConditionGroup(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
        public UseConditionCollection Collection { get { return this[nameof(Collection)].As<UseConditionCollection>(); } set { this["Collection"] = value; } }
    }
    public class UseConditionGrounded : UseConditionBase
    {
        public UseConditionGrounded(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionIsOwner : UseConditionBase
    {
        public UseConditionIsOwner(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionSaluting : UseConditionBase
    {
        public UseConditionSaluting(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionCharacterState : UseConditionBase
    {
        public UseConditionCharacterState(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
        public UArray<Object> CharacterStates { get { return new UArray<Object>(this[nameof(CharacterStates)].Address); } }
    }
    public class UseConditionCarriedActor : UseConditionBase
    {
        public UseConditionCarriedActor(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
        public UArray<Object> Actors { get { return new UArray<Object>(this[nameof(Actors)].Address); } }
    }
    public class UseConditionIsCarrying : UseConditionBase
    {
        public UseConditionIsCarrying(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionEquippedItem : UseConditionBase
    {
        public UseConditionEquippedItem(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
        public UArray<Object> Items { get { return new UArray<Object>(this[nameof(Items)].Address); } }
    }
    public class UseConditionItemBlockAction : UseConditionBase
    {
        public UseConditionItemBlockAction(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionOwnerIsAlive : UseConditionBase
    {
        public UseConditionOwnerIsAlive(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionHasComponent : UseConditionBase
    {
        public UseConditionHasComponent(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
    }
    public class UseConditionMovementMode : UseConditionBase
    {
        public UseConditionMovementMode(nint addr) : base(addr) { }
        public bool Invert { get { return this[nameof(Invert)].Flag; } set { this[nameof(Invert)].Flag = value; } }
        public UArray<MovementModeCombo> MovementModes { get { return new UArray<MovementModeCombo>(this[nameof(MovementModes)].Address); } }
    }
    public class UsingStateComponent : CharacterStateComponent
    {
        public UsingStateComponent(nint addr) : base(addr) { }
    }
    public class SoapVacuumItem : PlagueCleanupItem
    {
        public SoapVacuumItem(nint addr) : base(addr) { }
        public CapsuleComponent VacuumCapsule { get { return this[nameof(VacuumCapsule)].As<CapsuleComponent>(); } set { this["VacuumCapsule"] = value; } }
        public NiagaraComponent NS_Vacuum_FP { get { return this[nameof(NS_Vacuum_FP)].As<NiagaraComponent>(); } set { this["NS_Vacuum_FP"] = value; } }
        public NiagaraComponent NS_Vacuum_TP { get { return this[nameof(NS_Vacuum_TP)].As<NiagaraComponent>(); } set { this["NS_Vacuum_TP"] = value; } }
        public Object OnCurrentVolumeChanged { get { return this[nameof(OnCurrentVolumeChanged)]; } set { this[nameof(OnCurrentVolumeChanged)] = value; } }
        public float VacuumCooldown { get { return this[nameof(VacuumCooldown)].GetValue<float>(); } set { this[nameof(VacuumCooldown)].SetValue<float>(value); } }
        public float VacuumRadius { get { return this[nameof(VacuumRadius)].GetValue<float>(); } set { this[nameof(VacuumRadius)].SetValue<float>(value); } }
        public float VacuumRange { get { return this[nameof(VacuumRange)].GetValue<float>(); } set { this[nameof(VacuumRange)].SetValue<float>(value); } }
        public float CurrentVacuumEffectStrenght { get { return this[nameof(CurrentVacuumEffectStrenght)].GetValue<float>(); } set { this[nameof(CurrentVacuumEffectStrenght)].SetValue<float>(value); } }
        public float MaxVacuumEffectStrength { get { return this[nameof(MaxVacuumEffectStrength)].GetValue<float>(); } set { this[nameof(MaxVacuumEffectStrength)].SetValue<float>(value); } }
        public float VacuumEffectFoamSuckTime { get { return this[nameof(VacuumEffectFoamSuckTime)].GetValue<float>(); } set { this[nameof(VacuumEffectFoamSuckTime)].SetValue<float>(value); } }
        public float LastPuddleSuckTime { get { return this[nameof(LastPuddleSuckTime)].GetValue<float>(); } set { this[nameof(LastPuddleSuckTime)].SetValue<float>(value); } }
        public void Server_StartVacuumingPuddle(Actor Target) { Invoke(nameof(Server_StartVacuumingPuddle), Target); }
        public void OnFoamPuddleCollected_Unreliable() { Invoke(nameof(OnFoamPuddleCollected_Unreliable)); }
        public void ItemEnterVacuum(PrimitiveComponent OverlappedComponent, Actor OtherActor, PrimitiveComponent OtherComp, int OtherBodyIndex, bool bFromSweep, HitResult SweepResult) { Invoke(nameof(ItemEnterVacuum), OverlappedComponent, OtherActor, OtherComp, OtherBodyIndex, bFromSweep, SweepResult); }
        public SceneComponent GetVacuumSource() { return Invoke<SceneComponent>(nameof(GetVacuumSource)); }
        public void All_Visual_PuddleStartCollect() { Invoke(nameof(All_Visual_PuddleStartCollect)); }
    }
    public class VacuumAnimInstance : CleanupToolAnimInstance
    {
        public VacuumAnimInstance(nint addr) : base(addr) { }
    }
    public class ValidationFunctionLibrary : BlueprintFunctionLibrary
    {
        public ValidationFunctionLibrary(nint addr) : base(addr) { }
        public void SetSelectedAssets(UArray<Object> Paths) { Invoke(nameof(SetSelectedAssets), Paths); }
    }
    public class ValidatorStrategy : Object
    {
        public ValidatorStrategy(nint addr) : base(addr) { }
    }
    public class SimpleNameStrategy : ValidatorStrategy
    {
        public SimpleNameStrategy(nint addr) : base(addr) { }
    }
    public class PrefixNameStrategy : SimpleNameStrategy
    {
        public PrefixNameStrategy(nint addr) : base(addr) { }
    }
    public class PostfixNameStrategy : SimpleNameStrategy
    {
        public PostfixNameStrategy(nint addr) : base(addr) { }
    }
    public class PreOrPostfixNameStrategy : SimpleNameStrategy
    {
        public PreOrPostfixNameStrategy(nint addr) : base(addr) { }
    }
    public class ContainsNameStrategy : SimpleNameStrategy
    {
        public ContainsNameStrategy(nint addr) : base(addr) { }
    }
    public class NotContainsNameStrategy : SimpleNameStrategy
    {
        public NotContainsNameStrategy(nint addr) : base(addr) { }
    }
    public class ValidDependenciesStrategy : ValidatorStrategy
    {
        public ValidDependenciesStrategy(nint addr) : base(addr) { }
    }
    public class ValidPathStrategy : ValidatorStrategy
    {
        public ValidPathStrategy(nint addr) : base(addr) { }
    }
    public class VanityAnimInstance : AnimInstance
    {
        public VanityAnimInstance(nint addr) : base(addr) { }
        public EVanitySlot VanitySlot { get { return (EVanitySlot)this[nameof(VanitySlot)].GetValue<int>(); } set { this[nameof(VanitySlot)].SetValue<int>((int)value); } }
        public bool ArmorCoversBeard { get { return this[nameof(ArmorCoversBeard)].Flag; } set { this[nameof(ArmorCoversBeard)].Flag = value; } }
        public Vector ArmorChestThickness { get { return this[nameof(ArmorChestThickness)].As<Vector>(); } set { this["ArmorChestThickness"] = value; } }
        public Rotator ArmorChestRotation { get { return this[nameof(ArmorChestRotation)].As<Rotator>(); } set { this["ArmorChestRotation"] = value; } }
        public Vector ExternalForce { get { return this[nameof(ExternalForce)].As<Vector>(); } set { this["ExternalForce"] = value; } }
        public float ExternalForceMultiplier { get { return this[nameof(ExternalForceMultiplier)].GetValue<float>(); } set { this[nameof(ExternalForceMultiplier)].SetValue<float>(value); } }
        public float MaxForce { get { return this[nameof(MaxForce)].GetValue<float>(); } set { this[nameof(MaxForce)].SetValue<float>(value); } }
        public bool AlwaysShowAnimEffects { get { return this[nameof(AlwaysShowAnimEffects)].Flag; } set { this[nameof(AlwaysShowAnimEffects)].Flag = value; } }
        public UArray<VanityAnimEffect> VanityAnimEffects { get { return new UArray<VanityAnimEffect>(this[nameof(VanityAnimEffects)].Address); } }
        public void UpdateMeshes() { Invoke(nameof(UpdateMeshes)); }
    }
    public class VanityTestCharacter : Character
    {
        public VanityTestCharacter(nint addr) : base(addr) { }
        public float ArmorThickness { get { return this[nameof(ArmorThickness)].GetValue<float>(); } set { this[nameof(ArmorThickness)].SetValue<float>(value); } }
        public float BeardThickness { get { return this[nameof(BeardThickness)].GetValue<float>(); } set { this[nameof(BeardThickness)].SetValue<float>(value); } }
        public bool ArmorCoversBeard { get { return this[nameof(ArmorCoversBeard)].Flag; } set { this[nameof(ArmorCoversBeard)].Flag = value; } }
        public Object VanityItems { get { return this[nameof(VanityItems)]; } set { this[nameof(VanityItems)] = value; } }
        public SkeletalMesh WeaponMesh { get { return this[nameof(WeaponMesh)].As<SkeletalMesh>(); } set { this["WeaponMesh"] = value; } }
        public void SetupVanity() { Invoke(nameof(SetupVanity)); }
    }
    public class VanityCharacter : Actor
    {
        public VanityCharacter(nint addr) : base(addr) { }
        public ChildActorComponent ChildActorComponent { get { return this[nameof(ChildActorComponent)].As<ChildActorComponent>(); } set { this["ChildActorComponent"] = value; } }
        public AnimSequenceBase Animation { get { return this[nameof(Animation)].As<AnimSequenceBase>(); } set { this["Animation"] = value; } }
        public SkinColorVanityItem skinColor { get { return this[nameof(skinColor)].As<SkinColorVanityItem>(); } set { this["skinColor"] = value; } }
        public BeardColorVanityItem BeardColor { get { return this[nameof(BeardColor)].As<BeardColorVanityItem>(); } set { this["BeardColor"] = value; } }
        public BeardColorVanityItem DynamicBeardColor { get { return this[nameof(DynamicBeardColor)].As<BeardColorVanityItem>(); } set { this["DynamicBeardColor"] = value; } }
        public HeadVanityItem Head { get { return this[nameof(Head)].As<HeadVanityItem>(); } set { this["Head"] = value; } }
        public EyeBrowsVanityItem Eyebrows { get { return this[nameof(Eyebrows)].As<EyeBrowsVanityItem>(); } set { this["Eyebrows"] = value; } }
        public SideburnsVanityItem Sideburns { get { return this[nameof(Sideburns)].As<SideburnsVanityItem>(); } set { this["Sideburns"] = value; } }
        public MoustacheVanityItem Moustache { get { return this[nameof(Moustache)].As<MoustacheVanityItem>(); } set { this["Moustache"] = value; } }
        public BeardVanityItem Beard { get { return this[nameof(Beard)].As<BeardVanityItem>(); } set { this["Beard"] = value; } }
        public ArmorVanityItem Armor { get { return this[nameof(Armor)].As<ArmorVanityItem>(); } set { this["Armor"] = value; } }
        public EArmorMeshType ArmorMeshType { get { return (EArmorMeshType)this[nameof(ArmorMeshType)].GetValue<int>(); } set { this[nameof(ArmorMeshType)].SetValue<int>((int)value); } }
        public ArmorMaterialVanityItem ArmorColor { get { return this[nameof(ArmorColor)].As<ArmorMaterialVanityItem>(); } set { this["ArmorColor"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public SkeletalMeshComponent BodyMesh { get { return this[nameof(BodyMesh)].As<SkeletalMeshComponent>(); } set { this["BodyMesh"] = value; } }
        public BeardColorVanityItem DefaultHairColor { get { return this[nameof(DefaultHairColor)].As<BeardColorVanityItem>(); } set { this["DefaultHairColor"] = value; } }
        public MaterialInterface DefaultArmorMaterial { get { return this[nameof(DefaultArmorMaterial)].As<MaterialInterface>(); } set { this["DefaultArmorMaterial"] = value; } }
        public Object itemClass { get { return this[nameof(itemClass)]; } set { this[nameof(itemClass)] = value; } }
        public ItemSkin Framework { get { return this[nameof(Framework)].As<ItemSkin>(); } set { this["Framework"] = value; } }
        public ItemSkin Paintjob { get { return this[nameof(Paintjob)].As<ItemSkin>(); } set { this["Paintjob"] = value; } }
        public void DisplayVanity() { Invoke(nameof(DisplayVanity)); }
        public void Clean() { Invoke(nameof(Clean)); }
    }
    public class VanityFunctionLibrary : BlueprintFunctionLibrary
    {
        public VanityFunctionLibrary(nint addr) : base(addr) { }
        public void RandomizeVanityLoadout(Object WorldContextObject, PlayerCharacter Character, DetailedTagSet Filter) { Invoke(nameof(RandomizeVanityLoadout), WorldContextObject, Character, Filter); }
        public void RandomizeAllRandomVanityLoadout(PlayerCharacter currentCharacter) { Invoke(nameof(RandomizeAllRandomVanityLoadout), currentCharacter); }
        public void CopyPasteVanityLoadout(Object WorldContextObject, PlayerCharacterID PlayerId, int fromIndex, int toIndex) { Invoke(nameof(CopyPasteVanityLoadout), WorldContextObject, PlayerId, fromIndex, toIndex); }
    }
    public class IconGenerationBase : Actor
    {
        public IconGenerationBase(nint addr) : base(addr) { }
        public SceneCaptureComponent2D ActiveCaptureComponent { get { return this[nameof(ActiveCaptureComponent)].As<SceneCaptureComponent2D>(); } set { this["ActiveCaptureComponent"] = value; } }
        public MaterialInterface DownScaleMaterial { get { return this[nameof(DownScaleMaterial)].As<MaterialInterface>(); } set { this["DownScaleMaterial"] = value; } }
    }
    public class IconGenerationCameraKey : DataAsset
    {
        public IconGenerationCameraKey(nint addr) : base(addr) { }
    }
    public class IconSceneCaptureComponent : SceneCaptureComponent2D
    {
        public IconSceneCaptureComponent(nint addr) : base(addr) { }
        public IconGenerationCameraKey CameraKey { get { return this[nameof(CameraKey)].As<IconGenerationCameraKey>(); } set { this["CameraKey"] = value; } }
    }
    public class IconGenerationCharacter : IconGenerationBase
    {
        public IconGenerationCharacter(nint addr) : base(addr) { }
        public MaterialInterface OrigBaseMaterial { get { return this[nameof(OrigBaseMaterial)].As<MaterialInterface>(); } set { this["OrigBaseMaterial"] = value; } }
        public SkeletalMeshComponent Mesh { get { return this[nameof(Mesh)].As<SkeletalMeshComponent>(); } set { this["Mesh"] = value; } }
        public SkeletalMeshComponent BodyMesh { get { return this[nameof(BodyMesh)].As<SkeletalMeshComponent>(); } set { this["BodyMesh"] = value; } }
        public BeardColorVanityItem HairColor { get { return this[nameof(HairColor)].As<BeardColorVanityItem>(); } set { this["HairColor"] = value; } }
        public MaterialInterface ArmorMaterial { get { return this[nameof(ArmorMaterial)].As<MaterialInterface>(); } set { this["ArmorMaterial"] = value; } }
        public UArray<IconSceneCaptureComponent> CaptureComponents { get { return new UArray<IconSceneCaptureComponent>(this[nameof(CaptureComponents)].Address); } }
    }
    public class PickaxeIconSceneCaptureComponent : SceneCaptureComponent2D
    {
        public PickaxeIconSceneCaptureComponent(nint addr) : base(addr) { }
        public bool bIsFullView { get { return this[nameof(bIsFullView)].Flag; } set { this[nameof(bIsFullView)].Flag = value; } }
        public EPickaxePartLocation CameraKey { get { return (EPickaxePartLocation)this[nameof(CameraKey)].GetValue<int>(); } set { this[nameof(CameraKey)].SetValue<int>((int)value); } }
    }
    public class IconGenerationPickaxe : IconGenerationBase
    {
        public IconGenerationPickaxe(nint addr) : base(addr) { }
        public UArray<PickaxeIconSceneCaptureComponent> CaptureComponents { get { return new UArray<PickaxeIconSceneCaptureComponent>(this[nameof(CaptureComponents)].Address); } }
    }
    public class WeaponIconSceneCaptureComponent : SceneCaptureComponent2D
    {
        public WeaponIconSceneCaptureComponent(nint addr) : base(addr) { }
        public IconGenerationCameraKey CameraKey { get { return this[nameof(CameraKey)].As<IconGenerationCameraKey>(); } set { this["CameraKey"] = value; } }
    }
    public class IconGenerationWeapon : IconGenerationBase
    {
        public IconGenerationWeapon(nint addr) : base(addr) { }
        public UArray<WeaponIconSceneCaptureComponent> CaptureComponents { get { return new UArray<WeaponIconSceneCaptureComponent>(this[nameof(CaptureComponents)].Address); } }
    }
    public class VanityEventSourceDataAsset : DataAsset
    {
        public VanityEventSourceDataAsset(nint addr) : base(addr) { }
        public VanityEventSource EventSource { get { return this[nameof(EventSource)].As<VanityEventSource>(); } set { this["EventSource"] = value; } }
        public Object VanityTags { get { return this[nameof(VanityTags)]; } set { this[nameof(VanityTags)] = value; } }
    }
    public class TagVanityCategory : DetailedTagCategory
    {
        public TagVanityCategory(nint addr) : base(addr) { }
        public int SortingPriority { get { return this[nameof(SortingPriority)].GetValue<int>(); } set { this[nameof(SortingPriority)].SetValue<int>(value); } }
    }
    public class TagVanity : DetailedTag
    {
        public TagVanity(nint addr) : base(addr) { }
        public TagVanityCategory Category { get { return this[nameof(Category)].As<TagVanityCategory>(); } set { this["Category"] = value; } }
    }
    public class TagVanityGeneral : TagVanity
    {
        public TagVanityGeneral(nint addr) : base(addr) { }
    }
    public class TagVanityStyle : TagVanity
    {
        public TagVanityStyle(nint addr) : base(addr) { }
    }
    public class TagVanityHeadwear : TagVanity
    {
        public TagVanityHeadwear(nint addr) : base(addr) { }
    }
    public class TagVanityBeards : TagVanity
    {
        public TagVanityBeards(nint addr) : base(addr) { }
    }
    public class TagVanityMoustaches : TagVanity
    {
        public TagVanityMoustaches(nint addr) : base(addr) { }
    }
    public class TagVanityEyebrows : TagVanity
    {
        public TagVanityEyebrows(nint addr) : base(addr) { }
    }
    public class TagVanitySideburns : TagVanity
    {
        public TagVanitySideburns(nint addr) : base(addr) { }
    }
    public class TagVanitySeasonalEvent : TagVanity
    {
        public TagVanitySeasonalEvent(nint addr) : base(addr) { }
    }
    public class VanityMasteryLibrary : BlueprintFunctionLibrary
    {
        public VanityMasteryLibrary(nint addr) : base(addr) { }
        public void ResetVanityMasteryXP(Object WorldContext) { Invoke(nameof(ResetVanityMasteryXP), WorldContext); }
        public void MarkFashionitesAwardedForOldPurchasesSeen(Object WorldContext) { Invoke(nameof(MarkFashionitesAwardedForOldPurchasesSeen), WorldContext); }
        public VanityMasterySettings GetVanityMasterySettings() { return Invoke<VanityMasterySettings>(nameof(GetVanityMasterySettings)); }
        public VanityMasterySave GetVanityMasterySave(Object WorldContext) { return Invoke<VanityMasterySave>(nameof(GetVanityMasterySave), WorldContext); }
        public int GetVanityMasteryFashioniteForLevel(int InCurrentLevel) { return Invoke<int>(nameof(GetVanityMasteryFashioniteForLevel), InCurrentLevel); }
        public int GetFashionitesAwaredForOldPurchases(Object WorldContext) { return Invoke<int>(nameof(GetFashionitesAwaredForOldPurchases), WorldContext); }
        public float CalculateVanityMasteryLevelProgress(int Level, int XP) { return Invoke<float>(nameof(CalculateVanityMasteryLevelProgress), Level, XP); }
        public VanityMasteryResult AddVanityMasteryXPFromCost(Object WorldContext, UArray<CraftingCost> Cost, PlayerCharacterID characterID) { return Invoke<VanityMasteryResult>(nameof(AddVanityMasteryXPFromCost), WorldContext, Cost, characterID); }
        public VanityMasteryResult AddVanityMasteryXP(Object WorldContext, int XP, PlayerCharacterID PlayerId) { return Invoke<VanityMasteryResult>(nameof(AddVanityMasteryXP), WorldContext, XP, PlayerId); }
    }
    public class VanitySchematicBank : SchematicBankBase
    {
        public VanitySchematicBank(nint addr) : base(addr) { }
        public SchematicCategory SchematicCategory { get { return this[nameof(SchematicCategory)].As<SchematicCategory>(); } set { this["SchematicCategory"] = value; } }
        public Object VanityItems { get { return this[nameof(VanityItems)]; } set { this[nameof(VanityItems)] = value; } }
        public void AppendItems(UArray<VanityItem> toArray) { Invoke(nameof(AppendItems), toArray); }
    }
    public class VanitySettings : DataAsset
    {
        public VanitySettings(nint addr) : base(addr) { }
        public VanityItem MedbayArmorItem { get { return this[nameof(MedbayArmorItem)].As<VanityItem>(); } set { this["MedbayArmorItem"] = value; } }
        public UArray<VanityItem> MedbayArmorMaterials { get { return new UArray<VanityItem>(this[nameof(MedbayArmorMaterials)].Address); } }
        public DLCBase AlwaysLockedDLC { get { return this[nameof(AlwaysLockedDLC)].As<DLCBase>(); } set { this["AlwaysLockedDLC"] = value; } }
        public VanityTagSettings VanityTagSettings { get { return this[nameof(VanityTagSettings)].As<VanityTagSettings>(); } set { this["VanityTagSettings"] = value; } }
        public VanityMasterySettings MasterySettings { get { return this[nameof(MasterySettings)].As<VanityMasterySettings>(); } set { this["MasterySettings"] = value; } }
        public ResourceSpawner FashioniteSpawn { get { return this[nameof(FashioniteSpawn)].As<ResourceSpawner>(); } set { this["FashioniteSpawn"] = value; } }
        public UArray<Texture2D> VanityCategoryIcons { get { return new UArray<Texture2D>(this[nameof(VanityCategoryIcons)].Address); } }
        public Object ValidIDs { get { return this[nameof(ValidIDs)]; } set { this[nameof(ValidIDs)] = value; } }
        public Object ItemMap { get { return this[nameof(ItemMap)]; } set { this[nameof(ItemMap)] = value; } }
        public Object GlobalItems { get { return this[nameof(GlobalItems)]; } set { this[nameof(GlobalItems)] = value; } }
        public Object StoreItems { get { return this[nameof(StoreItems)]; } set { this[nameof(StoreItems)] = value; } }
        public Object TreassureItems { get { return this[nameof(TreassureItems)]; } set { this[nameof(TreassureItems)] = value; } }
        public bool HasNewVanityNotification(Object WorldContextObject, EVanitySlot Slot, PlayerCharacterID characterID) { return Invoke<bool>(nameof(HasNewVanityNotification), WorldContextObject, Slot, characterID); }
        public Texture2D GetVanityCategoryIcon(EVanitySlot Slot) { return Invoke<Texture2D>(nameof(GetVanityCategoryIcon), Slot); }
        public void GetUnlockedStoreVanityCount(Object WorldContextObject, EVanitySlot Slot, PlayerCharacterID characterID, int owned, int Total) { Invoke(nameof(GetUnlockedStoreVanityCount), WorldContextObject, Slot, characterID, owned, Total); }
    }
    public class VanityTattoo : DataAsset
    {
        public VanityTattoo(nint addr) : base(addr) { }
        public Object Texture { get { return this[nameof(Texture)]; } set { this[nameof(Texture)] = value; } }
        public Vector2D Location { get { return this[nameof(Location)].As<Vector2D>(); } set { this["Location"] = value; } }
        public float RotationAngle { get { return this[nameof(RotationAngle)].GetValue<float>(); } set { this[nameof(RotationAngle)].SetValue<float>(value); } }
        public float ScaleBase { get { return this[nameof(ScaleBase)].GetValue<float>(); } set { this[nameof(ScaleBase)].SetValue<float>(value); } }
        public float ScaleStretch { get { return this[nameof(ScaleStretch)].GetValue<float>(); } set { this[nameof(ScaleStretch)].SetValue<float>(value); } }
    }
    public class VeinResourceCreator : ResourceCreator
    {
        public VeinResourceCreator(nint addr) : base(addr) { }
        public VeinResourceData Resource { get { return this[nameof(Resource)].As<VeinResourceData>(); } set { this["Resource"] = value; } }
        public DebrisPositioning Positioning { get { return this[nameof(Positioning)].As<DebrisPositioning>(); } set { this["Positioning"] = value; } }
        public ECarveFilterType CarveType { get { return (ECarveFilterType)this[nameof(CarveType)].GetValue<int>(); } set { this[nameof(CarveType)].SetValue<int>((int)value); } }
        public float SegmentMaxDot { get { return this[nameof(SegmentMaxDot)].GetValue<float>(); } set { this[nameof(SegmentMaxDot)].SetValue<float>(value); } }
        public float VeinWorldHorizontalMaxDot { get { return this[nameof(VeinWorldHorizontalMaxDot)].GetValue<float>(); } set { this[nameof(VeinWorldHorizontalMaxDot)].SetValue<float>(value); } }
        public float VeinWorldHorizontalMinDot { get { return this[nameof(VeinWorldHorizontalMinDot)].GetValue<float>(); } set { this[nameof(VeinWorldHorizontalMinDot)].SetValue<float>(value); } }
        public RandRange VeinLength { get { return this[nameof(VeinLength)].As<RandRange>(); } set { this["VeinLength"] = value; } }
        public FloodFillSettings Noise { get { return this[nameof(Noise)].As<FloodFillSettings>(); } set { this["Noise"] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public float NoiseRange { get { return this[nameof(NoiseRange)].GetValue<float>(); } set { this[nameof(NoiseRange)].SetValue<float>(value); } }
        public UArray<Object> Debris { get { return new UArray<Object>(this[nameof(Debris)].Address); } }
    }
    public class VeinResourceData : ResourceData
    {
        public VeinResourceData(nint addr) : base(addr) { }
        public TerrainMaterial TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterial>(); } set { this["TerrainMaterial"] = value; } }
        public float UnitsPerLenth { get { return this[nameof(UnitsPerLenth)].GetValue<float>(); } set { this[nameof(UnitsPerLenth)].SetValue<float>(value); } }
        public bool ScaleToResourceDistribution { get { return this[nameof(ScaleToResourceDistribution)].Flag; } set { this[nameof(ScaleToResourceDistribution)].Flag = value; } }
        public VeinResourceCreator ResourceCreator { get { return this[nameof(ResourceCreator)].As<VeinResourceCreator>(); } set { this["ResourceCreator"] = value; } }
        public TerrainMaterial GetTerrainMaterial() { return Invoke<TerrainMaterial>(nameof(GetTerrainMaterial)); }
        public float GetDesiredAmount(ProceduralSetup pls) { return Invoke<float>(nameof(GetDesiredAmount), pls); }
    }
    public class VictoryPoseFunctionLibrary : BlueprintFunctionLibrary
    {
        public VictoryPoseFunctionLibrary(nint addr) : base(addr) { }
        public bool IsRandomVictoryPose(VictoryPose VictoryPose) { return Invoke<bool>(nameof(IsRandomVictoryPose), VictoryPose); }
        public UArray<VictoryPose> GetOwnedVictoryPoses(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<UArray<VictoryPose>>(nameof(GetOwnedVictoryPoses), WorldContextObject, characterID); }
        public VictoryPose GetEquippedVictoryPose(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<VictoryPose>(nameof(GetEquippedVictoryPose), WorldContextObject, characterID); }
    }
    public class VictoryPose : SavablePrimaryDataAsset
    {
        public VictoryPose(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public ItemAquisitionBase Aquisition { get { return this[nameof(Aquisition)].As<ItemAquisitionBase>(); } set { this["Aquisition"] = value; } }
        public UArray<Object> Walks { get { return new UArray<Object>(this[nameof(Walks)].Address); } }
        public Object pose { get { return this[nameof(pose)]; } set { this[nameof(pose)] = value; } }
        public Object Prop_Actor { get { return this[nameof(Prop_Actor)]; } set { this[nameof(Prop_Actor)] = value; } }
        public Object Prop_Walk { get { return this[nameof(Prop_Walk)]; } set { this[nameof(Prop_Walk)] = value; } }
        public Object Prop_Pose { get { return this[nameof(Prop_Pose)]; } set { this[nameof(Prop_Pose)] = value; } }
        public Object Prop_Idle { get { return this[nameof(Prop_Idle)]; } set { this[nameof(Prop_Idle)] = value; } }
        public void Unlock(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(Unlock), WorldContextObject, characterID); }
        public void ResetUnlock(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(ResetUnlock), WorldContextObject, characterID); }
        public bool IsUnlockedNotFromStart(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsUnlockedNotFromStart), WorldContextObject, characterID); }
        public bool IsUnlocked(Object WorldContextObject, PlayerCharacterID characterID) { return Invoke<bool>(nameof(IsUnlocked), WorldContextObject, characterID); }
        public void Equip(Object WorldContextObject, PlayerCharacterID characterID) { Invoke(nameof(Equip), WorldContextObject, characterID); }
    }
    public class VictoryPoseSchematicBank : SchematicBankBase
    {
        public VictoryPoseSchematicBank(nint addr) : base(addr) { }
        public SchematicCategory SchematicCategory { get { return this[nameof(SchematicCategory)].As<SchematicCategory>(); } set { this["SchematicCategory"] = value; } }
        public Object VictoryPoses { get { return this[nameof(VictoryPoses)]; } set { this[nameof(VictoryPoses)] = value; } }
    }
    public class VictoryPoseSettings : DataAsset
    {
        public VictoryPoseSettings(nint addr) : base(addr) { }
        public Texture2D GenericVictoryPoseIcon { get { return this[nameof(GenericVictoryPoseIcon)].As<Texture2D>(); } set { this["GenericVictoryPoseIcon"] = value; } }
        public UArray<VictoryPose> LoadedVictoryPoses { get { return new UArray<VictoryPose>(this[nameof(LoadedVictoryPoses)].Address); } }
        public VictoryPose RandomVictoryPose { get { return this[nameof(RandomVictoryPose)].As<VictoryPose>(); } set { this["RandomVictoryPose"] = value; } }
        public UArray<Object> ModReferencesHack { get { return new UArray<Object>(this[nameof(ModReferencesHack)].Address); } }
        public UArray<Object> ModProxyHack { get { return new UArray<Object>(this[nameof(ModProxyHack)].Address); } }
        public UArray<VictoryPose> GetVictoryPoses() { return Invoke<UArray<VictoryPose>>(nameof(GetVictoryPoses)); }
    }
    public class WalkingStateComponent : CharacterStateComponent
    {
        public WalkingStateComponent(nint addr) : base(addr) { }
        public bool SlidingEnabled { get { return this[nameof(SlidingEnabled)].Flag; } set { this[nameof(SlidingEnabled)].Flag = value; } }
        public bool ShowDebug { get { return this[nameof(ShowDebug)].Flag; } set { this[nameof(ShowDebug)].Flag = value; } }
        public float SlideAngle { get { return this[nameof(SlideAngle)].GetValue<float>(); } set { this[nameof(SlideAngle)].SetValue<float>(value); } }
        public float SlideAcceleration { get { return this[nameof(SlideAcceleration)].GetValue<float>(); } set { this[nameof(SlideAcceleration)].SetValue<float>(value); } }
        public float MaxSlideSpeed { get { return this[nameof(MaxSlideSpeed)].GetValue<float>(); } set { this[nameof(MaxSlideSpeed)].SetValue<float>(value); } }
        public float MaxClimbDistance { get { return this[nameof(MaxClimbDistance)].GetValue<float>(); } set { this[nameof(MaxClimbDistance)].SetValue<float>(value); } }
        public SoundBase AudioSliding { get { return this[nameof(AudioSliding)].As<SoundBase>(); } set { this["AudioSliding"] = value; } }
        public SoundBase IceSliding { get { return this[nameof(IceSliding)].As<SoundBase>(); } set { this["IceSliding"] = value; } }
        public AudioComponent AudioComponentSliding { get { return this[nameof(AudioComponentSliding)].As<AudioComponent>(); } set { this["AudioComponentSliding"] = value; } }
        public AudioComponent AudioComponentIceSliding { get { return this[nameof(AudioComponentIceSliding)].As<AudioComponent>(); } set { this["AudioComponentIceSliding"] = value; } }
        public void TrackGrindCallback(PlayerCharacter User, EInputKeys Key) { Invoke(nameof(TrackGrindCallback), User, Key); }
        public void Server_StartTrackMovement(TrackBuilderMovement InMovement) { Invoke(nameof(Server_StartTrackMovement), InMovement); }
        public void Server_SetIsSliding(bool isSliding) { Invoke(nameof(Server_SetIsSliding), isSliding); }
        public void JumpPress() { Invoke(nameof(JumpPress)); }
    }
    public class WallSaw : Actor
    {
        public WallSaw(nint addr) : base(addr) { }
        public CapsuleComponent HitCapsule { get { return this[nameof(HitCapsule)].As<CapsuleComponent>(); } set { this["HitCapsule"] = value; } }
        public float SpeedCof { get { return this[nameof(SpeedCof)].GetValue<float>(); } set { this[nameof(SpeedCof)].SetValue<float>(value); } }
        public CurveFloat VelOverTime { get { return this[nameof(VelOverTime)].As<CurveFloat>(); } set { this["VelOverTime"] = value; } }
        public ParticleSystemComponent GroundParticles { get { return this[nameof(GroundParticles)].As<ParticleSystemComponent>(); } set { this["GroundParticles"] = value; } }
        public FakeSawMover FakeMover { get { return this[nameof(FakeMover)].As<FakeSawMover>(); } set { this["FakeMover"] = value; } }
        public SawFakeMoveState PosVel { get { return this[nameof(PosVel)].As<SawFakeMoveState>(); } set { this["PosVel"] = value; } }
        public float PopWeakpointRadius { get { return this[nameof(PopWeakpointRadius)].GetValue<float>(); } set { this[nameof(PopWeakpointRadius)].SetValue<float>(value); } }
        public float PlayerHitRangeFromCenter { get { return this[nameof(PlayerHitRangeFromCenter)].GetValue<float>(); } set { this[nameof(PlayerHitRangeFromCenter)].SetValue<float>(value); } }
        public void UpdateCheckForWeakpoints() { Invoke(nameof(UpdateCheckForWeakpoints)); }
        public void SetMovementDirection(Vector Direction) { Invoke(nameof(SetMovementDirection), Direction); }
        public void PushEnemyAndCheckForWeakpoint(Actor Actor) { Invoke(nameof(PushEnemyAndCheckForWeakpoint), Actor); }
        public void OnRep_PosVel(SawFakeMoveState PosVel) { Invoke(nameof(OnRep_PosVel), PosVel); }
        public void OnDurationEnd() { Invoke(nameof(OnDurationEnd)); }
        public void Initialize(Vector Direction) { Invoke(nameof(Initialize), Direction); }
        public bool HasJustHit(Actor enemy) { return Invoke<bool>(nameof(HasJustHit), enemy); }
        public void GrazeOverlapCallback(Actor Actor, PrimitiveComponent prim) { Invoke(nameof(GrazeOverlapCallback), Actor, prim); }
        public void All_Initialize(Transform Transform, Vector Direction) { Invoke(nameof(All_Initialize), Transform, Direction); }
    }
    public class WeakpointGlowComponent : ActorComponent
    {
        public WeakpointGlowComponent(nint addr) : base(addr) { }
        public Object EmissiveParam { get { return this[nameof(EmissiveParam)]; } set { this[nameof(EmissiveParam)] = value; } }
        public UArray<WeakpointChannel> Channels { get { return new UArray<WeakpointChannel>(this[nameof(Channels)].Address); } }
        public RuntimeFloatCurve WeakpointHitCurve { get { return this[nameof(WeakpointHitCurve)].As<RuntimeFloatCurve>(); } set { this["WeakpointHitCurve"] = value; } }
        public float CurveMultiplier { get { return this[nameof(CurveMultiplier)].GetValue<float>(); } set { this[nameof(CurveMultiplier)].SetValue<float>(value); } }
        public EWeakpointGlowMode Mode { get { return (EWeakpointGlowMode)this[nameof(Mode)].GetValue<int>(); } set { this[nameof(Mode)].SetValue<int>((int)value); } }
        public FSDPhysicalMaterial WeakPointMaterial { get { return this[nameof(WeakPointMaterial)].As<FSDPhysicalMaterial>(); } set { this["WeakPointMaterial"] = value; } }
        public bool AddFirstChannelAutomatically { get { return this[nameof(AddFirstChannelAutomatically)].Flag; } set { this[nameof(AddFirstChannelAutomatically)].Flag = value; } }
        public int ReplaceMatIndex { get { return this[nameof(ReplaceMatIndex)].GetValue<int>(); } set { this[nameof(ReplaceMatIndex)].SetValue<int>(value); } }
        public bool StopLoopingGlow(int aGlowID, bool aFade) { return Invoke<bool>(nameof(StopLoopingGlow), aGlowID, aFade); }
        public void ShowBodypartHit(float amount, float BaseAmount, DamageData DamageData) { Invoke(nameof(ShowBodypartHit), amount, BaseAmount, DamageData); }
        public void SetUpWeakPointGlowOnMeshByBone(SkeletalMeshComponent Mesh, int MaterialIndex, Object Bone, HealthComponentBase HealthComponent) { Invoke(nameof(SetUpWeakPointGlowOnMeshByBone), Mesh, MaterialIndex, Bone, HealthComponent); }
        public int SetUpWeakPointGlowOnMesh(MeshComponent Mesh, int MaterialIndex, FSDPhysicalMaterial PhysicalMaterial, HealthComponentBase HealthComponent) { return Invoke<int>(nameof(SetUpWeakPointGlowOnMesh), Mesh, MaterialIndex, PhysicalMaterial, HealthComponent); }
        public void SetChannelEnabled(bool Enabled, int Channel) { Invoke(nameof(SetChannelEnabled), Enabled, Channel); }
        public void EnableWeakpointRegistration(bool Enabled) { Invoke(nameof(EnableWeakpointRegistration), Enabled); }
        public void All_ShowWeakPointHit(byte Channel) { Invoke(nameof(All_ShowWeakPointHit), Channel); }
        public void AddWeakpointGlow(bool loopIndefinitely, float LoopTime, CurveFloat GrowCurve, CurveFloat FadeCurve, int UniqueId, int Channel) { Invoke(nameof(AddWeakpointGlow), loopIndefinitely, LoopTime, GrowCurve, FadeCurve, UniqueId, Channel); }
    }
    public class WeaponEffectSubsystem : WorldSubsystem
    {
        public WeaponEffectSubsystem(nint addr) : base(addr) { }
        public Object ElectrifyPlatformsActorClass { get { return this[nameof(ElectrifyPlatformsActorClass)]; } set { this[nameof(ElectrifyPlatformsActorClass)] = value; } }
    }
    public class WeaponFireOwner : Interface
    {
        public WeaponFireOwner(nint addr) : base(addr) { }
        public PlayerCharacter GetPlayerCharacter() { return Invoke<PlayerCharacter>(nameof(GetPlayerCharacter)); }
        public Quat GetMuzzleQuat() { return Invoke<Quat>(nameof(GetMuzzleQuat)); }
        public Vector GetMuzzleLocation() { return Invoke<Vector>(nameof(GetMuzzleLocation)); }
        public bool GetIsLocallyControlled() { return Invoke<bool>(nameof(GetIsLocallyControlled)); }
        public bool GetIsFirstPerson() { return Invoke<bool>(nameof(GetIsFirstPerson)); }
    }
    public class AssaultRifle : AmmoDrivenWeapon
    {
        public AssaultRifle(nint addr) : base(addr) { }
        public float KillsResetAccuracyDuration { get { return this[nameof(KillsResetAccuracyDuration)].GetValue<float>(); } set { this[nameof(KillsResetAccuracyDuration)].SetValue<float>(value); } }
        public bool KillsTriggersStatusEffect { get { return this[nameof(KillsTriggersStatusEffect)].Flag; } set { this[nameof(KillsTriggersStatusEffect)].Flag = value; } }
        public Object KillTriggeredStatusEffect { get { return this[nameof(KillTriggeredStatusEffect)]; } set { this[nameof(KillTriggeredStatusEffect)] = value; } }
        public void OnTimerElapsed() { Invoke(nameof(OnTimerElapsed)); }
        public void OnEnemyKilled(Actor Target, FSDPhysicalMaterial PhysMat, bool wasDirectHit) { Invoke(nameof(OnEnemyKilled), Target, PhysMat, wasDirectHit); }
        public void Client_ResetAccuracy() { Invoke(nameof(Client_ResetAccuracy)); }
    }
    public class FlareGun : AmmoDrivenWeapon
    {
        public FlareGun(nint addr) : base(addr) { }
    }
    public class SawedOffShotgun : AmmoDrivenWeapon
    {
        public SawedOffShotgun(nint addr) : base(addr) { }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public DamageComponent ShockWaveDamageComponent { get { return this[nameof(ShockWaveDamageComponent)].As<DamageComponent>(); } set { this["ShockWaveDamageComponent"] = value; } }
        public float FearFactorOnFire { get { return this[nameof(FearFactorOnFire)].GetValue<float>(); } set { this[nameof(FearFactorOnFire)].SetValue<float>(value); } }
        public float FearFactorOnFireRadius { get { return this[nameof(FearFactorOnFireRadius)].GetValue<float>(); } set { this[nameof(FearFactorOnFireRadius)].SetValue<float>(value); } }
        public bool ShotgunJumpEnabled { get { return this[nameof(ShotgunJumpEnabled)].Flag; } set { this[nameof(ShotgunJumpEnabled)].Flag = value; } }
        public float ShotgunJumpForce { get { return this[nameof(ShotgunJumpForce)].GetValue<float>(); } set { this[nameof(ShotgunJumpForce)].SetValue<float>(value); } }
        public bool ShockwaveEnabled { get { return this[nameof(ShockwaveEnabled)].Flag; } set { this[nameof(ShockwaveEnabled)].Flag = value; } }
        public float ShockWaveDistance { get { return this[nameof(ShockWaveDistance)].GetValue<float>(); } set { this[nameof(ShockWaveDistance)].SetValue<float>(value); } }
        public void SetShockWaveDamageComponent(DamageComponent Component) { Invoke(nameof(SetShockWaveDamageComponent), Component); }
    }
    public class Revoler : AmmoDrivenWeapon
    {
        public Revoler(nint addr) : base(addr) { }
        public float OnKillFearFactor { get { return this[nameof(OnKillFearFactor)].GetValue<float>(); } set { this[nameof(OnKillFearFactor)].SetValue<float>(value); } }
        public float OnKillFearRange { get { return this[nameof(OnKillFearRange)].GetValue<float>(); } set { this[nameof(OnKillFearRange)].SetValue<float>(value); } }
        public void OnTargetKilled(Actor Target, FSDPhysicalMaterial PhysMat, bool wasDirectHit) { Invoke(nameof(OnTargetKilled), Target, PhysMat, wasDirectHit); }
    }
    public class BasicPistol : AmmoDrivenWeapon
    {
        public BasicPistol(nint addr) : base(addr) { }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
        public float BurstArmorDamageMultiplier { get { return this[nameof(BurstArmorDamageMultiplier)].GetValue<float>(); } set { this[nameof(BurstArmorDamageMultiplier)].SetValue<float>(value); } }
        public float ConsecutiveHitsDamageBonus { get { return this[nameof(ConsecutiveHitsDamageBonus)].GetValue<float>(); } set { this[nameof(ConsecutiveHitsDamageBonus)].SetValue<float>(value); } }
        public float ConsecutiveHitsMaxBonus { get { return this[nameof(ConsecutiveHitsMaxBonus)].GetValue<float>(); } set { this[nameof(ConsecutiveHitsMaxBonus)].SetValue<float>(value); } }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void OnHit(HitResult HitResult, bool isAlwaysPenetrated) { Invoke(nameof(OnHit), HitResult, isAlwaysPenetrated); }
    }
    public class ElectricalSMG : AmmoDrivenWeapon
    {
        public ElectricalSMG(nint addr) : base(addr) { }
        public Object SentryGunClass { get { return this[nameof(SentryGunClass)]; } set { this[nameof(SentryGunClass)] = value; } }
        public Object AoEStatusEffect { get { return this[nameof(AoEStatusEffect)]; } set { this[nameof(AoEStatusEffect)] = value; } }
        public ParticleSystem AoEParticle { get { return this[nameof(AoEParticle)].As<ParticleSystem>(); } set { this["AoEParticle"] = value; } }
        public SoundCue AoESound { get { return this[nameof(AoESound)].As<SoundCue>(); } set { this["AoESound"] = value; } }
        public float AoEStatusEffectChance { get { return this[nameof(AoEStatusEffectChance)].GetValue<float>(); } set { this[nameof(AoEStatusEffectChance)].SetValue<float>(value); } }
        public float AoEStatusEffectRange { get { return this[nameof(AoEStatusEffectRange)].GetValue<float>(); } set { this[nameof(AoEStatusEffectRange)].SetValue<float>(value); } }
        public bool TurretPlasmaLineEnabled { get { return this[nameof(TurretPlasmaLineEnabled)].Flag; } set { this[nameof(TurretPlasmaLineEnabled)].Flag = value; } }
        public float ElectrocutionChance { get { return this[nameof(ElectrocutionChance)].GetValue<float>(); } set { this[nameof(ElectrocutionChance)].SetValue<float>(value); } }
        public bool TurretEMPDischargeEnabled { get { return this[nameof(TurretEMPDischargeEnabled)].Flag; } set { this[nameof(TurretEMPDischargeEnabled)].Flag = value; } }
        public bool ElectricfyPlatformsEnabled { get { return this[nameof(ElectricfyPlatformsEnabled)].Flag; } set { this[nameof(ElectricfyPlatformsEnabled)].Flag = value; } }
        public UArray<FSDPhysicalMaterial> PlatformMaterials { get { return new UArray<FSDPhysicalMaterial>(this[nameof(PlatformMaterials)].Address); } }
        public Object ElectrifyPlatformsActorClass { get { return this[nameof(ElectrifyPlatformsActorClass)]; } set { this[nameof(ElectrifyPlatformsActorClass)] = value; } }
        public void OnTerrainHit(Vector Location, Rotator Rotation, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTerrainHit), Location, Rotation, PhysicalMaterial); }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void OnStatusEffectPushed(HealthComponentBase Health) { Invoke(nameof(OnStatusEffectPushed), Health); }
        public void All_OnAoETriggered(Vector_NetQuantize Location, Vector_NetQuantizeNormal Normal) { Invoke(nameof(All_OnAoETriggered), Location, Normal); }
    }
    public class AutoShotgun : AmmoDrivenWeapon
    {
        public AutoShotgun(nint addr) : base(addr) { }
        public Object CQCKillBuff { get { return this[nameof(CQCKillBuff)]; } set { this[nameof(CQCKillBuff)] = value; } }
        public void OnTargetKilled(Actor Target, FSDPhysicalMaterial PhysicalMaterial, bool wasDirectHit) { Invoke(nameof(OnTargetKilled), Target, PhysicalMaterial, wasDirectHit); }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
    }
    public class LineCutter : AmmoDrivenWeapon
    {
        public LineCutter(nint addr) : base(addr) { }
        public bool StopUsingReversesProjectile { get { return this[nameof(StopUsingReversesProjectile)].Flag; } set { this[nameof(StopUsingReversesProjectile)].Flag = value; } }
        public bool RotateProjectileUntillStop { get { return this[nameof(RotateProjectileUntillStop)].Flag; } set { this[nameof(RotateProjectileUntillStop)].Flag = value; } }
        public bool ExplodeLastProjectileOnNextFireAttempt { get { return this[nameof(ExplodeLastProjectileOnNextFireAttempt)].Flag; } set { this[nameof(ExplodeLastProjectileOnNextFireAttempt)].Flag = value; } }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public Object LastProjectile { get { return this[nameof(LastProjectile)]; } set { this[nameof(LastProjectile)] = value; } }
        public float MinExplosiveGoodbyeActivationTimme { get { return this[nameof(MinExplosiveGoodbyeActivationTimme)].GetValue<float>(); } set { this[nameof(MinExplosiveGoodbyeActivationTimme)].SetValue<float>(value); } }
        public void Server_StopRotatingProjectile() { Invoke(nameof(Server_StopRotatingProjectile)); }
        public void Server_ReverseLastProjectile() { Invoke(nameof(Server_ReverseLastProjectile)); }
        public void Server_DestroyOldProjectile() { Invoke(nameof(Server_DestroyOldProjectile)); }
        public void OnRep_LastProjectile() { Invoke(nameof(OnRep_LastProjectile)); }
        public void OnProjectileLaunched(ProjectileBase Projectile) { Invoke(nameof(OnProjectileLaunched), Projectile); }
        public void OnFireWhileLastProjectileAlive(LineCutterProjectile Projectile) { Invoke(nameof(OnFireWhileLastProjectileAlive), Projectile); }
    }
    public class Magazine : Actor
    {
        public Magazine(nint addr) : base(addr) { }
        public SoundCue ImpactGroundSound { get { return this[nameof(ImpactGroundSound)].As<SoundCue>(); } set { this["ImpactGroundSound"] = value; } }
        public void OnItemSkinned(SkinEffect Skin) { Invoke(nameof(OnItemSkinned), Skin); }
        public void ActorWasHit(Actor SelfActor, Actor OtherActor, Vector NormalImpulse, HitResult Hit) { Invoke(nameof(ActorWasHit), SelfActor, OtherActor, NormalImpulse, Hit); }
    }
    public class WeaponHitCountEffect : Object
    {
        public WeaponHitCountEffect(nint addr) : base(addr) { }
        public bool UsesDamageEffects { get { return this[nameof(UsesDamageEffects)].Flag; } set { this[nameof(UsesDamageEffects)].Flag = value; } }
    }
    public class WeaponHitCounterComponent : ActorComponent
    {
        public WeaponHitCounterComponent(nint addr) : base(addr) { }
        public WeaponHitCountEffect HitEffect { get { return this[nameof(HitEffect)].As<WeaponHitCountEffect>(); } set { this["HitEffect"] = value; } }
        public bool RequiresWeakpointHit { get { return this[nameof(RequiresWeakpointHit)].Flag; } set { this[nameof(RequiresWeakpointHit)].Flag = value; } }
        public void Server_OnReloading() { Invoke(nameof(Server_OnReloading)); }
        public void OnTargetDamaged(HealthComponentBase Health, float amount, PrimitiveComponent HitComponent, FSDPhysicalMaterial PhysicalMaterial) { Invoke(nameof(OnTargetDamaged), Health, amount, HitComponent, PhysicalMaterial); }
        public void OnStoppedUsing() { Invoke(nameof(OnStoppedUsing)); }
        public void OnReloading() { Invoke(nameof(OnReloading)); }
        public void All_ShowDamageEffects(UArray<Object> Targets) { Invoke(nameof(All_ShowDamageEffects), Targets); }
    }
    public class DamageHitCountEffect : WeaponHitCountEffect
    {
        public DamageHitCountEffect(nint addr) : base(addr) { }
        public float DamagePerHit { get { return this[nameof(DamagePerHit)].GetValue<float>(); } set { this[nameof(DamagePerHit)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public ParticleSystem DamageParticle { get { return this[nameof(DamageParticle)].As<ParticleSystem>(); } set { this["DamageParticle"] = value; } }
        public SoundCue DamageSound { get { return this[nameof(DamageSound)].As<SoundCue>(); } set { this["DamageSound"] = value; } }
        public bool DeadBugWalkingTargetMarking { get { return this[nameof(DeadBugWalkingTargetMarking)].Flag; } set { this[nameof(DeadBugWalkingTargetMarking)].Flag = value; } }
        public float ExtraDamageForCalculatingDBW { get { return this[nameof(ExtraDamageForCalculatingDBW)].GetValue<float>(); } set { this[nameof(ExtraDamageForCalculatingDBW)].SetValue<float>(value); } }
        public Object DeadBugWalkingSTE { get { return this[nameof(DeadBugWalkingSTE)]; } set { this[nameof(DeadBugWalkingSTE)] = value; } }
    }
    public class StatusHitCountEffect : WeaponHitCountEffect
    {
        public StatusHitCountEffect(nint addr) : base(addr) { }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public float ChancePerHit { get { return this[nameof(ChancePerHit)].GetValue<float>(); } set { this[nameof(ChancePerHit)].SetValue<float>(value); } }
    }
    public class RicochetHitCountEffect : WeaponHitCountEffect
    {
        public RicochetHitCountEffect(nint addr) : base(addr) { }
    }
    public class ChargedHitCountEffect : WeaponHitCountEffect
    {
        public ChargedHitCountEffect(nint addr) : base(addr) { }
        public float DamagePerHit { get { return this[nameof(DamagePerHit)].GetValue<float>(); } set { this[nameof(DamagePerHit)].SetValue<float>(value); } }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public ParticleSystem DamageParticle { get { return this[nameof(DamageParticle)].As<ParticleSystem>(); } set { this["DamageParticle"] = value; } }
        public SoundCue DamageSound { get { return this[nameof(DamageSound)].As<SoundCue>(); } set { this["DamageSound"] = value; } }
    }
    public class WeaponHitEffectComponent : ActorComponent
    {
        public WeaponHitEffectComponent(nint addr) : base(addr) { }
        public float EffectChance { get { return this[nameof(EffectChance)].GetValue<float>(); } set { this[nameof(EffectChance)].SetValue<float>(value); } }
        public Object ActorToSpawn { get { return this[nameof(ActorToSpawn)]; } set { this[nameof(ActorToSpawn)] = value; } }
        public void Server_SpawnEffect(Vector_NetQuantize Location, Rotator Rotation) { Invoke(nameof(Server_SpawnEffect), Location, Rotation); }
        public void OnHit(HitResult HitResult, bool isAlwaysPenetrated) { Invoke(nameof(OnHit), HitResult, isAlwaysPenetrated); }
    }
    public class WeightRoomSelectorLibrary : BlueprintFunctionLibrary
    {
        public WeightRoomSelectorLibrary(nint addr) : base(addr) { }
        public void SetupWeightedRoomSelector(WeightedRoomSelector Target, UArray<RoomGenerator> Rooms) { Invoke(nameof(SetupWeightedRoomSelector), Target, Rooms); }
        public RoomGenerator SelectRandomRoom(WeightedRoomSelector Target, RandomStream RandomStream) { return Invoke<RoomGenerator>(nameof(SelectRandomRoom), Target, RandomStream); }
        public RoomGenerator GetRandomRoom(UArray<RoomGenerator> Rooms, bool removeChosenRoom, RandomStream RandomStream) { return Invoke<RoomGenerator>(nameof(GetRandomRoom), Rooms, removeChosenRoom, RandomStream); }
    }
    public class WidgetToRenderTargetComponent : ActorComponent
    {
        public WidgetToRenderTargetComponent(nint addr) : base(addr) { }
        public Object WidgetClass { get { return this[nameof(WidgetClass)]; } set { this[nameof(WidgetClass)] = value; } }
        public IntPoint DrawSize { get { return this[nameof(DrawSize)].As<IntPoint>(); } set { this["DrawSize"] = value; } }
        public bool bManuallyRedraw { get { return this[nameof(bManuallyRedraw)].Flag; } set { this[nameof(bManuallyRedraw)].Flag = value; } }
        public bool bRedrawRequested { get { return this[nameof(bRedrawRequested)].Flag; } set { this[nameof(bRedrawRequested)].Flag = value; } }
        public float RedrawTime { get { return this[nameof(RedrawTime)].GetValue<float>(); } set { this[nameof(RedrawTime)].SetValue<float>(value); } }
        public float LastWidgetRenderTime { get { return this[nameof(LastWidgetRenderTime)].GetValue<float>(); } set { this[nameof(LastWidgetRenderTime)].SetValue<float>(value); } }
        public bool bWindowFocusable { get { return this[nameof(bWindowFocusable)].Flag; } set { this[nameof(bWindowFocusable)].Flag = value; } }
        public IntPoint CurrentDrawSize { get { return this[nameof(CurrentDrawSize)].As<IntPoint>(); } set { this["CurrentDrawSize"] = value; } }
        public bool bDrawAtDesiredSize { get { return this[nameof(bDrawAtDesiredSize)].Flag; } set { this[nameof(bDrawAtDesiredSize)].Flag = value; } }
        public Vector2D Pivot { get { return this[nameof(Pivot)].As<Vector2D>(); } set { this["Pivot"] = value; } }
        public MaterialInterface BaseMaterial { get { return this[nameof(BaseMaterial)].As<MaterialInterface>(); } set { this["BaseMaterial"] = value; } }
        public LocalPlayer OwnerPlayer { get { return this[nameof(OwnerPlayer)].As<LocalPlayer>(); } set { this["OwnerPlayer"] = value; } }
        public LinearColor BackgroundColor { get { return this[nameof(BackgroundColor)].As<LinearColor>(); } set { this["BackgroundColor"] = value; } }
        public LinearColor TintColorAndOpacity { get { return this[nameof(TintColorAndOpacity)].As<LinearColor>(); } set { this["TintColorAndOpacity"] = value; } }
        public float OpacityFromTexture { get { return this[nameof(OpacityFromTexture)].GetValue<float>(); } set { this[nameof(OpacityFromTexture)].SetValue<float>(value); } }
        public bool bIsTwoSided { get { return this[nameof(bIsTwoSided)].Flag; } set { this[nameof(bIsTwoSided)].Flag = value; } }
        public bool TickWhenOffscreen { get { return this[nameof(TickWhenOffscreen)].Flag; } set { this[nameof(TickWhenOffscreen)].Flag = value; } }
        public UserWidget Widget { get { return this[nameof(Widget)].As<UserWidget>(); } set { this["Widget"] = value; } }
        public TextureRenderTarget2D RenderTarget { get { return this[nameof(RenderTarget)].As<TextureRenderTarget2D>(); } set { this["RenderTarget"] = value; } }
        public MaterialInstanceDynamic MaterialInstance { get { return this[nameof(MaterialInstance)].As<MaterialInstanceDynamic>(); } set { this["MaterialInstance"] = value; } }
        public bool bEditTimeUsable { get { return this[nameof(bEditTimeUsable)].Flag; } set { this[nameof(bEditTimeUsable)].Flag = value; } }
        public void SetWidget(UserWidget Widget) { Invoke(nameof(SetWidget), Widget); }
        public void SetOwnerPlayer(LocalPlayer LocalPlayer) { Invoke(nameof(SetOwnerPlayer), LocalPlayer); }
        public void SetBackgroundColor(LinearColor NewBackgroundColor) { Invoke(nameof(SetBackgroundColor), NewBackgroundColor); }
        public void RequestRedraw() { Invoke(nameof(RequestRedraw)); }
        public UserWidget GetUserWidgetObject() { return Invoke<UserWidget>(nameof(GetUserWidgetObject)); }
        public TextureRenderTarget2D GetRenderTarget() { return Invoke<TextureRenderTarget2D>(nameof(GetRenderTarget)); }
        public LocalPlayer GetOwnerPlayer() { return Invoke<LocalPlayer>(nameof(GetOwnerPlayer)); }
        public MaterialInstanceDynamic GetMaterialInstance() { return Invoke<MaterialInstanceDynamic>(nameof(GetMaterialInstance)); }
    }
    public class WindowManager : ActorComponent
    {
        public WindowManager(nint addr) : base(addr) { }
        public Object OnFirstWindowOpened { get { return this[nameof(OnFirstWindowOpened)]; } set { this[nameof(OnFirstWindowOpened)] = value; } }
        public Object OnLastWindowClosed { get { return this[nameof(OnLastWindowClosed)]; } set { this[nameof(OnLastWindowClosed)] = value; } }
        public SoundCue AudioWindowOpen { get { return this[nameof(AudioWindowOpen)].As<SoundCue>(); } set { this["AudioWindowOpen"] = value; } }
        public UArray<WindowWidget> WindowStack { get { return new UArray<WindowWidget>(this[nameof(WindowStack)].Address); } }
        public Object WindowList { get { return this[nameof(WindowList)]; } set { this[nameof(WindowList)] = value; } }
        public Object WidgetSingletonCache { get { return this[nameof(WidgetSingletonCache)]; } set { this[nameof(WidgetSingletonCache)] = value; } }
        public bool ResolutionDownscaleActive { get { return this[nameof(ResolutionDownscaleActive)].Flag; } set { this[nameof(ResolutionDownscaleActive)].Flag = value; } }
        public void SetSingletonWidgetVisibility(Object WidgetClass, ESlateVisibility Visibility) { Invoke(nameof(SetSingletonWidgetVisibility), WidgetClass, Visibility); }
        public void ReplaceWindow(WindowWidget Window) { Invoke(nameof(ReplaceWindow), Window); }
        public WindowWidget OpenWindowFromClass(Object WindowClass, int ZOrder, bool ShowCursor) { return Invoke<WindowWidget>(nameof(OpenWindowFromClass), WindowClass, ZOrder, ShowCursor); }
        public void OpenWindow(WindowWidget Window, bool PlayAudio, bool ShowCursor) { Invoke(nameof(OpenWindow), Window, PlayAudio, ShowCursor); }
        public WindowWidget OpenSingleUseWindow(Object WindowClass, int ZOrder) { return Invoke<WindowWidget>(nameof(OpenSingleUseWindow), WindowClass, ZOrder); }
        public bool IsWindowOpen(WindowWidget Window) { return Invoke<bool>(nameof(IsWindowOpen), Window); }
        public bool IsTopWindow(WindowWidget Window) { return Invoke<bool>(nameof(IsTopWindow), Window); }
        public UserWidget GetOrCreateSingletonWidget(Object WidgetClass, bool WidgetCreated) { return Invoke<UserWidget>(nameof(GetOrCreateSingletonWidget), WidgetClass, WidgetCreated); }
        public WindowWidget GetCurrentWindow() { return Invoke<WindowWidget>(nameof(GetCurrentWindow)); }
        public void CloseWindow(WindowWidget Window) { Invoke(nameof(CloseWindow), Window); }
        public void CloseTopWindow() { Invoke(nameof(CloseTopWindow)); }
        public void CloseAllWindows() { Invoke(nameof(CloseAllWindows)); }
        public void CenterCursor() { Invoke(nameof(CenterCursor)); }
        public bool AnyWindowsOpen() { return Invoke<bool>(nameof(AnyWindowsOpen)); }
    }
    public class WoodLouse : EnemyDeepPathfinderCharacter
    {
        public WoodLouse(nint addr) : base(addr) { }
        public SceneComponent RollingCenter { get { return this[nameof(RollingCenter)].As<SceneComponent>(); } set { this["RollingCenter"] = value; } }
        public PawnSensingComponent PawnSensing { get { return this[nameof(PawnSensing)].As<PawnSensingComponent>(); } set { this["PawnSensing"] = value; } }
        public EWoodLouseState forceState { get { return (EWoodLouseState)this[nameof(forceState)].GetValue<int>(); } set { this[nameof(forceState)].SetValue<int>((int)value); } }
        public float RollingCenterOffsetOnStanding { get { return this[nameof(RollingCenterOffsetOnStanding)].GetValue<float>(); } set { this[nameof(RollingCenterOffsetOnStanding)].SetValue<float>(value); } }
        public float RollingCenterOffsetOnFold { get { return this[nameof(RollingCenterOffsetOnFold)].GetValue<float>(); } set { this[nameof(RollingCenterOffsetOnFold)].SetValue<float>(value); } }
        public float ChanceToWalk { get { return this[nameof(ChanceToWalk)].GetValue<float>(); } set { this[nameof(ChanceToWalk)].SetValue<float>(value); } }
        public bool DebugAngle { get { return this[nameof(DebugAngle)].Flag; } set { this[nameof(DebugAngle)].Flag = value; } }
        public FakeMoverSettings FakeMoverSettings { get { return this[nameof(FakeMoverSettings)].As<FakeMoverSettings>(); } set { this["FakeMoverSettings"] = value; } }
        public Object BurstProjectileClass { get { return this[nameof(BurstProjectileClass)]; } set { this[nameof(BurstProjectileClass)] = value; } }
        public float BurstTime { get { return this[nameof(BurstTime)].GetValue<float>(); } set { this[nameof(BurstTime)].SetValue<float>(value); } }
        public UArray<Object> StatusEffectsOnRoll { get { return new UArray<Object>(this[nameof(StatusEffectsOnRoll)].Address); } }
        public BumpPlayerHit LastHit { get { return this[nameof(LastHit)].As<BumpPlayerHit>(); } set { this["LastHit"] = value; } }
        public float TiltModifier { get { return this[nameof(TiltModifier)].GetValue<float>(); } set { this[nameof(TiltModifier)].SetValue<float>(value); } }
        public float BurstXOffset { get { return this[nameof(BurstXOffset)].GetValue<float>(); } set { this[nameof(BurstXOffset)].SetValue<float>(value); } }
        public float BurstYOffset { get { return this[nameof(BurstYOffset)].GetValue<float>(); } set { this[nameof(BurstYOffset)].SetValue<float>(value); } }
        public float BurstZOffset { get { return this[nameof(BurstZOffset)].GetValue<float>(); } set { this[nameof(BurstZOffset)].SetValue<float>(value); } }
        public float HighDifficultyCustomProjectileGravity { get { return this[nameof(HighDifficultyCustomProjectileGravity)].GetValue<float>(); } set { this[nameof(HighDifficultyCustomProjectileGravity)].SetValue<float>(value); } }
        public int BurstCount { get { return this[nameof(BurstCount)].GetValue<int>(); } set { this[nameof(BurstCount)].SetValue<int>(value); } }
        public bool InvounerableOnRoll { get { return this[nameof(InvounerableOnRoll)].Flag; } set { this[nameof(InvounerableOnRoll)].Flag = value; } }
        public bool LockToRollMode { get { return this[nameof(LockToRollMode)].Flag; } set { this[nameof(LockToRollMode)].Flag = value; } }
        public bool LockToWalkMode { get { return this[nameof(LockToWalkMode)].Flag; } set { this[nameof(LockToWalkMode)].Flag = value; } }
        public float ForgetRange { get { return this[nameof(ForgetRange)].GetValue<float>(); } set { this[nameof(ForgetRange)].SetValue<float>(value); } }
        public float ForgetTime { get { return this[nameof(ForgetTime)].GetValue<float>(); } set { this[nameof(ForgetTime)].SetValue<float>(value); } }
        public float RefreshTimeMax { get { return this[nameof(RefreshTimeMax)].GetValue<float>(); } set { this[nameof(RefreshTimeMax)].SetValue<float>(value); } }
        public float RefreshTimeMin { get { return this[nameof(RefreshTimeMin)].GetValue<float>(); } set { this[nameof(RefreshTimeMin)].SetValue<float>(value); } }
        public float BumpPower { get { return this[nameof(BumpPower)].GetValue<float>(); } set { this[nameof(BumpPower)].SetValue<float>(value); } }
        public float DirectionalBumpPower { get { return this[nameof(DirectionalBumpPower)].GetValue<float>(); } set { this[nameof(DirectionalBumpPower)].SetValue<float>(value); } }
        public EWoodLouseState CurrentState { get { return (EWoodLouseState)this[nameof(CurrentState)].GetValue<int>(); } set { this[nameof(CurrentState)].SetValue<int>((int)value); } }
        public Actor CurrentTarget { get { return this[nameof(CurrentTarget)].As<Actor>(); } set { this["CurrentTarget"] = value; } }
        public float FoldedStateMaxTime { get { return this[nameof(FoldedStateMaxTime)].GetValue<float>(); } set { this[nameof(FoldedStateMaxTime)].SetValue<float>(value); } }
        public float FoldedStateMinTime { get { return this[nameof(FoldedStateMinTime)].GetValue<float>(); } set { this[nameof(FoldedStateMinTime)].SetValue<float>(value); } }
        public float UnfoldedStateMaxTime { get { return this[nameof(UnfoldedStateMaxTime)].GetValue<float>(); } set { this[nameof(UnfoldedStateMaxTime)].SetValue<float>(value); } }
        public float UnflodedStateMinTime { get { return this[nameof(UnflodedStateMinTime)].GetValue<float>(); } set { this[nameof(UnflodedStateMinTime)].SetValue<float>(value); } }
        public SoundBase BumpSound { get { return this[nameof(BumpSound)].As<SoundBase>(); } set { this["BumpSound"] = value; } }
        public float TimeBetweenBumpingSamePlayer { get { return this[nameof(TimeBetweenBumpingSamePlayer)].GetValue<float>(); } set { this[nameof(TimeBetweenBumpingSamePlayer)].SetValue<float>(value); } }
        public float MinBumpDamage { get { return this[nameof(MinBumpDamage)].GetValue<float>(); } set { this[nameof(MinBumpDamage)].SetValue<float>(value); } }
        public float MaxBumpDamage { get { return this[nameof(MaxBumpDamage)].GetValue<float>(); } set { this[nameof(MaxBumpDamage)].SetValue<float>(value); } }
        public float BumpDamage { get { return this[nameof(BumpDamage)].GetValue<float>(); } set { this[nameof(BumpDamage)].SetValue<float>(value); } }
        public DamageClass BumpDamageType { get { return this[nameof(BumpDamageType)].As<DamageClass>(); } set { this["BumpDamageType"] = value; } }
        public float MaxBumpPower { get { return this[nameof(MaxBumpPower)].GetValue<float>(); } set { this[nameof(MaxBumpPower)].SetValue<float>(value); } }
        public float BumpRange { get { return this[nameof(BumpRange)].GetValue<float>(); } set { this[nameof(BumpRange)].SetValue<float>(value); } }
        public float AcceptableAngles { get { return this[nameof(AcceptableAngles)].GetValue<float>(); } set { this[nameof(AcceptableAngles)].SetValue<float>(value); } }
        public float RollSpeedModifier { get { return this[nameof(RollSpeedModifier)].GetValue<float>(); } set { this[nameof(RollSpeedModifier)].SetValue<float>(value); } }
        public float RollAlpha { get { return this[nameof(RollAlpha)].GetValue<float>(); } set { this[nameof(RollAlpha)].SetValue<float>(value); } }
        public float TiltAlpha { get { return this[nameof(TiltAlpha)].GetValue<float>(); } set { this[nameof(TiltAlpha)].SetValue<float>(value); } }
        public SoundBase RollingSound { get { return this[nameof(RollingSound)].As<SoundBase>(); } set { this["RollingSound"] = value; } }
        public Object RollingSpeedParamName { get { return this[nameof(RollingSpeedParamName)]; } set { this[nameof(RollingSpeedParamName)] = value; } }
        public Object RollingSoundComponent { get { return this[nameof(RollingSoundComponent)]; } set { this[nameof(RollingSoundComponent)] = value; } }
        public FakeMoverSettings RollMoveSettings { get { return this[nameof(RollMoveSettings)].As<FakeMoverSettings>(); } set { this["RollMoveSettings"] = value; } }
        public FakeMoverSettings StopRollMoveSettings { get { return this[nameof(StopRollMoveSettings)].As<FakeMoverSettings>(); } set { this["StopRollMoveSettings"] = value; } }
        public GameplayTagQuery TargetQuery { get { return this[nameof(TargetQuery)].As<GameplayTagQuery>(); } set { this["TargetQuery"] = value; } }
        public bool RotateTowardsTarget { get { return this[nameof(RotateTowardsTarget)].Flag; } set { this[nameof(RotateTowardsTarget)].Flag = value; } }
        public float SeeTargetSafetyTime { get { return this[nameof(SeeTargetSafetyTime)].GetValue<float>(); } set { this[nameof(SeeTargetSafetyTime)].SetValue<float>(value); } }
        public bool WantsToStandUp { get { return this[nameof(WantsToStandUp)].Flag; } set { this[nameof(WantsToStandUp)].Flag = value; } }
        public bool IsShooting { get { return this[nameof(IsShooting)].Flag; } set { this[nameof(IsShooting)].Flag = value; } }
        public bool CanStandOnAnySurface { get { return this[nameof(CanStandOnAnySurface)].Flag; } set { this[nameof(CanStandOnAnySurface)].Flag = value; } }
        public void SwitchedState(EWoodLouseState CurrentState) { Invoke(nameof(SwitchedState), CurrentState); }
        public void StopSpecial() { Invoke(nameof(StopSpecial)); }
        public void StartSpecial() { Invoke(nameof(StartSpecial)); }
        public void SetWantsToStandUp(bool aWantsToStandUp) { Invoke(nameof(SetWantsToStandUp), aWantsToStandUp); }
        public void SetState(EWoodLouseState aState) { Invoke(nameof(SetState), aState); }
        public void SetRotateToTarget(bool aRotateToTarget) { Invoke(nameof(SetRotateToTarget), aRotateToTarget); }
        public void SeePawn(Pawn aSenPawn) { Invoke(nameof(SeePawn), aSenPawn); }
        public void OnRep_State() { Invoke(nameof(OnRep_State)); }
        public void OnRep_LastHit() { Invoke(nameof(OnRep_LastHit)); }
        public EWoodLouseState GetRollerState() { return Invoke<EWoodLouseState>(nameof(GetRollerState)); }
        public void BumpedTarget() { Invoke(nameof(BumpedTarget)); }
    }
    public class WoodLouseAnimInstance : SpiderAnimInstance
    {
        public WoodLouseAnimInstance(nint addr) : base(addr) { }
        public Vector2D AngleToTarget { get { return this[nameof(AngleToTarget)].As<Vector2D>(); } set { this["AngleToTarget"] = value; } }
        public float InterpSpeed { get { return this[nameof(InterpSpeed)].GetValue<float>(); } set { this[nameof(InterpSpeed)].SetValue<float>(value); } }
        public float BreakRollingWhenTimeLeft { get { return this[nameof(BreakRollingWhenTimeLeft)].GetValue<float>(); } set { this[nameof(BreakRollingWhenTimeLeft)].SetValue<float>(value); } }
        public EWoodLouseState RollerState { get { return (EWoodLouseState)this[nameof(RollerState)].GetValue<int>(); } set { this[nameof(RollerState)].SetValue<int>((int)value); } }
        public bool IsWalking { get { return this[nameof(IsWalking)].Flag; } set { this[nameof(IsWalking)].Flag = value; } }
        public bool IsUpRight { get { return this[nameof(IsUpRight)].Flag; } set { this[nameof(IsUpRight)].Flag = value; } }
        public bool IsDoingSpecialAttack { get { return this[nameof(IsDoingSpecialAttack)].Flag; } set { this[nameof(IsDoingSpecialAttack)].Flag = value; } }
        public bool IsUnFolded { get { return this[nameof(IsUnFolded)].Flag; } set { this[nameof(IsUnFolded)].Flag = value; } }
        public bool IsGroundValid { get { return this[nameof(IsGroundValid)].Flag; } set { this[nameof(IsGroundValid)].Flag = value; } }
        public bool IsInRollState { get { return this[nameof(IsInRollState)].Flag; } set { this[nameof(IsInRollState)].Flag = value; } }
        public bool IdleToDownTurnLeftLock { get { return this[nameof(IdleToDownTurnLeftLock)].Flag; } set { this[nameof(IdleToDownTurnLeftLock)].Flag = value; } }
        public bool DownTurnLeftToIdleLock { get { return this[nameof(DownTurnLeftToIdleLock)].Flag; } set { this[nameof(DownTurnLeftToIdleLock)].Flag = value; } }
        public bool DownWalkToDownTurnLeftLock { get { return this[nameof(DownWalkToDownTurnLeftLock)].Flag; } set { this[nameof(DownWalkToDownTurnLeftLock)].Flag = value; } }
        public bool WoodlouseWalk { get { return this[nameof(WoodlouseWalk)].Flag; } set { this[nameof(WoodlouseWalk)].Flag = value; } }
        public bool IdleToDownWalkLock { get { return this[nameof(IdleToDownWalkLock)].Flag; } set { this[nameof(IdleToDownWalkLock)].Flag = value; } }
        public bool DownWalkToDownTurnRightLock { get { return this[nameof(DownWalkToDownTurnRightLock)].Flag; } set { this[nameof(DownWalkToDownTurnRightLock)].Flag = value; } }
        public bool IdleToDownTurnRightLock { get { return this[nameof(IdleToDownTurnRightLock)].Flag; } set { this[nameof(IdleToDownTurnRightLock)].Flag = value; } }
    }
    public class WormPod : TaggedActor
    {
        public WormPod(nint addr) : base(addr) { }
        public SceneComponent Root { get { return this[nameof(Root)].As<SceneComponent>(); } set { this["Root"] = value; } }
        public SceneComponent ScalePoint { get { return this[nameof(ScalePoint)].As<SceneComponent>(); } set { this["ScalePoint"] = value; } }
        public SkeletalMeshComponent PodMesh { get { return this[nameof(PodMesh)].As<SkeletalMeshComponent>(); } set { this["PodMesh"] = value; } }
        public SimpleHealthComponent Health { get { return this[nameof(Health)].As<SimpleHealthComponent>(); } set { this["Health"] = value; } }
        public Object OnWormSpawned { get { return this[nameof(OnWormSpawned)]; } set { this[nameof(OnWormSpawned)] = value; } }
        public bool Grown { get { return this[nameof(Grown)].Flag; } set { this[nameof(Grown)].Flag = value; } }
        public AnimMontage GrowthAnimation { get { return this[nameof(GrowthAnimation)].As<AnimMontage>(); } set { this["GrowthAnimation"] = value; } }
        public AnimMontage PopAnimation { get { return this[nameof(PopAnimation)].As<AnimMontage>(); } set { this["PopAnimation"] = value; } }
        public Object CarcasActor { get { return this[nameof(CarcasActor)]; } set { this[nameof(CarcasActor)] = value; } }
        public RuntimeFloatCurve GrowthCurve { get { return this[nameof(GrowthCurve)].As<RuntimeFloatCurve>(); } set { this["GrowthCurve"] = value; } }
        public EnemyDescriptor WormDescriptor { get { return this[nameof(WormDescriptor)].As<EnemyDescriptor>(); } set { this["WormDescriptor"] = value; } }
        public FXSystemAsset PopParticles { get { return this[nameof(PopParticles)].As<FXSystemAsset>(); } set { this["PopParticles"] = value; } }
        public FXSystemAsset deathParticles { get { return this[nameof(deathParticles)].As<FXSystemAsset>(); } set { this["deathParticles"] = value; } }
        public SoundCue PopSound { get { return this[nameof(PopSound)].As<SoundCue>(); } set { this["PopSound"] = value; } }
        public SoundCue deathSound { get { return this[nameof(deathSound)].As<SoundCue>(); } set { this["deathSound"] = value; } }
        public float ParentDeathDelay { get { return this[nameof(ParentDeathDelay)].GetValue<float>(); } set { this[nameof(ParentDeathDelay)].SetValue<float>(value); } }
        public float DeathDelayVariance { get { return this[nameof(DeathDelayVariance)].GetValue<float>(); } set { this[nameof(DeathDelayVariance)].SetValue<float>(value); } }
        public int WormCount { get { return this[nameof(WormCount)].GetValue<int>(); } set { this[nameof(WormCount)].SetValue<int>(value); } }
        public void SpawnWorms() { Invoke(nameof(SpawnWorms)); }
        public void OnRep_Grown() { Invoke(nameof(OnRep_Grown)); }
        public void OnParentDeath(HealthComponentBase ParentHealth) { Invoke(nameof(OnParentDeath), ParentHealth); }
        public void OnDeath(HealthComponentBase aHealth) { Invoke(nameof(OnDeath), aHealth); }
        public void OnAnimEnded(AnimMontage Montage, bool bInterrupted) { Invoke(nameof(OnAnimEnded), Montage, bInterrupted); }
        public void Kill() { Invoke(nameof(Kill)); }
        public void All_ShowDeath(bool success) { Invoke(nameof(All_ShowDeath), success); }
    }
    public class YesNoPromptWidget : WindowWidget
    {
        public YesNoPromptWidget(nint addr) : base(addr) { }
        public bool bDestroyOnClick { get { return this[nameof(bDestroyOnClick)].Flag; } set { this[nameof(bDestroyOnClick)].Flag = value; } }
        public bool bCloseAllWindows { get { return this[nameof(bCloseAllWindows)].Flag; } set { this[nameof(bCloseAllWindows)].Flag = value; } }
        public Object OnClickedCallback { get { return this[nameof(OnClickedCallback)]; } set { this[nameof(OnClickedCallback)] = value; } }
        public void Show(Object Title, Object Message, Object OnYesNoClicked) { Invoke(nameof(Show), Title, Message, OnYesNoClicked); }
        public void SetMappedResources(Object Resources) { Invoke(nameof(SetMappedResources), Resources); }
        public void OnYesNoClickedDelegate__DelegateSignature(bool Yes) { Invoke(nameof(OnYesNoClickedDelegate__DelegateSignature), Yes); }
        public void OnShow(Object Title, Object Message) { Invoke(nameof(OnShow), Title, Message); }
        public void OnClicked(bool Yes) { Invoke(nameof(OnClicked), Yes); }
        public void Clicked(bool YesClicked) { Invoke(nameof(Clicked), YesClicked); }
    }
    public class YesNoPromptAction : BlueprintAsyncActionBase
    {
        public YesNoPromptAction(nint addr) : base(addr) { }
        public Object Yes { get { return this[nameof(Yes)]; } set { this[nameof(Yes)] = value; } }
        public Object No { get { return this[nameof(No)]; } set { this[nameof(No)] = value; } }
        public Object YesNoDelegate { get { return this[nameof(YesNoDelegate)]; } set { this[nameof(YesNoDelegate)] = value; } }
        public Object ActivePrompt { get { return this[nameof(ActivePrompt)]; } set { this[nameof(ActivePrompt)] = value; } }
        public void YesNoOutputPin__DelegateSignature() { Invoke(nameof(YesNoOutputPin__DelegateSignature)); }
        public YesNoPromptAction PromptYesNoWidget(Object WorldContext, YesNoPromptWidget InPromptWidget, Object InTitle, Object InMessage) { return Invoke<YesNoPromptAction>(nameof(PromptYesNoWidget), WorldContext, InPromptWidget, InTitle, InMessage); }
        public YesNoPromptAction PromptYesNo(Object WorldContext, YesNoPromptSettings Prompt) { return Invoke<YesNoPromptAction>(nameof(PromptYesNo), WorldContext, Prompt); }
        public YesNoPromptAction PromptPurchase(Object WorldContext, YesNoPromptSettings Prompt, Object Resources) { return Invoke<YesNoPromptAction>(nameof(PromptPurchase), WorldContext, Prompt, Resources); }
        public void PromptCallback(bool YesClicked) { Invoke(nameof(PromptCallback), YesClicked); }
    }
    public class ZipLineProjectile : Actor
    {
        public ZipLineProjectile(nint addr) : base(addr) { }
        public TimelineComponent Timeline { get { return this[nameof(Timeline)].As<TimelineComponent>(); } set { this["Timeline"] = value; } }
        public float LightIntensity { get { return this[nameof(LightIntensity)].GetValue<float>(); } set { this[nameof(LightIntensity)].SetValue<float>(value); } }
        public float MaterialGlow { get { return this[nameof(MaterialGlow)].GetValue<float>(); } set { this[nameof(MaterialGlow)].SetValue<float>(value); } }
        public Object Callback { get { return this[nameof(Callback)]; } set { this[nameof(Callback)] = value; } }
        public CurveFloat LightCurve { get { return this[nameof(LightCurve)].As<CurveFloat>(); } set { this["LightCurve"] = value; } }
        public UArray<PointLightComponent> PointLights { get { return new UArray<PointLightComponent>(this[nameof(PointLights)].Address); } }
        public UArray<MaterialInstanceDynamic> MaterialInstances { get { return new UArray<MaterialInstanceDynamic>(this[nameof(MaterialInstances)].Address); } }
        public Object OnUseStatusEffect { get { return this[nameof(OnUseStatusEffect)]; } set { this[nameof(OnUseStatusEffect)] = value; } }
        public Object OnReleaseStatusEffect { get { return this[nameof(OnReleaseStatusEffect)]; } set { this[nameof(OnReleaseStatusEffect)] = value; } }
        public void OnTimelineTick(float NewValue) { Invoke(nameof(OnTimelineTick), NewValue); }
        public void OnShoot(Vector Origin, Vector EndLocation) { Invoke(nameof(OnShoot), Origin, EndLocation); }
    }
    public class ZiplineLauncherComponent : WeaponFireComponent
    {
        public ZiplineLauncherComponent(nint addr) : base(addr) { }
        public byte HitCollisionChannel { get { return this[nameof(HitCollisionChannel)].GetValue<byte>(); } set { this[nameof(HitCollisionChannel)].SetValue<byte>(value); } }
        public float ProjectileLocationOffset { get { return this[nameof(ProjectileLocationOffset)].GetValue<float>(); } set { this[nameof(ProjectileLocationOffset)].SetValue<float>(value); } }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public void Server_Fire(Vector_NetQuantize Origin, Vector_NetQuantize Destination) { Invoke(nameof(Server_Fire), Origin, Destination); }
        public void All_ShowHit() { Invoke(nameof(All_ShowHit)); }
    }
    public class ZipLineItem : AmmoDrivenWeapon
    {
        public ZipLineItem(nint addr) : base(addr) { }
        public float MaxDistance { get { return this[nameof(MaxDistance)].GetValue<float>(); } set { this[nameof(MaxDistance)].SetValue<float>(value); } }
        public float MinDistance { get { return this[nameof(MinDistance)].GetValue<float>(); } set { this[nameof(MinDistance)].SetValue<float>(value); } }
        public float MinAngle { get { return this[nameof(MinAngle)].GetValue<float>(); } set { this[nameof(MinAngle)].SetValue<float>(value); } }
        public float MaxAngle { get { return this[nameof(MaxAngle)].GetValue<float>(); } set { this[nameof(MaxAngle)].SetValue<float>(value); } }
        public GameplayTagQuery ExcludeSurfaceTags { get { return this[nameof(ExcludeSurfaceTags)].As<GameplayTagQuery>(); } set { this["ExcludeSurfaceTags"] = value; } }
        public bool CanFireWeapon(Object FailMsg, DialogDataAsset FailShout) { return Invoke<bool>(nameof(CanFireWeapon), FailMsg, FailShout); }
    }
    public class AngleIndicatorWidget : FSDUserWidget
    {
        public AngleIndicatorWidget(nint addr) : base(addr) { }
        public float pixelsPerAngle { get { return this[nameof(pixelsPerAngle)].GetValue<float>(); } set { this[nameof(pixelsPerAngle)].SetValue<float>(value); } }
        public float AlphaFade { get { return this[nameof(AlphaFade)].GetValue<float>(); } set { this[nameof(AlphaFade)].SetValue<float>(value); } }
        public float MinAngle { get { return this[nameof(MinAngle)].GetValue<float>(); } set { this[nameof(MinAngle)].SetValue<float>(value); } }
        public float MaxAngle { get { return this[nameof(MaxAngle)].GetValue<float>(); } set { this[nameof(MaxAngle)].SetValue<float>(value); } }
    }
    public class ZipLineUsable : InstantUsable
    {
        public ZipLineUsable(nint addr) : base(addr) { }
    }
    public class ZipLineConnector : Actor
    {
        public ZipLineConnector(nint addr) : base(addr) { }
        public Object Character { get { return this[nameof(Character)]; } set { this[nameof(Character)] = value; } }
        public Vector ZipLineLocation { get { return this[nameof(ZipLineLocation)].As<Vector>(); } set { this["ZipLineLocation"] = value; } }
        public Vector ZipLineDirection { get { return this[nameof(ZipLineDirection)].As<Vector>(); } set { this["ZipLineDirection"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public bool bSpeeding { get { return this[nameof(bSpeeding)].Flag; } set { this[nameof(bSpeeding)].Flag = value; } }
        public void ReceiveUpdateZipLinePoint(Vector WorldLocation, Vector Directioy, bool Speeding) { Invoke(nameof(ReceiveUpdateZipLinePoint), WorldLocation, Directioy, Speeding); }
        public void ReceiveDisconnected() { Invoke(nameof(ReceiveDisconnected)); }
        public void ReceiveConnected(Vector WorldLocation, Vector Direction) { Invoke(nameof(ReceiveConnected), WorldLocation, Direction); }
    }
    public class ZipLineStateComponent : CharacterStateComponent
    {
        public ZipLineStateComponent(nint addr) : base(addr) { }
        public ZipLineConnectorHandler ZipLineConnector { get { return this[nameof(ZipLineConnector)].As<ZipLineConnectorHandler>(); } set { this["ZipLineConnector"] = value; } }
        public float VerticalOffset { get { return this[nameof(VerticalOffset)].GetValue<float>(); } set { this[nameof(VerticalOffset)].SetValue<float>(value); } }
        public float HorizontalOffset { get { return this[nameof(HorizontalOffset)].GetValue<float>(); } set { this[nameof(HorizontalOffset)].SetValue<float>(value); } }
        public float TravelSpeed { get { return this[nameof(TravelSpeed)].GetValue<float>(); } set { this[nameof(TravelSpeed)].SetValue<float>(value); } }
        public float AccelAndDecelAlpha { get { return this[nameof(AccelAndDecelAlpha)].GetValue<float>(); } set { this[nameof(AccelAndDecelAlpha)].SetValue<float>(value); } }
        public float JumpForce { get { return this[nameof(JumpForce)].GetValue<float>(); } set { this[nameof(JumpForce)].SetValue<float>(value); } }
        public float SpeedBoostActivationDuration { get { return this[nameof(SpeedBoostActivationDuration)].GetValue<float>(); } set { this[nameof(SpeedBoostActivationDuration)].SetValue<float>(value); } }
        public float SpeedBoostActivionMinAngle { get { return this[nameof(SpeedBoostActivionMinAngle)].GetValue<float>(); } set { this[nameof(SpeedBoostActivionMinAngle)].SetValue<float>(value); } }
        public float BaseSpeedBoost { get { return this[nameof(BaseSpeedBoost)].GetValue<float>(); } set { this[nameof(BaseSpeedBoost)].SetValue<float>(value); } }
        public float AdditionalSpeedBoostPerAngle { get { return this[nameof(AdditionalSpeedBoostPerAngle)].GetValue<float>(); } set { this[nameof(AdditionalSpeedBoostPerAngle)].SetValue<float>(value); } }
        public float SpeedBoostCoolDownDuration { get { return this[nameof(SpeedBoostCoolDownDuration)].GetValue<float>(); } set { this[nameof(SpeedBoostCoolDownDuration)].SetValue<float>(value); } }
        public float AccelerationAlpha { get { return this[nameof(AccelerationAlpha)].GetValue<float>(); } set { this[nameof(AccelerationAlpha)].SetValue<float>(value); } }
        public float DecelerationAlpha { get { return this[nameof(DecelerationAlpha)].GetValue<float>(); } set { this[nameof(DecelerationAlpha)].SetValue<float>(value); } }
        public float MinStartDistanceToEnd { get { return this[nameof(MinStartDistanceToEnd)].GetValue<float>(); } set { this[nameof(MinStartDistanceToEnd)].SetValue<float>(value); } }
        public float ReleaseDistance { get { return this[nameof(ReleaseDistance)].GetValue<float>(); } set { this[nameof(ReleaseDistance)].SetValue<float>(value); } }
        public bool bCanActivateSpeedBoost { get { return this[nameof(bCanActivateSpeedBoost)].Flag; } set { this[nameof(bCanActivateSpeedBoost)].Flag = value; } }
        public bool bShowSpeedBoostActivator { get { return this[nameof(bShowSpeedBoostActivator)].Flag; } set { this[nameof(bShowSpeedBoostActivator)].Flag = value; } }
        public float SpeedBoostActivationProgress { get { return this[nameof(SpeedBoostActivationProgress)].GetValue<float>(); } set { this[nameof(SpeedBoostActivationProgress)].SetValue<float>(value); } }
        public SoundBase AudioOnStart { get { return this[nameof(AudioOnStart)].As<SoundBase>(); } set { this["AudioOnStart"] = value; } }
        public SoundBase AudioOnDuring { get { return this[nameof(AudioOnDuring)].As<SoundBase>(); } set { this["AudioOnDuring"] = value; } }
        public SoundBase AudioOnChangingDirection { get { return this[nameof(AudioOnChangingDirection)].As<SoundBase>(); } set { this["AudioOnChangingDirection"] = value; } }
        public SoundBase AudioOnStop { get { return this[nameof(AudioOnStop)].As<SoundBase>(); } set { this["AudioOnStop"] = value; } }
        public SoundBase AudioOnSpeedBoostActivated { get { return this[nameof(AudioOnSpeedBoostActivated)].As<SoundBase>(); } set { this["AudioOnSpeedBoostActivated"] = value; } }
        public DialogDataAsset ShoutStartUsing { get { return this[nameof(ShoutStartUsing)].As<DialogDataAsset>(); } set { this["ShoutStartUsing"] = value; } }
        public DialogDataAsset ShoutSpeedBoostActivated { get { return this[nameof(ShoutSpeedBoostActivated)].As<DialogDataAsset>(); } set { this["ShoutSpeedBoostActivated"] = value; } }
        public ZipLineProjectile ZipLineProjectile { get { return this[nameof(ZipLineProjectile)].As<ZipLineProjectile>(); } set { this["ZipLineProjectile"] = value; } }
        public ZipLine ZipLine { get { return this[nameof(ZipLine)].As<ZipLine>(); } set { this["ZipLine"] = value; } }
        public float DamageBeforeFalling { get { return this[nameof(DamageBeforeFalling)].GetValue<float>(); } set { this[nameof(DamageBeforeFalling)].SetValue<float>(value); } }
        public float FriendlyFireModifier { get { return this[nameof(FriendlyFireModifier)].GetValue<float>(); } set { this[nameof(FriendlyFireModifier)].SetValue<float>(value); } }
        public float DamageResetTime { get { return this[nameof(DamageResetTime)].GetValue<float>(); } set { this[nameof(DamageResetTime)].SetValue<float>(value); } }
        public AudioComponent AudioComponent { get { return this[nameof(AudioComponent)].As<AudioComponent>(); } set { this["AudioComponent"] = value; } }
        public void ServerSetSpeedBoostActivated(bool InBoostActivated) { Invoke(nameof(ServerSetSpeedBoostActivated), InBoostActivated); }
        public void ServerJumpPressed(bool JumpForward) { Invoke(nameof(ServerJumpPressed), JumpForward); }
        public void ServerForwardInputChanged(float Input) { Invoke(nameof(ServerForwardInputChanged), Input); }
        public void ServerChangeDirection() { Invoke(nameof(ServerChangeDirection)); }
        public void ReceiveSpeedBoostDeactivated() { Invoke(nameof(ReceiveSpeedBoostDeactivated)); }
        public void ReceiveSpeedBoostActivated() { Invoke(nameof(ReceiveSpeedBoostActivated)); }
        public void OnRep_ZipLine() { Invoke(nameof(OnRep_ZipLine)); }
        public void OnPlayerHit(float Damage, DamageData DamageData, bool anyHealthLost) { Invoke(nameof(OnPlayerHit), Damage, DamageData, anyHealthLost); }
        public bool GetSpeedBoostActivated() { return Invoke<bool>(nameof(GetSpeedBoostActivated)); }
        public Vector GetJumpVector(Vector LookVector, Vector CurrentVelocity) { return Invoke<Vector>(nameof(GetJumpVector), LookVector, CurrentVelocity); }
        public void All_SpeedBoostChanged(bool bActive) { Invoke(nameof(All_SpeedBoostChanged), bActive); }
    }
    public enum EDrinkableAlcoholStrength : int
    {
        NonAlcoholic = 0,
        Light = 1,
        Regular = 2,
        Strong = 3,
        VeryStrong = 4,
        InstantPassout = 5,
        EDrinkableAlcoholStrength_MAX = 6,
    }
    public enum EIntoxicationState : int
    {
        NotIntoxicated = 0,
        Intoxicated = 1,
        PassOut = 2,
        EIntoxicationState_MAX = 3,
    }
    public class CountDownFloat : Object
    {
        public CountDownFloat(nint addr) : base(addr) { }
        public float CountDownDuration { get { return this[nameof(CountDownDuration)].GetValue<float>(); } set { this[nameof(CountDownDuration)].SetValue<float>(value); } }
    }
    public class LerpingPercent : Object
    {
        public LerpingPercent(nint addr) : base(addr) { }
        public byte TargetPercent { get { return this[nameof(TargetPercent)].GetValue<byte>(); } set { this[nameof(TargetPercent)].SetValue<byte>(value); } }
    }
    public class ReplicatedCharacterData : Object
    {
        public ReplicatedCharacterData(nint addr) : base(addr) { }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public float TemperatureEffect { get { return this[nameof(TemperatureEffect)].GetValue<float>(); } set { this[nameof(TemperatureEffect)].SetValue<float>(value); } }
        public bool bCanTakeDamage { get { return this[nameof(bCanTakeDamage)].Flag; } set { this[nameof(bCanTakeDamage)].Flag = value; } }
    }
    public class ItemLoadoutAnimations : Object
    {
        public ItemLoadoutAnimations(nint addr) : base(addr) { }
        public AnimMontage Loadout { get { return this[nameof(Loadout)].As<AnimMontage>(); } set { this["Loadout"] = value; } }
        public UArray<AnimSequence> Loadout_IdleBreaks { get { return new UArray<AnimSequence>(this[nameof(Loadout_IdleBreaks)].Address); } }
    }
    public class AudioWithCooldown : Object
    {
        public AudioWithCooldown(nint addr) : base(addr) { }
        public SoundCue Audio { get { return this[nameof(Audio)].As<SoundCue>(); } set { this["Audio"] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
    }
    public enum EOutline : int
    {
        OL_NONE = 0,
        OL_FRIENDLY = 251,
        OL_NEUTRAL = 252,
        OL_ENEMY = 253,
        OL_ITEM = 254,
        EOutline_MAX = 255,
    }
    public enum ELaserPointerTargetType : int
    {
        Chunkable = 0,
        Dirt = 1,
        Player = 2,
        Enemy = 3,
        EmbeddedGem = 4,
        Other = 5,
        ELaserPointerTargetType_MAX = 6,
    }
    public class LaserPointerTarget : Object
    {
        public LaserPointerTarget(nint addr) : base(addr) { }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public Actor ExtraTarget { get { return this[nameof(ExtraTarget)].As<Actor>(); } set { this["ExtraTarget"] = value; } }
    }
    public enum ECharacterState : int
    {
        Walking = 0,
        Downed = 1,
        Dead = 2,
        Falling = 3,
        Paralyzed = 4,
        Using = 5,
        ZipLine = 6,
        NoMovement = 7,
        Grabbed = 8,
        Flying = 9,
        Frozen = 10,
        PassedOut = 11,
        Photography = 12,
        Piloting = 13,
        Attached = 14,
        Pushing = 15,
        TrackMovement = 16,
        EnemyControl = 17,
        Infected = 18,
        Invalid = 19,
        ECharacterState_MAX = 20,
    }
    public enum ECharacterCameraMode : int
    {
        FirstPerson = 0,
        ThirdPerson = 1,
        Follow = 2,
        DownCamera = 3,
        TerrainScanner = 4,
        PhotographyMode = 5,
        FirstPersonHeadOnly = 6,
        ECharacterCameraMode_MAX = 7,
    }
    public class CoolDownProgressStyle : Object
    {
        public CoolDownProgressStyle(nint addr) : base(addr) { }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public LinearColor IconTint { get { return this[nameof(IconTint)].As<LinearColor>(); } set { this["IconTint"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object WidgetOverride { get { return this[nameof(WidgetOverride)]; } set { this[nameof(WidgetOverride)] = value; } }
        public SoundCue AudioCoolDownFinished { get { return this[nameof(AudioCoolDownFinished)].As<SoundCue>(); } set { this["AudioCoolDownFinished"] = value; } }
    }
    public class HeroInfo : Object
    {
        public HeroInfo(nint addr) : base(addr) { }
        public Object HeroName { get { return this[nameof(HeroName)]; } set { this[nameof(HeroName)] = value; } }
        public Texture2D HeroIcon { get { return this[nameof(HeroIcon)].As<Texture2D>(); } set { this["HeroIcon"] = value; } }
        public Texture2D SmallHeroIcon { get { return this[nameof(SmallHeroIcon)].As<Texture2D>(); } set { this["SmallHeroIcon"] = value; } }
        public Texture2D HeroFullSizeImage { get { return this[nameof(HeroFullSizeImage)].As<Texture2D>(); } set { this["HeroFullSizeImage"] = value; } }
        public LinearColor HeroColor { get { return this[nameof(HeroColor)].As<LinearColor>(); } set { this["HeroColor"] = value; } }
        public Object HeroShortDescription { get { return this[nameof(HeroShortDescription)]; } set { this[nameof(HeroShortDescription)] = value; } }
        public Object HeroLongDescription { get { return this[nameof(HeroLongDescription)]; } set { this[nameof(HeroLongDescription)] = value; } }
        public Object SwitchToMessage { get { return this[nameof(SwitchToMessage)]; } set { this[nameof(SwitchToMessage)] = value; } }
    }
    public enum EInputKeys : int
    {
        Use = 0,
        Fire = 1,
        Mine = 2,
        EInputKeys_MAX = 255,
    }
    public class EnhancedTrace : Object
    {
        public EnhancedTrace(nint addr) : base(addr) { }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public Object Instigator { get { return this[nameof(Instigator)]; } set { this[nameof(Instigator)] = value; } }
        public Vector Origin { get { return this[nameof(Origin)].As<Vector>(); } set { this["Origin"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public Vector HitPoint { get { return this[nameof(HitPoint)].As<Vector>(); } set { this["HitPoint"] = value; } }
    }
    public class CameraSpringSettings : Object
    {
        public CameraSpringSettings(nint addr) : base(addr) { }
        public bool SpringEnabled { get { return this[nameof(SpringEnabled)].Flag; } set { this[nameof(SpringEnabled)].Flag = value; } }
        public float StepThreshold { get { return this[nameof(StepThreshold)].GetValue<float>(); } set { this[nameof(StepThreshold)].SetValue<float>(value); } }
        public Vector2D SpringExtend { get { return this[nameof(SpringExtend)].As<Vector2D>(); } set { this["SpringExtend"] = value; } }
        public float RetractStrength { get { return this[nameof(RetractStrength)].GetValue<float>(); } set { this[nameof(RetractStrength)].SetValue<float>(value); } }
        public float RetractDownReduction { get { return this[nameof(RetractDownReduction)].GetValue<float>(); } set { this[nameof(RetractDownReduction)].SetValue<float>(value); } }
        public bool ShowDebug { get { return this[nameof(ShowDebug)].Flag; } set { this[nameof(ShowDebug)].Flag = value; } }
        public float LastSpeedZ { get { return this[nameof(LastSpeedZ)].GetValue<float>(); } set { this[nameof(LastSpeedZ)].SetValue<float>(value); } }
        public Vector LastLocation { get { return this[nameof(LastLocation)].As<Vector>(); } set { this["LastLocation"] = value; } }
        public Vector StartSpringLocation { get { return this[nameof(StartSpringLocation)].As<Vector>(); } set { this["StartSpringLocation"] = value; } }
        public bool bSpringInitialized { get { return this[nameof(bSpringInitialized)].Flag; } set { this[nameof(bSpringInitialized)].Flag = value; } }
    }
    public class AnalogAimSettings : Object
    {
        public AnalogAimSettings(nint addr) : base(addr) { }
        public Vector2D AimRate { get { return this[nameof(AimRate)].As<Vector2D>(); } set { this["AimRate"] = value; } }
        public CurveFloat SensitivityCurve { get { return this[nameof(SensitivityCurve)].As<CurveFloat>(); } set { this["SensitivityCurve"] = value; } }
        public float LookAtStickyness { get { return this[nameof(LookAtStickyness)].GetValue<float>(); } set { this[nameof(LookAtStickyness)].SetValue<float>(value); } }
        public float StickynessRecoverySpeed { get { return this[nameof(StickynessRecoverySpeed)].GetValue<float>(); } set { this[nameof(StickynessRecoverySpeed)].SetValue<float>(value); } }
        public float StickynessMaxSensitivity { get { return this[nameof(StickynessMaxSensitivity)].GetValue<float>(); } set { this[nameof(StickynessMaxSensitivity)].SetValue<float>(value); } }
        public Vector2D ThirdPersonLookRate { get { return this[nameof(ThirdPersonLookRate)].As<Vector2D>(); } set { this["ThirdPersonLookRate"] = value; } }
    }
    public class HoldButton : Object
    {
        public HoldButton(nint addr) : base(addr) { }
        public Object HoldingText { get { return this[nameof(HoldingText)]; } set { this[nameof(HoldingText)] = value; } }
        public float HoldStartTime { get { return this[nameof(HoldStartTime)].GetValue<float>(); } set { this[nameof(HoldStartTime)].SetValue<float>(value); } }
        public float HoldDuration { get { return this[nameof(HoldDuration)].GetValue<float>(); } set { this[nameof(HoldDuration)].SetValue<float>(value); } }
    }
    public class DownCameraSettings : Object
    {
        public DownCameraSettings(nint addr) : base(addr) { }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public int TargetIndex { get { return this[nameof(TargetIndex)].GetValue<int>(); } set { this[nameof(TargetIndex)].SetValue<int>(value); } }
        public float MinPitch { get { return this[nameof(MinPitch)].GetValue<float>(); } set { this[nameof(MinPitch)].SetValue<float>(value); } }
        public float MaxPitch { get { return this[nameof(MaxPitch)].GetValue<float>(); } set { this[nameof(MaxPitch)].SetValue<float>(value); } }
        public float SmoothSpeed { get { return this[nameof(SmoothSpeed)].GetValue<float>(); } set { this[nameof(SmoothSpeed)].SetValue<float>(value); } }
    }
    public class PlatformComponent : Object
    {
        public PlatformComponent(nint addr) : base(addr) { }
        public Object ComponentClass { get { return this[nameof(ComponentClass)]; } set { this[nameof(ComponentClass)] = value; } }
        public EPlatformComponentCriteria Criteria { get { return (EPlatformComponentCriteria)this[nameof(Criteria)].GetValue<int>(); } set { this[nameof(Criteria)].SetValue<int>((int)value); } }
    }
    public enum EPlatformComponentCriteria : int
    {
        All = 0,
        ServerOnly = 1,
        ClientOnly = 2,
        OwningClientOnly = 3,
        EPlatformComponentCriteria_MAX = 4,
    }
    public class DamageDataBase : Object
    {
        public DamageDataBase(nint addr) : base(addr) { }
        public FSDPhysicalMaterial PhysMaterial { get { return this[nameof(PhysMaterial)].As<FSDPhysicalMaterial>(); } set { this["PhysMaterial"] = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public Vector HitLocation { get { return this[nameof(HitLocation)].As<Vector>(); } set { this["HitLocation"] = value; } }
        public int BoneIndex { get { return this[nameof(BoneIndex)].GetValue<int>(); } set { this[nameof(BoneIndex)].SetValue<int>(value); } }
        public DamageImpulse DamageImpulseOverride { get { return this[nameof(DamageImpulseOverride)].As<DamageImpulse>(); } set { this["DamageImpulseOverride"] = value; } }
        public bool IsRadial { get { return this[nameof(IsRadial)].Flag; } set { this[nameof(IsRadial)].Flag = value; } }
    }
    public class DamageData : DamageDataBase
    {
        public DamageData(nint addr) : base(addr) { }
        public DamageClass DamageClass { get { return this[nameof(DamageClass)].As<DamageClass>(); } set { this["DamageClass"] = value; } }
        public Object Instigator { get { return this[nameof(Instigator)]; } set { this[nameof(Instigator)] = value; } }
        public Object DamageCauser { get { return this[nameof(DamageCauser)]; } set { this[nameof(DamageCauser)] = value; } }
        public float DamageModifier { get { return this[nameof(DamageModifier)].GetValue<float>(); } set { this[nameof(DamageModifier)].SetValue<float>(value); } }
        public float ArmorPenetration { get { return this[nameof(ArmorPenetration)].GetValue<float>(); } set { this[nameof(ArmorPenetration)].SetValue<float>(value); } }
        public bool IsFriendlyFire { get { return this[nameof(IsFriendlyFire)].Flag; } set { this[nameof(IsFriendlyFire)].Flag = value; } }
    }
    public enum EPlayerTemperatureState : int
    {
        Normal = 0,
        Frozen = 1,
        Overheated = 2,
        EPlayerTemperatureState_MAX = 3,
    }
    public enum EThawInputDirection : int
    {
        EForward = 0,
        ERight = 1,
        EBack = 2,
        ELeft = 3,
        ENA = 4,
        EThawInputDirection_MAX = 5,
    }
    public enum EDeepMovementState : int
    {
        Stationary = 0,
        Controlled = 1,
        Moving = 2,
        WaitingForPath = 3,
        AttackStance = 4,
        FakePhysics = 5,
        EDeepMovementState_MAX = 6,
    }
    public enum ECharselectionCameraLocation : int
    {
        Selection = 0,
        Customization = 1,
        Crafting = 2,
        ViewWeapon = 3,
        EndScreen = 4,
        Forge = 5,
        Pickaxe = 6,
        ECharselectionCameraLocation_MAX = 7,
    }
    public class CharacterViewScene : Object
    {
        public CharacterViewScene(nint addr) : base(addr) { }
        public UArray<CharacterViewInfo> Characters { get { return new UArray<CharacterViewInfo>(this[nameof(Characters)].Address); } }
        public bool MissionSuccess { get { return this[nameof(MissionSuccess)].Flag; } set { this[nameof(MissionSuccess)].Flag = value; } }
    }
    public class CharacterViewInfo : Object
    {
        public CharacterViewInfo(nint addr) : base(addr) { }
        public Object CharacterClass { get { return this[nameof(CharacterClass)]; } set { this[nameof(CharacterClass)] = value; } }
        public EquippedVanity EquippedVanity { get { return this[nameof(EquippedVanity)].As<EquippedVanity>(); } set { this["EquippedVanity"] = value; } }
        public bool SurvivedInPod { get { return this[nameof(SurvivedInPod)].Flag; } set { this[nameof(SurvivedInPod)].Flag = value; } }
        public VictoryPose VictoryPose { get { return this[nameof(VictoryPose)].As<VictoryPose>(); } set { this["VictoryPose"] = value; } }
    }
    public class EquippedVanity : Object
    {
        public EquippedVanity(nint addr) : base(addr) { }
        public UArray<VanityItem> Vanity { get { return new UArray<VanityItem>(this[nameof(Vanity)].Address); } }
        public VanityItem SelectedArmorMaterial { get { return this[nameof(SelectedArmorMaterial)].As<VanityItem>(); } set { this["SelectedArmorMaterial"] = value; } }
        public bool UsingSlevedArmor { get { return this[nameof(UsingSlevedArmor)].Flag; } set { this[nameof(UsingSlevedArmor)].Flag = value; } }
    }
    public enum EMinersManualSection : int
    {
        FrontPage = 0,
        Hints = 1,
        Combat = 2,
        Creatures = 3,
        Biomes = 4,
        Missions = 5,
        Resources = 6,
        EMinersManualSection_MAX = 7,
    }
    public class NetworkConnectionInfo : Object
    {
        public NetworkConnectionInfo(nint addr) : base(addr) { }
        public FSDPlayerController PlayerController { get { return this[nameof(PlayerController)].As<FSDPlayerController>(); } set { this["PlayerController"] = value; } }
        public float PacketLossIn { get { return this[nameof(PacketLossIn)].GetValue<float>(); } set { this[nameof(PacketLossIn)].SetValue<float>(value); } }
        public float PacketLossOut { get { return this[nameof(PacketLossOut)].GetValue<float>(); } set { this[nameof(PacketLossOut)].SetValue<float>(value); } }
        public float Ping { get { return this[nameof(Ping)].GetValue<float>(); } set { this[nameof(Ping)].SetValue<float>(value); } }
        public float Jitter { get { return this[nameof(Jitter)].GetValue<float>(); } set { this[nameof(Jitter)].SetValue<float>(value); } }
        public bool IsValid { get { return this[nameof(IsValid)].Flag; } set { this[nameof(IsValid)].Flag = value; } }
    }
    public class GlobalMissionSeed : Object
    {
        public GlobalMissionSeed(nint addr) : base(addr) { }
        public int RandomSeed { get { return this[nameof(RandomSeed)].GetValue<int>(); } set { this[nameof(RandomSeed)].SetValue<int>(value); } }
        public int Season { get { return this[nameof(Season)].GetValue<int>(); } set { this[nameof(Season)].SetValue<int>(value); } }
        public int MapKey { get { return this[nameof(MapKey)].GetValue<int>(); } set { this[nameof(MapKey)].SetValue<int>(value); } }
    }
    public enum ECharacterSelectorItemStatus : int
    {
        LeaveAsIs = 0,
        SwitchToDefault = 1,
        NoItemEquipped = 2,
        ECharacterSelectorItemStatus_MAX = 3,
    }
    public class FSDServerSearchOptions : Object
    {
        public FSDServerSearchOptions(nint addr) : base(addr) { }
        public ESteamServerJoinStatus JoinStatus { get { return (ESteamServerJoinStatus)this[nameof(JoinStatus)].GetValue<int>(); } set { this[nameof(JoinStatus)].SetValue<int>((int)value); } }
        public ESteamSearchRegion SearchRegion { get { return (ESteamSearchRegion)this[nameof(SearchRegion)].GetValue<int>(); } set { this[nameof(SearchRegion)].SetValue<int>((int)value); } }
        public UArray<DifficultySetting> Difficulties { get { return new UArray<DifficultySetting>(this[nameof(Difficulties)].Address); } }
        public UArray<Season> Seasons { get { return new UArray<Season>(this[nameof(Seasons)].Address); } }
        public bool DeepDive { get { return this[nameof(DeepDive)].Flag; } set { this[nameof(DeepDive)].Flag = value; } }
        public Object SearchString { get { return this[nameof(SearchString)]; } set { this[nameof(SearchString)] = value; } }
        public int MissionSeed { get { return this[nameof(MissionSeed)].GetValue<int>(); } set { this[nameof(MissionSeed)].SetValue<int>(value); } }
        public GlobalMissionSeed GlobalMissionSeed { get { return this[nameof(GlobalMissionSeed)].As<GlobalMissionSeed>(); } set { this["GlobalMissionSeed"] = value; } }
        public UArray<EGameType> GameTypes { get { return new UArray<EGameType>(this[nameof(GameTypes)].Address); } }
    }
    public enum EGameType : int
    {
        Fully = 0,
        Progression = 1,
        Sandbox = 2,
        Vanilla = 99,
        EGameType_MAX = 100,
    }
    public enum ESteamSearchRegion : int
    {
        Close = 0,
        Medium = 1,
        Far = 2,
        World = 3,
        ESteamSearchRegion_MAX = 4,
    }
    public enum ESteamServerJoinStatus : int
    {
        Open = 0,
        PasswordRequired = 1,
        ESteamServerJoinStatus_MAX = 2,
    }
    public enum EAlwaysLoadedWorlds : int
    {
        CharacterViewer = 0,
        LoaderNormal = 1,
        LoaderDeepDive = 2,
        EAlwaysLoadedWorlds_MAX = 3,
    }
    public enum EDisconnectReason : int
    {
        None = 0,
        Kicked_HaveMyReasons = 1,
        Kicked_ShouldBePrivate = 2,
        Kicked_AFK = 3,
        Banned = 4,
        ServerQuit = 5,
        Disconnected = 6,
        SignInChange = 7,
        JoinSessionFail_SessionIsFull = 8,
        JoinSessionFail_SessionDoesNotExist = 9,
        JoinSessionFail_Other = 10,
        JoinSessionFail_Privilege = 11,
        NetworkError = 12,
        SignOutComplete = 13,
        WrongPassword = 14,
        DeepDiveLateJoin = 15,
        MissionStarting = 16,
        LatejoinNotAllowed = 17,
        OutdatedClient = 18,
        EDisconnectReason_MAX = 19,
    }
    public class FSDChatMessage : Object
    {
        public FSDChatMessage(nint addr) : base(addr) { }
        public EChatMessageType MsgType { get { return (EChatMessageType)this[nameof(MsgType)].GetValue<int>(); } set { this[nameof(MsgType)].SetValue<int>((int)value); } }
        public Object Sender { get { return this[nameof(Sender)]; } set { this[nameof(Sender)] = value; } }
        public EChatSenderType SenderType { get { return (EChatSenderType)this[nameof(SenderType)].GetValue<int>(); } set { this[nameof(SenderType)].SetValue<int>((int)value); } }
        public Object Msg { get { return this[nameof(Msg)]; } set { this[nameof(Msg)] = value; } }
        public UniqueNetIdRepl SenderNetID { get { return this[nameof(SenderNetID)].As<UniqueNetIdRepl>(); } set { this["SenderNetID"] = value; } }
    }
    public enum EChatSenderType : int
    {
        NormalUser = 0,
        DeluxUser = 1,
        Developer = 2,
        Streamer = 3,
        Modder = 4,
        EChatSenderType_MAX = 5,
    }
    public enum EChatMessageType : int
    {
        ES_Chat = 0,
        ES_Game = 1,
        ES_MAX = 2,
    }
    public class GameDifficulty : Object
    {
        public GameDifficulty(nint addr) : base(addr) { }
        public DifficultySetting Difficulty { get { return this[nameof(Difficulty)].As<DifficultySetting>(); } set { this["Difficulty"] = value; } }
        public UArray<DifficultyMutatorItem> Mutators { get { return new UArray<DifficultyMutatorItem>(this[nameof(Mutators)].Address); } }
    }
    public class DifficultyMutatorItem : Object
    {
        public DifficultyMutatorItem(nint addr) : base(addr) { }
        public DifficultyMutatorSetupItem SetupItem { get { return this[nameof(SetupItem)].As<DifficultyMutatorSetupItem>(); } set { this["SetupItem"] = value; } }
        public int AppliedCount { get { return this[nameof(AppliedCount)].GetValue<int>(); } set { this[nameof(AppliedCount)].SetValue<int>(value); } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
    }
    public enum EFSDInputSource : int
    {
        None = 0,
        MouseAndKeyboard = 1,
        Controller = 2,
        EFSDInputSource_MAX = 3,
    }
    public enum EKeyboardLayout : int
    {
        QWERTY = 0,
        AZERTY = 1,
        QWERTZ = 2,
        EKeyboardLayout_MAX = 3,
    }
    public class ColorVisionDeficiencySettings : Object
    {
        public ColorVisionDeficiencySettings(nint addr) : base(addr) { }
        public EColorVisionDeficiency Type { get { return (EColorVisionDeficiency)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public float Severity { get { return this[nameof(Severity)].GetValue<float>(); } set { this[nameof(Severity)].SetValue<float>(value); } }
    }
    public enum EHUDVisibilityReason : int
    {
        Invalid = 0,
        UserChoice = 1,
        StandDown = 2,
        MenuActive = 4,
        Photography = 8,
        EHUDVisibilityReason_MAX = 9,
    }
    public enum EMinersManualSinglePage : int
    {
        Mutators = 0,
        Warnings = 1,
        DamageTypes = 2,
        Weakpoints = 3,
        Armor = 4,
        Light = 5,
        Ammo = 6,
        Traversal = 7,
        Spacerig = 8,
        Upgrades = 9,
        Perks = 10,
        Bosco = 11,
        Assignments = 12,
        Navigation = 13,
        EMinersManualSinglePage_MAX = 14,
    }
    public enum EArmorDamageType : int
    {
        Normal = 0,
        Dissolve = 1,
        Beam = 2,
        EArmorDamageType_MAX = 3,
    }
    public enum ESpacerigStartType : int
    {
        PlayerHub = 0,
        Medbay = 1,
        ESpacerigStartType_MAX = 2,
    }
    public class VanityMasteryResult : Object
    {
        public VanityMasteryResult(nint addr) : base(addr) { }
        public VanityMasterySave Previous { get { return this[nameof(Previous)].As<VanityMasterySave>(); } set { this["Previous"] = value; } }
        public VanityMasterySave Current { get { return this[nameof(Current)].As<VanityMasterySave>(); } set { this["Current"] = value; } }
        public int FashionitesRewarded { get { return this[nameof(FashionitesRewarded)].GetValue<int>(); } set { this[nameof(FashionitesRewarded)].SetValue<int>(value); } }
    }
    public class VanityMasterySave : Object
    {
        public VanityMasterySave(nint addr) : base(addr) { }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int XP { get { return this[nameof(XP)].GetValue<int>(); } set { this[nameof(XP)].SetValue<int>(value); } }
        public bool HasAwardedForOldPurchases { get { return this[nameof(HasAwardedForOldPurchases)].Flag; } set { this[nameof(HasAwardedForOldPurchases)].Flag = value; } }
        public int FashionitesAwaredForOldPurchases { get { return this[nameof(FashionitesAwaredForOldPurchases)].GetValue<int>(); } set { this[nameof(FashionitesAwaredForOldPurchases)].SetValue<int>(value); } }
    }
    public enum EItemCategory : int
    {
        PrimaryWeapon = 0,
        SecondaryWeapon = 1,
        TraversalTool = 2,
        ClassTool = 3,
        Grenade = 4,
        Flare = 5,
        MiningTool = 6,
        Armor = 7,
        EItemCategory_MAX = 8,
    }
    public enum EFSDFaction : int
    {
        NoFaction = 0,
        CaveCrawlers = 1,
        MightyMiners = 2,
        DirtDiggers = 3,
        EFSDFaction_MAX = 4,
    }
    public enum ESonyInputSettingsBools : int
    {
        MotionControlEnabled = 0,
        MotionControlFlight = 1,
        MotionControlSalute = 2,
        MotionControlPrecisionMode = 3,
        AdaptiveTriggersEnabled = 4,
        TouchPadTerrainScannerEnabled = 5,
        TouchPadGesturesEnabled = 6,
        ControllerSpeakerMissionControl = 7,
        ControllerSpeakerSalute = 8,
        ControllerSpeakerFlare = 9,
        ControllerSpeakerMineralCollection = 10,
        ESonyInputSettingsBools_MAX = 11,
    }
    public enum ESonyInputSettingsFloats : int
    {
        MotionControlXSensitivity = 0,
        MotionControlYSensitivity = 1,
        ControllerSpeakerVolume = 2,
        TouchPadTerrainScannerXSensitivity = 3,
        TouchPadTerrainScannerYSensitivity = 4,
        TouchPadTerrainScannerZoomSensitivity = 5,
        ESonyInputSettingsFloats_MAX = 6,
    }
    public enum ESonyControllerLightMode : int
    {
        Disabled = 0,
        Simple = 1,
        Default = 2,
        ESonyControllerLightMode_MAX = 3,
    }
    public enum ESonyControllerMotionMapping : int
    {
        Yaw = 0,
        Roll = 1,
        ESonyControllerMotionMapping_MAX = 2,
    }
    public class SonyInputSettings : Object
    {
        public SonyInputSettings(nint addr) : base(addr) { }
        public bool MotionControlEnabled { get { return this[nameof(MotionControlEnabled)].Flag; } set { this[nameof(MotionControlEnabled)].Flag = value; } }
        public float MotionControlXSensitivity { get { return this[nameof(MotionControlXSensitivity)].GetValue<float>(); } set { this[nameof(MotionControlXSensitivity)].SetValue<float>(value); } }
        public float MotionControlYSensitivity { get { return this[nameof(MotionControlYSensitivity)].GetValue<float>(); } set { this[nameof(MotionControlYSensitivity)].SetValue<float>(value); } }
        public bool MotionControlPrecisionMode { get { return this[nameof(MotionControlPrecisionMode)].Flag; } set { this[nameof(MotionControlPrecisionMode)].Flag = value; } }
        public bool MotionControlSalute { get { return this[nameof(MotionControlSalute)].Flag; } set { this[nameof(MotionControlSalute)].Flag = value; } }
        public bool MotionControlFlight { get { return this[nameof(MotionControlFlight)].Flag; } set { this[nameof(MotionControlFlight)].Flag = value; } }
        public ESonyControllerMotionMapping MotionXMapping { get { return (ESonyControllerMotionMapping)this[nameof(MotionXMapping)].GetValue<int>(); } set { this[nameof(MotionXMapping)].SetValue<int>((int)value); } }
        public bool AdaptiveTriggersEnabled { get { return this[nameof(AdaptiveTriggersEnabled)].Flag; } set { this[nameof(AdaptiveTriggersEnabled)].Flag = value; } }
        public float ControllerSpeakerVolume { get { return this[nameof(ControllerSpeakerVolume)].GetValue<float>(); } set { this[nameof(ControllerSpeakerVolume)].SetValue<float>(value); } }
        public bool ControllerSpeakerMissionControl { get { return this[nameof(ControllerSpeakerMissionControl)].Flag; } set { this[nameof(ControllerSpeakerMissionControl)].Flag = value; } }
        public bool ControllerSpeakerSalute { get { return this[nameof(ControllerSpeakerSalute)].Flag; } set { this[nameof(ControllerSpeakerSalute)].Flag = value; } }
        public bool ControllerSpeakerFlare { get { return this[nameof(ControllerSpeakerFlare)].Flag; } set { this[nameof(ControllerSpeakerFlare)].Flag = value; } }
        public bool ControllerSpeakerMineralCollection { get { return this[nameof(ControllerSpeakerMineralCollection)].Flag; } set { this[nameof(ControllerSpeakerMineralCollection)].Flag = value; } }
        public bool TouchPadTerrainScannerEnabled { get { return this[nameof(TouchPadTerrainScannerEnabled)].Flag; } set { this[nameof(TouchPadTerrainScannerEnabled)].Flag = value; } }
        public float TouchPadTerrainScannerXSensitivity { get { return this[nameof(TouchPadTerrainScannerXSensitivity)].GetValue<float>(); } set { this[nameof(TouchPadTerrainScannerXSensitivity)].SetValue<float>(value); } }
        public float TouchPadTerrainScannerYSensitivity { get { return this[nameof(TouchPadTerrainScannerYSensitivity)].GetValue<float>(); } set { this[nameof(TouchPadTerrainScannerYSensitivity)].SetValue<float>(value); } }
        public float TouchPadTerrainScannerZoomSensitivity { get { return this[nameof(TouchPadTerrainScannerZoomSensitivity)].GetValue<float>(); } set { this[nameof(TouchPadTerrainScannerZoomSensitivity)].SetValue<float>(value); } }
        public bool TouchPadGesturesEnabled { get { return this[nameof(TouchPadGesturesEnabled)].Flag; } set { this[nameof(TouchPadGesturesEnabled)].Flag = value; } }
        public ESonyControllerLightMode ControllerLightMode { get { return (ESonyControllerLightMode)this[nameof(ControllerLightMode)].GetValue<int>(); } set { this[nameof(ControllerLightMode)].SetValue<int>((int)value); } }
    }
    public class OptionsInSaveGame : Object
    {
        public OptionsInSaveGame(nint addr) : base(addr) { }
        public bool SaveGameOptionsValid { get { return this[nameof(SaveGameOptionsValid)].Flag; } set { this[nameof(SaveGameOptionsValid)].Flag = value; } }
        public int ScreenMode { get { return this[nameof(ScreenMode)].GetValue<int>(); } set { this[nameof(ScreenMode)].SetValue<int>(value); } }
    }
    public class GDKWinOptionsInSaveGame : Object
    {
        public GDKWinOptionsInSaveGame(nint addr) : base(addr) { }
        public bool SaveGameOptionsValid { get { return this[nameof(SaveGameOptionsValid)].Flag; } set { this[nameof(SaveGameOptionsValid)].Flag = value; } }
        public int ScreenMode { get { return this[nameof(ScreenMode)].GetValue<int>(); } set { this[nameof(ScreenMode)].SetValue<int>(value); } }
        public uint ResolutionSizeX { get { return this[nameof(ResolutionSizeX)].GetValue<uint>(); } set { this[nameof(ResolutionSizeX)].SetValue<uint>(value); } }
        public uint ResolutionSizeY { get { return this[nameof(ResolutionSizeY)].GetValue<uint>(); } set { this[nameof(ResolutionSizeY)].SetValue<uint>(value); } }
        public bool bUseVSync { get { return this[nameof(bUseVSync)].Flag; } set { this[nameof(bUseVSync)].Flag = value; } }
        public float FrameRateLimit { get { return this[nameof(FrameRateLimit)].GetValue<float>(); } set { this[nameof(FrameRateLimit)].SetValue<float>(value); } }
        public float Sharpening { get { return this[nameof(Sharpening)].GetValue<float>(); } set { this[nameof(Sharpening)].SetValue<float>(value); } }
        public int AntiAliasingType { get { return this[nameof(AntiAliasingType)].GetValue<int>(); } set { this[nameof(AntiAliasingType)].SetValue<int>(value); } }
        public float Gamma { get { return this[nameof(Gamma)].GetValue<float>(); } set { this[nameof(Gamma)].SetValue<float>(value); } }
        public int OverallQuality { get { return this[nameof(OverallQuality)].GetValue<int>(); } set { this[nameof(OverallQuality)].SetValue<int>(value); } }
        public float ResolutionScale { get { return this[nameof(ResolutionScale)].GetValue<float>(); } set { this[nameof(ResolutionScale)].SetValue<float>(value); } }
        public int TextureQuality { get { return this[nameof(TextureQuality)].GetValue<int>(); } set { this[nameof(TextureQuality)].SetValue<int>(value); } }
        public int ShadowQuality { get { return this[nameof(ShadowQuality)].GetValue<int>(); } set { this[nameof(ShadowQuality)].SetValue<int>(value); } }
        public int AntiAliasingQuality { get { return this[nameof(AntiAliasingQuality)].GetValue<int>(); } set { this[nameof(AntiAliasingQuality)].SetValue<int>(value); } }
        public int PostProcessingQuality { get { return this[nameof(PostProcessingQuality)].GetValue<int>(); } set { this[nameof(PostProcessingQuality)].SetValue<int>(value); } }
        public int EffectsQuality { get { return this[nameof(EffectsQuality)].GetValue<int>(); } set { this[nameof(EffectsQuality)].SetValue<int>(value); } }
        public int ViewDistanceQuality { get { return this[nameof(ViewDistanceQuality)].GetValue<int>(); } set { this[nameof(ViewDistanceQuality)].SetValue<int>(value); } }
        public bool PreventLatejoinCharacterDuplication { get { return this[nameof(PreventLatejoinCharacterDuplication)].Flag; } set { this[nameof(PreventLatejoinCharacterDuplication)].Flag = value; } }
        public Object LocalGameServerName { get { return this[nameof(LocalGameServerName)]; } set { this[nameof(LocalGameServerName)] = value; } }
        public Object CurrentAudioOutputDeviceId { get { return this[nameof(CurrentAudioOutputDeviceId)]; } set { this[nameof(CurrentAudioOutputDeviceId)] = value; } }
        public bool UseDefaultAudioOutputDevice { get { return this[nameof(UseDefaultAudioOutputDevice)].Flag; } set { this[nameof(UseDefaultAudioOutputDevice)].Flag = value; } }
        public int RagdollQuality { get { return this[nameof(RagdollQuality)].GetValue<int>(); } set { this[nameof(RagdollQuality)].SetValue<int>(value); } }
    }
    public class ConsoleOptionsInSaveGame : Object
    {
        public ConsoleOptionsInSaveGame(nint addr) : base(addr) { }
        public ControllerSettings ControllerSettings { get { return this[nameof(ControllerSettings)].As<ControllerSettings>(); } set { this["ControllerSettings"] = value; } }
        public HUDElements HUDElements { get { return this[nameof(HUDElements)].As<HUDElements>(); } set { this["HUDElements"] = value; } }
        public bool SaveGameOptionsValid { get { return this[nameof(SaveGameOptionsValid)].Flag; } set { this[nameof(SaveGameOptionsValid)].Flag = value; } }
        public bool bTutorialHintsEnabled { get { return this[nameof(bTutorialHintsEnabled)].Flag; } set { this[nameof(bTutorialHintsEnabled)].Flag = value; } }
        public bool bShowFPS { get { return this[nameof(bShowFPS)].Flag; } set { this[nameof(bShowFPS)].Flag = value; } }
        public int ShowNetInfoLevel { get { return this[nameof(ShowNetInfoLevel)].GetValue<int>(); } set { this[nameof(ShowNetInfoLevel)].SetValue<int>(value); } }
        public float FOV { get { return this[nameof(FOV)].GetValue<float>(); } set { this[nameof(FOV)].SetValue<float>(value); } }
        public float HeadbobbingScale { get { return this[nameof(HeadbobbingScale)].GetValue<float>(); } set { this[nameof(HeadbobbingScale)].SetValue<float>(value); } }
        public float CameraShakeScale { get { return this[nameof(CameraShakeScale)].GetValue<float>(); } set { this[nameof(CameraShakeScale)].SetValue<float>(value); } }
        public float UIDPIScale { get { return this[nameof(UIDPIScale)].GetValue<float>(); } set { this[nameof(UIDPIScale)].SetValue<float>(value); } }
        public float volumeCharacterVoice { get { return this[nameof(volumeCharacterVoice)].GetValue<float>(); } set { this[nameof(volumeCharacterVoice)].SetValue<float>(value); } }
        public float volumeMaster { get { return this[nameof(volumeMaster)].GetValue<float>(); } set { this[nameof(volumeMaster)].SetValue<float>(value); } }
        public float volumeMissionControl { get { return this[nameof(volumeMissionControl)].GetValue<float>(); } set { this[nameof(volumeMissionControl)].SetValue<float>(value); } }
        public float volumeSFX { get { return this[nameof(volumeSFX)].GetValue<float>(); } set { this[nameof(volumeSFX)].SetValue<float>(value); } }
        public float volumeMusic { get { return this[nameof(volumeMusic)].GetValue<float>(); } set { this[nameof(volumeMusic)].SetValue<float>(value); } }
        public bool bShowSubtitles { get { return this[nameof(bShowSubtitles)].Flag; } set { this[nameof(bShowSubtitles)].Flag = value; } }
        public bool InvertMouse { get { return this[nameof(InvertMouse)].Flag; } set { this[nameof(InvertMouse)].Flag = value; } }
        public bool PhotosensitiveMode { get { return this[nameof(PhotosensitiveMode)].Flag; } set { this[nameof(PhotosensitiveMode)].Flag = value; } }
        public bool TinnitusProtection { get { return this[nameof(TinnitusProtection)].Flag; } set { this[nameof(TinnitusProtection)].Flag = value; } }
        public float OverlayIntensityScale { get { return this[nameof(OverlayIntensityScale)].GetValue<float>(); } set { this[nameof(OverlayIntensityScale)].SetValue<float>(value); } }
        public bool bHoldToSprint { get { return this[nameof(bHoldToSprint)].Flag; } set { this[nameof(bHoldToSprint)].Flag = value; } }
        public bool bToggleLaserPointer { get { return this[nameof(bToggleLaserPointer)].Flag; } set { this[nameof(bToggleLaserPointer)].Flag = value; } }
        public bool bToggleTerrainScanner { get { return this[nameof(bToggleTerrainScanner)].Flag; } set { this[nameof(bToggleTerrainScanner)].Flag = value; } }
        public bool bUseMouseSmoothing { get { return this[nameof(bUseMouseSmoothing)].Flag; } set { this[nameof(bUseMouseSmoothing)].Flag = value; } }
        public float MouseXSensitivity { get { return this[nameof(MouseXSensitivity)].GetValue<float>(); } set { this[nameof(MouseXSensitivity)].SetValue<float>(value); } }
        public float MouseYSensitivity { get { return this[nameof(MouseYSensitivity)].GetValue<float>(); } set { this[nameof(MouseYSensitivity)].SetValue<float>(value); } }
        public bool bUseSeperateSensitivity { get { return this[nameof(bUseSeperateSensitivity)].Flag; } set { this[nameof(bUseSeperateSensitivity)].Flag = value; } }
        public bool bInvertMouseWheel { get { return this[nameof(bInvertMouseWheel)].Flag; } set { this[nameof(bInvertMouseWheel)].Flag = value; } }
        public bool bInvertIncapacitatedX_Mouse { get { return this[nameof(bInvertIncapacitatedX_Mouse)].Flag; } set { this[nameof(bInvertIncapacitatedX_Mouse)].Flag = value; } }
        public bool bInvertIncapacitatedX_Controller { get { return this[nameof(bInvertIncapacitatedX_Controller)].Flag; } set { this[nameof(bInvertIncapacitatedX_Controller)].Flag = value; } }
        public bool bInvertFlightControls { get { return this[nameof(bInvertFlightControls)].Flag; } set { this[nameof(bInvertFlightControls)].Flag = value; } }
        public bool bShowUIAnimations { get { return this[nameof(bShowUIAnimations)].Flag; } set { this[nameof(bShowUIAnimations)].Flag = value; } }
        public bool bPlaySoundOnChatMessage { get { return this[nameof(bPlaySoundOnChatMessage)].Flag; } set { this[nameof(bPlaySoundOnChatMessage)].Flag = value; } }
        public float ChatFadeTime { get { return this[nameof(ChatFadeTime)].GetValue<float>(); } set { this[nameof(ChatFadeTime)].SetValue<float>(value); } }
        public float ForceFeedbackScale { get { return this[nameof(ForceFeedbackScale)].GetValue<float>(); } set { this[nameof(ForceFeedbackScale)].SetValue<float>(value); } }
        public int ChatFontSize { get { return this[nameof(ChatFontSize)].GetValue<int>(); } set { this[nameof(ChatFontSize)].SetValue<int>(value); } }
        public float HDRColorGamma { get { return this[nameof(HDRColorGamma)].GetValue<float>(); } set { this[nameof(HDRColorGamma)].SetValue<float>(value); } }
        public EConsoleGraphicsMode ConsoleGraphicsMode { get { return (EConsoleGraphicsMode)this[nameof(ConsoleGraphicsMode)].GetValue<int>(); } set { this[nameof(ConsoleGraphicsMode)].SetValue<int>((int)value); } }
        public Object Language { get { return this[nameof(Language)]; } set { this[nameof(Language)] = value; } }
        public CharacterOptions CharacterOptions { get { return this[nameof(CharacterOptions)].As<CharacterOptions>(); } set { this["CharacterOptions"] = value; } }
        public UArray<CustomKeyBinding> CustomKeyBindings { get { return new UArray<CustomKeyBinding>(this[nameof(CustomKeyBindings)].Address); } }
        public UArray<CustomKeyBinding> CustomControllerBindings { get { return new UArray<CustomKeyBinding>(this[nameof(CustomControllerBindings)].Address); } }
        public bool SwapControllerThumbsticks { get { return this[nameof(SwapControllerThumbsticks)].Flag; } set { this[nameof(SwapControllerThumbsticks)].Flag = value; } }
        public float FSDResolutionScale { get { return this[nameof(FSDResolutionScale)].GetValue<float>(); } set { this[nameof(FSDResolutionScale)].SetValue<float>(value); } }
        public int UpscalingType { get { return this[nameof(UpscalingType)].GetValue<int>(); } set { this[nameof(UpscalingType)].SetValue<int>(value); } }
        public int AmdFsrMode { get { return this[nameof(AmdFsrMode)].GetValue<int>(); } set { this[nameof(AmdFsrMode)].SetValue<int>(value); } }
        public int AmdFsr2Mode { get { return this[nameof(AmdFsr2Mode)].GetValue<int>(); } set { this[nameof(AmdFsr2Mode)].SetValue<int>(value); } }
        public UDLSSMode NvidiaDlssMode { get { return (UDLSSMode)this[nameof(NvidiaDlssMode)].GetValue<int>(); } set { this[nameof(NvidiaDlssMode)].SetValue<int>((int)value); } }
        public float AmdFsrSharpness { get { return this[nameof(AmdFsrSharpness)].GetValue<float>(); } set { this[nameof(AmdFsrSharpness)].SetValue<float>(value); } }
        public float AmdFsr2Sharpness { get { return this[nameof(AmdFsr2Sharpness)].GetValue<float>(); } set { this[nameof(AmdFsr2Sharpness)].SetValue<float>(value); } }
        public float NvidiaDlssSharpness { get { return this[nameof(NvidiaDlssSharpness)].GetValue<float>(); } set { this[nameof(NvidiaDlssSharpness)].SetValue<float>(value); } }
        public int RagdollQuality { get { return this[nameof(RagdollQuality)].GetValue<int>(); } set { this[nameof(RagdollQuality)].SetValue<int>(value); } }
        public bool PreventLatejoinCharacterDuplication { get { return this[nameof(PreventLatejoinCharacterDuplication)].Flag; } set { this[nameof(PreventLatejoinCharacterDuplication)].Flag = value; } }
        public UFSDStreamlineDLSSGMode FrameGenerationMode { get { return (UFSDStreamlineDLSSGMode)this[nameof(FrameGenerationMode)].GetValue<int>(); } set { this[nameof(FrameGenerationMode)].SetValue<int>((int)value); } }
    }
    public enum UFSDStreamlineDLSSGMode : int
    {
        Off = 0,
        On = 1,
        Auto = 2,
        UFSDStreamlineDLSSGMode_MAX = 3,
    }
    public class CustomKeyBinding : Object
    {
        public CustomKeyBinding(nint addr) : base(addr) { }
        public Object ActionName { get { return this[nameof(ActionName)]; } set { this[nameof(ActionName)] = value; } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public Key Key { get { return this[nameof(Key)].As<Key>(); } set { this["Key"] = value; } }
    }
    public class CharacterOptions : Object
    {
        public CharacterOptions(nint addr) : base(addr) { }
        public bool GrapplingHookAutoSwitch { get { return this[nameof(GrapplingHookAutoSwitch)].Flag; } set { this[nameof(GrapplingHookAutoSwitch)].Flag = value; } }
        public bool ZiplineGunAutoSwitch { get { return this[nameof(ZiplineGunAutoSwitch)].Flag; } set { this[nameof(ZiplineGunAutoSwitch)].Flag = value; } }
        public bool HoldToBreakImmobilization { get { return this[nameof(HoldToBreakImmobilization)].Flag; } set { this[nameof(HoldToBreakImmobilization)].Flag = value; } }
        public bool HoldToFire { get { return this[nameof(HoldToFire)].Flag; } set { this[nameof(HoldToFire)].Flag = value; } }
    }
    public enum EConsoleGraphicsMode : int
    {
        Fidelity = 0,
        Performance = 1,
        Performance120 = 2,
        EConsoleGraphicsMode_MAX = 3,
    }
    public class HUDElements : Object
    {
        public HUDElements(nint addr) : base(addr) { }
        public HUDElementData OnScreenHelp { get { return this[nameof(OnScreenHelp)].As<HUDElementData>(); } set { this["OnScreenHelp"] = value; } }
        public HUDElementData EnemyHealth { get { return this[nameof(EnemyHealth)].As<HUDElementData>(); } set { this["EnemyHealth"] = value; } }
        public HUDElementData RadarDepth { get { return this[nameof(RadarDepth)].As<HUDElementData>(); } set { this["RadarDepth"] = value; } }
        public HUDElementData PlayerHealthShield { get { return this[nameof(PlayerHealthShield)].As<HUDElementData>(); } set { this["PlayerHealthShield"] = value; } }
        public HUDElementData PlayerNameClassIcon { get { return this[nameof(PlayerNameClassIcon)].As<HUDElementData>(); } set { this["PlayerNameClassIcon"] = value; } }
        public HUDElementData PlayerItems { get { return this[nameof(PlayerItems)].As<HUDElementData>(); } set { this["PlayerItems"] = value; } }
        public HUDElementData PlayerResources { get { return this[nameof(PlayerResources)].As<HUDElementData>(); } set { this["PlayerResources"] = value; } }
        public HUDElementData WeaponInfo { get { return this[nameof(WeaponInfo)].As<HUDElementData>(); } set { this["WeaponInfo"] = value; } }
        public HUDElementData Grenades { get { return this[nameof(Grenades)].As<HUDElementData>(); } set { this["Grenades"] = value; } }
        public HUDElementData FlashLight { get { return this[nameof(FlashLight)].As<HUDElementData>(); } set { this["FlashLight"] = value; } }
        public HUDElementData Flares { get { return this[nameof(Flares)].As<HUDElementData>(); } set { this["Flares"] = value; } }
        public HUDElementData Crosshair { get { return this[nameof(Crosshair)].As<HUDElementData>(); } set { this["Crosshair"] = value; } }
        public HUDElementData Objectives { get { return this[nameof(Objectives)].As<HUDElementData>(); } set { this["Objectives"] = value; } }
        public HUDElementData TeamDisplay { get { return this[nameof(TeamDisplay)].As<HUDElementData>(); } set { this["TeamDisplay"] = value; } }
        public HUDElementData SentryGunDisplay { get { return this[nameof(SentryGunDisplay)].As<HUDElementData>(); } set { this["SentryGunDisplay"] = value; } }
        public HUDElementData VersionNumber { get { return this[nameof(VersionNumber)].As<HUDElementData>(); } set { this["VersionNumber"] = value; } }
    }
    public class HUDElementData : Object
    {
        public HUDElementData(nint addr) : base(addr) { }
        public EHUDVisibilityMode Mode { get { return (EHUDVisibilityMode)this[nameof(Mode)].GetValue<int>(); } set { this[nameof(Mode)].SetValue<int>((int)value); } }
        public int Version { get { return this[nameof(Version)].GetValue<int>(); } set { this[nameof(Version)].SetValue<int>(value); } }
    }
    public enum EHUDVisibilityMode : int
    {
        Visible = 0,
        Dynamic = 1,
        Hidden = 2,
        EHUDVisibilityMode_MAX = 3,
    }
    public class ControllerSettings : Object
    {
        public ControllerSettings(nint addr) : base(addr) { }
        public float AimInnerDeadZone { get { return this[nameof(AimInnerDeadZone)].GetValue<float>(); } set { this[nameof(AimInnerDeadZone)].SetValue<float>(value); } }
        public float AimSensitivity { get { return this[nameof(AimSensitivity)].GetValue<float>(); } set { this[nameof(AimSensitivity)].SetValue<float>(value); } }
        public float AimOuterAcceleration { get { return this[nameof(AimOuterAcceleration)].GetValue<float>(); } set { this[nameof(AimOuterAcceleration)].SetValue<float>(value); } }
        public ETurn180Mode Turn180Mode { get { return (ETurn180Mode)this[nameof(Turn180Mode)].GetValue<int>(); } set { this[nameof(Turn180Mode)].SetValue<int>((int)value); } }
        public bool bPreviousItemEnabled { get { return this[nameof(bPreviousItemEnabled)].Flag; } set { this[nameof(bPreviousItemEnabled)].Flag = value; } }
        public bool bChatEnabled { get { return this[nameof(bChatEnabled)].Flag; } set { this[nameof(bChatEnabled)].Flag = value; } }
    }
    public enum ETurn180Mode : int
    {
        PressRun = 0,
        PressFlare = 1,
        Off = 2,
        ETurn180Mode_MAX = 3,
    }
    public class WatchedTutorial : Object
    {
        public WatchedTutorial(nint addr) : base(addr) { }
        public Object TutorialName { get { return this[nameof(TutorialName)]; } set { this[nameof(TutorialName)] = value; } }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
    }
    public class ResourcesSave : Object
    {
        public ResourcesSave(nint addr) : base(addr) { }
        public Object OwnedResources { get { return this[nameof(OwnedResources)]; } set { this[nameof(OwnedResources)] = value; } }
        public Object Resources { get { return this[nameof(Resources)]; } set { this[nameof(Resources)] = value; } }
    }
    public class ItemUINotifications : Object
    {
        public ItemUINotifications(nint addr) : base(addr) { }
        public UArray<UINotificationItem> UINotifications { get { return new UArray<UINotificationItem>(this[nameof(UINotifications)].Address); } }
        public Object UINotificationSet { get { return this[nameof(UINotificationSet)]; } set { this[nameof(UINotificationSet)] = value; } }
        public FSDSaveGame SaveGame { get { return this[nameof(SaveGame)].As<FSDSaveGame>(); } set { this["SaveGame"] = value; } }
    }
    public class UINotificationItem : Object
    {
        public UINotificationItem(nint addr) : base(addr) { }
        public UArray<Guid> NotificationIDs { get { return new UArray<Guid>(this[nameof(NotificationIDs)].Address); } }
    }
    public class EventRewardSave : Object
    {
        public EventRewardSave(nint addr) : base(addr) { }
        public Object PendingRewards { get { return this[nameof(PendingRewards)]; } set { this[nameof(PendingRewards)] = value; } }
    }
    public class EventRewardSaveItem : Object
    {
        public EventRewardSaveItem(nint addr) : base(addr) { }
        public Guid CategoryID { get { return this[nameof(CategoryID)].As<Guid>(); } set { this["CategoryID"] = value; } }
        public UArray<Guid> ClassOptions { get { return new UArray<Guid>(this[nameof(ClassOptions)].Address); } }
    }
    public class SkinList : Object
    {
        public SkinList(nint addr) : base(addr) { }
        public Object Skins { get { return this[nameof(Skins)]; } set { this[nameof(Skins)] = value; } }
    }
    public class ItemNotificationInfo : Object
    {
        public ItemNotificationInfo(nint addr) : base(addr) { }
        public int NotificationFlags { get { return this[nameof(NotificationFlags)].GetValue<int>(); } set { this[nameof(NotificationFlags)].SetValue<int>(value); } }
    }
    public class UpgradeLoadout : Object
    {
        public UpgradeLoadout(nint addr) : base(addr) { }
        public Object Loadout { get { return this[nameof(Loadout)]; } set { this[nameof(Loadout)] = value; } }
    }
    public class ItemUpgradeSelection : Object
    {
        public ItemUpgradeSelection(nint addr) : base(addr) { }
        public Guid WeaponID { get { return this[nameof(WeaponID)].As<Guid>(); } set { this["WeaponID"] = value; } }
        public UArray<Guid> EquippedUpgrades { get { return new UArray<Guid>(this[nameof(EquippedUpgrades)].Address); } }
        public UArray<Guid> PermanentUpgrades { get { return new UArray<Guid>(this[nameof(PermanentUpgrades)].Address); } }
        public Guid EquippedOverclock { get { return this[nameof(EquippedOverclock)].As<Guid>(); } set { this["EquippedOverclock"] = value; } }
        public UArray<Guid> EquippedSkins { get { return new UArray<Guid>(this[nameof(EquippedSkins)].Address); } }
        public bool OverclockingUnlocked { get { return this[nameof(OverclockingUnlocked)].Flag; } set { this[nameof(OverclockingUnlocked)].Flag = value; } }
        public Guid EquippedSkinColor { get { return this[nameof(EquippedSkinColor)].As<Guid>(); } set { this["EquippedSkinColor"] = value; } }
        public Guid EquippedSkinMesh { get { return this[nameof(EquippedSkinMesh)].As<Guid>(); } set { this["EquippedSkinMesh"] = value; } }
    }
    public class DrinkSave : Object
    {
        public DrinkSave(nint addr) : base(addr) { }
        public Object UnlockedDrinks { get { return this[nameof(UnlockedDrinks)]; } set { this[nameof(UnlockedDrinks)] = value; } }
        public bool HasUnlockedSpecial { get { return this[nameof(HasUnlockedSpecial)].Flag; } set { this[nameof(HasUnlockedSpecial)].Flag = value; } }
    }
    public class ForgingSave : Object
    {
        public ForgingSave(nint addr) : base(addr) { }
        public int XP { get { return this[nameof(XP)].GetValue<int>(); } set { this[nameof(XP)].SetValue<int>(value); } }
        public UArray<ForgingPendingReward> PendingMasteryRewards { get { return new UArray<ForgingPendingReward>(this[nameof(PendingMasteryRewards)].Address); } }
    }
    public class ForgingPendingReward : Object
    {
        public ForgingPendingReward(nint addr) : base(addr) { }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
    }
    public class CharacterSave : Object
    {
        public CharacterSave(nint addr) : base(addr) { }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
        public int XP { get { return this[nameof(XP)].GetValue<int>(); } set { this[nameof(XP)].SetValue<int>(value); } }
        public bool HasCompletedRetirementCampaign { get { return this[nameof(HasCompletedRetirementCampaign)].Flag; } set { this[nameof(HasCompletedRetirementCampaign)].Flag = value; } }
        public int TimesRetired { get { return this[nameof(TimesRetired)].GetValue<int>(); } set { this[nameof(TimesRetired)].SetValue<int>(value); } }
        public int RetiredCharacterLevels { get { return this[nameof(RetiredCharacterLevels)].GetValue<int>(); } set { this[nameof(RetiredCharacterLevels)].SetValue<int>(value); } }
        public bool HasSeenRetirementRewardScreen { get { return this[nameof(HasSeenRetirementRewardScreen)].Flag; } set { this[nameof(HasSeenRetirementRewardScreen)].Flag = value; } }
        public Object CharacterClass { get { return this[nameof(CharacterClass)]; } set { this[nameof(CharacterClass)] = value; } }
        public CharacterVanitySave Vanity { get { return this[nameof(Vanity)].As<CharacterVanitySave>(); } set { this["Vanity"] = value; } }
        public int SelectedLoadout { get { return this[nameof(SelectedLoadout)].GetValue<int>(); } set { this[nameof(SelectedLoadout)].SetValue<int>(value); } }
        public ItemLoadout Loadout { get { return this[nameof(Loadout)].As<ItemLoadout>(); } set { this["Loadout"] = value; } }
        public UArray<ItemLoadout> Loadouts { get { return new UArray<ItemLoadout>(this[nameof(Loadouts)].Address); } }
        public UArray<UpgradeLoadout> ItemUpgradeLoadouts { get { return new UArray<UpgradeLoadout>(this[nameof(ItemUpgradeLoadouts)].Address); } }
        public ItemLoadout RandomWeaponLoadout { get { return this[nameof(RandomWeaponLoadout)].As<ItemLoadout>(); } set { this["RandomWeaponLoadout"] = value; } }
        public UpgradeLoadout RandomItemUpgradeLoadouts { get { return this[nameof(RandomItemUpgradeLoadouts)].As<UpgradeLoadout>(); } set { this["RandomItemUpgradeLoadouts"] = value; } }
        public VictoryPoseSave VictoryPose { get { return this[nameof(VictoryPose)].As<VictoryPoseSave>(); } set { this["VictoryPose"] = value; } }
    }
    public class VictoryPoseSave : Object
    {
        public VictoryPoseSave(nint addr) : base(addr) { }
        public Guid EquippedVictoryPose { get { return this[nameof(EquippedVictoryPose)].As<Guid>(); } set { this["EquippedVictoryPose"] = value; } }
        public UArray<Guid> UnlockedVictoryPoses { get { return new UArray<Guid>(this[nameof(UnlockedVictoryPoses)].Address); } }
        public UArray<Guid> EquippedVictoryPoses { get { return new UArray<Guid>(this[nameof(EquippedVictoryPoses)].Address); } }
    }
    public class ItemLoadout : Object
    {
        public ItemLoadout(nint addr) : base(addr) { }
        public Guid PrimaryWeapon { get { return this[nameof(PrimaryWeapon)].As<Guid>(); } set { this["PrimaryWeapon"] = value; } }
        public Guid SecondaryWeapon { get { return this[nameof(SecondaryWeapon)].As<Guid>(); } set { this["SecondaryWeapon"] = value; } }
        public Guid TraversalTool { get { return this[nameof(TraversalTool)].As<Guid>(); } set { this["TraversalTool"] = value; } }
        public Guid ClassTool { get { return this[nameof(ClassTool)].As<Guid>(); } set { this["ClassTool"] = value; } }
        public Guid Armor { get { return this[nameof(Armor)].As<Guid>(); } set { this["Armor"] = value; } }
        public Guid Flare { get { return this[nameof(Flare)].As<Guid>(); } set { this["Flare"] = value; } }
        public Guid MiningTool { get { return this[nameof(MiningTool)].As<Guid>(); } set { this["MiningTool"] = value; } }
        public Guid Grenade { get { return this[nameof(Grenade)].As<Guid>(); } set { this["Grenade"] = value; } }
        public int iconIndex { get { return this[nameof(iconIndex)].GetValue<int>(); } set { this[nameof(iconIndex)].SetValue<int>(value); } }
    }
    public class CharacterVanitySave : Object
    {
        public CharacterVanitySave(nint addr) : base(addr) { }
        public UArray<CharacterVanityLoadout> Loadouts { get { return new UArray<CharacterVanityLoadout>(this[nameof(Loadouts)].Address); } }
        public CharacterVanityLoadout RandomVanityLoadout { get { return this[nameof(RandomVanityLoadout)].As<CharacterVanityLoadout>(); } set { this["RandomVanityLoadout"] = value; } }
        public UArray<Guid> UnLockedVanityItemIDs { get { return new UArray<Guid>(this[nameof(UnLockedVanityItemIDs)].Address); } }
        public UArray<VanityItem> UnLockedVanityItems { get { return new UArray<VanityItem>(this[nameof(UnLockedVanityItems)].Address); } }
        public Object NewVanityItems { get { return this[nameof(NewVanityItems)]; } set { this[nameof(NewVanityItems)] = value; } }
    }
    public enum EVanitySlot : int
    {
        Head = 0,
        Beard = 1,
        Armor = 2,
        BeardColor = 3,
        SkinColor = 4,
        Moustache = 5,
        Eyebrows = 6,
        Sideburns = 7,
        ArmorMaterial = 8,
        Count = 9,
        EVanitySlot_MAX = 10,
    }
    public class CharacterVanityLoadout : Object
    {
        public CharacterVanityLoadout(nint addr) : base(addr) { }
        public Guid EquippedHeadItemID { get { return this[nameof(EquippedHeadItemID)].As<Guid>(); } set { this["EquippedHeadItemID"] = value; } }
        public Guid EquippedBeardItemID { get { return this[nameof(EquippedBeardItemID)].As<Guid>(); } set { this["EquippedBeardItemID"] = value; } }
        public Guid EquippedArmorItemID { get { return this[nameof(EquippedArmorItemID)].As<Guid>(); } set { this["EquippedArmorItemID"] = value; } }
        public Guid EquippedArmorMaterialID { get { return this[nameof(EquippedArmorMaterialID)].As<Guid>(); } set { this["EquippedArmorMaterialID"] = value; } }
        public Guid EquippedBeardColorItemID { get { return this[nameof(EquippedBeardColorItemID)].As<Guid>(); } set { this["EquippedBeardColorItemID"] = value; } }
        public Guid EquippedSkinColorItemID { get { return this[nameof(EquippedSkinColorItemID)].As<Guid>(); } set { this["EquippedSkinColorItemID"] = value; } }
        public Guid EquippedEyebrowsItemID { get { return this[nameof(EquippedEyebrowsItemID)].As<Guid>(); } set { this["EquippedEyebrowsItemID"] = value; } }
        public Guid EquippedMoustacheItemID { get { return this[nameof(EquippedMoustacheItemID)].As<Guid>(); } set { this["EquippedMoustacheItemID"] = value; } }
        public Guid EquippedSideburnsItemID { get { return this[nameof(EquippedSideburnsItemID)].As<Guid>(); } set { this["EquippedSideburnsItemID"] = value; } }
        public bool UsingSleevelessArmor { get { return this[nameof(UsingSleevelessArmor)].Flag; } set { this[nameof(UsingSleevelessArmor)].Flag = value; } }
        public int MedicalGownIndex { get { return this[nameof(MedicalGownIndex)].GetValue<int>(); } set { this[nameof(MedicalGownIndex)].SetValue<int>(value); } }
    }
    public class DeepDiveSave : Object
    {
        public DeepDiveSave(nint addr) : base(addr) { }
        public DeepDiveItem NormalSave { get { return this[nameof(NormalSave)].As<DeepDiveItem>(); } set { this["NormalSave"] = value; } }
        public DeepDiveItem EliteSave { get { return this[nameof(EliteSave)].As<DeepDiveItem>(); } set { this["EliteSave"] = value; } }
    }
    public class DeepDiveItem : Object
    {
        public DeepDiveItem(nint addr) : base(addr) { }
        public int Progress { get { return this[nameof(Progress)].GetValue<int>(); } set { this[nameof(Progress)].SetValue<int>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public int BestTime { get { return this[nameof(BestTime)].GetValue<int>(); } set { this[nameof(BestTime)].SetValue<int>(value); } }
        public UArray<DeepDiveSaveRewardItem> Rewards { get { return new UArray<DeepDiveSaveRewardItem>(this[nameof(Rewards)].Address); } }
        public bool HasEverCompleted { get { return this[nameof(HasEverCompleted)].Flag; } set { this[nameof(HasEverCompleted)].Flag = value; } }
        public UArray<Guid> RewardsGiven { get { return new UArray<Guid>(this[nameof(RewardsGiven)].Address); } }
    }
    public class DeepDiveSaveRewardItem : Object
    {
        public DeepDiveSaveRewardItem(nint addr) : base(addr) { }
        public Guid RewardID { get { return this[nameof(RewardID)].As<Guid>(); } set { this["RewardID"] = value; } }
        public int Stage { get { return this[nameof(Stage)].GetValue<int>(); } set { this[nameof(Stage)].SetValue<int>(value); } }
    }
    public class CampaignSave : Object
    {
        public CampaignSave(nint addr) : base(addr) { }
        public ActiveCampaignItem ActiveCampaign { get { return this[nameof(ActiveCampaign)].As<ActiveCampaignItem>(); } set { this["ActiveCampaign"] = value; } }
        public UArray<Guid> CompletedCampaigns { get { return new UArray<Guid>(this[nameof(CompletedCampaigns)].Address); } }
        public int ActiveCampaignWeek { get { return this[nameof(ActiveCampaignWeek)].GetValue<int>(); } set { this[nameof(ActiveCampaignWeek)].SetValue<int>(value); } }
        public WeeklyCampaignItem WeeklySave { get { return this[nameof(WeeklySave)].As<WeeklyCampaignItem>(); } set { this["WeeklySave"] = value; } }
        public WeeklyCampaignItem MaxtrixCoreHuntSave { get { return this[nameof(MaxtrixCoreHuntSave)].As<WeeklyCampaignItem>(); } set { this["MaxtrixCoreHuntSave"] = value; } }
        public WeeklyCampaignItem SeededRandomSave { get { return this[nameof(SeededRandomSave)].As<WeeklyCampaignItem>(); } set { this["SeededRandomSave"] = value; } }
    }
    public class WeeklyCampaignItem : Object
    {
        public WeeklyCampaignItem(nint addr) : base(addr) { }
        public int LastCompletedWeek { get { return this[nameof(LastCompletedWeek)].GetValue<int>(); } set { this[nameof(LastCompletedWeek)].SetValue<int>(value); } }
        public int LastStartedWeek { get { return this[nameof(LastStartedWeek)].GetValue<int>(); } set { this[nameof(LastStartedWeek)].SetValue<int>(value); } }
        public int RewardedProgress { get { return this[nameof(RewardedProgress)].GetValue<int>(); } set { this[nameof(RewardedProgress)].SetValue<int>(value); } }
    }
    public class ActiveCampaignItem : Object
    {
        public ActiveCampaignItem(nint addr) : base(addr) { }
        public Guid CampaignID { get { return this[nameof(CampaignID)].As<Guid>(); } set { this["CampaignID"] = value; } }
        public int Progress { get { return this[nameof(Progress)].GetValue<int>(); } set { this[nameof(Progress)].SetValue<int>(value); } }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
    }
    public class UnLockedMissionParameters : Object
    {
        public UnLockedMissionParameters(nint addr) : base(addr) { }
        public UArray<Guid> UnLockedComplexities { get { return new UArray<Guid>(this[nameof(UnLockedComplexities)].Address); } }
        public UArray<Guid> UnLockedDurations { get { return new UArray<Guid>(this[nameof(UnLockedDurations)].Address); } }
    }
    public class WeaponMaintenance : Object
    {
        public WeaponMaintenance(nint addr) : base(addr) { }
        public UArray<WeaponMaintenanceEntry> Entries { get { return new UArray<WeaponMaintenanceEntry>(this[nameof(Entries)].Address); } }
        public int MaxLevel { get { return this[nameof(MaxLevel)].GetValue<int>(); } set { this[nameof(MaxLevel)].SetValue<int>(value); } }
    }
    public class WeaponMaintenanceEntry : Object
    {
        public WeaponMaintenanceEntry(nint addr) : base(addr) { }
        public Guid WeaponID { get { return this[nameof(WeaponID)].As<Guid>(); } set { this["WeaponID"] = value; } }
        public int XP { get { return this[nameof(XP)].GetValue<int>(); } set { this[nameof(XP)].SetValue<int>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public bool LevelUpNotification { get { return this[nameof(LevelUpNotification)].Flag; } set { this[nameof(LevelUpNotification)].Flag = value; } }
    }
    public class GameDLCSave : Object
    {
        public GameDLCSave(nint addr) : base(addr) { }
        public Object AnnouncedIDs { get { return this[nameof(AnnouncedIDs)]; } set { this[nameof(AnnouncedIDs)] = value; } }
    }
    public class SeasonSave : Object
    {
        public SeasonSave(nint addr) : base(addr) { }
        public int SchematicsFixedUpInSeasonFive { get { return this[nameof(SchematicsFixedUpInSeasonFive)].GetValue<int>(); } set { this[nameof(SchematicsFixedUpInSeasonFive)].SetValue<int>(value); } }
        public bool HasFixedUpRewardsRemovedInSeasonFiveV2 { get { return this[nameof(HasFixedUpRewardsRemovedInSeasonFiveV2)].Flag; } set { this[nameof(HasFixedUpRewardsRemovedInSeasonFiveV2)].Flag = value; } }
        public bool HasFixedUpSeason3EventScripClaimed { get { return this[nameof(HasFixedUpSeason3EventScripClaimed)].Flag; } set { this[nameof(HasFixedUpSeason3EventScripClaimed)].Flag = value; } }
        public Object Seasons { get { return this[nameof(Seasons)]; } set { this[nameof(Seasons)] = value; } }
        public int ActiveSeason { get { return this[nameof(ActiveSeason)].GetValue<int>(); } set { this[nameof(ActiveSeason)].SetValue<int>(value); } }
        public int DesiredSeason { get { return this[nameof(DesiredSeason)].GetValue<int>(); } set { this[nameof(DesiredSeason)].SetValue<int>(value); } }
    }
    public class SeasonSaveEntry : Object
    {
        public SeasonSaveEntry(nint addr) : base(addr) { }
        public int CountSeasonContentDisabled { get { return this[nameof(CountSeasonContentDisabled)].GetValue<int>(); } set { this[nameof(CountSeasonContentDisabled)].SetValue<int>(value); } }
        public int CountSeasonContentReenabled { get { return this[nameof(CountSeasonContentReenabled)].GetValue<int>(); } set { this[nameof(CountSeasonContentReenabled)].SetValue<int>(value); } }
        public int XP { get { return this[nameof(XP)].GetValue<int>(); } set { this[nameof(XP)].SetValue<int>(value); } }
        public int Tokens { get { return this[nameof(Tokens)].GetValue<int>(); } set { this[nameof(Tokens)].SetValue<int>(value); } }
        public UArray<RewardsClaimed> RewardsClaimed { get { return new UArray<RewardsClaimed>(this[nameof(RewardsClaimed)].Address); } }
        public bool bSeasonCompletedAnnounced { get { return this[nameof(bSeasonCompletedAnnounced)].Flag; } set { this[nameof(bSeasonCompletedAnnounced)].Flag = value; } }
        public bool HasClaimedAllRewards { get { return this[nameof(HasClaimedAllRewards)].Flag; } set { this[nameof(HasClaimedAllRewards)].Flag = value; } }
        public int RewardsClaimedAfterMaxLevel { get { return this[nameof(RewardsClaimedAfterMaxLevel)].GetValue<int>(); } set { this[nameof(RewardsClaimedAfterMaxLevel)].SetValue<int>(value); } }
        public Object NodesBought { get { return this[nameof(NodesBought)]; } set { this[nameof(NodesBought)] = value; } }
        public UArray<ChallengeSaveInfo> ActiveChallenges { get { return new UArray<ChallengeSaveInfo>(this[nameof(ActiveChallenges)].Address); } }
        public DateTime LastNewChallengeGiven { get { return this[nameof(LastNewChallengeGiven)].As<DateTime>(); } set { this["LastNewChallengeGiven"] = value; } }
        public DateTime LastChallengeReroll { get { return this[nameof(LastChallengeReroll)].As<DateTime>(); } set { this["LastChallengeReroll"] = value; } }
        public Object CompletedSpecialChallenges { get { return this[nameof(CompletedSpecialChallenges)]; } set { this[nameof(CompletedSpecialChallenges)] = value; } }
        public int ClaimedScripChallenges { get { return this[nameof(ClaimedScripChallenges)].GetValue<int>(); } set { this[nameof(ClaimedScripChallenges)].SetValue<int>(value); } }
        public int PlagueHeartsUsed { get { return this[nameof(PlagueHeartsUsed)].GetValue<int>(); } set { this[nameof(PlagueHeartsUsed)].SetValue<int>(value); } }
        public float TimePlayedAtSeasonStart { get { return this[nameof(TimePlayedAtSeasonStart)].GetValue<float>(); } set { this[nameof(TimePlayedAtSeasonStart)].SetValue<float>(value); } }
        public float ChallengesCompletedAtSeasonStart { get { return this[nameof(ChallengesCompletedAtSeasonStart)].GetValue<float>(); } set { this[nameof(ChallengesCompletedAtSeasonStart)].SetValue<float>(value); } }
        public bool OptedOutOfSeasonContent { get { return this[nameof(OptedOutOfSeasonContent)].Flag; } set { this[nameof(OptedOutOfSeasonContent)].Flag = value; } }
    }
    public class ChallengeSaveInfo : Object
    {
        public ChallengeSaveInfo(nint addr) : base(addr) { }
        public UArray<int> StatIndices { get { return new UArray<int>(this[nameof(StatIndices)].Address); } }
        public Guid ChallengeGuid { get { return this[nameof(ChallengeGuid)].As<Guid>(); } set { this["ChallengeGuid"] = value; } }
        public int CurrentWins { get { return this[nameof(CurrentWins)].GetValue<int>(); } set { this[nameof(CurrentWins)].SetValue<int>(value); } }
        public int NumberOfWins { get { return this[nameof(NumberOfWins)].GetValue<int>(); } set { this[nameof(NumberOfWins)].SetValue<int>(value); } }
        public int XPCompleteGain { get { return this[nameof(XPCompleteGain)].GetValue<int>(); } set { this[nameof(XPCompleteGain)].SetValue<int>(value); } }
        public int TokenGain { get { return this[nameof(TokenGain)].GetValue<int>(); } set { this[nameof(TokenGain)].SetValue<int>(value); } }
    }
    public class RewardsClaimed : Object
    {
        public RewardsClaimed(nint addr) : base(addr) { }
        public bool NormalClaimed { get { return this[nameof(NormalClaimed)].Flag; } set { this[nameof(NormalClaimed)].Flag = value; } }
        public bool SpecialClaimed { get { return this[nameof(SpecialClaimed)].Flag; } set { this[nameof(SpecialClaimed)].Flag = value; } }
    }
    public class FSDEventRewardsSave : Object
    {
        public FSDEventRewardsSave(nint addr) : base(addr) { }
        public Object EventsSeen { get { return this[nameof(EventsSeen)]; } set { this[nameof(EventsSeen)] = value; } }
        public Object PopupsSeen { get { return this[nameof(PopupsSeen)]; } set { this[nameof(PopupsSeen)] = value; } }
    }
    public class PromotionRewardsSave : Object
    {
        public PromotionRewardsSave(nint addr) : base(addr) { }
        public int PendingPromotionGifts { get { return this[nameof(PendingPromotionGifts)].GetValue<int>(); } set { this[nameof(PendingPromotionGifts)].SetValue<int>(value); } }
        public Object ClaimedRewards { get { return this[nameof(ClaimedRewards)]; } set { this[nameof(ClaimedRewards)] = value; } }
    }
    public class SchematicSave : Object
    {
        public SchematicSave(nint addr) : base(addr) { }
        public Guid PendingReward { get { return this[nameof(PendingReward)].As<Guid>(); } set { this["PendingReward"] = value; } }
        public bool bFirstSchematicMessageShown { get { return this[nameof(bFirstSchematicMessageShown)].Flag; } set { this[nameof(bFirstSchematicMessageShown)].Flag = value; } }
        public UArray<Guid> ForgedSchematics { get { return new UArray<Guid>(this[nameof(ForgedSchematics)].Address); } }
        public UArray<Guid> OwnedSchematics { get { return new UArray<Guid>(this[nameof(OwnedSchematics)].Address); } }
        public int SkinFixupCounter { get { return this[nameof(SkinFixupCounter)].GetValue<int>(); } set { this[nameof(SkinFixupCounter)].SetValue<int>(value); } }
    }
    public class JettyBootsSave : Object
    {
        public JettyBootsSave(nint addr) : base(addr) { }
        public UArray<JettyBootsScore> HighScores { get { return new UArray<JettyBootsScore>(this[nameof(HighScores)].Address); } }
        public UArray<JettyBootsScore> NPC_HighScores { get { return new UArray<JettyBootsScore>(this[nameof(NPC_HighScores)].Address); } }
        public bool bInitializeNPCs { get { return this[nameof(bInitializeNPCs)].Flag; } set { this[nameof(bInitializeNPCs)].Flag = value; } }
        public int LastHighScoreIndex { get { return this[nameof(LastHighScoreIndex)].GetValue<int>(); } set { this[nameof(LastHighScoreIndex)].SetValue<int>(value); } }
    }
    public class JettyBootsScore : Object
    {
        public JettyBootsScore(nint addr) : base(addr) { }
        public Object PlayerName { get { return this[nameof(PlayerName)]; } set { this[nameof(PlayerName)] = value; } }
        public int Score { get { return this[nameof(Score)].GetValue<int>(); } set { this[nameof(Score)].SetValue<int>(value); } }
    }
    public class CharacterPerksSave : Object
    {
        public CharacterPerksSave(nint addr) : base(addr) { }
        public UArray<PerkEquipEntry> CharacterPerks { get { return new UArray<PerkEquipEntry>(this[nameof(CharacterPerks)].Address); } }
    }
    public class PerkEquipEntry : Object
    {
        public PerkEquipEntry(nint addr) : base(addr) { }
        public Guid characterID { get { return this[nameof(characterID)].As<Guid>(); } set { this["characterID"] = value; } }
        public UArray<Guid> PerkIDs { get { return new UArray<Guid>(this[nameof(PerkIDs)].Address); } }
    }
    public class AchievementSave : Object
    {
        public AchievementSave(nint addr) : base(addr) { }
        public UArray<Object> OfflineAchievedAchievements { get { return new UArray<Object>(this[nameof(OfflineAchievedAchievements)].Address); } }
        public UArray<AchievementSaveEntry> AchievementEntries { get { return new UArray<AchievementSaveEntry>(this[nameof(AchievementEntries)].Address); } }
    }
    public class AchievementSaveEntry : Object
    {
        public AchievementSaveEntry(nint addr) : base(addr) { }
        public Guid AchievementSaveID { get { return this[nameof(AchievementSaveID)].As<Guid>(); } set { this["AchievementSaveID"] = value; } }
        public float HighestSavedProgress { get { return this[nameof(HighestSavedProgress)].GetValue<float>(); } set { this[nameof(HighestSavedProgress)].SetValue<float>(value); } }
        public float CurrentProgress { get { return this[nameof(CurrentProgress)].GetValue<float>(); } set { this[nameof(CurrentProgress)].SetValue<float>(value); } }
    }
    public class PerkClaimsSave : Object
    {
        public PerkClaimsSave(nint addr) : base(addr) { }
        public UArray<PerkClaimEntry> PerkEntries { get { return new UArray<PerkClaimEntry>(this[nameof(PerkEntries)].Address); } }
        public bool HasResetPerks2 { get { return this[nameof(HasResetPerks2)].Flag; } set { this[nameof(HasResetPerks2)].Flag = value; } }
    }
    public class PerkClaimEntry : Object
    {
        public PerkClaimEntry(nint addr) : base(addr) { }
        public Guid PerkID { get { return this[nameof(PerkID)].As<Guid>(); } set { this["PerkID"] = value; } }
        public int currentRank { get { return this[nameof(currentRank)].GetValue<int>(); } set { this[nameof(currentRank)].SetValue<int>(value); } }
    }
    public class MilestoneSave : Object
    {
        public MilestoneSave(nint addr) : base(addr) { }
        public UArray<MilestoneCounter> ClaimedKPIRewards { get { return new UArray<MilestoneCounter>(this[nameof(ClaimedKPIRewards)].Address); } }
    }
    public class MilestoneCounter : Object
    {
        public MilestoneCounter(nint addr) : base(addr) { }
        public Guid KPIGuid { get { return this[nameof(KPIGuid)].As<Guid>(); } set { this["KPIGuid"] = value; } }
        public int Tier { get { return this[nameof(Tier)].GetValue<int>(); } set { this[nameof(Tier)].SetValue<int>(value); } }
    }
    public class MissionStatSave : Object
    {
        public MissionStatSave(nint addr) : base(addr) { }
        public UArray<MissionStatCounter> Counters { get { return new UArray<MissionStatCounter>(this[nameof(Counters)].Address); } }
        public bool bCharacterLevelUpFixed { get { return this[nameof(bCharacterLevelUpFixed)].Flag; } set { this[nameof(bCharacterLevelUpFixed)].Flag = value; } }
        public bool bBoughtVanityItemsFixed { get { return this[nameof(bBoughtVanityItemsFixed)].Flag; } set { this[nameof(bBoughtVanityItemsFixed)].Flag = value; } }
        public bool bBoughtEquipmentUpgradesFixed { get { return this[nameof(bBoughtEquipmentUpgradesFixed)].Flag; } set { this[nameof(bBoughtEquipmentUpgradesFixed)].Flag = value; } }
        public bool bCampaignsCompletedFixed { get { return this[nameof(bCampaignsCompletedFixed)].Flag; } set { this[nameof(bCampaignsCompletedFixed)].Flag = value; } }
        public bool WeaponUpgradesFixed { get { return this[nameof(WeaponUpgradesFixed)].Flag; } set { this[nameof(WeaponUpgradesFixed)].Flag = value; } }
    }
    public class MissionStatCounter : Object
    {
        public MissionStatCounter(nint addr) : base(addr) { }
        public Guid PlayerClassID { get { return this[nameof(PlayerClassID)].As<Guid>(); } set { this["PlayerClassID"] = value; } }
        public Guid MissionStatID { get { return this[nameof(MissionStatID)].As<Guid>(); } set { this["MissionStatID"] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class EndMissionResult : Object
    {
        public EndMissionResult(nint addr) : base(addr) { }
        public PlayerProgress PreviousPlayerProgress { get { return this[nameof(PreviousPlayerProgress)].As<PlayerProgress>(); } set { this["PreviousPlayerProgress"] = value; } }
        public PlayerProgress PlayerProgress { get { return this[nameof(PlayerProgress)].As<PlayerProgress>(); } set { this["PlayerProgress"] = value; } }
        public CharacterProgress PreviousCharacterProgress { get { return this[nameof(PreviousCharacterProgress)].As<CharacterProgress>(); } set { this["PreviousCharacterProgress"] = value; } }
        public CharacterProgress CharacterProgress { get { return this[nameof(CharacterProgress)].As<CharacterProgress>(); } set { this["CharacterProgress"] = value; } }
        public Schematic RewardedSchematic { get { return this[nameof(RewardedSchematic)].As<Schematic>(); } set { this["RewardedSchematic"] = value; } }
        public bool bReadyForUse { get { return this[nameof(bReadyForUse)].Flag; } set { this[nameof(bReadyForUse)].Flag = value; } }
    }
    public class CharacterProgress : Object
    {
        public CharacterProgress(nint addr) : base(addr) { }
        public PlayerCharacterID characterID { get { return this[nameof(characterID)].As<PlayerCharacterID>(); } set { this["characterID"] = value; } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
        public int CurrentXP { get { return this[nameof(CurrentXP)].GetValue<int>(); } set { this[nameof(CurrentXP)].SetValue<int>(value); } }
        public int NextLevelXP { get { return this[nameof(NextLevelXP)].GetValue<int>(); } set { this[nameof(NextLevelXP)].SetValue<int>(value); } }
        public int TimesRetired { get { return this[nameof(TimesRetired)].GetValue<int>(); } set { this[nameof(TimesRetired)].SetValue<int>(value); } }
    }
    public class PlayerProgress : Object
    {
        public PlayerProgress(nint addr) : base(addr) { }
        public int PlayerRank { get { return this[nameof(PlayerRank)].GetValue<int>(); } set { this[nameof(PlayerRank)].SetValue<int>(value); } }
        public int PlayerStars { get { return this[nameof(PlayerStars)].GetValue<int>(); } set { this[nameof(PlayerStars)].SetValue<int>(value); } }
    }
    public class ActiveCampaingMission : Object
    {
        public ActiveCampaingMission(nint addr) : base(addr) { }
        public bool HasMission { get { return this[nameof(HasMission)].Flag; } set { this[nameof(HasMission)].Flag = value; } }
        public GlobalMissionSeed GlobalSeed { get { return this[nameof(GlobalSeed)].As<GlobalMissionSeed>(); } set { this["GlobalSeed"] = value; } }
        public int MissionSeed { get { return this[nameof(MissionSeed)].GetValue<int>(); } set { this[nameof(MissionSeed)].SetValue<int>(value); } }
    }
    public class SaveGameStatePerkItem : Object
    {
        public SaveGameStatePerkItem(nint addr) : base(addr) { }
        public byte Rank { get { return this[nameof(Rank)].GetValue<byte>(); } set { this[nameof(Rank)].SetValue<byte>(value); } }
        public PerkAsset Perk { get { return this[nameof(Perk)].As<PerkAsset>(); } set { this["Perk"] = value; } }
    }
    public enum EVacuumState : int
    {
        EPuddle = 0,
        EVacuuming = 1,
        EFalling = 2,
        EDead = 3,
        EVacuumState_MAX = 4,
    }
    public class BackendNotificationEvent : Object
    {
        public BackendNotificationEvent(nint addr) : base(addr) { }
        public Object MessageType { get { return this[nameof(MessageType)]; } set { this[nameof(MessageType)] = value; } }
        public Object Header { get { return this[nameof(Header)]; } set { this[nameof(Header)] = value; } }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
        public Object Link { get { return this[nameof(Link)]; } set { this[nameof(Link)] = value; } }
    }
    public enum EHolidayType : int
    {
        None = 0,
        LunarFestival = 1,
        Anniversary = 2,
        Easter = 3,
        BeachParty = 4,
        Oktoberfest = 5,
        Halloween = 6,
        Xmas = 7,
        OneOffEvent = 8,
        EHolidayType_MAX = 9,
    }
    public class JettyBootEventSettings : Object
    {
        public JettyBootEventSettings(nint addr) : base(addr) { }
        public Object JettyBootCharacter { get { return this[nameof(JettyBootCharacter)]; } set { this[nameof(JettyBootCharacter)] = value; } }
        public Object JettyBootArcadeOverlay { get { return this[nameof(JettyBootArcadeOverlay)]; } set { this[nameof(JettyBootArcadeOverlay)] = value; } }
    }
    public class FSDEventWithEnd : Object
    {
        public FSDEventWithEnd(nint addr) : base(addr) { }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public Object EventExpirationDate { get { return this[nameof(EventExpirationDate)]; } set { this[nameof(EventExpirationDate)] = value; } }
    }
    public class HolidayMeshItems : Object
    {
        public HolidayMeshItems(nint addr) : base(addr) { }
        public UArray<SkeletalMeshComponent> HolidayMeshComponents { get { return new UArray<SkeletalMeshComponent>(this[nameof(HolidayMeshComponents)].Address); } }
    }
    public class DrinkableBarSlot : Object
    {
        public DrinkableBarSlot(nint addr) : base(addr) { }
        public Vector WorldLocation { get { return this[nameof(WorldLocation)].As<Vector>(); } set { this["WorldLocation"] = value; } }
        public Object DrinkableActor { get { return this[nameof(DrinkableActor)]; } set { this[nameof(DrinkableActor)] = value; } }
    }
    public enum ECampaignType : int
    {
        Normal = 0,
        Weekly = 1,
        MatrixCoreHunt = 2,
        SeededRandom = 3,
        ECampaignType_MAX = 4,
    }
    public class UpgradeValues : Object
    {
        public UpgradeValues(nint addr) : base(addr) { }
        public float BaseValue { get { return this[nameof(BaseValue)].GetValue<float>(); } set { this[nameof(BaseValue)].SetValue<float>(value); } }
        public float UpgradedValue { get { return this[nameof(UpgradedValue)].GetValue<float>(); } set { this[nameof(UpgradedValue)].SetValue<float>(value); } }
        public float UpgradedPercentageValue { get { return this[nameof(UpgradedPercentageValue)].GetValue<float>(); } set { this[nameof(UpgradedPercentageValue)].SetValue<float>(value); } }
        public float OldUpgradedValue { get { return this[nameof(OldUpgradedValue)].GetValue<float>(); } set { this[nameof(OldUpgradedValue)].SetValue<float>(value); } }
        public float OldUpgradedPercentageValue { get { return this[nameof(OldUpgradedPercentageValue)].GetValue<float>(); } set { this[nameof(OldUpgradedPercentageValue)].SetValue<float>(value); } }
        public float CurrentValue { get { return this[nameof(CurrentValue)].GetValue<float>(); } set { this[nameof(CurrentValue)].SetValue<float>(value); } }
        public EUpgradeCalucationType CalculationType { get { return (EUpgradeCalucationType)this[nameof(CalculationType)].GetValue<int>(); } set { this[nameof(CalculationType)].SetValue<int>((int)value); } }
        public EItemPreviewStatus PreviewStatus { get { return (EItemPreviewStatus)this[nameof(PreviewStatus)].GetValue<int>(); } set { this[nameof(PreviewStatus)].SetValue<int>((int)value); } }
    }
    public enum EItemPreviewStatus : int
    {
        Normal = 0,
        Upgraded = 1,
        Previewed = 2,
        PreviewReduced = 3,
        UpgradedAndPreviewReduced = 4,
        EItemPreviewStatus_MAX = 5,
    }
    public enum EUpgradeCalucationType : int
    {
        Additive = 0,
        Multiplicative = 1,
        EUpgradeCalucationType_MAX = 2,
    }
    public class CraftingCost : Object
    {
        public CraftingCost(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float amount { get { return this[nameof(amount)].GetValue<float>(); } set { this[nameof(amount)].SetValue<float>(value); } }
    }
    public class ItemUpgradeStatText : Object
    {
        public ItemUpgradeStatText(nint addr) : base(addr) { }
        public Object StatText { get { return this[nameof(StatText)]; } set { this[nameof(StatText)] = value; } }
        public bool IsAdventageous { get { return this[nameof(IsAdventageous)].Flag; } set { this[nameof(IsAdventageous)].Flag = value; } }
    }
    public enum EUpgradeClass : int
    {
        Class_A = 0,
        Class_B = 1,
        Gear_A = 2,
        Gear_B = 3,
        Armor = 4,
        Pickaxe = 5,
        Class_Bosco = 10,
        EUpgradeClass_MAX = 11,
    }
    public enum EUpgradeTiers : int
    {
        Tier_2 = 0,
        Tier_3 = 1,
        Tier_4 = 2,
        Tier_5 = 3,
        Tier_6 = 4,
        Tier_MAX = 5,
    }
    public class GearStatEntry : Object
    {
        public GearStatEntry(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Value { get { return this[nameof(Value)]; } set { this[nameof(Value)] = value; } }
        public Object BaseValue { get { return this[nameof(BaseValue)]; } set { this[nameof(BaseValue)] = value; } }
        public Object UpgradeValue { get { return this[nameof(UpgradeValue)]; } set { this[nameof(UpgradeValue)] = value; } }
        public EItemPreviewStatus PreviewStatus { get { return (EItemPreviewStatus)this[nameof(PreviewStatus)].GetValue<int>(); } set { this[nameof(PreviewStatus)].SetValue<int>((int)value); } }
    }
    public class MasteryItem : Object
    {
        public MasteryItem(nint addr) : base(addr) { }
        public int NeededMastery { get { return this[nameof(NeededMastery)].GetValue<int>(); } set { this[nameof(NeededMastery)].SetValue<int>(value); } }
        public UArray<UnlockReward> Unlocks { get { return new UArray<UnlockReward>(this[nameof(Unlocks)].Address); } }
    }
    public enum EItemUpgradeStatus : int
    {
        Locked = 0,
        AvailableCannotAfford = 1,
        AvailableCanAfford = 2,
        Owned = 3,
        Equipped = 4,
        EItemUpgradeStatus_MAX = 5,
    }
    public class UpgradeTier : Object
    {
        public UpgradeTier(nint addr) : base(addr) { }
        public UArray<ItemUpgrade> Upgrades { get { return new UArray<ItemUpgrade>(this[nameof(Upgrades)].Address); } }
        public int RequiredCharacterLevel { get { return this[nameof(RequiredCharacterLevel)].GetValue<int>(); } set { this[nameof(RequiredCharacterLevel)].SetValue<int>(value); } }
        public int RequiredPlayerRank { get { return this[nameof(RequiredPlayerRank)].GetValue<int>(); } set { this[nameof(RequiredPlayerRank)].SetValue<int>(value); } }
    }
    public class DeepDiveTesterItem : Object
    {
        public DeepDiveTesterItem(nint addr) : base(addr) { }
        public MissionComplexity Complexity { get { return this[nameof(Complexity)].As<MissionComplexity>(); } set { this["Complexity"] = value; } }
        public MissionDuration Duration { get { return this[nameof(Duration)].As<MissionDuration>(); } set { this["Duration"] = value; } }
        public MissionTemplate mission { get { return this[nameof(mission)].As<MissionTemplate>(); } set { this["mission"] = value; } }
        public Object DeepDiveObjective { get { return this[nameof(DeepDiveObjective)]; } set { this[nameof(DeepDiveObjective)] = value; } }
        public MissionMutator Mutator { get { return this[nameof(Mutator)].As<MissionMutator>(); } set { this["Mutator"] = value; } }
        public MissionWarning Warning { get { return this[nameof(Warning)].As<MissionWarning>(); } set { this["Warning"] = value; } }
    }
    public class DeepDiveBank : Object
    {
        public DeepDiveBank(nint addr) : base(addr) { }
        public DeepDive NormalDeepDive { get { return this[nameof(NormalDeepDive)].As<DeepDive>(); } set { this["NormalDeepDive"] = value; } }
        public DeepDive HardDeepDive { get { return this[nameof(HardDeepDive)].As<DeepDive>(); } set { this["HardDeepDive"] = value; } }
    }
    public enum EDroneAIState : int
    {
        Follow = 0,
        Mine = 1,
        Fight = 2,
        Revive = 3,
        Light = 4,
        GoToPlayer = 5,
        Salute = 6,
        CarryGem = 7,
        UseAbillity = 8,
        Repairing = 9,
        Cleaning = 10,
        Melee = 11,
        EDroneAIState_MAX = 12,
    }
    public enum EDroneState : int
    {
        EFollow = 0,
        EMining = 1,
        ELight = 2,
        EMax = 3,
        EDroneState_MAX = 4,
    }
    public enum ERessuplyPodState : int
    {
        ReadyToDrop = 0,
        Dropping = 1,
        Landed = 2,
        Idle = 3,
        ERessuplyPodState_MAX = 4,
    }
    public enum EHackingPodState : int
    {
        EClosed = 0,
        EShowDispenser = 1,
        EShowButton = 2,
        EHacking = 3,
        EDestroyed = 4,
        EDone = 5,
        EHackingPodState_MAX = 6,
    }
    public enum ERiftCrystalState : int
    {
        Default = 0,
        InitialEmbeded = 1,
        Embedded = 2,
        Lifting = 3,
        Rifting = 4,
        Calling = 5,
        DeathDisplay = 6,
        Dead = 7,
        ERiftCrystalState_MAX = 8,
    }
    public enum ERockCrackerstate : int
    {
        Init = 0,
        EFalling = 1,
        EConnect = 2,
        EDrilling = 3,
        EBroke = 4,
        EDone = 5,
        ERockCrackerstate_MAX = 6,
    }
    public enum ERivalBombNodeState : int
    {
        Inactive = 0,
        Active = 1,
        Hackable = 2,
        Completed = 3,
        Failed = 4,
        ERivalBombNodeState_MAX = 5,
    }
    public enum EEnemyHealthScaling : int
    {
        SmallEnemy = 0,
        LargeEnemy = 1,
        ExtraLargeEnemy = 2,
        ExtraLargeEnemyB = 4,
        ExtraLargeEnemyC = 5,
        ExtraLargeEnemyD = 6,
        NoScaling = 3,
        EEnemyHealthScaling_MAX = 7,
    }
    public enum EHealthbarType : int
    {
        None = 0,
        MainLife = 1,
        Shield = 2,
        EHealthbarType_MAX = 3,
    }
    public enum EMissionStatType : int
    {
        Float = 0,
        Integer = 1,
        Time = 2,
        Distance = 3,
        EMissionStatType_MAX = 4,
    }
    public enum EPawnAttitude : int
    {
        Friendly = 0,
        Neutral = 1,
        Hostile = 2,
        EPawnAttitude_MAX = 3,
    }
    public enum EInfectionState : int
    {
        Normal = 0,
        PartlyInfected = 1,
        FullyInfected = 2,
        EInfectionState_MAX = 3,
    }
    public class ObjectiveMissionIcon : Object
    {
        public ObjectiveMissionIcon(nint addr) : base(addr) { }
        public Texture2D Texture { get { return this[nameof(Texture)].As<Texture2D>(); } set { this["Texture"] = value; } }
        public LinearColor Tint { get { return this[nameof(Tint)].As<LinearColor>(); } set { this["Tint"] = value; } }
    }
    public class CreditsReward : Object
    {
        public CreditsReward(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class MissionShouts : Object
    {
        public MissionShouts(nint addr) : base(addr) { }
        public DialogDataAsset AfterDropPodExit { get { return this[nameof(AfterDropPodExit)].As<DialogDataAsset>(); } set { this["AfterDropPodExit"] = value; } }
        public DialogDataAsset OnExitPodDescending { get { return this[nameof(OnExitPodDescending)].As<DialogDataAsset>(); } set { this["OnExitPodDescending"] = value; } }
        public DialogDataAsset OnExitPodArrived { get { return this[nameof(OnExitPodArrived)].As<DialogDataAsset>(); } set { this["OnExitPodArrived"] = value; } }
        public DialogDataAsset OnCompletion { get { return this[nameof(OnCompletion)].As<DialogDataAsset>(); } set { this["OnCompletion"] = value; } }
        public DialogDataAsset OnCompletion_OneOfMultiple { get { return this[nameof(OnCompletion_OneOfMultiple)].As<DialogDataAsset>(); } set { this["OnCompletion_OneOfMultiple"] = value; } }
        public DialogDataAsset OnAllReturnObjectivesCompleted { get { return this[nameof(OnAllReturnObjectivesCompleted)].As<DialogDataAsset>(); } set { this["OnAllReturnObjectivesCompleted"] = value; } }
        public DialogDataAsset OnDeepDiveExitPodDescending { get { return this[nameof(OnDeepDiveExitPodDescending)].As<DialogDataAsset>(); } set { this["OnDeepDiveExitPodDescending"] = value; } }
    }
    public enum ERefineryState : int
    {
        Landing = 0,
        ConnectingPipes = 1,
        PipesConnected = 2,
        Refining = 3,
        RefiningStalled = 4,
        RefiningComplete = 5,
        RocketLaunched = 6,
        ERefineryState_MAX = 7,
    }
    public enum EFrozenBitsSize : int
    {
        Tiny = 0,
        Small = 1,
        Medium = 2,
        Large = 3,
        Huge = 4,
        EFrozenBitsSize_MAX = 5,
    }
    public class AfflictionEntriesArray : FastArraySerializer
    {
        public AfflictionEntriesArray(nint addr) : base(addr) { }
        public UArray<AfflictionEntry> Items { get { return new UArray<AfflictionEntry>(this[nameof(Items)].Address); } }
        public PawnAfflictionComponent Owner { get { return this[nameof(Owner)].As<PawnAfflictionComponent>(); } set { this["Owner"] = value; } }
    }
    public class AfflictionEntry : FastArraySerializerItem
    {
        public AfflictionEntry(nint addr) : base(addr) { }
        public PawnAffliction Affliction { get { return this[nameof(Affliction)].As<PawnAffliction>(); } set { this["Affliction"] = value; } }
    }
    public class PawnAfflictionItem : Object
    {
        public PawnAfflictionItem(nint addr) : base(addr) { }
        public UArray<AfflictionEffect> Afflictions { get { return new UArray<AfflictionEffect>(this[nameof(Afflictions)].Address); } }
    }
    public enum EPropHuntEndScreen : int
    {
        HuntersWin = 0,
        PropsWin = 1,
        EPropHuntEndScreen_MAX = 2,
    }
    public enum EPropHuntRole : int
    {
        PendingRole = 0,
        Hunter = 1,
        Prop = 2,
        EPropHuntRole_MAX = 3,
    }
    public class PropHuntContestantState : Object
    {
        public PropHuntContestantState(nint addr) : base(addr) { }
        public EPropHuntRole Role { get { return (EPropHuntRole)this[nameof(Role)].GetValue<int>(); } set { this[nameof(Role)].SetValue<int>((int)value); } }
        public Vector2D DisguiseSize { get { return this[nameof(DisguiseSize)].As<Vector2D>(); } set { this["DisguiseSize"] = value; } }
        public Object PlayerCharacter { get { return this[nameof(PlayerCharacter)]; } set { this[nameof(PlayerCharacter)] = value; } }
        public int Lives { get { return this[nameof(Lives)].GetValue<int>(); } set { this[nameof(Lives)].SetValue<int>(value); } }
    }
    public class PropHuntManagerState : Object
    {
        public PropHuntManagerState(nint addr) : base(addr) { }
        public int ActiveProps { get { return this[nameof(ActiveProps)].GetValue<int>(); } set { this[nameof(ActiveProps)].SetValue<int>(value); } }
        public int ActiveHunters { get { return this[nameof(ActiveHunters)].GetValue<int>(); } set { this[nameof(ActiveHunters)].SetValue<int>(value); } }
    }
    public enum EDroppableOutpostState : int
    {
        WaitingToDrop = 0,
        Drilling = 1,
        Landed = 2,
        PrepTakeoff = 3,
        Departing = 4,
        EDroppableOutpostState_MAX = 5,
    }
    public enum EPipelineBuildState : int
    {
        NotStarted = 0,
        BeginBuilt = 1,
        Completed = 2,
        Broken = 3,
        EPipelineBuildState_MAX = 4,
    }
    public enum ETrackBuildPlacementState : int
    {
        NotBeingPlaced = 0,
        BeingPlaced = 1,
        Finished = 2,
        ETrackBuildPlacementState_MAX = 3,
    }
    public class TrackBuilderPoint : Object
    {
        public TrackBuilderPoint(nint addr) : base(addr) { }
        public ETrackBuildPlacementState PlacementState { get { return (ETrackBuildPlacementState)this[nameof(PlacementState)].GetValue<int>(); } set { this[nameof(PlacementState)].SetValue<int>((int)value); } }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Vector_NetQuantize EulerRotation { get { return this[nameof(EulerRotation)].As<Vector_NetQuantize>(); } set { this["EulerRotation"] = value; } }
        public bool bPointValid { get { return this[nameof(bPointValid)].Flag; } set { this[nameof(bPointValid)].Flag = value; } }
        public Object ConnectPoint { get { return this[nameof(ConnectPoint)]; } set { this[nameof(ConnectPoint)] = value; } }
    }
    public class ClaimableRewardEntry : Object
    {
        public ClaimableRewardEntry(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
        public UArray<Reward> Rewards { get { return new UArray<Reward>(this[nameof(Rewards)].Address); } }
        public Object EntryWidgetOverride { get { return this[nameof(EntryWidgetOverride)]; } set { this[nameof(EntryWidgetOverride)] = value; } }
    }
    public enum ESchematicState : int
    {
        NotOwned = 0,
        Owned = 1,
        OwnedBuilt = 2,
        ESchematicState_MAX = 3,
    }
    public class ButtonData : Object
    {
        public ButtonData(nint addr) : base(addr) { }
        public Object Object { get { return this[nameof(Object)].As<Object>(); } set { this["Object"] = value; } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
        public Object String { get { return this[nameof(String)]; } set { this[nameof(String)] = value; } }
        public DetailedTagSet Tags { get { return this[nameof(Tags)].As<DetailedTagSet>(); } set { this["Tags"] = value; } }
    }
    public class DetailedTagSet : Object
    {
        public DetailedTagSet(nint addr) : base(addr) { }
        public Object Tags { get { return this[nameof(Tags)]; } set { this[nameof(Tags)] = value; } }
    }
    public enum EShoutType : int
    {
        Attention = 0,
        Follow = 1,
        StandingDown = 2,
        Downed = 3,
        RequestRevive = 4,
        Revived = 5,
        Resupply = 6,
        FriendlyFire = 7,
        KillCry = 8,
        Dead = 9,
        Cheating = 10,
        ResourceFull = 11,
        ResourceFullNoDonkey = 12,
        CallDonkey = 13,
        CallDonkey_NotInMission = 14,
        Depositing = 15,
        DepositingNoDonkey = 16,
        OutOfAmmo = 17,
        Reloading = 18,
        CharacterSelected = 19,
        UpgradeBought = 20,
        WaitingInDropPod = 21,
        Carrying = 22,
        WaitingInEscapePod = 23,
        Salute = 24,
        Salute_Spacerig = 25,
        Drink = 26,
        EShoutType_MAX = 27,
    }
    public enum EAsyncLoadPriority : int
    {
        Normal = 0,
        High = 100,
        Low = 255,
        EAsyncLoadPriority_MAX = 256,
    }
    public class MissionShoutQueueItem : Object
    {
        public MissionShoutQueueItem(nint addr) : base(addr) { }
        public Object AudioPtr { get { return this[nameof(AudioPtr)]; } set { this[nameof(AudioPtr)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public SoundBase LoadedAudio { get { return this[nameof(LoadedAudio)].As<SoundBase>(); } set { this["LoadedAudio"] = value; } }
    }
    public class ActiveOutline : Object
    {
        public ActiveOutline(nint addr) : base(addr) { }
    }
    public enum EHUDVisibilityPresets : int
    {
        AllVisible = 0,
        Recommended = 1,
        Minimal = 2,
        AllHidden = 3,
        EHUDVisibilityPresets_MAX = 4,
    }
    public class HUDVisibilityRegisteredWidget : Object
    {
        public HUDVisibilityRegisteredWidget(nint addr) : base(addr) { }
        public Object Widget { get { return this[nameof(Widget)]; } set { this[nameof(Widget)] = value; } }
    }
    public enum EHUDVisibilityGroups : int
    {
        OnScreenHelp = 0,
        EnemyHealth = 1,
        RadarAndDepth = 2,
        PlayerHealthShield = 3,
        PlayerNameClassIcon = 4,
        PlayerItems = 5,
        PlayerResources = 6,
        WeaponInfo = 7,
        Grenades = 8,
        FlashLight = 9,
        Flares = 10,
        Crosshair = 11,
        Objectives = 12,
        TeamDisplay = 13,
        SentryGunDisplay = 14,
        VersionNumber = 15,
        EHUDVisibilityGroups_MAX = 16,
    }
    public enum EMediaPlayerState : int
    {
        Stopped = 0,
        Opening = 1,
        Playing = 2,
        EMediaPlayerState_MAX = 3,
    }
    public class YesNoPromptSettings : Object
    {
        public YesNoPromptSettings(nint addr) : base(addr) { }
        public Object WidgetClass { get { return this[nameof(WidgetClass)]; } set { this[nameof(WidgetClass)] = value; } }
        public int ZOrder { get { return this[nameof(ZOrder)].GetValue<int>(); } set { this[nameof(ZOrder)].SetValue<int>(value); } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
    }
    public enum EAmmoWeaponState : int
    {
        Equipping = 0,
        Ready = 1,
        Cycling = 2,
        Reloading = 3,
        BurstCycling = 4,
        EAmmoWeaponState_MAX = 5,
    }
    public class RecoilSettings : Object
    {
        public RecoilSettings(nint addr) : base(addr) { }
        public RandRange RecoilRoll { get { return this[nameof(RecoilRoll)].As<RandRange>(); } set { this["RecoilRoll"] = value; } }
        public RandRange RecoilPitch { get { return this[nameof(RecoilPitch)].As<RandRange>(); } set { this["RecoilPitch"] = value; } }
        public RandRange RecoilYaw { get { return this[nameof(RecoilYaw)].As<RandRange>(); } set { this["RecoilYaw"] = value; } }
        public bool CanRecoilDown { get { return this[nameof(CanRecoilDown)].Flag; } set { this[nameof(CanRecoilDown)].Flag = value; } }
        public float SpringStiffness { get { return this[nameof(SpringStiffness)].GetValue<float>(); } set { this[nameof(SpringStiffness)].SetValue<float>(value); } }
        public float CriticalDampening { get { return this[nameof(CriticalDampening)].GetValue<float>(); } set { this[nameof(CriticalDampening)].SetValue<float>(value); } }
        public float Mass { get { return this[nameof(Mass)].GetValue<float>(); } set { this[nameof(Mass)].SetValue<float>(value); } }
    }
    public class RandRange : Object
    {
        public RandRange(nint addr) : base(addr) { }
        public float Min { get { return this[nameof(Min)].GetValue<float>(); } set { this[nameof(Min)].SetValue<float>(value); } }
        public float Max { get { return this[nameof(Max)].GetValue<float>(); } set { this[nameof(Max)].SetValue<float>(value); } }
    }
    public class TracerData : Object
    {
        public TracerData(nint addr) : base(addr) { }
        public FXSystemAsset MainParticle { get { return this[nameof(MainParticle)].As<FXSystemAsset>(); } set { this["MainParticle"] = value; } }
        public FXSystemAsset TrailParticle { get { return this[nameof(TrailParticle)].As<FXSystemAsset>(); } set { this["TrailParticle"] = value; } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public SoundCue WhizbySound { get { return this[nameof(WhizbySound)].As<SoundCue>(); } set { this["WhizbySound"] = value; } }
        public float WhizBySoundCooldown { get { return this[nameof(WhizBySoundCooldown)].GetValue<float>(); } set { this[nameof(WhizBySoundCooldown)].SetValue<float>(value); } }
        public float Offset { get { return this[nameof(Offset)].GetValue<float>(); } set { this[nameof(Offset)].SetValue<float>(value); } }
        public float MinDistance { get { return this[nameof(MinDistance)].GetValue<float>(); } set { this[nameof(MinDistance)].SetValue<float>(value); } }
    }
    public class ItemAnimationItem : Object
    {
        public ItemAnimationItem(nint addr) : base(addr) { }
        public AnimMontage FP_CharacterMontage { get { return this[nameof(FP_CharacterMontage)].As<AnimMontage>(); } set { this["FP_CharacterMontage"] = value; } }
        public AnimMontage TP_CharacterMontage { get { return this[nameof(TP_CharacterMontage)].As<AnimMontage>(); } set { this["TP_CharacterMontage"] = value; } }
        public AnimMontage ItemMontage { get { return this[nameof(ItemMontage)].As<AnimMontage>(); } set { this["ItemMontage"] = value; } }
    }
    public class MultiHitScanHits : Object
    {
        public MultiHitScanHits(nint addr) : base(addr) { }
        public UArray<MultiHitscanHit> Hits { get { return new UArray<MultiHitscanHit>(this[nameof(Hits)].Address); } }
        public UArray<PrimitiveComponent> Components { get { return new UArray<PrimitiveComponent>(this[nameof(Components)].Address); } }
        public UArray<FSDPhysicalMaterial> PhysicalMaterials { get { return new UArray<FSDPhysicalMaterial>(this[nameof(PhysicalMaterials)].Address); } }
    }
    public class MultiHitscanHit : Object
    {
        public MultiHitscanHit(nint addr) : base(addr) { }
        public byte TargetComponentIndex { get { return this[nameof(TargetComponentIndex)].GetValue<byte>(); } set { this[nameof(TargetComponentIndex)].SetValue<byte>(value); } }
        public byte PhysicalMaterialIndex { get { return this[nameof(PhysicalMaterialIndex)].GetValue<byte>(); } set { this[nameof(PhysicalMaterialIndex)].SetValue<byte>(value); } }
        public Vector_NetQuantize HitLocation { get { return this[nameof(HitLocation)].As<Vector_NetQuantize>(); } set { this["HitLocation"] = value; } }
        public Vector_NetQuantizeNormal ImpactNormal { get { return this[nameof(ImpactNormal)].As<Vector_NetQuantizeNormal>(); } set { this["ImpactNormal"] = value; } }
        public byte BoneIndex { get { return this[nameof(BoneIndex)].GetValue<byte>(); } set { this[nameof(BoneIndex)].SetValue<byte>(value); } }
        public bool PlayImpactSound { get { return this[nameof(PlayImpactSound)].Flag; } set { this[nameof(PlayImpactSound)].Flag = value; } }
        public bool SpawnDecal { get { return this[nameof(SpawnDecal)].Flag; } set { this[nameof(SpawnDecal)].Flag = value; } }
    }
    public class BulletPathSegment : Object
    {
        public BulletPathSegment(nint addr) : base(addr) { }
    }
    public enum ECrossbowSwitchState : int
    {
        Normal = 0,
        Cancelled = 1,
        DuringReload = 2,
        ECrossbowSwitchState_MAX = 3,
    }
    public class ProjectileSwitch : Object
    {
        public ProjectileSwitch(nint addr) : base(addr) { }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public EProjectileSwitchCriteria CriteriaType { get { return (EProjectileSwitchCriteria)this[nameof(CriteriaType)].GetValue<int>(); } set { this[nameof(CriteriaType)].SetValue<int>((int)value); } }
        public float CriteriaThreshhold { get { return this[nameof(CriteriaThreshhold)].GetValue<float>(); } set { this[nameof(CriteriaThreshhold)].SetValue<float>(value); } }
    }
    public enum EProjectileSwitchCriteria : int
    {
        None = 0,
        CharagedProjectile = 1,
        HeatAbove = 2,
        HeatBelow = 3,
        CycleButtonSecondsHeld = 4,
        EProjectileSwitchCriteria_MAX = 5,
    }
    public enum EGooGunFireMode : int
    {
        Normal = 0,
        Charge = 1,
        Burst = 2,
        EGooGunFireMode_MAX = 3,
    }
    public enum EThrownGrenadeItemState : int
    {
        NotEquipped = 0,
        Cooking = 1,
        Throwing = 2,
        EThrownGrenadeItemState_MAX = 3,
    }
    public class HackingUsableState : Object
    {
        public HackingUsableState(nint addr) : base(addr) { }
        public bool bIsHacked { get { return this[nameof(bIsHacked)].Flag; } set { this[nameof(bIsHacked)].Flag = value; } }
        public Object BeingHackedByItem { get { return this[nameof(BeingHackedByItem)]; } set { this[nameof(BeingHackedByItem)] = value; } }
        public Object HackedBy { get { return this[nameof(HackedBy)]; } set { this[nameof(HackedBy)] = value; } }
    }
    public class LockCounter : Object
    {
        public LockCounter(nint addr) : base(addr) { }
        public int LockCount { get { return this[nameof(LockCount)].GetValue<int>(); } set { this[nameof(LockCount)].SetValue<int>(value); } }
        public Object LockedActor { get { return this[nameof(LockedActor)]; } set { this[nameof(LockedActor)] = value; } }
    }
    public enum EMicroMissileLauncherFireMode : int
    {
        Normal = 0,
        Charge = 1,
        Buck = 2,
        EMicroMissileLauncherFireMode_MAX = 3,
    }
    public class DisplayContent : Object
    {
        public DisplayContent(nint addr) : base(addr) { }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object AnimClass { get { return this[nameof(AnimClass)]; } set { this[nameof(AnimClass)] = value; } }
        public Vector PivotOffset { get { return this[nameof(PivotOffset)].As<Vector>(); } set { this["PivotOffset"] = value; } }
        public Rotator RotationOffset { get { return this[nameof(RotationOffset)].As<Rotator>(); } set { this["RotationOffset"] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
        public UArray<Object> Description { get { return new UArray<Object>(this[nameof(Description)].Address); } }
        public SkeletalMesh LoadedSkeletalMesh { get { return this[nameof(LoadedSkeletalMesh)].As<SkeletalMesh>(); } set { this["LoadedSkeletalMesh"] = value; } }
        public Object AnimClassInstance { get { return this[nameof(AnimClassInstance)]; } set { this[nameof(AnimClassInstance)] = value; } }
    }
    public class ProjectileImpact : Object
    {
        public ProjectileImpact(nint addr) : base(addr) { }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Vector_NetQuantizeNormal Normal { get { return this[nameof(Normal)].As<Vector_NetQuantizeNormal>(); } set { this["Normal"] = value; } }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public PhysicalMaterial PhysMat { get { return this[nameof(PhysMat)].As<PhysicalMaterial>(); } set { this["PhysMat"] = value; } }
        public int BoneIndex { get { return this[nameof(BoneIndex)].GetValue<int>(); } set { this[nameof(BoneIndex)].SetValue<int>(value); } }
        public bool bBlockingHit { get { return this[nameof(bBlockingHit)].Flag; } set { this[nameof(bBlockingHit)].Flag = value; } }
    }
    public enum EOnProjectileImpactBehaviourEnum : int
    {
        CallOnPredict = 0,
        CallOnConfirmed = 1,
        CallOnPredictAndConfirmed = 2,
        ClientAuthoritative = 3,
        EOnProjectileImpactBehaviourEnum_MAX = 4,
    }
    public class ProjectileState : Object
    {
        public ProjectileState(nint addr) : base(addr) { }
        public Vector_NetQuantize Velocity { get { return this[nameof(Velocity)].As<Vector_NetQuantize>(); } set { this["Velocity"] = value; } }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public SceneComponent HomingTargetComponent { get { return this[nameof(HomingTargetComponent)].As<SceneComponent>(); } set { this["HomingTargetComponent"] = value; } }
        public bool IsSimulating { get { return this[nameof(IsSimulating)].Flag; } set { this[nameof(IsSimulating)].Flag = value; } }
        public bool IsBouncy { get { return this[nameof(IsBouncy)].Flag; } set { this[nameof(IsBouncy)].Flag = value; } }
        public bool IsHoming { get { return this[nameof(IsHoming)].Flag; } set { this[nameof(IsHoming)].Flag = value; } }
        public bool IsPenetrating { get { return this[nameof(IsPenetrating)].Flag; } set { this[nameof(IsPenetrating)].Flag = value; } }
    }
    public enum ELineRotation : int
    {
        None = 0,
        Yaw = 1,
        Pitch = 2,
        Roll = 3,
        ELineRotation_MAX = 4,
    }
    public enum EImpactDecalSize : int
    {
        Small = 0,
        Medium = 1,
        Large = 2,
        None = 3,
        EImpactDecalSize_MAX = 4,
    }
    public class ScaledEffect : Object
    {
        public ScaledEffect(nint addr) : base(addr) { }
        public FXSystemAsset ParticleSystem { get { return this[nameof(ParticleSystem)].As<FXSystemAsset>(); } set { this["ParticleSystem"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public bool SetBiomeRockMaterial { get { return this[nameof(SetBiomeRockMaterial)].Flag; } set { this[nameof(SetBiomeRockMaterial)].Flag = value; } }
    }
    public enum ERecallableActorState : int
    {
        Idle = 0,
        RelocateRequested = 1,
        Relocating = 2,
        ReturnRequested = 3,
        Returning = 4,
        Home = 5,
        ERecallableActorState_MAX = 6,
    }
    public class SentryGunMuzzleSetup : Object
    {
        public SentryGunMuzzleSetup(nint addr) : base(addr) { }
        public Object SocketName { get { return this[nameof(SocketName)]; } set { this[nameof(SocketName)] = value; } }
        public AnimMontage FireMontage { get { return this[nameof(FireMontage)].As<AnimMontage>(); } set { this["FireMontage"] = value; } }
    }
    public enum ERedeployableSentryGunState : int
    {
        Deploying = 0,
        Deployed = 1,
        Dismantling = 2,
        Dismantled = 3,
        ERedeployableSentryGunState_MAX = 4,
    }
    public enum EItemSkinType : int
    {
        PaintJob = 0,
        Framework = 1,
        EItemSkinType_MAX = 2,
    }
    public class BlueprintFriend : Object
    {
        public BlueprintFriend(nint addr) : base(addr) { }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public Object RealName { get { return this[nameof(RealName)]; } set { this[nameof(RealName)] = value; } }
        public EFriendOnlineStatusEnum OnlineStatus { get { return (EFriendOnlineStatusEnum)this[nameof(OnlineStatus)].GetValue<int>(); } set { this[nameof(OnlineStatus)].SetValue<int>((int)value); } }
        public Object UniqueNetId { get { return this[nameof(UniqueNetId)]; } set { this[nameof(UniqueNetId)] = value; } }
    }
    public enum EFriendOnlineStatusEnum : int
    {
        Online = 0,
        Offline = 1,
        Away = 2,
        EFriendOnlineStatusEnum_MAX = 3,
    }
    public enum EBlueprintablePrivilegeResults : int
    {
        NoFailures = 0,
        RequiredPatchAvailable = 1,
        RequiredSystemUpdate = 2,
        AgeRestrictionFailure = 3,
        AccountTypeFailure = 4,
        UserNotFound = 5,
        UserNotLoggedIn = 6,
        ChatRestriction = 7,
        UGCRestriction = 8,
        GenericFailure = 9,
        OnlinePlayRestricted = 10,
        NetworkConnectionUnavailable = 11,
        EBlueprintablePrivilegeResults_MAX = 12,
    }
    public enum EBlueprintableUserPrivileges : int
    {
        CanPlay = 0,
        CanPlayOnline = 1,
        CanCommunicateOnline = 2,
        CanUseUserGeneratedContent = 3,
        CanUserCrossPlay = 4,
        EBlueprintableUserPrivileges_MAX = 5,
    }
    public class DiscordServerData : Object
    {
        public DiscordServerData(nint addr) : base(addr) { }
        public int presenceCount { get { return this[nameof(presenceCount)].GetValue<int>(); } set { this[nameof(presenceCount)].SetValue<int>(value); } }
        public int memberCount { get { return this[nameof(memberCount)].GetValue<int>(); } set { this[nameof(memberCount)].SetValue<int>(value); } }
    }
    public class SizeBoxSettings : Object
    {
        public SizeBoxSettings(nint addr) : base(addr) { }
        public float WidthOverride { get { return this[nameof(WidthOverride)].GetValue<float>(); } set { this[nameof(WidthOverride)].SetValue<float>(value); } }
        public float HeightOverride { get { return this[nameof(HeightOverride)].GetValue<float>(); } set { this[nameof(HeightOverride)].SetValue<float>(value); } }
        public float MinDesiredWidth { get { return this[nameof(MinDesiredWidth)].GetValue<float>(); } set { this[nameof(MinDesiredWidth)].SetValue<float>(value); } }
        public float MinDesiredHeight { get { return this[nameof(MinDesiredHeight)].GetValue<float>(); } set { this[nameof(MinDesiredHeight)].SetValue<float>(value); } }
        public float MaxDesiredWidth { get { return this[nameof(MaxDesiredWidth)].GetValue<float>(); } set { this[nameof(MaxDesiredWidth)].SetValue<float>(value); } }
        public float MaxDesiredHeight { get { return this[nameof(MaxDesiredHeight)].GetValue<float>(); } set { this[nameof(MaxDesiredHeight)].SetValue<float>(value); } }
        public float MinAspectRatio { get { return this[nameof(MinAspectRatio)].GetValue<float>(); } set { this[nameof(MinAspectRatio)].SetValue<float>(value); } }
        public float MaxAspectRatio { get { return this[nameof(MaxAspectRatio)].GetValue<float>(); } set { this[nameof(MaxAspectRatio)].SetValue<float>(value); } }
    }
    public class WidgetAnimationSettings : Object
    {
        public WidgetAnimationSettings(nint addr) : base(addr) { }
        public float PlaybackSpeed { get { return this[nameof(PlaybackSpeed)].GetValue<float>(); } set { this[nameof(PlaybackSpeed)].SetValue<float>(value); } }
        public byte PlayMode { get { return this[nameof(PlayMode)].GetValue<byte>(); } set { this[nameof(PlayMode)].SetValue<byte>(value); } }
        public bool bRestoreState { get { return this[nameof(bRestoreState)].Flag; } set { this[nameof(bRestoreState)].Flag = value; } }
    }
    public class TextCounterEntry : Object
    {
        public TextCounterEntry(nint addr) : base(addr) { }
        public TextBlock TextBlock { get { return this[nameof(TextBlock)].As<TextBlock>(); } set { this["TextBlock"] = value; } }
        public Object Format { get { return this[nameof(Format)]; } set { this[nameof(Format)] = value; } }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
    }
    public enum EActivityType : int
    {
        Mission = 0,
        Assignment = 1,
        Tutorial = 2,
        None = 3,
        EActivityType_MAX = 4,
    }
    public enum EMeshAttachType : int
    {
        ECharacterMesh = 0,
        ECamera = 1,
        EMeshAttachType_MAX = 2,
    }
    public enum EAfflictionSocket : int
    {
        CenterMass = 0,
        Feet = 1,
        Camera = 2,
        EAfflictionSocket_MAX = 3,
    }
    public enum ECreatureSize : int
    {
        Tiny = 0,
        Small = 1,
        Medium = 2,
        Large = 3,
        Huge = 4,
        ECreatureSize_MAX = 5,
    }
    public enum EFrozenAfflictionType : int
    {
        Frozen = 0,
        Infected = 1,
        EFrozenAfflictionType_MAX = 2,
    }
    public enum EFlyingBugDeathAnimationCategory : int
    {
        NoAnimation = 0,
        IdleOnDeath = 1,
        EFlyingBugDeathAnimationCategory_MAX = 2,
    }
    public enum EAsyncPersistence : int
    {
        Manual = 0,
        Level = 1,
        Permanent = 2,
        EAsyncPersistence_MAX = 3,
    }
    public enum EMaterialChoice : int
    {
        HairColor = 0,
        TransparentHairColor = 1,
        ArmorColor = 2,
        MaterialOverride = 3,
        EMaterialChoice_MAX = 4,
    }
    public enum EBhaBarnableAnimationState : int
    {
        Idle = 0,
        Dead = 1,
        EBhaBarnableAnimationState_MAX = 2,
    }
    public enum EAbilityIndex : int
    {
        ENone = 0,
        EPrimary = 1,
        ESecondary = 2,
        EAbilityIndex_MAX = 3,
    }
    public enum EBoomerangState : int
    {
        None = 0,
        Curving = 1,
        GoingBack = 2,
        Targeting = 3,
        EBoomerangState_MAX = 4,
    }
    public enum EPlatformRestriction : int
    {
        Editor = 0,
        Steam = 1,
        Oddish = 2,
        UniversalWindowsPlatform = 3,
        XBoxOne = 4,
        PS4 = 5,
        EPlatformRestriction_MAX = 6,
    }
    public enum EBuildTypeRestriction : int
    {
        Development = 0,
        Shipping = 1,
        EBuildTypeRestriction_MAX = 2,
    }
    public enum ECampaignMutators : int
    {
        NotAllowed = 0,
        Allowed = 1,
        Preffered = 2,
        ECampaignMutators_MAX = 3,
    }
    public enum ECaretakerSpawnType : int
    {
        None = 0,
        Drones = 1,
        Bombs = 2,
        Shredders = 3,
        Turrets = 4,
        ECaretakerSpawnType_MAX = 5,
    }
    public enum EFacilityEye : int
    {
        EForward = 0,
        EBack = 1,
        ELeft = 2,
        ERight = 3,
        EFacilityEye_MAX = 4,
    }
    public enum ECellCategory : int
    {
        Cave = 0,
        Tunnel = 1,
        ECellCategory_MAX = 255,
    }
    public enum ECaveLeechState : int
    {
        Idle = 0,
        Tracking = 1,
        Pulling = 2,
        Retracting = 3,
        Dying = 4,
        Dead = 5,
        Frozen = 6,
        ECaveLeechState_MAX = 7,
    }
    public enum ECustomUsableType : int
    {
        ClearOnFrameEnd = 0,
        ClearOnUseReleased = 1,
        ClearManually = 2,
        ECustomUsableType_MAX = 3,
    }
    public enum EExampleEnum : int
    {
        FirstName = 0,
        SecondName = 1,
        EExampleEnum_MAX = 2,
    }
    public enum ECoilgunTraceEffect : int
    {
        EPrimary = 0,
        EDamage = 1,
        EFear = 2,
        ECoilgunTraceEffect_MAX = 3,
    }
    public enum ECommunityGoalIndex : int
    {
        KillBroodNexus = 0,
        KillBulkDetonators = 1,
        KillCaveLeeches = 2,
        KillJellyBreeders = 3,
        KillPretorians = 4,
        KillShellbacks = 5,
        KillSpitballers = 6,
        CollectBittergem = 7,
        CollectCompressedGold = 8,
        CollectGold = 9,
        CollectCraftingMaterials = 10,
        GainXP = 11,
        TestGoal = 12,
        Count = 13,
        ECommunityGoalIndex_MAX = 14,
    }
    public enum ECommunityGoalTier : int
    {
        Bronze = 0,
        Silver = 1,
        Gold = 2,
        ECommunityGoalTier_MAX = 3,
    }
    public enum ECommunityGoalType : int
    {
        Float = 0,
        Integer = 1,
        Time = 2,
        Distance = 3,
        ECommunityGoalType_MAX = 4,
    }
    public enum ECommunityUIState : int
    {
        Loading = 0,
        SelectFaction = 1,
        Progress = 2,
        Recruitment = 3,
        Reward = 4,
        Invalid = 5,
        ECommunityUIState_MAX = 6,
    }
    public enum ERobotState : int
    {
        Enemy = 0,
        Friendly = 1,
        PoweredDown = 2,
        ERobotState_MAX = 3,
    }
    public enum ECrossbowStuckType : int
    {
        Default = 0,
        Electric = 1,
        Chemical = 2,
        Banshee = 3,
        ECrossbowStuckType_MAX = 4,
    }
    public enum EKeyBindingAxis : int
    {
        None = 0,
        Positive = 1,
        Negative = 2,
        EKeyBindingAxis_MAX = 3,
    }
    public enum EDealType : int
    {
        Buy = 0,
        Sell = 1,
        EDealType_MAX = 2,
    }
    public enum EPlasmaCarbineConditions : int
    {
        ShieldRemovedOnReload = 0,
        EPlasmaCarbineConditions_MAX = 1,
    }
    public enum EBoltActionWeaponConditions : int
    {
        WasAimedShot = 0,
        WasNormalShot = 1,
        EBoltActionWeaponConditions_MAX = 2,
    }
    public enum EDirectDamageConditionEnum : int
    {
        Direct = 0,
        Radial = 1,
        EDirectDamageConditionEnum_MAX = 2,
    }
    public enum EImpulseDirectionSource : int
    {
        SourceForward = 0,
        SourceToTarget = 1,
        PlayerToTarget = 2,
        TargetUp = 3,
        TargetRandomOnPlane = 4,
        EImpulseDirectionSource_MAX = 5,
    }
    public enum EDamageUpgrade : int
    {
        Damage = 0,
        WeakpointDamageMultiplier = 1,
        StaggerChance = 2,
        StaggerDuration = 3,
        RadialDamage = 4,
        RadialRange = 5,
        ArmorDamageMultiplier = 6,
        FearFactor = 7,
        RadialRangeMultiplier = 8,
        StaggerOnWeakpointOnly = 9,
        FriendlyFireModifier = 10,
        ShattersArmor = 11,
        ArmorPenetration = 12,
        EDamageUpgrade_MAX = 13,
    }
    public enum EDamageComponentType : int
    {
        Primary = 0,
        Secondary = 1,
        Tertiary = 2,
        Quaternary = 3,
        Quinary = 4,
        Any = 5,
        EDamageComponentType_MAX = 6,
    }
    public enum EDashPointsGenerationMode : int
    {
        Surround = 0,
        Forward = 1,
        EDashPointsGenerationMode_MAX = 2,
    }
    public enum EDeathType : int
    {
        Alive = 0,
        Normal = 1,
        Weakpoint = 2,
        Burned = 3,
        Frozen = 4,
        Exploded = 5,
        SpawnEnemies = 6,
        Gibbed = 7,
        Corrosive = 8,
        Cook = 9,
        ChemicalExplosion = 10,
        PlasmaExplosion = 11,
        EDeathType_MAX = 12,
    }
    public enum EDebrisOrientation : int
    {
        Random = 0,
        RandomXY = 1,
        AlignToSurfaceNormal = 2,
        Fixed = 3,
        EDebrisOrientation_MAX = 4,
    }
    public enum ESpecialDebrisType : int
    {
        None = 0,
        Plague = 1,
        LitPlague = 2,
        ESpecialDebrisType_MAX = 3,
    }
    public enum EDebrisMeshShadows : int
    {
        Never = 0,
        High = 1,
        Always = 2,
        EDebrisMeshShadows_MAX = 3,
    }
    public enum EDebrisMeshCollisionProfile : int
    {
        NoCollision = 0,
        HitOnly = 1,
        HitAndCollide = 2,
        EDebrisMeshCollisionProfile_MAX = 3,
    }
    public enum EDebrisColliderType : int
    {
        Object = 0,
        AirParticles = 1,
        ObjectB = 2,
        ObjectC = 3,
        EDebrisColliderType_MAX = 4,
    }
    public enum EDebrisCarvedType : int
    {
        Large = 0,
        Small = 1,
        LevelGeneration = 2,
        Resources = 3,
        EDebrisCarvedType_MAX = 4,
    }
    public enum EDebrisItemPass : int
    {
        PrePlacement = 0,
        Plague = 1,
        Main = 2,
        EDebrisItemPass_MAX = 3,
    }
    public enum EDecalImportance : int
    {
        High = 0,
        Normal = 1,
        Low = 2,
        EDecalImportance_MAX = 3,
    }
    public enum ELandscapeCellFilter : int
    {
        Any = 0,
        Empty = 1,
        Filled = 2,
        Diggable = 3,
        NotDiggable = 4,
        Collidable = 5,
        NotCollidable = 6,
        Rubble = 7,
        NotRubble = 8,
        ELandscapeCellFilter_MAX = 9,
    }
    public enum EOffsetFrom : int
    {
        None = 0,
        Floor = 1,
        Ceiling = 2,
        EOffsetFrom_MAX = 3,
    }
    public enum EDeepMovementMode : int
    {
        Normal = 0,
        Flee = 1,
        Fly = 2,
        BackOff = 3,
        EDeepMovementMode_MAX = 4,
    }
    public enum EDeepScanState : int
    {
        FindItems = 0,
        WaitForElevator = 1,
        StartElevator = 2,
        RideElevator = 3,
        GatherResources = 4,
        ReturnToPod = 5,
        EDeepScanState_MAX = 6,
    }
    public enum EDefendPointState : int
    {
        Idle = 0,
        Started = 1,
        Completed = 2,
        Failed = 3,
        EDefendPointState_MAX = 4,
    }
    public enum EDialogRestriction : int
    {
        None = 0,
        SinglePlayerOnly = 1,
        MultiPlayerOnly = 2,
        EDialogRestriction_MAX = 3,
    }
    public enum EVeteranScaling : int
    {
        NormalEnemy = 0,
        LargeEnemy = 1,
        EVeteranScaling_MAX = 2,
    }
    public enum EEnemySignificance : int
    {
        Swarmer = 0,
        Normal = 1,
        Critical = 2,
        Critter = 3,
        EEnemySignificance_MAX = 4,
    }
    public enum EDiscordBiomeType : int
    {
        CrystallineCaverns = 0,
        FungusBogs = 1,
        GlacialStrata = 2,
        DenseBiozone = 3,
        MagmaCore = 4,
        Radioactive = 5,
        SaltPits = 6,
        Sandblasted = 7,
        CausticMire = 8,
        AzureWeald = 9,
        HollowBough = 10,
        Spacerig = 11,
        EDiscordBiomeType_MAX = 12,
    }
    public enum EDiscordMissionType : int
    {
        MiningExpedition = 0,
        EggHunt = 1,
        Escort = 2,
        Elimination = 3,
        PointExtraction = 4,
        Salvage = 5,
        Refinery = 6,
        Sabotage = 7,
        Deepscan = 8,
        Prophunt = 9,
        None = 10,
        EDiscordMissionType_MAX = 11,
    }
    public enum EDoubleDrillState : int
    {
        Equipping = 0,
        Idle = 1,
        Mining = 2,
        Overheated = 3,
        OutOfFuel = 4,
        EDoubleDrillState_MAX = 5,
    }
    public enum EDrillevatorEngineState : int
    {
        Off = 0,
        On = 1,
        Running = 2,
        Idle = 3,
        Halted = 4,
        FreeFalling = 5,
        RunningNoDrain = 6,
        EDrillevatorEngineState_MAX = 7,
    }
    public enum EDrillevatorState : int
    {
        Deactivated = 0,
        Startup = 1,
        HardRockDrilling = 2,
        BrokenDown = 3,
        Finished = 4,
        CrackingGeode = 5,
        EnteringGeode = 6,
        FreeFalling = 7,
        EDrillevatorState_MAX = 8,
    }
    public enum EBoscoAbillityTargetPreference : int
    {
        Self = 0,
        SelectedTarget = 1,
        ClosestPlayer = 2,
        ClosestEnemy = 3,
        TargetLocation = 4,
        EBoscoAbillityTargetPreference_MAX = 5,
    }
    public enum EDroneActions : int
    {
        Wandering = 0,
        Mining = 1,
        Fighting = 2,
        Lighting = 3,
        Reviving = 4,
        EDroneActions_MAX = 5,
    }
    public enum EDynamicReverbSetting : int
    {
        None = 0,
        Small = 1,
        Medium = 2,
        Large = 3,
        EDynamicReverbSetting_MAX = 4,
    }
    public enum EElectroBeamState : int
    {
        NotStarted = 0,
        Recalculating = 1,
        Stopped = 2,
        EElectroBeamState_MAX = 3,
    }
    public enum EEnemyControlState : int
    {
        Connecting = 0,
        Connected = 1,
        ThrowingOff = 2,
        Disconnecting = 3,
        Disconneced = 4,
        EEnemyControlState_MAX = 5,
    }
    public enum EEnemyDescriptorCheatClass : int
    {
        Hidden = 0,
        Basic = 1,
        Advanced = 2,
        Mactera = 3,
        Specials = 4,
        Boss = 5,
        EEnemyDescriptorCheatClass_MAX = 6,
    }
    public enum EEnemyType : int
    {
        Ground = 0,
        Flying = 1,
        GroundAndFlying = 2,
        Stationary = 3,
        EEnemyType_MAX = 4,
    }
    public enum EEnemyFamily : int
    {
        Glyphid = 0,
        Mactera = 1,
        Naedocyte = 2,
        Qronar = 3,
        Xynarch = 4,
        Nayaka = 5,
        Deeptora = 6,
        Korlok = 7,
        Automaton = 8,
        Unknown = 9,
        RivalTech = 10,
        Lithophage = 11,
        Infector = 12,
        CoreSpawn = 13,
        EEnemyFamily_MAX = 14,
    }
    public enum EOmmoranStage : int
    {
        StartEnemyWave = 0,
        BigEnemyWave = 1,
        FlyingRocks = 2,
        LazerClaws = 3,
        CrystalTraps = 4,
        EOmmoranStage_MAX = 5,
    }
    public enum EEscortExtractorState : int
    {
        ReadyToGrab = 0,
        Taken = 1,
        Full = 2,
        EEscortExtractorState_MAX = 3,
    }
    public enum EEscortMissionState : int
    {
        Stationary = 0,
        Moving = 1,
        WaitingForFuel = 2,
        FinalEvent = 3,
        Finished = 4,
        ShellCracked = 5,
        VehicleDead = 6,
        InGarage = 7,
        EEscortMissionState_MAX = 8,
    }
    public enum EExtractorState : int
    {
        Attached = 0,
        OnGround = 1,
        Equipping = 2,
        Idle = 3,
        Mining = 4,
        EExtractorState_MAX = 5,
    }
    public enum EFacilityTentacleState : int
    {
        Idle = 0,
        HasTarget = 1,
        Melee = 2,
        Ranged = 3,
        EFacilityTentacleState_MAX = 4,
    }
    public enum EIndicatorMode : int
    {
        EConstant = 0,
        EFlashing = 1,
        EOff = 2,
        EIndicatorMode_MAX = 3,
    }
    public enum EFSDAchievementType : int
    {
        NoStatUsed = 0,
        IncrementStatPerCall = 1,
        SetStatIfHighscore = 2,
        ForceNewStatEachCall = 3,
        EFSDAchievementType_MAX = 4,
    }
    public enum ETargetStateDamageBonusType : int
    {
        Frozen = 0,
        OnFire = 1,
        Fleeing = 2,
        Staggered = 3,
        ETargetStateDamageBonusType_MAX = 4,
    }
    public enum EPauseReason : int
    {
        Invalid = 0,
        MenuActive = 1,
        ReconnectController = 2,
        EPauseReason_MAX = 3,
    }
    public enum ESaveSlotChangeProcedure : int
    {
        NewSave = 0,
        Load = 1,
        Save = 2,
        NewModdedSave = 3,
        ESaveSlotChangeProcedure_MAX = 4,
    }
    public enum ENVidiaReflexMode : int
    {
        Disabled = 0,
        Enabled = 1,
        EnabledWithBoost = 2,
        ENVidiaReflexMode_MAX = 3,
    }
    public enum EVolumeType : int
    {
        CharacterVoices = 0,
        Master = 1,
        SFX = 2,
        Music = 3,
        VoiceChat = 4,
        MissionControl = 5,
        EVolumeType_MAX = 6,
    }
    public enum EInviteBlockReason : int
    {
        SoloSession = 0,
        ActiveDeepDive = 1,
        Tutorial = 2,
        OnlinePlayBlocked = 3,
        IsClient = 4,
        None = 5,
        EInviteBlockReason_MAX = 6,
    }
    public enum EPostProcessingType : int
    {
        GameWorld = 0,
        CharacterSelector = 1,
        EPostProcessingType_MAX = 2,
    }
    public enum EItemNotificationType : int
    {
        NewOverclock = 0,
        EItemNotificationType_MAX = 1,
    }
    public enum ESteamBranch : int
    {
        Main = 0,
        Experimental = 1,
        Internal_Testing = 2,
        Other = 3,
        ESteamBranch_MAX = 4,
    }
    public enum EFSDTargetPlatform : int
    {
        Steam = 0,
        XboxOne = 1,
        Win10 = 2,
        PS4 = 3,
        PS5 = 4,
        EFSDTargetPlatform_MAX = 5,
    }
    public enum EMoveType : int
    {
        EaseIn = 0,
        EaseOut = 1,
        EMoveType_MAX = 2,
    }
    public enum EPingType : int
    {
        EaseOut = 0,
        Bounce = 1,
        EPingType_MAX = 2,
    }
    public enum EFSDGoogleAnalyticsProperties : int
    {
        DRG = 0,
        Discord = 1,
        CommunityGoals = 2,
        DRG_Discord = 3,
        All = 4,
        Other = 5,
        EFSDGoogleAnalyticsProperties_MAX = 6,
    }
    public enum EGrabberState : int
    {
        StandBy = 0,
        Chase = 1,
        Carry = 2,
        Flee = 3,
        EGrabberState_MAX = 4,
    }
    public enum EGrabbedStateCameraMode : int
    {
        FirstPerson = 0,
        ThirdPerson = 1,
        EGrabbedStateCameraMode_MAX = 2,
    }
    public enum EGuntowerModuleState : int
    {
        EDormant = 0,
        EActive = 1,
        EVulnerable = 2,
        EDestoyed = 3,
        EGuntowerModuleState_MAX = 4,
    }
    public enum ERicochetBehavior : int
    {
        All = 0,
        PawnsOnly = 1,
        NotPawns = 2,
        ERicochetBehavior_MAX = 3,
    }
    public enum EGeneratorIconType : int
    {
        Vanity = 0,
        PickaxePart = 1,
        PickaxeSet = 2,
        WeaponSkin = 3,
        EGeneratorIconType_MAX = 4,
    }
    public enum EKeyBindingSlot : int
    {
        Primary = 0,
        Secondary = 1,
        EKeyBindingSlot_MAX = 2,
    }
    public enum EInputInteraction : int
    {
        Press = 0,
        Hold = 1,
        EInputInteraction_MAX = 2,
    }
    public enum EWeaponMaintenanceState : int
    {
        Locked = 0,
        Maintaining = 1,
        LevelUp = 2,
        Finished = 3,
        EWeaponMaintenanceState_MAX = 4,
    }
    public enum EMicrowaveGunUpgrade : int
    {
        ESlowOnHit = 0,
        EFocusLense = 1,
        EWideLense = 2,
        ESpreadFire = 3,
        ESpreadNeuro = 4,
        EKilledTargetsExplodeChance = 5,
        ERadiantSuperheater = 6,
        EHeatsink = 7,
        BlisteringNecrosis = 8,
        EGammaContaminationZone = 9,
        ETemperatureAmplifier = 10,
        EMicrowaveGunUpgrade_MAX = 11,
    }
    public enum ECapsuleHitscanUpgradeType : int
    {
        ShotWidth = 0,
        PenetrateEnemies = 1,
        ECapsuleHitscanUpgradeType_MAX = 2,
    }
    public enum EHeavyParticleCannonUpgrade : int
    {
        ReloadOnButtonRelease = 0,
        BoosterModule = 1,
        KillAddsAmmo = 2,
        RadialDamageIncPerSecond = 3,
        RadialRangeIncPerSecond = 4,
        BulkyBeam = 5,
        ProjectionModule = 6,
        PlatformExplosions = 7,
        EHeavyParticleCannonUpgrade_MAX = 8,
    }
    public enum ECrossbowUpgrades : int
    {
        SpecialArrowPheramone = 0,
        SpecialArrowTaser = 1,
        SpecialArrowChemical = 2,
        BansheeModule = 3,
        Magnetic = 4,
        RadioModule = 5,
        Ricochet = 6,
        VelocityChange = 7,
        DamageDefault = 8,
        RadialDamageDefault = 9,
        Trifork = 10,
        Pentafork = 11,
        BattleFrenzy = 12,
        IncreaseSpecialAmmo = 13,
        IncreaseSpecialAmmoPercent = 14,
        SuperFast = 15,
        IncreaseSpecialEffectDuration = 16,
        FasterSwitch = 17,
        CryoArrow = 18,
        FireArrow = 19,
        ReloadTimeDefaultArrow = 20,
        RateOfFireDefaultArrow = 21,
        ECrossbowUpgrades_MAX = 22,
    }
    public enum EPlasmaCarbineUpgrades : int
    {
        RateOfFireBoostOnFullShield = 0,
        RemoveShieldOnOverheat = 1,
        RemoveShieldOnReload = 2,
        EPlasmaCarbineUpgrades_MAX = 3,
    }
    public enum ELockOnWeaponUpgrades : int
    {
        MaxLockOnDegree = 0,
        TimeBetweenLockedShots = 1,
        LockOnTime = 2,
        MaxTargets = 3,
        LoseLockOnDegree = 4,
        MaxLockOnRange = 5,
        PrioritizeLowHitpoint = 6,
        AlwaysHitTarget = 7,
        MaxLockOnDuration = 8,
        LockOnControlsSentryGun = 9,
        AoeHitCountThreshhold = 10,
        SentryGunShootsOnLockedShot = 11,
        UseLockOnTargetStatusEffect = 12,
        FearEnabled = 13,
        RateOfFireLockedOnModifier = 14,
        ELockOnWeaponUpgrades_MAX = 15,
    }
    public enum EGooGunProjectileUpgrades : int
    {
        PuddleLifeSpan = 0,
        FragmentCount = 1,
        EGooGunProjectileUpgrades_MAX = 2,
    }
    public enum EGooGunUpgrades : int
    {
        ChargeFire = 0,
        BurstFire = 1,
        ShotCostCharged = 2,
        ChargeTime = 3,
        ChargeShotCount = 4,
        EGooGunUpgrades_MAX = 5,
    }
    public enum EMicroMissileLauncherUpgrades : int
    {
        ChargeFire = 0,
        BuckFire = 1,
        DisableHomingOnRelease = 2,
        ShotDirectionHorizontalDegreeOffset = 3,
        ShotDirectionVerticleDegreeOffset = 4,
        EMicroMissileLauncherUpgrades_MAX = 5,
    }
    public enum EProjectileLauncherBaseUpgradeType : int
    {
        VerticalSpread = 0,
        HorizontalSpread = 1,
        TransferVelocityFromCharacter = 2,
        ArcStartAngle = 3,
        EProjectileLauncherBaseUpgradeType_MAX = 4,
    }
    public enum EDetPackUpgrades : int
    {
        CanPickUp = 0,
        CarveDiameter = 1,
        ExplodeOnDeath = 2,
        ExtraFearRadius = 3,
        ExtraStaggerRadius = 4,
        EDetPackUpgrades_MAX = 5,
    }
    public enum EPlatformGunUpgrades : int
    {
        BiggerPlatform = 0,
        LessFallDamage = 1,
        BugRepellant = 2,
        CubePlatform = 3,
        EPlatformGunUpgrades_MAX = 4,
    }
    public enum EBoscoUpgrades : int
    {
        MiningSpeedUpgrade = 0,
        ExtraRevive = 1,
        ActiveLightRadius = 2,
        Missile = 3,
        CryoGrenade = 4,
        SACooldownReduction = 5,
        ExtraAbillityCharge = 6,
        EBoscoUpgrades_MAX = 7,
    }
    public enum EArmorUpgradeType : int
    {
        RegenDelay = 0,
        RegenRate = 1,
        ReviveInvulnerability = 2,
        EArmorUpgradeType_MAX = 3,
    }
    public enum ETriggeredStatusEffectType : int
    {
        ShieldDestroyed = 0,
        GrapplingHookReleased = 1,
        NONE = 2,
        ETriggeredStatusEffectType_MAX = 3,
    }
    public enum EShieldGeneratorUpgrades : int
    {
        Radius = 0,
        Duration = 1,
        DeployTime = 2,
        RechargeTime = 3,
        RechargeCount = 4,
        PushStatusEffect = 5,
        EShieldGeneratorUpgrades_MAX = 6,
    }
    public enum ESentryGunUpgradeType : int
    {
        MaxAmmo = 0,
        ReloadSpeed = 1,
        ExtraSentry = 2,
        AngleRestriction = 3,
        ManualTargeting = 4,
        MaxRange = 5,
        RotationSpeed = 6,
        BurstCooldown = 7,
        ESentryGunUpgradeType_MAX = 8,
    }
    public enum EGrapplingHookUpgrade : int
    {
        MaxDistance = 0,
        MaxSpeed = 1,
        WindUpTime = 2,
        EGrapplingHookUpgrade_MAX = 3,
    }
    public enum EZiplineGunUpgrades : int
    {
        MaxAngle = 0,
        MaxDistance = 1,
        MovementSpeed = 2,
        FallDamageReduction = 3,
        EZiplineGunUpgrades_MAX = 4,
    }
    public enum EElectricalSMGUpgrades : int
    {
        AoEChance = 0,
        PlasmaBeam = 1,
        TurretEMPDischarge = 2,
        ElectrifyPlatforms = 3,
        EElectricalSMGUpgrades_MAX = 4,
    }
    public enum EChargedProjectileUpgrades : int
    {
        ExplodesOnDamage = 0,
        AoEDamageInFlight = 1,
        PersistentExplosion = 2,
        EChargedProjectileUpgrades_MAX = 3,
    }
    public enum EFlaregunProjectileUpgrades : int
    {
        Duration = 0,
        EFlaregunProjectileUpgrades_MAX = 1,
    }
    public enum EFlaregunUpgrades : int
    {
        AutoReload = 0,
        EFlaregunUpgrades_MAX = 1,
    }
    public enum EProjectileUpgrade : int
    {
        Velocity = 0,
        MaxVelocity = 1,
        Bouncy = 2,
        Lifetime = 3,
        DoOnImpact = 4,
        DoOnImpact2 = 5,
        DoOnImpact3 = 6,
        DoOnSpawn = 7,
        HomingStrength = 8,
        SetInitialSpeedToMaxSpeed = 9,
        AccelerationMultiplier = 10,
        MaxPropulsionTime = 11,
        GravityScale = 12,
        CustomEvent = 13,
        EProjectileUpgrade_MAX = 14,
    }
    public enum ELineCutterProjectileUpgradeType : int
    {
        LineSize = 0,
        LineSizeMultiplier = 1,
        ExplosiveRound = 2,
        SetDeployDelay = 3,
        AddDeployTime = 4,
        ExplodeOnNextProjectile = 5,
        DoubleLine = 6,
        LineSizeAdd = 7,
        SetDeployTime = 8,
        RollUntilStop = 9,
        Yawing = 10,
        PlasmaTrail = 11,
        Homing = 12,
        ELineCutterProjectileUpgradeType_MAX = 13,
    }
    public enum ELineCutterUpgradeType : int
    {
        ReverseDirection = 0,
        ExplodeLastProjectile = 1,
        ELineCutterUpgradeType_MAX = 2,
    }
    public enum EGrenadeUpgradeType : int
    {
        MaxGrenades = 0,
        FuseTime = 1,
        EGrenadeUpgradeType_MAX = 2,
    }
    public enum EFlareUpgradeType : int
    {
        Duration = 0,
        MaxFlares = 1,
        ProductionTime = 2,
        EFlareUpgradeType_MAX = 3,
    }
    public enum ESingleUsableUpgradeType : int
    {
        UseDuration = 0,
        ESingleUsableUpgradeType_MAX = 1,
    }
    public enum EModifyStatusEffectDamageUpgrade : int
    {
        Duration = 0,
        EModifyStatusEffectDamageUpgrade_MAX = 1,
    }
    public enum EHitScanBaseUpgradeType : int
    {
        MaxVerticalSpread = 0,
        MaxHorizontalSpread = 1,
        MaxPenetrations = 2,
        WeaponAccuracySpreadMultiplier = 3,
        SpreadPerShot = 4,
        MinSpreadWhileMoving = 5,
        SpreadRecoveryMultiplier = 6,
        MinSpreadWhileSprinting = 7,
        MaxSpread = 8,
        RicochetChance = 9,
        RicochetOnWeakspotOnly = 10,
        RicochetBehaviourAll = 11,
        RicochetBehaviourPawnsOnly = 12,
        RicochetBehaviourNotPawns = 13,
        EHitScanBaseUpgradeType_MAX = 14,
    }
    public enum EReflectionHitscanUpgradeType : int
    {
        ReflectionCount = 0,
        EReflectionHitscanUpgradeType_MAX = 1,
    }
    public enum EMultiHitscanUpgradeType : int
    {
        BulletsPerShot = 0,
        EMultiHitscanUpgradeType_MAX = 1,
    }
    public enum EInventoryItemUpgradeType : int
    {
        MovementSpeedWhileUsing = 0,
        CooldownRate = 1,
        UnJamDuration = 2,
        ManualCooldownDelay = 3,
        ManualHeatPerUse = 4,
        EInventoryItemUpgradeType_MAX = 5,
    }
    public enum EDoubleDrillUpgradeType : int
    {
        MiningRate = 0,
        MaxFuel = 1,
        HeatRemovalOnKill = 2,
        HeatRemovalOnDamage = 3,
        MovementPenalty = 4,
        EDoubleDrillUpgradeType_MAX = 5,
    }
    public enum EFlameThrowerUpgradeType : int
    {
        StickyFlameDuration = 0,
        LongReach = 1,
        AoEHeat = 2,
        KilledTargetsExplodeChance = 3,
        EFlameThrowerUpgradeType_MAX = 4,
    }
    public enum EPickaxeUpgradeType : int
    {
        RockMining = 0,
        OneHitMineralMining = 1,
        ReceiveBonusMineralNitra = 2,
        ReceiveBonusMineralGold = 3,
        EnablePowerAttack = 4,
        PowerAttackCoolDown = 5,
        EPickaxeUpgradeType_MAX = 6,
    }
    public enum ECryoSprayUpgrades : int
    {
        PressureDropMultiplier = 0,
        PressureGainMultiplier = 1,
        ChargeupTime = 2,
        RePressurisationTime = 3,
        FrozenTargetsCanShatter = 4,
        AoECold = 5,
        LongReach = 6,
        SprayWidth = 7,
        ECryoSprayUpgrades_MAX = 8,
    }
    public enum ERevolerUpgrades : int
    {
        OnKillFearFactor = 0,
        ERevolerUpgrades_MAX = 1,
    }
    public enum EBasicPistol : int
    {
        ConsecutiveHitsDamageBonus = 0,
        EBasicPistol_MAX = 1,
    }
    public enum EAutoShotgunUpgrades : int
    {
        TurretSpecialAttackEnabled = 0,
        RateOfFireAndAutoMatic = 1,
        CQCBuffOnKill = 2,
        EAutoShotgunUpgrades_MAX = 3,
    }
    public enum EBurstWeaponUpgrades : int
    {
        FullBurstHitBonusDamage = 0,
        FullBurstStaggerDuraion = 1,
        EBurstWeaponUpgrades_MAX = 2,
    }
    public enum ESawedOffShotgunUpgrades : int
    {
        FearOnShoot = 0,
        ShockWave = 2,
        ShotgunJump = 3,
        ESawedOffShotgunUpgrades_MAX = 4,
    }
    public enum EAutoCannonUpgrades : int
    {
        FireTimeIncreaseScaleMultiplier = 0,
        DamageBonusAtFullROF = 1,
        StatusEffectAtFullROF = 2,
        StartingFireRate = 3,
        MaxFireRate = 4,
        EAutoCannonUpgrades_MAX = 5,
    }
    public enum ECoilgunUpgrades : int
    {
        EResistanceWhileCharging = 0,
        ETransferAilment = 1,
        EFlamekills = 2,
        EOvercharge = 3,
        EUnderCharge = 4,
        EWeaponBlast = 5,
        EShotwaveRange = 6,
        EImpactFearFactor = 7,
        EDamageOnShotWave = 8,
        EImpactFearRadius = 9,
        EEffectTrailDuration = 10,
        EEffectTrailBonusRadius = 11,
        EBrokenShieldBonus = 12,
        EPostChargeBurst = 13,
        EOwnerShieldCapacity = 14,
        EBlockShieldWhileCharing = 15,
        EWeaknessWhileCharging = 16,
        EPierceDepthDamage = 17,
        EBurnGround = 18,
        EElectricTrail = 19,
        EFireTrail = 20,
        EPenetrationDepth = 21,
        EPrimaryBonusShotWidth = 22,
        EShieldDelay = 23,
        ECoilgunUpgrades_MAX = 24,
    }
    public enum EChargedWeaponUpgrades : int
    {
        ShotCostAtFullCharge = 0,
        ChargeSpeed = 1,
        CoolingRate = 2,
        HeatPerSecondCharging = 3,
        HeatPerSecondCharged = 4,
        HeatPerChargedShot = 5,
        HeatPerNormalShot = 6,
        EChargedWeaponUpgrades_MAX = 7,
    }
    public enum EDualMachinePistolsUpgrades : int
    {
        TriggerStatusEffectOnEmptyClip = 0,
        EDualMachinePistolsUpgrades_MAX = 1,
    }
    public enum EBoltActionRifleUpgrades : int
    {
        FocusSpeed = 0,
        AimedShotStagger = 1,
        AimedWeakShotKillFearFactor = 2,
        FocusDamageBonus = 3,
        UnZoomedAccuracySpread = 4,
        FocusedWeakspotHitStatusEffect = 5,
        NoGravityOnFocus = 6,
        KillReloadTimeBoost = 7,
        AimedShotWeakpointDamageBonusMultiplier = 8,
        AimedShotAmmoCost = 9,
        RateOfFireHipFireModifier = 10,
        ChargeSpeedModifier = 11,
        EBoltActionRifleUpgrades_MAX = 12,
    }
    public enum EAssaultRifleUpgrade : int
    {
        KillResetsSpread = 0,
        KillTriggerStatusEffect = 1,
        EAssaultRifleUpgrade_MAX = 2,
    }
    public enum EGatlingGunUpgrade : int
    {
        DamageMultiplierAtMaxStabilization = 0,
        HeatRemovedOnKill = 1,
        CriticalOverheat = 2,
        BarrelProximityDamage = 3,
        EGatlingGunUpgrade_MAX = 4,
    }
    public enum EBeltDrivenWeaponUpgrade : int
    {
        BarrelSpinupTime = 0,
        BarrelSpinDownTime = 1,
        EBeltDrivenWeaponUpgrade_MAX = 2,
    }
    public enum EAmmoDrivenWeapnUpgradeType : int
    {
        MaxAmmo = 0,
        ClipSize = 1,
        RateOfFire = 2,
        ReloadSpeed = 3,
        RecoilMultiplier = 4,
        RecoilMultiplierV = 5,
        RecoilMultiplierH = 6,
        BurstCount = 7,
        BurstRateOfFire = 8,
        ActivateBurstFireMode = 9,
        ActivateAutomaticFireMode = 10,
        HeatUpRateModifier = 11,
        AutoReloadDuration = 12,
        RecoilMass = 13,
        OverheatOnReload = 14,
        ShotCost = 15,
        CustomEvent1 = 16,
        HeatReductionOnReload = 17,
        EAmmoDrivenWeapnUpgradeType_MAX = 18,
    }
    public enum ELaserPointerMarkerType : int
    {
        Primary = 0,
        Secondary = 1,
        Count = 2,
        ELaserPointerMarkerType_MAX = 3,
    }
    public enum EStrobingMode : int
    {
        Intensity = 0,
        AttenuationRadius = 1,
        EStrobingMode_MAX = 2,
    }
    public enum EStrobeMaterialMode : int
    {
        Material = 0,
        Mesh = 1,
        EStrobeMaterialMode_MAX = 2,
    }
    public enum EArmorType : int
    {
        Light = 0,
        Heavy = 1,
        Unbreakable = 2,
        EArmorType_MAX = 3,
    }
    public enum EDamageType : int
    {
        Fire = 0,
        Cold = 1,
        Melee = 2,
        Kinetic = 3,
        Explosive = 4,
        Stun = 5,
        Electrocution = 6,
        Fear = 7,
        Radiation = 8,
        Pheromone = 9,
        Poison = 10,
        ArmorBreaking = 11,
        Push = 12,
        Grab = 13,
        None = 14,
        Slow = 15,
        Defense = 16,
        TemperatureShock = 17,
        Corrosive = 18,
        Piercing = 19,
        RockPox = 20,
        EDamageType_MAX = 21,
    }
    public enum EEnemyAttackType : int
    {
        Melee = 0,
        Ranged = 1,
        Grab = 2,
        Area = 3,
        Move = 4,
        EEnemyAttackType_MAX = 5,
    }
    public enum EMissionStructure : int
    {
        SingleMission = 0,
        DeepDive_Normal = 1,
        DeepDive_Elite = 2,
        EMissionStructure_MAX = 3,
    }
    public enum ENisseState : int
    {
        Idle = 0,
        Walking = 1,
        Running = 2,
        Frozen = 3,
        ENisseState_MAX = 4,
    }
    public enum EPatrolBotControlState : int
    {
        Hostile = 0,
        Disabled = 1,
        Hacked = 2,
        EPatrolBotControlState_MAX = 3,
    }
    public enum EPatrolBotState : int
    {
        Rolling = 0,
        Flying = 1,
        Disabled = 2,
        EPatrolBotState_MAX = 3,
    }
    public enum EPawnStatType : int
    {
        Multiplicative = 0,
        Additive = 1,
        EPawnStatType_MAX = 2,
    }
    public enum EPerkSlotType : int
    {
        Available = 0,
        LockedByPerk = 1,
        LockedByPromotion = 2,
        EPerkSlotType_MAX = 3,
    }
    public enum EPerkUsageType : int
    {
        Passive = 0,
        Active = 1,
        EPerkUsageType_MAX = 2,
    }
    public enum EPerkHUDActivationLocation : int
    {
        Main = 0,
        Down = 1,
        EPerkHUDActivationLocation_MAX = 2,
    }
    public enum EPerkTierState : int
    {
        Claimable = 0,
        Claimed = 1,
        Locked = 2,
        Unaffordable = 3,
        NotAvailable = 4,
        EPerkTierState_MAX = 5,
    }
    public enum EPickaxeState : int
    {
        Equipping = 0,
        Mining = 1,
        PowerAttack = 2,
        End = 3,
        EPickaxeState_MAX = 4,
    }
    public enum EPickaxePartLocation : int
    {
        Head = 0,
        FrontBlade = 1,
        BackBlade = 2,
        Shaft = 3,
        Handle = 4,
        Pommel = 5,
        Material = 6,
        Count = 7,
        EPickaxePartLocation_MAX = 8,
    }
    public enum EPickaxePart : int
    {
        Head = 0,
        Blade = 1,
        Shaft = 2,
        Handle = 3,
        Pommel = 4,
        Material = 5,
        EPickaxePart_MAX = 6,
    }
    public enum EPipelineExtractorPodAnimState : int
    {
        Folded = 0,
        Idle = 1,
        Running = 2,
        Broken = 3,
        EPipelineExtractorPodAnimState_MAX = 4,
    }
    public enum EPlaceableObstructionType : int
    {
        Valid = 0,
        GroundTooSteep = 1,
        TooShort = 2,
        TooLong = 3,
        TurnTooSharp = 4,
        Blocked = 5,
        NotEnoughRoom = 6,
        TooSteep = 7,
        TooClose = 8,
        Other = 9,
        EPlaceableObstructionType_MAX = 10,
    }
    public enum ECharacterMoveDirection : int
    {
        None = 0,
        Forward = 1,
        Left = 2,
        Right = 3,
        Back = 4,
        ECharacterMoveDirection_MAX = 5,
    }
    public enum EGameOwnerStatus : int
    {
        Supporter = 0,
        ContentCreator = 1,
        Developer = 2,
        Modder = 3,
        EGameOwnerStatus_Max = 255,
    }
    public enum EMovementCustomMode : int
    {
        MOVE_Custom_None = 0,
        MOVE_Custom_Track = 1,
        MOVE_Custom_CharacterStateControlled = 2,
        MOVE_Custom_TraversalTool = 3,
        MOVE_Custom_JetBoots = 4,
        MOVE_Custom_MAX = 5,
    }
    public enum ERoomMirror : int
    {
        None = 0,
        MirrorX = 1,
        MirrorY = 2,
        ERoomMirror_MAX = 3,
    }
    public enum ERoomMirroringSupport : int
    {
        NotAllowed = 0,
        MirrorAroundX = 1,
        MirrorAroundY = 2,
        MirrorBoth = 3,
        ERoomMirroringSupport_MAX = 4,
    }
    public enum EItemAdjustmentType : int
    {
        None = 0,
        Cieling = 1,
        Wall = 2,
        Floor = 3,
        EItemAdjustmentType_MAX = 4,
    }
    public enum ECaveEntrancePriority : int
    {
        Primary = 0,
        Secondary = 1,
        ECaveEntrancePriority_MAX = 2,
    }
    public enum ECaveEntranceType : int
    {
        EntranceAndExit = 0,
        Entrance = 1,
        Exit = 2,
        TreassureRoom = 3,
        ECaveEntranceType_MAX = 4,
    }
    public enum ESpawnSettings : int
    {
        Normal = 0,
        NoSpawning = 1,
        SpawnAll = 2,
        ESpawnSettings_MAX = 3,
    }
    public enum ECriticalItemPass : int
    {
        LargePass = 0,
        SmallPass = 1,
        ECriticalItemPass_MAX = 2,
    }
    public enum ETerrainPlacementBoxType : int
    {
        NoTerrain = 0,
        Terrain = 1,
        ETerrainPlacementBoxType_MAX = 2,
    }
    public enum EProjectileAttackRotationType : int
    {
        NoTarget_ActorForward = 0,
        NoTarget_Socket = 1,
        Always_Socket = 2,
        EProjectileAttackRotationType_MAX = 3,
    }
    public enum ECrossbowEffectApplication : int
    {
        ToDefault = 0,
        ToSpecial = 1,
        ToAll = 2,
        ECrossbowEffectApplication_MAX = 3,
    }
    public enum ECrossbowHit : int
    {
        InvalidHit = 0,
        OldHit = 1,
        NewHit = 2,
        ECrossbowHit_MAX = 3,
    }
    public enum EPropHuntEvent : int
    {
        HunterBegin = 0,
        HunterMiss = 1,
        HunterHit = 2,
        PropBegin = 3,
        PropEnd = 4,
        GameWon = 5,
        GameLost = 6,
        EPropHuntEvent_MAX = 7,
    }
    public enum EProspectorRobotState : int
    {
        Searching = 0,
        Scanning = 1,
        Sampling = 2,
        Fleeing = 3,
        EProspectorRobotState_MAX = 4,
    }
    public enum ERefineryExtractorPodState : int
    {
        Landing = 0,
        Idle = 1,
        Extracting = 2,
        Returning = 3,
        ERefineryExtractorPodState_MAX = 4,
    }
    public enum ERefinerySecondaryState : int
    {
        Started = 0,
        WellCalled = 1,
        PipeConnected = 2,
        PipeConstructed = 3,
        Extracting = 4,
        Complete = 5,
        ERefinerySecondaryState_MAX = 6,
    }
    public enum EResourceFilterType : int
    {
        EWhitelist = 0,
        EBlacklist = 1,
        EResourceFilterType_MAX = 2,
    }
    public enum ESchematicType : int
    {
        Overclock = 0,
        Vanity = 1,
        Resource = 2,
        Blank = 3,
        ESchematicType_MAX = 4,
    }
    public enum ESeasonMissionMapOverlayType : int
    {
        None = 0,
        Plague = 1,
        ESeasonMissionMapOverlayType_MAX = 2,
    }
    public enum ESeasonVisibilityState : int
    {
        Bought = 0,
        CanBuy = 1,
        Locked = 2,
        ESeasonVisibilityState_MAX = 3,
    }
    public enum EServerSortOrder : int
    {
        Mission = 0,
        Players = 1,
        Length = 2,
        Complexity = 3,
        Distance = 4,
        Time = 5,
        Difficulty = 6,
        EServerSortOrder_MAX = 7,
    }
    public enum EServerDistance : int
    {
        Close = 0,
        Medium = 1,
        Far = 2,
        World = 3,
        EServerDistance_MAX = 4,
    }
    public enum EFSDNATType : int
    {
        Open = 0,
        Moderate = 1,
        Strict = 2,
        Unknown = 3,
        EFSDNATType_MAX = 4,
    }
    public enum EFSDMissionStatus : int
    {
        SpaceRig = 0,
        InGame = 1,
        Starting = 2,
        EscapeSequence = 3,
        FinalBattle = 4,
        EFSDMissionStatus_MAX = 5,
    }
    public enum ESharkEnemyState : int
    {
        Idle = 0,
        Circling = 1,
        Attacking = 2,
        Vulnerable = 3,
        Dive = 4,
        ESharkEnemyState_MAX = 5,
    }
    public enum EShowroomScaling : int
    {
        NoScaling = 0,
        EnemySmall = 1,
        EnemyMedium = 2,
        EnemyBig = 3,
        EnemyHuge = 4,
        EShowroomScaling_MAX = 5,
    }
    public enum EPiplelineConnectorAnimationState : int
    {
        Unassembled = 0,
        Assembling = 1,
        Assembled = 2,
        EPiplelineConnectorAnimationState_MAX = 3,
    }
    public enum EMaggotAnimationState : int
    {
        Idle = 0,
        Moving = 1,
        EMaggotAnimationState_MAX = 2,
    }
    public enum ESpiderDeathAnimationCategory : int
    {
        NoAnimation = 0,
        Melt = 1,
        Cook = 2,
        Burn = 3,
        ESpiderDeathAnimationCategory_MAX = 4,
    }
    public enum EMoveDirection : int
    {
        None = 0,
        Forward = 1,
        Left = 2,
        Right = 3,
        Back = 4,
        EMoveDirection_MAX = 5,
    }
    public enum EMiningPodMission : int
    {
        DropAndReturn = 0,
        Extraction = 1,
        DropFromSpacerig = 2,
        EMiningPodMission_MAX = 3,
    }
    public enum EMiningPodRampState : int
    {
        Closed = 0,
        Opening = 1,
        Open = 2,
        Closing = 3,
        EMiningPodRampState_MAX = 4,
    }
    public enum EMiningPodState : int
    {
        Dropping = 0,
        Drilling = 1,
        Landed = 2,
        PrepTakeoff = 3,
        Departing = 4,
        WaitingForGameStart = 5,
        InSpace = 6,
        Destroy = 7,
        WaitOnSpacerig = 8,
        ExitSpacerig = 9,
        Damaged = 10,
        PoweringUp = 11,
        PoweredUp = 12,
        DeepDiveDeparture = 13,
        EMiningPodState_MAX = 14,
    }
    public enum ETemperatureIntensity : int
    {
        Cold3 = 0,
        Cold2 = 1,
        Cold1 = 2,
        Heat1 = 3,
        Heat2 = 4,
        Heat3 = 5,
        ETemperatureIntensity_MAX = 6,
    }
    public enum ETerminatorTentacleState : int
    {
        Idle = 0,
        Grabbing = 1,
        Grabbed = 2,
        Dead = 3,
        ETerminatorTentacleState_MAX = 4,
    }
    public enum ETerminatorShoutState : int
    {
        EIdle = 0,
        EGrabbing = 1,
        EDeath = 2,
        EAttacking = 3,
        ETerminatorShoutState_MAX = 4,
    }
    public enum EBulletMode : int
    {
        EMultiTrace = 0,
        ECapsule = 1,
        EBulletMode_MAX = 2,
    }
    public enum ETetherMessageDirection : int
    {
        Forward = 0,
        Backward = 1,
        Both = 2,
        ETetherMessageDirection_MAX = 3,
    }
    public enum ETetherConnectionMode : int
    {
        Both = 0,
        FrontOnly = 1,
        BackOnly = 2,
        None = 3,
        ETetherConnectionMode_MAX = 4,
    }
    public enum EThrowableInput : int
    {
        LeftButton = 0,
        RightButton = 1,
        EThrowableInput_MAX = 2,
    }
    public enum EExitTrackMode : int
    {
        None = 0,
        StopInPlace = 1,
        JumpInPlace = 2,
        JumpInCamDir = 3,
        JumpInTrackDir = 4,
        EExitTrackMode_MAX = 5,
    }
    public enum ETreasureType : int
    {
        WeaponSkin = 0,
        VictoryPose = 1,
        PickaxePart = 2,
        VanityItem = 3,
        ETreasureType_MAX = 4,
    }
    public enum ECleanedStatus : int
    {
        EInfected = 0,
        EVacuumed = 1,
        ECleanedStatus_MAX = 2,
    }
    public enum EHeadVanityType : int
    {
        HairOnly = 0,
        HeadGearOnly = 1,
        HeadGearOnly_UseArmorMaterial = 2,
        HairAndHeadGear = 3,
        HairAndHeadGear_UseArmorMaterial = 4,
        EHeadVanityType_MAX = 5,
    }
    public enum EArmorSetLegs : int
    {
        Invalid = 0,
        LeftUpperLeg = 1,
        LeftLowerLeg = 2,
        LeftFoot = 3,
        LeftToe = 4,
        RightUpperLeg = 5,
        RightLowerLeg = 6,
        RightFoot = 7,
        RightToe = 8,
        EArmorSetLegs_MAX = 9,
    }
    public enum EArmorSetTorso : int
    {
        Invalid = 0,
        UpperTorso = 1,
        MiddleTorso = 2,
        LowerTorso = 3,
        UpperBack = 4,
        MiddleBack = 5,
        LowerBack = 6,
        LeftHip = 7,
        RightHip = 8,
        FrontHip = 9,
        LeftUpperLeg = 10,
        LeftLowerLeg = 11,
        LeftFoot = 12,
        LeftToe = 13,
        RightUpperLeg = 14,
        RightLowerLeg = 15,
        RightFoot = 16,
        RightToe = 17,
        EArmorSetTorso_MAX = 18,
    }
    public enum EArmorSetArms : int
    {
        Invalid = 0,
        LeftShoulder = 1,
        RightShoulder = 2,
        LeftUpperArm = 3,
        LeftLowerArm1 = 4,
        LeftLowerArm2 = 5,
        LeftHand = 6,
        LeftHandAttach = 7,
        RightUpperArm = 8,
        RightLowerArm1 = 9,
        RightLowerArm2 = 10,
        RightHand = 11,
        RightHandAttach = 12,
        EArmorSetArms_MAX = 13,
    }
    public enum ECharacterHeadMesh : int
    {
        Full = 0,
        ThichNeckOnly = 1,
        ThinNeckOnly = 2,
        None = 3,
        FlatEars = 4,
        FaceOnly = 5,
        EyesOnly = 6,
        Masks = 7,
        ECharacterHeadMesh_MAX = 8,
    }
    public enum EArmorMeshType : int
    {
        None = 0,
        Default = 1,
        DefaultBeardCompatible = 2,
        Sleeveless = 4,
        SleevelessBeardCompatible = 8,
        EArmorMeshType_MAX = 9,
    }
    public enum EVanityAquisitionType : int
    {
        UnlockedFromStart = 0,
        Purchased = 1,
        Schematic = 2,
        Treasure = 3,
        EVanityAquisitionType_MAX = 4,
    }
    public enum EWeakpointGlowMode : int
    {
        Set = 0,
        Additive = 1,
        EWeakpointGlowMode_MAX = 2,
    }
    public enum EWoodLouseState : int
    {
        Unfolded = 0,
        Folded = 1,
        Size = 2,
        EWoodLouseState_MAX = 3,
    }
    public class GameActivitySubTask : Object
    {
        public GameActivitySubTask(nint addr) : base(addr) { }
        public Object SubActivityId { get { return this[nameof(SubActivityId)]; } set { this[nameof(SubActivityId)] = value; } }
    }
    public class OverlapPair : Object
    {
        public OverlapPair(nint addr) : base(addr) { }
        public PlayerCharacter Player { get { return this[nameof(Player)].As<PlayerCharacter>(); } set { this["Player"] = value; } }
        public Actor Overlap { get { return this[nameof(Overlap)].As<Actor>(); } set { this["Overlap"] = value; } }
    }
    public class ScalingMeshAfflictionItem : Object
    {
        public ScalingMeshAfflictionItem(nint addr) : base(addr) { }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public RandRange MeshScale { get { return this[nameof(MeshScale)].As<RandRange>(); } set { this["MeshScale"] = value; } }
        public EFrozenBitsSize FrozenBitsSize { get { return (EFrozenBitsSize)this[nameof(FrozenBitsSize)].GetValue<int>(); } set { this[nameof(FrozenBitsSize)].SetValue<int>((int)value); } }
        public float ChanceToSpawn { get { return this[nameof(ChanceToSpawn)].GetValue<float>(); } set { this[nameof(ChanceToSpawn)].SetValue<float>(value); } }
    }
    public class AttachMeshesAfflictionItem : Object
    {
        public AttachMeshesAfflictionItem(nint addr) : base(addr) { }
        public Vector Offset { get { return this[nameof(Offset)].As<Vector>(); } set { this["Offset"] = value; } }
        public SkeletalMesh SkeletalMesh { get { return this[nameof(SkeletalMesh)].As<SkeletalMesh>(); } set { this["SkeletalMesh"] = value; } }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public byte AttachType { get { return this[nameof(AttachType)].GetValue<byte>(); } set { this[nameof(AttachType)].SetValue<byte>(value); } }
        public bool LoopAnimation { get { return this[nameof(LoopAnimation)].Flag; } set { this[nameof(LoopAnimation)].Flag = value; } }
        public bool RandomRotaiton { get { return this[nameof(RandomRotaiton)].Flag; } set { this[nameof(RandomRotaiton)].Flag = value; } }
        public bool RandomScale { get { return this[nameof(RandomScale)].Flag; } set { this[nameof(RandomScale)].Flag = value; } }
        public bool CastShadows { get { return this[nameof(CastShadows)].Flag; } set { this[nameof(CastShadows)].Flag = value; } }
    }
    public class ScaledMeshAfflictionTypeItem : Object
    {
        public ScaledMeshAfflictionTypeItem(nint addr) : base(addr) { }
        public UArray<RuntimeFloatCurve> Scalers { get { return new UArray<RuntimeFloatCurve>(this[nameof(Scalers)].Address); } }
        public UArray<Object> Meshes { get { return new UArray<Object>(this[nameof(Meshes)].Address); } }
        public RandRange ScaleDelay { get { return this[nameof(ScaleDelay)].As<RandRange>(); } set { this["ScaleDelay"] = value; } }
        public Object StartingSound { get { return this[nameof(StartingSound)]; } set { this[nameof(StartingSound)] = value; } }
        public Object EndSound { get { return this[nameof(EndSound)]; } set { this[nameof(EndSound)] = value; } }
        public UArray<Object> StartParticles { get { return new UArray<Object>(this[nameof(StartParticles)].Address); } }
        public UArray<Object> EndParticles { get { return new UArray<Object>(this[nameof(EndParticles)].Address); } }
    }
    public class PushPoint : Object
    {
        public PushPoint(nint addr) : base(addr) { }
        public SphereComponent collider { get { return this[nameof(collider)].As<SphereComponent>(); } set { this["collider"] = value; } }
        public PlayerCharacter Character { get { return this[nameof(Character)].As<PlayerCharacter>(); } set { this["Character"] = value; } }
    }
    public class CompositeArmorItem : Object
    {
        public CompositeArmorItem(nint addr) : base(addr) { }
        public PrimitiveComponent Component { get { return this[nameof(Component)].As<PrimitiveComponent>(); } set { this["Component"] = value; } }
        public float Health { get { return this[nameof(Health)].GetValue<float>(); } set { this[nameof(Health)].SetValue<float>(value); } }
        public bool OverrideAffectedByArmorBreak { get { return this[nameof(OverrideAffectedByArmorBreak)].Flag; } set { this[nameof(OverrideAffectedByArmorBreak)].Flag = value; } }
        public bool MyAffectedByAmorBreak { get { return this[nameof(MyAffectedByAmorBreak)].Flag; } set { this[nameof(MyAffectedByAmorBreak)].Flag = value; } }
    }
    public class ArmorHealthItem : Object
    {
        public ArmorHealthItem(nint addr) : base(addr) { }
        public byte MaterialIndex { get { return this[nameof(MaterialIndex)].GetValue<byte>(); } set { this[nameof(MaterialIndex)].SetValue<byte>(value); } }
        public bool HealthIsBreakPercentage { get { return this[nameof(HealthIsBreakPercentage)].Flag; } set { this[nameof(HealthIsBreakPercentage)].Flag = value; } }
        public bool OverrideAffectedByAmorBreak { get { return this[nameof(OverrideAffectedByAmorBreak)].Flag; } set { this[nameof(OverrideAffectedByAmorBreak)].Flag = value; } }
        public bool NewAffectedByArmorBreak { get { return this[nameof(NewAffectedByArmorBreak)].Flag; } set { this[nameof(NewAffectedByArmorBreak)].Flag = value; } }
        public bool OverrideArmorDamageEnabled { get { return this[nameof(OverrideArmorDamageEnabled)].Flag; } set { this[nameof(OverrideArmorDamageEnabled)].Flag = value; } }
        public UArray<ArmorHealthSubItem> ArmorBones { get { return new UArray<ArmorHealthSubItem>(this[nameof(ArmorBones)].Address); } }
    }
    public class ArmorHealthSubItem : Object
    {
        public ArmorHealthSubItem(nint addr) : base(addr) { }
        public float Health { get { return this[nameof(Health)].GetValue<float>(); } set { this[nameof(Health)].SetValue<float>(value); } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public UArray<Object> AdditionalBones { get { return new UArray<Object>(this[nameof(AdditionalBones)].Address); } }
        public Object OptionalFXSocket { get { return this[nameof(OptionalFXSocket)]; } set { this[nameof(OptionalFXSocket)] = value; } }
    }
    public class DestructableBodypartItem : Object
    {
        public DestructableBodypartItem(nint addr) : base(addr) { }
        public byte MaterialIndex { get { return this[nameof(MaterialIndex)].GetValue<byte>(); } set { this[nameof(MaterialIndex)].SetValue<byte>(value); } }
        public UArray<Object> ArmorBones { get { return new UArray<Object>(this[nameof(ArmorBones)].Address); } }
    }
    public class ArmorDamageInfo : Object
    {
        public ArmorDamageInfo(nint addr) : base(addr) { }
        public int ArmorIndexMask { get { return this[nameof(ArmorIndexMask)].GetValue<int>(); } set { this[nameof(ArmorIndexMask)].SetValue<int>(value); } }
        public EArmorDamageType BreakType { get { return (EArmorDamageType)this[nameof(BreakType)].GetValue<int>(); } set { this[nameof(BreakType)].SetValue<int>((int)value); } }
    }
    public class ArmorDamageEffects : Object
    {
        public ArmorDamageEffects(nint addr) : base(addr) { }
        public UArray<FXSystemAsset> ArmorBreakParticles { get { return new UArray<FXSystemAsset>(this[nameof(ArmorBreakParticles)].Address); } }
        public UArray<FXSystemAsset> DissolveParticles { get { return new UArray<FXSystemAsset>(this[nameof(DissolveParticles)].Address); } }
        public UArray<FXSystemAsset> BeamParticles { get { return new UArray<FXSystemAsset>(this[nameof(BeamParticles)].Address); } }
    }
    public class AttackCooldown : Object
    {
        public AttackCooldown(nint addr) : base(addr) { }
        public Object AttackName { get { return this[nameof(AttackName)]; } set { this[nameof(AttackName)] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
    }
    public class AttackerInfo : Object
    {
        public AttackerInfo(nint addr) : base(addr) { }
        public Object Attacker { get { return this[nameof(Attacker)]; } set { this[nameof(Attacker)] = value; } }
        public int PositionIndex { get { return this[nameof(PositionIndex)].GetValue<int>(); } set { this[nameof(PositionIndex)].SetValue<int>(value); } }
        public float AttackerRadius { get { return this[nameof(AttackerRadius)].GetValue<float>(); } set { this[nameof(AttackerRadius)].SetValue<float>(value); } }
    }
    public class BEETemplateItem : Object
    {
        public BEETemplateItem(nint addr) : base(addr) { }
        public MissionTemplate mission { get { return this[nameof(mission)].As<MissionTemplate>(); } set { this["mission"] = value; } }
        public UArray<MissionDuration> AllowedDurations { get { return new UArray<MissionDuration>(this[nameof(AllowedDurations)].Address); } }
        public UArray<MissionComplexity> AllowedComplexities { get { return new UArray<MissionComplexity>(this[nameof(AllowedComplexities)].Address); } }
    }
    public class BEELoaderSequence : Object
    {
        public BEELoaderSequence(nint addr) : base(addr) { }
        public Object LevelSequence { get { return this[nameof(LevelSequence)]; } set { this[nameof(LevelSequence)] = value; } }
    }
    public class BiomeEnemyEntry : Object
    {
        public BiomeEnemyEntry(nint addr) : base(addr) { }
        public EnemyDescriptor enemy { get { return this[nameof(enemy)].As<EnemyDescriptor>(); } set { this["enemy"] = value; } }
        public bool IsDistruptive { get { return this[nameof(IsDistruptive)].Flag; } set { this[nameof(IsDistruptive)].Flag = value; } }
    }
    public class BiomeNoiseItem : Object
    {
        public BiomeNoiseItem(nint addr) : base(addr) { }
        public FloodFillSettings CeilingNoise { get { return this[nameof(CeilingNoise)].As<FloodFillSettings>(); } set { this["CeilingNoise"] = value; } }
        public DetailNoise CeilingDetailNoise { get { return this[nameof(CeilingDetailNoise)].As<DetailNoise>(); } set { this["CeilingDetailNoise"] = value; } }
        public FloodFillSettings WallNoise { get { return this[nameof(WallNoise)].As<FloodFillSettings>(); } set { this["WallNoise"] = value; } }
        public DetailNoise WallDetailNoise { get { return this[nameof(WallDetailNoise)].As<DetailNoise>(); } set { this["WallDetailNoise"] = value; } }
        public FloodFillSettings FloorNoise { get { return this[nameof(FloorNoise)].As<FloodFillSettings>(); } set { this["FloorNoise"] = value; } }
        public DetailNoise FloorDetailNoise { get { return this[nameof(FloorDetailNoise)].As<DetailNoise>(); } set { this["FloorDetailNoise"] = value; } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
    }
    public class BoscoLightSetting : Object
    {
        public BoscoLightSetting(nint addr) : base(addr) { }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class BoscoAbilityTarget : Object
    {
        public BoscoAbilityTarget(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
    }
    public class BossFight : Object
    {
        public BossFight(nint addr) : base(addr) { }
        public Object BossActor { get { return this[nameof(BossActor)]; } set { this[nameof(BossActor)] = value; } }
        public Object EnemyComponent { get { return this[nameof(EnemyComponent)]; } set { this[nameof(EnemyComponent)] = value; } }
        public Object HealthComponent { get { return this[nameof(HealthComponent)]; } set { this[nameof(HealthComponent)] = value; } }
    }
    public class BoomerangMover : Object
    {
        public BoomerangMover(nint addr) : base(addr) { }
        public Rotator StartRotation { get { return this[nameof(StartRotation)].As<Rotator>(); } set { this["StartRotation"] = value; } }
        public Vector PrevPos { get { return this[nameof(PrevPos)].As<Vector>(); } set { this["PrevPos"] = value; } }
        public Vector NextPos { get { return this[nameof(NextPos)].As<Vector>(); } set { this["NextPos"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float TimeScale { get { return this[nameof(TimeScale)].GetValue<float>(); } set { this[nameof(TimeScale)].SetValue<float>(value); } }
        public float TickRate { get { return this[nameof(TickRate)].GetValue<float>(); } set { this[nameof(TickRate)].SetValue<float>(value); } }
        public float TickTime { get { return this[nameof(TickTime)].GetValue<float>(); } set { this[nameof(TickTime)].SetValue<float>(value); } }
        public float AccumulatedTime { get { return this[nameof(AccumulatedTime)].GetValue<float>(); } set { this[nameof(AccumulatedTime)].SetValue<float>(value); } }
        public float TotalTime { get { return this[nameof(TotalTime)].GetValue<float>(); } set { this[nameof(TotalTime)].SetValue<float>(value); } }
        public float StartSmoothTime { get { return this[nameof(StartSmoothTime)].GetValue<float>(); } set { this[nameof(StartSmoothTime)].SetValue<float>(value); } }
        public CurveVector ArcCurve { get { return this[nameof(ArcCurve)].As<CurveVector>(); } set { this["ArcCurve"] = value; } }
        public bool IsGoingBack { get { return this[nameof(IsGoingBack)].Flag; } set { this[nameof(IsGoingBack)].Flag = value; } }
    }
    public class BoomerangSyncer : Object
    {
        public BoomerangSyncer(nint addr) : base(addr) { }
        public Vector PrevPos { get { return this[nameof(PrevPos)].As<Vector>(); } set { this["PrevPos"] = value; } }
        public Vector NextPos { get { return this[nameof(NextPos)].As<Vector>(); } set { this["NextPos"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public bool IsGoingBack { get { return this[nameof(IsGoingBack)].Flag; } set { this[nameof(IsGoingBack)].Flag = value; } }
        public float TotalTime { get { return this[nameof(TotalTime)].GetValue<float>(); } set { this[nameof(TotalTime)].SetValue<float>(value); } }
    }
    public class LevelGenerationCarver : Object
    {
        public LevelGenerationCarver(nint addr) : base(addr) { }
        public MatrixWithExactSync Transform { get { return this[nameof(Transform)].As<MatrixWithExactSync>(); } set { this["Transform"] = value; } }
        public STLMeshCarver MeshCarver { get { return this[nameof(MeshCarver)].As<STLMeshCarver>(); } set { this["MeshCarver"] = value; } }
        public StaticMesh ConvexCarver { get { return this[nameof(ConvexCarver)].As<StaticMesh>(); } set { this["ConvexCarver"] = value; } }
        public StaticMeshCarver StaticMeshCarver { get { return this[nameof(StaticMeshCarver)].As<StaticMeshCarver>(); } set { this["StaticMeshCarver"] = value; } }
        public float ConvexExpensiveNoise { get { return this[nameof(ConvexExpensiveNoise)].GetValue<float>(); } set { this[nameof(ConvexExpensiveNoise)].SetValue<float>(value); } }
        public LevelGenerationCarverComponent Componenet { get { return this[nameof(Componenet)].As<LevelGenerationCarverComponent>(); } set { this["Componenet"] = value; } }
        public CarveOptionsCellSize CarveCellSize { get { return (CarveOptionsCellSize)this[nameof(CarveCellSize)].GetValue<int>(); } set { this[nameof(CarveCellSize)].SetValue<int>((int)value); } }
        public TerrainMaterial TerrainMaterial { get { return this[nameof(TerrainMaterial)].As<TerrainMaterial>(); } set { this["TerrainMaterial"] = value; } }
        public ECarveFilterType Filter { get { return (ECarveFilterType)this[nameof(Filter)].GetValue<int>(); } set { this[nameof(Filter)].SetValue<int>((int)value); } }
        public bool ToBeDiscarded { get { return this[nameof(ToBeDiscarded)].Flag; } set { this[nameof(ToBeDiscarded)].Flag = value; } }
    }
    public class CaveInfluence : Object
    {
        public CaveInfluence(nint addr) : base(addr) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
    }
    public class CustomUsable : Object
    {
        public CustomUsable(nint addr) : base(addr) { }
        public UsableComponentBase Usable { get { return this[nameof(Usable)].As<UsableComponentBase>(); } set { this["Usable"] = value; } }
        public ECustomUsableType TerminationType { get { return (ECustomUsableType)this[nameof(TerminationType)].GetValue<int>(); } set { this[nameof(TerminationType)].SetValue<int>((int)value); } }
    }
    public class CharacterUseState : Object
    {
        public CharacterUseState(nint addr) : base(addr) { }
        public UsableComponentBase ActiveUsable { get { return this[nameof(ActiveUsable)].As<UsableComponentBase>(); } set { this["ActiveUsable"] = value; } }
        public EInputKeys Key { get { return (EInputKeys)this[nameof(Key)].GetValue<int>(); } set { this[nameof(Key)].SetValue<int>((int)value); } }
        public int UseId { get { return this[nameof(UseId)].GetValue<int>(); } set { this[nameof(UseId)].SetValue<int>(value); } }
    }
    public class ClaimableRewardView : Object
    {
        public ClaimableRewardView(nint addr) : base(addr) { }
        public DialogDataAsset MissionControlSpeak { get { return this[nameof(MissionControlSpeak)].As<DialogDataAsset>(); } set { this["MissionControlSpeak"] = value; } }
        public Object BackgroundWidgetClass { get { return this[nameof(BackgroundWidgetClass)]; } set { this[nameof(BackgroundWidgetClass)] = value; } }
        public Object FanfareAudio { get { return this[nameof(FanfareAudio)]; } set { this[nameof(FanfareAudio)] = value; } }
        public float MoveInRewardsDelay { get { return this[nameof(MoveInRewardsDelay)].GetValue<float>(); } set { this[nameof(MoveInRewardsDelay)].SetValue<float>(value); } }
        public UArray<ClaimableRewardEntry> RewardDisplays { get { return new UArray<ClaimableRewardEntry>(this[nameof(RewardDisplays)].Address); } }
        public Object ClaimButtonText { get { return this[nameof(ClaimButtonText)]; } set { this[nameof(ClaimButtonText)] = value; } }
    }
    public class CloudSaveRequest : Object
    {
        public CloudSaveRequest(nint addr) : base(addr) { }
        public Object SteamTicket { get { return this[nameof(SteamTicket)]; } set { this[nameof(SteamTicket)] = value; } }
        public Object PSTicket { get { return this[nameof(PSTicket)]; } set { this[nameof(PSTicket)] = value; } }
        public int PlayerRank { get { return this[nameof(PlayerRank)].GetValue<int>(); } set { this[nameof(PlayerRank)].SetValue<int>(value); } }
        public int SaveToDiskCounter { get { return this[nameof(SaveToDiskCounter)].GetValue<int>(); } set { this[nameof(SaveToDiskCounter)].SetValue<int>(value); } }
        public Object RawData { get { return this[nameof(RawData)]; } set { this[nameof(RawData)] = value; } }
        public Object Branch { get { return this[nameof(Branch)]; } set { this[nameof(Branch)] = value; } }
    }
    public class CloudLoadAllResponse : Object
    {
        public CloudLoadAllResponse(nint addr) : base(addr) { }
        public UArray<CloudLoadEntry> savegames { get { return new UArray<CloudLoadEntry>(this[nameof(savegames)].Address); } }
    }
    public class CloudLoadEntry : Object
    {
        public CloudLoadEntry(nint addr) : base(addr) { }
        public Object RawData { get { return this[nameof(RawData)]; } set { this[nameof(RawData)] = value; } }
        public Object TimeUTC { get { return this[nameof(TimeUTC)]; } set { this[nameof(TimeUTC)] = value; } }
    }
    public class CloudLoadRequest : Object
    {
        public CloudLoadRequest(nint addr) : base(addr) { }
        public Object SteamTicket { get { return this[nameof(SteamTicket)]; } set { this[nameof(SteamTicket)] = value; } }
        public Object PSTicket { get { return this[nameof(PSTicket)]; } set { this[nameof(PSTicket)] = value; } }
        public Object Branch { get { return this[nameof(Branch)]; } set { this[nameof(Branch)] = value; } }
        public int Offset { get { return this[nameof(Offset)].GetValue<int>(); } set { this[nameof(Offset)].SetValue<int>(value); } }
    }
    public class ExampleStruct : Object
    {
        public ExampleStruct(nint addr) : base(addr) { }
        public float Field { get { return this[nameof(Field)].GetValue<float>(); } set { this[nameof(Field)].SetValue<float>(value); } }
    }
    public class CoilgunCoil : Object
    {
        public CoilgunCoil(nint addr) : base(addr) { }
        public float Angle { get { return this[nameof(Angle)].GetValue<float>(); } set { this[nameof(Angle)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
    }
    public class CoilgunAfflictionEntry : Object
    {
        public CoilgunAfflictionEntry(nint addr) : base(addr) { }
        public UArray<Object> PushedAfflictions { get { return new UArray<Object>(this[nameof(PushedAfflictions)].Address); } }
        public StatusEffectsComponent Target { get { return this[nameof(Target)].As<StatusEffectsComponent>(); } set { this["Target"] = value; } }
    }
    public class CoilMaterial : Object
    {
        public CoilMaterial(nint addr) : base(addr) { }
        public MaterialInstanceDynamic Material { get { return this[nameof(Material)].As<MaterialInstanceDynamic>(); } set { this["Material"] = value; } }
    }
    public class ShotMultiplier : Object
    {
        public ShotMultiplier(nint addr) : base(addr) { }
        public float Undercharge { get { return this[nameof(Undercharge)].GetValue<float>(); } set { this[nameof(Undercharge)].SetValue<float>(value); } }
        public float Overcharge { get { return this[nameof(Overcharge)].GetValue<float>(); } set { this[nameof(Overcharge)].SetValue<float>(value); } }
        public bool TriBurst { get { return this[nameof(TriBurst)].Flag; } set { this[nameof(TriBurst)].Flag = value; } }
    }
    public class ContrailSettings : Object
    {
        public ContrailSettings(nint addr) : base(addr) { }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float HalfLenght { get { return this[nameof(HalfLenght)].GetValue<float>(); } set { this[nameof(HalfLenght)].SetValue<float>(value); } }
        public float LifeTime { get { return this[nameof(LifeTime)].GetValue<float>(); } set { this[nameof(LifeTime)].SetValue<float>(value); } }
        public bool Hellfire { get { return this[nameof(Hellfire)].Flag; } set { this[nameof(Hellfire)].Flag = value; } }
        public bool Electric { get { return this[nameof(Electric)].Flag; } set { this[nameof(Electric)].Flag = value; } }
    }
    public class CharacterShouts : Object
    {
        public CharacterShouts(nint addr) : base(addr) { }
        public DialogDataAsset Attention { get { return this[nameof(Attention)].As<DialogDataAsset>(); } set { this["Attention"] = value; } }
        public DialogDataAsset Follow { get { return this[nameof(Follow)].As<DialogDataAsset>(); } set { this["Follow"] = value; } }
        public DialogDataAsset standingDown { get { return this[nameof(standingDown)].As<DialogDataAsset>(); } set { this["standingDown"] = value; } }
        public DialogDataAsset Downed { get { return this[nameof(Downed)].As<DialogDataAsset>(); } set { this["Downed"] = value; } }
        public DialogDataAsset RequestRevive { get { return this[nameof(RequestRevive)].As<DialogDataAsset>(); } set { this["RequestRevive"] = value; } }
        public DialogDataAsset Revived { get { return this[nameof(Revived)].As<DialogDataAsset>(); } set { this["Revived"] = value; } }
        public DialogDataAsset Resupply { get { return this[nameof(Resupply)].As<DialogDataAsset>(); } set { this["Resupply"] = value; } }
        public DialogDataAsset FriendlyFire { get { return this[nameof(FriendlyFire)].As<DialogDataAsset>(); } set { this["FriendlyFire"] = value; } }
        public DialogDataAsset KillCry { get { return this[nameof(KillCry)].As<DialogDataAsset>(); } set { this["KillCry"] = value; } }
        public DialogDataAsset Dead { get { return this[nameof(Dead)].As<DialogDataAsset>(); } set { this["Dead"] = value; } }
        public DialogDataAsset Cheating { get { return this[nameof(Cheating)].As<DialogDataAsset>(); } set { this["Cheating"] = value; } }
        public DialogDataAsset ResourceFull { get { return this[nameof(ResourceFull)].As<DialogDataAsset>(); } set { this["ResourceFull"] = value; } }
        public DialogDataAsset ResourceFullNoDonkey { get { return this[nameof(ResourceFullNoDonkey)].As<DialogDataAsset>(); } set { this["ResourceFullNoDonkey"] = value; } }
        public DialogDataAsset CallDonkey { get { return this[nameof(CallDonkey)].As<DialogDataAsset>(); } set { this["CallDonkey"] = value; } }
        public DialogDataAsset CallDonkey_NotInMission { get { return this[nameof(CallDonkey_NotInMission)].As<DialogDataAsset>(); } set { this["CallDonkey_NotInMission"] = value; } }
        public DialogDataAsset Depositing { get { return this[nameof(Depositing)].As<DialogDataAsset>(); } set { this["Depositing"] = value; } }
        public DialogDataAsset DepositingNoDonkey { get { return this[nameof(DepositingNoDonkey)].As<DialogDataAsset>(); } set { this["DepositingNoDonkey"] = value; } }
        public DialogDataAsset OutOfAmmo { get { return this[nameof(OutOfAmmo)].As<DialogDataAsset>(); } set { this["OutOfAmmo"] = value; } }
        public DialogDataAsset Reloading { get { return this[nameof(Reloading)].As<DialogDataAsset>(); } set { this["Reloading"] = value; } }
        public DialogDataAsset CharacterSelected { get { return this[nameof(CharacterSelected)].As<DialogDataAsset>(); } set { this["CharacterSelected"] = value; } }
        public DialogDataAsset UpgradeBought { get { return this[nameof(UpgradeBought)].As<DialogDataAsset>(); } set { this["UpgradeBought"] = value; } }
        public DialogDataAsset WaitingInDropPod { get { return this[nameof(WaitingInDropPod)].As<DialogDataAsset>(); } set { this["WaitingInDropPod"] = value; } }
        public DialogDataAsset Carrying { get { return this[nameof(Carrying)].As<DialogDataAsset>(); } set { this["Carrying"] = value; } }
        public DialogDataAsset WaitingInEscapePod { get { return this[nameof(WaitingInEscapePod)].As<DialogDataAsset>(); } set { this["WaitingInEscapePod"] = value; } }
        public DialogDataAsset Salute { get { return this[nameof(Salute)].As<DialogDataAsset>(); } set { this["Salute"] = value; } }
        public DialogDataAsset Salute_Spacerig { get { return this[nameof(Salute_Spacerig)].As<DialogDataAsset>(); } set { this["Salute_Spacerig"] = value; } }
        public DialogDataAsset Drink { get { return this[nameof(Drink)].As<DialogDataAsset>(); } set { this["Drink"] = value; } }
    }
    public class CommunityReward : Object
    {
        public CommunityReward(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class CommunityFactionData : Object
    {
        public CommunityFactionData(nint addr) : base(addr) { }
        public bool IsValid { get { return this[nameof(IsValid)].Flag; } set { this[nameof(IsValid)].Flag = value; } }
        public UArray<Object> Goals { get { return new UArray<Object>(this[nameof(Goals)].Address); } }
        public UArray<float> Values { get { return new UArray<float>(this[nameof(Values)].Address); } }
        public UArray<int> Members { get { return new UArray<int>(this[nameof(Members)].Address); } }
    }
    public class CommunityGoalStateData : Object
    {
        public CommunityGoalStateData(nint addr) : base(addr) { }
        public bool isGoal { get { return this[nameof(isGoal)].Flag; } set { this[nameof(isGoal)].Flag = value; } }
        public bool isRecruitment { get { return this[nameof(isRecruitment)].Flag; } set { this[nameof(isRecruitment)].Flag = value; } }
        public float TimeLeftSeconds { get { return this[nameof(TimeLeftSeconds)].GetValue<float>(); } set { this[nameof(TimeLeftSeconds)].SetValue<float>(value); } }
        public int CurrentGoalPeriodID { get { return this[nameof(CurrentGoalPeriodID)].GetValue<int>(); } set { this[nameof(CurrentGoalPeriodID)].SetValue<int>(value); } }
    }
    public class CommunityRewardNotification : Object
    {
        public CommunityRewardNotification(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public LinearColor IconColor { get { return this[nameof(IconColor)].As<LinearColor>(); } set { this["IconColor"] = value; } }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
    }
    public class CommunityFactionResponse : Object
    {
        public CommunityFactionResponse(nint addr) : base(addr) { }
        public UArray<Object> Goals { get { return new UArray<Object>(this[nameof(Goals)].Address); } }
        public UArray<float> Values { get { return new UArray<float>(this[nameof(Values)].Address); } }
        public UArray<float> Members { get { return new UArray<float>(this[nameof(Members)].Address); } }
    }
    public class CommunityGoalStateResponse : Object
    {
        public CommunityGoalStateResponse(nint addr) : base(addr) { }
        public bool isGoal { get { return this[nameof(isGoal)].Flag; } set { this[nameof(isGoal)].Flag = value; } }
        public bool isRecruitment { get { return this[nameof(isRecruitment)].Flag; } set { this[nameof(isRecruitment)].Flag = value; } }
        public bool FreeBeers { get { return this[nameof(FreeBeers)].Flag; } set { this[nameof(FreeBeers)].Flag = value; } }
        public float TimeLeftSeconds { get { return this[nameof(TimeLeftSeconds)].GetValue<float>(); } set { this[nameof(TimeLeftSeconds)].SetValue<float>(value); } }
        public int LastUpdateGoalsID { get { return this[nameof(LastUpdateGoalsID)].GetValue<int>(); } set { this[nameof(LastUpdateGoalsID)].SetValue<int>(value); } }
        public int CurrentGoalPeriodID { get { return this[nameof(CurrentGoalPeriodID)].GetValue<int>(); } set { this[nameof(CurrentGoalPeriodID)].SetValue<int>(value); } }
    }
    public class CommunityGoalTierResponse : Object
    {
        public CommunityGoalTierResponse(nint addr) : base(addr) { }
        public bool Found { get { return this[nameof(Found)].Flag; } set { this[nameof(Found)].Flag = value; } }
        public Object GoalID { get { return this[nameof(GoalID)]; } set { this[nameof(GoalID)] = value; } }
        public float FirstTierGoal { get { return this[nameof(FirstTierGoal)].GetValue<float>(); } set { this[nameof(FirstTierGoal)].SetValue<float>(value); } }
        public float SecondTierGoal { get { return this[nameof(SecondTierGoal)].GetValue<float>(); } set { this[nameof(SecondTierGoal)].SetValue<float>(value); } }
        public float ThirdTierGoal { get { return this[nameof(ThirdTierGoal)].GetValue<float>(); } set { this[nameof(ThirdTierGoal)].SetValue<float>(value); } }
    }
    public class CommunityGoalIncrementResponse : Object
    {
        public CommunityGoalIncrementResponse(nint addr) : base(addr) { }
        public bool success { get { return this[nameof(success)].Flag; } set { this[nameof(success)].Flag = value; } }
    }
    public class CommunityGoalTierDataRequest : Object
    {
        public CommunityGoalTierDataRequest(nint addr) : base(addr) { }
        public Object GoalID { get { return this[nameof(GoalID)]; } set { this[nameof(GoalID)] = value; } }
    }
    public class CommunityGoalRequest : Object
    {
        public CommunityGoalRequest(nint addr) : base(addr) { }
        public Object GoalID { get { return this[nameof(GoalID)]; } set { this[nameof(GoalID)] = value; } }
        public int FactionID { get { return this[nameof(FactionID)].GetValue<int>(); } set { this[nameof(FactionID)].SetValue<int>(value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public Object SteamTicket { get { return this[nameof(SteamTicket)]; } set { this[nameof(SteamTicket)] = value; } }
        public Object Branch { get { return this[nameof(Branch)]; } set { this[nameof(Branch)] = value; } }
    }
    public class ActionIconMapping : Object
    {
        public ActionIconMapping(nint addr) : base(addr) { }
        public Key ActionKey { get { return this[nameof(ActionKey)].As<Key>(); } set { this["ActionKey"] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public bool DoNotTint { get { return this[nameof(DoNotTint)].Flag; } set { this[nameof(DoNotTint)].Flag = value; } }
    }
    public class PricingTierEntry : TableRowBase
    {
        public PricingTierEntry(nint addr) : base(addr) { }
        public IRandRange CreditCost { get { return this[nameof(CreditCost)].As<IRandRange>(); } set { this["CreditCost"] = value; } }
        public IRandRange Material1 { get { return this[nameof(Material1)].As<IRandRange>(); } set { this["Material1"] = value; } }
        public IRandRange Material2 { get { return this[nameof(Material2)].As<IRandRange>(); } set { this["Material2"] = value; } }
        public IRandRange Material3 { get { return this[nameof(Material3)].As<IRandRange>(); } set { this["Material3"] = value; } }
    }
    public class IRandRange : Object
    {
        public IRandRange(nint addr) : base(addr) { }
        public int Min { get { return this[nameof(Min)].GetValue<int>(); } set { this[nameof(Min)].SetValue<int>(value); } }
        public int Max { get { return this[nameof(Max)].GetValue<int>(); } set { this[nameof(Max)].SetValue<int>(value); } }
    }
    public class CustomKeySetting : Object
    {
        public CustomKeySetting(nint addr) : base(addr) { }
        public Object SaveID { get { return this[nameof(SaveID)]; } set { this[nameof(SaveID)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public UArray<Object> ActionNames { get { return new UArray<Object>(this[nameof(ActionNames)].Address); } }
        public EKeyBindingAxis ActionAxis { get { return (EKeyBindingAxis)this[nameof(ActionAxis)].GetValue<int>(); } set { this[nameof(ActionAxis)].SetValue<int>((int)value); } }
    }
    public class DailyDeal : Object
    {
        public DailyDeal(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public EDealType DealType { get { return (EDealType)this[nameof(DealType)].GetValue<int>(); } set { this[nameof(DealType)].SetValue<int>((int)value); } }
        public int ResourceAmount { get { return this[nameof(ResourceAmount)].GetValue<int>(); } set { this[nameof(ResourceAmount)].SetValue<int>(value); } }
        public int Credits { get { return this[nameof(Credits)].GetValue<int>(); } set { this[nameof(Credits)].SetValue<int>(value); } }
        public float ChangePercent { get { return this[nameof(ChangePercent)].GetValue<float>(); } set { this[nameof(ChangePercent)].SetValue<float>(value); } }
    }
    public class DailyDealSetup : Object
    {
        public DailyDealSetup(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public EDealType DealType { get { return (EDealType)this[nameof(DealType)].GetValue<int>(); } set { this[nameof(DealType)].SetValue<int>((int)value); } }
        public IntPoint UnitsRange { get { return this[nameof(UnitsRange)].As<IntPoint>(); } set { this["UnitsRange"] = value; } }
        public Vector2D DiscountRangePercent { get { return this[nameof(DiscountRangePercent)].As<Vector2D>(); } set { this["DiscountRangePercent"] = value; } }
        public Vector2D ExtraValueRangePercent { get { return this[nameof(ExtraValueRangePercent)].As<Vector2D>(); } set { this["ExtraValueRangePercent"] = value; } }
    }
    public class DamageSubsystemItem : Object
    {
        public DamageSubsystemItem(nint addr) : base(addr) { }
        public DamageComponent DamageComponent { get { return this[nameof(DamageComponent)].As<DamageComponent>(); } set { this["DamageComponent"] = value; } }
    }
    public class DamageModifierItem : Object
    {
        public DamageModifierItem(nint addr) : base(addr) { }
        public EDamageUpgrade DamageUpgrade { get { return (EDamageUpgrade)this[nameof(DamageUpgrade)].GetValue<int>(); } set { this[nameof(DamageUpgrade)].SetValue<int>((int)value); } }
        public float Additive { get { return this[nameof(Additive)].GetValue<float>(); } set { this[nameof(Additive)].SetValue<float>(value); } }
        public float Multiplicative { get { return this[nameof(Multiplicative)].GetValue<float>(); } set { this[nameof(Multiplicative)].SetValue<float>(value); } }
    }
    public class DanceItem : Object
    {
        public DanceItem(nint addr) : base(addr) { }
        public AnimSequence danceMove { get { return this[nameof(danceMove)].As<AnimSequence>(); } set { this["danceMove"] = value; } }
        public AnimSequence DanceMoveWithBeer { get { return this[nameof(DanceMoveWithBeer)].As<AnimSequence>(); } set { this["DanceMoveWithBeer"] = value; } }
    }
    public class CellNoise : Object
    {
        public CellNoise(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public Vector CellSize { get { return this[nameof(CellSize)].As<Vector>(); } set { this["CellSize"] = value; } }
        public int NumValues { get { return this[nameof(NumValues)].GetValue<int>(); } set { this[nameof(NumValues)].SetValue<int>(value); } }
        public int MinCellValue { get { return this[nameof(MinCellValue)].GetValue<int>(); } set { this[nameof(MinCellValue)].SetValue<int>(value); } }
        public int MaxCellValue { get { return this[nameof(MaxCellValue)].GetValue<int>(); } set { this[nameof(MaxCellValue)].SetValue<int>(value); } }
    }
    public class DebrisCellNoiseParameters : Object
    {
        public DebrisCellNoiseParameters(nint addr) : base(addr) { }
        public DebrisCellNoise Noise { get { return this[nameof(Noise)].As<DebrisCellNoise>(); } set { this["Noise"] = value; } }
        public int MinCellValue { get { return this[nameof(MinCellValue)].GetValue<int>(); } set { this[nameof(MinCellValue)].SetValue<int>(value); } }
        public int MaxCellValue { get { return this[nameof(MaxCellValue)].GetValue<int>(); } set { this[nameof(MaxCellValue)].SetValue<int>(value); } }
    }
    public class UDebrisCarveMesh : Object
    {
        public UDebrisCarveMesh(nint addr) : base(addr) { }
        public StaticMesh Mesh { get { return this[nameof(Mesh)].As<StaticMesh>(); } set { this["Mesh"] = value; } }
        public float Probablity { get { return this[nameof(Probablity)].GetValue<float>(); } set { this[nameof(Probablity)].SetValue<float>(value); } }
    }
    public class DebrisItemActorItem : Object
    {
        public DebrisItemActorItem(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public float Probability { get { return this[nameof(Probability)].GetValue<float>(); } set { this[nameof(Probability)].SetValue<float>(value); } }
    }
    public class DebrisStaticMesh : Object
    {
        public DebrisStaticMesh(nint addr) : base(addr) { }
        public StaticMesh Mesh { get { return this[nameof(Mesh)].As<StaticMesh>(); } set { this["Mesh"] = value; } }
        public MaterialInterface Material { get { return this[nameof(Material)].As<MaterialInterface>(); } set { this["Material"] = value; } }
        public EDebrisMeshCollisionProfile CollisionProfile { get { return (EDebrisMeshCollisionProfile)this[nameof(CollisionProfile)].GetValue<int>(); } set { this[nameof(CollisionProfile)].SetValue<int>((int)value); } }
        public float Probablity { get { return this[nameof(Probablity)].GetValue<float>(); } set { this[nameof(Probablity)].SetValue<float>(value); } }
        public SoundCue DestroyedSound { get { return this[nameof(DestroyedSound)].As<SoundCue>(); } set { this["DestroyedSound"] = value; } }
        public FXSystemAsset DestroyedParticles { get { return this[nameof(DestroyedParticles)].As<FXSystemAsset>(); } set { this["DestroyedParticles"] = value; } }
        public DecalData Decal { get { return this[nameof(Decal)].As<DecalData>(); } set { this["Decal"] = value; } }
        public bool Fragile { get { return this[nameof(Fragile)].Flag; } set { this[nameof(Fragile)].Flag = value; } }
        public EDebrisMeshShadows CastShadows { get { return (EDebrisMeshShadows)this[nameof(CastShadows)].GetValue<int>(); } set { this[nameof(CastShadows)].SetValue<int>((int)value); } }
        public bool Durable { get { return this[nameof(Durable)].Flag; } set { this[nameof(Durable)].Flag = value; } }
        public int SpecialDebrisType { get { return this[nameof(SpecialDebrisType)].GetValue<int>(); } set { this[nameof(SpecialDebrisType)].SetValue<int>(value); } }
        public bool SpawnWhenCarving { get { return this[nameof(SpawnWhenCarving)].Flag; } set { this[nameof(SpawnWhenCarving)].Flag = value; } }
        public bool OnlySpawnWhenCarving { get { return this[nameof(OnlySpawnWhenCarving)].Flag; } set { this[nameof(OnlySpawnWhenCarving)].Flag = value; } }
    }
    public class DecalData : Object
    {
        public DecalData(nint addr) : base(addr) { }
        public MaterialInterface DecalMaterial { get { return this[nameof(DecalMaterial)].As<MaterialInterface>(); } set { this["DecalMaterial"] = value; } }
        public float DecalSize { get { return this[nameof(DecalSize)].GetValue<float>(); } set { this[nameof(DecalSize)].SetValue<float>(value); } }
        public float DecalDepth { get { return this[nameof(DecalDepth)].GetValue<float>(); } set { this[nameof(DecalDepth)].SetValue<float>(value); } }
        public float LifeSpan { get { return this[nameof(LifeSpan)].GetValue<float>(); } set { this[nameof(LifeSpan)].SetValue<float>(value); } }
        public float StartDelay { get { return this[nameof(StartDelay)].GetValue<float>(); } set { this[nameof(StartDelay)].SetValue<float>(value); } }
        public float FadeInDuration { get { return this[nameof(FadeInDuration)].GetValue<float>(); } set { this[nameof(FadeInDuration)].SetValue<float>(value); } }
        public float FadeDuration { get { return this[nameof(FadeDuration)].GetValue<float>(); } set { this[nameof(FadeDuration)].SetValue<float>(value); } }
    }
    public class UDebrisStaticCarveMesh : Object
    {
        public UDebrisStaticCarveMesh(nint addr) : base(addr) { }
        public StaticMeshCarver Mesh { get { return this[nameof(Mesh)].As<StaticMeshCarver>(); } set { this["Mesh"] = value; } }
        public float Probablity { get { return this[nameof(Probablity)].GetValue<float>(); } set { this[nameof(Probablity)].SetValue<float>(value); } }
    }
    public class DebrisCapsule : Object
    {
        public DebrisCapsule(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class DebrisInfluence : Object
    {
        public DebrisInfluence(nint addr) : base(addr) { }
        public Object CaveInfluencer { get { return this[nameof(CaveInfluencer)].As<Object>(); } set { this["CaveInfluencer"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class RuntimeSpawnedDebris : Object
    {
        public RuntimeSpawnedDebris(nint addr) : base(addr) { }
        public UArray<DebrisInstances> DebrisInstances { get { return new UArray<DebrisInstances>(this[nameof(DebrisInstances)].Address); } }
        public DebrisMesh DebrisMesh { get { return this[nameof(DebrisMesh)].As<DebrisMesh>(); } set { this["DebrisMesh"] = value; } }
    }
    public class DebrisWhenCarving : Object
    {
        public DebrisWhenCarving(nint addr) : base(addr) { }
        public DebrisInstances Debris { get { return this[nameof(Debris)].As<DebrisInstances>(); } set { this["Debris"] = value; } }
    }
    public class CSGRaycastHitInfo : Object
    {
        public CSGRaycastHitInfo(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector Normal { get { return this[nameof(Normal)].As<Vector>(); } set { this["Normal"] = value; } }
        public int Material { get { return this[nameof(Material)].GetValue<int>(); } set { this[nameof(Material)].SetValue<int>(value); } }
    }
    public class DeepDiveRewardItem : Object
    {
        public DeepDiveRewardItem(nint addr) : base(addr) { }
        public Schematic Schematic { get { return this[nameof(Schematic)].As<Schematic>(); } set { this["Schematic"] = value; } }
        public int Stage { get { return this[nameof(Stage)].GetValue<int>(); } set { this[nameof(Stage)].SetValue<int>(value); } }
        public bool WasAlreadyGiven { get { return this[nameof(WasAlreadyGiven)].Flag; } set { this[nameof(WasAlreadyGiven)].Flag = value; } }
    }
    public class DeepDiveLoaderSequence : Object
    {
        public DeepDiveLoaderSequence(nint addr) : base(addr) { }
        public Object LevelSequence { get { return this[nameof(LevelSequence)]; } set { this[nameof(LevelSequence)] = value; } }
    }
    public class DeepDiveTemplateItem : Object
    {
        public DeepDiveTemplateItem(nint addr) : base(addr) { }
        public MissionTemplate mission { get { return this[nameof(mission)].As<MissionTemplate>(); } set { this["mission"] = value; } }
        public int Probability { get { return this[nameof(Probability)].GetValue<int>(); } set { this[nameof(Probability)].SetValue<int>(value); } }
        public UArray<MissionDuration> AllowedDurations { get { return new UArray<MissionDuration>(this[nameof(AllowedDurations)].Address); } }
        public UArray<MissionComplexity> AllowedComplexities { get { return new UArray<MissionComplexity>(this[nameof(AllowedComplexities)].Address); } }
        public bool CanOnlyAppearOnce { get { return this[nameof(CanOnlyAppearOnce)].Flag; } set { this[nameof(CanOnlyAppearOnce)].Flag = value; } }
        public bool CanOnlyAppearOncePerDeepDiveSet { get { return this[nameof(CanOnlyAppearOncePerDeepDiveSet)].Flag; } set { this[nameof(CanOnlyAppearOncePerDeepDiveSet)].Flag = value; } }
    }
    public class HandleRotationOptions : Object
    {
        public HandleRotationOptions(nint addr) : base(addr) { }
        public bool HandlePitch { get { return this[nameof(HandlePitch)].Flag; } set { this[nameof(HandlePitch)].Flag = value; } }
    }
    public class DeepRepPath : Object
    {
        public DeepRepPath(nint addr) : base(addr) { }
        public Vector PathBase { get { return this[nameof(PathBase)].As<Vector>(); } set { this["PathBase"] = value; } }
        public byte PathLength { get { return this[nameof(PathLength)].GetValue<byte>(); } set { this[nameof(PathLength)].SetValue<byte>(value); } }
        public EDeepMovementState State { get { return (EDeepMovementState)this[nameof(State)].GetValue<int>(); } set { this[nameof(State)].SetValue<int>((int)value); } }
        public byte StateBits { get { return this[nameof(StateBits)].GetValue<byte>(); } set { this[nameof(StateBits)].SetValue<byte>(value); } }
        public Vector PathOffsets { get { return this[nameof(PathOffsets)].As<Vector>(); } set { this["PathOffsets"] = value; } }
    }
    public class TerrainLateJoinIteration : Object
    {
        public TerrainLateJoinIteration(nint addr) : base(addr) { }
        public int DrillsIndex { get { return this[nameof(DrillsIndex)].GetValue<int>(); } set { this[nameof(DrillsIndex)].SetValue<int>(value); } }
        public int MeltsIndex { get { return this[nameof(MeltsIndex)].GetValue<int>(); } set { this[nameof(MeltsIndex)].SetValue<int>(value); } }
        public int PickAxeIndex { get { return this[nameof(PickAxeIndex)].GetValue<int>(); } set { this[nameof(PickAxeIndex)].SetValue<int>(value); } }
        public int FloatingIndex { get { return this[nameof(FloatingIndex)].GetValue<int>(); } set { this[nameof(FloatingIndex)].SetValue<int>(value); } }
        public int ColliderCarvesIndex { get { return this[nameof(ColliderCarvesIndex)].GetValue<int>(); } set { this[nameof(ColliderCarvesIndex)].SetValue<int>(value); } }
        public int MeshCarvesIndex { get { return this[nameof(MeshCarvesIndex)].GetValue<int>(); } set { this[nameof(MeshCarvesIndex)].SetValue<int>(value); } }
        public int ExplosionsIndex { get { return this[nameof(ExplosionsIndex)].GetValue<int>(); } set { this[nameof(ExplosionsIndex)].SetValue<int>(value); } }
        public int SplineIndex { get { return this[nameof(SplineIndex)].GetValue<int>(); } set { this[nameof(SplineIndex)].SetValue<int>(value); } }
        public int CSGIndex { get { return this[nameof(CSGIndex)].GetValue<int>(); } set { this[nameof(CSGIndex)].SetValue<int>(value); } }
        public int SpawnDebrisIndex { get { return this[nameof(SpawnDebrisIndex)].GetValue<int>(); } set { this[nameof(SpawnDebrisIndex)].SetValue<int>(value); } }
        public int LateJoinIndex { get { return this[nameof(LateJoinIndex)].GetValue<int>(); } set { this[nameof(LateJoinIndex)].SetValue<int>(value); } }
        public int DebrisIndex { get { return this[nameof(DebrisIndex)].GetValue<int>(); } set { this[nameof(DebrisIndex)].SetValue<int>(value); } }
        public int ChunkVisibilityIndex { get { return this[nameof(ChunkVisibilityIndex)].GetValue<int>(); } set { this[nameof(ChunkVisibilityIndex)].SetValue<int>(value); } }
    }
    public class TerrainLateJoinData : Object
    {
        public TerrainLateJoinData(nint addr) : base(addr) { }
        public UArray<GrenadeExplodeOperationData> Explosions { get { return new UArray<GrenadeExplodeOperationData>(this[nameof(Explosions)].Address); } }
        public UArray<CarveWithColliderOperationData> ColliderCarves { get { return new UArray<CarveWithColliderOperationData>(this[nameof(ColliderCarves)].Address); } }
        public UArray<CarveWithSTLMeshOperationData> MeshCarves { get { return new UArray<CarveWithSTLMeshOperationData>(this[nameof(MeshCarves)].Address); } }
        public UArray<PickaxeDigOperationData> PickAxe { get { return new UArray<PickaxeDigOperationData>(this[nameof(PickAxe)].Address); } }
        public UArray<RemoveFloatingIslandOperationData> RemoveFloating { get { return new UArray<RemoveFloatingIslandOperationData>(this[nameof(RemoveFloating)].Address); } }
        public UArray<DrillOperationData> Drills { get { return new UArray<DrillOperationData>(this[nameof(Drills)].Address); } }
        public UArray<MeltOperationData> Melts { get { return new UArray<MeltOperationData>(this[nameof(Melts)].Address); } }
        public UArray<SplineSegmentCarveOperationData> Splines { get { return new UArray<SplineSegmentCarveOperationData>(this[nameof(Splines)].Address); } }
        public UArray<CSGBuildOperationData> CSGBuilds { get { return new UArray<CSGBuildOperationData>(this[nameof(CSGBuilds)].Address); } }
        public UArray<TerrainSpawnDebrisOperationData> SpawnDebris { get { return new UArray<TerrainSpawnDebrisOperationData>(this[nameof(SpawnDebris)].Address); } }
        public UArray<int> DebrisInstanceComponentPairs { get { return new UArray<int>(this[nameof(DebrisInstanceComponentPairs)].Address); } }
        public UArray<uint> VisibleChunks { get { return new UArray<uint>(this[nameof(VisibleChunks)].Address); } }
        public int OperationCount { get { return this[nameof(OperationCount)].GetValue<int>(); } set { this[nameof(OperationCount)].SetValue<int>(value); } }
    }
    public class TerrainSpawnDebrisOperationData : Object
    {
        public TerrainSpawnDebrisOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public Vector Pos { get { return this[nameof(Pos)].As<Vector>(); } set { this["Pos"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public DebrisMesh Debris { get { return this[nameof(Debris)].As<DebrisMesh>(); } set { this["Debris"] = value; } }
    }
    public class CSGBuildOperationData : Object
    {
        public CSGBuildOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public Object CSGModel { get { return this[nameof(CSGModel)]; } set { this[nameof(CSGModel)] = value; } }
        public BakeSettings CarverSettings { get { return this[nameof(CarverSettings)].As<BakeSettings>(); } set { this["CarverSettings"] = value; } }
        public MatrixWithExactSync Transform { get { return this[nameof(Transform)].As<MatrixWithExactSync>(); } set { this["Transform"] = value; } }
    }
    public class SplineSegmentCarveOperationData : Object
    {
        public SplineSegmentCarveOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public UArray<CarveSplineSegment> Segments { get { return new UArray<CarveSplineSegment>(this[nameof(Segments)].Address); } }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public ECarveFilterType CarveFilter { get { return (ECarveFilterType)this[nameof(CarveFilter)].GetValue<int>(); } set { this[nameof(CarveFilter)].SetValue<int>((int)value); } }
        public EPreciousMaterialOptions Precious { get { return (EPreciousMaterialOptions)this[nameof(Precious)].GetValue<int>(); } set { this[nameof(Precious)].SetValue<int>((int)value); } }
        public LevelGenerationCarverComponent LevelGenerationComponent { get { return this[nameof(LevelGenerationComponent)].As<LevelGenerationCarverComponent>(); } set { this["LevelGenerationComponent"] = value; } }
    }
    public class MeltOperationData : Object
    {
        public MeltOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public UArray<Vector> Points { get { return new UArray<Vector>(this[nameof(Points)].Address); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class DrillOperationData : Object
    {
        public DrillOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public Vector HitPos { get { return this[nameof(HitPos)].As<Vector>(); } set { this["HitPos"] = value; } }
        public Vector Dir { get { return this[nameof(Dir)].As<Vector>(); } set { this["Dir"] = value; } }
        public Vector CarveSize { get { return this[nameof(CarveSize)].As<Vector>(); } set { this["CarveSize"] = value; } }
        public float CarveNoise { get { return this[nameof(CarveNoise)].GetValue<float>(); } set { this[nameof(CarveNoise)].SetValue<float>(value); } }
    }
    public class RemoveFloatingIslandOperationData : Object
    {
        public RemoveFloatingIslandOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
    }
    public class PickaxeDigOperationData : Object
    {
        public PickaxeDigOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public Vector HitPos { get { return this[nameof(HitPos)].As<Vector>(); } set { this["HitPos"] = value; } }
        public Vector Dir { get { return this[nameof(Dir)].As<Vector>(); } set { this["Dir"] = value; } }
        public float DigSize { get { return this[nameof(DigSize)].GetValue<float>(); } set { this[nameof(DigSize)].SetValue<float>(value); } }
        public Actor Miner { get { return this[nameof(Miner)].As<Actor>(); } set { this["Miner"] = value; } }
    }
    public class CarveWithSTLMeshOperationData : Object
    {
        public CarveWithSTLMeshOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public STLMeshCarver STLMeshCarver { get { return this[nameof(STLMeshCarver)].As<STLMeshCarver>(); } set { this["STLMeshCarver"] = value; } }
        public StaticMeshCarver StaticMeshCarver { get { return this[nameof(StaticMeshCarver)].As<StaticMeshCarver>(); } set { this["StaticMeshCarver"] = value; } }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public ECarveFilterType CarveFilter { get { return (ECarveFilterType)this[nameof(CarveFilter)].GetValue<int>(); } set { this[nameof(CarveFilter)].SetValue<int>((int)value); } }
        public EPreciousMaterialOptions Precious { get { return (EPreciousMaterialOptions)this[nameof(Precious)].GetValue<int>(); } set { this[nameof(Precious)].SetValue<int>((int)value); } }
        public MatrixWithExactSync Transform { get { return this[nameof(Transform)].As<MatrixWithExactSync>(); } set { this["Transform"] = value; } }
        public LevelGenerationCarverComponent LevelGenerationComponent { get { return this[nameof(LevelGenerationComponent)].As<LevelGenerationCarverComponent>(); } set { this["LevelGenerationComponent"] = value; } }
    }
    public class CarveWithColliderOperationData : Object
    {
        public CarveWithColliderOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public StaticMesh StaticMesh { get { return this[nameof(StaticMesh)].As<StaticMesh>(); } set { this["StaticMesh"] = value; } }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public ECarveFilterType CarveFilter { get { return (ECarveFilterType)this[nameof(CarveFilter)].GetValue<int>(); } set { this[nameof(CarveFilter)].SetValue<int>((int)value); } }
        public MatrixWithExactSync Transform { get { return this[nameof(Transform)].As<MatrixWithExactSync>(); } set { this["Transform"] = value; } }
        public LevelGenerationCarverComponent LevelGenerationComponent { get { return this[nameof(LevelGenerationComponent)].As<LevelGenerationCarverComponent>(); } set { this["LevelGenerationComponent"] = value; } }
        public float ExpensiveNoise { get { return this[nameof(ExpensiveNoise)].GetValue<float>(); } set { this[nameof(ExpensiveNoise)].SetValue<float>(value); } }
        public EPreciousMaterialOptions Precious { get { return (EPreciousMaterialOptions)this[nameof(Precious)].GetValue<int>(); } set { this[nameof(Precious)].SetValue<int>((int)value); } }
        public CarveOptionsCellSize CarveCellSize { get { return (CarveOptionsCellSize)this[nameof(CarveCellSize)].GetValue<int>(); } set { this[nameof(CarveCellSize)].SetValue<int>((int)value); } }
    }
    public class GrenadeExplodeOperationData : Object
    {
        public GrenadeExplodeOperationData(nint addr) : base(addr) { }
        public int OperationNumber { get { return this[nameof(OperationNumber)].GetValue<int>(); } set { this[nameof(OperationNumber)].SetValue<int>(value); } }
        public Vector HitPos { get { return this[nameof(HitPos)].As<Vector>(); } set { this["HitPos"] = value; } }
        public Vector Normal { get { return this[nameof(Normal)].As<Vector>(); } set { this["Normal"] = value; } }
        public float NormalOffset { get { return this[nameof(NormalOffset)].GetValue<float>(); } set { this[nameof(NormalOffset)].SetValue<float>(value); } }
        public float NormalSqueeze { get { return this[nameof(NormalSqueeze)].GetValue<float>(); } set { this[nameof(NormalSqueeze)].SetValue<float>(value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float Noise { get { return this[nameof(Noise)].GetValue<float>(); } set { this[nameof(Noise)].SetValue<float>(value); } }
        public float BurnThickness { get { return this[nameof(BurnThickness)].GetValue<float>(); } set { this[nameof(BurnThickness)].SetValue<float>(value); } }
        public bool UseBulletBurntMaterial { get { return this[nameof(UseBulletBurntMaterial)].Flag; } set { this[nameof(UseBulletBurntMaterial)].Flag = value; } }
        public bool DissolvePlatforms { get { return this[nameof(DissolvePlatforms)].Flag; } set { this[nameof(DissolvePlatforms)].Flag = value; } }
        public uint OverrideBurntMaterialHandle { get { return this[nameof(OverrideBurntMaterialHandle)].GetValue<uint>(); } set { this[nameof(OverrideBurntMaterialHandle)].SetValue<uint>(value); } }
    }
    public class DetailedTagQuery : Object
    {
        public DetailedTagQuery(nint addr) : base(addr) { }
        public Object Map { get { return this[nameof(Map)]; } set { this[nameof(Map)] = value; } }
    }
    public class DialogStruct : Object
    {
        public DialogStruct(nint addr) : base(addr) { }
        public bool Enabled { get { return this[nameof(Enabled)].Flag; } set { this[nameof(Enabled)].Flag = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object Audio { get { return this[nameof(Audio)]; } set { this[nameof(Audio)] = value; } }
        public EDialogRestriction Restriction { get { return (EDialogRestriction)this[nameof(Restriction)].GetValue<int>(); } set { this[nameof(Restriction)].SetValue<int>((int)value); } }
        public float Weigth { get { return this[nameof(Weigth)].GetValue<float>(); } set { this[nameof(Weigth)].SetValue<float>(value); } }
        public bool bIsValidEntry { get { return this[nameof(bIsValidEntry)].Flag; } set { this[nameof(bIsValidEntry)].Flag = value; } }
    }
    public class DifficultyMutatorInfo : Object
    {
        public DifficultyMutatorInfo(nint addr) : base(addr) { }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
    }
    public class VeteranComposition : Object
    {
        public VeteranComposition(nint addr) : base(addr) { }
        public RandFloatInterval Normal { get { return this[nameof(Normal)].As<RandFloatInterval>(); } set { this["Normal"] = value; } }
        public RandFloatInterval Large { get { return this[nameof(Large)].As<RandFloatInterval>(); } set { this["Large"] = value; } }
    }
    public class RandFloatInterval : Object
    {
        public RandFloatInterval(nint addr) : base(addr) { }
        public UArray<RandFloatIntervalItem> Intervals { get { return new UArray<RandFloatIntervalItem>(this[nameof(Intervals)].Address); } }
    }
    public class RandFloatIntervalItem : Object
    {
        public RandFloatIntervalItem(nint addr) : base(addr) { }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public RandRange range { get { return this[nameof(range)].As<RandRange>(); } set { this["range"] = value; } }
    }
    public class DiscordFactionRoleRequest : Object
    {
        public DiscordFactionRoleRequest(nint addr) : base(addr) { }
        public Object UserId { get { return this[nameof(UserId)]; } set { this[nameof(UserId)] = value; } }
        public int FactionID { get { return this[nameof(FactionID)].GetValue<int>(); } set { this[nameof(FactionID)].SetValue<int>(value); } }
        public Object SteamTicket { get { return this[nameof(SteamTicket)]; } set { this[nameof(SteamTicket)] = value; } }
    }
    public class DiscordUserInfoRequest : Object
    {
        public DiscordUserInfoRequest(nint addr) : base(addr) { }
        public Object UserId { get { return this[nameof(UserId)]; } set { this[nameof(UserId)] = value; } }
    }
    public class DiscordFSDRichPresence : Object
    {
        public DiscordFSDRichPresence(nint addr) : base(addr) { }
        public Object State { get { return this[nameof(State)]; } set { this[nameof(State)] = value; } }
        public Object details { get { return this[nameof(details)]; } set { this[nameof(details)] = value; } }
        public Object matchSecret { get { return this[nameof(matchSecret)]; } set { this[nameof(matchSecret)] = value; } }
        public Object joinSecret { get { return this[nameof(joinSecret)]; } set { this[nameof(joinSecret)] = value; } }
        public Object partyId { get { return this[nameof(partyId)]; } set { this[nameof(partyId)] = value; } }
        public Object smallImageText { get { return this[nameof(smallImageText)]; } set { this[nameof(smallImageText)] = value; } }
        public Object LargeImageText { get { return this[nameof(LargeImageText)]; } set { this[nameof(LargeImageText)] = value; } }
        public int startTimestamp { get { return this[nameof(startTimestamp)].GetValue<int>(); } set { this[nameof(startTimestamp)].SetValue<int>(value); } }
        public int partySize { get { return this[nameof(partySize)].GetValue<int>(); } set { this[nameof(partySize)].SetValue<int>(value); } }
        public EDiscordBiomeType BiomeType { get { return (EDiscordBiomeType)this[nameof(BiomeType)].GetValue<int>(); } set { this[nameof(BiomeType)].SetValue<int>((int)value); } }
        public EDiscordMissionType MissionType { get { return (EDiscordMissionType)this[nameof(MissionType)].GetValue<int>(); } set { this[nameof(MissionType)].SetValue<int>((int)value); } }
        public bool bIsPureSolo { get { return this[nameof(bIsPureSolo)].Flag; } set { this[nameof(bIsPureSolo)].Flag = value; } }
    }
    public class DiscordEoMData : Object
    {
        public DiscordEoMData(nint addr) : base(addr) { }
        public Object nick { get { return this[nameof(nick)]; } set { this[nameof(nick)] = value; } }
        public Object UserId { get { return this[nameof(UserId)]; } set { this[nameof(UserId)] = value; } }
    }
    public class DiscordServerInviteData : Object
    {
        public DiscordServerInviteData(nint addr) : base(addr) { }
        public Object code { get { return this[nameof(code)]; } set { this[nameof(code)] = value; } }
        public int approximate_presence_count { get { return this[nameof(approximate_presence_count)].GetValue<int>(); } set { this[nameof(approximate_presence_count)].SetValue<int>(value); } }
        public int approximate_member_count { get { return this[nameof(approximate_member_count)].GetValue<int>(); } set { this[nameof(approximate_member_count)].SetValue<int>(value); } }
        public DiscordServerInviteGuildData guild { get { return this[nameof(guild)].As<DiscordServerInviteGuildData>(); } set { this["guild"] = value; } }
    }
    public class DiscordServerInviteGuildData : Object
    {
        public DiscordServerInviteGuildData(nint addr) : base(addr) { }
        public Object banner { get { return this[nameof(banner)]; } set { this[nameof(banner)] = value; } }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public Object splash { get { return this[nameof(splash)]; } set { this[nameof(splash)] = value; } }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
    }
    public class DiscordRewardNotification : Object
    {
        public DiscordRewardNotification(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public LinearColor IconColor { get { return this[nameof(IconColor)].As<LinearColor>(); } set { this["IconColor"] = value; } }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
    }
    public class DoubleDrillDamageItem : Object
    {
        public DoubleDrillDamageItem(nint addr) : base(addr) { }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Vector_NetQuantizeNormal Normal { get { return this[nameof(Normal)].As<Vector_NetQuantizeNormal>(); } set { this["Normal"] = value; } }
        public FSDPhysicalMaterial Material { get { return this[nameof(Material)].As<FSDPhysicalMaterial>(); } set { this["Material"] = value; } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public byte BoneIndex { get { return this[nameof(BoneIndex)].GetValue<byte>(); } set { this[nameof(BoneIndex)].SetValue<byte>(value); } }
    }
    public class DeathIntroSettings : Object
    {
        public DeathIntroSettings(nint addr) : base(addr) { }
        public float FirstPersonDuration { get { return this[nameof(FirstPersonDuration)].GetValue<float>(); } set { this[nameof(FirstPersonDuration)].SetValue<float>(value); } }
        public float FadeToBlackDelay { get { return this[nameof(FadeToBlackDelay)].GetValue<float>(); } set { this[nameof(FadeToBlackDelay)].SetValue<float>(value); } }
        public float FadeToBlackDuration { get { return this[nameof(FadeToBlackDuration)].GetValue<float>(); } set { this[nameof(FadeToBlackDuration)].SetValue<float>(value); } }
        public float FadeFromBlackDelay { get { return this[nameof(FadeFromBlackDelay)].GetValue<float>(); } set { this[nameof(FadeFromBlackDelay)].SetValue<float>(value); } }
        public float FadeFromBlackDuration { get { return this[nameof(FadeFromBlackDuration)].GetValue<float>(); } set { this[nameof(FadeFromBlackDuration)].SetValue<float>(value); } }
        public float ZoomOutDuration { get { return this[nameof(ZoomOutDuration)].GetValue<float>(); } set { this[nameof(ZoomOutDuration)].SetValue<float>(value); } }
        public float ZoomOutStartDistance { get { return this[nameof(ZoomOutStartDistance)].GetValue<float>(); } set { this[nameof(ZoomOutStartDistance)].SetValue<float>(value); } }
    }
    public class BarleySpawnItem : Object
    {
        public BarleySpawnItem(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
    }
    public class DroneLightSetting : Object
    {
        public DroneLightSetting(nint addr) : base(addr) { }
        public Color Color { get { return this[nameof(Color)].As<Color>(); } set { this["Color"] = value; } }
        public float Intensity { get { return this[nameof(Intensity)].GetValue<float>(); } set { this[nameof(Intensity)].SetValue<float>(value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class MiningPodDialogs : Object
    {
        public MiningPodDialogs(nint addr) : base(addr) { }
        public DialogDataAsset DepartingIn5Min { get { return this[nameof(DepartingIn5Min)].As<DialogDataAsset>(); } set { this["DepartingIn5Min"] = value; } }
        public DialogDataAsset DepartingIn4Min { get { return this[nameof(DepartingIn4Min)].As<DialogDataAsset>(); } set { this["DepartingIn4Min"] = value; } }
        public DialogDataAsset DepartingIn3Min { get { return this[nameof(DepartingIn3Min)].As<DialogDataAsset>(); } set { this["DepartingIn3Min"] = value; } }
        public DialogDataAsset DepartingIn2Min { get { return this[nameof(DepartingIn2Min)].As<DialogDataAsset>(); } set { this["DepartingIn2Min"] = value; } }
        public DialogDataAsset DepartingIn1Min { get { return this[nameof(DepartingIn1Min)].As<DialogDataAsset>(); } set { this["DepartingIn1Min"] = value; } }
        public DialogDataAsset DepartingIn30Sec { get { return this[nameof(DepartingIn30Sec)].As<DialogDataAsset>(); } set { this["DepartingIn30Sec"] = value; } }
        public DialogDataAsset DepartingIn10Sec { get { return this[nameof(DepartingIn10Sec)].As<DialogDataAsset>(); } set { this["DepartingIn10Sec"] = value; } }
        public DialogDataAsset DepartingIn123Sec { get { return this[nameof(DepartingIn123Sec)].As<DialogDataAsset>(); } set { this["DepartingIn123Sec"] = value; } }
        public DialogDataAsset Departed { get { return this[nameof(Departed)].As<DialogDataAsset>(); } set { this["Departed"] = value; } }
        public DialogDataAsset DeepDiveDeparted { get { return this[nameof(DeepDiveDeparted)].As<DialogDataAsset>(); } set { this["DeepDiveDeparted"] = value; } }
    }
    public class PlayerStatsAnalyticInfo : Object
    {
        public PlayerStatsAnalyticInfo(nint addr) : base(addr) { }
    }
    public class SchematicAnalyticInfo : Object
    {
        public SchematicAnalyticInfo(nint addr) : base(addr) { }
    }
    public class CharacterLoadoutAnalyticInfo : Object
    {
        public CharacterLoadoutAnalyticInfo(nint addr) : base(addr) { }
    }
    public class WeaponAnalyticInfo : Object
    {
        public WeaponAnalyticInfo(nint addr) : base(addr) { }
    }
    public class UserStatsAnalyticInfo : Object
    {
        public UserStatsAnalyticInfo(nint addr) : base(addr) { }
    }
    public class MissionAnalyticInfo : Object
    {
        public MissionAnalyticInfo(nint addr) : base(addr) { }
    }
    public class EliminationDescriptors : Object
    {
        public EliminationDescriptors(nint addr) : base(addr) { }
        public UArray<EnemyDescriptor> Descriptors { get { return new UArray<EnemyDescriptor>(this[nameof(Descriptors)].Address); } }
    }
    public class EliminationTarget : Object
    {
        public EliminationTarget(nint addr) : base(addr) { }
        public UArray<FSDPawn> Targets { get { return new UArray<FSDPawn>(this[nameof(Targets)].Address); } }
    }
    public class EncounterManagerItem : Object
    {
        public EncounterManagerItem(nint addr) : base(addr) { }
        public UArray<ManagedEncounterItem> ManagedEcnounterItems { get { return new UArray<ManagedEncounterItem>(this[nameof(ManagedEcnounterItems)].Address); } }
        public UArray<PrePlacedEncounterItem> PrePlacedEncounterItems { get { return new UArray<PrePlacedEncounterItem>(this[nameof(PrePlacedEncounterItems)].Address); } }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public bool IsRoom { get { return this[nameof(IsRoom)].Flag; } set { this[nameof(IsRoom)].Flag = value; } }
        public Object Callback { get { return this[nameof(Callback)]; } set { this[nameof(Callback)] = value; } }
    }
    public class PrePlacedEncounterItem : Object
    {
        public PrePlacedEncounterItem(nint addr) : base(addr) { }
        public EnemyDescriptor descriptor { get { return this[nameof(descriptor)].As<EnemyDescriptor>(); } set { this["descriptor"] = value; } }
        public Transform Location { get { return this[nameof(Location)].As<Transform>(); } set { this["Location"] = value; } }
        public EncounterActor EncounterActor { get { return this[nameof(EncounterActor)].As<EncounterActor>(); } set { this["EncounterActor"] = value; } }
        public int RoomID { get { return this[nameof(RoomID)].GetValue<int>(); } set { this[nameof(RoomID)].SetValue<int>(value); } }
        public bool IsRoomID { get { return this[nameof(IsRoomID)].Flag; } set { this[nameof(IsRoomID)].Flag = value; } }
    }
    public class ManagedEncounterItem : Object
    {
        public ManagedEncounterItem(nint addr) : base(addr) { }
        public EnemyDescriptor descriptor { get { return this[nameof(descriptor)].As<EnemyDescriptor>(); } set { this["descriptor"] = value; } }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class EncounterSpecialItem : Object
    {
        public EncounterSpecialItem(nint addr) : base(addr) { }
        public EnemyDescriptor enemy { get { return this[nameof(enemy)].As<EnemyDescriptor>(); } set { this["enemy"] = value; } }
        public float BaseChance { get { return this[nameof(BaseChance)].GetValue<float>(); } set { this[nameof(BaseChance)].SetValue<float>(value); } }
        public bool CanSpawnInDeepDive { get { return this[nameof(CanSpawnInDeepDive)].Flag; } set { this[nameof(CanSpawnInDeepDive)].Flag = value; } }
    }
    public class EncounterRareCritterItem : Object
    {
        public EncounterRareCritterItem(nint addr) : base(addr) { }
        public RareCritterDescriptor Critter { get { return this[nameof(Critter)].As<RareCritterDescriptor>(); } set { this["Critter"] = value; } }
        public float Chance { get { return this[nameof(Chance)].GetValue<float>(); } set { this[nameof(Chance)].SetValue<float>(value); } }
    }
    public class GliderAnimSync : Object
    {
        public GliderAnimSync(nint addr) : base(addr) { }
        public float Time { get { return this[nameof(Time)].GetValue<float>(); } set { this[nameof(Time)].SetValue<float>(value); } }
        public float AnimAlphaSync { get { return this[nameof(AnimAlphaSync)].GetValue<float>(); } set { this[nameof(AnimAlphaSync)].SetValue<float>(value); } }
        public Vector VelocityPercent { get { return this[nameof(VelocityPercent)].As<Vector>(); } set { this["VelocityPercent"] = value; } }
        public bool DownUpBlendBool { get { return this[nameof(DownUpBlendBool)].Flag; } set { this[nameof(DownUpBlendBool)].Flag = value; } }
        public bool RightLeftBlendBool { get { return this[nameof(RightLeftBlendBool)].Flag; } set { this[nameof(RightLeftBlendBool)].Flag = value; } }
        public float VerticalAddBlend { get { return this[nameof(VerticalAddBlend)].GetValue<float>(); } set { this[nameof(VerticalAddBlend)].SetValue<float>(value); } }
        public float HorizontalAddBlend { get { return this[nameof(HorizontalAddBlend)].GetValue<float>(); } set { this[nameof(HorizontalAddBlend)].SetValue<float>(value); } }
    }
    public class TestAnimInstanceProxy : AnimInstanceProxy
    {
        public TestAnimInstanceProxy(nint addr) : base(addr) { }
        public bool IsAlive { get { return this[nameof(IsAlive)].Flag; } set { this[nameof(IsAlive)].Flag = value; } }
        public float RandomStartPosition { get { return this[nameof(RandomStartPosition)].GetValue<float>(); } set { this[nameof(RandomStartPosition)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public bool IsMoving { get { return this[nameof(IsMoving)].Flag; } set { this[nameof(IsMoving)].Flag = value; } }
        public float WalkCyclePlayRate { get { return this[nameof(WalkCyclePlayRate)].GetValue<float>(); } set { this[nameof(WalkCyclePlayRate)].SetValue<float>(value); } }
    }
    public class ControlEnemyState : Object
    {
        public ControlEnemyState(nint addr) : base(addr) { }
        public DeepPathfinderCharacter ControlledEnemy { get { return this[nameof(ControlledEnemy)].As<DeepPathfinderCharacter>(); } set { this["ControlledEnemy"] = value; } }
        public Transform InitialTargetTransform { get { return this[nameof(InitialTargetTransform)].As<Transform>(); } set { this["InitialTargetTransform"] = value; } }
        public float InitialTargetBlendTotalTime { get { return this[nameof(InitialTargetBlendTotalTime)].GetValue<float>(); } set { this[nameof(InitialTargetBlendTotalTime)].SetValue<float>(value); } }
        public Vector InitialCharacterVelocity { get { return this[nameof(InitialCharacterVelocity)].As<Vector>(); } set { this["InitialCharacterVelocity"] = value; } }
        public Vector InitialEnemyVelocity { get { return this[nameof(InitialEnemyVelocity)].As<Vector>(); } set { this["InitialEnemyVelocity"] = value; } }
    }
    public class EnemyDebris : Object
    {
        public EnemyDebris(nint addr) : base(addr) { }
        public float InfluenceRange { get { return this[nameof(InfluenceRange)].GetValue<float>(); } set { this[nameof(InfluenceRange)].SetValue<float>(value); } }
        public UArray<DebrisBase> Debris { get { return new UArray<DebrisBase>(this[nameof(Debris)].Address); } }
    }
    public class SpawnRarityItem : Object
    {
        public SpawnRarityItem(nint addr) : base(addr) { }
        public float Duration { get { return this[nameof(Duration)].GetValue<float>(); } set { this[nameof(Duration)].SetValue<float>(value); } }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
    }
    public class EnemyGroupDescriptorItem : Object
    {
        public EnemyGroupDescriptorItem(nint addr) : base(addr) { }
        public EnemyDescriptor EnemyDescriptor { get { return this[nameof(EnemyDescriptor)].As<EnemyDescriptor>(); } set { this["EnemyDescriptor"] = value; } }
    }
    public class EnemyGroupDescriptorSpawnItem : Object
    {
        public EnemyGroupDescriptorSpawnItem(nint addr) : base(addr) { }
        public EnemyDescriptor enemy { get { return this[nameof(enemy)].As<EnemyDescriptor>(); } set { this["enemy"] = value; } }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
    }
    public class EnemyAttackDescription : Object
    {
        public EnemyAttackDescription(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public EEnemyAttackType range { get { return (EEnemyAttackType)this[nameof(range)].GetValue<int>(); } set { this[nameof(range)].SetValue<int>((int)value); } }
        public EDamageType DamageType { get { return (EDamageType)this[nameof(DamageType)].GetValue<int>(); } set { this[nameof(DamageType)].SetValue<int>((int)value); } }
    }
    public class SpawnEffectsArray : FastArraySerializer
    {
        public SpawnEffectsArray(nint addr) : base(addr) { }
        public UArray<SpawnEffectItem> Items { get { return new UArray<SpawnEffectItem>(this[nameof(Items)].Address); } }
    }
    public class SpawnEffectItem : FastArraySerializerItem
    {
        public SpawnEffectItem(nint addr) : base(addr) { }
        public ECreatureSize CreatureSize { get { return (ECreatureSize)this[nameof(CreatureSize)].GetValue<int>(); } set { this[nameof(CreatureSize)].SetValue<int>((int)value); } }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
    }
    public class SpawnQueueItem : Object
    {
        public SpawnQueueItem(nint addr) : base(addr) { }
        public Object EnemyClass { get { return this[nameof(EnemyClass)]; } set { this[nameof(EnemyClass)] = value; } }
        public EnemyDescriptor enemy { get { return this[nameof(enemy)].As<EnemyDescriptor>(); } set { this["enemy"] = value; } }
        public Object Callback { get { return this[nameof(Callback)]; } set { this[nameof(Callback)] = value; } }
    }
    public class SpawnRarityModifierItem : Object
    {
        public SpawnRarityModifierItem(nint addr) : base(addr) { }
    }
    public class EnemySpawnItem : Object
    {
        public EnemySpawnItem(nint addr) : base(addr) { }
        public EnemyDescriptor enemy { get { return this[nameof(enemy)].As<EnemyDescriptor>(); } set { this["enemy"] = value; } }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
        public float VeteranComposition { get { return this[nameof(VeteranComposition)].GetValue<float>(); } set { this[nameof(VeteranComposition)].SetValue<float>(value); } }
    }
    public class MUSTBEHERETOCOMPILE : Object
    {
        public MUSTBEHERETOCOMPILE(nint addr) : base(addr) { }
    }
    public class WaveEntry : Object
    {
        public WaveEntry(nint addr) : base(addr) { }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public Object WaveController { get { return this[nameof(WaveController)]; } set { this[nameof(WaveController)] = value; } }
    }
    public class EscortMuleMovementState : Object
    {
        public EscortMuleMovementState(nint addr) : base(addr) { }
        public Transform TargetTransform { get { return this[nameof(TargetTransform)].As<Transform>(); } set { this["TargetTransform"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public Quat AngularVelocity { get { return this[nameof(AngularVelocity)].As<Quat>(); } set { this["AngularVelocity"] = value; } }
    }
    public class EscortMuleExtractorSlot : Object
    {
        public EscortMuleExtractorSlot(nint addr) : base(addr) { }
        public EEscortExtractorState ExtractorState { get { return (EEscortExtractorState)this[nameof(ExtractorState)].GetValue<int>(); } set { this[nameof(ExtractorState)].SetValue<int>((int)value); } }
        public EEscortExtractorState LastState { get { return (EEscortExtractorState)this[nameof(LastState)].GetValue<int>(); } set { this[nameof(LastState)].SetValue<int>((int)value); } }
        public SceneComponent AttachPoint { get { return this[nameof(AttachPoint)].As<SceneComponent>(); } set { this["AttachPoint"] = value; } }
        public InstantUsable Usable { get { return this[nameof(Usable)].As<InstantUsable>(); } set { this["Usable"] = value; } }
        public WidgetComponent Widget { get { return this[nameof(Widget)].As<WidgetComponent>(); } set { this["Widget"] = value; } }
    }
    public class EscortMulePath : Object
    {
        public EscortMulePath(nint addr) : base(addr) { }
        public UArray<Vector> Path { get { return new UArray<Vector>(this[nameof(Path)].Address); } }
    }
    public class FSDDeepDiveResponse : Object
    {
        public FSDDeepDiveResponse(nint addr) : base(addr) { }
        public uint SeedV2 { get { return this[nameof(SeedV2)].GetValue<uint>(); } set { this[nameof(SeedV2)].SetValue<uint>(value); } }
        public Object ExpirationTime { get { return this[nameof(ExpirationTime)]; } set { this[nameof(ExpirationTime)] = value; } }
    }
    public class FSDWeeklySeedResponse : Object
    {
        public FSDWeeklySeedResponse(nint addr) : base(addr) { }
        public uint Seed { get { return this[nameof(Seed)].GetValue<uint>(); } set { this[nameof(Seed)].SetValue<uint>(value); } }
        public Object ExpirationTime { get { return this[nameof(ExpirationTime)]; } set { this[nameof(ExpirationTime)] = value; } }
    }
    public class FSDEventsResponse : Object
    {
        public FSDEventsResponse(nint addr) : base(addr) { }
        public UArray<BackendNotification> Notifications { get { return new UArray<BackendNotification>(this[nameof(Notifications)].Address); } }
        public UArray<FSDEventWithEnd> ActiveEventsWithEnd { get { return new UArray<FSDEventWithEnd>(this[nameof(ActiveEventsWithEnd)].Address); } }
    }
    public class BackendNotification : Object
    {
        public BackendNotification(nint addr) : base(addr) { }
        public Object Platform { get { return this[nameof(Platform)]; } set { this[nameof(Platform)] = value; } }
        public Object Header { get { return this[nameof(Header)]; } set { this[nameof(Header)] = value; } }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
        public Object MessageType { get { return this[nameof(MessageType)]; } set { this[nameof(MessageType)] = value; } }
        public Object Link { get { return this[nameof(Link)]; } set { this[nameof(Link)] = value; } }
    }
    public class FSDSeasonExpiryResponse : Object
    {
        public FSDSeasonExpiryResponse(nint addr) : base(addr) { }
        public Object SeasonExpirationTimeSteam { get { return this[nameof(SeasonExpirationTimeSteam)]; } set { this[nameof(SeasonExpirationTimeSteam)] = value; } }
        public Object SeasonExpirationTimeSony { get { return this[nameof(SeasonExpirationTimeSony)]; } set { this[nameof(SeasonExpirationTimeSony)] = value; } }
        public Object SeasonExpirationTimeGDK { get { return this[nameof(SeasonExpirationTimeGDK)]; } set { this[nameof(SeasonExpirationTimeGDK)] = value; } }
    }
    public class SubObjective : Object
    {
        public SubObjective(nint addr) : base(addr) { }
        public DialogDataAsset OnProgressShout { get { return this[nameof(OnProgressShout)].As<DialogDataAsset>(); } set { this["OnProgressShout"] = value; } }
        public DialogDataAsset OnCompletedShout { get { return this[nameof(OnCompletedShout)].As<DialogDataAsset>(); } set { this["OnCompletedShout"] = value; } }
        public Object ObjectiveText { get { return this[nameof(ObjectiveText)]; } set { this[nameof(ObjectiveText)] = value; } }
        public int Required { get { return this[nameof(Required)].GetValue<int>(); } set { this[nameof(Required)].SetValue<int>(value); } }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
    }
    public class SmartSpawnEntry : Object
    {
        public SmartSpawnEntry(nint addr) : base(addr) { }
    }
    public class FacilityGeneratorEnounter : Object
    {
        public FacilityGeneratorEnounter(nint addr) : base(addr) { }
        public UArray<EnemyDescriptor> Enemies { get { return new UArray<EnemyDescriptor>(this[nameof(Enemies)].Address); } }
        public float Difficulty { get { return this[nameof(Difficulty)].GetValue<float>(); } set { this[nameof(Difficulty)].SetValue<float>(value); } }
        public RandInterval Diversity { get { return this[nameof(Diversity)].As<RandInterval>(); } set { this["Diversity"] = value; } }
    }
    public class RandInterval : Object
    {
        public RandInterval(nint addr) : base(addr) { }
        public UArray<RandIntervalItem> Intervals { get { return new UArray<RandIntervalItem>(this[nameof(Intervals)].Address); } }
    }
    public class RandIntervalItem : Object
    {
        public RandIntervalItem(nint addr) : base(addr) { }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public IRandRange range { get { return this[nameof(range)].As<IRandRange>(); } set { this["range"] = value; } }
    }
    public class FadeData : Object
    {
        public FadeData(nint addr) : base(addr) { }
        public bool bEnabled { get { return this[nameof(bEnabled)].Flag; } set { this[nameof(bEnabled)].Flag = value; } }
        public bool bShowDebugOutput { get { return this[nameof(bShowDebugOutput)].Flag; } set { this[nameof(bShowDebugOutput)].Flag = value; } }
        public Object WidgetType { get { return this[nameof(WidgetType)]; } set { this[nameof(WidgetType)] = value; } }
        public FSDLevelLoadingPersistentWidget Widget { get { return this[nameof(Widget)].As<FSDLevelLoadingPersistentWidget>(); } set { this["Widget"] = value; } }
        public float CurrentFade { get { return this[nameof(CurrentFade)].GetValue<float>(); } set { this[nameof(CurrentFade)].SetValue<float>(value); } }
        public float TargetFade { get { return this[nameof(TargetFade)].GetValue<float>(); } set { this[nameof(TargetFade)].SetValue<float>(value); } }
        public float FadeSpeed { get { return this[nameof(FadeSpeed)].GetValue<float>(); } set { this[nameof(FadeSpeed)].SetValue<float>(value); } }
        public float Delay { get { return this[nameof(Delay)].GetValue<float>(); } set { this[nameof(Delay)].SetValue<float>(value); } }
        public bool bFadeWorldOnly { get { return this[nameof(bFadeWorldOnly)].Flag; } set { this[nameof(bFadeWorldOnly)].Flag = value; } }
        public bool bCapFramerate { get { return this[nameof(bCapFramerate)].Flag; } set { this[nameof(bCapFramerate)].Flag = value; } }
        public bool bToSpaceRig { get { return this[nameof(bToSpaceRig)].Flag; } set { this[nameof(bToSpaceRig)].Flag = value; } }
        public Texture LoadingImage { get { return this[nameof(LoadingImage)].As<Texture>(); } set { this["LoadingImage"] = value; } }
        public Object DebugMsg { get { return this[nameof(DebugMsg)]; } set { this[nameof(DebugMsg)] = value; } }
    }
    public class FakeMoveState : Object
    {
        public FakeMoveState(nint addr) : base(addr) { }
        public Vector Pos1 { get { return this[nameof(Pos1)].As<Vector>(); } set { this["Pos1"] = value; } }
        public Vector Pos2 { get { return this[nameof(Pos2)].As<Vector>(); } set { this["Pos2"] = value; } }
        public Vector Vel { get { return this[nameof(Vel)].As<Vector>(); } set { this["Vel"] = value; } }
    }
    public class FakeMoverState : Object
    {
        public FakeMoverState(nint addr) : base(addr) { }
        public float TickRate { get { return this[nameof(TickRate)].GetValue<float>(); } set { this[nameof(TickRate)].SetValue<float>(value); } }
        public float TickTime { get { return this[nameof(TickTime)].GetValue<float>(); } set { this[nameof(TickTime)].SetValue<float>(value); } }
        public Vector PrevPos { get { return this[nameof(PrevPos)].As<Vector>(); } set { this["PrevPos"] = value; } }
        public Vector NextPos { get { return this[nameof(NextPos)].As<Vector>(); } set { this["NextPos"] = value; } }
        public Vector PrevSurfaceNormal { get { return this[nameof(PrevSurfaceNormal)].As<Vector>(); } set { this["PrevSurfaceNormal"] = value; } }
        public Vector NextSurfaceNormal { get { return this[nameof(NextSurfaceNormal)].As<Vector>(); } set { this["NextSurfaceNormal"] = value; } }
        public float AccumulatedTime { get { return this[nameof(AccumulatedTime)].GetValue<float>(); } set { this[nameof(AccumulatedTime)].SetValue<float>(value); } }
        public Actor Target { get { return this[nameof(Target)].As<Actor>(); } set { this["Target"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public bool NearSurface { get { return this[nameof(NearSurface)].Flag; } set { this[nameof(NearSurface)].Flag = value; } }
        public float SignedDistToSurface { get { return this[nameof(SignedDistToSurface)].GetValue<float>(); } set { this[nameof(SignedDistToSurface)].SetValue<float>(value); } }
    }
    public class FakeMoverTarget : Object
    {
        public FakeMoverTarget(nint addr) : base(addr) { }
        public float InfluenceDistance { get { return this[nameof(InfluenceDistance)].GetValue<float>(); } set { this[nameof(InfluenceDistance)].SetValue<float>(value); } }
        public float TargetDistance { get { return this[nameof(TargetDistance)].GetValue<float>(); } set { this[nameof(TargetDistance)].SetValue<float>(value); } }
        public float GetCloserAirAcceleration { get { return this[nameof(GetCloserAirAcceleration)].GetValue<float>(); } set { this[nameof(GetCloserAirAcceleration)].SetValue<float>(value); } }
        public float GetAwayAirAcceleration { get { return this[nameof(GetAwayAirAcceleration)].GetValue<float>(); } set { this[nameof(GetAwayAirAcceleration)].SetValue<float>(value); } }
        public float GetCloserGroundAcceleration { get { return this[nameof(GetCloserGroundAcceleration)].GetValue<float>(); } set { this[nameof(GetCloserGroundAcceleration)].SetValue<float>(value); } }
        public float GetAwayGroundAcceleration { get { return this[nameof(GetAwayGroundAcceleration)].GetValue<float>(); } set { this[nameof(GetAwayGroundAcceleration)].SetValue<float>(value); } }
        public float MinDistance { get { return this[nameof(MinDistance)].GetValue<float>(); } set { this[nameof(MinDistance)].SetValue<float>(value); } }
    }
    public class FakeMoverPropulsion : Object
    {
        public FakeMoverPropulsion(nint addr) : base(addr) { }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public float AirAcceleration { get { return this[nameof(AirAcceleration)].GetValue<float>(); } set { this[nameof(AirAcceleration)].SetValue<float>(value); } }
        public float AirDeceleration { get { return this[nameof(AirDeceleration)].GetValue<float>(); } set { this[nameof(AirDeceleration)].SetValue<float>(value); } }
        public float GroundAcceleration { get { return this[nameof(GroundAcceleration)].GetValue<float>(); } set { this[nameof(GroundAcceleration)].SetValue<float>(value); } }
        public float GroundDeceleration { get { return this[nameof(GroundDeceleration)].GetValue<float>(); } set { this[nameof(GroundDeceleration)].SetValue<float>(value); } }
    }
    public class FlareMeta : Object
    {
        public FlareMeta(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public float Inhibit { get { return this[nameof(Inhibit)].GetValue<float>(); } set { this[nameof(Inhibit)].SetValue<float>(value); } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public float InvRadius { get { return this[nameof(InvRadius)].GetValue<float>(); } set { this[nameof(InvRadius)].SetValue<float>(value); } }
        public Vector Pos { get { return this[nameof(Pos)].As<Vector>(); } set { this["Pos"] = value; } }
        public bool Moving { get { return this[nameof(Moving)].Flag; } set { this[nameof(Moving)].Flag = value; } }
    }
    public class FloatPerkEffect : Object
    {
        public FloatPerkEffect(nint addr) : base(addr) { }
        public FloatPerkActivation PerkActivation { get { return this[nameof(PerkActivation)].As<FloatPerkActivation>(); } set { this["PerkActivation"] = value; } }
        public Object FormattedDescription { get { return this[nameof(FormattedDescription)]; } set { this[nameof(FormattedDescription)] = value; } }
        public UArray<FloatPerkRankValue> RankValues { get { return new UArray<FloatPerkRankValue>(this[nameof(RankValues)].Address); } }
    }
    public class FloatPerkRankValue : Object
    {
        public FloatPerkRankValue(nint addr) : base(addr) { }
        public int RankIndex { get { return this[nameof(RankIndex)].GetValue<int>(); } set { this[nameof(RankIndex)].SetValue<int>(value); } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class FloatPerkRank : Object
    {
        public FloatPerkRank(nint addr) : base(addr) { }
        public int Tier { get { return this[nameof(Tier)].GetValue<int>(); } set { this[nameof(Tier)].SetValue<int>(value); } }
        public int Cost { get { return this[nameof(Cost)].GetValue<int>(); } set { this[nameof(Cost)].SetValue<int>(value); } }
    }
    public class ForgingResult : Object
    {
        public ForgingResult(nint addr) : base(addr) { }
        public bool LevelledUp { get { return this[nameof(LevelledUp)].Flag; } set { this[nameof(LevelledUp)].Flag = value; } }
        public int RewardLevel { get { return this[nameof(RewardLevel)].GetValue<int>(); } set { this[nameof(RewardLevel)].SetValue<int>(value); } }
        public int RewardSeed { get { return this[nameof(RewardSeed)].GetValue<int>(); } set { this[nameof(RewardSeed)].SetValue<int>(value); } }
    }
    public class FormationDataItem : Object
    {
        public FormationDataItem(nint addr) : base(addr) { }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
    }
    public class Formation : Object
    {
        public Formation(nint addr) : base(addr) { }
        public FormationData FormationData { get { return this[nameof(FormationData)].As<FormationData>(); } set { this["FormationData"] = value; } }
    }
    public class FormationID : Object
    {
        public FormationID(nint addr) : base(addr) { }
    }
    public class InputDirectionSet : Object
    {
        public InputDirectionSet(nint addr) : base(addr) { }
        public UArray<EThawInputDirection> Directions { get { return new UArray<EThawInputDirection>(this[nameof(Directions)].Address); } }
        public int InputCount { get { return this[nameof(InputCount)].GetValue<int>(); } set { this[nameof(InputCount)].SetValue<int>(value); } }
        public bool IsSequence { get { return this[nameof(IsSequence)].Flag; } set { this[nameof(IsSequence)].Flag = value; } }
        public int MaxSubsequentDuplicates { get { return this[nameof(MaxSubsequentDuplicates)].GetValue<int>(); } set { this[nameof(MaxSubsequentDuplicates)].SetValue<int>(value); } }
    }
    public class DelegateStruct : Object
    {
        public DelegateStruct(nint addr) : base(addr) { }
    }
    public class PlatformSpecificEventPopup : Object
    {
        public PlatformSpecificEventPopup(nint addr) : base(addr) { }
        public EFSDTargetPlatform TargetPlatform { get { return (EFSDTargetPlatform)this[nameof(TargetPlatform)].GetValue<int>(); } set { this[nameof(TargetPlatform)].SetValue<int>((int)value); } }
        public Object PopupWidget { get { return this[nameof(PopupWidget)]; } set { this[nameof(PopupWidget)] = value; } }
    }
    public class FSDTagsRoot : Object
    {
        public FSDTagsRoot(nint addr) : base(addr) { }
        public FSDTagsAttitude Attitude { get { return this[nameof(Attitude)].As<FSDTagsAttitude>(); } set { this["Attitude"] = value; } }
        public FSDTagsSurfaceProperties SurfaceProperties { get { return this[nameof(SurfaceProperties)].As<FSDTagsSurfaceProperties>(); } set { this["SurfaceProperties"] = value; } }
    }
    public class FSDTagsSurfaceProperties : Object
    {
        public FSDTagsSurfaceProperties(nint addr) : base(addr) { }
        public GameplayTag MovingPlatform { get { return this[nameof(MovingPlatform)].As<GameplayTag>(); } set { this["MovingPlatform"] = value; } }
    }
    public class FSDTagsAttitude : Object
    {
        public FSDTagsAttitude(nint addr) : base(addr) { }
        public GameplayTag Friendly { get { return this[nameof(Friendly)].As<GameplayTag>(); } set { this["Friendly"] = value; } }
        public GameplayTag Neutral { get { return this[nameof(Neutral)].As<GameplayTag>(); } set { this["Neutral"] = value; } }
        public GameplayTag Hostile { get { return this[nameof(Hostile)].As<GameplayTag>(); } set { this["Hostile"] = value; } }
    }
    public class GeneratedMissionSeed : Object
    {
        public GeneratedMissionSeed(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public GlobalMissionSeed GlobalSeed { get { return this[nameof(GlobalSeed)].As<GlobalMissionSeed>(); } set { this["GlobalSeed"] = value; } }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public MissionTemplate Template { get { return this[nameof(Template)].As<MissionTemplate>(); } set { this["Template"] = value; } }
        public MissionComplexity ComplexityLimit { get { return this[nameof(ComplexityLimit)].As<MissionComplexity>(); } set { this["ComplexityLimit"] = value; } }
        public MissionDuration DurationLimit { get { return this[nameof(DurationLimit)].As<MissionDuration>(); } set { this["DurationLimit"] = value; } }
        public MissionMutator Mutator { get { return this[nameof(Mutator)].As<MissionMutator>(); } set { this["Mutator"] = value; } }
        public MissionChallenge Challenge { get { return this[nameof(Challenge)].As<MissionChallenge>(); } set { this["Challenge"] = value; } }
        public UArray<MissionWarning> Warnings { get { return new UArray<MissionWarning>(this[nameof(Warnings)].Address); } }
        public UArray<FSDEvent> ActiveEvents { get { return new UArray<FSDEvent>(this[nameof(ActiveEvents)].Address); } }
        public EMissionStructure MissionStructure { get { return (EMissionStructure)this[nameof(MissionStructure)].GetValue<int>(); } set { this[nameof(MissionStructure)].SetValue<int>((int)value); } }
    }
    public class ReplicatedObjectives : Object
    {
        public ReplicatedObjectives(nint addr) : base(addr) { }
        public bool HasReplicated { get { return this[nameof(HasReplicated)].Flag; } set { this[nameof(HasReplicated)].Flag = value; } }
        public UArray<Objective> Objectives { get { return new UArray<Objective>(this[nameof(Objectives)].Address); } }
    }
    public class ModdingUISettings : Object
    {
        public ModdingUISettings(nint addr) : base(addr) { }
        public byte SortField { get { return this[nameof(SortField)].GetValue<byte>(); } set { this[nameof(SortField)].SetValue<byte>(value); } }
        public bool SortAscending { get { return this[nameof(SortAscending)].Flag; } set { this[nameof(SortAscending)].Flag = value; } }
        public Object ServerFilters { get { return this[nameof(ServerFilters)]; } set { this[nameof(ServerFilters)] = value; } }
        public bool bShowSandboxLabel { get { return this[nameof(bShowSandboxLabel)].Flag; } set { this[nameof(bShowSandboxLabel)].Flag = value; } }
    }
    public class NotificationEntry : Object
    {
        public NotificationEntry(nint addr) : base(addr) { }
        public Object ObjectInstance { get { return this[nameof(ObjectInstance)].As<Object>(); } set { this["ObjectInstance"] = value; } }
        public Object WindowClass { get { return this[nameof(WindowClass)]; } set { this[nameof(WindowClass)] = value; } }
    }
    public class FSDPlatformHelper : Object
    {
        public FSDPlatformHelper(nint addr) : base(addr) { }
    }
    public class FSDServicesEndpoints : Object
    {
        public FSDServicesEndpoints(nint addr) : base(addr) { }
    }
    public class SplineHitResult : Object
    {
        public SplineHitResult(nint addr) : base(addr) { }
        public HitResult HitResult { get { return this[nameof(HitResult)].As<HitResult>(); } set { this["HitResult"] = value; } }
        public float SplineDistance { get { return this[nameof(SplineDistance)].GetValue<float>(); } set { this[nameof(SplineDistance)].SetValue<float>(value); } }
        public Vector SplineTangent { get { return this[nameof(SplineTangent)].As<Vector>(); } set { this["SplineTangent"] = value; } }
    }
    public class Curve2DAppearance : Object
    {
        public Curve2DAppearance(nint addr) : base(addr) { }
        public float Thickness { get { return this[nameof(Thickness)].GetValue<float>(); } set { this[nameof(Thickness)].SetValue<float>(value); } }
        public LinearColor Tint { get { return this[nameof(Tint)].As<LinearColor>(); } set { this["Tint"] = value; } }
        public float OutlineThickness { get { return this[nameof(OutlineThickness)].GetValue<float>(); } set { this[nameof(OutlineThickness)].SetValue<float>(value); } }
        public LinearColor OutlineTint { get { return this[nameof(OutlineTint)].As<LinearColor>(); } set { this["OutlineTint"] = value; } }
    }
    public class SplineSegment : Object
    {
        public SplineSegment(nint addr) : base(addr) { }
        public Vector StartLocation { get { return this[nameof(StartLocation)].As<Vector>(); } set { this["StartLocation"] = value; } }
        public Vector StartTangent { get { return this[nameof(StartTangent)].As<Vector>(); } set { this["StartTangent"] = value; } }
        public Vector EndLocation { get { return this[nameof(EndLocation)].As<Vector>(); } set { this["EndLocation"] = value; } }
        public Vector EndTangent { get { return this[nameof(EndTangent)].As<Vector>(); } set { this["EndTangent"] = value; } }
    }
    public class NewPlayerMutator : Object
    {
        public NewPlayerMutator(nint addr) : base(addr) { }
        public int MinCampaignProgress { get { return this[nameof(MinCampaignProgress)].GetValue<int>(); } set { this[nameof(MinCampaignProgress)].SetValue<int>(value); } }
        public int MaxCampaignProgress { get { return this[nameof(MaxCampaignProgress)].GetValue<int>(); } set { this[nameof(MaxCampaignProgress)].SetValue<int>(value); } }
        public UArray<Mutator> Mutators { get { return new UArray<Mutator>(this[nameof(Mutators)].Address); } }
    }
    public class WidgetMover : Object
    {
        public WidgetMover(nint addr) : base(addr) { }
        public Object Widget { get { return this[nameof(Widget)]; } set { this[nameof(Widget)] = value; } }
    }
    public class CustomCounter : Object
    {
        public CustomCounter(nint addr) : base(addr) { }
        public Object OnCount { get { return this[nameof(OnCount)]; } set { this[nameof(OnCount)] = value; } }
        public Object Owner { get { return this[nameof(Owner)]; } set { this[nameof(Owner)] = value; } }
    }
    public class WidgetTextCounter : Object
    {
        public WidgetTextCounter(nint addr) : base(addr) { }
        public Object Widget { get { return this[nameof(Widget)]; } set { this[nameof(Widget)] = value; } }
    }
    public class WidgetFade : Object
    {
        public WidgetFade(nint addr) : base(addr) { }
        public Object Widget { get { return this[nameof(Widget)]; } set { this[nameof(Widget)] = value; } }
    }
    public class WidgetPing : Object
    {
        public WidgetPing(nint addr) : base(addr) { }
        public Object Widget { get { return this[nameof(Widget)]; } set { this[nameof(Widget)] = value; } }
    }
    public class TesterName : TableRowBase
    {
        public TesterName(nint addr) : base(addr) { }
        public Object SteamID { get { return this[nameof(SteamID)]; } set { this[nameof(SteamID)] = value; } }
        public Object SteamProfileName { get { return this[nameof(SteamProfileName)]; } set { this[nameof(SteamProfileName)] = value; } }
    }
    public class TipsTableRow : TableRowBase
    {
        public TipsTableRow(nint addr) : base(addr) { }
        public Object Header { get { return this[nameof(Header)]; } set { this[nameof(Header)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public Object InputText { get { return this[nameof(InputText)]; } set { this[nameof(InputText)] = value; } }
        public Object InputTextControllerOverride { get { return this[nameof(InputTextControllerOverride)]; } set { this[nameof(InputTextControllerOverride)] = value; } }
        public float TimeToDisplay { get { return this[nameof(TimeToDisplay)].GetValue<float>(); } set { this[nameof(TimeToDisplay)].SetValue<float>(value); } }
    }
    public class AssetsToLoadSettings : Object
    {
        public AssetsToLoadSettings(nint addr) : base(addr) { }
        public UArray<Object> ActorsPermanently { get { return new UArray<Object>(this[nameof(ActorsPermanently)].Address); } }
    }
    public class GVisibilityGroups : Object
    {
        public GVisibilityGroups(nint addr) : base(addr) { }
        public Object AllGroups { get { return this[nameof(AllGroups)]; } set { this[nameof(AllGroups)] = value; } }
        public HUDVisibilityGroup EnemyHealth { get { return this[nameof(EnemyHealth)].As<HUDVisibilityGroup>(); } set { this["EnemyHealth"] = value; } }
    }
    public class GDPlayerAndCharacterProgression : Object
    {
        public GDPlayerAndCharacterProgression(nint addr) : base(addr) { }
        public UArray<Object> RankedHeroClasses { get { return new UArray<Object>(this[nameof(RankedHeroClasses)].Address); } }
        public UArray<Object> TestHeroClasses { get { return new UArray<Object>(this[nameof(TestHeroClasses)].Address); } }
        public UArray<Object> LoadedClasses { get { return new UArray<Object>(this[nameof(LoadedClasses)].Address); } }
        public UArray<Object> PlayerRankNames { get { return new UArray<Object>(this[nameof(PlayerRankNames)].Address); } }
        public UArray<int> CharacterXPLevels { get { return new UArray<int>(this[nameof(CharacterXPLevels)].Address); } }
        public Object PlayerCharacterIDs { get { return this[nameof(PlayerCharacterIDs)]; } set { this[nameof(PlayerCharacterIDs)] = value; } }
    }
    public class GDMilestones : Object
    {
        public GDMilestones(nint addr) : base(addr) { }
        public UArray<MilestoneAsset> Milestones { get { return new UArray<MilestoneAsset>(this[nameof(Milestones)].Address); } }
    }
    public class GDGameStatsTracking : Object
    {
        public GDGameStatsTracking(nint addr) : base(addr) { }
        public GameplayTagContainer TotalEnemyKillsFilter { get { return this[nameof(TotalEnemyKillsFilter)].As<GameplayTagContainer>(); } set { this["TotalEnemyKillsFilter"] = value; } }
    }
    public class GDTerrainTypes : Object
    {
        public GDTerrainTypes(nint addr) : base(addr) { }
        public TerrainType Rock { get { return this[nameof(Rock)].As<TerrainType>(); } set { this["Rock"] = value; } }
        public TerrainType Dirt { get { return this[nameof(Dirt)].As<TerrainType>(); } set { this["Dirt"] = value; } }
    }
    public class UpgradeCostItem : Object
    {
        public UpgradeCostItem(nint addr) : base(addr) { }
        public UArray<int> Amounts { get { return new UArray<int>(this[nameof(Amounts)].Address); } }
    }
    public class GDAudio : Object
    {
        public GDAudio(nint addr) : base(addr) { }
        public Object FirstPersonHitscanAttenuationOverride { get { return this[nameof(FirstPersonHitscanAttenuationOverride)]; } set { this[nameof(FirstPersonHitscanAttenuationOverride)] = value; } }
        public Object DynamicReverbClass { get { return this[nameof(DynamicReverbClass)]; } set { this[nameof(DynamicReverbClass)] = value; } }
        public float SmallCaveRadius { get { return this[nameof(SmallCaveRadius)].GetValue<float>(); } set { this[nameof(SmallCaveRadius)].SetValue<float>(value); } }
        public float MediumCaveRadius { get { return this[nameof(MediumCaveRadius)].GetValue<float>(); } set { this[nameof(MediumCaveRadius)].SetValue<float>(value); } }
        public float LargeCaveRadius { get { return this[nameof(LargeCaveRadius)].GetValue<float>(); } set { this[nameof(LargeCaveRadius)].SetValue<float>(value); } }
        public float FirstPersonPriority { get { return this[nameof(FirstPersonPriority)].GetValue<float>(); } set { this[nameof(FirstPersonPriority)].SetValue<float>(value); } }
        public float ThirdPersonPriority { get { return this[nameof(ThirdPersonPriority)].GetValue<float>(); } set { this[nameof(ThirdPersonPriority)].SetValue<float>(value); } }
    }
    public class GDCharacterRetirement : Object
    {
        public GDCharacterRetirement(nint addr) : base(addr) { }
        public Object Campaigns { get { return this[nameof(Campaigns)]; } set { this[nameof(Campaigns)] = value; } }
        public Object RetirementCost { get { return this[nameof(RetirementCost)]; } set { this[nameof(RetirementCost)] = value; } }
        public UArray<float> CreditsCostMultipliers { get { return new UArray<float>(this[nameof(CreditsCostMultipliers)].Address); } }
        public UArray<float> ResourceCostMultipliers { get { return new UArray<float>(this[nameof(ResourceCostMultipliers)].Address); } }
    }
    public class RetirementCostItem : Object
    {
        public RetirementCostItem(nint addr) : base(addr) { }
        public Object RetirementCost { get { return this[nameof(RetirementCost)]; } set { this[nameof(RetirementCost)] = value; } }
    }
    public class GDDamageClasses : Object
    {
        public GDDamageClasses(nint addr) : base(addr) { }
        public DamageClass Falling { get { return this[nameof(Falling)].As<DamageClass>(); } set { this["Falling"] = value; } }
        public DamageClass Fire { get { return this[nameof(Fire)].As<DamageClass>(); } set { this["Fire"] = value; } }
        public DamageClass Burn { get { return this[nameof(Burn)].As<DamageClass>(); } set { this["Burn"] = value; } }
        public DamageClass Heat { get { return this[nameof(Heat)].As<DamageClass>(); } set { this["Heat"] = value; } }
        public DamageClass Disintegrate { get { return this[nameof(Disintegrate)].As<DamageClass>(); } set { this["Disintegrate"] = value; } }
        public DamageClass Physical { get { return this[nameof(Physical)].As<DamageClass>(); } set { this["Physical"] = value; } }
        public DamageClass Kinetic { get { return this[nameof(Kinetic)].As<DamageClass>(); } set { this["Kinetic"] = value; } }
        public DamageClass Explosive { get { return this[nameof(Explosive)].As<DamageClass>(); } set { this["Explosive"] = value; } }
        public DamageClass Cold { get { return this[nameof(Cold)].As<DamageClass>(); } set { this["Cold"] = value; } }
        public DamageClass Ice { get { return this[nameof(Ice)].As<DamageClass>(); } set { this["Ice"] = value; } }
        public DamageClass Freezing { get { return this[nameof(Freezing)].As<DamageClass>(); } set { this["Freezing"] = value; } }
        public DamageClass Corrosive { get { return this[nameof(Corrosive)].As<DamageClass>(); } set { this["Corrosive"] = value; } }
        public DamageClass Infectious { get { return this[nameof(Infectious)].As<DamageClass>(); } set { this["Infectious"] = value; } }
    }
    public class GDDifficulty : Object
    {
        public GDDifficulty(nint addr) : base(addr) { }
        public UArray<DifficultySetting> DifficultySettings { get { return new UArray<DifficultySetting>(this[nameof(DifficultySettings)].Address); } }
        public UArray<DifficultyMutatorSetupItem> DifficultyMutators { get { return new UArray<DifficultyMutatorSetupItem>(this[nameof(DifficultyMutators)].Address); } }
    }
    public class GDItemCategoryIDs : Object
    {
        public GDItemCategoryIDs(nint addr) : base(addr) { }
        public CategoryID OverclockID { get { return this[nameof(OverclockID)].As<CategoryID>(); } set { this["OverclockID"] = value; } }
        public CategoryID ItemSkinID { get { return this[nameof(ItemSkinID)].As<CategoryID>(); } set { this["ItemSkinID"] = value; } }
        public CategoryID VanityID { get { return this[nameof(VanityID)].As<CategoryID>(); } set { this["VanityID"] = value; } }
        public CategoryID PickaxePartID { get { return this[nameof(PickaxePartID)].As<CategoryID>(); } set { this["PickaxePartID"] = value; } }
        public CategoryID WeaponID { get { return this[nameof(WeaponID)].As<CategoryID>(); } set { this["WeaponID"] = value; } }
        public CategoryID CraftingID { get { return this[nameof(CraftingID)].As<CategoryID>(); } set { this["CraftingID"] = value; } }
        public CategoryID ForgeID { get { return this[nameof(ForgeID)].As<CategoryID>(); } set { this["ForgeID"] = value; } }
        public CategoryID BoscoSkinID { get { return this[nameof(BoscoSkinID)].As<CategoryID>(); } set { this["BoscoSkinID"] = value; } }
    }
    public class GDPerks : Object
    {
        public GDPerks(nint addr) : base(addr) { }
        public UArray<PerkAsset> PerkAssets { get { return new UArray<PerkAsset>(this[nameof(PerkAssets)].Address); } }
        public UArray<int> RequiredClaimsPerTier { get { return new UArray<int>(this[nameof(RequiredClaimsPerTier)].Address); } }
        public FloatPerkAsset IronWill { get { return this[nameof(IronWill)].As<FloatPerkAsset>(); } set { this["IronWill"] = value; } }
        public FloatPerkAsset DashPerk { get { return this[nameof(DashPerk)].As<FloatPerkAsset>(); } set { this["DashPerk"] = value; } }
        public FloatPerkAsset MarathonPerk { get { return this[nameof(MarathonPerk)].As<FloatPerkAsset>(); } set { this["MarathonPerk"] = value; } }
        public FloatPerkAsset ShieldLink { get { return this[nameof(ShieldLink)].As<FloatPerkAsset>(); } set { this["ShieldLink"] = value; } }
        public FloatPerkAsset Bezerk { get { return this[nameof(Bezerk)].As<FloatPerkAsset>(); } set { this["Bezerk"] = value; } }
        public FloatPerkAsset JumpBoots { get { return this[nameof(JumpBoots)].As<FloatPerkAsset>(); } set { this["JumpBoots"] = value; } }
        public FloatPerkAsset ImpactCompensators { get { return this[nameof(ImpactCompensators)].As<FloatPerkAsset>(); } set { this["ImpactCompensators"] = value; } }
        public FloatPerkAsset BeastMaster { get { return this[nameof(BeastMaster)].As<FloatPerkAsset>(); } set { this["BeastMaster"] = value; } }
        public FloatPerkAsset DownedBomb { get { return this[nameof(DownedBomb)].As<FloatPerkAsset>(); } set { this["DownedBomb"] = value; } }
        public FloatPerkAsset FieldMedic { get { return this[nameof(FieldMedic)].As<FloatPerkAsset>(); } set { this["FieldMedic"] = value; } }
        public FloatPerkAsset HeightenedSenses { get { return this[nameof(HeightenedSenses)].As<FloatPerkAsset>(); } set { this["HeightenedSenses"] = value; } }
        public FloatPerkAsset HoverBoots { get { return this[nameof(HoverBoots)].As<FloatPerkAsset>(); } set { this["HoverBoots"] = value; } }
        public FloatPerkAsset ActivePerkSlots { get { return this[nameof(ActivePerkSlots)].As<FloatPerkAsset>(); } set { this["ActivePerkSlots"] = value; } }
        public FloatPerkAsset PassivePerkSlots { get { return this[nameof(PassivePerkSlots)].As<FloatPerkAsset>(); } set { this["PassivePerkSlots"] = value; } }
    }
    public class GDResources : Object
    {
        public GDResources(nint addr) : base(addr) { }
        public ResourceData CreditsResource { get { return this[nameof(CreditsResource)].As<ResourceData>(); } set { this["CreditsResource"] = value; } }
        public ResourceData Fashionite { get { return this[nameof(Fashionite)].As<ResourceData>(); } set { this["Fashionite"] = value; } }
        public ResourceData MOMResource { get { return this[nameof(MOMResource)].As<ResourceData>(); } set { this["MOMResource"] = value; } }
        public ResourceData GoldResource { get { return this[nameof(GoldResource)].As<ResourceData>(); } set { this["GoldResource"] = value; } }
        public ResourceData NitraResource { get { return this[nameof(NitraResource)].As<ResourceData>(); } set { this["NitraResource"] = value; } }
        public ResourceData HollomiteResource { get { return this[nameof(HollomiteResource)].As<ResourceData>(); } set { this["HollomiteResource"] = value; } }
        public ResourceData MagniteResource { get { return this[nameof(MagniteResource)].As<ResourceData>(); } set { this["MagniteResource"] = value; } }
        public ResourceData NeromiteResource { get { return this[nameof(NeromiteResource)].As<ResourceData>(); } set { this["NeromiteResource"] = value; } }
        public ResourceData QuantriteResource { get { return this[nameof(QuantriteResource)].As<ResourceData>(); } set { this["QuantriteResource"] = value; } }
        public ResourceData UmaniteResource { get { return this[nameof(UmaniteResource)].As<ResourceData>(); } set { this["UmaniteResource"] = value; } }
        public ResourceData CropaniteResource { get { return this[nameof(CropaniteResource)].As<ResourceData>(); } set { this["CropaniteResource"] = value; } }
        public ResourceData DystrumResource { get { return this[nameof(DystrumResource)].As<ResourceData>(); } set { this["DystrumResource"] = value; } }
        public ResourceData IronResource { get { return this[nameof(IronResource)].As<ResourceData>(); } set { this["IronResource"] = value; } }
        public ResourceData EnorResource { get { return this[nameof(EnorResource)].As<ResourceData>(); } set { this["EnorResource"] = value; } }
        public ResourceData BismorResource { get { return this[nameof(BismorResource)].As<ResourceData>(); } set { this["BismorResource"] = value; } }
        public ResourceData OilShaleResource { get { return this[nameof(OilShaleResource)].As<ResourceData>(); } set { this["OilShaleResource"] = value; } }
        public ResourceData ErrorCubeResource { get { return this[nameof(ErrorCubeResource)].As<ResourceData>(); } set { this["ErrorCubeResource"] = value; } }
        public ResourceData CompressedGoldResource { get { return this[nameof(CompressedGoldResource)].As<ResourceData>(); } set { this["CompressedGoldResource"] = value; } }
        public ResourceData Barly1 { get { return this[nameof(Barly1)].As<ResourceData>(); } set { this["Barly1"] = value; } }
        public ResourceData Barly2 { get { return this[nameof(Barly2)].As<ResourceData>(); } set { this["Barly2"] = value; } }
        public ResourceData Barly3 { get { return this[nameof(Barly3)].As<ResourceData>(); } set { this["Barly3"] = value; } }
        public ResourceData Barly4 { get { return this[nameof(Barly4)].As<ResourceData>(); } set { this["Barly4"] = value; } }
        public GemResourceData JadizResource { get { return this[nameof(JadizResource)].As<GemResourceData>(); } set { this["JadizResource"] = value; } }
        public GemResourceData BittergemResource { get { return this[nameof(BittergemResource)].As<GemResourceData>(); } set { this["BittergemResource"] = value; } }
        public GemResourceData MotherlodeGemResource { get { return this[nameof(MotherlodeGemResource)].As<GemResourceData>(); } set { this["MotherlodeGemResource"] = value; } }
        public ResourceData RedSugarResource { get { return this[nameof(RedSugarResource)].As<ResourceData>(); } set { this["RedSugarResource"] = value; } }
        public ResourceData BlankSchematics { get { return this[nameof(BlankSchematics)].As<ResourceData>(); } set { this["BlankSchematics"] = value; } }
        public UArray<ResourceData> CraftingResources { get { return new UArray<ResourceData>(this[nameof(CraftingResources)].Address); } }
        public UArray<ResourceData> AllResources { get { return new UArray<ResourceData>(this[nameof(AllResources)].Address); } }
        public float FashioniteToCredits { get { return this[nameof(FashioniteToCredits)].GetValue<float>(); } set { this[nameof(FashioniteToCredits)].SetValue<float>(value); } }
        public float FashioniteToMinerals { get { return this[nameof(FashioniteToMinerals)].GetValue<float>(); } set { this[nameof(FashioniteToMinerals)].SetValue<float>(value); } }
    }
    public class GDStats : Object
    {
        public GDStats(nint addr) : base(addr) { }
        public PawnStat MaxAmmo { get { return this[nameof(MaxAmmo)].As<PawnStat>(); } set { this["MaxAmmo"] = value; } }
        public PawnStat MaxShields { get { return this[nameof(MaxShields)].As<PawnStat>(); } set { this["MaxShields"] = value; } }
        public PawnStat ShieldRegenerationRate { get { return this[nameof(ShieldRegenerationRate)].As<PawnStat>(); } set { this["ShieldRegenerationRate"] = value; } }
        public PawnStat MaxHealth { get { return this[nameof(MaxHealth)].As<PawnStat>(); } set { this["MaxHealth"] = value; } }
        public PawnStat DamageResistance { get { return this[nameof(DamageResistance)].As<PawnStat>(); } set { this["DamageResistance"] = value; } }
        public PawnStat FireResistance { get { return this[nameof(FireResistance)].As<PawnStat>(); } set { this["FireResistance"] = value; } }
        public PawnStat ColdResistance { get { return this[nameof(ColdResistance)].As<PawnStat>(); } set { this["ColdResistance"] = value; } }
        public PawnStat MeleeAttackDamage { get { return this[nameof(MeleeAttackDamage)].As<PawnStat>(); } set { this["MeleeAttackDamage"] = value; } }
        public PawnStat MovementSpeed { get { return this[nameof(MovementSpeed)].As<PawnStat>(); } set { this["MovementSpeed"] = value; } }
        public PawnStat AirControl { get { return this[nameof(AirControl)].As<PawnStat>(); } set { this["AirControl"] = value; } }
        public PawnStat SprintSpeed { get { return this[nameof(SprintSpeed)].As<PawnStat>(); } set { this["SprintSpeed"] = value; } }
        public PawnStat CarryingSpeedModifier { get { return this[nameof(CarryingSpeedModifier)].As<PawnStat>(); } set { this["CarryingSpeedModifier"] = value; } }
        public PawnStat ReviveSpeed { get { return this[nameof(ReviveSpeed)].As<PawnStat>(); } set { this["ReviveSpeed"] = value; } }
        public PawnStat DepositSpeed { get { return this[nameof(DepositSpeed)].As<PawnStat>(); } set { this["DepositSpeed"] = value; } }
        public PawnStat RessuplySpeed { get { return this[nameof(RessuplySpeed)].As<PawnStat>(); } set { this["RessuplySpeed"] = value; } }
        public PawnStat RedSugarHeal { get { return this[nameof(RedSugarHeal)].As<PawnStat>(); } set { this["RedSugarHeal"] = value; } }
        public PawnStat CarryingCapacity { get { return this[nameof(CarryingCapacity)].As<PawnStat>(); } set { this["CarryingCapacity"] = value; } }
        public PawnStat ZiplineSpeed { get { return this[nameof(ZiplineSpeed)].As<PawnStat>(); } set { this["ZiplineSpeed"] = value; } }
        public PawnStat ZiplineDownwardsBoost { get { return this[nameof(ZiplineDownwardsBoost)].As<PawnStat>(); } set { this["ZiplineDownwardsBoost"] = value; } }
        public PawnStat SlideDownIce { get { return this[nameof(SlideDownIce)].As<PawnStat>(); } set { this["SlideDownIce"] = value; } }
        public PawnStat FriendlyFire { get { return this[nameof(FriendlyFire)].As<PawnStat>(); } set { this["FriendlyFire"] = value; } }
        public PawnStat DamageFromPlayers { get { return this[nameof(DamageFromPlayers)].As<PawnStat>(); } set { this["DamageFromPlayers"] = value; } }
        public PawnStat DamageBonus { get { return this[nameof(DamageBonus)].As<PawnStat>(); } set { this["DamageBonus"] = value; } }
        public PawnStat FlareThrowingStrength { get { return this[nameof(FlareThrowingStrength)].As<PawnStat>(); } set { this["FlareThrowingStrength"] = value; } }
        public PawnStat CaveLeechSense { get { return this[nameof(CaveLeechSense)].As<PawnStat>(); } set { this["CaveLeechSense"] = value; } }
        public PawnStat MorkiteMining { get { return this[nameof(MorkiteMining)].As<PawnStat>(); } set { this["MorkiteMining"] = value; } }
        public PawnStat GoldMining { get { return this[nameof(GoldMining)].As<PawnStat>(); } set { this["GoldMining"] = value; } }
        public PawnStat RockMiningStrength { get { return this[nameof(RockMiningStrength)].As<PawnStat>(); } set { this["RockMiningStrength"] = value; } }
        public PawnStat DirtMiningStrength { get { return this[nameof(DirtMiningStrength)].As<PawnStat>(); } set { this["DirtMiningStrength"] = value; } }
        public PawnStat ResourceMiningStrength { get { return this[nameof(ResourceMiningStrength)].As<PawnStat>(); } set { this["ResourceMiningStrength"] = value; } }
        public PawnStat PowerAttackCooldownRate { get { return this[nameof(PowerAttackCooldownRate)].As<PawnStat>(); } set { this["PowerAttackCooldownRate"] = value; } }
        public PawnStat ImpactCompensation { get { return this[nameof(ImpactCompensation)].As<PawnStat>(); } set { this["ImpactCompensation"] = value; } }
        public PawnStat MovementSpeedPenalty { get { return this[nameof(MovementSpeedPenalty)].As<PawnStat>(); } set { this["MovementSpeedPenalty"] = value; } }
        public PawnStat MovementSpeedPenaltyReduction { get { return this[nameof(MovementSpeedPenaltyReduction)].As<PawnStat>(); } set { this["MovementSpeedPenaltyReduction"] = value; } }
        public PawnStat MovementSpeedEnvironmentalPenalty { get { return this[nameof(MovementSpeedEnvironmentalPenalty)].As<PawnStat>(); } set { this["MovementSpeedEnvironmentalPenalty"] = value; } }
        public PawnStat MovementSpeedEnvironmentalPenaltyReduction { get { return this[nameof(MovementSpeedEnvironmentalPenaltyReduction)].As<PawnStat>(); } set { this["MovementSpeedEnvironmentalPenaltyReduction"] = value; } }
        public PawnStat CarriableThrowing { get { return this[nameof(CarriableThrowing)].As<PawnStat>(); } set { this["CarriableThrowing"] = value; } }
        public PawnStat HoverBootsDuration { get { return this[nameof(HoverBootsDuration)].As<PawnStat>(); } set { this["HoverBootsDuration"] = value; } }
        public PawnStat ExplodeOnDeath { get { return this[nameof(ExplodeOnDeath)].As<PawnStat>(); } set { this["ExplodeOnDeath"] = value; } }
        public PawnStat CritChance { get { return this[nameof(CritChance)].As<PawnStat>(); } set { this["CritChance"] = value; } }
        public PawnStat CritDamageBonus { get { return this[nameof(CritDamageBonus)].As<PawnStat>(); } set { this["CritDamageBonus"] = value; } }
    }
    public class TrackPositionList : Object
    {
        public TrackPositionList(nint addr) : base(addr) { }
        public Object TrackName { get { return this[nameof(TrackName)]; } set { this[nameof(TrackName)] = value; } }
        public UArray<Vector4> Positions { get { return new UArray<Vector4>(this[nameof(Positions)].Address); } }
        public UArray<Object> Trackers { get { return new UArray<Object>(this[nameof(Trackers)].Address); } }
        public UArray<Object> DynamicMaterials { get { return new UArray<Object>(this[nameof(DynamicMaterials)].Address); } }
    }
    public class GMMutatorItem : Object
    {
        public GMMutatorItem(nint addr) : base(addr) { }
        public UArray<Mutator> Mutators { get { return new UArray<Mutator>(this[nameof(Mutators)].Address); } }
    }
    public class GeneratedRoom : Object
    {
        public GeneratedRoom(nint addr) : base(addr) { }
        public TerrainMaterial Material { get { return this[nameof(Material)].As<TerrainMaterial>(); } set { this["Material"] = value; } }
        public UArray<RoomLine> Lines { get { return new UArray<RoomLine>(this[nameof(Lines)].Address); } }
        public UArray<Pillar> Pillars { get { return new UArray<Pillar>(this[nameof(Pillars)].Address); } }
        public UArray<RoomBox> BoxCarvers { get { return new UArray<RoomBox>(this[nameof(BoxCarvers)].Address); } }
        public UArray<RoomBox> BoxFillers { get { return new UArray<RoomBox>(this[nameof(BoxFillers)].Address); } }
        public UArray<ResourceLocation> ResourceLocations { get { return new UArray<ResourceLocation>(this[nameof(ResourceLocations)].Address); } }
        public UArray<RoomEntrance> Entrances { get { return new UArray<RoomEntrance>(this[nameof(Entrances)].Address); } }
        public UArray<RoomItem> RoomItems { get { return new UArray<RoomItem>(this[nameof(RoomItems)].Address); } }
        public UArray<TriggerItem> TriggerItems { get { return new UArray<TriggerItem>(this[nameof(TriggerItems)].Address); } }
    }
    public class TriggerItem : Object
    {
        public TriggerItem(nint addr) : base(addr) { }
        public Object TriggerClass { get { return this[nameof(TriggerClass)]; } set { this[nameof(TriggerClass)] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
        public Object Message { get { return this[nameof(Message)]; } set { this[nameof(Message)] = value; } }
    }
    public class RoomItem : Object
    {
        public RoomItem(nint addr) : base(addr) { }
        public Object Spawnable { get { return this[nameof(Spawnable)]; } set { this[nameof(Spawnable)] = value; } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Rotator_NoQuantize Rotation { get { return this[nameof(Rotation)].As<Rotator_NoQuantize>(); } set { this["Rotation"] = value; } }
    }
    public class Rotator_NoQuantize : Rotator
    {
        public Rotator_NoQuantize(nint addr) : base(addr) { }
    }
    public class RoomEntrance : Object
    {
        public RoomEntrance(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public bool IsBLocked { get { return this[nameof(IsBLocked)].Flag; } set { this[nameof(IsBLocked)].Flag = value; } }
        public ECaveEntranceType EntranceType { get { return (ECaveEntranceType)this[nameof(EntranceType)].GetValue<int>(); } set { this[nameof(EntranceType)].SetValue<int>((int)value); } }
        public ECaveEntrancePriority Priority { get { return (ECaveEntrancePriority)this[nameof(Priority)].GetValue<int>(); } set { this[nameof(Priority)].SetValue<int>((int)value); } }
        public int PathObstacleID { get { return this[nameof(PathObstacleID)].GetValue<int>(); } set { this[nameof(PathObstacleID)].SetValue<int>(value); } }
    }
    public class ResourceLocation : Object
    {
        public ResourceLocation(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float BaseAmount { get { return this[nameof(BaseAmount)].GetValue<float>(); } set { this[nameof(BaseAmount)].SetValue<float>(value); } }
    }
    public class RoomBox : Object
    {
        public RoomBox(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Rotator_NoQuantize Rotation { get { return this[nameof(Rotation)].As<Rotator_NoQuantize>(); } set { this["Rotation"] = value; } }
        public Vector Extends { get { return this[nameof(Extends)].As<Vector>(); } set { this["Extends"] = value; } }
        public float NoiseRange { get { return this[nameof(NoiseRange)].GetValue<float>(); } set { this[nameof(NoiseRange)].SetValue<float>(value); } }
        public FloodFillSettings Noise { get { return this[nameof(Noise)].As<FloodFillSettings>(); } set { this["Noise"] = value; } }
    }
    public class Pillar : Object
    {
        public Pillar(nint addr) : base(addr) { }
        public FloodFillSettings NoiseOverride { get { return this[nameof(NoiseOverride)].As<FloodFillSettings>(); } set { this["NoiseOverride"] = value; } }
        public UArray<WeightedLinePoint> Points { get { return new UArray<WeightedLinePoint>(this[nameof(Points)].Address); } }
        public float NoiseScale { get { return this[nameof(NoiseScale)].GetValue<float>(); } set { this[nameof(NoiseScale)].SetValue<float>(value); } }
        public float EndcapScale { get { return this[nameof(EndcapScale)].GetValue<float>(); } set { this[nameof(EndcapScale)].SetValue<float>(value); } }
    }
    public class WeightedLinePoint : Object
    {
        public WeightedLinePoint(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public float NoiseRange { get { return this[nameof(NoiseRange)].GetValue<float>(); } set { this[nameof(NoiseRange)].SetValue<float>(value); } }
        public float SkewFactor { get { return this[nameof(SkewFactor)].GetValue<float>(); } set { this[nameof(SkewFactor)].SetValue<float>(value); } }
        public float FillAmount { get { return this[nameof(FillAmount)].GetValue<float>(); } set { this[nameof(FillAmount)].SetValue<float>(value); } }
    }
    public class RoomLine : Object
    {
        public RoomLine(nint addr) : base(addr) { }
        public FloodFillSettings WallNoiseOverride { get { return this[nameof(WallNoiseOverride)].As<FloodFillSettings>(); } set { this["WallNoiseOverride"] = value; } }
        public FloodFillSettings CeilingNoiseOverride { get { return this[nameof(CeilingNoiseOverride)].As<FloodFillSettings>(); } set { this["CeilingNoiseOverride"] = value; } }
        public FloodFillSettings FloorNoiseOverride { get { return this[nameof(FloorNoiseOverride)].As<FloodFillSettings>(); } set { this["FloorNoiseOverride"] = value; } }
        public bool UseDetailNoise { get { return this[nameof(UseDetailNoise)].Flag; } set { this[nameof(UseDetailNoise)].Flag = value; } }
        public UArray<RoomLinePoint> Points { get { return new UArray<RoomLinePoint>(this[nameof(Points)].Address); } }
        public UArray<Vector> RightVectors { get { return new UArray<Vector>(this[nameof(RightVectors)].Address); } }
    }
    public class RoomLinePoint : Object
    {
        public RoomLinePoint(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public float HRange { get { return this[nameof(HRange)].GetValue<float>(); } set { this[nameof(HRange)].SetValue<float>(value); } }
        public float VRange { get { return this[nameof(VRange)].GetValue<float>(); } set { this[nameof(VRange)].SetValue<float>(value); } }
        public float CielingNoiseRange { get { return this[nameof(CielingNoiseRange)].GetValue<float>(); } set { this[nameof(CielingNoiseRange)].SetValue<float>(value); } }
        public float WallNoiseRange { get { return this[nameof(WallNoiseRange)].GetValue<float>(); } set { this[nameof(WallNoiseRange)].SetValue<float>(value); } }
        public float FloorNoiseRange { get { return this[nameof(FloorNoiseRange)].GetValue<float>(); } set { this[nameof(FloorNoiseRange)].SetValue<float>(value); } }
        public float Cielingheight { get { return this[nameof(Cielingheight)].GetValue<float>(); } set { this[nameof(Cielingheight)].SetValue<float>(value); } }
        public float HeightScale { get { return this[nameof(HeightScale)].GetValue<float>(); } set { this[nameof(HeightScale)].SetValue<float>(value); } }
        public float FloorDepth { get { return this[nameof(FloorDepth)].GetValue<float>(); } set { this[nameof(FloorDepth)].SetValue<float>(value); } }
        public float FloorAngle { get { return this[nameof(FloorAngle)].GetValue<float>(); } set { this[nameof(FloorAngle)].SetValue<float>(value); } }
    }
    public class DeepDiveAnalyticsInformation : Object
    {
        public DeepDiveAnalyticsInformation(nint addr) : base(addr) { }
        public bool WasDeepDive { get { return this[nameof(WasDeepDive)].Flag; } set { this[nameof(WasDeepDive)].Flag = value; } }
        public int LastDeepDiveStage { get { return this[nameof(LastDeepDiveStage)].GetValue<int>(); } set { this[nameof(LastDeepDiveStage)].SetValue<int>(value); } }
        public bool EliteDeepDive { get { return this[nameof(EliteDeepDive)].Flag; } set { this[nameof(EliteDeepDive)].Flag = value; } }
        public bool IsReplay { get { return this[nameof(IsReplay)].Flag; } set { this[nameof(IsReplay)].Flag = value; } }
    }
    public class PartyAnalyticsInformation : Object
    {
        public PartyAnalyticsInformation(nint addr) : base(addr) { }
    }
    public class GooPuddleStatusEffectTrigger : Object
    {
        public GooPuddleStatusEffectTrigger(nint addr) : base(addr) { }
        public UArray<DamageClass> Trigger { get { return new UArray<DamageClass>(this[nameof(Trigger)].Address); } }
        public Object NewStatusEffect { get { return this[nameof(NewStatusEffect)]; } set { this[nameof(NewStatusEffect)] = value; } }
    }
    public class AvoidActorEntry : Object
    {
        public AvoidActorEntry(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
    }
    public class GrabAvoidClassEntry : Object
    {
        public GrabAvoidClassEntry(nint addr) : base(addr) { }
        public Object actorClass { get { return this[nameof(actorClass)]; } set { this[nameof(actorClass)] = value; } }
        public float DistanceToKeep { get { return this[nameof(DistanceToKeep)].GetValue<float>(); } set { this[nameof(DistanceToKeep)].SetValue<float>(value); } }
    }
    public class GraplingGunState : Object
    {
        public GraplingGunState(nint addr) : base(addr) { }
        public Vector_NetQuantize TargetLocation { get { return this[nameof(TargetLocation)].As<Vector_NetQuantize>(); } set { this["TargetLocation"] = value; } }
        public bool IsGrapling { get { return this[nameof(IsGrapling)].Flag; } set { this[nameof(IsGrapling)].Flag = value; } }
    }
    public class StateStats : Object
    {
        public StateStats(nint addr) : base(addr) { }
        public float MaxAcceleration { get { return this[nameof(MaxAcceleration)].GetValue<float>(); } set { this[nameof(MaxAcceleration)].SetValue<float>(value); } }
        public float MaxPawnSpeed { get { return this[nameof(MaxPawnSpeed)].GetValue<float>(); } set { this[nameof(MaxPawnSpeed)].SetValue<float>(value); } }
        public float MinSlowdownAngle { get { return this[nameof(MinSlowdownAngle)].GetValue<float>(); } set { this[nameof(MinSlowdownAngle)].SetValue<float>(value); } }
        public float MaxSlowdownAngle { get { return this[nameof(MaxSlowdownAngle)].GetValue<float>(); } set { this[nameof(MaxSlowdownAngle)].SetValue<float>(value); } }
        public float MaxBreakingDeceleration { get { return this[nameof(MaxBreakingDeceleration)].GetValue<float>(); } set { this[nameof(MaxBreakingDeceleration)].SetValue<float>(value); } }
    }
    public class GuntowerModuleLevel : Object
    {
        public GuntowerModuleLevel(nint addr) : base(addr) { }
        public UArray<Object> PossibleModules { get { return new UArray<Object>(this[nameof(PossibleModules)].Address); } }
        public bool PreventDuplication { get { return this[nameof(PreventDuplication)].Flag; } set { this[nameof(PreventDuplication)].Flag = value; } }
    }
    public class PitchedUsers : Object
    {
        public PitchedUsers(nint addr) : base(addr) { }
        public PlayerCharacter Player { get { return this[nameof(Player)].As<PlayerCharacter>(); } set { this["Player"] = value; } }
        public float Timer { get { return this[nameof(Timer)].GetValue<float>(); } set { this[nameof(Timer)].SetValue<float>(value); } }
    }
    public class EliteEnemyEntry : Object
    {
        public EliteEnemyEntry(nint addr) : base(addr) { }
        public float HeroChance { get { return this[nameof(HeroChance)].GetValue<float>(); } set { this[nameof(HeroChance)].SetValue<float>(value); } }
        public Object StatusEffect { get { return this[nameof(StatusEffect)]; } set { this[nameof(StatusEffect)] = value; } }
        public UArray<Object> ComponentsToAdd { get { return new UArray<Object>(this[nameof(ComponentsToAdd)].Address); } }
        public bool OverrideHealthScaling { get { return this[nameof(OverrideHealthScaling)].Flag; } set { this[nameof(OverrideHealthScaling)].Flag = value; } }
        public UArray<EliteEnemyBan> Bans { get { return new UArray<EliteEnemyBan>(this[nameof(Bans)].Address); } }
        public EEnemyHealthScaling HealthScalingOverride { get { return (EEnemyHealthScaling)this[nameof(HealthScalingOverride)].GetValue<int>(); } set { this[nameof(HealthScalingOverride)].SetValue<int>((int)value); } }
    }
    public class EliteEnemyBan : Object
    {
        public EliteEnemyBan(nint addr) : base(addr) { }
        public Int32Interval AffectedPlayerCount { get { return this[nameof(AffectedPlayerCount)].As<Int32Interval>(); } set { this["AffectedPlayerCount"] = value; } }
        public MissionTemplate Template { get { return this[nameof(Template)].As<MissionTemplate>(); } set { this["Template"] = value; } }
    }
    public class HitscanDelayedImpact : Object
    {
        public HitscanDelayedImpact(nint addr) : base(addr) { }
        public SoundCue ImpactSound { get { return this[nameof(ImpactSound)].As<SoundCue>(); } set { this["ImpactSound"] = value; } }
        public SoundCue FirstPersonImpactSound { get { return this[nameof(FirstPersonImpactSound)].As<SoundCue>(); } set { this["FirstPersonImpactSound"] = value; } }
    }
    public class HealthBarLooks : Object
    {
        public HealthBarLooks(nint addr) : base(addr) { }
        public LinearColor HealthColor { get { return this[nameof(HealthColor)].As<LinearColor>(); } set { this["HealthColor"] = value; } }
        public LinearColor DamageColor { get { return this[nameof(DamageColor)].As<LinearColor>(); } set { this["DamageColor"] = value; } }
    }
    public class GenerateIconInfo : Object
    {
        public GenerateIconInfo(nint addr) : base(addr) { }
        public EGeneratorIconType IconType { get { return (EGeneratorIconType)this[nameof(IconType)].GetValue<int>(); } set { this[nameof(IconType)].SetValue<int>((int)value); } }
        public PickaxePart PickaxePart { get { return this[nameof(PickaxePart)].As<PickaxePart>(); } set { this["PickaxePart"] = value; } }
        public PickaxeSet PickaxeSet { get { return this[nameof(PickaxeSet)].As<PickaxeSet>(); } set { this["PickaxeSet"] = value; } }
        public EPickaxePartLocation PickaxePartLocation { get { return (EPickaxePartLocation)this[nameof(PickaxePartLocation)].GetValue<int>(); } set { this[nameof(PickaxePartLocation)].SetValue<int>((int)value); } }
        public ItemSkin ItemSkin { get { return this[nameof(ItemSkin)].As<ItemSkin>(); } set { this["ItemSkin"] = value; } }
        public VanityItem Item { get { return this[nameof(Item)].As<VanityItem>(); } set { this["Item"] = value; } }
        public PlayerCharacterID Character { get { return this[nameof(Character)].As<PlayerCharacterID>(); } set { this["Character"] = value; } }
        public Vector2D Size { get { return this[nameof(Size)].As<Vector2D>(); } set { this["Size"] = value; } }
        public bool bShowCloseUp { get { return this[nameof(bShowCloseUp)].Flag; } set { this[nameof(bShowCloseUp)].Flag = value; } }
        public Object CancelGroup { get { return this[nameof(CancelGroup)]; } set { this[nameof(CancelGroup)] = value; } }
    }
    public class PickaxeSet : Object
    {
        public PickaxeSet(nint addr) : base(addr) { }
        public PickaxePart BladeFront { get { return this[nameof(BladeFront)].As<PickaxePart>(); } set { this["BladeFront"] = value; } }
        public PickaxePart OptionalBladeBack { get { return this[nameof(OptionalBladeBack)].As<PickaxePart>(); } set { this["OptionalBladeBack"] = value; } }
        public PickaxePart Pommel { get { return this[nameof(Pommel)].As<PickaxePart>(); } set { this["Pommel"] = value; } }
        public PickaxePart Handle { get { return this[nameof(Handle)].As<PickaxePart>(); } set { this["Handle"] = value; } }
        public PickaxePart Shaft { get { return this[nameof(Shaft)].As<PickaxePart>(); } set { this["Shaft"] = value; } }
        public PickaxePart Head { get { return this[nameof(Head)].As<PickaxePart>(); } set { this["Head"] = value; } }
        public PickaxePart Material { get { return this[nameof(Material)].As<PickaxePart>(); } set { this["Material"] = value; } }
    }
    public class IKStyle : Object
    {
        public IKStyle(nint addr) : base(addr) { }
        public float StepAirTime { get { return this[nameof(StepAirTime)].GetValue<float>(); } set { this[nameof(StepAirTime)].SetValue<float>(value); } }
        public float StepRadius { get { return this[nameof(StepRadius)].GetValue<float>(); } set { this[nameof(StepRadius)].SetValue<float>(value); } }
        public AnimSequence RandomWalkCycles { get { return this[nameof(RandomWalkCycles)].As<AnimSequence>(); } set { this["RandomWalkCycles"] = value; } }
        public AnimSequence NeutralAnimation { get { return this[nameof(NeutralAnimation)].As<AnimSequence>(); } set { this["NeutralAnimation"] = value; } }
    }
    public class IKSyncGroup : Object
    {
        public IKSyncGroup(nint addr) : base(addr) { }
        public UArray<int> LegNumbers { get { return new UArray<int>(this[nameof(LegNumbers)].Address); } }
        public int MinDownCount { get { return this[nameof(MinDownCount)].GetValue<int>(); } set { this[nameof(MinDownCount)].SetValue<int>(value); } }
    }
    public class IKLegSetup : Object
    {
        public IKLegSetup(nint addr) : base(addr) { }
        public Object EndBone { get { return this[nameof(EndBone)]; } set { this[nameof(EndBone)] = value; } }
    }
    public class EndEffector : Object
    {
        public EndEffector(nint addr) : base(addr) { }
        public Object EndBone { get { return this[nameof(EndBone)]; } set { this[nameof(EndBone)] = value; } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public Vector GroundCorrection { get { return this[nameof(GroundCorrection)].As<Vector>(); } set { this["GroundCorrection"] = value; } }
        public float PositionAlpha { get { return this[nameof(PositionAlpha)].GetValue<float>(); } set { this[nameof(PositionAlpha)].SetValue<float>(value); } }
        public int PositionDepth { get { return this[nameof(PositionDepth)].GetValue<int>(); } set { this[nameof(PositionDepth)].SetValue<int>(value); } }
        public Quat Rotation { get { return this[nameof(Rotation)].As<Quat>(); } set { this["Rotation"] = value; } }
        public float RotationAlpha { get { return this[nameof(RotationAlpha)].GetValue<float>(); } set { this[nameof(RotationAlpha)].SetValue<float>(value); } }
        public int RotationDepth { get { return this[nameof(RotationDepth)].GetValue<int>(); } set { this[nameof(RotationDepth)].SetValue<int>(value); } }
        public float Pull { get { return this[nameof(Pull)].GetValue<float>(); } set { this[nameof(Pull)].SetValue<float>(value); } }
    }
    public class QueuedMontage : Object
    {
        public QueuedMontage(nint addr) : base(addr) { }
        public AnimMontage Montage { get { return this[nameof(Montage)].As<AnimMontage>(); } set { this["Montage"] = value; } }
        public bool ForceUpdate { get { return this[nameof(ForceUpdate)].Flag; } set { this[nameof(ForceUpdate)].Flag = value; } }
    }
    public class InputDisplay : Object
    {
        public InputDisplay(nint addr) : base(addr) { }
        public EInputInteraction Interaction { get { return (EInputInteraction)this[nameof(Interaction)].GetValue<int>(); } set { this[nameof(Interaction)].SetValue<int>((int)value); } }
        public Object InputText { get { return this[nameof(InputText)]; } set { this[nameof(InputText)] = value; } }
        public LinearColor TextTint { get { return this[nameof(TextTint)].As<LinearColor>(); } set { this["TextTint"] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public bool IconTintable { get { return this[nameof(IconTintable)].Flag; } set { this[nameof(IconTintable)].Flag = value; } }
    }
    public class InputTranslationTable : Object
    {
        public InputTranslationTable(nint addr) : base(addr) { }
        public Object Entries { get { return this[nameof(Entries)]; } set { this[nameof(Entries)] = value; } }
    }
    public class InputTranslation : Object
    {
        public InputTranslation(nint addr) : base(addr) { }
        public InputTranslationEntry Default { get { return this[nameof(Default)].As<InputTranslationEntry>(); } set { this["Default"] = value; } }
        public bool bControllerOverride { get { return this[nameof(bControllerOverride)].Flag; } set { this[nameof(bControllerOverride)].Flag = value; } }
        public InputTranslationEntry ControllerOverride { get { return this[nameof(ControllerOverride)].As<InputTranslationEntry>(); } set { this["ControllerOverride"] = value; } }
    }
    public class InputTranslationEntry : Object
    {
        public InputTranslationEntry(nint addr) : base(addr) { }
        public EInputInteraction Interaction { get { return (EInputInteraction)this[nameof(Interaction)].GetValue<int>(); } set { this[nameof(Interaction)].SetValue<int>((int)value); } }
        public Object InputName { get { return this[nameof(InputName)]; } set { this[nameof(InputName)] = value; } }
        public int Axis { get { return this[nameof(Axis)].GetValue<int>(); } set { this[nameof(Axis)].SetValue<int>(value); } }
    }
    public class EmitterConnection : Object
    {
        public EmitterConnection(nint addr) : base(addr) { }
        public Object EmitterName { get { return this[nameof(EmitterName)]; } set { this[nameof(EmitterName)] = value; } }
        public Object VariableName { get { return this[nameof(VariableName)]; } set { this[nameof(VariableName)] = value; } }
    }
    public class DelayedActorSwitchData : Object
    {
        public DelayedActorSwitchData(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public bool IsActive { get { return this[nameof(IsActive)].Flag; } set { this[nameof(IsActive)].Flag = value; } }
        public bool IsExternalActor { get { return this[nameof(IsExternalActor)].Flag; } set { this[nameof(IsExternalActor)].Flag = value; } }
        public bool IsUnEquipCalled { get { return this[nameof(IsUnEquipCalled)].Flag; } set { this[nameof(IsUnEquipCalled)].Flag = value; } }
        public EquippedActorData Cached { get { return this[nameof(Cached)].As<EquippedActorData>(); } set { this["Cached"] = value; } }
    }
    public class EquippedActorData : Object
    {
        public EquippedActorData(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public bool IsExternalActor { get { return this[nameof(IsExternalActor)].Flag; } set { this[nameof(IsExternalActor)].Flag = value; } }
    }
    public class ItemRefundListItem : Object
    {
        public ItemRefundListItem(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Resources { get { return this[nameof(Resources)]; } set { this[nameof(Resources)] = value; } }
        public float CreditCost { get { return this[nameof(CreditCost)].GetValue<float>(); } set { this[nameof(CreditCost)].SetValue<float>(value); } }
    }
    public class ItemRefundResourceItem : Object
    {
        public ItemRefundResourceItem(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public float amount { get { return this[nameof(amount)].GetValue<float>(); } set { this[nameof(amount)].SetValue<float>(value); } }
    }
    public class ItemSkinOwners : Object
    {
        public ItemSkinOwners(nint addr) : base(addr) { }
        public UArray<ItemID> Items { get { return new UArray<ItemID>(this[nameof(Items)].Address); } }
    }
    public class JettyBootSetting : Object
    {
        public JettyBootSetting(nint addr) : base(addr) { }
        public IRandRange GateCount { get { return this[nameof(GateCount)].As<IRandRange>(); } set { this["GateCount"] = value; } }
        public IRandRange GateSpacing { get { return this[nameof(GateSpacing)].As<IRandRange>(); } set { this["GateSpacing"] = value; } }
        public IRandRange GateOpeningSize { get { return this[nameof(GateOpeningSize)].As<IRandRange>(); } set { this["GateOpeningSize"] = value; } }
    }
    public class JettyBootNPC : Object
    {
        public JettyBootNPC(nint addr) : base(addr) { }
        public Object CharacterName { get { return this[nameof(CharacterName)]; } set { this[nameof(CharacterName)] = value; } }
        public float HasPlayedChance { get { return this[nameof(HasPlayedChance)].GetValue<float>(); } set { this[nameof(HasPlayedChance)].SetValue<float>(value); } }
        public IRandRange ScoreInterval { get { return this[nameof(ScoreInterval)].As<IRandRange>(); } set { this["ScoreInterval"] = value; } }
        public UArray<int> StartScores { get { return new UArray<int>(this[nameof(StartScores)].Address); } }
    }
    public class SpriteRect : Object
    {
        public SpriteRect(nint addr) : base(addr) { }
        public float Left { get { return this[nameof(Left)].GetValue<float>(); } set { this[nameof(Left)].SetValue<float>(value); } }
        public float Top { get { return this[nameof(Top)].GetValue<float>(); } set { this[nameof(Top)].SetValue<float>(value); } }
        public float Right { get { return this[nameof(Right)].GetValue<float>(); } set { this[nameof(Right)].SetValue<float>(value); } }
        public float Bottom { get { return this[nameof(Bottom)].GetValue<float>(); } set { this[nameof(Bottom)].SetValue<float>(value); } }
    }
    public class JettyBootsPlayer : Object
    {
        public JettyBootsPlayer(nint addr) : base(addr) { }
        public Object PlayerCharacter { get { return this[nameof(PlayerCharacter)]; } set { this[nameof(PlayerCharacter)] = value; } }
        public bool bIsPlaying { get { return this[nameof(bIsPlaying)].Flag; } set { this[nameof(bIsPlaying)].Flag = value; } }
    }
    public class JettyBootsReplay : Object
    {
        public JettyBootsReplay(nint addr) : base(addr) { }
        public int Seed { get { return this[nameof(Seed)].GetValue<int>(); } set { this[nameof(Seed)].SetValue<int>(value); } }
        public Vector2D Position { get { return this[nameof(Position)].As<Vector2D>(); } set { this["Position"] = value; } }
        public byte State { get { return this[nameof(State)].GetValue<byte>(); } set { this[nameof(State)].SetValue<byte>(value); } }
        public int Level { get { return this[nameof(Level)].GetValue<int>(); } set { this[nameof(Level)].SetValue<int>(value); } }
        public int Score { get { return this[nameof(Score)].GetValue<int>(); } set { this[nameof(Score)].SetValue<int>(value); } }
        public int Lives { get { return this[nameof(Lives)].GetValue<int>(); } set { this[nameof(Lives)].SetValue<int>(value); } }
    }
    public class BumpPlayerHit : Object
    {
        public BumpPlayerHit(nint addr) : base(addr) { }
        public Vector_NetQuantize force { get { return this[nameof(force)].As<Vector_NetQuantize>(); } set { this["force"] = value; } }
        public PlayerCharacter Player { get { return this[nameof(Player)].As<PlayerCharacter>(); } set { this["Player"] = value; } }
    }
    public class LaserPointerData : Object
    {
        public LaserPointerData(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public ELaserPointerTargetType TargetType { get { return (ELaserPointerTargetType)this[nameof(TargetType)].GetValue<int>(); } set { this[nameof(TargetType)].SetValue<int>((int)value); } }
        public Guid SavegameID { get { return this[nameof(SavegameID)].As<Guid>(); } set { this["SavegameID"] = value; } }
    }
    public class LayeredNoise : Object
    {
        public LayeredNoise(nint addr) : base(addr) { }
        public FloodFillSettings Noise { get { return this[nameof(Noise)].As<FloodFillSettings>(); } set { this["Noise"] = value; } }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
    }
    public class LightStrobeChannel : Object
    {
        public LightStrobeChannel(nint addr) : base(addr) { }
        public Object Light { get { return this[nameof(Light)]; } set { this[nameof(Light)] = value; } }
        public Object Mid { get { return this[nameof(Mid)]; } set { this[nameof(Mid)] = value; } }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object ParamName { get { return this[nameof(ParamName)]; } set { this[nameof(ParamName)] = value; } }
        public float MinIntensity { get { return this[nameof(MinIntensity)].GetValue<float>(); } set { this[nameof(MinIntensity)].SetValue<float>(value); } }
        public float MaxIntensity { get { return this[nameof(MaxIntensity)].GetValue<float>(); } set { this[nameof(MaxIntensity)].SetValue<float>(value); } }
        public float TimeScale { get { return this[nameof(TimeScale)].GetValue<float>(); } set { this[nameof(TimeScale)].SetValue<float>(value); } }
        public float MaterialMultiplier { get { return this[nameof(MaterialMultiplier)].GetValue<float>(); } set { this[nameof(MaterialMultiplier)].SetValue<float>(value); } }
        public RuntimeFloatCurve StrobingCurve { get { return this[nameof(StrobingCurve)].As<RuntimeFloatCurve>(); } set { this["StrobingCurve"] = value; } }
        public int Loops { get { return this[nameof(Loops)].GetValue<int>(); } set { this[nameof(Loops)].SetValue<int>(value); } }
        public EStrobingMode Mode { get { return (EStrobingMode)this[nameof(Mode)].GetValue<int>(); } set { this[nameof(Mode)].SetValue<int>((int)value); } }
        public EStrobeMaterialMode MaterialMode { get { return (EStrobeMaterialMode)this[nameof(MaterialMode)].GetValue<int>(); } set { this[nameof(MaterialMode)].SetValue<int>((int)value); } }
    }
    public class LineSegmentCarverPoint : Object
    {
        public LineSegmentCarverPoint(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public float HRange { get { return this[nameof(HRange)].GetValue<float>(); } set { this[nameof(HRange)].SetValue<float>(value); } }
        public float VRange { get { return this[nameof(VRange)].GetValue<float>(); } set { this[nameof(VRange)].SetValue<float>(value); } }
        public float FloorAngle { get { return this[nameof(FloorAngle)].GetValue<float>(); } set { this[nameof(FloorAngle)].SetValue<float>(value); } }
        public float CielingNoiseRange { get { return this[nameof(CielingNoiseRange)].GetValue<float>(); } set { this[nameof(CielingNoiseRange)].SetValue<float>(value); } }
        public float WallNoiseRange { get { return this[nameof(WallNoiseRange)].GetValue<float>(); } set { this[nameof(WallNoiseRange)].SetValue<float>(value); } }
        public float FloorNoiseRange { get { return this[nameof(FloorNoiseRange)].GetValue<float>(); } set { this[nameof(FloorNoiseRange)].SetValue<float>(value); } }
    }
    public class LineSegmentFillerPoint : Object
    {
        public LineSegmentFillerPoint(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public RandRange RandomRange { get { return this[nameof(RandomRange)].As<RandRange>(); } set { this["RandomRange"] = value; } }
        public RandRange RandomNoiseRange { get { return this[nameof(RandomNoiseRange)].As<RandRange>(); } set { this["RandomNoiseRange"] = value; } }
        public RandRange FillAmount { get { return this[nameof(FillAmount)].As<RandRange>(); } set { this["FillAmount"] = value; } }
    }
    public class LoadoutCopy : Object
    {
        public LoadoutCopy(nint addr) : base(addr) { }
        public ItemLoadout ItemLoadout { get { return this[nameof(ItemLoadout)].As<ItemLoadout>(); } set { this["ItemLoadout"] = value; } }
        public UpgradeLoadout UpgradeLoadout { get { return this[nameof(UpgradeLoadout)].As<UpgradeLoadout>(); } set { this["UpgradeLoadout"] = value; } }
        public CharacterPerksSave PerkLoadout { get { return this[nameof(PerkLoadout)].As<CharacterPerksSave>(); } set { this["PerkLoadout"] = value; } }
        public CharacterVanityLoadout VanityLoadout { get { return this[nameof(VanityLoadout)].As<CharacterVanityLoadout>(); } set { this["VanityLoadout"] = value; } }
    }
    public class FSDTranslationProgress : Object
    {
        public FSDTranslationProgress(nint addr) : base(addr) { }
        public Object CodeName { get { return this[nameof(CodeName)]; } set { this[nameof(CodeName)] = value; } }
        public int TranslatedPercent { get { return this[nameof(TranslatedPercent)].GetValue<int>(); } set { this[nameof(TranslatedPercent)].SetValue<int>(value); } }
    }
    public class LocalizedLanguageInfo : Object
    {
        public LocalizedLanguageInfo(nint addr) : base(addr) { }
        public Object EnglishName { get { return this[nameof(EnglishName)]; } set { this[nameof(EnglishName)] = value; } }
        public Object NativeName { get { return this[nameof(NativeName)]; } set { this[nameof(NativeName)] = value; } }
        public Object CodeName { get { return this[nameof(CodeName)]; } set { this[nameof(CodeName)] = value; } }
        public bool CommunityTranslated { get { return this[nameof(CommunityTranslated)].Flag; } set { this[nameof(CommunityTranslated)].Flag = value; } }
        public int TranslatedPercent { get { return this[nameof(TranslatedPercent)].GetValue<int>(); } set { this[nameof(TranslatedPercent)].SetValue<int>(value); } }
    }
    public class BeamCollision : Object
    {
        public BeamCollision(nint addr) : base(addr) { }
        public bool bBeamBlocked { get { return this[nameof(bBeamBlocked)].Flag; } set { this[nameof(bBeamBlocked)].Flag = value; } }
        public float BeamHitDistance { get { return this[nameof(BeamHitDistance)].GetValue<float>(); } set { this[nameof(BeamHitDistance)].SetValue<float>(value); } }
        public Vector FinalTraceStart { get { return this[nameof(FinalTraceStart)].As<Vector>(); } set { this["FinalTraceStart"] = value; } }
        public Vector FinalTraceEnd { get { return this[nameof(FinalTraceEnd)].As<Vector>(); } set { this["FinalTraceEnd"] = value; } }
    }
    public class FSDLocalizedChatMessage : Object
    {
        public FSDLocalizedChatMessage(nint addr) : base(addr) { }
        public EChatMessageType MsgType { get { return (EChatMessageType)this[nameof(MsgType)].GetValue<int>(); } set { this[nameof(MsgType)].SetValue<int>((int)value); } }
        public Object Sender { get { return this[nameof(Sender)]; } set { this[nameof(Sender)] = value; } }
        public Object Msg { get { return this[nameof(Msg)]; } set { this[nameof(Msg)] = value; } }
        public UArray<Object> Arguments { get { return new UArray<Object>(this[nameof(Arguments)].Address); } }
    }
    public class ProgressShout : Object
    {
        public ProgressShout(nint addr) : base(addr) { }
        public float ProgressStamp { get { return this[nameof(ProgressStamp)].GetValue<float>(); } set { this[nameof(ProgressStamp)].SetValue<float>(value); } }
        public DialogDataAsset Shout { get { return this[nameof(Shout)].As<DialogDataAsset>(); } set { this["Shout"] = value; } }
    }
    public class MicrowaveLense : Object
    {
        public MicrowaveLense(nint addr) : base(addr) { }
        public float ShotRadiusMultiplier { get { return this[nameof(ShotRadiusMultiplier)].GetValue<float>(); } set { this[nameof(ShotRadiusMultiplier)].SetValue<float>(value); } }
        public float ShotBonusDamageModifier { get { return this[nameof(ShotBonusDamageModifier)].GetValue<float>(); } set { this[nameof(ShotBonusDamageModifier)].SetValue<float>(value); } }
        public float HeatModifier { get { return this[nameof(HeatModifier)].GetValue<float>(); } set { this[nameof(HeatModifier)].SetValue<float>(value); } }
        public float RateOfFireModifier { get { return this[nameof(RateOfFireModifier)].GetValue<float>(); } set { this[nameof(RateOfFireModifier)].SetValue<float>(value); } }
    }
    public class MilestoneTier : Object
    {
        public MilestoneTier(nint addr) : base(addr) { }
        public float CompletionCount { get { return this[nameof(CompletionCount)].GetValue<float>(); } set { this[nameof(CompletionCount)].SetValue<float>(value); } }
        public int PerkPoints { get { return this[nameof(PerkPoints)].GetValue<int>(); } set { this[nameof(PerkPoints)].SetValue<int>(value); } }
    }
    public class BiomeFeatures : Object
    {
        public BiomeFeatures(nint addr) : base(addr) { }
        public MinersManualData Descriptions { get { return this[nameof(Descriptions)].As<MinersManualData>(); } set { this["Descriptions"] = value; } }
    }
    public class EnemyMinersManualStats : Object
    {
        public EnemyMinersManualStats(nint addr) : base(addr) { }
        public int Health { get { return this[nameof(Health)].GetValue<int>(); } set { this[nameof(Health)].SetValue<int>(value); } }
        public int Damage { get { return this[nameof(Damage)].GetValue<int>(); } set { this[nameof(Damage)].SetValue<int>(value); } }
        public int Speed { get { return this[nameof(Speed)].GetValue<int>(); } set { this[nameof(Speed)].SetValue<int>(value); } }
    }
    public class MissionTypeDescription : Object
    {
        public MissionTypeDescription(nint addr) : base(addr) { }
        public Object InfoHeadline { get { return this[nameof(InfoHeadline)]; } set { this[nameof(InfoHeadline)] = value; } }
        public UArray<SoftMissionStepDescription> Steps { get { return new UArray<SoftMissionStepDescription>(this[nameof(Steps)].Address); } }
    }
    public class SoftMissionStepDescription : Object
    {
        public SoftMissionStepDescription(nint addr) : base(addr) { }
        public Object Headline { get { return this[nameof(Headline)]; } set { this[nameof(Headline)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
    }
    public class MissionStepDescription : Object
    {
        public MissionStepDescription(nint addr) : base(addr) { }
        public Object Headline { get { return this[nameof(Headline)]; } set { this[nameof(Headline)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public Texture2D Image { get { return this[nameof(Image)].As<Texture2D>(); } set { this["Image"] = value; } }
    }
    public class MinersManualDescription : Object
    {
        public MinersManualDescription(nint addr) : base(addr) { }
        public Object Headline { get { return this[nameof(Headline)]; } set { this[nameof(Headline)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public Texture2D ImageFront { get { return this[nameof(ImageFront)].As<Texture2D>(); } set { this["ImageFront"] = value; } }
        public Texture2D ImageBackground { get { return this[nameof(ImageBackground)].As<Texture2D>(); } set { this["ImageBackground"] = value; } }
    }
    public class SoftMinersManualDescription : Object
    {
        public SoftMinersManualDescription(nint addr) : base(addr) { }
        public Object Headline { get { return this[nameof(Headline)]; } set { this[nameof(Headline)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public Object ImageFront { get { return this[nameof(ImageFront)]; } set { this[nameof(ImageFront)] = value; } }
        public Object ImageBackground { get { return this[nameof(ImageBackground)]; } set { this[nameof(ImageBackground)] = value; } }
    }
    public class DamageTypeDescription : Object
    {
        public DamageTypeDescription(nint addr) : base(addr) { }
        public EDamageType Type { get { return (EDamageType)this[nameof(Type)].GetValue<int>(); } set { this[nameof(Type)].SetValue<int>((int)value); } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object RichDescription { get { return this[nameof(RichDescription)]; } set { this[nameof(RichDescription)] = value; } }
        public SoftIconWithColor Icon { get { return this[nameof(Icon)].As<SoftIconWithColor>(); } set { this["Icon"] = value; } }
        public float IconScale { get { return this[nameof(IconScale)].GetValue<float>(); } set { this[nameof(IconScale)].SetValue<float>(value); } }
    }
    public class SoftIconWithColor : Object
    {
        public SoftIconWithColor(nint addr) : base(addr) { }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public LinearColor Tint { get { return this[nameof(Tint)].As<LinearColor>(); } set { this["Tint"] = value; } }
    }
    public class MissionSetKey : Object
    {
        public MissionSetKey(nint addr) : base(addr) { }
    }
    public class GeneratedMissionGroup : Object
    {
        public GeneratedMissionGroup(nint addr) : base(addr) { }
        public UArray<GeneratedMission> AvailableMissions { get { return new UArray<GeneratedMission>(this[nameof(AvailableMissions)].Address); } }
    }
    public class RewardTexts : Object
    {
        public RewardTexts(nint addr) : base(addr) { }
        public Object PrimaryObjective { get { return this[nameof(PrimaryObjective)]; } set { this[nameof(PrimaryObjective)] = value; } }
        public Object SecondaryObjective { get { return this[nameof(SecondaryObjective)]; } set { this[nameof(SecondaryObjective)] = value; } }
        public Object CountPrimaryObjectives { get { return this[nameof(CountPrimaryObjectives)]; } set { this[nameof(CountPrimaryObjectives)] = value; } }
        public Object CountSecondaryObjectives { get { return this[nameof(CountSecondaryObjectives)]; } set { this[nameof(CountSecondaryObjectives)] = value; } }
        public Object MineralsMinedByTeam { get { return this[nameof(MineralsMinedByTeam)]; } set { this[nameof(MineralsMinedByTeam)] = value; } }
        public Object HostilesKilled { get { return this[nameof(HostilesKilled)]; } set { this[nameof(HostilesKilled)] = value; } }
    }
    public class XPReward : Object
    {
        public XPReward(nint addr) : base(addr) { }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public int XP { get { return this[nameof(XP)].GetValue<int>(); } set { this[nameof(XP)].SetValue<int>(value); } }
    }
    public class MissionHazardSetting : Object
    {
        public MissionHazardSetting(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public float HazardBonus { get { return this[nameof(HazardBonus)].GetValue<float>(); } set { this[nameof(HazardBonus)].SetValue<float>(value); } }
    }
    public class GDMissionStats : Object
    {
        public GDMissionStats(nint addr) : base(addr) { }
        public MissionStat TimePlayed { get { return this[nameof(TimePlayed)].As<MissionStat>(); } set { this["TimePlayed"] = value; } }
        public MissionStat DistanceTravelled { get { return this[nameof(DistanceTravelled)].As<MissionStat>(); } set { this["DistanceTravelled"] = value; } }
        public MissionStat EnemiesKilled { get { return this[nameof(EnemiesKilled)].As<MissionStat>(); } set { this["EnemiesKilled"] = value; } }
        public MissionStat MineralsMined { get { return this[nameof(MineralsMined)].As<MissionStat>(); } set { this["MineralsMined"] = value; } }
        public MissionStat MissionCompleted { get { return this[nameof(MissionCompleted)].As<MissionStat>(); } set { this["MissionCompleted"] = value; } }
        public MissionStat SoloMissionCompleted { get { return this[nameof(SoloMissionCompleted)].As<MissionStat>(); } set { this["SoloMissionCompleted"] = value; } }
        public MissionStat SecondaryMissionCompleted { get { return this[nameof(SecondaryMissionCompleted)].As<MissionStat>(); } set { this["SecondaryMissionCompleted"] = value; } }
        public MissionStat CharacterLevelUp { get { return this[nameof(CharacterLevelUp)].As<MissionStat>(); } set { this["CharacterLevelUp"] = value; } }
        public MissionStat VanityItemsBought { get { return this[nameof(VanityItemsBought)].As<MissionStat>(); } set { this["VanityItemsBought"] = value; } }
        public MissionStat ItemUpgradesBought { get { return this[nameof(ItemUpgradesBought)].As<MissionStat>(); } set { this["ItemUpgradesBought"] = value; } }
        public MissionStat CosmeticMasteryLevelledUp { get { return this[nameof(CosmeticMasteryLevelledUp)].As<MissionStat>(); } set { this["CosmeticMasteryLevelledUp"] = value; } }
        public MissionStat DrinkablesConsumed { get { return this[nameof(DrinkablesConsumed)].As<MissionStat>(); } set { this["DrinkablesConsumed"] = value; } }
        public MissionStat DrinkableRoundsOrdered { get { return this[nameof(DrinkableRoundsOrdered)].As<MissionStat>(); } set { this["DrinkableRoundsOrdered"] = value; } }
        public MissionStat BartenderCreditsTipped { get { return this[nameof(BartenderCreditsTipped)].As<MissionStat>(); } set { this["BartenderCreditsTipped"] = value; } }
        public MissionStat CampaignMissionsCompleted { get { return this[nameof(CampaignMissionsCompleted)].As<MissionStat>(); } set { this["CampaignMissionsCompleted"] = value; } }
        public MissionStat CampaignsCompleted { get { return this[nameof(CampaignsCompleted)].As<MissionStat>(); } set { this["CampaignsCompleted"] = value; } }
        public MissionStat TimesDowned { get { return this[nameof(TimesDowned)].As<MissionStat>(); } set { this["TimesDowned"] = value; } }
        public MissionStat TimesPassedOut { get { return this[nameof(TimesPassedOut)].As<MissionStat>(); } set { this["TimesPassedOut"] = value; } }
        public MissionStat WeaponsUnlockedStat { get { return this[nameof(WeaponsUnlockedStat)].As<MissionStat>(); } set { this["WeaponsUnlockedStat"] = value; } }
        public MissionStat SeasonEventsCompleted { get { return this[nameof(SeasonEventsCompleted)].As<MissionStat>(); } set { this["SeasonEventsCompleted"] = value; } }
        public MissionStat SeasonChallengesCompleted { get { return this[nameof(SeasonChallengesCompleted)].As<MissionStat>(); } set { this["SeasonChallengesCompleted"] = value; } }
        public MissionStat DeepDivesCompleted { get { return this[nameof(DeepDivesCompleted)].As<MissionStat>(); } set { this["DeepDivesCompleted"] = value; } }
        public MissionStat EliteDeepDivesCompleted { get { return this[nameof(EliteDeepDivesCompleted)].As<MissionStat>(); } set { this["EliteDeepDivesCompleted"] = value; } }
        public MissionStat CosmeticsCrafted { get { return this[nameof(CosmeticsCrafted)].As<MissionStat>(); } set { this["CosmeticsCrafted"] = value; } }
        public MissionStat WeaponSkinsCrafted { get { return this[nameof(WeaponSkinsCrafted)].As<MissionStat>(); } set { this["WeaponSkinsCrafted"] = value; } }
        public MissionStat WeaponOverclocksCrafted { get { return this[nameof(WeaponOverclocksCrafted)].As<MissionStat>(); } set { this["WeaponOverclocksCrafted"] = value; } }
        public MissionStat CraftingMasteryLevel { get { return this[nameof(CraftingMasteryLevel)].As<MissionStat>(); } set { this["CraftingMasteryLevel"] = value; } }
        public MissionStat DefendBlackBoxObjectivesCompleted { get { return this[nameof(DefendBlackBoxObjectivesCompleted)].As<MissionStat>(); } set { this["DefendBlackBoxObjectivesCompleted"] = value; } }
        public MissionStat RepairMiniMuleObjectivesCompleted { get { return this[nameof(RepairMiniMuleObjectivesCompleted)].As<MissionStat>(); } set { this["RepairMiniMuleObjectivesCompleted"] = value; } }
        public MissionStat DeepDiveCompletedBestTime { get { return this[nameof(DeepDiveCompletedBestTime)].As<MissionStat>(); } set { this["DeepDiveCompletedBestTime"] = value; } }
        public MissionStat EliteDeepDiveCompletedBestTime { get { return this[nameof(EliteDeepDiveCompletedBestTime)].As<MissionStat>(); } set { this["EliteDeepDiveCompletedBestTime"] = value; } }
        public MissionStat SpecialBeersUnlocked { get { return this[nameof(SpecialBeersUnlocked)].As<MissionStat>(); } set { this["SpecialBeersUnlocked"] = value; } }
        public MissionStat JettyBootCreditsSpent { get { return this[nameof(JettyBootCreditsSpent)].As<MissionStat>(); } set { this["JettyBootCreditsSpent"] = value; } }
        public UArray<MissionStat> AllMissionStats { get { return new UArray<MissionStat>(this[nameof(AllMissionStats)].Address); } }
        public Object CharacterMissionsCompleted { get { return this[nameof(CharacterMissionsCompleted)]; } set { this[nameof(CharacterMissionsCompleted)] = value; } }
    }
    public class PlanetZoneItem : Object
    {
        public PlanetZoneItem(nint addr) : base(addr) { }
        public UArray<Biome> Biomes { get { return new UArray<Biome>(this[nameof(Biomes)].Address); } }
        public UArray<GeneratedMission> missions { get { return new UArray<GeneratedMission>(this[nameof(missions)].Address); } }
        public PlanetZone Zone { get { return this[nameof(Zone)].As<PlanetZone>(); } set { this["Zone"] = value; } }
        public bool HasSpecialEvent { get { return this[nameof(HasSpecialEvent)].Flag; } set { this[nameof(HasSpecialEvent)].Flag = value; } }
        public bool WouldHaveSpecialEvent { get { return this[nameof(WouldHaveSpecialEvent)].Flag; } set { this[nameof(WouldHaveSpecialEvent)].Flag = value; } }
    }
    public class MissionBiomeItem : Object
    {
        public MissionBiomeItem(nint addr) : base(addr) { }
        public Biome Biome { get { return this[nameof(Biome)].As<Biome>(); } set { this["Biome"] = value; } }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
    }
    public class MissionTemplateItem : Object
    {
        public MissionTemplateItem(nint addr) : base(addr) { }
        public MissionTemplate Template { get { return this[nameof(Template)].As<MissionTemplate>(); } set { this["Template"] = value; } }
        public float Rarity { get { return this[nameof(Rarity)].GetValue<float>(); } set { this[nameof(Rarity)].SetValue<float>(value); } }
    }
    public class RequiredMissionItem : Object
    {
        public RequiredMissionItem(nint addr) : base(addr) { }
        public MissionTemplate MissionTemplate { get { return this[nameof(MissionTemplate)].As<MissionTemplate>(); } set { this["MissionTemplate"] = value; } }
        public MissionComplexity Complexity { get { return this[nameof(Complexity)].As<MissionComplexity>(); } set { this["Complexity"] = value; } }
        public MissionDuration Duration { get { return this[nameof(Duration)].As<MissionDuration>(); } set { this["Duration"] = value; } }
        public bool CanHaveMutators { get { return this[nameof(CanHaveMutators)].Flag; } set { this[nameof(CanHaveMutators)].Flag = value; } }
    }
    public class ProjectileSpawnData : Object
    {
        public ProjectileSpawnData(nint addr) : base(addr) { }
        public Object ProjectileClass { get { return this[nameof(ProjectileClass)]; } set { this[nameof(ProjectileClass)] = value; } }
        public FloatInterval HorizontalAngleOffset { get { return this[nameof(HorizontalAngleOffset)].As<FloatInterval>(); } set { this["HorizontalAngleOffset"] = value; } }
        public FloatInterval VerticalAngleOffset { get { return this[nameof(VerticalAngleOffset)].As<FloatInterval>(); } set { this["VerticalAngleOffset"] = value; } }
        public FloatInterval Delay { get { return this[nameof(Delay)].As<FloatInterval>(); } set { this["Delay"] = value; } }
        public bool IsBallistic { get { return this[nameof(IsBallistic)].Flag; } set { this[nameof(IsBallistic)].Flag = value; } }
    }
    public class ActiveAudioItem : Object
    {
        public ActiveAudioItem(nint addr) : base(addr) { }
        public AudioComponent Audio { get { return this[nameof(Audio)].As<AudioComponent>(); } set { this["Audio"] = value; } }
        public float FadeoutDuration { get { return this[nameof(FadeoutDuration)].GetValue<float>(); } set { this[nameof(FadeoutDuration)].SetValue<float>(value); } }
    }
    public class ActiveMusicItem : Object
    {
        public ActiveMusicItem(nint addr) : base(addr) { }
        public SoundBase Sound { get { return this[nameof(Sound)].As<SoundBase>(); } set { this["Sound"] = value; } }
        public float StartingTime { get { return this[nameof(StartingTime)].GetValue<float>(); } set { this[nameof(StartingTime)].SetValue<float>(value); } }
        public float FadeDuration { get { return this[nameof(FadeDuration)].GetValue<float>(); } set { this[nameof(FadeDuration)].SetValue<float>(value); } }
        public bool Looping { get { return this[nameof(Looping)].Flag; } set { this[nameof(Looping)].Flag = value; } }
        public MusicHandle Handle { get { return this[nameof(Handle)].As<MusicHandle>(); } set { this["Handle"] = value; } }
        public MusicCategory Category { get { return this[nameof(Category)].As<MusicCategory>(); } set { this["Category"] = value; } }
    }
    public class MusicHandle : Object
    {
        public MusicHandle(nint addr) : base(addr) { }
        public int MusicHandle_value { get { return this[nameof(MusicHandle)].GetValue<int>(); } set { this[nameof(MusicHandle)].SetValue<int>(value); } }
    }
    public class PathCell : Object
    {
        public PathCell(nint addr) : base(addr) { }
    }
    public class PathDebugNode : Object
    {
        public PathDebugNode(nint addr) : base(addr) { }
    }
    public class OxygenCallback : Object
    {
        public OxygenCallback(nint addr) : base(addr) { }
        public Object Delegate { get { return this[nameof(Delegate)]; } set { this[nameof(Delegate)] = value; } }
    }
    public class SpaceRigNotification : Object
    {
        public SpaceRigNotification(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public LinearColor IconColor { get { return this[nameof(IconColor)].As<LinearColor>(); } set { this["IconColor"] = value; } }
    }
    public class SimpleObjectInfoData : Object
    {
        public SimpleObjectInfoData(nint addr) : base(addr) { }
        public Object InGameName { get { return this[nameof(InGameName)]; } set { this[nameof(InGameName)] = value; } }
        public Object InGameDescription { get { return this[nameof(InGameDescription)]; } set { this[nameof(InGameDescription)] = value; } }
        public DialogDataAsset LookAtShout { get { return this[nameof(LookAtShout)].As<DialogDataAsset>(); } set { this["LookAtShout"] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
    }
    public class PathObstacle : Object
    {
        public PathObstacle(nint addr) : base(addr) { }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class PawnStatEntriesArray : FastArraySerializer
    {
        public PawnStatEntriesArray(nint addr) : base(addr) { }
        public UArray<PawnStatEntry> Items { get { return new UArray<PawnStatEntry>(this[nameof(Items)].Address); } }
        public PawnStatsComponent Owner { get { return this[nameof(Owner)].As<PawnStatsComponent>(); } set { this["Owner"] = value; } }
    }
    public class PawnStatEntry : FastArraySerializerItem
    {
        public PawnStatEntry(nint addr) : base(addr) { }
        public PawnStat PawnStat { get { return this[nameof(PawnStat)].As<PawnStat>(); } set { this["PawnStat"] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class PendingRewards : Object
    {
        public PendingRewards(nint addr) : base(addr) { }
        public PendingRewardsStats StartStats { get { return this[nameof(StartStats)].As<PendingRewardsStats>(); } set { this["StartStats"] = value; } }
        public PendingRewardsStats EndStats { get { return this[nameof(EndStats)].As<PendingRewardsStats>(); } set { this["EndStats"] = value; } }
        public UArray<CreditsReward> CreditsRewardEntries { get { return new UArray<CreditsReward>(this[nameof(CreditsRewardEntries)].Address); } }
        public int CreditsReward { get { return this[nameof(CreditsReward)].GetValue<int>(); } set { this[nameof(CreditsReward)].SetValue<int>(value); } }
        public UArray<XPReward> XPRewardEntries { get { return new UArray<XPReward>(this[nameof(XPRewardEntries)].Address); } }
        public int XPReward { get { return this[nameof(XPReward)].GetValue<int>(); } set { this[nameof(XPReward)].SetValue<int>(value); } }
        public bool bHasData { get { return this[nameof(bHasData)].Flag; } set { this[nameof(bHasData)].Flag = value; } }
        public bool bIsRecording { get { return this[nameof(bIsRecording)].Flag; } set { this[nameof(bIsRecording)].Flag = value; } }
        public bool bWasRewarded { get { return this[nameof(bWasRewarded)].Flag; } set { this[nameof(bWasRewarded)].Flag = value; } }
    }
    public class PendingRewardsStats : Object
    {
        public PendingRewardsStats(nint addr) : base(addr) { }
        public Object AllResources { get { return this[nameof(AllResources)]; } set { this[nameof(AllResources)] = value; } }
        public Object CollectedResources { get { return this[nameof(CollectedResources)]; } set { this[nameof(CollectedResources)] = value; } }
        public bool PrimaryObjectiveCompleted { get { return this[nameof(PrimaryObjectiveCompleted)].Flag; } set { this[nameof(PrimaryObjectiveCompleted)].Flag = value; } }
        public bool SecondaryObjectiveCompleted { get { return this[nameof(SecondaryObjectiveCompleted)].Flag; } set { this[nameof(SecondaryObjectiveCompleted)].Flag = value; } }
        public float TimePlayed { get { return this[nameof(TimePlayed)].GetValue<float>(); } set { this[nameof(TimePlayed)].SetValue<float>(value); } }
        public int EnemiesKilled { get { return this[nameof(EnemiesKilled)].GetValue<int>(); } set { this[nameof(EnemiesKilled)].SetValue<int>(value); } }
    }
    public class PerkUsage : Object
    {
        public PerkUsage(nint addr) : base(addr) { }
        public PerkAsset Perk { get { return this[nameof(Perk)].As<PerkAsset>(); } set { this["Perk"] = value; } }
        public int UsedCount { get { return this[nameof(UsedCount)].GetValue<int>(); } set { this[nameof(UsedCount)].SetValue<int>(value); } }
    }
    public class PickaxeMeshInstance : Object
    {
        public PickaxeMeshInstance(nint addr) : base(addr) { }
        public MeshComponent FP_Mesh { get { return this[nameof(FP_Mesh)].As<MeshComponent>(); } set { this["FP_Mesh"] = value; } }
        public MeshComponent TP_Mesh { get { return this[nameof(TP_Mesh)].As<MeshComponent>(); } set { this["TP_Mesh"] = value; } }
    }
    public class DefaultPickaxeParts : Object
    {
        public DefaultPickaxeParts(nint addr) : base(addr) { }
        public Object Parts { get { return this[nameof(Parts)]; } set { this[nameof(Parts)] = value; } }
    }
    public class PillarSegment : Object
    {
        public PillarSegment(nint addr) : base(addr) { }
        public float Scale { get { return this[nameof(Scale)].GetValue<float>(); } set { this[nameof(Scale)].SetValue<float>(value); } }
        public float HeightOffset { get { return this[nameof(HeightOffset)].GetValue<float>(); } set { this[nameof(HeightOffset)].SetValue<float>(value); } }
    }
    public class PlacementObstruction : Object
    {
        public PlacementObstruction(nint addr) : base(addr) { }
        public float range { get { return this[nameof(range)].GetValue<float>(); } set { this[nameof(range)].SetValue<float>(value); } }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
    }
    public class DropInfo : Object
    {
        public DropInfo(nint addr) : base(addr) { }
        public Vector from { get { return this[nameof(from)].As<Vector>(); } set { this["from"] = value; } }
        public Vector to { get { return this[nameof(to)].As<Vector>(); } set { this["to"] = value; } }
        public bool HasLanded { get { return this[nameof(HasLanded)].Flag; } set { this[nameof(HasLanded)].Flag = value; } }
    }
    public class ShardStage : Object
    {
        public ShardStage(nint addr) : base(addr) { }
        public UArray<StaticMesh> Shards { get { return new UArray<StaticMesh>(this[nameof(Shards)].Address); } }
    }
    public class HealthRegenerationParams : Object
    {
        public HealthRegenerationParams(nint addr) : base(addr) { }
        public bool bIsRegenerating { get { return this[nameof(bIsRegenerating)].Flag; } set { this[nameof(bIsRegenerating)].Flag = value; } }
        public float DelayAfterDamage { get { return this[nameof(DelayAfterDamage)].GetValue<float>(); } set { this[nameof(DelayAfterDamage)].SetValue<float>(value); } }
        public float HealthPerSecond { get { return this[nameof(HealthPerSecond)].GetValue<float>(); } set { this[nameof(HealthPerSecond)].SetValue<float>(value); } }
        public float TargetHealthRatio { get { return this[nameof(TargetHealthRatio)].GetValue<float>(); } set { this[nameof(TargetHealthRatio)].SetValue<float>(value); } }
    }
    public class PlayerSphere : Object
    {
        public PlayerSphere(nint addr) : base(addr) { }
        public Vector Center { get { return this[nameof(Center)].As<Vector>(); } set { this["Center"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public UArray<Object> Players { get { return new UArray<Object>(this[nameof(Players)].Address); } }
    }
    public class ProximityTriggerItem : Object
    {
        public ProximityTriggerItem(nint addr) : base(addr) { }
        public Object Callback { get { return this[nameof(Callback)]; } set { this[nameof(Callback)] = value; } }
    }
    public class RejoinFloat : Object
    {
        public RejoinFloat(nint addr) : base(addr) { }
        public Guid ItemKey { get { return this[nameof(ItemKey)].As<Guid>(); } set { this["ItemKey"] = value; } }
        public Object ValueKey { get { return this[nameof(ValueKey)]; } set { this[nameof(ValueKey)] = value; } }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
    }
    public class RejoinInt : Object
    {
        public RejoinInt(nint addr) : base(addr) { }
        public Guid ItemKey { get { return this[nameof(ItemKey)].As<Guid>(); } set { this["ItemKey"] = value; } }
        public Object ValueKey { get { return this[nameof(ValueKey)]; } set { this[nameof(ValueKey)] = value; } }
        public int Value { get { return this[nameof(Value)].GetValue<int>(); } set { this[nameof(Value)].SetValue<int>(value); } }
    }
    public class PostDataModel : Object
    {
        public PostDataModel(nint addr) : base(addr) { }
    }
    public class PostProcessingBlendable : Object
    {
        public PostProcessingBlendable(nint addr) : base(addr) { }
        public Object Blendable { get { return this[nameof(Blendable)]; } set { this[nameof(Blendable)] = value; } }
    }
    public class InfluenceMap : Object
    {
        public InfluenceMap(nint addr) : base(addr) { }
        public Object CaveInfluences { get { return this[nameof(CaveInfluences)]; } set { this[nameof(CaveInfluences)] = value; } }
    }
    public class CaveInfluenceSet : Object
    {
        public CaveInfluenceSet(nint addr) : base(addr) { }
        public UArray<CaveInfluence> CaveInfluences { get { return new UArray<CaveInfluence>(this[nameof(CaveInfluences)].Address); } }
    }
    public class GemResourceAmount : Object
    {
        public GemResourceAmount(nint addr) : base(addr) { }
        public GemResourceCreator GemCreator { get { return this[nameof(GemCreator)].As<GemResourceCreator>(); } set { this["GemCreator"] = value; } }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class CarvedResource : Object
    {
        public CarvedResource(nint addr) : base(addr) { }
        public CarvedResourceCreator ResourceCreator { get { return this[nameof(ResourceCreator)].As<CarvedResourceCreator>(); } set { this["ResourceCreator"] = value; } }
        public UArray<int> PredeterminedRooms { get { return new UArray<int>(this[nameof(PredeterminedRooms)].Address); } }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
        public float Overflow { get { return this[nameof(Overflow)].GetValue<float>(); } set { this[nameof(Overflow)].SetValue<float>(value); } }
    }
    public class DebrisVeinResource : Object
    {
        public DebrisVeinResource(nint addr) : base(addr) { }
        public DebrisVeinComponent Debris { get { return this[nameof(Debris)].As<DebrisVeinComponent>(); } set { this["Debris"] = value; } }
    }
    public class VeinResource : Object
    {
        public VeinResource(nint addr) : base(addr) { }
        public VeinResourceCreator ResourceCreator { get { return this[nameof(ResourceCreator)].As<VeinResourceCreator>(); } set { this["ResourceCreator"] = value; } }
        public float VeinLengthToGenerate { get { return this[nameof(VeinLengthToGenerate)].GetValue<float>(); } set { this[nameof(VeinLengthToGenerate)].SetValue<float>(value); } }
    }
    public class GeneratedInstantCarvers : Object
    {
        public GeneratedInstantCarvers(nint addr) : base(addr) { }
        public UArray<LevelCarverPass> LevelCarverPasses { get { return new UArray<LevelCarverPass>(this[nameof(LevelCarverPasses)].Address); } }
    }
    public class LevelCarverPass : Object
    {
        public LevelCarverPass(nint addr) : base(addr) { }
        public UArray<LevelGenerationCarverLists> Lists { get { return new UArray<LevelGenerationCarverLists>(this[nameof(Lists)].Address); } }
    }
    public class LevelGenerationCarverLists : Object
    {
        public LevelGenerationCarverLists(nint addr) : base(addr) { }
        public UArray<LevelGenerationCarver> Carvers { get { return new UArray<LevelGenerationCarver>(this[nameof(Carvers)].Address); } }
    }
    public class TerrainPlacementDebugItem : Object
    {
        public TerrainPlacementDebugItem(nint addr) : base(addr) { }
        public UArray<TerrainPlacementBox> TerrainCheckers { get { return new UArray<TerrainPlacementBox>(this[nameof(TerrainCheckers)].Address); } }
        public bool BoxGood { get { return this[nameof(BoxGood)].Flag; } set { this[nameof(BoxGood)].Flag = value; } }
        public bool CapsuleGood { get { return this[nameof(CapsuleGood)].Flag; } set { this[nameof(CapsuleGood)].Flag = value; } }
        public EDebrisColliderType CapsuleType { get { return (EDebrisColliderType)this[nameof(CapsuleType)].GetValue<int>(); } set { this[nameof(CapsuleType)].SetValue<int>((int)value); } }
        public DebrisCapsule Capsule { get { return this[nameof(Capsule)].As<DebrisCapsule>(); } set { this["Capsule"] = value; } }
        public Transform Transform { get { return this[nameof(Transform)].As<Transform>(); } set { this["Transform"] = value; } }
    }
    public class TerrainPlacementBox : Object
    {
        public TerrainPlacementBox(nint addr) : base(addr) { }
        public Vector Min { get { return this[nameof(Min)].As<Vector>(); } set { this["Min"] = value; } }
        public Vector Max { get { return this[nameof(Max)].As<Vector>(); } set { this["Max"] = value; } }
        public ETerrainPlacementBoxType PlacementType { get { return (ETerrainPlacementBoxType)this[nameof(PlacementType)].GetValue<int>(); } set { this[nameof(PlacementType)].SetValue<int>((int)value); } }
    }
    public class GeneratedDebris : Object
    {
        public GeneratedDebris(nint addr) : base(addr) { }
        public Object Debris { get { return this[nameof(Debris)]; } set { this[nameof(Debris)] = value; } }
        public bool IsValid { get { return this[nameof(IsValid)].Flag; } set { this[nameof(IsValid)].Flag = value; } }
    }
    public class GeneratedDebrisItem : Object
    {
        public GeneratedDebrisItem(nint addr) : base(addr) { }
        public DebrisBase Debris { get { return this[nameof(Debris)].As<DebrisBase>(); } set { this["Debris"] = value; } }
        public Object Influencer { get { return this[nameof(Influencer)].As<Object>(); } set { this["Influencer"] = value; } }
    }
    public class GeneratedInfluenceSets : Object
    {
        public GeneratedInfluenceSets(nint addr) : base(addr) { }
        public UArray<GeneratedInfluenceSet> InfluenceSets { get { return new UArray<GeneratedInfluenceSet>(this[nameof(InfluenceSets)].Address); } }
        public bool IsValid { get { return this[nameof(IsValid)].Flag; } set { this[nameof(IsValid)].Flag = value; } }
    }
    public class GeneratedInfluenceSet : Object
    {
        public GeneratedInfluenceSet(nint addr) : base(addr) { }
        public Object CaveInfluencer { get { return this[nameof(CaveInfluencer)].As<Object>(); } set { this["CaveInfluencer"] = value; } }
        public int NetworkID { get { return this[nameof(NetworkID)].GetValue<int>(); } set { this[nameof(NetworkID)].SetValue<int>(value); } }
        public UArray<CaveInfluence> CaveInfluences { get { return new UArray<CaveInfluence>(this[nameof(CaveInfluences)].Address); } }
    }
    public class CollectableSpawnableItem : Object
    {
        public CollectableSpawnableItem(nint addr) : base(addr) { }
        public CollectableResourceData Resource { get { return this[nameof(Resource)].As<CollectableResourceData>(); } set { this["Resource"] = value; } }
        public int amount { get { return this[nameof(amount)].GetValue<int>(); } set { this[nameof(amount)].SetValue<int>(value); } }
    }
    public class ResourceSpawner : Object
    {
        public ResourceSpawner(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public RandFloatInterval AmountToSpawn { get { return this[nameof(AmountToSpawn)].As<RandFloatInterval>(); } set { this["AmountToSpawn"] = value; } }
    }
    public class PLSResource : Object
    {
        public PLSResource(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float AmountToGenerate { get { return this[nameof(AmountToGenerate)].GetValue<float>(); } set { this[nameof(AmountToGenerate)].SetValue<float>(value); } }
    }
    public class InfluenceSphere : Object
    {
        public InfluenceSphere(nint addr) : base(addr) { }
        public CaveInfluencer Influencer { get { return this[nameof(Influencer)].As<CaveInfluencer>(); } set { this["Influencer"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
    }
    public class ProfileCategoryTiming : Object
    {
        public ProfileCategoryTiming(nint addr) : base(addr) { }
        public Object CategoryName { get { return this[nameof(CategoryName)]; } set { this[nameof(CategoryName)] = value; } }
        public float CategoryTime { get { return this[nameof(CategoryTime)].GetValue<float>(); } set { this[nameof(CategoryTime)].SetValue<float>(value); } }
    }
    public class ProfileEntry : Object
    {
        public ProfileEntry(nint addr) : base(addr) { }
        public Object Context { get { return this[nameof(Context)]; } set { this[nameof(Context)] = value; } }
        public Object Category { get { return this[nameof(Category)]; } set { this[nameof(Category)] = value; } }
        public float TimeSpent { get { return this[nameof(TimeSpent)].GetValue<float>(); } set { this[nameof(TimeSpent)].SetValue<float>(value); } }
    }
    public class DormantComponentState : Object
    {
        public DormantComponentState(nint addr) : base(addr) { }
        public Object Component { get { return this[nameof(Component)]; } set { this[nameof(Component)] = value; } }
        public byte Collision { get { return this[nameof(Collision)].GetValue<byte>(); } set { this[nameof(Collision)].SetValue<byte>(value); } }
        public Object CollisionProfileName { get { return this[nameof(CollisionProfileName)]; } set { this[nameof(CollisionProfileName)] = value; } }
        public bool Active { get { return this[nameof(Active)].Flag; } set { this[nameof(Active)].Flag = value; } }
        public bool Visible { get { return this[nameof(Visible)].Flag; } set { this[nameof(Visible)].Flag = value; } }
    }
    public class PropHuntSettingsShouts : Object
    {
        public PropHuntSettingsShouts(nint addr) : base(addr) { }
        public DialogDataAsset DrinkHunter { get { return this[nameof(DrinkHunter)].As<DialogDataAsset>(); } set { this["DrinkHunter"] = value; } }
        public DialogDataAsset DrinkProp { get { return this[nameof(DrinkProp)].As<DialogDataAsset>(); } set { this["DrinkProp"] = value; } }
        public DialogDataAsset PropHit_AsProp { get { return this[nameof(PropHit_AsProp)].As<DialogDataAsset>(); } set { this["PropHit_AsProp"] = value; } }
        public DialogDataAsset PropHit_AsHunter { get { return this[nameof(PropHit_AsHunter)].As<DialogDataAsset>(); } set { this["PropHit_AsHunter"] = value; } }
        public DialogDataAsset Attention_Prop { get { return this[nameof(Attention_Prop)].As<DialogDataAsset>(); } set { this["Attention_Prop"] = value; } }
        public DialogDataAsset Attention_Hunter { get { return this[nameof(Attention_Hunter)].As<DialogDataAsset>(); } set { this["Attention_Hunter"] = value; } }
    }
    public class PropHuntEventSettings : Object
    {
        public PropHuntEventSettings(nint addr) : base(addr) { }
        public Object DisguiseActors { get { return this[nameof(DisguiseActors)]; } set { this[nameof(DisguiseActors)] = value; } }
    }
    public class RagdollItem : Object
    {
        public RagdollItem(nint addr) : base(addr) { }
        public Actor Actor { get { return this[nameof(Actor)].As<Actor>(); } set { this["Actor"] = value; } }
        public UArray<MaterialInstanceDynamic> Materials { get { return new UArray<MaterialInstanceDynamic>(this[nameof(Materials)].Address); } }
        public MaterialInstanceDynamic DropshadowMaterial { get { return this[nameof(DropshadowMaterial)].As<MaterialInstanceDynamic>(); } set { this["DropshadowMaterial"] = value; } }
    }
    public class RandLinePoint : Object
    {
        public RandLinePoint(nint addr) : base(addr) { }
        public Vector Location { get { return this[nameof(Location)].As<Vector>(); } set { this["Location"] = value; } }
        public RandRange range { get { return this[nameof(range)].As<RandRange>(); } set { this["range"] = value; } }
        public RandRange NoiseRange { get { return this[nameof(NoiseRange)].As<RandRange>(); } set { this["NoiseRange"] = value; } }
        public RandRange SkewFactor { get { return this[nameof(SkewFactor)].As<RandRange>(); } set { this["SkewFactor"] = value; } }
        public RandRange FillAmount { get { return this[nameof(FillAmount)].As<RandRange>(); } set { this["FillAmount"] = value; } }
    }
    public class ExposedProperty : Object
    {
        public ExposedProperty(nint addr) : base(addr) { }
    }
    public class ExposedFloat : ExposedProperty
    {
        public ExposedFloat(nint addr) : base(addr) { }
        public Object PropertyName { get { return this[nameof(PropertyName)]; } set { this[nameof(PropertyName)] = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
    }
    public class ExposableFloat : Object
    {
        public ExposableFloat(nint addr) : base(addr) { }
        public float Value { get { return this[nameof(Value)].GetValue<float>(); } set { this[nameof(Value)].SetValue<float>(value); } }
        public bool Exposed { get { return this[nameof(Exposed)].Flag; } set { this[nameof(Exposed)].Flag = value; } }
        public Object Description { get { return this[nameof(Description)]; } set { this[nameof(Description)] = value; } }
        public float MinValue { get { return this[nameof(MinValue)].GetValue<float>(); } set { this[nameof(MinValue)].SetValue<float>(value); } }
        public float MaxValue { get { return this[nameof(MaxValue)].GetValue<float>(); } set { this[nameof(MaxValue)].SetValue<float>(value); } }
    }
    public class RecoilImpulse : Object
    {
        public RecoilImpulse(nint addr) : base(addr) { }
        public float Rotation { get { return this[nameof(Rotation)].GetValue<float>(); } set { this[nameof(Rotation)].SetValue<float>(value); } }
        public Vector2D Impulse { get { return this[nameof(Impulse)].As<Vector2D>(); } set { this["Impulse"] = value; } }
    }
    public class ReflectionTraceResult : Object
    {
        public ReflectionTraceResult(nint addr) : base(addr) { }
        public UArray<ScanPath> Path { get { return new UArray<ScanPath>(this[nameof(Path)].Address); } }
        public ReflectiveHitscanHit FinalHit { get { return this[nameof(FinalHit)].As<ReflectiveHitscanHit>(); } set { this["FinalHit"] = value; } }
    }
    public class ReflectiveHitscanHit : Object
    {
        public ReflectiveHitscanHit(nint addr) : base(addr) { }
        public PrimitiveComponent Component { get { return this[nameof(Component)].As<PrimitiveComponent>(); } set { this["Component"] = value; } }
        public byte BoneIndex { get { return this[nameof(BoneIndex)].GetValue<byte>(); } set { this[nameof(BoneIndex)].SetValue<byte>(value); } }
        public Object BoneName { get { return this[nameof(BoneName)]; } set { this[nameof(BoneName)] = value; } }
        public Vector_NetQuantize HitLocation { get { return this[nameof(HitLocation)].As<Vector_NetQuantize>(); } set { this["HitLocation"] = value; } }
        public Vector_NetQuantizeNormal ImpactNormal { get { return this[nameof(ImpactNormal)].As<Vector_NetQuantizeNormal>(); } set { this["ImpactNormal"] = value; } }
        public FSDPhysicalMaterial PhysMat { get { return this[nameof(PhysMat)].As<FSDPhysicalMaterial>(); } set { this["PhysMat"] = value; } }
    }
    public class ScanPath : Object
    {
        public ScanPath(nint addr) : base(addr) { }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
    }
    public class ResourceInitalizer : Object
    {
        public ResourceInitalizer(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
        public float MaxAmount { get { return this[nameof(MaxAmount)].GetValue<float>(); } set { this[nameof(MaxAmount)].SetValue<float>(value); } }
    }
    public class ResourcePouchItem : Object
    {
        public ResourcePouchItem(nint addr) : base(addr) { }
        public ResourceData Resource { get { return this[nameof(Resource)].As<ResourceData>(); } set { this["Resource"] = value; } }
    }
    public class ResourceDebris : Object
    {
        public ResourceDebris(nint addr) : base(addr) { }
        public float InfluencerRange { get { return this[nameof(InfluencerRange)].GetValue<float>(); } set { this[nameof(InfluencerRange)].SetValue<float>(value); } }
        public DebrisBase Debris { get { return this[nameof(Debris)].As<DebrisBase>(); } set { this["Debris"] = value; } }
    }
    public class RichTextParseResult : Object
    {
        public RichTextParseResult(nint addr) : base(addr) { }
        public Object SourceText { get { return this[nameof(SourceText)]; } set { this[nameof(SourceText)] = value; } }
        public Object UnformattedString { get { return this[nameof(UnformattedString)]; } set { this[nameof(UnformattedString)] = value; } }
        public int UnformattedLength { get { return this[nameof(UnformattedLength)].GetValue<int>(); } set { this[nameof(UnformattedLength)].SetValue<int>(value); } }
        public UArray<RichTextToken> Tokens { get { return new UArray<RichTextToken>(this[nameof(Tokens)].Address); } }
    }
    public class RichTextToken : Object
    {
        public RichTextToken(nint addr) : base(addr) { }
        public Object Tag { get { return this[nameof(Tag)]; } set { this[nameof(Tag)] = value; } }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
    }
    public class TextStyleOverride : Object
    {
        public TextStyleOverride(nint addr) : base(addr) { }
        public bool bOverrideFont { get { return this[nameof(bOverrideFont)].Flag; } set { this[nameof(bOverrideFont)].Flag = value; } }
        public SlateFontInfo Font { get { return this[nameof(Font)].As<SlateFontInfo>(); } set { this["Font"] = value; } }
        public bool bOverrideColor { get { return this[nameof(bOverrideColor)].Flag; } set { this[nameof(bOverrideColor)].Flag = value; } }
        public SlateColor Color { get { return this[nameof(Color)].As<SlateColor>(); } set { this["Color"] = value; } }
        public bool bOverrideSize { get { return this[nameof(bOverrideSize)].Flag; } set { this[nameof(bOverrideSize)].Flag = value; } }
        public float SizeScale { get { return this[nameof(SizeScale)].GetValue<float>(); } set { this[nameof(SizeScale)].SetValue<float>(value); } }
    }
    public class RiftBeam : Object
    {
        public RiftBeam(nint addr) : base(addr) { }
    }
    public class KnockbackData : Object
    {
        public KnockbackData(nint addr) : base(addr) { }
        public Vector Direction { get { return this[nameof(Direction)].As<Vector>(); } set { this["Direction"] = value; } }
        public float force { get { return this[nameof(force)].GetValue<float>(); } set { this[nameof(force)].SetValue<float>(value); } }
        public float Progress { get { return this[nameof(Progress)].GetValue<float>(); } set { this[nameof(Progress)].SetValue<float>(value); } }
    }
    public class RoomGeneratorGroupInstance : Object
    {
        public RoomGeneratorGroupInstance(nint addr) : base(addr) { }
        public UArray<RoomGenerator> Rooms { get { return new UArray<RoomGenerator>(this[nameof(Rooms)].Address); } }
    }
    public class RoomGeneratorItem : Object
    {
        public RoomGeneratorItem(nint addr) : base(addr) { }
        public RoomGeneratorBase RoomGenerator { get { return this[nameof(RoomGenerator)].As<RoomGeneratorBase>(); } set { this["RoomGenerator"] = value; } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public float Rotation { get { return this[nameof(Rotation)].GetValue<float>(); } set { this[nameof(Rotation)].SetValue<float>(value); } }
    }
    public class RoomNodeBase : Object
    {
        public RoomNodeBase(nint addr) : base(addr) { }
    }
    public class RoomNode : RoomNodeBase
    {
        public RoomNode(nint addr) : base(addr) { }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public int CarvePass { get { return this[nameof(CarvePass)].GetValue<int>(); } set { this[nameof(CarvePass)].SetValue<int>(value); } }
        public Vector Position { get { return this[nameof(Position)].As<Vector>(); } set { this["Position"] = value; } }
        public float Radius { get { return this[nameof(Radius)].GetValue<float>(); } set { this[nameof(Radius)].SetValue<float>(value); } }
        public UArray<int> EntranceIDs { get { return new UArray<int>(this[nameof(EntranceIDs)].Address); } }
        public UArray<int> ExitIDs { get { return new UArray<int>(this[nameof(ExitIDs)].Address); } }
        public UArray<RoomEntrance> RoomEntrances { get { return new UArray<RoomEntrance>(this[nameof(RoomEntrances)].Address); } }
        public bool CanHaveEnemies { get { return this[nameof(CanHaveEnemies)].Flag; } set { this[nameof(CanHaveEnemies)].Flag = value; } }
        public UArray<GeneratedRoom> Rooms { get { return new UArray<GeneratedRoom>(this[nameof(Rooms)].Address); } }
        public float ResourceMultiplier { get { return this[nameof(ResourceMultiplier)].GetValue<float>(); } set { this[nameof(ResourceMultiplier)].SetValue<float>(value); } }
        public bool CanBeUsedForRoomBasedDistribution { get { return this[nameof(CanBeUsedForRoomBasedDistribution)].Flag; } set { this[nameof(CanBeUsedForRoomBasedDistribution)].Flag = value; } }
        public float WeightedResourceAmount { get { return this[nameof(WeightedResourceAmount)].GetValue<float>(); } set { this[nameof(WeightedResourceAmount)].SetValue<float>(value); } }
        public UArray<RoomGeneratorItem> RoomGenerators { get { return new UArray<RoomGeneratorItem>(this[nameof(RoomGenerators)].Address); } }
    }
    public class SaveGameSnapShot : Object
    {
        public SaveGameSnapShot(nint addr) : base(addr) { }
        public Object SaveGame { get { return this[nameof(SaveGame)]; } set { this[nameof(SaveGame)] = value; } }
        public Object Filename { get { return this[nameof(Filename)]; } set { this[nameof(Filename)] = value; } }
        public bool IsObsolete { get { return this[nameof(IsObsolete)].Flag; } set { this[nameof(IsObsolete)].Flag = value; } }
        public int VersionNumber { get { return this[nameof(VersionNumber)].GetValue<int>(); } set { this[nameof(VersionNumber)].SetValue<int>(value); } }
        public int Credits { get { return this[nameof(Credits)].GetValue<int>(); } set { this[nameof(Credits)].SetValue<int>(value); } }
        public Object CharacterLevels { get { return this[nameof(CharacterLevels)]; } set { this[nameof(CharacterLevels)] = value; } }
        public Object Resources { get { return this[nameof(Resources)]; } set { this[nameof(Resources)] = value; } }
    }
    public class SchematicGADataEntry : TableRowBase
    {
        public SchematicGADataEntry(nint addr) : base(addr) { }
        public int SchematicGAID { get { return this[nameof(SchematicGAID)].GetValue<int>(); } set { this[nameof(SchematicGAID)].SetValue<int>(value); } }
        public Object SchematicName { get { return this[nameof(SchematicName)]; } set { this[nameof(SchematicName)] = value; } }
    }
    public class SchematicBankItem : Object
    {
        public SchematicBankItem(nint addr) : base(addr) { }
        public SchematicPricingTier PricingTier { get { return this[nameof(PricingTier)].As<SchematicPricingTier>(); } set { this["PricingTier"] = value; } }
        public SchematicRarity Rarity { get { return this[nameof(Rarity)].As<SchematicRarity>(); } set { this["Rarity"] = value; } }
        public UArray<Schematic> Schematics { get { return new UArray<Schematic>(this[nameof(Schematics)].Address); } }
    }
    public class SchematicType : Object
    {
        public SchematicType(nint addr) : base(addr) { }
        public Object Icon { get { return this[nameof(Icon)]; } set { this[nameof(Icon)] = value; } }
        public LinearColor IconTint { get { return this[nameof(IconTint)].As<LinearColor>(); } set { this["IconTint"] = value; } }
        public Object Frame { get { return this[nameof(Frame)]; } set { this[nameof(Frame)] = value; } }
        public LinearColor FrameTint { get { return this[nameof(FrameTint)].As<LinearColor>(); } set { this["FrameTint"] = value; } }
    }
    public class UnassignedReward : Object
    {
        public UnassignedReward(nint addr) : base(addr) { }
        public Reward Reward { get { return this[nameof(Reward)].As<Reward>(); } set { this["Reward"] = value; } }
        public int Index { get { return this[nameof(Index)].GetValue<int>(); } set { this[nameof(Index)].SetValue<int>(value); } }
    }
    public class SeasonLevel : Object
    {
        public SeasonLevel(nint addr) : base(addr) { }
        public Reward Reward { get { return this[nameof(Reward)].As<Reward>(); } set { this["Reward"] = value; } }
        public Reward actualReward { get { return this[nameof(actualReward)].As<Reward>(); } set { this["actualReward"] = value; } }
        public Reward specialReward { get { return this[nameof(specialReward)].As<Reward>(); } set { this["specialReward"] = value; } }
    }
    public class TrackedStatInfo : Object
    {
        public TrackedStatInfo(nint addr) : base(addr) { }
        public MissionStat Stat { get { return this[nameof(Stat)].As<MissionStat>(); } set { this["Stat"] = value; } }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
        public DataAsset assetReference { get { return this[nameof(assetReference)].As<DataAsset>(); } set { this["assetReference"] = value; } }
    }
    public class ChallengeInfo : Object
    {
        public ChallengeInfo(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Texture2D Icon { get { return this[nameof(Icon)].As<Texture2D>(); } set { this["Icon"] = value; } }
        public Texture2D IconOutlined { get { return this[nameof(IconOutlined)].As<Texture2D>(); } set { this["IconOutlined"] = value; } }
        public LinearColor Color { get { return this[nameof(Color)].As<LinearColor>(); } set { this["Color"] = value; } }
        public int CurrentWins { get { return this[nameof(CurrentWins)].GetValue<int>(); } set { this[nameof(CurrentWins)].SetValue<int>(value); } }
        public int NumberOfWins { get { return this[nameof(NumberOfWins)].GetValue<int>(); } set { this[nameof(NumberOfWins)].SetValue<int>(value); } }
        public int XPCompleteGain { get { return this[nameof(XPCompleteGain)].GetValue<int>(); } set { this[nameof(XPCompleteGain)].SetValue<int>(value); } }
        public int TokenGain { get { return this[nameof(TokenGain)].GetValue<int>(); } set { this[nameof(TokenGain)].SetValue<int>(value); } }
        public Object Stat1Image { get { return this[nameof(Stat1Image)]; } set { this[nameof(Stat1Image)] = value; } }
        public Object Stat2Image { get { return this[nameof(Stat2Image)]; } set { this[nameof(Stat2Image)] = value; } }
        public bool bIsSpecial { get { return this[nameof(bIsSpecial)].Flag; } set { this[nameof(bIsSpecial)].Flag = value; } }
    }
    public class ChallengeVariation : Object
    {
        public ChallengeVariation(nint addr) : base(addr) { }
        public int NumberOfWins { get { return this[nameof(NumberOfWins)].GetValue<int>(); } set { this[nameof(NumberOfWins)].SetValue<int>(value); } }
        public int XPCompleteGain { get { return this[nameof(XPCompleteGain)].GetValue<int>(); } set { this[nameof(XPCompleteGain)].SetValue<int>(value); } }
        public int TokenGain { get { return this[nameof(TokenGain)].GetValue<int>(); } set { this[nameof(TokenGain)].SetValue<int>(value); } }
    }
    public class SeasonalEventEntryChance : Object
    {
        public SeasonalEventEntryChance(nint addr) : base(addr) { }
        public SpecialEvent SpecialEvent { get { return this[nameof(SpecialEvent)].As<SpecialEvent>(); } set { this["SpecialEvent"] = value; } }
        public float SpawnChance { get { return this[nameof(SpawnChance)].GetValue<float>(); } set { this[nameof(SpawnChance)].SetValue<float>(value); } }
    }
    public class SeasonalEventEntry : Object
    {
        public SeasonalEventEntry(nint addr) : base(addr) { }
        public SpecialEvent SpecialEvent { get { return this[nameof(SpecialEvent)].As<SpecialEvent>(); } set { this["SpecialEvent"] = value; } }
        public int RequiredMainCampaignProgress { get { return this[nameof(RequiredMainCampaignProgress)].GetValue<int>(); } set { this[nameof(RequiredMainCampaignProgress)].SetValue<int>(value); } }
    }
    public class SeasonMissionResult : Object
    {
        public SeasonMissionResult(nint addr) : base(addr) { }
        public int XPFromMission { get { return this[nameof(XPFromMission)].GetValue<int>(); } set { this[nameof(XPFromMission)].SetValue<int>(value); } }
        public int XPFromChallenges { get { return this[nameof(XPFromChallenges)].GetValue<int>(); } set { this[nameof(XPFromChallenges)].SetValue<int>(value); } }
        public int XPFromRewards { get { return this[nameof(XPFromRewards)].GetValue<int>(); } set { this[nameof(XPFromRewards)].SetValue<int>(value); } }
        public float XPMultiplier { get { return this[nameof(XPMultiplier)].GetValue<float>(); } set { this[nameof(XPMultiplier)].SetValue<float>(value); } }
        public int TokenGain { get { return this[nameof(TokenGain)].GetValue<int>(); } set { this[nameof(TokenGain)].SetValue<int>(value); } }
        public bool LevelIncreased { get { return this[nameof(LevelIncreased)].Flag; } set { this[nameof(LevelIncreased)].Flag = value; } }
        public UArray<ChallengeInfo> UpdatedChallenges { get { return new UArray<ChallengeInfo>(this[nameof(UpdatedChallenges)].Address); } }
        public UArray<SeasonEvent> CompletedEvents { get { return new UArray<SeasonEvent>(this[nameof(CompletedEvents)].Address); } }
        public Texture2D EndScreenImage { get { return this[nameof(EndScreenImage)].As<Texture2D>(); } set { this["EndScreenImage"] = value; } }
        public Texture2D EndScreenResourceIcon { get { return this[nameof(EndScreenResourceIcon)].As<Texture2D>(); } set { this["EndScreenResourceIcon"] = value; } }
    }
    public class SeasonEvent : Object
    {
        public SeasonEvent(nint addr) : base(addr) { }
        public SeasonEventData Event { get { return this[nameof(Event)].As<SeasonEventData>(); } set { this["Event"] = value; } }
        public int Count { get { return this[nameof(Count)].GetValue<int>(); } set { this[nameof(Count)].SetValue<int>(value); } }
    }
    public class FSDServerListResponse : Object
    {
        public FSDServerListResponse(nint addr) : base(addr) { }
        public UArray<FSDServerListEntryModel> Lobbies { get { return new UArray<FSDServerListEntryModel>(this[nameof(Lobbies)].Address); } }
    }
    public class FSDServerListEntryModel : Object
    {
        public FSDServerListEntryModel(nint addr) : base(addr) { }
        public Object ID { get { return this[nameof(ID)]; } set { this[nameof(ID)] = value; } }
        public Object DRG_SERVERNAME { get { return this[nameof(DRG_SERVERNAME)]; } set { this[nameof(DRG_SERVERNAME)] = value; } }
        public Object DRG_SERVERNAME_SAN { get { return this[nameof(DRG_SERVERNAME_SAN)]; } set { this[nameof(DRG_SERVERNAME_SAN)] = value; } }
        public int DRG_GLOBALMISSION_SEED { get { return this[nameof(DRG_GLOBALMISSION_SEED)].GetValue<int>(); } set { this[nameof(DRG_GLOBALMISSION_SEED)].SetValue<int>(value); } }
        public int DRG_SEASON { get { return this[nameof(DRG_SEASON)].GetValue<int>(); } set { this[nameof(DRG_SEASON)].SetValue<int>(value); } }
        public int DRG_MISSION_SEED { get { return this[nameof(DRG_MISSION_SEED)].GetValue<int>(); } set { this[nameof(DRG_MISSION_SEED)].SetValue<int>(value); } }
        public int DRG_DIFF { get { return this[nameof(DRG_DIFF)].GetValue<int>(); } set { this[nameof(DRG_DIFF)].SetValue<int>(value); } }
        public Object DRG_DIFF_MOD { get { return this[nameof(DRG_DIFF_MOD)]; } set { this[nameof(DRG_DIFF_MOD)] = value; } }
        public int DRG_GAMESTATE { get { return this[nameof(DRG_GAMESTATE)].GetValue<int>(); } set { this[nameof(DRG_GAMESTATE)].SetValue<int>(value); } }
        public int DRG_PWREQUIRED { get { return this[nameof(DRG_PWREQUIRED)].GetValue<int>(); } set { this[nameof(DRG_PWREQUIRED)].SetValue<int>(value); } }
        public int DRG_PRIVATE { get { return this[nameof(DRG_PRIVATE)].GetValue<int>(); } set { this[nameof(DRG_PRIVATE)].SetValue<int>(value); } }
        public int DRG_NUMPLAYERS { get { return this[nameof(DRG_NUMPLAYERS)].GetValue<int>(); } set { this[nameof(DRG_NUMPLAYERS)].SetValue<int>(value); } }
        public Object DRG_CLASSES { get { return this[nameof(DRG_CLASSES)]; } set { this[nameof(DRG_CLASSES)] = value; } }
        public int DRG_CLASSLOCK { get { return this[nameof(DRG_CLASSLOCK)].GetValue<int>(); } set { this[nameof(DRG_CLASSLOCK)].SetValue<int>(value); } }
        public int DRG_FULL { get { return this[nameof(DRG_FULL)].GetValue<int>(); } set { this[nameof(DRG_FULL)].SetValue<int>(value); } }
        public Object DRG_REGION { get { return this[nameof(DRG_REGION)]; } set { this[nameof(DRG_REGION)] = value; } }
        public Object DRG_START { get { return this[nameof(DRG_START)]; } set { this[nameof(DRG_START)] = value; } }
        public int DRG_VERSION { get { return this[nameof(DRG_VERSION)].GetValue<int>(); } set { this[nameof(DRG_VERSION)].SetValue<int>(value); } }
        public Object HostUserID { get { return this[nameof(HostUserID)]; } set { this[nameof(HostUserID)] = value; } }
        public Object DRG_MISSIONSTRUCTURE { get { return this[nameof(DRG_MISSIONSTRUCTURE)]; } set { this[nameof(DRG_MISSIONSTRUCTURE)] = value; } }
        public Object P2PAddr { get { return this[nameof(P2PAddr)]; } set { this[nameof(P2PAddr)] = value; } }
        public int P2PPORT { get { return this[nameof(P2PPORT)].GetValue<int>(); } set { this[nameof(P2PPORT)].SetValue<int>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public UArray<FSDServerListEntryModModel> Mods { get { return new UArray<FSDServerListEntryModModel>(this[nameof(Mods)].Address); } }
    }
    public class FSDServerListEntryModModel : Object
    {
        public FSDServerListEntryModModel(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public int Category { get { return this[nameof(Category)].GetValue<int>(); } set { this[nameof(Category)].SetValue<int>(value); } }
        public Object Version { get { return this[nameof(Version)]; } set { this[nameof(Version)] = value; } }
    }
    public class FSDServerListRequest : Object
    {
        public FSDServerListRequest(nint addr) : base(addr) { }
        public Object AuthenticationTicket { get { return this[nameof(AuthenticationTicket)]; } set { this[nameof(AuthenticationTicket)] = value; } }
        public Object IgnoreId { get { return this[nameof(IgnoreId)]; } set { this[nameof(IgnoreId)] = value; } }
        public int Distance { get { return this[nameof(Distance)].GetValue<int>(); } set { this[nameof(Distance)].SetValue<int>(value); } }
        public int DRG_PWREQUIRED { get { return this[nameof(DRG_PWREQUIRED)].GetValue<int>(); } set { this[nameof(DRG_PWREQUIRED)].SetValue<int>(value); } }
        public Object DRG_REGION { get { return this[nameof(DRG_REGION)]; } set { this[nameof(DRG_REGION)] = value; } }
        public int DRG_VERSION { get { return this[nameof(DRG_VERSION)].GetValue<int>(); } set { this[nameof(DRG_VERSION)].SetValue<int>(value); } }
        public int DifficultyBitset { get { return this[nameof(DifficultyBitset)].GetValue<int>(); } set { this[nameof(DifficultyBitset)].SetValue<int>(value); } }
        public int SeasonBitset { get { return this[nameof(SeasonBitset)].GetValue<int>(); } set { this[nameof(SeasonBitset)].SetValue<int>(value); } }
        public int MissionSeed { get { return this[nameof(MissionSeed)].GetValue<int>(); } set { this[nameof(MissionSeed)].SetValue<int>(value); } }
        public int GlobalMissionSeed { get { return this[nameof(GlobalMissionSeed)].GetValue<int>(); } set { this[nameof(GlobalMissionSeed)].SetValue<int>(value); } }
        public Object SearchString { get { return this[nameof(SearchString)]; } set { this[nameof(SearchString)] = value; } }
        public bool DeepDive { get { return this[nameof(DeepDive)].Flag; } set { this[nameof(DeepDive)].Flag = value; } }
        public Object Platform { get { return this[nameof(Platform)]; } set { this[nameof(Platform)] = value; } }
    }
    public class FSDSteamServerListRequest : FSDServerListRequest
    {
        public FSDSteamServerListRequest(nint addr) : base(addr) { }
        public Object SteamTicket { get { return this[nameof(SteamTicket)]; } set { this[nameof(SteamTicket)] = value; } }
        public Object SteamPingLoc { get { return this[nameof(SteamPingLoc)]; } set { this[nameof(SteamPingLoc)] = value; } }
        public UArray<int> GameTypes { get { return new UArray<int>(this[nameof(GameTypes)].Address); } }
    }
    public class FriendInfo : Object
    {
        public FriendInfo(nint addr) : base(addr) { }
        public Object DisplayName { get { return this[nameof(DisplayName)]; } set { this[nameof(DisplayName)] = value; } }
        public Object RealName { get { return this[nameof(RealName)]; } set { this[nameof(RealName)] = value; } }
        public Object UserId { get { return this[nameof(UserId)]; } set { this[nameof(UserId)] = value; } }
        public bool IsOnline { get { return this[nameof(IsOnline)].Flag; } set { this[nameof(IsOnline)].Flag = value; } }
        public bool IsPlaying { get { return this[nameof(IsPlaying)].Flag; } set { this[nameof(IsPlaying)].Flag = value; } }
        public bool IsPlayingThisGame { get { return this[nameof(IsPlayingThisGame)].Flag; } set { this[nameof(IsPlayingThisGame)].Flag = value; } }
        public bool IsJoinable { get { return this[nameof(IsJoinable)].Flag; } set { this[nameof(IsJoinable)].Flag = value; } }
        public Object sessionId { get { return this[nameof(sessionId)]; } set { this[nameof(sessionId)] = value; } }
        public bool HasVoiceSupport { get { return this[nameof(HasVoiceSupport)].Flag; } set { this[nameof(HasVoiceSupport)].Flag = value; } }
        public Object PresenceStatus { get { return this[nameof(PresenceStatus)]; } set { this[nameof(PresenceStatus)] = value; } }
    }
    public class LookupSessionResponse : Object
    {
        public LookupSessionResponse(nint addr) : base(addr) { }
        public bool Valid { get { return this[nameof(Valid)].Flag; } set { this[nameof(Valid)].Flag = value; } }
        public Object LobbyId { get { return this[nameof(LobbyId)]; } set { this[nameof(LobbyId)] = value; } }
        public Object P2PAddr { get { return this[nameof(P2PAddr)]; } set { this[nameof(P2PAddr)] = value; } }
        public int P2PPORT { get { return this[nameof(P2PPORT)].GetValue<int>(); } set { this[nameof(P2PPORT)].SetValue<int>(value); } }
    }
    public class LookupSessionRequest : Object
    {
        public LookupSessionRequest(nint addr) : base(addr) { }
        public Object SessionKey { get { return this[nameof(SessionKey)]; } set { this[nameof(SessionKey)] = value; } }
    }
    public class StopSessionResponse : Object
    {
        public StopSessionResponse(nint addr) : base(addr) { }
        public bool success { get { return this[nameof(success)].Flag; } set { this[nameof(success)].Flag = value; } }
    }
    public class StopSessionRequest : Object
    {
        public StopSessionRequest(nint addr) : base(addr) { }
        public Object SessionKey { get { return this[nameof(SessionKey)]; } set { this[nameof(SessionKey)] = value; } }
    }
    public class SessionUpdateResponse : Object
    {
        public SessionUpdateResponse(nint addr) : base(addr) { }
        public bool success { get { return this[nameof(success)].Flag; } set { this[nameof(success)].Flag = value; } }
    }
    public class SessionUpdateRequest : Object
    {
        public SessionUpdateRequest(nint addr) : base(addr) { }
        public Object SessionKey { get { return this[nameof(SessionKey)]; } set { this[nameof(SessionKey)] = value; } }
        public int NumPlayers { get { return this[nameof(NumPlayers)].GetValue<int>(); } set { this[nameof(NumPlayers)].SetValue<int>(value); } }
    }
    public class RegisterSessionResponse : Object
    {
        public RegisterSessionResponse(nint addr) : base(addr) { }
        public Object SessionKey { get { return this[nameof(SessionKey)]; } set { this[nameof(SessionKey)] = value; } }
    }
    public class RegisterSessionRequest : Object
    {
        public RegisterSessionRequest(nint addr) : base(addr) { }
        public Object ServerName { get { return this[nameof(ServerName)]; } set { this[nameof(ServerName)] = value; } }
        public int NumPlayers { get { return this[nameof(NumPlayers)].GetValue<int>(); } set { this[nameof(NumPlayers)].SetValue<int>(value); } }
        public Object LobbyId { get { return this[nameof(LobbyId)]; } set { this[nameof(LobbyId)] = value; } }
        public Object P2PAddr { get { return this[nameof(P2PAddr)]; } set { this[nameof(P2PAddr)] = value; } }
        public int P2PPORT { get { return this[nameof(P2PPORT)].GetValue<int>(); } set { this[nameof(P2PPORT)].SetValue<int>(value); } }
    }
    public class AttachMesh : Object
    {
        public AttachMesh(nint addr) : base(addr) { }
        public bool ApplyPhysics { get { return this[nameof(ApplyPhysics)].Flag; } set { this[nameof(ApplyPhysics)].Flag = value; } }
        public Object Mesh { get { return this[nameof(Mesh)]; } set { this[nameof(Mesh)] = value; } }
        public Object AttachSocket { get { return this[nameof(AttachSocket)]; } set { this[nameof(AttachSocket)] = value; } }
        public Object AnimBlueprint { get { return this[nameof(AnimBlueprint)]; } set { this[nameof(AnimBlueprint)] = value; } }
        public Vector Scale { get { return this[nameof(Scale)].As<Vector>(); } set { this["Scale"] = value; } }
    }
    public class SoundClassManagerItem : Object
    {
        public SoundClassManagerItem(nint addr) : base(addr) { }
    }
    public class SoundMixManagerItem : Object
    {
        public SoundMixManagerItem(nint addr) : base(addr) { }
        public SoundMix mix { get { return this[nameof(mix)].As<SoundMix>(); } set { this["mix"] = value; } }
    }
    public class SpiderAnimInstanceProxy : AnimInstanceProxy
    {
        public SpiderAnimInstanceProxy(nint addr) : base(addr) { }
    }
    public class RandomWalkCycleEntry : Object
    {
        public RandomWalkCycleEntry(nint addr) : base(addr) { }
        public float RandomSelectionWeight { get { return this[nameof(RandomSelectionWeight)].GetValue<float>(); } set { this[nameof(RandomSelectionWeight)].SetValue<float>(value); } }
        public RandRange Duration { get { return this[nameof(Duration)].As<RandRange>(); } set { this["Duration"] = value; } }
        public AnimSequence Animation { get { return this[nameof(Animation)].As<AnimSequence>(); } set { this["Animation"] = value; } }
        public float CoolDown { get { return this[nameof(CoolDown)].GetValue<float>(); } set { this[nameof(CoolDown)].SetValue<float>(value); } }
        public float LastTimePlayed { get { return this[nameof(LastTimePlayed)].GetValue<float>(); } set { this[nameof(LastTimePlayed)].SetValue<float>(value); } }
    }
    public class CablePathSettings : Object
    {
        public CablePathSettings(nint addr) : base(addr) { }
        public DeepPathFinderType PathType { get { return (DeepPathFinderType)this[nameof(PathType)].GetValue<int>(); } set { this[nameof(PathType)].SetValue<int>((int)value); } }
        public DeepPathFinderSize PathSize { get { return (DeepPathFinderSize)this[nameof(PathSize)].GetValue<int>(); } set { this[nameof(PathSize)].SetValue<int>((int)value); } }
        public DeepPathFinderPreference PathPreference { get { return (DeepPathFinderPreference)this[nameof(PathPreference)].GetValue<int>(); } set { this[nameof(PathPreference)].SetValue<int>((int)value); } }
        public float MinStepSize { get { return this[nameof(MinStepSize)].GetValue<float>(); } set { this[nameof(MinStepSize)].SetValue<float>(value); } }
        public float MaxStepSize { get { return this[nameof(MaxStepSize)].GetValue<float>(); } set { this[nameof(MaxStepSize)].SetValue<float>(value); } }
        public float MaxNoiseY { get { return this[nameof(MaxNoiseY)].GetValue<float>(); } set { this[nameof(MaxNoiseY)].SetValue<float>(value); } }
        public float MinSurfaceHeight { get { return this[nameof(MinSurfaceHeight)].GetValue<float>(); } set { this[nameof(MinSurfaceHeight)].SetValue<float>(value); } }
        public float MaxSurfaceHeight { get { return this[nameof(MaxSurfaceHeight)].GetValue<float>(); } set { this[nameof(MaxSurfaceHeight)].SetValue<float>(value); } }
    }
    public class HookData : Object
    {
        public HookData(nint addr) : base(addr) { }
        public Vector_NetQuantize TargetLocation { get { return this[nameof(TargetLocation)].As<Vector_NetQuantize>(); } set { this["TargetLocation"] = value; } }
        public bool IsExtending { get { return this[nameof(IsExtending)].Flag; } set { this[nameof(IsExtending)].Flag = value; } }
    }
    public class SplineTrailMaterial : Object
    {
        public SplineTrailMaterial(nint addr) : base(addr) { }
        public Object Material { get { return this[nameof(Material)]; } set { this[nameof(Material)] = value; } }
        public Object slotName { get { return this[nameof(slotName)]; } set { this[nameof(slotName)] = value; } }
        public int SlotIndex { get { return this[nameof(SlotIndex)].GetValue<int>(); } set { this[nameof(SlotIndex)].SetValue<int>(value); } }
    }
    public class ActiveStatusEffectBank : Object
    {
        public ActiveStatusEffectBank(nint addr) : base(addr) { }
        public StatusEffect Key { get { return this[nameof(Key)].As<StatusEffect>(); } set { this["Key"] = value; } }
        public StatusEffect ActiveEffect { get { return this[nameof(ActiveEffect)].As<StatusEffect>(); } set { this["ActiveEffect"] = value; } }
        public UArray<ActiveStatusEffect> Effects { get { return new UArray<ActiveStatusEffect>(this[nameof(Effects)].Address); } }
    }
    public class ActiveStatusEffect : Object
    {
        public ActiveStatusEffect(nint addr) : base(addr) { }
        public Object Owner { get { return this[nameof(Owner)]; } set { this[nameof(Owner)] = value; } }
        public Object Instigator { get { return this[nameof(Instigator)]; } set { this[nameof(Instigator)] = value; } }
    }
    public class HeatSource : Object
    {
        public HeatSource(nint addr) : base(addr) { }
        public float temperature { get { return this[nameof(temperature)].GetValue<float>(); } set { this[nameof(temperature)].SetValue<float>(value); } }
        public int Intensity { get { return this[nameof(Intensity)].GetValue<int>(); } set { this[nameof(Intensity)].SetValue<int>(value); } }
    }
    public class TentacleAnimInstanceProxy : AnimInstanceProxy
    {
        public TentacleAnimInstanceProxy(nint addr) : base(addr) { }
    }
    public class AnimNode_Tentacle : AnimNode_SkeletalControlBase
    {
        public AnimNode_Tentacle(nint addr) : base(addr) { }
        public UArray<BoneReference> BonesToModify { get { return new UArray<BoneReference>(this[nameof(BonesToModify)].Address); } }
    }
    public class TentacleTarget : Object
    {
        public TentacleTarget(nint addr) : base(addr) { }
        public Vector_NetQuantize Location { get { return this[nameof(Location)].As<Vector_NetQuantize>(); } set { this["Location"] = value; } }
        public Rotator Rotation { get { return this[nameof(Rotation)].As<Rotator>(); } set { this["Rotation"] = value; } }
        public float MovementDuration { get { return this[nameof(MovementDuration)].GetValue<float>(); } set { this[nameof(MovementDuration)].SetValue<float>(value); } }
        public bool UseSpring { get { return this[nameof(UseSpring)].Flag; } set { this[nameof(UseSpring)].Flag = value; } }
    }
    public class TerminatorTarget : TentacleTarget
    {
        public TerminatorTarget(nint addr) : base(addr) { }
        public Object TargetActor { get { return this[nameof(TargetActor)]; } set { this[nameof(TargetActor)] = value; } }
    }
    public class TerminatorTalkMaterial : Object
    {
        public TerminatorTalkMaterial(nint addr) : base(addr) { }
        public MaterialInstanceDynamic Material { get { return this[nameof(Material)].As<MaterialInstanceDynamic>(); } set { this["Material"] = value; } }
        public float BasePower { get { return this[nameof(BasePower)].GetValue<float>(); } set { this[nameof(BasePower)].SetValue<float>(value); } }
        public float AmplitudeMultiplier { get { return this[nameof(AmplitudeMultiplier)].GetValue<float>(); } set { this[nameof(AmplitudeMultiplier)].SetValue<float>(value); } }
    }
    public class TerminatorShoutState : Object
    {
        public TerminatorShoutState(nint addr) : base(addr) { }
        public Object Name { get { return this[nameof(Name)]; } set { this[nameof(Name)] = value; } }
        public UArray<SoundCue> Shouts { get { return new UArray<SoundCue>(this[nameof(Shouts)].Address); } }
        public bool Loop { get { return this[nameof(Loop)].Flag; } set { this[nameof(Loop)].Flag = value; } }
        public float MaxRandomShoutDelay { get { return this[nameof(MaxRandomShoutDelay)].GetValue<float>(); } set { this[nameof(MaxRandomShoutDelay)].SetValue<float>(value); } }
        public float MinRandomShoutDelay { get { return this[nameof(MinRandomShoutDelay)].GetValue<float>(); } set { this[nameof(MinRandomShoutDelay)].SetValue<float>(value); } }
        public bool Interruptable { get { return this[nameof(Interruptable)].Flag; } set { this[nameof(Interruptable)].Flag = value; } }
        public bool PreventSubsequentDuplicate { get { return this[nameof(PreventSubsequentDuplicate)].Flag; } set { this[nameof(PreventSubsequentDuplicate)].Flag = value; } }
    }
    public class TestTerrainMaterialDecalItem : Object
    {
        public TestTerrainMaterialDecalItem(nint addr) : base(addr) { }
        public UArray<TerrainMaterial> Materials { get { return new UArray<TerrainMaterial>(this[nameof(Materials)].Address); } }
        public UArray<DecalData> Decals { get { return new UArray<DecalData>(this[nameof(Decals)].Address); } }
    }
    public class TestTerrainMaterialItem : Object
    {
        public TestTerrainMaterialItem(nint addr) : base(addr) { }
        public UArray<TerrainMaterial> Materials { get { return new UArray<TerrainMaterial>(this[nameof(Materials)].Address); } }
        public Object DigParticles { get { return this[nameof(DigParticles)]; } set { this[nameof(DigParticles)] = value; } }
        public Object PartialDigParticles { get { return this[nameof(PartialDigParticles)]; } set { this[nameof(PartialDigParticles)] = value; } }
        public Object CrumbleSound { get { return this[nameof(CrumbleSound)]; } set { this[nameof(CrumbleSound)] = value; } }
        public Object PartialMineSound { get { return this[nameof(PartialMineSound)]; } set { this[nameof(PartialMineSound)] = value; } }
    }
    public class TetherMessageSettings : Object
    {
        public TetherMessageSettings(nint addr) : base(addr) { }
    }
    public class TrackMovement : Object
    {
        public TrackMovement(nint addr) : base(addr) { }
        public int Direction { get { return this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
    }
    public class PipelineMovementData : Object
    {
        public PipelineMovementData(nint addr) : base(addr) { }
        public int Direction { get { return this[nameof(Direction)].GetValue<int>(); } set { this[nameof(Direction)].SetValue<int>(value); } }
        public float Distance { get { return this[nameof(Distance)].GetValue<float>(); } set { this[nameof(Distance)].SetValue<float>(value); } }
        public float Speed { get { return this[nameof(Speed)].GetValue<float>(); } set { this[nameof(Speed)].SetValue<float>(value); } }
        public bool UpToSpeed { get { return this[nameof(UpToSpeed)].Flag; } set { this[nameof(UpToSpeed)].Flag = value; } }
        public float Acceleration { get { return this[nameof(Acceleration)].GetValue<float>(); } set { this[nameof(Acceleration)].SetValue<float>(value); } }
        public Object PipelineSegment { get { return this[nameof(PipelineSegment)]; } set { this[nameof(PipelineSegment)] = value; } }
    }
    public class TreasureWeight : Object
    {
        public TreasureWeight(nint addr) : base(addr) { }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
        public Object RewarderClass { get { return this[nameof(RewarderClass)]; } set { this[nameof(RewarderClass)] = value; } }
    }
    public class SpecialChanceEventItem : Object
    {
        public SpecialChanceEventItem(nint addr) : base(addr) { }
        public SpecialEvent Event { get { return this[nameof(Event)].As<SpecialEvent>(); } set { this["Event"] = value; } }
        public float BaseChance { get { return this[nameof(BaseChance)].GetValue<float>(); } set { this[nameof(BaseChance)].SetValue<float>(value); } }
        public bool CanSpawnInDeepDive { get { return this[nameof(CanSpawnInDeepDive)].Flag; } set { this[nameof(CanSpawnInDeepDive)].Flag = value; } }
    }
    public class VanityNode : Object
    {
        public VanityNode(nint addr) : base(addr) { }
        public Reward Reward { get { return this[nameof(Reward)].As<Reward>(); } set { this["Reward"] = value; } }
        public int NodeID { get { return this[nameof(NodeID)].GetValue<int>(); } set { this[nameof(NodeID)].SetValue<int>(value); } }
        public UArray<int> ConnectedNodes { get { return new UArray<int>(this[nameof(ConnectedNodes)].Address); } }
        public bool bIsBig { get { return this[nameof(bIsBig)].Flag; } set { this[nameof(bIsBig)].Flag = value; } }
        public bool bIsStartingNode { get { return this[nameof(bIsStartingNode)].Flag; } set { this[nameof(bIsStartingNode)].Flag = value; } }
        public Vector2D Position { get { return this[nameof(Position)].As<Vector2D>(); } set { this["Position"] = value; } }
    }
    public class TunnelNode : RoomNodeBase
    {
        public TunnelNode(nint addr) : base(addr) { }
        public int EntranceRoomID { get { return this[nameof(EntranceRoomID)].GetValue<int>(); } set { this[nameof(EntranceRoomID)].SetValue<int>(value); } }
        public int ExitRoomID { get { return this[nameof(ExitRoomID)].GetValue<int>(); } set { this[nameof(ExitRoomID)].SetValue<int>(value); } }
        public RoomEntrance Entrance { get { return this[nameof(Entrance)].As<RoomEntrance>(); } set { this["Entrance"] = value; } }
        public RoomEntrance Exit { get { return this[nameof(Exit)].As<RoomEntrance>(); } set { this["Exit"] = value; } }
        public TunnelParameters ParametersOverride { get { return this[nameof(ParametersOverride)].As<TunnelParameters>(); } set { this["ParametersOverride"] = value; } }
        public TunnelPath Path { get { return this[nameof(Path)].As<TunnelPath>(); } set { this["Path"] = value; } }
        public int ID { get { return this[nameof(ID)].GetValue<int>(); } set { this[nameof(ID)].SetValue<int>(value); } }
        public Vector DirtStartLocation { get { return this[nameof(DirtStartLocation)].As<Vector>(); } set { this["DirtStartLocation"] = value; } }
        public bool AddDirt { get { return this[nameof(AddDirt)].Flag; } set { this[nameof(AddDirt)].Flag = value; } }
        public float WeightedResourceAmount { get { return this[nameof(WeightedResourceAmount)].GetValue<float>(); } set { this[nameof(WeightedResourceAmount)].SetValue<float>(value); } }
    }
    public class TunnelPath : Object
    {
        public TunnelPath(nint addr) : base(addr) { }
        public UArray<Vector> Path { get { return new UArray<Vector>(this[nameof(Path)].Address); } }
    }
    public class TunnelSettingItem : Object
    {
        public TunnelSettingItem(nint addr) : base(addr) { }
        public TunnelSegmentSetting SegmentSetting { get { return this[nameof(SegmentSetting)].As<TunnelSegmentSetting>(); } set { this["SegmentSetting"] = value; } }
        public Int32Interval SegmentSize { get { return this[nameof(SegmentSize)].As<Int32Interval>(); } set { this["SegmentSize"] = value; } }
    }
    public class TutorialHint : Object
    {
        public TutorialHint(nint addr) : base(addr) { }
        public Object Text { get { return this[nameof(Text)]; } set { this[nameof(Text)] = value; } }
        public Object TaskText { get { return this[nameof(TaskText)]; } set { this[nameof(TaskText)] = value; } }
        public Object Title { get { return this[nameof(Title)]; } set { this[nameof(Title)] = value; } }
        public Object Image { get { return this[nameof(Image)]; } set { this[nameof(Image)] = value; } }
    }
    public class HeightenedSenseTracker : Object
    {
        public HeightenedSenseTracker(nint addr) : base(addr) { }
        public Object Actor { get { return this[nameof(Actor)]; } set { this[nameof(Actor)] = value; } }
        public Object HealthComponent { get { return this[nameof(HealthComponent)]; } set { this[nameof(HealthComponent)] = value; } }
        public Object AttackingPoint { get { return this[nameof(AttackingPoint)]; } set { this[nameof(AttackingPoint)] = value; } }
    }
    public class InfectionPoint : Object
    {
        public InfectionPoint(nint addr) : base(addr) { }
        public bool IsInfected { get { return this[nameof(IsInfected)].Flag; } set { this[nameof(IsInfected)].Flag = value; } }
        public bool IsVacuumed { get { return this[nameof(IsVacuumed)].Flag; } set { this[nameof(IsVacuumed)].Flag = value; } }
    }
    public class MovementModeCombo : Object
    {
        public MovementModeCombo(nint addr) : base(addr) { }
        public byte Mode { get { return this[nameof(Mode)].GetValue<byte>(); } set { this[nameof(Mode)].SetValue<byte>(value); } }
        public byte CustomMode { get { return this[nameof(CustomMode)].GetValue<byte>(); } set { this[nameof(CustomMode)].SetValue<byte>(value); } }
    }
    public class VanityAnimEffect : Object
    {
        public VanityAnimEffect(nint addr) : base(addr) { }
        public NiagaraSystem Effect { get { return this[nameof(Effect)].As<NiagaraSystem>(); } set { this["Effect"] = value; } }
        public Object AttachSocket { get { return this[nameof(AttachSocket)]; } set { this[nameof(AttachSocket)] = value; } }
        public float StartDelay { get { return this[nameof(StartDelay)].GetValue<float>(); } set { this[nameof(StartDelay)].SetValue<float>(value); } }
    }
    public class VanityTestCharacterItem : Object
    {
        public VanityTestCharacterItem(nint addr) : base(addr) { }
        public SkeletalMesh Mesh { get { return this[nameof(Mesh)].As<SkeletalMesh>(); } set { this["Mesh"] = value; } }
        public Object AnimBP { get { return this[nameof(AnimBP)]; } set { this[nameof(AnimBP)] = value; } }
    }
    public class VanityTagSettings : Object
    {
        public VanityTagSettings(nint addr) : base(addr) { }
        public VanityTagsGeneral GeneralTags { get { return this[nameof(GeneralTags)].As<VanityTagsGeneral>(); } set { this["GeneralTags"] = value; } }
    }
    public class VanityTagsGeneral : Object
    {
        public VanityTagsGeneral(nint addr) : base(addr) { }
        public TagVanity DLC { get { return this[nameof(DLC)].As<TagVanity>(); } set { this["DLC"] = value; } }
        public TagVanity Festive { get { return this[nameof(Festive)].As<TagVanity>(); } set { this["Festive"] = value; } }
        public TagVanity Serious { get { return this[nameof(Serious)].As<TagVanity>(); } set { this["Serious"] = value; } }
    }
    public class VanityTagCategories : Object
    {
        public VanityTagCategories(nint addr) : base(addr) { }
        public TagVanityCategory General { get { return this[nameof(General)].As<TagVanityCategory>(); } set { this["General"] = value; } }
        public TagVanityCategory Seasons { get { return this[nameof(Seasons)].As<TagVanityCategory>(); } set { this["Seasons"] = value; } }
        public TagVanityCategory Headwear { get { return this[nameof(Headwear)].As<TagVanityCategory>(); } set { this["Headwear"] = value; } }
        public TagVanityCategory Beards { get { return this[nameof(Beards)].As<TagVanityCategory>(); } set { this["Beards"] = value; } }
        public TagVanityCategory Moustaches { get { return this[nameof(Moustaches)].As<TagVanityCategory>(); } set { this["Moustaches"] = value; } }
        public TagVanityCategory Eyebrows { get { return this[nameof(Eyebrows)].As<TagVanityCategory>(); } set { this["Eyebrows"] = value; } }
        public TagVanityCategory Sideburns { get { return this[nameof(Sideburns)].As<TagVanityCategory>(); } set { this["Sideburns"] = value; } }
    }
    public class VanityEventSource : Object
    {
        public VanityEventSource(nint addr) : base(addr) { }
        public Object EventName { get { return this[nameof(EventName)]; } set { this[nameof(EventName)] = value; } }
        public Texture2D EventIcon { get { return this[nameof(EventIcon)].As<Texture2D>(); } set { this["EventIcon"] = value; } }
    }
    public class TattooArmorItem : Object
    {
        public TattooArmorItem(nint addr) : base(addr) { }
        public VanityTattoo Tattoo { get { return this[nameof(Tattoo)].As<VanityTattoo>(); } set { this["Tattoo"] = value; } }
        public bool IsLeftArm { get { return this[nameof(IsLeftArm)].Flag; } set { this[nameof(IsLeftArm)].Flag = value; } }
        public bool FlipTexture { get { return this[nameof(FlipTexture)].Flag; } set { this[nameof(FlipTexture)].Flag = value; } }
    }
    public class VanityMasterySettings : Object
    {
        public VanityMasterySettings(nint addr) : base(addr) { }
        public int TotalMasteryLevels { get { return this[nameof(TotalMasteryLevels)].GetValue<int>(); } set { this[nameof(TotalMasteryLevels)].SetValue<int>(value); } }
        public int XP_RequiredPerLevel { get { return this[nameof(XP_RequiredPerLevel)].GetValue<int>(); } set { this[nameof(XP_RequiredPerLevel)].SetValue<int>(value); } }
        public int XP_ForCreditSpent { get { return this[nameof(XP_ForCreditSpent)].GetValue<int>(); } set { this[nameof(XP_ForCreditSpent)].SetValue<int>(value); } }
        public int XP_ForMineralSpent { get { return this[nameof(XP_ForMineralSpent)].GetValue<int>(); } set { this[nameof(XP_ForMineralSpent)].SetValue<int>(value); } }
        public int FashionitesLevelUpReward { get { return this[nameof(FashionitesLevelUpReward)].GetValue<int>(); } set { this[nameof(FashionitesLevelUpReward)].SetValue<int>(value); } }
    }
    public class VanitySlotCharacter : Object
    {
        public VanitySlotCharacter(nint addr) : base(addr) { }
        public Object Characters { get { return this[nameof(Characters)]; } set { this[nameof(Characters)] = value; } }
    }
    public class VanitySlotStore : Object
    {
        public VanitySlotStore(nint addr) : base(addr) { }
        public UArray<VanityItem> VanityItems { get { return new UArray<VanityItem>(this[nameof(VanityItems)].Address); } }
    }
    public class FakeSawMover : Object
    {
        public FakeSawMover(nint addr) : base(addr) { }
        public Vector PrevPos { get { return this[nameof(PrevPos)].As<Vector>(); } set { this["PrevPos"] = value; } }
        public Vector NextPos { get { return this[nameof(NextPos)].As<Vector>(); } set { this["NextPos"] = value; } }
        public Vector Velocity { get { return this[nameof(Velocity)].As<Vector>(); } set { this["Velocity"] = value; } }
        public Plane Plane { get { return this[nameof(Plane)].As<Plane>(); } set { this["Plane"] = value; } }
        public CurveFloat VelOverTime { get { return this[nameof(VelOverTime)].As<CurveFloat>(); } set { this["VelOverTime"] = value; } }
        public float SpeedCof { get { return this[nameof(SpeedCof)].GetValue<float>(); } set { this[nameof(SpeedCof)].SetValue<float>(value); } }
        public float TickRate { get { return this[nameof(TickRate)].GetValue<float>(); } set { this[nameof(TickRate)].SetValue<float>(value); } }
        public float TickTime { get { return this[nameof(TickTime)].GetValue<float>(); } set { this[nameof(TickTime)].SetValue<float>(value); } }
        public float AccumulatedTime { get { return this[nameof(AccumulatedTime)].GetValue<float>(); } set { this[nameof(AccumulatedTime)].SetValue<float>(value); } }
        public float TotalTime { get { return this[nameof(TotalTime)].GetValue<float>(); } set { this[nameof(TotalTime)].SetValue<float>(value); } }
        public bool Moving { get { return this[nameof(Moving)].Flag; } set { this[nameof(Moving)].Flag = value; } }
        public float GravityTimer { get { return this[nameof(GravityTimer)].GetValue<float>(); } set { this[nameof(GravityTimer)].SetValue<float>(value); } }
    }
    public class SawFakeMoveState : FakeMoveState
    {
        public SawFakeMoveState(nint addr) : base(addr) { }
        public float GravityTimer { get { return this[nameof(GravityTimer)].GetValue<float>(); } set { this[nameof(GravityTimer)].SetValue<float>(value); } }
    }
    public class WeakpointChannel : Object
    {
        public WeakpointChannel(nint addr) : base(addr) { }
        public FSDPhysicalMaterial WeakPointMaterial { get { return this[nameof(WeakPointMaterial)].As<FSDPhysicalMaterial>(); } set { this["WeakPointMaterial"] = value; } }
        public int BoneIndex { get { return this[nameof(BoneIndex)].GetValue<int>(); } set { this[nameof(BoneIndex)].SetValue<int>(value); } }
        public MaterialInstanceDynamic Mid { get { return this[nameof(Mid)].As<MaterialInstanceDynamic>(); } set { this["Mid"] = value; } }
    }
    public class WeakpointTask : Object
    {
        public WeakpointTask(nint addr) : base(addr) { }
        public RichCurve GrowCurve { get { return this[nameof(GrowCurve)].As<RichCurve>(); } set { this["GrowCurve"] = value; } }
        public RichCurve FadeCurve { get { return this[nameof(FadeCurve)].As<RichCurve>(); } set { this["FadeCurve"] = value; } }
    }
    public class WeaponHitCounterEffectItem : Object
    {
        public WeaponHitCounterEffectItem(nint addr) : base(addr) { }
        public Object Target { get { return this[nameof(Target)]; } set { this[nameof(Target)] = value; } }
    }
    public class WeightedRoomSelector : Object
    {
        public WeightedRoomSelector(nint addr) : base(addr) { }
        public UArray<WeightedRoomSelectorItem> Items { get { return new UArray<WeightedRoomSelectorItem>(this[nameof(Items)].Address); } }
    }
    public class WeightedRoomSelectorItem : Object
    {
        public WeightedRoomSelectorItem(nint addr) : base(addr) { }
        public RoomGenerator Room { get { return this[nameof(Room)].As<RoomGenerator>(); } set { this["Room"] = value; } }
        public float Weight { get { return this[nameof(Weight)].GetValue<float>(); } set { this[nameof(Weight)].SetValue<float>(value); } }
    }
    public class XPSettings : Object
    {
        public XPSettings(nint addr) : base(addr) { }
        public float XP_PerGold { get { return this[nameof(XP_PerGold)].GetValue<float>(); } set { this[nameof(XP_PerGold)].SetValue<float>(value); } }
        public float XP_PerKill { get { return this[nameof(XP_PerKill)].GetValue<float>(); } set { this[nameof(XP_PerKill)].SetValue<float>(value); } }
        public float XP_OnSurvivedLevel { get { return this[nameof(XP_OnSurvivedLevel)].GetValue<float>(); } set { this[nameof(XP_OnSurvivedLevel)].SetValue<float>(value); } }
    }
    public class ZipLineConnectorHandler : Object
    {
        public ZipLineConnectorHandler(nint addr) : base(addr) { }
        public Object ConnectorClass { get { return this[nameof(ConnectorClass)]; } set { this[nameof(ConnectorClass)] = value; } }
        public ZipLineConnector Connector { get { return this[nameof(Connector)].As<ZipLineConnector>(); } set { this["Connector"] = value; } }
    }
    public class ZipLine : Object
    {
        public ZipLine(nint addr) : base(addr) { }
        public Vector Start { get { return this[nameof(Start)].As<Vector>(); } set { this["Start"] = value; } }
        public Vector End { get { return this[nameof(End)].As<Vector>(); } set { this["End"] = value; } }
    }
}
